/**
 * 개요
 * - 휴가관리에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - 휴가관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 휴가관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Repository("vcatnManageDAO")
public class VcatnManageDAO extends EgovComAbstractDAO {
	/**
	 * 휴가관리정보를 관리하기 위해 등록된 휴가관리 목록을 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return List - 휴가관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<VcatnManageVO> selectVcatnManageList(VcatnManageVO vcatnManageVO) throws Exception {
		return (List<VcatnManageVO>) list("vcatnManageDAO.selectVcatnManageList", vcatnManageVO);
	}
    /**
	 * 휴가관리목록 총 갯수를 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectVcatnManageListTotCnt(VcatnManageVO vcatnManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("vcatnManageDAO.selectVcatnManageListTotCnt", vcatnManageVO);
    }
	/**
	 * 등록된 휴가관리의 상세정보를 조회한다.
	 * @param 

	 * @return VcatnManageVO - 휴가관리 VO
	 */
	public VcatnManageVO selectVcatnManage(VcatnManageVO vcatnManageVO)  throws Exception {
		return (VcatnManageVO) selectByPk("vcatnManageDAO.selectVcatnManage", vcatnManageVO);
	}
	/**
	 * 휴가관리정보를 신규로 등록한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public void insertVcatnManage(VcatnManage vcatnManage) throws Exception {
		insert("vcatnManageDAO.insertVcatnManage", vcatnManage);
	}
	/**
	 * 기 등록된 휴가관리정보를 수정한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public void updtVcatnManage(VcatnManage vcatnManage) throws Exception {
		update("vcatnManageDAO.updateVcatnManage", vcatnManage);
	}
	/**
	 * 기 등록된 휴가관리정보를 삭제한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public void deleteVcatnManage(VcatnManage vcatnManage) throws Exception {
        delete("vcatnManageDAO.deleteVcatnManage",vcatnManage);
	}
    /**
	 * 휴가일자 중복여부 체크
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectVcatnManageDplctAt(VcatnManag

        return (Integer)getSqlMapClientTemplate().queryForObject("vcatnManageDAO.selectVcatnManageDplctAt", vcatnManageVO);
    }
    /*** 승인관련 ***/	
	/**
	 * 휴가관리정보 승인 처리를 위해 신청된 휴가관리 목록을 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return List - 휴가관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<VcatnManageVO> selectVcatnManageConfmList(VcatnManageVO vcatnManageVO) throws Exception {
		return (List<VcatnManageVO>) list("vcatnManageDAO.selectVcatnManageConfmList", vcatnManageVO);
	}
    /**
	 * 휴가관리정보 승인 처리를 위해 신청된 휴가관리 목록 총 갯수를 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectVcatnManageConfmListTotCnt(VcatnManageVO vcatnManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("vcatnManageDAO.selectVcatnManageConfmListTotCnt", vcatnManageVO);
    }
	/**
	 * 신청된 휴가를 승인처리한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public void updtVcatnManageConfm(VcatnManage vcatnManage) throws Ex
public class ManageLayoutBusiness implements ManageLayoutService {
	private static final String DEVELOP_CATALOG_ID = "developCatalogId";
	private static final String DEVELOP_CATALOG_NAME = "Develop";
	private static final String DEVELOP_MENU_ID_PREFIX = "developMenu";
	private static final String DEVELOP_LINK_ID_PREFIX = "developLink";
	private ManageUserService manageUserService;
	private ManageCatalogService manageCatalogService;
	private ManageMenuService manageMenuService;
	public ManageUserService getManageUserService() {
		return manageUserService;
	}
	public void setManageUserService(ManageUserService manageUserService) {
		this.manageUserService = manageUserService;
	}
	public ManageCatalogService getManageCatalogService() {
		return manageCatalogService;
	}
	public void setManageCatalogService(ManageCatalogService manageCatalogService) {
		this.manageCatalogService = manageCatalogService;
	}
	public ManageMenuService getManageMenuService() {
		return manageMenuService;
	}
	pub

		this.manageMenuService = manageMenuService;
	}
	@Override
	public List<ManageCatalog> queryManageCatalogs(String userId) {
		List<ManageCatalog> results = new ArrayList<ManageCatalog>();
		ManageUser manageUser = this.manageUserService.select(userId);
		if (manageUser != null) {
			List<ManageCatalog> manageCatalogs = null;
			if (manageUser.getPrerogative()) {
				manageCatalogs = this.manageCatalogService.select();
				ManageCatalog developManageCatalog = new ManageCatalog();
				developManageCatalog.setUuid(ManageLayoutBusiness.DEVELOP_CATALOG_ID);
				developManageCatalog.setName(ManageLayoutBusiness.DEVELOP_CATALOG_NAME);
				developManageCatalog.setSerial(0L);
				results.add(developManageCatalog);
			} else {
				manageCatalogs = this.manageCatalogService.selectByUserId(userId);
			}
			if (manageCatalogs != null) {
				results.addAll(manageCatalogs);
			}
		}
		return results;
	}
	private List<ManageMenu> queryDevelopManageMenus() {
		List<ManageMenu> results = new ArrayList

		List<ActionConfiguration> actionConfigurations = Action.getActionConfigurations();
		if (actionConfigurations != null) {
			for (ActionConfiguration actionConfiguration : actionConfigurations) {
				boolean hasMenu = false;
				ManageMenu manageMenu = new ManageMenu();
				String namespace = actionConfiguration.getNamespace();
				for (ManageMenu currentManageMenu : results) {
					if (namespace.equals(currentManageMenu.getName())) {
						manageMenu = currentManageMenu;
						hasMenu = true;
						break;
					}
				}
				if (!hasMenu) {
					String menuId = String.format("%s_%d", ManageLayoutBusiness.DEVELOP_MENU_ID_PREFIX, results.size());
					String menuName = namespace;
					manageMenu.setUuid(menuId);
					manageMenu.setName(menuName);
					manageMenu.setManageLinks(new HashSet<ManageLink>());
					results.add(manageMenu);
				}
				List<String> executes = actionConfiguration.getExecutes();
				if (executes != null) {
					Set<ManageLink> manageLinks = manageMenu.getManageLink

					for (String execute : executes) {
						ManageLink manageLink = new ManageLink();
						String linkId = String.format("%s_%d", ManageLayoutBusiness.DEVELOP_LINK_ID_PREFIX, manageLinks.size());
						String linkName = String.format("%s!%s.action", actionConfiguration.getName(), execute);
						String linkUrl = String.format("%s/%s!%s.action", namespace, actionConfiguration.getName(), execute);
						manageLink.setUuid(linkId);
						manageLink.setName(linkName);
						manageLink.setUrl(linkUrl);
						manageLinks.add(manageLink);
					}
				}
			}
		}
		return results;
	}
	@Override
	public List<ManageMenu> queryManageMenus(String userId, String catalogId) {
		List<ManageMenu> results = new ArrayList<ManageMenu>();
		ManageUser manageUser = this.manageUserService.select(userId);
		if (manageUser != null) {
			if (manageUser.getPrerogative()) {
				if (ManageLayoutBusiness.DEVELOP_CATALOG_ID.equals(catalogId)) {
					List<ManageMenu> developManageMenus = this.queryDevelopManageMenu
/**
 * 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성
 *
 * </pre>
 */
@Repository("roleManageDAO")
public class RoleManageDAO extends EgovAbstractDAO {
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception {
		return (RoleManageVO) selectByPk("roleManageDAO.selectRole", roleManageVO);
	}
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception {
		return (List<RoleManageVO>) list("roleManageDAO.selec

	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 등록
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void insertRole(RoleManage roleManage) throws Exception {
		insert("roleManageDAO.insertRole", roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void updateRole(RoleManage roleManage) throws Exception {
		update("roleManageDAO.updateRole", roleManage);
	}
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception {
		delete("roleManageDAO.deleteRole", roleManage);
	}
    /**
	 * 롤목록 총 갯수를 조회한다.
	 * @param roleManageVO RoleManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectRoleListTotCnt(RoleManageVO roleManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("roleManageDAO.selectAuthorListTotCnt", roleManage
/**
 * RSS태그관리를 처리하는 ServiceImpl Class 구현
 * @author 공통서비스 장동한
 * @since 2010.06.16
 * @version 1.0
 * @see <pre>
 * &lt;&lt; 개정이력(Modification Information) &gt;&gt;
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.07.03  장동한          최초 생성
 * 
 * </pre>
 */
@Service("egovRssManageService")
public class EgovRssTagManageServiceImpl extends AbstractServiceImpl 
        implements EgovRssTagManageService {
	/* RSS관리 DAO */
    @Resource(name = "rssManageDao")
    private RssTagManageDao dao;
    /* RSS ID Generator Service */
    @Resource(name = "egovRssTagManageIdGnrService")
    private EgovIdGnrService idgenService;
    /**
     * JDBC 테이블 목록을조회한다.
     * @return List -조회한목록이담긴List
     * @throws Exception
     */
    public List selectRssTagManageTableList() throws Exception {
    	return (List)dao.selectRssTagManageTableList();
    }
    /**
     * JDBC 테이블 컬럼 목록을 조회한다.
     * @param map - 컬럼조회정보
     * @return List -조회한목록이담긴Lis

     * @throws Exception
     */
    public List selectRssTagManageTableColumnList(Map map) throws Exception {
    	return (List)dao.selectRssTagManageTableColumnList(map);
    }
    /**
     * RSS태그관리를(을) 목록을 조회 한다.
     * @param rssManage -조회할 정보가 담긴 객체
     * @return List -조회한목록이담긴List
     * @throws Exception
     */
    public List selectRssTagManageList(RssManage rssManage) throws Exception {
    	return dao.selectRssTagManageList(rssManage);
    }
    /**
     * RSS태그관리를(을) 목록 전체 건수를(을) 조회한다.
     * @param searchVO -조회할 정보가 담긴 객체
     * @return int -조회한건수가담긴Integer
     * @throws Exception
     */
    public int selectRssTagManageListCnt(RssManage rssManage) throws Exception {
        return dao.selectRssTagManageListCnt(rssManage);
    }
    
    /**
     * RSS태그관리를(을) 상세조회 한다.
     * @param searchVO -조회할 정보가 담긴 객체
     * @return List -조회한목록이담긴List
     * @throws Exception
     */
    public RssManage selectRssTagManageDetail(RssManage rssManage) throws Exception {
        ret
@Component("facade")
public class FacadeImpl extends BaseFacadeImpl implements Facade {
	@Resource
	BaseAttributeService baseAttributeService;
	@Resource
	BaseAttributeSonService baseAttributeSonService;
	@Resource
	BaseBrandInfoService baseBrandInfoService;
	@Resource
	BaseClassLinkAttributeService baseClassLinkAttributeService;
	@Resource
	BaseClassService baseClassService;
	@Resource
	BaseDataService baseDataService;
	@Resource
	BasePdClazzService basePdClazzService;
	@Resource
	BasePopedomService basePopedomService;
	@Resource
	BaseProvinceService baseProvinceService;
	@Resource
	DeptInfoService deptInfoService;
	@Resource
	HelpContentService helpContentService;
	@Resource
	HelpInfoService helpInfoService;
	@Resource
	HelpModuleService helpModuleService;
	@Resource
	ModPopedomService modPopedomService;
	@Resource
	NewsAttachmentService newsAttachmentService;
	@Resource
	NewsContentService newsContentService;
	@Resource
	NewsInfoService newsInfoService;
	@Resource
	PdContentService 

	@Resource
	PdImgsService pdImgsService;
	@Resource
	PdInfoCustomAttrContentService pdInfoCustomAttrContentService;
	@Resource
	PdInfoCustomFieldContentService pdInfoCustomFieldContentService;
	@Resource
	PdInfoService pdInfoService;
	@Resource
	QaInfoService qaInfoService;
	@Resource
	RoleService roleService;
	@Resource
	RoleUserService roleUserService;
	@Resource
	SysModuleService sysModuleService;
	@Resource
	SysSettingService sysSettingService;
	@Resource
	UserInfoService userInfoService;
	@Resource
	MailAttachmentService mailAttachmentService;
	@Resource
	MailMainService mailMainService;
	@Resource
	MailPeopService mailPeopService;
	public BaseAttributeService getBaseAttributeService() {
		return baseAttributeService;
	}
	public BaseAttributeSonService getBaseAttributeSonService() {
		return baseAttributeSonService;
	}
	public BaseBrandInfoService getBaseBrandInfoService() {
		return baseBrandInfoService;
	}
	public BaseClassLinkAttributeService getBaseClassLinkAttributeService()

		return baseClassLinkAttributeService;
	}
	public BaseClassService getBaseClassService() {
		return baseClassService;
	}
	public BaseDataService getBaseDataService() {
		return baseDataService;
	}
	@Override
	public BasePdClazzService getBasePdClazzService() {
		return basePdClazzService;
	}
	public BasePopedomService getBasePopedomService() {
		return basePopedomService;
	}
	public BaseProvinceService getBaseProvinceService() {
		return baseProvinceService;
	}
	public DeptInfoService getDeptInfoService() {
		return deptInfoService;
	}
	public HelpContentService getHelpContentService() {
		return helpContentService;
	}
	public HelpInfoService getHelpInfoService() {
		return helpInfoService;
	}
	public HelpModuleService getHelpModuleService() {
		return helpModuleService;
	}
	public ModPopedomService getModPopedomService() {
		return modPopedomService;
	}
	public NewsAttachmentService getNewsAttachmentService() {
		return newsAttachmentService;
	}
	public NewsContentService getNewsCon

		return newsContentService;
	}
	public NewsInfoService getNewsInfoService() {
		return newsInfoService;
	}
	public PdContentService getPdContentService() {
		return pdContentService;
	}
	public PdImgsService getPdImgsService() {
		return pdImgsService;
	}
	public PdInfoCustomAttrContentService getPdInfoCustomAttrContentService() {
		return pdInfoCustomAttrContentService;
	}
	public PdInfoCustomFieldContentService getPdInfoCustomFieldContentService() {
		return pdInfoCustomFieldContentService;
	}
	public PdInfoService getPdInfoService() {
		return pdInfoService;
	}
	public QaInfoService getQaInfoService() {
		return qaInfoService;
	}
	public RoleService getRoleService() {
		return roleService;
	}
	public RoleUserService getRoleUserService() {
		return roleUserService;
	}
	public SysModuleService getSysModuleService() {
		return sysModuleService;
	}
	public SysSettingService getSysSettingService() {
		return sysSettingService;
	}
	public UserInfoService getUserInfoService() {
		return 
/**
 * The persistent class for the PROCESS_INSTANCE database table.
 * 
 */
@Entity
@Table(name="PROCESS_INSTANCE")
@NamedQuery(name="ProcessInstance.findAll", query="SELECT p FROM ProcessInstance p")
public class ProcessInstance implements Serializable {
	private static final long serialVersionUID = 1L;
	private long id;
	private String uniqueShortId;
	private String userDefinedId;
	private Date createTime;
	private Date lastTouched;	
	private List<ProcessData> processData;
	private ProcessType processType;
	private List<ProcessInstanceState> processInstanceStates;
	private List<ProcessAttachment> processAttachments;
	private List<ProcessNote> processNotes;
	public ProcessInstance() {
	}
	@GenericGenerator(name = "generator", strategy = "org.hibernate.id.enhanced.TableGenerator",parameters={@Parameter(name="segment_value",value="ProcessInstance")})
	@Id
	@GeneratedValue(generator="generator")
	public long getId() {
		return this.id;
	}
	public void setId(long id) {
		this.id = id;
	}

	@Column(name="UNIQUE_SHORT_ID")
	public String getUniqueShortId() {
		return this.uniqueShortId;
	}
	public void setUniqueShortId(String uniqueShortId) {
		this.uniqueShortId = uniqueShortId;
	}
	@Column(name="USER_DEFINED_ID")
	public String getUserDefinedId() {
		return this.userDefinedId;
	}
	public void setUserDefinedId(String userDefinedId) {
		this.userDefinedId = userDefinedId;
	}
	@Column(name="LAST_TOUCHED")
	public Date getLastTouched() {
		return lastTouched;
	}
	public void setLastTouched(Date lastTouched) {
		this.lastTouched = lastTouched;
	}
	@Column(name="CREATE_TIME")
	public Date getCreateTime() {
		return createTime;
	}
	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}
	@ManyToOne
	@JoinColumn(name="PROCESS_TYPE_ID")
	public ProcessType getProcessType() {
		return this.processType;
	}
	public void setProcessType(ProcessType processType) {
		this.processType = processType;
	}
	@OneToMany(mappedBy="processInstance")
	public List<Process

		return this.processData;
	}
	public void setProcessData(List<ProcessData> processData) {
		this.processData = processData;
	}
	public ProcessData addProcessData(ProcessData processData) {
		getProcessData().add(processData);
		processData.setProcessInstance(this);
		return processData;
	}
	public ProcessData removeProcessData(ProcessData processData) {
		getProcessData().remove(processData);
		processData.setProcessInstance(null);
		return processData;
	}
	@OneToMany(mappedBy="processInstance")
	public List<ProcessInstanceState> getProcessInstanceStates() {
		return this.processInstanceStates;
	}
	public void setProcessInstanceStates(List<ProcessInstanceState> processInstanceStates) {
		this.processInstanceStates = processInstanceStates;
	}
	public ProcessInstanceState addProcessInstanceState(ProcessInstanceState processInstanceState) {
		getProcessInstanceStates().add(processInstanceState);
		processInstanceState.setProcessInstance(this);
		return processInstanceState;
	}
	public P

		getProcessInstanceStates().remove(processInstanceState);
		processInstanceState.setProcessInstance(null);
		return processInstanceState;
	}
	@ManyToOne
	@JoinColumn(name="PROCESS_CURRENT_STATE_ID",nullable=true)
	public ProcessInstanceState getProcessInstanceState() {
		return processInstanceState;
	}
	public void setProcessInstanceState(ProcessInstanceState processInstanceState) {
		this.processInstanceState = processInstanceState;
	}
	@OneToMany(mappedBy="processInstance")
	public List<ProcessAttachment> getProcessAttachments() {
		return this.processAttachments;
	}
	public void setProcessAttachments(List<ProcessAttachment> processAttachments) {
		this.processAttachments = processAttachments;
	}
	public ProcessAttachment addProcessAttachment(ProcessAttachment processAttachment) {
		getProcessAttachments().add(processAttachment);
		processAttachment.setProcessInstance(this);
		return processAttachment;
	}
	public ProcessAttachment removeProcessAttachment(ProcessAttachment processAt
@XmlRootElement(name = "processMetric")
public class KnowledgeProcessMetricData {
    private Long id;
    private String name;
    private Long processStarted;
    private Long processCompleted;
    private Long processNodeTriggered;
    public KnowledgeProcessMetricData() {
    }
    public KnowledgeProcessMetricData(KnowledgeProcessMetric processMetric) {
        this.name = processMetric.getName();
        this.processStarted = processMetric.getProcessStarted();
        this.processCompleted = processMetric.getProcessCompleted();
        this.processNodeTriggered = processMetric.getProcessNodeTriggered();
    }
    @XmlElement
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    @XmlElement
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    @XmlElement
    public Long getProcessStarted() {
        return processStarted;
    }
    public voi
/**
 * @author Martin Schimak <martin.schimak@plexiti.com>
 */
public class ProcessInstanceAssertHasProcessDefinitionKeyTest extends ProcessAssertTestCase {
  @Rule
  public ActivitiRule processEngineRule = new ActivitiRule();
  @Test
  @Deployment(resources = {
    "ProcessInstanceAssert-hasProcessDefinitionKey-1.bpmn",
    "ProcessInstanceAssert-hasProcessDefinitionKey-2.bpmn"
  })
  public void testHasProcessDefinitionKey_Success() {
    ProcessInstance processInstance = runtimeService().startProcessInstanceByKey(
      "ProcessInstanceAssert-hasProcessDefinitionKey-1"
    );
    assertThat(processInstance).hasProcessDefinitionKey("ProcessInstanceAssert-hasProcessDefinitionKey-1");
  }
  @Test
  @Deployment(resources = {
    "ProcessInstanceAssert-hasProcessDefinitionKey-1.bpmn",
    "ProcessInstanceAssert-hasProcessDefinitionKey-2.bpmn"
  })
  public void testHasProcessDefinitionKey_Failure() {
    final ProcessInstance processInstance = runtimeService().startProcessInstanceByKey(

/**
 * 
 */
/**
 * @author Chathura C. Ekanayake
 *
 */
public class ProcessAssociation {
	private String processVersionId;
	private String processVersionNumber;
	private String processBranchName;
	private String processId;
	private String processName;
	public String getProcessId() {
		return processId;
	}
	public void setProcessId(String processId) {
		this.processId = processId;
	}
	public String getProcessVersionId() {
		return processVersionId;
	}
	public void setProcessVersionId(String processVersionId) {
		this.processVersionId = processVersionId;
	}
	public String getProcessVersionNumber() {
		return processVersionNumber;
	}
	public void setProcessVersionNumber(String processVersionNumber) {
		this.processVersionNumber = processVersionNumber;
	}
	public String getProcessBranchName() {
		return processBranchName;
	}
	public void setProcessBranchName(String processBranchName) {
		this.processBranchName = processBranchName;
	}
	public String getProcessName() {
		return processName;
public class ProcessTypeListModel {
	private GridProcessingTypesEnum processType;
	private List<ProcessInstance> processList = new LinkedList<ProcessInstance>();
	public ProcessTypeListModel(GridProcessingTypesEnum processType)
	{
		this.processType = processType;
		
		
		List<ProcessInstance> processInstanceList = ModelProcessRegistry.getInstances();
		
		for (ProcessInstance processInstance : processInstanceList) {
			
			if (processInstance.getType() == processType) {
				processList.add(processInstance);
			}
			
		}
	}
	public GridProcessingTypesEnum getProcessType() {
		return processType;
	}
	public int getProcessListSize()
	{
		return processList.size();
	}
	public String getProcessNameAtIndex(int index)
	{
		return processList.get(index).getName();
	}
	public String getProcessIdAtIndex(int index)
	{
		return processList.get(index).getId();
	}
	public String getIdByProcessName(String name)
	{
		for (ProcessInstance processInstance : processList) {
			if (processInstance.getName
/**
 * 개요
 * - 경조관리에 대한 ServiceImpl 클래스를 정의한다.
 * 
 * 상세내용
 * - 경조관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 경조관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Service("egovCtsnnManageService")
public class EgovCtsnnManageServiceImpl extends EgovAbstractServiceImpl implements EgovCtsnnManageService {
	@Resource(name="ctsnnManageDAO")
    private CtsnnManageDAO ctsnnManageDAO;
    /** ID Generation */  
	@Resource(name="egovCtsnnManageIdGnrService")
	private EgovIdGnrService idgenCtsnnManageService;
	@Resource(name="EgovInfrmlSanctnService")
    protected EgovInfrmlSanctnService infrmlSanctnService;
	/**
	 * 경조관리정보를 관리하기 위해 등록된 경조관리 목록을 조회한다.
	 * @param ctsnnManageVO - 경조관리 VO
	 * @return List - 경조관리 목록
	 */
	public List<CtsnnManageVO> selectCtsnnManageList(CtsnnManageVO ctsnnManageVO) throws Exception{
		ctsnnManageVO.setSearchFromDate(EgovStringUtil.removeMinusChar(ctsnnManageVO.getSearchFromDate()));
		ctsnnManageVO.setSearchToDate(Egov

		List<CtsnnManageVO> result = ctsnnManageDAO.selectCtsnnManageList(ctsnnManageVO);
		int num = result.size();
	    for (int i = 0 ; i < num ; i ++ ){
	    	CtsnnManageVO ctsnnManageVO1 = result.get(i);
	    	ctsnnManageVO1.setReqstDe(EgovDateUtil.formatDate(ctsnnManageVO1.getReqstDe(), "-"));
	    	ctsnnManageVO1.setOccrrDe(EgovDateUtil.formatDate(ctsnnManageVO1.getOccrrDe(), "-"));		
	    	result.set(i, ctsnnManageVO1);
	    }	
		return result;
	}
	/**
	 * 경조관리목록 총 갯수를 조회한다.
	 * @param ctsnnManageVO - 경조관리 VO
	 * @return int - 경조관리 카운트 수
	 */
	public int selectCtsnnManageListTotCnt(CtsnnManageVO ctsnnManageVO) throws Exception {
		return ctsnnManageDAO.selectCtsnnManageListTotCnt(ctsnnManageVO);
	}
	/**
	 * 등록된 경조관리의 상세정보를 조회한다.
	 * @param ctsnnManageVO - 경조관리 VO
	 * @return CtsnnManageVO - 경조관리 VO
	 */
	public CtsnnManageVO selectCtsnnManage(CtsnnManageVO ctsnnManageVO) throws Exception {
		CtsnnManageVO ctsnnManageVOTemp = ctsnnManageDAO.selectCtsnnManage(ctsnnManageVO);
		ctsnnMa

		ctsnnManageVOTemp.setOccrrDe(EgovDateUtil.formatDate(ctsnnManageVOTemp.getOccrrDe(), "-"));		
		ctsnnManageVOTemp.setBrth(EgovDateUtil.formatDate(ctsnnManageVOTemp.getBrth(), "-"));		
		return ctsnnManageVOTemp;
	}
	/**
	 * 경조관리정보를 신규로 등록한다.
	 * @param ctsnnManage - 경조관리 model
	 */
	public void insertCtsnnManage(CtsnnManage ctsnnManage) throws Exception {
		java.util.Calendar cal = java.util.Calendar.getInstance();
    	String  sYear  =Integer.toString(cal.get(java.util.Calendar.YEAR));
    	String  sMonth =Integer.toString(cal.get(java.util.Calendar.MONTH)+1);
    	if(sMonth.length() == 1) sMonth = "0"+sMonth;
    	String  sDay   =Integer.toString(cal.get(java.util.Calendar.DATE));
    	if(sDay.length() == 1) sDay = "0"+sDay;
    	ctsnnManage.setReqstDe(sYear+sMonth+sDay);
    	
		/*
		 * 경조 승인처리  신청 
		 */
    	ctsnnManage.setReqstDe(EgovStringUtil.removeMinusChar(ctsnnManage.getReqstDe()));
    	ctsnnManage.setBrth(EgovStringUtil.removeMinusChar(ctsnnManage.getBrth()));
    	ctsn

		ctsnnManage.setInfrmlSanctnId(infrmlSanctn.getInfrmlSanctnId());
		ctsnnManage.setConfmAt(infrmlSanctn.getConfmAt());
		String	sCtsnnId = idgenCtsnnManageService.getNextStringId();
		ctsnnManage.setCtsnnId(sCtsnnId);
		
		ctsnnManageDAO.insertCtsnnManage(ctsnnManage);
	}
	/**
	 * 기 등록된 경조관리정보를 수정한다.
	 * @param ctsnnManage - 경조관리 model
	 */
	public void updtCtsnnManage(CtsnnManage ctsnnManage) throws Exception {
		ctsnnManage.setReqstDe(EgovStringUtil.removeMinusChar(ctsnnManage.getReqstDe()));
    	ctsnnManage.setBrth(EgovStringUtil.removeMinusChar(ctsnnManage.getBrth()));
    	ctsnnManage.setOccrrDe(EgovStringUtil.removeMinusChar(ctsnnManage.getOccrrDe()));
		ctsnnManage.setBrth(EgovStringUtil.removeMinusChar(ctsnnManage.getBrth()));
		ctsnnManage.setOccrrDe(EgovStringUtil.removeMinusChar(ctsnnManage.getOccrrDe()));
		ctsnnManageDAO.updtCtsnnManage(ctsnnManage);
	}
	/**
	 * 기 등록된 경조관리정보를 삭제한다.
	 * @param ctsnnManage - 경조관리 model
	 */
	public void deleteCtsnnManage(CtsnnManage ctsnn

		ctsnnManage.setReqstDe(EgovStringUtil.removeMinusChar(ctsnnManage.getReqstDe()));
    	ctsnnManage.setBrth(EgovStringUtil.removeMinusChar(ctsnnManage.getBrth()));
    	ctsnnManage.setOccrrDe(EgovStringUtil.removeMinusChar(ctsnnManage.getOccrrDe()));
		/*
		 * 포상 승인처리  삭제 infrmlSanctnService.deleteInfrmlSanctn("000", vcatnManage);
		 */
		ctsnnManageDAO.deleteCtsnnManage(ctsnnManage);
	}
	/**
	 * 경조관리정보 승인 처리를 위해 신청된 경조관리 목록을 조회한다.
	 * @param ctsnnManageVO - 경조관리 VO
	 * @return List - 경조관리 목록
	 */
	public List<CtsnnManageVO> selectCtsnnManageConfmList(CtsnnManageVO ctsnnManageVO) throws Exception{
		ctsnnManageVO.setSearchFromDate(EgovStringUtil.removeMinusChar(ctsnnManageVO.getSearchFromDate()));
		ctsnnManageVO.setSearchToDate(EgovStringUtil.removeMinusChar(ctsnnManageVO.getSearchToDate()));
		List<CtsnnManageVO> result = ctsnnManageDAO.selectCtsnnManageConfmList(ctsnnManageVO);
		int num = result.size();
	    for (int i = 0 ; i < num ; i ++ ){
	    	CtsnnManageVO ctsnnManageVO1 = 

	    	ctsnnManageVO1.setReqstDe(EgovDateUtil.formatDate(ctsnnManageVO1.getReqstDe(), "-"));
	    	ctsnnManageVO1.setOccrrDe(EgovDateUtil.formatDate(ctsnnManageVO1.getOccrrDe(), "-"));	
	    	result.set(i, ctsnnManageVO1);
	    }	
		return result;
	}
	/**
	 * 경조승인목록 총 갯수를 조회한다.
	 * @param ctsnnManageVO - 경조관리 VO
	 * @return int - 경조관리 카운트 수
	 */
	public int selectCtsnnManageConfmListTotCnt(CtsnnManageVO ctsnnManageVO) throws Exception {
		return ctsnnManageDAO.selectCtsnnManageConfmListTotCnt(ctsnnManageVO);
	}
	/**
	 * 경조정보를 승인처리 한다.
	 * @param ctsnnManage - 경조관리 model
	 */
	public void updtCtsnnManageConfm(CtsnnManage ctsnnManage) throws Exception {
		 InfrmlSanctn infrmlSanctn = new InfrmlSanctn();
		 ctsnnManage.setReqstDe(EgovStringUtil.removeMinusChar(ctsnnManage.getReqstDe()));
	     ctsnnManage.setBrth(EgovStringUtil.removeMinusChar(ctsnnManage.getBrth()));
	     ctsnnManage.setOccrrDe(EgovStringUtil.removeMinusChar(ctsnnManage.getOccrrDe()));
		 if(ctsnnManage.getConfmAt().equ
@Component
public class RepositoryListener {
    private final RepositoryQueryRepository repositoryQueryRepository;
    private final FolderQueryRepository folderQueryRepository;
    @Autowired
    public RepositoryListener(RepositoryQueryRepository repositoryQueryRepository, FolderQueryRepository folderQueryRepository) {
        this.repositoryQueryRepository = repositoryQueryRepository;
        this.folderQueryRepository = folderQueryRepository;
    }
    @EventHandler
    public void handleRepositoryCreatedEvent(RepositoryCreatedEvent event) {
        final RepositoryEntity entity = RepositoryEntity.builder().repositoryId(event.getId().getIdentifier()).name(event.getMetaData().getName()).build();
        repositoryQueryRepository.save(entity);
    }
    @EventHandler
    public void handleRepositoryRootFolderUpdate(RepositoryRootFolderChangedEvent event) {
        final RepositoryEntity repositoryEntity = repositoryQueryRepository.findByRepositoryId(event.getRepositoryId().getIdenti
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Александр
 */
@Service
public class ProcessServiceImpl implements ProcessService {
    
    @Autowired
    ProcessDAO processDAO;
    
       @Transactional
         public List<SalesProcess> getAllProcesses() {
         return processDAO.getAllProcesses();
         }
         
         @Transactional
          public void addProcess(SalesProcess process){
              processDAO.addProcess(process);
          }
          
          
@Transactional
    public List<SalesProcess> listProcesses(){
        return processDAO.listProcesses();
    }
    @Transactional
    public void removeProcess(SalesProcess process){
        processDAO.removeProcess(process);
    }
    
    @Transactional
    public void changeProcess (SalesProcess process){
        processDAO.changeProcess(process);
    }

    
    @Transactional
    public SalesProcess getProcessForId (Long id){
        return processDAO.getProcessForId(id);
    }
    
    @Transactional
    public List<Payments> getProcessPayments (Long id){
        return processDAO.getProcessPayments(id);
    }
     
    @Transactional
     public List<Shipments> getProcessShipments (Long id){
         return processDAO.getProcessShipments(id);
     }
    
    @Transactional
    public void addContractConnection (SalesProcess process, Contracts contract)
    {
        processDAO.addContractConnection(process, contract);
    }
    
    @Transactional
    public void addRequestConnection (SalesProcess process, Requests request)
    {
        processDAO.addRequestConnection(process, request);
    }
    
    @Transactional
    public void addPaymentConnection (SalesProcess process, Payments payment)
    {
        processDAO.addPaymentConnection(process, payment);
    }
    
    @Transactional
    public void addShipmentConnection (Sales
/**
 * Created by maren on 2015/5/27.
 */
public class Reprocess implements Serializable{
    private String beforeProcessId;
    private String beforeProcessName;
    private String threeProcessCode;
    private String threeProcessName;
    public String getThreeProcessCode() {
        return threeProcessCode;
    }
    public void setThreeProcessCode(String threeProcessCode) {
        this.threeProcessCode = threeProcessCode;
    }
    public String getThreeProcessName() {
        return threeProcessName;
    }
    public void setThreeProcessName(String threeProcessName) {
        this.threeProcessName = threeProcessName;
    }
    public String getBeforeProcessId() {
        return beforeProcessId;
    }
    public void setBeforeProcessId(String beforeProcessId) {
        this.beforeProcessId = beforeProcessId;
    }
    public String getBeforeProcessName() {
        return beforeProcessName;
    }
    public void setBeforeProcessName(String beforeProcessName) {
        this.beforeP
/*
 * Copyright 2000-2011 Enonic AS
 */
public class UserServicesEngine
    extends BaseEngine
    implements InitializingBean
    private CategoryHandler categoryHandler;
    private CommonHandler commonHandler;
    private ContentHandler contentHandler;
    private ContentObjectHandler contentObjectHandler;
    private GroupHandler groupHandler;
    private LanguageHandler languageHandler;
    private LogHandler logHandler;
    private MenuHandler menuHandler;
    private PageHandler pageHandler;
    private PageTemplateHandler pageTemplateHandler;
    private SectionHandler sectionHandler;
    private SecurityHandler securityHandler;
    private UserHandler userHandler;
    public void setCategoryHandler( CategoryHandler categoryHandler )
    {
        this.categoryHandler = categoryHandler;
    }
    public void setCommonHandler( CommonHandler commonHandler )
    {
        this.commonHandler = commonHandler;
    }
    public void setContentHandler( ContentHandler contentHandler )
 

        this.contentHandler = contentHandler;
    }
    public void setContentObjectHandler( ContentObjectHandler contentObjectHandler )
    {
        this.contentObjectHandler = contentObjectHandler;
    }
    public void setGroupHandler( GroupHandler groupHandler )
    {
        this.groupHandler = groupHandler;
    }
    public void setLanguageHandler( LanguageHandler languageHandler )
    {
        this.languageHandler = languageHandler;
    }
    public void setLogHandler( LogHandler logHandler )
    {
        this.logHandler = logHandler;
    }
    public void setMenuHandler( MenuHandler menuHandler )
    {
        this.menuHandler = menuHandler;
    }
    public void setPageHandler( PageHandler pageHandler )
    {
        this.pageHandler = pageHandler;
    }
    public void setPageTemplateHandler( PageTemplateHandler pageTemplateHandler )
    {
        this.pageTemplateHandler = pageTemplateHandler;
    }
    public void setSectionHandler( SectionHandler sectionHandler )
    {

        this.sectionHandler = sectionHandler;
    }
    public void setSecurityHandler( SecurityHandler securityHandler )
    {
        this.securityHandler = securityHandler;
    }
    public void setUserHandler( UserHandler userHandler )
    {
        this.userHandler = userHandler;
    }
    public void afterPropertiesSet()
        throws Exception
    {
        init();
    }
    private void init()
    {
        contentHandler.addListener( logHandler );
        contentHandler.addListener( sectionHandler );
        menuHandler.addListener( logHandler );
    }
    public CategoryHandler getCategoryHandler()
    {
        return categoryHandler;
    }
    public CommonHandler getCommonHandler()
    {
        return commonHandler;
    }
    public ContentHandler getContentHandler()
    {
        return contentHandler;
    }
    public ContentObjectHandler getContentObjectHandler()
    {
        return contentObjectHandler;
    }
    public GroupHandler getGroupHandler()
    {
        

    }
    public LanguageHandler getLanguageHandler()
    {
        return languageHandler;
    }
    public LogHandler getLogHandler()
    {
        return logHandler;
    }
    public MenuHandler getMenuHandler()
    {
        return menuHandler;
    }
    public PageHandler getPageHandler()
    {
        return pageHandler;
    }
    public PageTemplateHandler getPageTemplateHandler()
    {
        return pageTemplateHandler;
    }
    public SectionHandler getSectionHandler()
    {
        return sectionHandler;
    }
    public SecurityHandler getSecurityHandler()
    {
        return securityHandler;
    }
    public UserHandler getUserHandler()
    {
        return userHandler;
    }
    public String[] createLogEntries( User user, String xmlData )
        throws VerticalCreateException, VerticalSecurityException
    {
        Document doc = XMLTool.domparse( xmlData, new String[]{"logentry", "logentries"} );
        return logHandler.createLogEntries( user, doc );
    }
    pu

    {
        if ( user == null )
        {
            user = userHandler.getAnonymousUser();
        }
        Document doc =
            contentHandler.getContent( user, key, publishedOnly, parentLevel, childrenLevel, parentChildrenLevel, false, false, null );
        return XMLTool.documentToString( doc );
    }
    public String getCategoryName( int key )
    {
        Document doc = categoryHandler.getCategoryNameDoc( CategoryKey.parse( key ) );
        return XMLTool.documentToString( doc );
    }
    public User getAnonymousUser()
    {
        return userHandler.getAnonymousUser();
    }
    public String getContentTypeByContent( int contentKey )
    {
        int contentTypeKey = contentHandler.getContentTypeKey( contentKey );
        return XMLTool.documentToString( contentHandler.getContentType( contentTypeKey, false ) );
    }
    public String getContentTypeByCategory( int categoryKey )
    {
        int contentTypeKey = categoryHandler.getContentTypeKey( CategoryKey.par
public class MapBasedProcessPersistenceContext extends MapBasedPersistenceContext
    implements
    ProcessPersistenceContext,
    NonTransactionalProcessPersistentSession{
    
    private ProcessStorage storage;
    private Map<Long, ProcessInstanceInfo> processes;
    public MapBasedProcessPersistenceContext(ProcessStorage storage) {
        super( storage );
        this.storage = storage;
        this.processes = new HashMap<Long, ProcessInstanceInfo>();
    }
    public void persist(ProcessInstanceInfo processInstanceInfo) {
        if( processInstanceInfo.getId() == null ) {
            processInstanceInfo.setId( storage.getNextProcessInstanceId() );
        }
        processes.put( processInstanceInfo.getId(), processInstanceInfo );
    }
    public ProcessInstanceInfo findProcessInstanceInfo(Long processId) {
        ProcessInstanceInfo processInstanceInfo = processes.get( processId );
        if( processInstanceInfo == null){
            processInstanceInfo = storage.findPro
/**
 * 로그인정책관리에 대한 Vo 클래스
 * @author 배치운영환경 김지완
 * @since 2012.07.16
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2012.07.16  김지완          최초 생성
 *
 * </pre>
 */
public class LoginPolicyManageVO extends LoginPolicyManage {
	private static final long serialVersionUID = 1L;
	List <LoginPolicyManageVO> loginPolicyManageList;
	/**
	 * LoginPolicyManage 를 리턴한다.
	 * @return LoginPolicyManage
	 */
	public LoginPolicyManage getLoginPolicyManage()
    {
    	return getLoginPolicyManage();
    }
	/**
	 * LoginPolicyManage 값을 설정한다.
	 * @param loginPolicyManage LoginPolicyManage
	 */	
    public void setLoginPolicyManage(LoginPolicyManage loginPolicyManage)
    {
    	setLoginPolicyManage(loginPolicyManage);
    }
	/**
	 * loginPolicyManageList attribute 를 리턴한다.
	 * @return List<LoginPolicyManageVO>
	 */
	public List<LoginPolicyManageVO> getLoginPolicyManageList() {
		r
public abstract class Handler<HANDLER extends IHandler> {
    public abstract Class<HANDLER> getHandler();
    public static final Handler<AppointmentHandler> APPOINTMENT = new Handler<AppointmentHandler>() {
        @Override
        public Class<AppointmentHandler> getHandler() {
            return AppointmentHandler.class;
        }
    };
    public static final Handler<ContactHandler> CONTACT = new Handler<ContactHandler>() {
        @Override
        public Class<ContactHandler> getHandler() {
            return ContactHandler.class;
        }
    };
    public static final Handler<ELOHandler> ELO = new Handler<ELOHandler>() {
        @Override
        public Class<ELOHandler> getHandler() {
            return ELOHandler.class;
        }
    };
    public static final Handler<GradeHandler> GRADE = new Handler<GradeHandler>() {
        @Override
        public Class<GradeHandler> getHandler() {
            return GradeHandler.class;
        }
    };
    public static final Handler
/*
 * ServicesBean.java
 *
 * Created on 14 January 2003, 11:14
 */
/**
 *
 * @author  Mark Williams
 */
public class ServiceBean
    private String serviceName = null;
    private String serviceDesc = null;
    private String serviceType = null;
    private String serviceEndpoint = null;
    private String serviceWSDL = null;
    
    public ServiceBean(String serviceName, String serviceDesc, String serviceType, String serviceEndpoint, String serviceWSDL)
    {
        this.serviceName = serviceName;
        this.serviceDesc = serviceDesc;
        this.serviceType = serviceType;
        this.serviceEndpoint = serviceEndpoint;
        this.serviceWSDL = serviceWSDL;
    }
    
    public ServiceBean()
    {
    }
    
    public String getServiceName()
    {
        return this.serviceName;
    }
    public void setServiceName(String serviceName)
    {
        this.serviceName = serviceName;
    }
    
    public String getServiceDesc()
    {
        return this.serviceDesc;
    }
    
/**
 * User: stukushin
 * Date: 05.12.13
 * Time: 12:41
 */
public abstract class AbstractGCTask implements Runnable {
    protected static final Logger logger = LoggerFactory.getLogger(AbstractGCTask.class);
    protected ProcessService processService;
    protected GraphDao graphDao;
    protected TaskDao taskDao;
    protected AbstractGCTask(ProcessService processService, GraphDao graphDao, TaskDao taskDao) {
        this.processService = processService;
        this.graphDao = graphDao;
        this.taskDao = taskDao;
    }
    protected void gc(UUID processId) {
        logger.trace("Start garbage collector for process [{}]", processId);
        if (processId == null) {
            logger.warn("ProcessId for garbage collector is null");
            return;
        }
        processService.lock(processId);
        try {
            Process process = processService.getProcess(processId);
            if (process != null) {
                int processState = process.getState();
      

                    logger.error("Process [{}] isn't broken or finished. State is [{}]" +
                            "Stop garbage collector for this process", processId, Process.stateToString(processState));
                    return;
                }
            }
            Graph graph = graphDao.getGraph(processId);
            if (process != null && process.getState() != Process.ABORTED && graph != null && !graph.isFinished()) {
                logger.error("Process [{}] isn't broken and its graph isn't finished. " +
                        "Stop garbage collector for this process", processId);
                return;
            }
            if (graph != null) {
                Set<UUID> finishedItems = graph.getFinishedItems();
                taskDao.deleteDecisions(finishedItems, processId);
                taskDao.deleteTasks(finishedItems, processId);
                graphDao.deleteGraph(processId);
            }
            if (process != null) {
                proce
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 * a concrete factory - hibernate
 *
 * @author Paulo Gandra Sousa
 */
public class JpaRepositoryFactory implements RepositoryFactory {
    @Override
    public ExpenseRepository expenseRepository() {
        return new eapli.expensemanager.persistence.jpa.ExpenseRepositoryImpl();
    }
    @Override
    public ExpenseTypeRepository expenseTypeRepository() {
        return new eapli.expensemanager.persistence.jpa.ExpenseTypeRepositoryImpl();
    }
    @Override
    public IncomeRepository incomeRepository() {
        return new eapli.expensemanager.persistence.jpa.IncomeRepositoryImpl();
    }
    @Override
    public IncomeTypeRepository incomeTypeRepository() {
        return new eapli.expensemanager.persistence.jpa.IncomeTypeRepositoryImpl();
    }
    @Override
    public CheckingAccountRepository checkingAccountRepository() {
        return new eapli.expensemanager.persistence.j
public abstract class MessageHandler {
/**
    * <pre>
    *           1..1     0..n
    * MessageHandler ------------------------- PropertyHandler
    *           messageHandler        &gt;       propertyHandler
    * </pre>
    */
   
   private FHashSet propertyHandler;
   
   public boolean addToPropertyHandler (PropertyHandler value)
   {
      boolean changed = false;
   
      if (value != null)
      {
         if (this.propertyHandler == null)
         {
            this.propertyHandler = new FHashSet ();
   
         }
         changed = this.propertyHandler.add (value);
         if (changed)
         {
            value.setMessageHandler(this);
         }
      }
      return changed;
   }
   
   public boolean removeFromPropertyHandler (PropertyHandler value)	
   {
      boolean changed = false;
   
      if ((this.propertyHandler != null) && (value != null))
      {
         changed = this.propertyHandler.remove (value);
         if (changed)
         {
            value.s

         }
      }
      return changed;
   }
   
   public void removeAllFromPropertyHandler ()
   {
   PropertyHandler tmpValue;
      Iterator iter = this.iteratorOfPropertyHandler ();
   
      while (iter.hasNext ())
      {
         tmpValue = (PropertyHandler) iter.next ();
         this.removeFromPropertyHandler (tmpValue);
      }
   }
   
   public boolean hasInPropertyHandler (PropertyHandler value)
   {
      return ((this.propertyHandler != null) &&
              (value != null) &&
              this.propertyHandler.contains (value));
   }
   
   public Iterator iteratorOfPropertyHandler ()
   {
      return ((this.propertyHandler == null)
              ? FEmptyIterator.get ()
              : this.propertyHandler.iterator ());
   
   }
   
   public int sizeOfPropertyHandler ()
   {
      return ((this.propertyHandler == null)
              ? 0
              : this.propertyHandler.size ());
   }
/**
    * <pre>
    *           0..n     1..1
    * MessageHandler ----------

    *           messageHandler        &lt;       chainMaster
    * </pre>
    */
   
   private ChainMaster chainMaster;
   
   public boolean setChainMaster (ChainMaster value)		
   {
      boolean changed = false;
   
      if (this.chainMaster != value)
      {
   ChainMaster oldValue = this.chainMaster;
         if (this.chainMaster != null)
         {
            this.chainMaster = null;
            oldValue.removeFromMessageHandler(this);
         }
         this.chainMaster = value;
   
         if (value != null)
         {
            value.addToMessageHandler(this);
         }
         changed = true;
      }
      return changed;
   }
   
   public ChainMaster getChainMaster ()	
   {
      return this.chainMaster;
   }
   public void removeYou()
   {
   this.removeAllFromPropertyHandler ();
      this.setChainMaster (null);
   }
	/**
	 * Constructor, which initializes property handler for different events	 * 
	 */
public MessageHandler() {
	   if(this.propertyHandlerMap == 

   		   this.propertyHandlerMap = new HashMap<String, PropertyHandler>();
   	   }
   	   
      propertyHandlerMap.put("level", new LevelHandler());
      propertyHandlerMap.put("quantity", new QuantityHandler());
      propertyHandlerMap.put("name", new NameHandler());
      propertyHandlerMap.put("sector", new PropertySectorHandler());
      propertyHandlerMap.put("type", new TypeHandler());
      propertyHandlerMap.put("startingUser", new StartingUserHandler());
      propertyHandlerMap.put("x", new XHandler());
      propertyHandlerMap.put("y", new YHandler());
      propertyHandlerMap.put("sectors", new PropertySectorsHandler());
      propertyHandlerMap.put("map", new PropertyMapHandler());
      propertyHandlerMap.put("game", new PropertyGameHandler());
      propertyHandlerMap.put("userAssets", new PropertyUserAssetsHandler());
      propertyHandlerMap.put("user", new PropertyUserHandler());
      propertyHandlerMap.put("startSector", new StartSectorHandler());
      property

      propertyHandlerMap.put("running", new RunningHandler());
      propertyHandlerMap.put("team", new PropertyTeamHandler());
      propertyHandlerMap.put("users", new UsersHandler());
      propertyHandlerMap.put("nickname", new NicknameHandler());
      propertyHandlerMap.put("messages", new MessagesHandler());
      propertyHandlerMap.put("text", new TextHandler());
      propertyHandlerMap.put("owner", new OwnerHandler());
      propertyHandlerMap.put("alliance", new PropertyAllianceHandler());
      propertyHandlerMap.put("alliances", new PropertyAllianceHandler());
      propertyHandlerMap.put("color", new ColorHandler());
      propertyHandlerMap.put("buildProgress", new BuildProgressHandler());
      propertyHandlerMap.put("hp", new HPHandler());
      propertyHandlerMap.put("unitTypeInCreation", new UnitTypeInCreationHandler());
      propertyHandlerMap.put("unitCreationProgress", new UnitCreationProgressHandler());
      propertyHandlerMap.put("unitLevelInCreation", new Un

      propertyHandlerMap.put("collecting", new CollectingHandler());
      propertyHandlerMap.put("workingOn", new WorkingOnHandler());
      propertyHandlerMap.put("buildings", new BuildingsHandler());
      propertyHandlerMap.put("units", new UnitsHandler());
      propertyHandlerMap.put("availableResources", new AvailableResourcesHandler());
      propertyHandlerMap.put("strength", new StrengthHandler());
      propertyHandlerMap.put("resources", new ResourcesHandler());
      propertyHandlerMap.put("collectedResources", new CollectedResourcesHandler());
      propertyHandlerMap.put("tower", new PropertyTowerHandler());
      propertyHandlerMap.put("upgrading", new UpgradingHandler());
      propertyHandlerMap.put("winner", new WinnerHandler());
      propertyHandlerMap.put("peons", new PeonsHandler());
      
      
   	   for (Object value : propertyHandlerMap.values()) {
   		   ((PropertyHandler) value).setMessageHandler(this);
   	   }
      
   }
   private HashMap<String, Pr
/**
 * Generated by Protogen
 * @since 04/07/2015 08:12:26 CDT
 */
@Component
public class WeightDaoService {
	@Autowired
	private ActivityService activityService;
    public ActivityService getActivityService() {
        return activityService;
    }
	@Autowired
	private MetricService metricService;
    public MetricService getMetricService() {
        return metricService;
    }
	@Autowired
	private SummaryTableService summaryTableService;
    public SummaryTableService getSummaryTableService() {
        return summaryTableService;
    }
    
	@Autowired
	private SummaryVitlasService summaryVitalsService;
    public SummaryVitlasService getSummaryVitalsService() {
        return summaryVitalsService;
    }
    
    
	@Autowired
	private EmailAddressService emailAddressService;
    public EmailAddressService getEmailAddressService() {
        return emailAddressService;
    }
	@Autowired
	private PersonService personService;
    public PersonService getPersonService() {
        return
public class ProcessErrorActivity extends AppCompatActivity {
    private Logger l = new Logger(ProcessErrorActivity.class);
    private NullPointerAsserter asserter = new NullPointerAsserter(l);
    private ProcessErrorFragment processErrorF = null;
    private String processErrorTag = null;
    private int processErrorContainerId = 0;
    public boolean isProcessErrorFragmentOpened() {
        return processErrorF != null;
    }
    protected void openProcessErrorFragment() {
        l.d("Opening process error fragment");
        asserter.assertPointer(processErrorTag);
        if (processErrorContainerId == 0)
            l.e("Attempting to open process error fragment without setting process error container ID!");
        FragmentManager fm = getSupportFragmentManager();
        processErrorF = (ProcessErrorFragment) fm.findFragmentByTag(processErrorTag);
        if (!asserter.assertPointerQuietly(processErrorF)) {
            l.i("Creating new " + ProcessErrorFragment.class.getSimp

            processErrorF = new ProcessErrorFragment();
            fm.beginTransaction()
                    .replace(processErrorContainerId, processErrorF, processErrorTag)
                    .commit();
        }
        asserter.assertPointer(processErrorF);
    }
    public void setProcessErrorParentContentView(View processErrorParentContentView) {
        if (asserter.assertPointer(processErrorF))
            this.processErrorF.setParentContentView(processErrorParentContentView);
    }
    protected void setProcessErrorTag(String processErrorTag) {
        this.processErrorTag = processErrorTag;
    }
    protected void setProcessErrorContainerId(int processErrorContainerId) {
        this.processErrorContainerId = processErrorContainerId;
    }
    @SuppressWarnings("unused")
    public void attachProcessErrorManager(ProcessErrorManager errorManager) {
        if (!asserter.assertPointerQuietly(processErrorF))
            openProcessErrorFragment();
        processErrorF.attac
/**
 * The Interface IServiceRegistry.
 * 
 * @author Pedro Domingues (pedro.domingues@ist.utl.pt)
 * 
 * @param <T>
 *            the generic type
 */
public interface IServiceRegistry<T> {
	/**
	 * Adds the service listener.
	 * 
	 * @param listener
	 *            the listener
	 */
	public abstract void addServiceListener(ServiceRegistryListener listener);
	/**
	 * Removes the service listener.
	 * 
	 * @param listener
	 *            the listener
	 */
	public abstract void removeServiceListener(ServiceRegistryListener listener);
	/**
	 * Modify service.
	 * 
	 * @param serviceName
	 *            the service name
	 * @param service
	 *            the service
	 */
	public abstract void modifyService(String serviceName, T service);
	/**
	 * Removes the service.
	 * 
	 * @param serviceName
	 *            the service name
	 */
	public abstract void removeService(String serviceName);
	/**
	 * Adds the service.
	 * 
	 * @param serviceName
	 *            the service name
	 * @param service
	

	 */
	public abstract void addService(String serviceName, T service);
	/**
	 * Gets the registered services names.
	 * 
	 * @return the registered services names
	 */
	public abstract String[] getRegisteredServicesNames();
	/**
	 * Gets the service.
	 * 
	 * @param serviceName
	 *            the service name
	 * @return the service
	 */
	public abstract T getService(String serviceName);
	/**
	 * Listener that receives notifications on lumina OSGi service's updates.
	 * 
	 * @see ServiceRegistryEvent
	 */
	public interface ServiceRegistryListener {
		/**
		 * Notifies service added.
		 * 
		 * @param serviceName
		 *            the service name
		 */
		public void serviceAdded(String serviceName);
		/**
		 * Notifies service modified.
		 * 
		 * @param serviceName
		 *            the service name
		 */
		public void serviceModified(String serviceName);
		/**
		 * Notifies service removed.
		 * 
		 * @param serviceName
		 *            the service name
		 */
		public void serviceRemoved(
public class StatelessProcessInstanceManager implements ProcessInstanceManager{
	private Map<Long, ProcessInstance> processInstances = new HashMap<Long, ProcessInstance>();
    private int processCounter = 0;
    private ProcessInstance lastExecutedProcessInstance = null;
    public void addProcessInstance(ProcessInstance processInstance) {
    	processCounter = WorkflowDAO.getNextId();
        internalAddProcessInstance(processInstance);
    }
    
    public void addProcessInstanceWithOldId(ProcessInstance processInstance) {
        internalAddProcessInstance(processInstance);
    }
    
    public void internalAddProcessInstance(ProcessInstance processInstance) {
    	lastExecutedProcessInstance = processInstance;
    	processInstances.put(((ProcessInstance)processInstance).getId(), processInstance);
    }
    public Collection<ProcessInstance> getProcessInstances() {
    	return processInstances.values();
    }
    public ProcessInstance getProcessInstance(long id) {
    	if(proces
/**
 * Created by Михаил on 20.08.14.
 */
@Service
public class MainServices {
    public static SecurityService securityService;
    @Autowired
    public void setSecurityService(SecurityService securityService){
        MainServices.securityService = securityService;
    }
    public static CoreService coreService;
    @Autowired
    public void setCoreService(CoreService coreService) {
        MainServices.coreService = coreService;
    }
    public static ViewService viewService;
    @Autowired
    public void setViewService(ViewService viewService) {
        MainServices.viewService = viewService;
    }
    public static SocialService socialService;
    @Autowired
    public void setSocialService(SocialService socialService) {
        MainServices.socialService = socialService;
    }
    public static LocationService locationService;
    @Autowired
    public void setLocationService(LocationService locationService) {
        MainServices.locationService = locationService;
    }
  
public class UserServices {
	public boolean userExists(String login){
		UserService_Service userService = new UserService_Service();
		UserService service = userService.getUserServicePort();
		return service.userExists(login);
	}
	public String logIn(String login, String password){
		UserService_Service userService = new UserService_Service();
		UserService service = userService.getUserServicePort();
		return service.logIn(login, password);
	}
	public boolean isUserLogged(String login, String sessionId){
		UserService_Service userService = new UserService_Service();
		UserService service = userService.getUserServicePort();
		return service.isUserLogged(login, sessionId);
	}
	public boolean isAdminLogged(String login, String sessionId){
		UserService_Service userService = new UserService_Service();
		UserService service = userService.getUserServicePort();
		return service.isAdminLogged(login, sessionId);
	}
	public boolean createUser(UserCanonical user){
		UserService_Service userServic

		UserService service = userService.getUserServicePort();
		return service.createUser(user);
	}
	public boolean deleteUser(String login, String sessionId, String userToDelete){
		UserService_Service userService = new UserService_Service();
		UserService service = userService.getUserServicePort();
		return service.deleteUser(login, sessionId, userToDelete);
	}
	public boolean editUser(String login, String sessionId, UserCanonical userToEdit){
		UserService_Service userService = new UserService_Service();
		UserService service = userService.getUserServicePort();
		return service.editUser(login, sessionId, userToEdit);
	}
	public UserCanonical getUser(String login, String sessionId, String userToGet){
		UserService_Service userService = new UserService_Service();
		UserService service = userService.getUserServicePort();
		return service.getUser(login, sessionId, userToGet);
	}
	public List<UserCanonical> getUserList(String login, String sessionId){
		UserService_Service userService = new
/**
 * ServiceProvider is a single class which can be autowired to provide access
 * to all Services. This class should be used to support all Controllers.
 * 
 * @author bkng
 */
public class ServiceProviderImpl implements ServiceProvider {
	@Autowired
	private AccessApprovalService accessApprovalService;
	@Autowired
	private AccessRequirementService accessRequirementService;
	@Autowired
	private AdministrationService administrationService;
	@Autowired
	private EntityService entityService;
	@Autowired
	private EntityBundleService entityBundleService;
	@Autowired
	private NodeQueryService nodeQueryService;
	@Autowired
	private UserGroupService userGroupService;
	@Autowired
	private UserProfileService userProfileService;
	@Autowired
	SearchService searchService;
	@Autowired
	private ActivityService activityService;
	@Autowired
	private MessageService messageService;
	@Autowired
	private EvaluationService competitionService;
	@Autowired
	private WikiService wikiService;
	@Autowired
	priv

	@Autowired
	private TrashService trashService;
	@Autowired
	private DoiService doiService;
	@Autowired
	private MigrationService migrationService;
	@Autowired
	private TableServices tableServices;
	@Autowired
	private TeamService teamService;
	@Autowired
	private MembershipInvitationService membershipInvitationService;
	@Autowired
	private MembershipRequestService membershipRequestService;
	@Autowired
	private PrincipalService principalService;
	@Autowired
	private CertifiedUserService certifiedUserService;
	@Autowired
	private AsynchronousJobServices asynchronousJobServices;
	@Autowired
	private LogService logService;
	@Autowired
	private ProjectSettingsService projectSettingsService;
	@Autowired
	private ChallengeService challengeService;
	@Autowired
	private VerificationService verificationService;
	@Autowired
	private DiscussionService discussionService;
	@Autowired
	private SubscriptionService subscriptionService;
	@Autowired
	private DockerService dockerService;
	@Autowired
	pr

	public AccessApprovalService getAccessApprovalService() {
		return accessApprovalService;
	}
	public AccessRequirementService getAccessRequirementService() {
		return accessRequirementService;
	}
	public AdministrationService getAdministrationService() {
		return administrationService;
	}
	public EntityService getEntityService() {
		return entityService;
	}
	public EntityBundleService getEntityBundleService() {
		return entityBundleService;
	}
	public NodeQueryService getNodeQueryService() {
		return nodeQueryService;
	}
	public UserGroupService getUserGroupService() {
		return userGroupService;
	}
	public UserProfileService getUserProfileService() {
		return userProfileService;
	}
	@Override
	public SearchService getSearchService() {
		return searchService;
	}
	@Override
	public ActivityService getActivityService() {
		return activityService;
	}
	@Override
	public MessageService getMessageService() {
		return messageService;
	}
	@Override
	public EvaluationService getEvaluationServi

		return competitionService;
	}
	@Override
	public WikiService getWikiService() {
		return wikiService;
	}
	@Override
	public V2WikiService getV2WikiService() {
		return v2WikiService;
	}
	@Override
	public TrashService getTrashService() {
		return trashService;
	}
	@Override
	public DoiService getDoiService() {
		return doiService;
	}
	@Override
	public MigrationService getMigrationService() {
		return migrationService;
	}
	@Override
	public TableServices getTableServices() {
		return tableServices;
	}
	@Override
	public TeamService getTeamService() {
		return teamService;
	}
	@Override
	public MembershipInvitationService getMembershipInvitationService() {
		return membershipInvitationService;
	}
	@Override
	public MembershipRequestService getMembershipRequestService() {
		return membershipRequestService;
	}
	@Override
	public PrincipalService getPrincipalService() {
		return principalService;
	}
	@Override
	public CertifiedUserService getCertifiedUserService()  {
		return certifiedU
/*
 *
 * Licensed under the Aduna BSD-style license.
 */
public class RepositoryConfigUtil {
	public static Set<String> getRepositoryIDs(Repository repository)
			throws RepositoryException {
		RepositoryConnection con = repository.getConnection();
		try {
			Set<String> idSet = new LinkedHashSet<String>();
			RepositoryResult<Statement> idStatementIter = con.getStatements(
					null, REPOSITORYID, null, true);
			try {
				while (idStatementIter.hasNext()) {
					Statement idStatement = idStatementIter.next();
					if (idStatement.getObject() instanceof Literal) {
						Literal idLiteral = (Literal) idStatement.getObject();
						idSet.add(idLiteral.getLabel());
					}
				}
			} finally {
				idStatementIter.close();
			}
			return idSet;
		} finally {
			con.close();
		}
	}
	/**
	 * Is configuration information for the specified repository ID present in
	 * the (system) repository?
	 * 
	 * @param repository
	 *            the repository to look in
	 * @param repositoryID
	 *       

	 * @return true if configurion information for the specified repository ID
	 *         was found, false otherwise
	 * @throws RepositoryException
	 *             if an error occurred while trying to retrieve information
	 *             from the (system) repository
	 * @throws RepositoryConfigException
	 */
	public static boolean hasRepositoryConfig(Repository repository,
			String repositoryID) throws RepositoryException,
			RepositoryConfigException {
		RepositoryConnection con = repository.getConnection();
		try {
			return getIDStatement(con, repositoryID) != null;
		} finally {
			con.close();
		}
	}
	public static RepositoryConfig getRepositoryConfig(Repository repository,
			String repositoryID) throws RepositoryConfigException,
			RepositoryException {
		RepositoryConnection con = repository.getConnection();
		try {
			Statement idStatement = getIDStatement(con, repositoryID);
			if (idStatement == null) {
				return null;
			}
			Resource repositoryNode = idStatement.getSubje

			Resource context = idStatement.getContext();
			if (context == null) {
				throw new RepositoryException(
						"No configuration context for repository "
								+ repositoryID);
			}
			Graph contextGraph = new GraphImpl();
			con.getStatements(null, null, null, true, context).addTo(
					contextGraph);
			return RepositoryConfig.create(contextGraph, repositoryNode);
		} finally {
			con.close();
		}
	}
	/**
	 * Update the specified Repository with the specified set of
	 * RepositoryConfigs. This will overwrite all existing configurations in the
	 * Repository that have a Repository ID occurring in these
	 * RepositoryConfigs.
	 * 
	 * @param repository
	 *            The Repository whose contents will be modified.
	 * @param configs
	 *            The RepositoryConfigs that should be added to or updated in
	 *            the Repository. The RepositoryConfig's ID may already occur in
	 *            the Repository, in which case all previous configuration data
	 *            for t

	 *            RepositoryConfig is added.
	 * @throws RepositoryException
	 *             When access to the Repository's RepositoryConnection causes a
	 *             RepositoryException.
	 * @throws RepositoryConfigException
	 */
	public static void updateRepositoryConfigs(Repository repository,
			RepositoryConfig... configs) throws RepositoryException,
			RepositoryConfigException {
		RepositoryConnection con = repository.getConnection();
		try {
			updateRepositoryConfigs(con, configs);
		} finally {
			con.close();
		}
	}
	/**
	 * Update the specified RepositoryConnection with the specified set of
	 * RepositoryConfigs. This will overwrite all existing configurations in the
	 * Repository that have a Repository ID occurring in these
	 * RepositoryConfigs.
	 * 
	 * Note: this method does NOT commit the updates on the connection.
	 * 
	 * @param con
	 *            the repository connection to perform the update on
	 * @param configs
	 *            The RepositoryConfigs that should

	 *            the Repository. The RepositoryConfig's ID may already occur in
	 *            the Repository, in which case all previous configuration data
	 *            for that Repository will be cleared before the
	 *            RepositoryConfig is added.
	 * 
	 * @throws RepositoryException
	 * @throws RepositoryConfigException
	 */
	public static void updateRepositoryConfigs(RepositoryConnection con,
			RepositoryConfig... configs) throws RepositoryException,
			RepositoryConfigException {
		ValueFactory vf = con.getRepository().getValueFactory();
		boolean wasAutoCommit = con.isAutoCommit();
		con.setAutoCommit(false);
		for (RepositoryConfig config : configs) {
			Resource context = getContext(con, config.getID());
			if (context != null) {
				con.clear(context);
			} else {
				context = vf.createBNode();
			}
			con.add(context, RDF.TYPE, REPOSITORY_CONTEXT);
			Graph graph = new GraphImpl(vf);
			config.export(graph);
			con.add(graph, context);
		}
		con.setAutoCommit(wasA

	}
	/**
	 * Removes one or more Repository configurations from a Repository. Nothing
	 * happens when this Repository does not contain configurations for these
	 * Repository IDs.
	 * 
	 * @param repository
	 *            The Repository to remove the configurations from.
	 * @param repositoryIDs
	 *            The IDs of the Repositories whose configurations need to be
	 *            removed.
	 * @throws RepositoryException
	 *             Whenever access to the Repository's RepositoryConnection
	 *             causes a RepositoryException.
	 * @throws RepositoryConfigException
	 */
	public static boolean removeRepositoryConfigs(Repository repository,
			String... repositoryIDs) throws RepositoryException,
			RepositoryConfigException {
		boolean changed = false;
		RepositoryConnection con = repository.getConnection();
		try {
			con.setAutoCommit(false);
			for (String id : repositoryIDs) {
				Resource context = getContext(con, id);
				if (context != null) {
					con.clear(context)

					con.remove(context, RDF.TYPE, REPOSITORY_CONTEXT);
					changed = true;
				}
			}
			con.commit();
		} finally {
			con.close();
		}
		return changed;
	}
	public static Resource getContext(RepositoryConnection con,
			String repositoryID) throws RepositoryException,
			RepositoryConfigException {
		Resource context = null;
		Statement idStatement = getIDStatement(con, repositoryID);
		if (idStatement != null) {
			context = idStatement.getContext();
		}
		return context;
	}
	private static Statement getIDStatement(RepositoryConnection con,
			String repositoryID) throws RepositoryException,
			RepositoryConfigException {
		Literal idLiteral = con.getRepository().getValueFactory()
				.createLiteral(repositoryID);
		List<Statement> idStatementList = con.getStatements(null, REPOSITORYID,
				idLiteral, true).asList();
		if (idStatementList.size() == 1) {
			return idStatementList.get(0);
		} else if (idStatementList.isEmpty()) {
			return null;
		} else {
			throw new RepositoryCo
/**
 * @author Petri Kainulainen
 */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = {PersistenceTestContext.class})
public class BaseRepositoryFactoryBeanTest {
    @PersistenceContext
    private EntityManager entityManager;
    private BaseRepositoryFactoryBean repositoryFactoryBean;
    @Before
    public void setUp() {
        repositoryFactoryBean = new BaseRepositoryFactoryBean();
    }
    @Test
    public void createRepositoryFactory() {
        RepositoryFactorySupport repositoryFactory = repositoryFactoryBean.createRepositoryFactory(entityManager);
        assertEquals(BaseRepositoryFactoryBean.BaseRepositoryFactory.class, repositoryFactory.getClass());
    }
    @Test
    public void getRepositoryBaseClass() {
        BaseRepositoryFactoryBean.BaseRepositoryFactory repositoryFactory = (BaseRepositoryFactoryBean.BaseRepositoryFactory) repositoryFactoryBean.createRepositoryFactory(entityManager);
        RepositoryMetadata metaData = buildRepositoryMet
public class CooperativeScheduler extends SchedulingAlgorithm{
	public Results Run(int runtime, Vector processVector, Results result) {
	    int i = 0;
	    int comptime = 0;
	    int currentProcess = 0;
	    int previousProcess = 0;
	    int size = processVector.size();
	    int completed = 0;
	    String resultsFile = "Summary-Processes";
	    result.schedulingType = "Batch (Nonpreemptive)";
	    result.schedulingName = "First-Come First-Served"; 
	    try {
	      PrintStream out = new PrintStream(new FileOutputStream(resultsFile));
	      sProcess process = (sProcess) processVector.elementAt(currentProcess);
	      out.println("Process: " + currentProcess + " registered... (" + process.cputime + " " + process.ioblocking + " " + process.cpudone + " " + process.cpudone + ")");
	      while (comptime < runtime) {
	        if (process.cpudone == process.cputime) {
	          completed++;
	          out.println("Process: " + currentProcess + " completed... (" + process.cputime + " " + p

	          if (completed == size) {
	            result.compuTime = comptime;
	            out.close();
	            return result;
	          }
	          for (i = size - 1; i >= 0; i--) {
	            process = (sProcess) processVector.elementAt(i);
	            if (process.cpudone < process.cputime) { 
	              currentProcess = i;
	            }
	          }
	          process = (sProcess) processVector.elementAt(currentProcess);
	          out.println("Process: " + currentProcess + " registered... (" + process.cputime + " " + process.ioblocking + " " + process.cpudone + " " + process.cpudone + ")");
	        }      
	        if (process.ioblocking == process.ionext) {
	          out.println("Process: " + currentProcess + " I/O blocked... (" + process.cputime + " " + process.ioblocking + " " + process.cpudone + " " + process.cpudone + ")");
	          process.numblocked++;
	          process.ionext = 0; 
	          previousProcess = currentProcess;
	          for (i = size - 
/**
 *
 * @author Olivier Corby, Wimmics INRIA I3S, 2016
 *
 */
public class CompositeProcess extends WorkflowProcess {
    List<WorkflowProcess> processList;
    
    CompositeProcess(){
        processList = new ArrayList<WorkflowProcess>();
    }
    
    CompositeProcess(List<WorkflowProcess> l){
        processList = l;
    }
    
    public void insert(WorkflowProcess p){
        processList.add(p);
    }
    
   
     public WorkflowProcess getProcessLast(){
         if (processList.isEmpty()){
             return null;
         }
        return processList.get(processList.size() - 1);
    }
    
    /**
     * @return the processList
     */
    @Override
    public List<WorkflowProcess> getProcessList() {
        return processList;
    }
    /**
     * @param processList the processList to set
     */
    public void setProcessList(List<WorkflowProcess> processList) {
        this.processList = processList;
    }
    
     @Override
    public void init(boolean b) {
        i
/**
 * 消息处理，用于ui线程处理消息事件
 * 
 * @version 1.0.0
 * @date 2014-2-13
 * @author S.Kei.Cheung
 */
public abstract class MessageEventHandlerContainer {
	/** 消息接收Handler */
	protected Handler messageReceivedHandler;
	/** 回复接收Handler */
	protected Handler replyReceivedHandler;
	/** 成功发送消息Handler */
	protected Handler messageSentSuccessfulHandler;
	/** 错误捕捉Handler */
	protected Handler exceptionCaughtHandler;
	/** Session关闭Handler */
	protected Handler sessionClosedHandler;
	/** Session创建Handler */
	protected Handler sessionCreatedHandler;
	/** 消息发送失败Handler */
	protected Handler messageSentFailedHandler;
	/** 连接失败Handler */
	protected Handler connectionFailedHandler;
	/** 网络改变Handler */
	protected Handler networkChangedHandler;
	/** 创建消息接收Handler */
	public abstract void createMessageReceivedHandler();
	/** 创建连接失败Handler */
	public abstract void createConnectionFailedHandler();
	/** 创建回复接收Handler */
	public abstract void createReplyReceivedHandler();
	/** 创建消息成功发送Handler */
	public abstract v
interface Handler{
	void handleRequest(int key);
class ConHandler1 implements Handler {
	private Handler handler;
	public ConHandler1(Handler handler) {
		this.handler = handler;
	}
	public void handleRequest(int key) {
		if (key == 1) {
			System.out.println("handle in 1");
		} else {
			handler.handleRequest(key);
		}
	}
class ConHandler2 implements Handler {
	private Handler handler;
	public ConHandler2(Handler handler) {
		this.handler = handler;
	}
	public void handleRequest(int key) {
		if (key == 2) {
			System.out.println("handle in 2");
		} else {
			handler.handleRequest(key);
		}
	}
class ConHandler3 implements Handler {
	private Handler handler;
	public ConHandler3(Handler handler) {
		this.handler = handler;
	}
	public void handleRequest(int key) {
		if (key == 3) {
			System.out.println("handle in 3");
		} else {
			handler.handleRequest(key);
		}
	}
public class ChainOfResponsiblityPattern {
	public static void main(String[] args) {
		Handler handler = new ConHandler2(ne
/**
 * A helper to boot the repository system and a repository system session.
 */
public class Booter
    public static RepositorySystem newRepositorySystem()
    {
        return ManualRepositorySystemFactory.newRepositorySystem();
    }
    public static DefaultRepositorySystemSession newRepositorySystemSession( RepositorySystem system )
    {
        DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();
        LocalRepository localRepo = new LocalRepository( "target/local-repo" );
        session.setLocalRepositoryManager( system.newLocalRepositoryManager( session, localRepo ) );
        session.setTransferListener( new ConsoleTransferListener() );
        session.setRepositoryListener( new ConsoleRepositoryListener() );
        return session;
    }
    public static List<RemoteRepository> newRepositories( RepositorySystem system, RepositorySystemSession session )
    {
        return new ArrayList<RemoteRepository>( Arrays.asList( newCentralRepository
@Controller
@RequestMapping("/manage/manageModule")
public class ManageModuleController {
	private static Logger GSLogger = LoggerFactory.getLogger(ManageModuleController.class);
	@Autowired
	private ManageModuleService manageModuleService;
	private final String LIST_ACTION = "redirect:/manage/manageModule/list.do";
	/**
	 * 进入管理页
	 * @return
	 */
	@RequestMapping(value="enter")
	public ModelAndView enter() {		
		try{
		}catch(Exception e){
			GSLogger.error("进入manageModule管理页时发生错误：/manage/manageModule/enter", e);
			e.printStackTrace();
		}
		ModelAndView mav = new ModelAndView("/manage/manageModule/enter");
		return mav;
	}
	/**
	 * 列示或者查询所有数据
	 * @return
	 */
	@RequestMapping(value="list")
	public void list(ManageModuleQuery query, HttpServletResponse response) {
		String json = "";
		StringBuilder result = new StringBuilder();
		try{
			BaseBean baseBean = manageModuleService.findAllPage(query);
			result.append("{\"total\":").append(baseBean.getCount()).append(",")
			.append("\"r

			for(int i=0;i<baseBean.getList().size();i++) {
				ManageModule manageModule = (ManageModule) baseBean.getList().get(i);
				result.append("{")
			    .append("\"moduleId\":\"").append(manageModule.getModuleId()).append("\"").append(",")
			    .append("\"moduleName\":\"").append(manageModule.getModuleName()).append("\"").append(",")
			    .append("\"moduleCode\":\"").append(manageModule.getModuleCode()).append("\"").append(",")
			    .append("\"moduleDesc\":\"").append(manageModule.getModuleDesc()).append("\"").append(",")
			    .append("\"moduleIcon\":\"").append(manageModule.getModuleIcon()).append("\"").append(",")
			    .append("\"moduleUrl\":\"").append(manageModule.getModuleUrl()).append("\"").append(",")
			    .append("\"createTime\":\"").append(manageModule.getCreateTime()).append("\"").append(",")
			    .append("\"editTime\":\"").append(manageModule.getEditTime()).append("\"").append(",")
			    .append("\"editor\":\"").append(manageModule.getEditor()).append("\"")


			}
			json = result.toString();
			if(baseBean.getList().size() > 0) {
				json = json.substring(0, json.length()-1);
			}
			json += "]}";
			
			response.setHeader("Cache-Control", "no-cache");
			response.setCharacterEncoding("utf-8");
			try {
				response.getWriter().write(json);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}catch(Exception e){
			GSLogger.error("显示manageModule列表时发生错误：/manage/manageModule/list", e);
			e.printStackTrace();
		}
	}
	/**
	 * 进入新增页
	 * @return
	 */
	@RequestMapping(value="add")
	public ModelAndView add(ManageModuleQuery query) {		
		try{
		}catch(Exception e){
			GSLogger.error("进入manageModule新增页时发生错误：/manage/manageModule/add", e);
			e.printStackTrace();
		}
		ModelAndView mav = new ModelAndView("/manage/manageModule/add");
		return mav;
	}
	/**
	 * 保存对象
	 * @param request
	 * @param manageModule
	 * @return
	 */
	@RequestMapping(value="save")
	public void save(HttpServletRequest request, HttpServletResponse response, ManageModuleQ

		ManageModule manageModule = new ManageModule();
		String json = "";
		try{
		    manageModule.setModuleName(query.getModuleName());
		    manageModule.setModuleCode(query.getModuleCode());
		    manageModule.setModuleDesc(query.getModuleDesc());
		    manageModule.setModuleIcon(query.getModuleIcon());
		    manageModule.setModuleUrl(query.getModuleUrl());
		    manageModule.setCreateTime(query.getCreateTime());
		    manageModule.setEditTime(query.getEditTime());
		    manageModule.setEditor(query.getEditor());
	        Timestamp  ts=new Timestamp(new Date().getTime());
	        manageModule.setCreateTime(ts);
	        manageModule.setEditTime(ts);
			manageModuleService.save(manageModule);
			json = "{\"success\":\"true\",\"message\":\"保存成功\"}";
		} catch(Exception e) {
			json = "{\"success\":\"false\",\"message\":\"保存失败\"}";
			GSLogger.error("保存manageModule信息时发生错误：/manage/manageModule/save", e);
			e.printStackTrace();
		}
		response.setHeader("Cache-Control", "no-cache");
		res

		try {
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	/**
	 * 进入修改页
	 * @return
	 */
	@RequestMapping(value="modify")
	public ModelAndView modify(ManageModuleQuery query) {	
		ManageModule manageModule=new ManageModule();
		
		try{
			manageModule = manageModuleService.findById(query.getModuleId());
		}catch(Exception e){
			GSLogger.error("进入manageModule修改页时发生错误：/manage/manageModule/modify", e);
			e.printStackTrace();
		}
		ModelAndView mav = new ModelAndView("/manage/manageModule/modify");
		mav.addObject("manageModule", manageModule);
		return mav;
	}
	/**
	 * 更新对象
	 * @param request
	 * @param query
	 * @return
	 */
	@RequestMapping(value="update")
	public void update(HttpServletRequest request, HttpServletResponse response, ManageModuleQuery query) {
		ManageModule manageModule = null;
		String json = "";
		try{
		    manageModule = manageModuleService.findById(query.getModuleId());
		    manageModule.setModuleName(query.getModu

		    manageModule.setModuleCode(query.getModuleCode());
		    manageModule.setModuleDesc(query.getModuleDesc());
		    manageModule.setModuleIcon(query.getModuleIcon());
		    manageModule.setModuleUrl(query.getModuleUrl());
		    manageModule.setCreateTime(query.getCreateTime());
		    manageModule.setEditTime(query.getEditTime());
		    manageModule.setEditor(query.getEditor());
	        Timestamp  ts=new Timestamp(new Date().getTime());
	        manageModule.setEditTime(ts);
			manageModuleService.update(manageModule);
			
			json = "{\"success\":\"true\",\"message\":\"编辑成功\"}";
		} catch(Exception e) {
			json = "{\"success\":\"false\",\"message\":\"编辑失败\"}";
			GSLogger.error("编辑manageModule信息时发生错误：/manage/manageModule/update", e);
			e.printStackTrace();
		}
		response.setHeader("Cache-Control", "no-cache");
		response.setCharacterEncoding("utf-8");
		try {
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	/**
	 * 删除单个或多个对象
	 * @pa
@Configuration
public class StockRmiContext {
	@Inject
	private StockService stockService;
	@Inject
	private WarehouseService warehouseService;
	@Inject
	private StockKeeperService stockKeeperService;
	@Bean
	public RmiServiceExporter rmiStockServiceExporter() {
		RmiServiceExporter rmiServiceExportor = new RmiServiceExporter();
		rmiServiceExportor.setServiceName("StockService");
		rmiServiceExportor.setServiceInterface(StockService.class);
		rmiServiceExportor.setService(stockService);
		rmiServiceExportor.setRegistryPort(1099);
		return rmiServiceExportor;
	}
	@Bean
	public RmiServiceExporter rmiWarehouseServiceExporter() {
		RmiServiceExporter rmiServiceExporter = new RmiServiceExporter();
		rmiServiceExporter.setServiceName("WarehouseService");
		rmiServiceExporter.setServiceInterface(WarehouseService.class);
		rmiServiceExporter.setService(warehouseService);
		return rmiServiceExporter;
	}
	@Bean
	public RmiServiceExporter rmiStockKeeperServiceExporter() {
		RmiServiceExporter rm
/**
 * 행정전문용어사전관리를 처리하는 Service Class 구현
 * @author 공통서비스 장동한
 * @since 2009.07.03
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.07.03  장동한          최초 생성
 *
 * </pre>
 */
public interface EgovAdministrationWordManageService {
        /**
	 * 행정전문용어사전관리 목록을 조회한다. 
	 * @param searchVO  조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	public List selectAdministrationWordManageList(AdministrationWordManage searchVO) throws Exception;
        /**
         * 행정전문용어사전관리를(을) 목록 전체 건수를(을) 조회한다.
         * @param searchVO  조회할 정보가 담긴 VO
         * @return int
         * @throws Exception
         */
        public int selectAdministrationWordManageListCnt(AdministrationWordManage searchVO) throws Exception;
        
        /**
	 * 행정전문용어사전관리를(을) 상세조회 한다.
	 * @param administrationWordManage  행정전문용어사전관리 정보 담김 VO
	 * @return List
	 * @throws Exception
	 *
/**
 * @author micha
 */
public class ProcessMonitor implements Serializable{
	private static final long serialVersionUID = 1L;
	private SushiProcess process;
	private Set<SushiPatternQuery> queries;
	private Set<ProcessInstanceMonitor> processInstanceMonitors;
	private int ID;
	private int numberOfProcessInstances;
	private float averageRuntimeMillis;
	public ProcessMonitor(SushiProcess process){
		this.process = process;
		this.queries = new HashSet<SushiPatternQuery>();
		this.processInstanceMonitors = new HashSet<ProcessInstanceMonitor>();
		this.ID = BPMNQueryMonitor.getInstance().getProcessMonitors().size();
	}
	public Set<SushiPatternQuery> getQueries() {
		return queries;
	}
	public void addQuery(SushiPatternQuery query){
		this.queries.add(query);
		for(ProcessInstanceMonitor processInstanceMonitor : processInstanceMonitors){
			processInstanceMonitor.addQuery(query);
		}
	}
	public SushiProcess getProcess() {
		return process;
	}
	public void setProcess(SushiProcess process) 

		this.process = process;
	}
	public void setQueryFinishedForProcessInstance(SushiPatternQuery query, SushiProcessInstance processInstance) {
		ProcessInstanceMonitor processInstanceMonitor = getProcessInstanceMonitorForProcessInstance(processInstance);
		processInstanceMonitor.setQueryFinished(query);
	}
	private ProcessInstanceMonitor getProcessInstanceMonitorForProcessInstance(SushiProcessInstance processInstance){
		for(ProcessInstanceMonitor processInstanceMonitor : processInstanceMonitors){
			/*TODO: equals auf dem Process funktioniert nicht, da gleiche Prozesse mit verschiedenen IDs als Parameter kommen können:
			 * SushiProcess.equals überschreiben?
			 * Erstmal mit ID prüfen
			 */
			if(processInstanceMonitor.getProcessInstance() != null && processInstanceMonitor.getProcessInstance().getID() == processInstance.getID()){
				return processInstanceMonitor;
			}
		}
		ProcessInstanceMonitor processInstanceMonitor = new ProcessInstanceMonitor(processInstance);
		processInstan

		processInstanceMonitors.add(processInstanceMonitor);
		numberOfProcessInstances = processInstanceMonitors.size();
		return processInstanceMonitor;
	}
	public ProcessInstanceStatus getProcessInstanceStatus(SushiProcessInstance processInstance) {
		ProcessInstanceMonitor processInstanceMonitor = getProcessInstanceMonitorForProcessInstance(processInstance);
		return processInstanceMonitor.getStatus();
	}
	public Set<ProcessInstanceMonitor> getProcessInstanceMonitors() {
		return processInstanceMonitors;
	}
	/**
	 * Returns all monitored process instances with the requested status.
	 * @param processInstanceStatus
	 * @return
	 */
	public Set<SushiProcessInstance> getProcessInstances(ProcessInstanceStatus processInstanceStatus){
		Set<SushiProcessInstance> processInstances = new HashSet<SushiProcessInstance>();
		for(ProcessInstanceMonitor monitor : processInstanceMonitors){
			if(monitor.getStatus().equals(processInstanceStatus)){
				processInstances.add(monitor.getProcessInstance());

			}
		}
		return processInstances;
	}
	public int getID() {
		return ID;
	}
	public int getNumberOfProcessInstances() {
		return numberOfProcessInstances;
	}
	public float getAverageRuntimeMillis() {
		float sum = 0;
		for(ProcessInstanceMonitor processInstanceMonitor : processInstanceMonitors){
			sum += processInstanceMonitor.getEndTime().getTime() - processInstanceMonitor.getStartTime().getTime();
		}
		averageRuntimeMillis = sum / processInstanceMonitors.size();
		return averageRuntimeMillis;
	}
	public float getAverageRuntimeForQuery(SushiPatternQuery query){
		if(processInstanceMonitors.isEmpty()){
			return 0;
		}
		float sum = 0;
		for(ProcessInstanceMonitor processInstanceMonitor : processInstanceMonitors){
			sum += processInstanceMonitor.getRuntimeForQuery(query);
		}
		return sum / processInstanceMonitors.size();
	}
	public float getPathFrequencyForQuery(SushiPatternQuery query){
		if(processInstanceMonitors.isEmpty()){
			return 0;
		}
		float count = 0;
		for(ProcessIns
/**
 * 개요
 * - 회의실관리에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - 회의실관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 회의실관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Repository("mtgPlaceManageDAO")
public class MtgPlaceManageDAO extends EgovComAbstractDAO {
	/**
	 * 회의실관리정보를 관리하기 위해 등록된 회의실관리 목록을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return List - 회의실관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<MtgPlaceManageVO> selectMtgPlaceManageList(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
		return list("mtgPlaceManageDAO.selectMtgPlaceManageList", mtgPlaceManageVO);
	}
    /**
	 * 회의실관리목록 총 갯수를 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectMtgPlaceManageListTotCnt(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("mtgPlaceManageDAO.selectMtgPlaceManageListTotCnt", mtgPlaceManageVO);
    }
	/**

	 * 등록된 회의실관리의 상세정보를 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	public MtgPlaceManage selectMtgPlaceManage(MtgPlaceManageVO mtgPlaceManageVO)  throws Exception {
		return (MtgPlaceManage) selectByPk("mtgPlaceManageDAO.selectMtgPlaceManage", mtgPlaceManageVO);
	}
	/**
	 * 회의실관리정보를 신규로 등록한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void insertMtgPlaceManage(MtgPlaceManage mtgPlaceManage) throws Exception {
		insert("mtgPlaceManageDAO.insertMtgPlaceManage", mtgPlaceManage);
	}
	/**
	 * 기 등록된 회의실관리정보를 수정한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void updtMtgPlaceManage(MtgPlaceManage mtgPlaceManage) throws Exception {
		update("mtgPlaceManageDAO.updtMtgPlaceManage", mtgPlaceManage);
	}
	/**
	 * 기 등록된 회의실관리정보를 삭제한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void deleteMtgPlaceManage(MtgPlaceManage mtgPlaceManage) throws Exception {
        delete("mtgPlaceManageDAO.deleteMtgPlaceManage",mtgPlaceManage);
	}

	/******** 회의실 예약 관리 *************/
	/** 
	 * 회의실 ID 정보 목록을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return List - 회의실관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<MtgPlaceManageVO> selectMtgPlaceIDList(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
		return list("mtgPlaceManageDAO.selectMtgPlaceIDList", mtgPlaceManageVO);
	}
	/** 
	 * 회의실 예약정보를 관리하기 위해 등록된 회의실예약을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 목록
	 */
	public MtgPlaceManageVO selectMtgPlaceResveManageList(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
		return (MtgPlaceManageVO) selectByPk("mtgPlaceManageDAO.selectMtgPlaceResveManageList", mtgPlaceManageVO);
	}
	/**
	 * 회의실예약 신청화면을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	public MtgPlaceManageVO selectMtgPlaceResve(MtgPlaceManageVO mtgPlaceManageVO)  throws Exception {
		return (MtgPlaceManageVO) selectByPk("mtgPlaceManageDAO.selectMtgPlaceResve", mtgP

	}
	/**
	 * 등록된 회의실예약 상세정보를 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	public MtgPlaceManageVO selectMtgPlaceResveDetail(MtgPlaceManageVO mtgPlaceManageVO)  throws Exception {
		return (MtgPlaceManageVO) selectByPk("mtgPlaceManageDAO.selectMtgPlaceResveDetail", mtgPlaceManageVO);
	}
	/**
	 * 회의실예약 정보를 신규로 등록한다.
	 * @param mtgPlaceResve - 회의실예약 model
	 */
	public void insertMtgPlaceResve(MtgPlaceResve mtgPlaceResve) throws Exception {
		insert("mtgPlaceManageDAO.insertMtgPlaceResve", mtgPlaceResve);
	}
	/**
	 * 기 등록된 회의실예약 정보를 수정한다.
	 * @param mtgPlaceResve - 회의실예약 model
	 */
	public void updtMtgPlaceResve(MtgPlaceResve mtgPlaceResve) throws Exception {
		update("mtgPlaceManageDAO.updtMtgPlaceResve", mtgPlaceResve);
	}
	/**
	 * 기 등록된 회의실예약 정보를 삭제한다.
	 * @param mtgPlaceResve - 회의실예약 model
	 */
	public void deleteMtgPlaceResve(MtgPlaceResve mtgPlaceResve) throws Exception {
        delete("mtgPlaceManageDAO.deleteMtgPlaceResve",mtgPlaceResv

	}	
	/**
	 * 회의실 중복여부 체크.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return int - 중복건수
	 */
	public int mtgPlaceResveDplactCeck(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
		return (Integer)getSqlMapClientTemplate().queryForObject("mtgPlaceManageDAO.mtgPlaceResveDplactCeck", mtgPlaceManageVO);
	}
	/******** 회의실 비품 관리 *************/
	/**
	 * 비품정보 목록을 조회한다
	 * @param fxtrsManageVO - 비품관리 VO
	 * @return List - 비품관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<MtgPlaceFxtrsVO> selectFxtrsManageList(MtgPlaceFxtrsVO mtgPlaceFxtrsVO) throws Exception {
		return list("mtgPlaceManageDAO.selectFxtrsManageList", mtgPlaceFxtrsVO);
	}
	/**
	 * 회의실관리 비품정보를 신규로 등록한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void insertMtgPlaceFxtrs(MtgPlaceFxtrs mtgPlaceFxtrs) throws Exception {
		insert("mtgPlaceManageDAO.insertMtgPlaceFxtrs", mtgPlaceFxtrs);
	}
	/**
	 * 회의실관리 비품정보를 삭제한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void deleteMtgPlaceFxtrs(MtgPlaceFxtrs mtgPl
/**
 * 用户管理service接口
 * @author Chencong
 *
 */
public interface IUserManageService {
	/**
	 * 初始化用户管理页面
	 * @author Chencong
	 * @param in
	 * @return
	 */
	UserManageOut initUserManage(UserManageIn in);
	/**
	 * 查询用户集合
	 * @author Chencong
	 * @param in
	 * @return
	 */
	UserManageOut findUsers(UserManageIn in);
	/**
	 * 生成用户
	 * @author Chencong
	 * @param in
	 * @return
	 */
	UserManageOut generateUsers(UserManageIn in);
	/**
	 * 用户信息 幼儿园管理
	 * @author Chencong
	 * @param in
	 * @return
	 */
	UserManageOut usersInfo(UserManageIn in);
	/**
	 * 进入生成用户页面
	 * @author Chencong
	 * @param in
	 * @return
	 */
	UserManageOut initGenerateUsers(UserManageIn in);
	/**
	 * 删除用户
	 * @author Chencong
	 * @param in
	 * @return
	 */
	UserManageOut deleteUser(UserManageIn in);
	/**
	 * 更新用户
	 * @author Chencong
	 * @param in
	 * @return
	 */
	UserManageOut updateUser(UserManageIn in);
	/**
	 * 导出用户
	 * @author Chencong
	 * @param in
	 * @return
	 */
	UserManageOut exportUser(UserManageIn in);
	/**

/**
 * 권한관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Repository("authorManageDAO")
public class AuthorManageDAO extends EgovComAbstractDAO {
    /**
	 * 권한목록을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return List<AuthorManageVO>
	 * @exception Exception
	 */
    @SuppressWarnings("unchecked")
	public List<AuthorManageVO> selectAuthorList(AuthorManageVO authorManageVO) throws Exception {
        return list("authorManageDAO.selectAuthorList", authorManageVO);
    }
	/**
	 * 권한을 등록한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void insertAuthor(AuthorManage authorManage) throws Exception {
        insert("authorManageDAO.insertAuthor", authorManage);
    }
    /**
	 * 권한을 수정한다.
	 * @param authorManag

	 * @exception Exception
	 */
    public void updateAuthor(AuthorManage authorManage) throws Exception {
        update("authorManageDAO.updateAuthor", authorManage);
    }
    /**
	 * 권한을 삭제한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void deleteAuthor(AuthorManage authorManage) throws Exception {
        delete("authorManageDAO.deleteAuthor", authorManage);
    }
    /**
	 * 권한을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return AuthorManageVO
	 * @exception Exception
	 */
    public AuthorManageVO selectAuthor(AuthorManageVO authorManageVO) throws Exception {
        return (AuthorManageVO) selectByPk("authorManageDAO.selectAuthor", authorManageVO);
    }
    /**
	 * 권한목록 총 갯수를 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectAuthorListTotCnt(AuthorManageVO authorManageVO)  throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("authorManageDAO.
/**
 * 개요
 * - 당직관리에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - 당직관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 당직관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Repository("bndtManageDAO")
public class BndtManageDAO extends EgovComAbstractDAO {
	/**
	 * 당직관리정보를 관리하기 위해 등록된 당직관리 목록을 조회한다.
	 * @param bndtManageVO - 당직관리 VO
	 * @return List - 당직관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<BndtManageVO> selectBndtManageList(BndtManageVO bndtManageVO) throws Exception {
		return list("bndtManageDAO.selectBndtManageList", bndtManageVO);
	}
    /**
	 * 당직관리목록 총 갯수를 조회한다.
	 * @param bndtManageVO - 당직관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectBndtManageListTotCnt(BndtManageVO bndtManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("bndtManageDAO.selectBndtManageListTotCnt", bndtManageVO);
    }
	/**
	 * 등록된 당직관리의 상세정보를 조회한다.
	 * @param bndtManageVO - 당직관리 VO
	 * @return Bndt

	 */
	public BndtManageVO selectBndtManage(BndtManageVO bndtManageVO)  throws Exception {
		return (BndtManageVO) selectByPk("bndtManageDAO.selectBndtManage", bndtManageVO);
	}
	/**
	 * 당직관리정보를 신규로 등록한다.
	 * @param bndtManage - 당직관리 model
	 */
	public void insertBndtManage(BndtManage bndtManage) throws Exception {
		insert("bndtManageDAO.insertBndtManage", bndtManage);
	}
	/**
	 * 기 등록된 당직관리정보를 수정한다.
	 * @param bndtManage - 당직관리 model
	 */
	public void updtBndtManage(BndtManage bndtManage) throws Exception {
		update("bndtManageDAO.updtBndtManage", bndtManage);
	}
	/**
	 * 기 등록된 당직관리정보를 삭제한다.
	 * @param bndtManage - 당직관리 model
	 */
	public void deleteBndtManage(BndtManage bndtManage) throws Exception {
        delete("bndtManageDAO.deleteBndtManage",bndtManage);
	}
    /**
	 * 당직일지 갯수를 조회한다.
	 * @param bndtManageVO - 당직관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectBndtDiaryTotCnt(BndtManage bndtManage) throws Exception {
        return (Integer)getSqlMapClie

    }
    /***** 당직 체크관리 *****/	
	/**
	 * 당직체크관리정보를 관리하기 위해 등록된 당직체크관리 목록을 조회한다.
	 * @param bndtCeckManageVO - 당직체크관리 VO
	 * @return List - 당직체크관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<BndtCeckManageVO> selectBndtCeckManageList(BndtCeckManageVO bndtCeckManageVO) throws Exception {
		return list("bndtManageDAO.selectBndtCeckManageList", bndtCeckManageVO);
	}
    /**
	 * 당직체크관리목록 총 갯수를 조회한다.
	 * @param bndtCeckManageVO - 당직체크관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectBndtCeckManageListTotCnt(BndtCeckManageVO bndtCeckManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("bndtManageDAO.selectBndtCeckManageListTotCnt", bndtCeckManageVO);
    }
	/**
	 * 등록된 당직체크관리의 상세정보를 조회한다.
	 * @param bndtCeckManageVO - 당직체크관리 VO
	 * @return BndtCeckManageVO - 당직체크관리 VO
	 */
	public BndtCeckManageVO selectBndtCeckManage(BndtCeckManageVO bndtCeckManageVO)  throws Exception {
		return (BndtCeckManageVO) selectByPk("bndtMan

	}
	/**
	 * 당직체크관리정보를 신규로 등록한다.
	 * @param bndtCeckManage - 당직체크관리 model
	 */
	public void insertBndtCeckManage(BndtCeckManage bndtCeckManage) throws Exception {
		insert("bndtManageDAO.insertBndtCeckManage", bndtCeckManage);
	}
	/**
	 * 기 등록된 당직체크관리정보를 수정한다.
	 * @param bndtCeckManage - 당직체크관리 model
	 */
	public void updtBndtCeckManage(BndtCeckManage bndtCeckManage) throws Exception {
		update("bndtManageDAO.updtBndtCeckManage", bndtCeckManage);
	}
	/**
	 * 기 등록된 당직체크관리정보를 삭제한다.
	 * @param bndtCeckManage - 당직체크관리 model
	 */
	public void deleteBndtCeckManage(BndtCeckManage bndtCeckManage) throws Exception {
        delete("bndtManageDAO.deleteBndtCeckManage",bndtCeckManage);
	}
    /**
	 * 당직체크 중복여부 조회한다.
	 * @param bndtCeckManageVO - 당직체크관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectBndtCeckManageDplctAt(BndtCeckManage bndtCeckManage) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("bndtManageDAO.selectBndtCeckManageDplctA

    }
    /***** 당직 일지 *****/
	/**
	 * 등록된 당직일지관리의 상세정보를 조회한다.
	 * @param bndtDiaryVO - 당직일지관리 VO
	 * @return List - 당직일지관리 VO
	 */
	@SuppressWarnings("unchecked")
	public List<BndtDiaryVO> selectBndtDiary(BndtDiaryVO bndtDiaryVO) throws Exception {
		return list("bndtManageDAO.selectBndtDiary", bndtDiaryVO);
	}
	/**
	 * 당직일지관리정보를 신규로 등록한다.
	 * @param bndtDiary - 당직일지관리 model
	 */
	public void insertBndtDiary(BndtDiary bndtDiary) throws Exception {
		insert("bndtManageDAO.insertBndtDiary", bndtDiary);
	}
	/**
	 * 기 등록된 당직일지관리정보를 수정한다.
	 * @param bndtDiary - 당직일지관리 model
	 */
	public void updtBndtDiary(BndtDiary bndtDiary) throws Exception {
		update("bndtManageDAO.updtBndtDiary", bndtDiary);
	}
	/**
	 * 기 등록된 당직일지관리정보를 삭제한다.
	 * @param bndtDiary - 당직일지관리 model
	 */
	public void deleteBndtDiary(BndtDiary bndtDiary) throws Exception {
        delete("bndtManageDAO.deleteBndtDiary",bndtDiary);
	}
	/**
	 * 등록된 당직관리의 상세정보를 조회한다.
	 * @param bndtManageVO - 당직관리 VO
	 * @return BndtManageVO - 
/* Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Suspending and activating process definitions and process instances was added
 * in Activiti 5.11. This class tests this newly added functionality.
 * 
 * @author Joram
 */
@RunOnlyWithTestDataFromVersion(versions = {"5.7", "5.8", "5.9", "5.10"})
public class SuspendAndActivateFunctionalityTest extends UpgradeTestCase {
  @Test
  public void testSuspendProcessDefinition() {
    ProcessDefinition processDefinition = processEngine.getRepositoryService().createProcessDefinitionQue

            .singleResult();
    assertNotNull(processDefinition);
    assertFalse(processDefinition.isSuspended());
    assertEquals(5, processEngine.getRuntimeService().createProcessInstanceQuery().processDefinitionId(processDefinition.getId()).active().count());
    assertEquals(0, processEngine.getRuntimeService().createProcessInstanceQuery().processDefinitionId(processDefinition.getId()).suspended().count());
    processEngine.getRepositoryService().suspendProcessDefinitionById(processDefinition.getId(), true, null);
    try {
      processEngine.getRuntimeService().startProcessInstanceById(processDefinition.getId());
    } catch (ActivitiException e) {
      assertTrue(e.getMessage().toLowerCase().contains("suspend"));
    }
    assertEquals(0, processEngine.getRuntimeService().createProcessInstanceQuery().processDefinitionId(processDefinition.getId()).active().count());
    assertEquals(5, processEngine.getRuntimeService().createProcessInstanceQuery().processDefinitionId(proces

    processEngine.getRepositoryService().activateProcessDefinitionById(processDefinition.getId(), true, null);
    assertEquals(5, processEngine.getRuntimeService().createProcessInstanceQuery().processDefinitionId(processDefinition.getId()).active().count());
    assertEquals(0, processEngine.getRuntimeService().createProcessInstanceQuery().processDefinitionId(processDefinition.getId()).suspended().count());
  }
  @Test
  public void testSuspendProcessInstance() {
    ProcessDefinition processDefinition = processEngine.getRepositoryService().createProcessDefinitionQuery().processDefinitionKey("suspendAndActivate")
            .singleResult();
    assertNotNull(processDefinition);
    assertFalse(processDefinition.isSuspended());
    assertEquals(5, processEngine.getRuntimeService().createProcessInstanceQuery().processDefinitionId(processDefinition.getId()).active().count());
    assertEquals(0, processEngine.getRuntimeService().createProcessInstanceQuery().processDefinitionId(processD

    ProcessInstance processInstance = processEngine.getRuntimeService().createProcessInstanceQuery().processDefinitionId(processDefinition.getId()).list()
            .get(0);
    assertFalse(processInstance.isSuspended());
    processEngine.getRuntimeService().suspendProcessInstanceById(processInstance.getId());
    assertEquals(4, processEngine.getRuntimeService().createProcessInstanceQuery().processDefinitionId(processDefinition.getId()).active().count());
    assertEquals(1, processEngine.getRuntimeService().createProcessInstanceQuery().processDefinitionId(processDefinition.getId()).suspended().count());
    try {
      Task task = processEngine.getTaskService().createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
      processEngine.getTaskService().complete(task.getId());
    } catch (ActivitiException e) {
      assertTrue(e.getMessage().toLowerCase().contains("suspend"));
    }
    processEngine.getRuntimeService().activateProcessInstanceById(processIns
/**
 * 회의관리를 처리하기 위한 Dao 구현 Class
 * @author 공통서비스 장동한
 * @since 2009.03.20
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  장동한          최초 생성
 *
 * </pre>
 */
@Repository("meetingManageDao")
public class MeetingManageDao extends EgovComAbstractDAO {
    /**
	 * 부서 목록을 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	public List<?> egovMeetingManageLisAuthorGroupPopup(ComDefaultVO searchVO){
		return list("MeetingManage.EgovMeetingManageLisAuthorGroupPopup", searchVO);
	}
    /**
	 * 아이디 목록을 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	public List<?> egovMeetingManageLisEmpLyrPopup(ComDefaultVO searchVO){
		return list("MeetingManage.EgovMeetingManageLisEmpLyrPopup", searchVO);
	}
    /**
	 * 회의정보 목록을 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Ex

	 */
	public List<?> selectMeetingManageList(ComDefaultVO searchVO){
		return list("MeetingManage.selectMeetingManage", searchVO);
	}
    /**
	 * 회의정보를 상세조회 한다.
	 * @param MeetingManageVO - 회정정보가 담김 VO
	 * @return List
	 * @throws Exception
	 */
	public List<?> selectMeetingManageDetail(MeetingManageVO meetingManageVO){
		return list("MeetingManage.selectMeetingManageDetail", meetingManageVO);
	}
    /**
	 * 회의정보를 목록 전체 건수를 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return int
	 * @throws Exception
	 */
	public int selectMeetingManageListCnt(ComDefaultVO searchVO){
		return (Integer)select("MeetingManage.selectMeetingManageCnt", searchVO);
	}
    /**
	 * 회의정보를 등록한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @throws Exception
	 */
	public void insertMeetingManage(MeetingManageVO meetingManageVO){
		insert("MeetingManage.insertMeetingManage", meetingManageVO);
	}
    /**
	 * 회의정보를 수정한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @throws Exception
	 */
	public void updateMeetingManage(Mee
public class ServiceFactory {
    private DatabaseService databaseService = null;
    private ImageService imageService = null;
    private QuestionService questionService = null;
    private RecordService recordService = null;
    private static ServiceFactory instance = null;
    private ServiceFactory() {
        databaseService = AsyncTaskServiceRegister.proxify(new DatabaseServiceImpl());
        imageService = AsyncTaskServiceRegister.proxify(new ImageServiceImpl());
        questionService = AsyncTaskServiceRegister.proxify(new QuestionServiceImpl());
        recordService = AsyncTaskServiceRegister.proxify(new RecordServiceImpl());
    }
    public static ServiceFactory getServiceFactory() {
        if (instance == null) {
            instance = new ServiceFactory();
        }
        return instance;
    }
	public DatabaseService getDatabaseService() {
		return databaseService;
	}
	public ImageService getImageService() {
		return imageService;
	}
	public QuestionService getQue
public interface ProcessManager {
	/**
	 * Key name used to store security context
	 */
	public static final String PARAM_SECURITY_CONTEXT = "PROCESS_MANAGER_SECURITY_CONTEXT";
	@Secured (Roles.PROCESS_DELETE)
	void deleteProcessInstance(@NotNull ProcessInstance process);
	@Secured (Roles.PROCESS_DELETE)
	void deleteProcessInstances(List<ProcessInstance> processes);
	@Secured (Roles.PROCESS_DELETE)
	void deleteProcessInstances(Set<Long> processIds);
	/**
	 * Wait for process completion
	 *
	 * @param processId ProcessInstance id
	 * @throws InterruptedException if waiting thread is interrupted
	 */
	void join(long processId) throws InterruptedException;
	/**
	 * Create process for process definition name by last version
	 *
	 * @param definitionId process definition id
	 * @param parameters	 initial context variables
	 * @return process instance identifier
	 * @throws org.flexpay.common.process.exception.ProcessInstanceException
	 *                                    when can't instant

	 * @throws ProcessDefinitionException when process definition not found
	 */
	@Secured (Roles.PROCESS_START)
	ProcessInstance startProcess(@NotNull String definitionId, @Nullable Map<String, Object> parameters)
			throws ProcessInstanceException, ProcessDefinitionException;
	/**
	 * Create process for process definition name by version
	 *
	 * @param definitionId process definition id
	 * @param parameters	 initial context variables
	 * @param  processDefinitionVersion process definition version
	 * @return process instance identifier
	 * @throws org.flexpay.common.process.exception.ProcessInstanceException
	 *                                    when can't instantiate process instance
	 * @throws ProcessDefinitionException when process definition not found
	 */
	@Secured (Roles.PROCESS_START)
	ProcessInstance startProcess(@NotNull String definitionId, @Nullable Map<String, Object> parameters, @Nullable Long processDefinitionVersion)
			throws ProcessInstanceException, ProcessDefiniti

	@Secured (Roles.PROCESS_END)
    void endProcess(@NotNull ProcessInstance process);
	/**
	 * Get list of system processes
	 *
	 * @return Process list
	 */
	@Secured (Roles.PROCESS_READ)
	List<ProcessInstance> getProcesses();
	/**
	 * Get paged list of system processes
	 *
	 * @param pager pager
	 * @return Process list
	 */
	@Secured (Roles.PROCESS_READ)
	List<ProcessInstance> getProcesses(Page<ProcessInstance> pager);
	/**
	 * Get paged list of system processes filtered by state, "start from" and "end before" dates
	 *
	 * @param processSorter process sorter
	 * @param pager pager
	 * @param startFrom lower bound for process start date (if null will not be used)
	 * @param endBefore upper bound for process end date (if null will not be used)
	 * @param state state allowed by filter (if null will not be used)
	 * @param name name allowed by filter (if null will not be used)
	 * @return Process list
	 */
	@Secured (Roles.PROCESS_READ)
	List<ProcessInstance> getProcesses(ProcessSorter
public class ServiceSet {
    private Integer serviceId;
    private String serviceName;
    private Integer serviceType;
    
    public String getServiceTypeName() {
    	if(serviceType.intValue()==1){
			this.serviceTypeName="MQ服务";
		}else if(serviceType.intValue()==2){
			this.serviceTypeName="天网接入";
		}else{
			this.serviceTypeName="GPS服务";
		}
		return serviceTypeName;
	}
	public void setServiceTypeName(String serviceTypeName) {
		this.serviceTypeName=serviceTypeName;
	}
	private String serviceTypeName;
    private String serviceIp;
    private Integer servicePort;
    private String serviceAccount;
    private String servicePwd;
    private String serviceVersion;
    private String exchangeName;
    public Integer getServiceId() {
        return serviceId;
    }
    public void setServiceId(Integer serviceId) {
        this.serviceId = serviceId;
    }
    public String getServiceName() {
        return serviceName;
    }
    public void setServiceName(String serviceName) {
   

    }
    public Integer getServiceType() {
        return serviceType;
    }
    public void setServiceType(Integer serviceType) {
        this.serviceType = serviceType;
    }
    public String getServiceIp() {
        return serviceIp;
    }
    public void setServiceIp(String serviceIp) {
        this.serviceIp = serviceIp;
    }
    public Integer getServicePort() {
        return servicePort;
    }
    public void setServicePort(Integer servicePort) {
        this.servicePort = servicePort;
    }
    public String getServiceAccount() {
        return serviceAccount;
    }
    public void setServiceAccount(String serviceAccount) {
        this.serviceAccount = serviceAccount;
    }
    public String getServicePwd() {
        return servicePwd;
    }
    public void setServicePwd(String servicePwd) {
        this.servicePwd = servicePwd;
    }
    public String getServiceVersion() {
        return serviceVersion;
    }
    public void setServiceVersion(String serviceVersion) {
   
public class HandlerStrategyManager
	private GeneratorHandler generatorHandler;
	private AnalyzerHandler analyzerHandler;
	private LemmatizerHandler lemmatizerHandler;
	private StemmerHandler stemmerHandler;
	private SandhiMergeHandler sandhiMergeHandler;
	private SandhiSplitHandler sandhiSplitHandler;
	private NullHandler nullHandler;
	private AnalyzerNoDictionaryHandler analyzerNoDictionaryHandler;
	private SandhiSolverHandler sandhiSolverHandler;
	private CombinedTaggerHandler combinedTaggerHandler;
	public HandlerStrategyManager()
	{
		generatorHandler = new GeneratorHandler();
		analyzerHandler = new AnalyzerHandler();
		lemmatizerHandler = new LemmatizerHandler();
		stemmerHandler = new StemmerHandler();
		sandhiMergeHandler = new SandhiMergeHandler();
		sandhiSplitHandler = new SandhiSplitHandler();
		nullHandler = new NullHandler();
		analyzerNoDictionaryHandler = new AnalyzerNoDictionaryHandler();
		sandhiSolverHandler = new SandhiSolverHandler();
		combinedTaggerHandler = new
/**
 * Implementation for ServiceProductMngService.
 * 
 * @author Lei Han
 *
 */
@Service("ServiceProductMngService")
@Transactional
public class ServiceProductMngServiceImpl extends AbstractService implements ServiceProductMngService {
    @Resource
    private ServiceProductDao dao;
    public List<?> queryList(Object condition) {
        return dao.queryListByCondition(condition);
    }
    public int queryCount(Object condition) {
        return dao.queryCountRowsByCondition(condition);
    }
    @SuppressWarnings("unchecked")
    public Object queryOne(Object condition) {
        ServiceProduct serviceProduct = (ServiceProduct) condition;
        ServiceProduct serviceProductToReturn = (ServiceProduct) dao.queryObjectByCondition(serviceProduct);
        ServiceArea serviceAreaQuery = new ServiceArea();
        serviceAreaQuery.setService_id(serviceProduct.getService_id());
        List<ServiceArea> serviceAreaList = (List<ServiceArea>) dao.queryServiceAreaList(serviceAreaQuery);


        for (ServiceArea area : serviceAreaList) {
            cityList.add(area.getCity_code());
        }
        serviceProductToReturn.setServiceAreaList(cityList);
        serviceProductToReturn = convdertTaxRate(serviceProductToReturn, false);
        return serviceProductToReturn;
    }
    public Object add(Object obj) {
        ServiceProduct serviceProduct = (ServiceProduct) obj;
        serviceProduct = convdertTaxRate(serviceProduct, true);
        dao.insert(serviceProduct);
        ServiceProduct serviceProductNew = (ServiceProduct) dao.queryObjectByCondition(obj);
        Integer serviceId = serviceProductNew.getService_id();
        List<String> serviceAreaList = serviceProduct.getServiceAreaList();
        if (serviceAreaList != null) {
            for (String cityCode : serviceAreaList) {
                ServiceArea serviceArea = new ServiceArea();
                serviceArea.setCity_code(cityCode);
                serviceArea.setService_id(serviceId);
              

            }
        }
        return dao.queryObjectByCondition(obj);
    }
    @SuppressWarnings("unchecked")
    public int update(Object obj) {
        ServiceProduct serviceProduct = (ServiceProduct) obj;
        serviceProduct = convdertTaxRate(serviceProduct, true);
        dao.update(serviceProduct);
        List<String> serviceAreaList = serviceProduct.getServiceAreaList();
        ServiceArea serviceAreaQuery = new ServiceArea();
        serviceAreaQuery.setService_id(serviceProduct.getService_id());
        List<ServiceArea> oldServiceAreaList = (List<ServiceArea>) dao.queryServiceAreaList(serviceAreaQuery);
        for (ServiceArea serviceAreaOld : oldServiceAreaList) {
            dao.deleteServiceArea(serviceAreaOld);
        }
        Integer serviceId = serviceProduct.getService_id();
        if (serviceAreaList != null) {
            for (String cityCode : serviceAreaList) {
                ServiceArea serviceArea = new ServiceArea();
                serviceArea.setC

                serviceArea.setService_id(serviceId);
                dao.insertServiceArea(serviceArea);
            }
        }
        return 1;
    }
    public int archive(Object obj) {
        return 0;
    }
    public int delete(Object obj) {
        ServiceProduct serviceProduct = (ServiceProduct) obj;
        return dao.delete(serviceProduct);
    }
    private ServiceProduct convdertTaxRate(ServiceProduct obj, boolean isToDB) {
        DecimalFormat fmt = new DecimalFormat("0.00");
        if (isToDB) {
            obj.setGst_rate(Float.parseFloat(obj.getGstRate()) / 100);
            obj.setPst_rate(Float.parseFloat(obj.getPstRate()) / 100);
        } else {
            obj.setGstRate(fmt.format(obj.getGst_rate() * 100));
            obj.setPstRate(fmt.format(obj.getPst_rate() * 100));
        }
        return obj;
    }
    public List<ServiceProduct> queryServiceProductByUserId(ServiceProduct serviceProduct) {
        return dao.queryServiceProductByUserId(serviceProduct
/**
 * Extended {@link RepositoryChangeListener} only for events on the {@link CmrRepositoryDefinition}
 * s.
 *
 * @author Ivan Senic
 *
 */
public interface CmrRepositoryChangeListener {
	/**
	 * If the online status of the repository has been changed.
	 *
	 * @param repositoryDefinition
	 *            {@link CmrRepositoryDefinition}.
	 * @param oldStatus
	 *            Old status.
	 * @param newStatus
	 *            New status.
	 */
	void repositoryOnlineStatusUpdated(CmrRepositoryDefinition repositoryDefinition, OnlineStatus oldStatus, OnlineStatus newStatus);
	/**
	 * If a repository has been added.
	 *
	 * @param cmrRepositoryDefinition
	 *            the repository definition.
	 */
	void repositoryAdded(CmrRepositoryDefinition cmrRepositoryDefinition);
	/**
	 * If a repository has been removed.
	 *
	 * @param cmrRepositoryDefinition
	 *            the repository definition.
	 */
	void repositoryRemoved(CmrRepositoryDefinition cmrRepositoryDefinition);
	/**
	 * Informs the listen
/**
 * @author Rodrigo Itursarry (itursarry@gmail.com)
 */
public abstract class AbstractRepositoryFinder {
	private ItemTrackerRepositoryBI itemTrackerRepository;
	private UserRepositoryBI userRepository;
	private ProjectRepositoryBI projectRepository;
	private TeamRepositoryBI teamRepository;
	private ItemRepositoryBI itemRepository;
	private ItemTypeRepositoryBI itemTypeRepository;
	private WorkflowRepositoryBI workflowRepository;
	public ItemTrackerRepositoryBI getItemTrackerRepository() {
		return this.itemTrackerRepository;
	}
	public void setItemTrackerRepository(ItemTrackerRepositoryBI itemTrackerRepository) {
		this.itemTrackerRepository = itemTrackerRepository;
	}
	public UserRepositoryBI getUserRepository() {
		return this.userRepository;
	}
	public void setUserRepository(UserRepositoryBI userRepository) {
		this.userRepository = userRepository;
	}
	public ProjectRepositoryBI getProjectRepository() {
		return this.projectRepository;
	}
	public void setProjectRepository(Proje
public class QuitBrowser {
    static Logger log;
    public static void killUnixProcess(String process) throws IOException{
        String cmd = "pkill -9 " + process;
        Runtime.getRuntime().exec(cmd);
        log.info(process + " was closed");
    	
    }
    
    public static void quitBrowser(String processName) throws IOException {
        log = Logger.getLogger(QuitBrowser.class);
        processName = processName.toLowerCase();
        processName = processName.replaceAll("[\\W]", "");
        if (processName.equals("ff") || processName.equals("firefox")) {
        	processName = "firefox";
        	killUnixProcess(processName);
        } else if (processName.equals("safari") || processName.equals("sf")) {
        	processName = "Safari";
        	killUnixProcess(processName);
        } else if (processName.equals("chrome") || processName.equals("googlechrome") || processName.equals("gh") || processName.equals("google") || processName.equals("ch")) {
        	processName =

        	killUnixProcess(processName);
        } else
            log.info("Unknown browser name");
    }
    
    public static void quitBrowserFromConsole() throws IOException {
        log = Logger.getLogger(QuitBrowser.class);
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String processName = br.readLine();
        processName = processName.toLowerCase();
        processName = processName.replaceAll("[\\W]", "");
        if (processName.equals("ff") || processName.equals("firefox")) {
            processName = "firefox";
        } else if (processName.equals("safari") || processName.equals("sf")) {
            processName = "Safari";
        } else if (processName.equals("chrome") || processName.equals("googlechrome") || processName.equals("gh") || processName.equals("google") || processName.equals("ch")) {
            processName = "Chrom";
        } else
            log.info("Unknown browser name");
        String cmd = "pkill -9 " + p
/**
 * 그룹관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Repository("groupManageDAO")
public class GroupManageDAO extends EgovComAbstractDAO {
	/**
	 * 검색조건에 따른 그룹정보를 조회
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO selectGroup(GroupManageVO groupManageVO) throws Exception {
		return (GroupManageVO) selectByPk("groupManageDAO.selectGroup", groupManageVO);
	}
	/**
	 * 시스템사용 목적별 그룹 목록 조회
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<GroupManageVO> selectGroupList(GroupManageVO groupManageVO) throws Exception {
		return list("groupManageDAO.selectGroupList", groupManageVO);
	}
	/**
	 * 그

	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void insertGroup(GroupManage groupManage) throws Exception {
		insert("groupManageDAO.insertGroup", groupManage);
	}
	/**
	 * 화면에 조회된 그룹의 기본정보를 수정하여 항목의 정합성을 체크하고 수정된 데이터를 데이터베이스에 반영
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void updateGroup(GroupManage groupManage) throws Exception {
		update("groupManageDAO.updateGroup", groupManage);
	}
	/**
	 * 불필요한 그룹정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void deleteGroup(GroupManage groupManage) throws Exception {
		delete("groupManageDAO.deleteGroup", groupManage);
	}
    /**
	 * 롤목록 총 갯수를 조회한다.
	 * @param groupManageVO GroupManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectGroupListTotCnt(GroupManageVO groupManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("groupManageDAO.selectGroupListTotCnt", groupManageVO);
   
/**
 * Factory class that returns the appropriate service.
 */
public class ServiceFactory {
	private static SpellService spellService = new SpellServiceImpl();
	private static PlayerClassService playerClassService = new PlayerClassServiceImpl();
	private static ComponentService componentService = new ComponentServiceImpl();
	private static SlotService slotService = new SlotServiceImpl();
	private static ItemTypeService itemTypeService = new ItemTypeServiceImpl();
	private static SchoolService schoolService = new SchoolServiceImpl();
	private static MagicItemService magicItemService = new MagicItemServiceImpl();
	private static SourceService sourceService = new SourceServiceImpl();
	/** Returns GenericDataService. */
	public static SpellService getSpellService() {
		return spellService;
	}
	public static PlayerClassService getPlayerClassService() {
		return playerClassService;
	}
	public static ComponentService getComponentService() {
		return componentService;
	}
	public static School
/**
 * @author Daniel Moldovan
 */
public class ServiceTopology extends AbstractServiceDescriptionEntity {
    private List<ServiceUnit> serviceNodes = new ArrayList<>();
    protected ServiceTopology(String id) {
        super(id);
    }
    public static ServiceTopology ServiceTopology(String id) {
        return new ServiceTopology(id);
    }
    public List<ServiceUnit> getServiceUnits() {
        return serviceNodes;
    }
    public void setServiceUnits(List<ServiceUnit> serviceNodes) {
        this.serviceNodes = serviceNodes;
    }
    public void addServiceUnit(ServiceUnit serviceNode) {
        this.serviceNodes.add(serviceNode);
    }
    public void removeServiceUnit(ServiceUnit serviceNode) {
        this.serviceNodes.remove(serviceNode);
    }
    public ServiceTopology withServiceUnits(ServiceUnit... serviceNodes) {
        this.serviceNodes.addAll(Arrays.asList(serviceNodes));
        return this;
    }
    @Override
    public AbstractServiceDescriptionEntity exposes(C
/**********************************************************************************
 * $URL$
 * $Id$
 ***********************************************************************************
 *
 * Copyright (c) 2006, 2007, 2008 The Sakai Foundation
 *
 * Licensed under the Educational Community License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 **********************************************************************************/
/** 
 * RepositoryManager manages Repositories.
 *
 * @author Gaurav Bhatnagar (gbhatnag@umich.edu)
 * @version
 */
public class RepositoryManage

	private static final long serialVersionUID = 1L;
	public static final String REPOSITORY_DISPLAY_NAME = "MetaLib X-Server";
	public static final String REPOSITORY_DESCRIPTION = "UM metasearch engine for searching library licensed digital content";
	public static final String REPOSITORY_ID = "XSERVER01";
	private static final org.apache.commons.logging.Log LOG =
		org.apache.commons.logging.LogFactory.getLog(
		"org.sakaibrary.osid.repository.xserver.RepositoryManager" );
	private org.osid.id.IdManager idManager = null;
	private org.osid.OsidContext context = null;
	private java.util.Vector<Repository> repositoryVector = new java.util.Vector<Repository>();
	public org.osid.OsidContext getOsidContext()
	throws org.osid.repository.RepositoryException {
		return context;
	}
	public void assignOsidContext(org.osid.OsidContext context)
	throws org.osid.repository.RepositoryException {
		this.context = context;
	}
	public void assignConfiguration(java.util.Properties configuration)
	throws o

	{
		try
		{
			this.idManager = (org.osid.id.IdManager)
			org.sakaibrary.osid.loader.OsidLoader.getManager(
					"org.osid.id.IdManager",
					"org.sakaiproject.component.osid.id",
					this.context,
					new java.util.Properties() );
			Managers.setIdManager(this.idManager);
			java.util.Vector<Type> searchTypes = new java.util.Vector<Type>();
			searchTypes.add( new Type( "sakaibrary", "search", "asynchMetasearch" ) );
			repositoryVector.add( new Repository( REPOSITORY_DISPLAY_NAME,
					REPOSITORY_DESCRIPTION,
					REPOSITORY_ID,
					searchTypes,
					this.idManager ) );
		}
		catch (Throwable t)
		{
			LOG.warn( "RepositoryManager.assignConfiguration() failed in reading " +
					"configuration properties or creating a new Repository: " +
					t.getMessage(), t );
			if (t instanceof org.osid.repository.RepositoryException)
			{
				throw new org.osid.repository.RepositoryException(t.getMessage());
			}
			else
			{
				throw new org.osid.repository.RepositoryException(org.osid

			}
		}
	}
	public org.osid.repository.Repository createRepository(String displayName
			, String description
			, org.osid.shared.Type repositoryType)
	throws org.osid.repository.RepositoryException
	{
		throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
	}
	public void deleteRepository(org.osid.shared.Id repositoryId)
	throws org.osid.repository.RepositoryException
	{
		if (repositoryId == null)
		{
			throw new org.osid.repository.RepositoryException(org.osid.shared.SharedException.NULL_ARGUMENT);
		}
		throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
	}
	public org.osid.repository.RepositoryIterator getRepositories()
	throws org.osid.repository.RepositoryException
	{
		return new RepositoryIterator(this.repositoryVector);
	}
	public org.osid.repository.RepositoryIterator getRepositoriesByType(org.osid.shared.Type repositoryType)
	throws org.osid.repository.RepositoryException
	{
		if (repositoryType == 

		{
			throw new org.osid.repository.RepositoryException(org.osid.shared.SharedException.NULL_ARGUMENT);
		}
		java.util.Vector result = new java.util.Vector();
		org.osid.repository.RepositoryIterator repositoryIterator = getRepositories();
		while (repositoryIterator.hasNextRepository())
		{
			org.osid.repository.Repository nextRepository = repositoryIterator.nextRepository();
			if (nextRepository.getType().isEqual(repositoryType))
			{
				result.addElement(nextRepository);
			}
		}
		return new RepositoryIterator(result);
	}
	public org.osid.repository.Repository getRepository(org.osid.shared.Id repositoryId)
	throws org.osid.repository.RepositoryException
	{
		if (repositoryId == null)
		{
			throw new org.osid.repository.RepositoryException(org.osid.shared.SharedException.NULL_ARGUMENT);
		}
		try
		{
			org.osid.repository.RepositoryIterator repositoryIterator = getRepositories();
			while (repositoryIterator.hasNextRepository())
			{
				org.osid.repository.Repository nextRe

				if (nextRepository.getId().isEqual(repositoryId))
				{
					return nextRepository;
				}
			}
			throw new org.osid.repository.RepositoryException(org.osid.shared.SharedException.UNKNOWN_ID);
		}
		catch (Throwable t)
		{
			LOG.warn(t.getMessage());
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.OPERATION_FAILED);
		}
	}
	public org.osid.repository.Asset getAsset(org.osid.shared.Id assetId)
	throws org.osid.repository.RepositoryException
	{
		if (assetId == null)
		{
			throw new org.osid.repository.RepositoryException(org.osid.shared.SharedException.NULL_ARGUMENT);
		}
		try
		{
			org.osid.repository.RepositoryIterator repositoryIterator = getRepositories();
			while (repositoryIterator.hasNextRepository())
			{
				org.osid.repository.Repository nextRepository = repositoryIterator.nextRepository();
				try
				{
					org.osid.repository.Asset asset = nextRepository.getAsset(assetId);
					return asset;
				}
				catch (Throwable t) {}
			}
		}
		c

		{
			LOG.warn(t.getMessage());
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.OPERATION_FAILED);
		}
		throw new org.osid.repository.RepositoryException(org.osid.shared.SharedException.UNKNOWN_ID);
	}
	public org.osid.repository.Asset getAssetByDate(org.osid.shared.Id assetId
			, long date)
	throws org.osid.repository.RepositoryException
	{
		if (assetId == null)
		{
			throw new org.osid.repository.RepositoryException(org.osid.shared.SharedException.NULL_ARGUMENT);
		}
		try
		{
			org.osid.repository.RepositoryIterator repositoryIterator = getRepositories();
			while (repositoryIterator.hasNextRepository())
			{
				org.osid.repository.Repository nextRepository = repositoryIterator.nextRepository();
				try
				{
					org.osid.repository.Asset asset = nextRepository.getAssetByDate(assetId,date);
					return asset;
				}
				catch (Throwable t) {}
			}
		}
		catch (Throwable t)
		{
			LOG.warn(t.getMessage());
			throw new org.osid.repository.Repositor

		}
		throw new org.osid.repository.RepositoryException(org.osid.shared.SharedException.UNKNOWN_ID);
	}
	public org.osid.shared.LongValueIterator getAssetDates(org.osid.shared.Id assetId)
	throws org.osid.repository.RepositoryException
	{
		if (assetId == null)
		{
			throw new org.osid.repository.RepositoryException(org.osid.shared.SharedException.NULL_ARGUMENT);
		}
		java.util.Vector result = new java.util.Vector();
		try
		{
			org.osid.repository.RepositoryIterator repositoryIterator = getRepositories();
			while (repositoryIterator.hasNextRepository())
			{
				org.osid.repository.Repository nextRepository = repositoryIterator.nextRepository();
				org.osid.shared.LongValueIterator longValueIterator = nextRepository.getAssetDates(assetId);
				while (longValueIterator.hasNextLongValue())
				{
					result.addElement(new Long(longValueIterator.nextLongValue()));
				}
			}
			return new LongValueIterator(result);
		}
		catch (Throwable t)
		{
			LOG.warn(t.getMessage());
			throw

		}
	}
	public org.osid.repository.AssetIterator getAssetsBySearch(org.osid.repository.Repository[] repositories
			, java.io.Serializable searchCriteria
			, org.osid.shared.Type searchType
			, org.osid.shared.Properties searchProperties)
	throws org.osid.repository.RepositoryException
	{
		if (repositories == null)
		{
			throw new org.osid.repository.RepositoryException(org.osid.shared.SharedException.NULL_ARGUMENT);
		}
		throw new org.osid.repository.RepositoryException(
				org.osid.OsidException.UNIMPLEMENTED );
	}
	public org.osid.shared.Id copyAsset(org.osid.repository.Repository repository
			, org.osid.shared.Id assetId)
	throws org.osid.repository.RepositoryException
	{
		if ((repository == null) || (assetId == null))
		{
			throw new org.osid.repository.RepositoryException(org.osid.shared.SharedException.NULL_ARGUMENT);
		}
		throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
	}
	public org.osid.shared.TypeIterator getRepositoryTypes
/**
 * 
 * @author zhangcaijie
 *
 */
public class ContextHandler implements IHandler {
    private IHandler currentHandler ;
    private RequiredFieldHandler requiredFieldHandler;
    private OptionalFieldHandler optionalFieldHandler;
    private InsertFieldHandler insertFieldHandler;
    private UpdateFieldHandler updateFieldHandler;
    private OrderFieldHandler orderFieldHandler;
    private TextHandler textHandler;
    private boolean isDeleConnector = false;
    
    public ContextHandler(Token token) {
        textHandler = new TextHandler(token, this);
        currentHandler = textHandler;
        requiredFieldHandler = new RequiredFieldHandler(token, this);
        optionalFieldHandler = new OptionalFieldHandler(token, this);
        insertFieldHandler = new InsertFieldHandler(token, this);
        updateFieldHandler = new UpdateFieldHandler(token, this);
        orderFieldHandler = new OrderFieldHandler(token, this);
    }
    
    @Override
    public void putCache() throws 

        currentHandler.putCache();
    }
    @Override
    public void putChar(char c) throws ParsingException {
        currentHandler.putChar(c);
    }
    public void putString(String str) throws ParsingException {
        for(char c : str.toCharArray()) {
            currentHandler.putChar(c);
        }
    }
    
    @Override
    public void end() throws ParsingException {
        currentHandler.end();
    }
    
    @Override
    public void exit() throws ParsingException {}
    public IHandler getCurrentHandler() {
        return currentHandler;
    }
    public void setCurrentHandler(IHandler currentHandler) {
        this.currentHandler = currentHandler;
    }
    public RequiredFieldHandler getRequiredFieldHandler() {
        return requiredFieldHandler;
    }
    public void setRequiredFieldHandler(RequiredFieldHandler requiredFieldHandler) {
        this.requiredFieldHandler = requiredFieldHandler;
    }
    public OptionalFieldHandler getOptionalFieldHandler() {
        

    }
    public void setOptionalFieldHandler(OptionalFieldHandler optionalFieldHandler) {
        this.optionalFieldHandler = optionalFieldHandler;
    }
    public InsertFieldHandler getInsertFieldHandler() {
        return insertFieldHandler;
    }
    public void setInsertFieldHandler(InsertFieldHandler insertFieldHandler) {
        this.insertFieldHandler = insertFieldHandler;
    }
    public boolean isDeleConnector() {
        return isDeleConnector;
    }
    public void setDeleConnector(boolean isDeleConnector) {
        this.isDeleConnector = isDeleConnector;
    }
    
    public TextHandler getTextHandler() {
        return textHandler;
    }
    public void setTextHandler(TextHandler textHandler) {
        this.textHandler = textHandler;
    }
    
    public UpdateFieldHandler getUpdateFieldHandler() {
        return updateFieldHandler;
    }
    public void setUpdateFieldHandler(UpdateFieldHandler updateFieldHandler) {
        this.updateFieldHandler = updateFieldHandle
/**
 * 
 * @deprecated Replaced by spring IOC
 * 
 * @author elulian
 *
 */
@Deprecated
public class ServiceFactory {
	private static ServiceFactory factory;
	private IThresholdService thresholdService;
	private IUserInfoService userInfoService;
	private IRiskRankService riskRankService;
	private ICustomerInfoService customerInfoService;
	private ServiceFactory() {
	}
	public static ServiceFactory getServiceFactory() {
		if (factory == null) {
			synchronized (ServiceFactory.class) {
				if (factory == null)
					factory = new ServiceFactory();
			}
		}
		return factory;
	}
	public IThresholdService getIThresholdService() {
		if (thresholdService == null) {
			if (thresholdService == null)
				synchronized (this) {
					thresholdService = new ThresholdService();
				}
		}
		return thresholdService;
	}
	public IUserInfoService getIUserInfoService() {
		if (userInfoService == null) {
			if (userInfoService == null)
				synchronized (this) {
					userInfoService = new UserInfoService();
	
/**
 * Default implementation for composite handler.
 *
 * @author Cedric Chantepie
 */
public class CompositeHandler 
    extends AbstractCompositeHandler<CompositeHandler> {
    /**
     * Constructor
     */
    public CompositeHandler() { super(); }
    /**
     * Copy constructor.
     *
     * @param queryDetection the patterns to detect a query
     * @param queryHandler the handler for the queries
     * @param updateHandler the handler for the updates
     */
    public CompositeHandler(final Pattern[] queryDetection,
                            final QueryHandler queryHandler,
                            final UpdateHandler updateHandler) {
        super(queryDetection, queryHandler, updateHandler);
    /**
     * Returns 'empty' statement handler, 
     * without detection pattern, query handler or update handler.
     *
     * @return An empty handler
     */
    public static CompositeHandler empty() {
        return new CompositeHandler();
    /**
     * Returns a new han

     * but with given query |handler| appended.
     *
     * @param handler Query handler
     * @return a new composite handler with given query handler
     * @throws IllegalArgumentException if handler is null
     */
    public CompositeHandler withQueryHandler(final QueryHandler handler) {
        if (handler == null) {
            throw new IllegalArgumentException();
        return new CompositeHandler(this.queryDetection,
                                    handler,
                                    this.updateHandler);
        
    /**
     * Returns a new handler based on this one, 
     * but with given update |handler| appended.
     *
     * @param handler Update handler
     * @return a new composite handler with given update handler
     * @throws IllegalArgumentException if handler is null
     */
    public CompositeHandler withUpdateHandler(final UpdateHandler handler) {
        if (handler == null) {
            throw new IllegalArgumentException();
        retur
public class Model {
    private static final int TILE_SIZE = 10;
    private static final int NUM_TILES_IN_ONE_DIRECTION = 25;
    public static final int MIN_MAP_COORDINATE = -TILE_SIZE * NUM_TILES_IN_ONE_DIRECTION;
    public static final int MAX_MAP_COORDINATE = TILE_SIZE * NUM_TILES_IN_ONE_DIRECTION;
    public static final boolean DRAW_MINI_MAP = true;
    private Camera camera;
    private ScoreHandler scoreHandler;
    private PlayerHandler playerHandler;
    private EnemyHandler enemyHandler;
    private ObstacleHandler obstacleHandler;
    private ShotsHandler shotsHandler;
    private HudHandler hudHandler;
    private TextureHandler textureHandler;
    private SoundHandler soundHandler;
    public Model(Camera camera, int mapNumber, int difficulty) {
        this.camera = camera;
        scoreHandler = new ScoreHandler();
        textureHandler = new TextureHandler();
        soundHandler = new SoundHandler();
        enemyHandler = new EnemyHandler(scoreHandler, textureHan

        playerHandler = new PlayerHandler(camera, enemyHandler, soundHandler);
        obstacleHandler = new ObstacleHandler(textureHandler, mapNumber);
        shotsHandler = new ShotsHandler(obstacleHandler, enemyHandler, textureHandler, soundHandler);
        hudHandler = new HudHandler(scoreHandler, shotsHandler, enemyHandler, playerHandler, textureHandler);
        soundHandler.getBackgroundAudio().playAsMusic(1.0f, 1.0f, true);
    }
    public void resetGame(int difficulty) {
    }
    public void update() {
        playerHandler.checkForCollisions();
        playerHandler.drawPlayer();
        shotsHandler.updateShots();
        enemyHandler.updateEnemies(camera);
    }
    public void drawMap() {
        ShapeRenderer.drawFloorTiles(TILE_SIZE, NUM_TILES_IN_ONE_DIRECTION,
                textureHandler.getTexture(TextureHandler.STONE_1), textureHandler.getTexture(TextureHandler.STONE_2));
        ShapeRenderer.drawWalls(500.0, 100.0, Colors.BLUE, textureHandler.getTexture(Text
public class KissApplication {
    /**
     * Number of ms to wait, after a click occurred, to record a launch
     * Setting this value to 0 removes all animations
     */
    public static final int TOUCH_DELAY = 120;
    private static DataHandler dataHandler;
    private static CameraHandler cameraHandler;
    private static RootHandler rootHandler;
    private static IconsHandler iconsPackHandler;
    private KissApplication() {
    }
    public static DataHandler getDataHandler(Context ctx) {
        if (dataHandler == null) {
            dataHandler = new DataHandler(ctx);
        }
        return dataHandler;
    }
    public static void setDataHandler(DataHandler newDataHandler) {
        dataHandler = newDataHandler;
    }
    public static CameraHandler getCameraHandler() {
        if (cameraHandler == null) {
            cameraHandler = new CameraHandler();
        }
        return cameraHandler;
    }
    public static RootHandler getRootHandler(Context ctx) {
        if (
/*
 * This class was automatically generated with 
 * XML Schema.
 * $Id$
 */
/**
 * 
 * 
 * @version $Revision$ $Date$
**/
public class ManageInfos extends IBody implements java.io.Serializable {
    private java.util.Vector _manageInfoList;
    public ManageInfos() {
        super();
        _manageInfoList = new Vector();
    /**
     * 
     * 
     * @param vManageInfo
    **/
    public void addManageInfo(ManageInfo vManageInfo)
        throws java.lang.IndexOutOfBoundsException
    {
        _manageInfoList.addElement(vManageInfo);
    /**
     * 
     * 
     * @param index
     * @param vManageInfo
    **/
    public void addManageInfo(int index, ManageInfo vManageInfo)
        throws java.lang.IndexOutOfBoundsException
    {
        _manageInfoList.insertElementAt(vManageInfo, index);
    /**
    **/
    public java.util.Enumeration enumerateManageInfo()
    {
        return _manageInfoList.elements();
    /**
     * 
     * 
     * @param index
    **/
    public ManageInfo 

        throws java.lang.IndexOutOfBoundsException
    {
        if ((index < 0) || (index > _manageInfoList.size())) {
            throw new IndexOutOfBoundsException();
        }
        
        return (ManageInfo) _manageInfoList.elementAt(index);
    /**
    **/
    public ManageInfo[] getManageInfo()
    {
        int size = _manageInfoList.size();
        ManageInfo[] mArray = new ManageInfo[size];
        for (int index = 0; index < size; index++) {
            mArray[index] = (ManageInfo) _manageInfoList.elementAt(index);
        }
        return mArray;
    /**
    **/
    public int getManageInfoCount()
    {
        return _manageInfoList.size();
    /**
    **/
    public void removeAllManageInfo()
    {
        _manageInfoList.removeAllElements();
    /**
     * 
     * 
     * @param index
    **/
    public ManageInfo removeManageInfo(int index)
    {
        java.lang.Object obj = _manageInfoList.elementAt(index);
        _manageInfoList.removeElementAt(index);
      
/**
 * base task provide success/fail handler.
 */
public abstract class HandlerTask<A, B, C> extends BaseTask<A, B, C> {
	protected MethodHandler<C> successHandler;
	protected MethodHandler<C> failHandler;
	protected MethodHandler<C> finallyHandler;
	private boolean interrupted = false;
	public HandlerTask(Context context) {
		super(context);
	}
	protected void onPostExecute(C result) {
		super.onPostExecute(result);
	}
	public HandlerTask<A, B, C> setOnExecuteSuccessHandler(
			MethodHandler<C> handler) {
		this.successHandler = handler;
		return this;
	}
	public HandlerTask<A, B, C> setOnExecuteFailHander(MethodHandler<C> handler) {
		failHandler = handler;
		return this;
	}
	public HandlerTask<A, B, C> setOnFinallyHander(MethodHandler<C> handler) {
		finallyHandler = handler;
		return this;
	}
	public void interrupt() {
		interrupted = true;
		this.cancel(true);
	}
	public boolean isInterrupt() {
		return interrupted;
	}
	public static interface MethodHandler<T> {
		public void pro
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author jack
 */
public class ServiceFactory {
    private LoginService loginService;
    private ConfService confService;
    private ShareFileService shareFileService;
    private VoteService voteService;
    private ScreenShareService screenShareService;
    public ScreenShareService getScreenShareService() {
        return screenShareService;
    }
    public void setScreenShareService(ScreenShareService screenShareService) {
        this.screenShareService = screenShareService;
    }
    public ShareFileService getShareFileService() {
        return shareFileService;
    }
    public void setShareFileService(ShareFileService shareFileService) {
        this.shareFileService = shareFileService;
    }
    public VoteService getVoteService() {
        return voteService;
    }
    public void setVoteService(VoteService voteService) {
        this.voteService = voteService;
  
/**
 * 過渡付款明細 Facade
 * 
 * @author Eustace
 */
public class TransitPaymentDetailFacade {
    /** 大分類 Service */
    private BigTypeService bigTypeService;
    /** 組織單位 Service */
    private DepartmentService departmentService;
    /** 分錄 Service */
    private EntryService entryService;
    /** 幣別 Service */
    private CurrencyService currencyService;
    /** 使用者的 Service */
    private UserService userService;
    /** 會計科目的 Service */
    private AccTitleService accTitleService;
    
    /**費用中分類 Service*/
    private MiddleTypeService middleTypeService;
    /**
     * 組織單位 Service
     */
    public DepartmentService getDepartmentService() {
        return departmentService;
    }
    /**
     * 組織單位 Service
     */
    public void setDepartmentService(DepartmentService departmentService) {
        this.departmentService = departmentService;
    }
    /**
     * 幣別 Service
     */
    public CurrencyService getCurrencyService() {
        return currencyService;
    }
    /**
     

     */
    public void setCurrencyService(CurrencyService currencyService) {
        this.currencyService = currencyService;
    }
    /** 使用者的 Service */
    public UserService getUserService() {
        return userService;
    }
    /** 使用者的 Service */
    public void setUserService(UserService userService) {
        this.userService = userService;
    }
    public void setEntryService(EntryService entryService) {
        this.entryService = entryService;
    }
    public EntryService getEntryService() {
        return entryService;
    }
    /** 會計科目的 Service */
    public AccTitleService getAccTitleService() {
        return accTitleService;
    }
    /** 會計科目的 Service */
    public void setAccTitleService(AccTitleService accTitleService) {
        this.accTitleService = accTitleService;
    }
    public void setBigTypeService(BigTypeService bigTypeService) {
        this.bigTypeService = bigTypeService;
    }
    /** 大分類 Service */
    public BigTypeService getBigTypeService() {
/**
 * 개요
 * - 당직관리에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - 당직관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 당직관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Repository("bndtManageDAO")
public class BndtManageDAO extends EgovComAbstractDAO {
	/**
	 * 당직관리정보를 관리하기 위해 등록된 당직관리 목록을 조회한다.
	 * @param bndtManageVO - 당직관리 VO
	 * @return List - 당직관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<BndtManageVO> selectBndtManageList(BndtManageVO bndtManageVO) throws Exception {
		return (List<BndtManageVO>) list("bndtManageDAO.selectBndtManageList", bndtManageVO);
	}
    /**
	 * 당직관리목록 총 갯수를 조회한다.
	 * @param bndtManageVO - 당직관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectBndtManageListTotCnt(BndtManageVO bndtManageVO) throws Exception {
        return (Integer)select("bndtManageDAO.selectBndtManageListTotCnt", bndtManageVO);
    }
	/**
	 * 등록된 당직관리의 상세정보를 조회한다.
	 * @param bndtManageVO - 당직관리 VO
	 * @return BndtManageVO - 당직

	 */
	public BndtManageVO selectBndtManage(BndtManageVO bndtManageVO)  throws Exception {
		return (BndtManageVO) select("bndtManageDAO.selectBndtManage", bndtManageVO);
	}
	/**
	 * 당직관리정보를 신규로 등록한다.
	 * @param bndtManage - 당직관리 model
	 */
	public void insertBndtManage(BndtManage bndtManage) throws Exception {
		insert("bndtManageDAO.insertBndtManage", bndtManage);
	}
	/**
	 * 기 등록된 당직관리정보를 수정한다.
	 * @param bndtManage - 당직관리 model
	 */
	public void updtBndtManage(BndtManage bndtManage) throws Exception {
		update("bndtManageDAO.updtBndtManage", bndtManage);
	}
	/**
	 * 기 등록된 당직관리정보를 삭제한다.
	 * @param bndtManage - 당직관리 model
	 */
	public void deleteBndtManage(BndtManage bndtManage) throws Exception {
        delete("bndtManageDAO.deleteBndtManage",bndtManage);
	}
    /**
	 * 당직일지 갯수를 조회한다.
	 * @param bndtManageVO - 당직관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectBndtDiaryTotCnt(BndtManage bndtManage) throws Exception {
        return (Integer)select("bndtManag

    }
    /***** 당직 체크관리 *****/	
	/**
	 * 당직체크관리정보를 관리하기 위해 등록된 당직체크관리 목록을 조회한다.
	 * @param bndtCeckManageVO - 당직체크관리 VO
	 * @return List - 당직체크관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<BndtCeckManageVO> selectBndtCeckManageList(BndtCeckManageVO bndtCeckManageVO) throws Exception {
		return (List<BndtCeckManageVO>) list("bndtManageDAO.selectBndtCeckManageList", bndtCeckManageVO);
	}
    /**
	 * 당직체크관리목록 총 갯수를 조회한다.
	 * @param bndtCeckManageVO - 당직체크관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectBndtCeckManageListTotCnt(BndtCeckManageVO bndtCeckManageVO) throws Exception {
        return (Integer)select("bndtManageDAO.selectBndtCeckManageListTotCnt", bndtCeckManageVO);
    }
	/**
	 * 등록된 당직체크관리의 상세정보를 조회한다.
	 * @param bndtCeckManageVO - 당직체크관리 VO
	 * @return BndtCeckManageVO - 당직체크관리 VO
	 */
	public BndtCeckManageVO selectBndtCeckManage(BndtCeckManageVO bndtCeckManageVO)  throws Exception {
		return (BndtCeckManageVO) select("bndtManageDAO.select

	}
	/**
	 * 당직체크관리정보를 신규로 등록한다.
	 * @param bndtCeckManage - 당직체크관리 model
	 */
	public void insertBndtCeckManage(BndtCeckManage bndtCeckManage) throws Exception {
		insert("bndtManageDAO.insertBndtCeckManage", bndtCeckManage);
	}
	/**
	 * 기 등록된 당직체크관리정보를 수정한다.
	 * @param bndtCeckManage - 당직체크관리 model
	 */
	public void updtBndtCeckManage(BndtCeckManage bndtCeckManage) throws Exception {
		update("bndtManageDAO.updtBndtCeckManage", bndtCeckManage);
	}
	/**
	 * 기 등록된 당직체크관리정보를 삭제한다.
	 * @param bndtCeckManage - 당직체크관리 model
	 */
	public void deleteBndtCeckManage(BndtCeckManage bndtCeckManage) throws Exception {
        delete("bndtManageDAO.deleteBndtCeckManage",bndtCeckManage);
	}
    /**
	 * 당직체크 중복여부 조회한다.
	 * @param bndtCeckManageVO - 당직체크관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectBndtCeckManageDplctAt(BndtCeckManage bndtCeckManage) throws Exception {
        return (Integer)select("bndtManageDAO.selectBndtCeckManageDplctAt", bndtCeckManage);
    }
    /**

	/**
	 * 등록된 당직일지관리의 상세정보를 조회한다.
	 * @param bndtDiaryVO - 당직일지관리 VO
	 * @return List - 당직일지관리 VO
	 */
	@SuppressWarnings("unchecked")
	public List<BndtDiaryVO> selectBndtDiary(BndtDiaryVO bndtDiaryVO) throws Exception {
		return (List<BndtDiaryVO>) list("bndtManageDAO.selectBndtDiary", bndtDiaryVO);
	}
	/**
	 * 당직일지관리정보를 신규로 등록한다.
	 * @param bndtDiary - 당직일지관리 model
	 */
	public void insertBndtDiary(BndtDiary bndtDiary) throws Exception {
		insert("bndtManageDAO.insertBndtDiary", bndtDiary);
	}
	/**
	 * 기 등록된 당직일지관리정보를 수정한다.
	 * @param bndtDiary - 당직일지관리 model
	 */
	public void updtBndtDiary(BndtDiary bndtDiary) throws Exception {
		update("bndtManageDAO.updtBndtDiary", bndtDiary);
	}
	/**
	 * 기 등록된 당직일지관리정보를 삭제한다.
	 * @param bndtDiary - 당직일지관리 model
	 */
	public void deleteBndtDiary(BndtDiary bndtDiary) throws Exception {
        delete("bndtManageDAO.deleteBndtDiary",bndtDiary);
	}
	/**
	 * 등록된 당직관리의 상세정보를 조회한다.
	 * @param bndtManageVO - 당직관리 VO
	 * @return BndtManageVO - 당직관리 VO
	 
public class ItemHandler implements IHandler<IItemHandler, L2EtcItem>
	protected static Logger _log = LogManager.getLogger(ItemHandler.class);
	private final Map<String, IItemHandler> _handlers;
	private ItemHandler()
	{
		_handlers = new HashMap<>();
		registerHandler(new BeastSoulShot());
		registerHandler(new BeastSpice());
		registerHandler(new BeastSpiritShot());
		registerHandler(new BlessedSpiritShot());
		registerHandler(new Book());
		registerHandler(new Calculator());
		registerHandler(new ChristmasTree());
		registerHandler(new CustomItems());
		registerHandler(new Elixir());
		registerHandler(new EnchantAttribute());
		registerHandler(new EnchantScrolls());
		registerHandler(new EnergyStarStone());
		registerHandler(new EventItem());
		registerHandler(new ExtractableItems());
		registerHandler(new OrbisBox());
		registerHandler(new FishShots());
		registerHandler(new Harvester());
		registerHandler(new ItemSkills());
		registerHandler(new ItemSkillsTemplate());
		registerHa

		registerHandler(new Maps());
		registerHandler(new MercTicket());
		registerHandler(new NicknameColor());
		registerHandler(new PaganKeys());
		registerHandler(new PetFood());
		registerHandler(new QuestStart());
		registerHandler(new Recipes());
		registerHandler(new RollingDice());
		registerHandler(new ScrollOfResurrection());
		registerHandler(new ShowHtml());
		registerHandler(new Seed());
		registerHandler(new SoulShots());
		registerHandler(new SpecialXMas());
		registerHandler(new SpiritShot());
		registerHandler(new SummonItems());
		registerHandler(new TeleportBookmark());
		registerHandler(new ChangeAttribute());
		registerHandler(new ShapeShifting());
		_log.log(Level.INFO, "Loaded " + size() + " Item Handlers");
	}
	public static ItemHandler getInstance()
	{
		return SingletonHolder._instance;
	}
	@Override
	public void registerHandler(IItemHandler handler)
	{
		_handlers.put(handler.getClass().getSimpleName(), handler);
	}
	@Override
	public void removeHandler(IItemHan
/** 
 * 약관관리에 대한 데이터 접근 클래스를 정의한다
 * <p><b>NOTE:</b> 넘어온 요청에 대해 DB작업을 수행하는 메소드들의 집합
 * DB에 직접 접근하며 쿼리문에 적용할 parameter를 보내주거나 단순 쿼리 실행을 하도록 호출한다
 * select, update, delete 함수를 사용하며 쿼리아이디와 parameter를 넘긴다
 * @author 범정부통계포털 이관형 
 * @since 2011.06.27 
 * @version 1.0 
 * @see 
 * 
 * <pre> 
 *  == Modification Information) == 
 *   
 *     date         author                note 
 *  -----------    --------    --------------------------- 
 *   2011.05.15     이관형      최초 생성 
 * 
 * </pre> 
 */
@Repository("stplatManageDAO")
public class StplatManageDAO extends GpsAbstractDAO {
    
    /**
     * 약관목록조회(stplatManageVO 검색조건에따라 약관목록을 조회)  
     * @param stplatManageVO
     * @return List 조회한 약관목록의 리스트
     * @throws Exception
     * @see stplatSe,stplatSeNm,stplatId,sysId,sysNm,stplatNm,stplatCn,stplatUseSe
     * @see TABLE NAME : TN_STPLAT
     */
    @SuppressWarnings("unchecked")
	public List selectStplatList(StplatManageVO stplatManageVO) throws Exception {
        return list("StplatMana

    }
    /**
     * 약관목록의 총 갯수
     * @param stplatManageVO
     * @return int 조회한 목록의 리스트
     * @throws Exception
     * @see COUNT(*) totcnt 약관목록 총 갯수
     * @see TABLE NAME : TN_STPLAT
     */
    public int selectStplatListTotCnt(StplatManageVO stplatManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("StplatManageDAO.selectStplatListTotCnt", stplatManageVO);
    }
	/**
	 * 약관등록 처리(stplatManageVO에 담겨있는 항목을 DB에 등록) 
	 * @param stplatManageVO
	 * @throws Exception
	 * @see TABLE NAME : TN_STPLAT
	 */
	public void insertStplat(StplatManageVO stplatManageVO) throws Exception {
        insert("StplatManageDAO.insertStplat", stplatManageVO);
	}
	/**
	 * 약관목록수정처리
	 * @param stplatManageVO
	 * @throws Exception
	 * @see TABLE NAME : TN_STPLAT
	 */
	public void updateStplat(StplatManageVO stplatManageVO) throws Exception {
        update("StplatManageDAO.updateStplat", stplatManageVO);
	}
	/**
	 * 약관목록 상세
	 * @param stplatManageVO
	 * @return
	 *
/**
 * @author Martin Schimak <martin.schimak@plexiti.com>
 */
public class ProcessEngineTestsCalledProcessInstanceTest extends ProcessAssertTestCase {
  @Rule
  public ActivitiRule processEngineRule = new ActivitiRule();
  @Test
  @Deployment(resources = {"ProcessEngineTests-calledProcessInstance-superProcess1.bpmn",
    "ProcessEngineTests-calledProcessInstance-subProcess1.bpmn",
    "ProcessEngineTests-calledProcessInstance-subProcess2.bpmn"
  })
  public void testCalledProcessInstance_FirstOfTwoSequential_Success() {
    final ProcessInstance processInstance = runtimeService().startProcessInstanceByKey(
      "ProcessEngineTests-calledProcessInstance-superProcess1"
    );
    assertThat(processInstance)
      .hasProcessDefinitionKey("ProcessEngineTests-calledProcessInstance-superProcess1");
    assertThat(calledProcessInstance())
      .hasProcessDefinitionKey("ProcessEngineTests-calledProcessInstance-subProcess1");
    assertThat(calledProcessInstance(processInstance))
      .has

    assertThat(processInstance)
      .hasProcessDefinitionKey("ProcessEngineTests-calledProcessInstance-superProcess1");
    assertThat(calledProcessInstance("ProcessEngineTests-calledProcessInstance-subProcess1"))
      .hasProcessDefinitionKey("ProcessEngineTests-calledProcessInstance-subProcess1");
    assertThat(calledProcessInstance("ProcessEngineTests-calledProcessInstance-subProcess1", processInstance))
      .hasProcessDefinitionKey("ProcessEngineTests-calledProcessInstance-subProcess1");
    assertThat(processInstance)
      .hasProcessDefinitionKey("ProcessEngineTests-calledProcessInstance-superProcess1");
    assertThat(calledProcessInstance(processInstanceQuery().processDefinitionKey("ProcessEngineTests-calledProcessInstance-subProcess1")))
      .hasProcessDefinitionKey("ProcessEngineTests-calledProcessInstance-subProcess1");
    assertThat(calledProcessInstance(processInstanceQuery().processDefinitionKey("ProcessEngineTests-calledProcessInstance-subProcess1"), processIn

      .hasProcessDefinitionKey("ProcessEngineTests-calledProcessInstance-subProcess1");
  }
  @Test
  @Deployment(resources = {"ProcessEngineTests-calledProcessInstance-superProcess1.bpmn",
    "ProcessEngineTests-calledProcessInstance-subProcess1.bpmn",
    "ProcessEngineTests-calledProcessInstance-subProcess2.bpmn"
  })
  public void testCalledProcessInstance_SecondOfTwoSequential_Success() {
    final ProcessInstance processInstance = runtimeService().startProcessInstanceByKey(
      "ProcessEngineTests-calledProcessInstance-superProcess1"
    );
    complete(task("UserTask_1", calledProcessInstance(processInstance)));
    assertThat(processInstance)
      .hasProcessDefinitionKey("ProcessEngineTests-calledProcessInstance-superProcess1");
    assertThat(calledProcessInstance())
      .hasProcessDefinitionKey("ProcessEngineTests-calledProcessInstance-subProcess2");
    assertThat(calledProcessInstance(processInstance))
      .hasProcessDefinitionKey("ProcessEngineTests-calledProcess

    assertThat(processInstance)
      .hasProcessDefinitionKey("ProcessEngineTests-calledProcessInstance-superProcess1");
    assertThat(calledProcessInstance("ProcessEngineTests-calledProcessInstance-subProcess2"))
      .hasProcessDefinitionKey("ProcessEngineTests-calledProcessInstance-subProcess2");
    assertThat(calledProcessInstance("ProcessEngineTests-calledProcessInstance-subProcess2", processInstance))
      .hasProcessDefinitionKey("ProcessEngineTests-calledProcessInstance-subProcess2");
    assertThat(processInstance)
      .hasProcessDefinitionKey("ProcessEngineTests-calledProcessInstance-superProcess1");
    assertThat(calledProcessInstance(processInstanceQuery().processDefinitionKey("ProcessEngineTests-calledProcessInstance-subProcess2")))
      .hasProcessDefinitionKey("ProcessEngineTests-calledProcessInstance-subProcess2");
    assertThat(calledProcessInstance(processInstanceQuery().processDefinitionKey("ProcessEngineTests-calledProcessInstance-subProcess2"), processIn

      .hasProcessDefinitionKey("ProcessEngineTests-calledProcessInstance-subProcess2");
  }
  @Test
  @Deployment(resources = {"ProcessEngineTests-calledProcessInstance-superProcess1.bpmn",
    "ProcessEngineTests-calledProcessInstance-subProcess1.bpmn",
    "ProcessEngineTests-calledProcessInstance-subProcess2.bpmn"
  })
  public void testCalledProcessInstance_SecondOfTwoSequential_Failure() {
    final ProcessInstance processInstance = runtimeService().startProcessInstanceByKey(
      "ProcessEngineTests-calledProcessInstance-superProcess1"
    );
    complete(task("UserTask_1", calledProcessInstance(processInstance)));
    expect(new Failure() {
      @Override
      public void when() {
        assertThat(calledProcessInstance())
          .isNotNull();
      }
    });
    expect(new Failure() {
      @Override
      public void when() {
        assertThat(calledProcessInstance("ProcessEngineTests-calledProcessInstance-subProcess2"))
          .isNotNull();
      }
    });
    exp

      @Override
      public void when() {
        assertThat(calledProcessInstance(processInstanceQuery().processDefinitionKey("ProcessEngineTests-calledProcessInstance-subProcess2")))
          .isNotNull();
      }
    });
    assertThat(processInstance)
      .hasProcessDefinitionKey("ProcessEngineTests-calledProcessInstance-superProcess1");
    expect(new Failure() {
      @Override
      public void when() {
        assertThat(calledProcessInstance())
          .isNull();
      }
    });
    expect(new Failure() {
      @Override
      public void when() {
        assertThat(calledProcessInstance("ProcessEngineTests-calledProcessInstance-subProcess1"))
          .isNotNull();
      }
    });
    expect(new Failure() {
      @Override
      public void when() {
        assertThat(calledProcessInstance(processInstanceQuery().processDefinitionKey("ProcessEngineTests-calledProcessInstance-subProcess1")))
          .isNotNull();
      }
    });
  }
  @Test
  @Deployment(resources = {

    "ProcessEngineTests-calledProcessInstance-subProcess1.bpmn",
    "ProcessEngineTests-calledProcessInstance-subProcess2.bpmn"
  })
  public void testCalledProcessInstance_TwoOfTwoParallel_Success() {
    final ProcessInstance processInstance = runtimeService().startProcessInstanceByKey(
      "ProcessEngineTests-calledProcessInstance-superProcess2"
    );
    assertThat(calledProcessInstance("ProcessEngineTests-calledProcessInstance-subProcess1", processInstance))
      .hasProcessDefinitionKey("ProcessEngineTests-calledProcessInstance-subProcess1");
    assertThat(calledProcessInstance(processInstanceQuery().processDefinitionKey("ProcessEngineTests-calledProcessInstance-subProcess1"), processInstance))
      .hasProcessDefinitionKey("ProcessEngineTests-calledProcessInstance-subProcess1");
    assertThat(calledProcessInstance("ProcessEngineTests-calledProcessInstance-subProcess2", processInstance))
      .hasProcessDefinitionKey("ProcessEngineTests-calledProcessInstance-subProcess2
public class ServiceManager {
	private static ServiceManager serviceManager = new ServiceManager();
	private PropertiesConfiguration configuration;
	private ServerListService serverListService;
	private ConfigService configService;
	private UserInfoService userInfoService;
	private LineService lineService;
	private UdidService udidService;
	private VersionService VersionService;
	private ServiceManager() {
	}
	public static ServiceManager getManager() {
		return serviceManager;
	}
	public void initService() {
		try {
			this.loadConfig();
			this.userInfoService = new UserInfoService();
			this.lineService = new LineService();
			this.configService = new ConfigService();
			this.serverListService = new ServerListService();
			this.udidService = new UdidService();
			this.VersionService = new VersionService();
		} catch (ConfigurationException e) {
			e.printStackTrace();
		}
	}
	public void loadConfig() throws ConfigurationException {
		this.configuration = new PropertiesConfiguration(
/**
 * 권한관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Service("egovAuthorManageService")
public class EgovAuthorManageServiceImpl extends EgovAbstractServiceImpl implements EgovAuthorManageService {
    
	@Resource(name="authorManageDAO")
    private AuthorManageDAO authorManageDAO;
    /**
	 * 권한 목록을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return List<AuthorManageVO>
	 * @exception Exception
	 */
    public List<AuthorManageVO> selectAuthorList(AuthorManageVO authorManageVO) throws Exception {
        return authorManageDAO.selectAuthorList(authorManageVO);
    }
    
	/**
	 * 권한을 등록한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void insertAuthor(AuthorManage authorManage) throws Exceptio

    	authorManageDAO.insertAuthor(authorManage);
    }
    /**
	 * 권한을 수정한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void updateAuthor(AuthorManage authorManage) throws Exception {
    	authorManageDAO.updateAuthor(authorManage);
    }
    /**
	 * 권한을 삭제한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void deleteAuthor(AuthorManage authorManage) throws Exception {
    	if(authorManage.getAuthorCode().equals("ROLE_ADMIN")){
    		return;
    	}else{
    		authorManageDAO.deleteAuthor(authorManage);
    	}
    }
    /**
	 * 권한을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return AuthorManageVO
	 * @exception Exception
	 */
    public AuthorManageVO selectAuthor(AuthorManageVO authorManageVO) throws Exception {
    	AuthorManageVO resultVO = authorManageDAO.selectAuthor(authorManageVO);
        if (resultVO == null)
            throw processException("info.nodata.msg");
        return resultVO;
    }
    /**
	 
public class ProcessManager {
	private  Map<String, MigratableProcess> processMap = new HashMap<String, MigratableProcess>();
	public MigratableProcess launch(String className, String[] args) throws InstantiationException, IllegalAccessException, ClassNotFoundException, SecurityException, NoSuchMethodException, IllegalArgumentException, InvocationTargetException{
		Constructor constructor = Class.forName(className).getDeclaredConstructor(String[].class);
		MigratableProcess process = (MigratableProcess) constructor.newInstance(new Object[]{args});
		processMap.put(process.getUid(), process);
		new Thread(process).start();
		return process;
	}
	public MigratableProcess removeProcess(String processName){
		MigratableProcess process = null;
		if(processMap.containsKey(processName)){
			process = processMap.get(processName);
			process.migrate();
			processMap.remove(processName);
		}
		return process;
	}
	public boolean addProcess(MigratableProcess process){
		if(!processMap.containsKey(p
/*
 * Name   : Russell Tan
 * Date   : November 17, 2014
 * Purpose: Test the Mini word processor interface
 * Inputs : Standard commands in word processing
 * Outputs: The corresponding output when performing commands
 */
public class wordTester
	public static void main(String Theory[])
	{
		miniWord word = new miniWord("Hocus Pocus");
		word.processCommand("insert [a]");
		word.processCommand("insert [b]");
		word.processCommand("insert [c]");
		word.processCommand("insert [d]");
		word.processCommand("insert [e]");
		word.processCommand("insert [f]");
		word.processCommand("insert [g]");
		word.processCommand("insert [h]");
		word.processCommand("insert [i]");
		word.processCommand("insert [j]");
		word.processCommand("left");
		word.processCommand("left");
		word.processCommand("left");
		word.processCommand("find [r]");
		word.processCommand("left");
		word.processCommand("left");
		word.processCommand("left");
		word.processCommand("left");
		word.processCommand("left");
		word.p
/**
 * 권한관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Repository("authorManageDAO")
public class AuthorManageDAO extends EgovComAbstractDAO {
    /**
	 * 권한목록을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return List<AuthorManageVO>
	 * @exception Exception
	 */
    @SuppressWarnings("unchecked")
	public List<AuthorManageVO> selectAuthorList(AuthorManageVO authorManageVO) throws Exception {
        return (List<AuthorManageVO>) list("authorManageDAO.selectAuthorList", authorManageVO);
    }
	/**
	 * 권한을 등록한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void insertAuthor(AuthorManage authorManage) throws Exception {
        insert("authorManageDAO.insertAuthor", authorManage);
    }
    /**
	 * 권한을 수정한다.

	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void updateAuthor(AuthorManage authorManage) throws Exception {
        update("authorManageDAO.updateAuthor", authorManage);
    }
    /**
	 * 권한을 삭제한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void deleteAuthor(AuthorManage authorManage) throws Exception {
        delete("authorManageDAO.deleteAuthor", authorManage);
    }
    /**
	 * 권한을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return AuthorManageVO
	 * @exception Exception
	 */
    public AuthorManageVO selectAuthor(AuthorManageVO authorManageVO) throws Exception {
        return (AuthorManageVO) select("authorManageDAO.selectAuthor", authorManageVO);
    }
    /**
	 * 권한목록 총 갯수를 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectAuthorListTotCnt(AuthorManageVO authorManageVO)  throws Exception {
        return (Integer)select("authorManageDAO.s
public class ProcessCommentCollectionResource extends SecuredResource {
    ApplicationContext ctx = 
			new ClassPathXmlApplicationContext("activiti-context.xml");
	ProcessCommentService service = ctx.getBean("processCommentService",ProcessCommentService.class);
	List<ProcessComment> commentList = null;
	String currentProcessId = null;
	@Get
	public Map<String, List<ProcessComment>> getProcessComments() {
		if(authenticate() == false) return null;
		
		Map<String, List<ProcessComment>> processesComments = new TreeMap<String, List<ProcessComment>>();
		
		currentProcessId = getAttribute("processInstanceId");
	    if (currentProcessId == null) {
	      throw new ActivitiIllegalArgumentException("The processInstanceId cannot be null");
	    }
	    
		HistoricProcessInstance processInstance = ActivitiUtil.getHistoryService().createHistoricProcessInstanceQuery()
				.processInstanceId(currentProcessId)
				.singleResult();
		if (processInstance == null) {
			throw new ActivitiObjectNotFoun

		}
	    
		String parentProcessId = currentProcessId;
		while(processInstance.getSuperProcessInstanceId() != null) {
			parentProcessId = processInstance.getSuperProcessInstanceId();
			processInstance = (HistoricProcessInstance)ActivitiUtil.getHistoryService()
					.createHistoricProcessInstanceQuery()
					.processInstanceId(parentProcessId)
					.singleResult();
		}
		
		traverseProcessTreeForId(parentProcessId, processesComments);
		
		commentList = service.findByProcessId(parentProcessId);
		String processTreeId = 
				Utility.getProcessDefinitionNameFromDefinitionId(processInstance.getProcessDefinitionId())
				+ "-" + parentProcessId;
		if(currentProcessId.equals(parentProcessId))
			processTreeId += "-self";
		else 
			processTreeId += "-null";
		processesComments.put(processTreeId, commentList);
		
		return processesComments;
	}
	private void traverseProcessTreeForId(String superProcessInstanceId, Map<String, List<ProcessComment>> processesComments) {
		List<HistoricProcessI
public class ProcessQueue implements Iterable<Process>{
	private static final int INITIAL_QUEUE_SIZE = 20;
	private Queue<Process> processQueue = new ArrayDeque<Process>(INITIAL_QUEUE_SIZE);
	public ProcessQueue(int priorityInput) {
		priority = (int)priorityInput;
	}
	public ProcessQueue(Process[] arrayInput) {
		priority = arrayInput[0].getPriority();
		for (int i = 0; i < arrayInput.length; i++) {
			addProcess(arrayInput[i]);
		}
	}
	public int getPriority() {
		return priority;
	}
	public Process createProcess() {
		Process newProcess = new Process(priority);
		System.err.println("Created " + newProcess);
		processQueue.add(newProcess);
		return newProcess;
	}
	public Process createProcess(String nameInput) {
		Process newProcess = new Process(priority, nameInput);
		System.err.println("Created " + newProcess);
		processQueue.add(newProcess);
		return newProcess;
	}
	public boolean addProcess(Process process) {
		boolean success = processQueue.add(process);
		return success;
	}
	p
public class DispatchHandler {
	public final static int SHOW_SHORTNOTICE=255;
	public final static int SHOW_LONGNOTICE=254;
	private static Handler handler=null;
	public static Handler setHandler(Handler h){
		if(null!=handler){
			synchronized(handler){
				Handler o=handler;
				handler=h;
				return o;
			}
		}else{
			handler=h;
			return h;
		}
	}
	public static boolean isCurrent(Handler h){
		return h==handler;
	}
	public static Handler getHandler(){
		if(null!=handler){
			synchronized(handler){
				return handler;
			}
		}else{
			return null;
		}
	}
	public static boolean sendMessage(Message msg){
		if(null!=handler){
			synchronized(handler){
				return handler.sendMessage(msg);
			}
		}else{
			return false;
		}
	}
	public static void submitShortNotice(String info){
		if(null!=handler){
			android.os.Message msg = new android.os.Message();
			msg.what=SHOW_SHORTNOTICE;
			msg.obj=info;
			sendMessage(msg);
		}
	}
	public static void submitLongNotice(String info){
		if(null!=
/**
 * 개요
 * - 행사관리에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - 행사관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 행사관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Repository("eventManageDAO")
public class EventManageDAO extends EgovComAbstractDAO {
	/**
	 * 행사관리정보를 관리하기 위해 등록된 행사관리 목록을 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<EventManageVO> selectEventManageList(EventManageVO eventManageVO) throws Exception {
		return (List<EventManageVO>) list("eventManageDAO.selectEventManageList", eventManageVO);
	}
    /**
	 * 행사관리목록 총 갯수를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectEventManageListTotCnt(EventManageVO eventManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("eventManageDAO.selectEventManageListTotCnt", eventManageVO);
    }
	/**
	 * 등록된 행사관리의 상세정보를 조회한다.
	 * @param 

	 * @return EventManageVO - 행사관리 VO
	 */
	public EventManageVO selectEventManage(EventManageVO eventManageVO)  throws Exception {
		return (EventManageVO) selectByPk("eventManageDAO.selectEventManage", eventManageVO);
	}
	/**
	 * 행사관리정보를 신규로 등록한다.
	 * @param eventManage - 행사관리 model
	 */
	public void insertEventManage(EventManage eventManage) throws Exception {
		insert("eventManageDAO.insertEventManage", eventManage);
	}
	/**
	 * 기 등록된 행사관리정보를 수정한다.
	 * @param eventManage - 행사관리 model
	 */
	public void updtEventManage(EventManage eventManage) throws Exception {
		update("eventManageDAO.updateEventManage", eventManage);
	}
	/**
	 * 기 등록된 행사관리정보를 삭제한다.
	 * @param eventManage - 행사관리 model
	 */
	public void deleteEventManage(EventManage eventManage) throws Exception {
        delete("eventManageDAO.deleteEventManage",eventManage);
	}
	/** 행사접수관리 ***/
	/**
	 * 행사접수정보를 관리하기 위해 등록된 행사관리 목록을 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사관리 목록
	 */
	@SuppressWarnings("unchecke

	public List<EventManageVO> selectEventAtdrnList(EventManageVO eventManageVO) throws Exception {
		return (List<EventManageVO>) list("eventManageDAO.selectEventAtdrnList", eventManageVO);
	}
    /**
	 * 행사접수관리목록 총 갯수를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectEventAtdrnListTotCnt(EventManageVO eventManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("eventManageDAO.selectEventAtdrnListTotCnt", eventManageVO);
    }
	/**
	 * 행사접수승인/반려 처리를 위해 등록된 행사접수 목록을 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<EventManageVO> selectEventRceptConfmList(EventManageVO eventManageVO) throws Exception {
		return (List<EventManageVO>) list("eventManageDAO.selectEventRceptConfmList", eventManageVO);
	}
    /**
	 * 행사접수승인/반려 처리를 위해 등록된 행사접수 목록 총 갯수를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return int
	 * @exception Exceptio

	 */
    public int selectEventRceptConfmListTotCnt(EventManageVO eventManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("eeventManageDAO.selectEventRceptConfmListTotCnt", eventManageVO);
    }
	/**
	 * 행사일자, 행사구분 조건에 따른 행사명 목록을 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<EventManageVO> selectEventNmList(EventManageVO eventManageVO) throws Exception {
		return (List<EventManageVO>) list("eventManageDAO.selectEventNmList", eventManageVO);
	}
    
	/**
	 * 등록된 행사접수관리의 상세정보를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return EventManageVO - 행사관리 VO
	 */
	public EventManageVO selectEventAtdrn(EventManageVO eventManageVO)  throws Exception {
		return (EventManageVO) selectByPk("eventManageDAO.selectEventAtdrn", eventManageVO);
	}
	/**
	 * 행사접수관리정보를 신규로 등록한다.
	 * @param eventManage - 행사관리 model
	 */
	public void insertEventAtdrn(EventAtdrn eventAtdrn) throws Exception {
		

	}
	/**
	 * 기 등록된 행사접수관리정보를 삭제한다.
	 * @param eventManage - 행사관리 model
	 */
	public void deleteEventAtdrn(EventAtdrn eventAtdrn) throws Exception {
        delete("eventManageDAO.deleteEventAtdrn",eventAtdrn);
	}
	/**
	 * 기 등록된 행사접수관리정보를 승인처리한다.
	 * @param eventManage - 행사관리 model
	 */
	public void updtEventAtdrn(EventAtdrn eventAtdrn) throws Exception {
		update("eventManageDAO.updtEventAtdrn", eventAtdrn);
	}
	/**
	 * 행사접수자 정보를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<EventManageVO> selectEventReqstAtdrnList(EventManageVO eventManageVO) throws Exception {
		return (List<EventManageVO>) list("eventManageDAO.selectEventReqstAtdrnList", eventManageVO);
	}
    /**
	 * 행사접수자 목록 총 갯수를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectEventReqstAtdrnListTotCnt(EventManageVO eventManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().q
public class ManageSnomedCTProcess {
	private String currentManageSnomedCTProcessName = "none";
	private String currentManageSnomedCTProcessStatus = "";
	private String currentManageSnomedCTProcessStartTime = "";
	private String currentManageSnomedCTProcessDirectoryLocation = "";
	private int currentManageSnomedCTProcessNumProcessed = 0;
	private int currentManageSnomedCTProcessNumToProcess = 0;
	public ManageSnomedCTProcess(String processName) {
		
		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		Date date = new Date();
		
		setCurrentManageSnomedCTProcessName(processName);
		setCurrentManageSnomedCTProcessStatus("starting");
		setCurrentManageSnomedCTProcessStartTime(dateFormat.format(date));
	}
	/**
	 * @param currentManageSnomedCTProcess the currentManageSnomedCTProcess to set
	 */
	public void setCurrentManageSnomedCTProcessName(String currentManageSnomedCTProcessName) {
		this.currentManageSnomedCTProcessName = currentManageSnomedCTProcessName;
	}
	/**
	 *

	 */
	public String getCurrentManageSnomedCTProcessName() {
		return currentManageSnomedCTProcessName;
	}
	/**
	 * @param currentManageSnomedCTProcessStatus the currentManageSnomedCTProcessStatus to set
	 */
	public void setCurrentManageSnomedCTProcessStatus(String currentManageSnomedCTProcessStatus) {
		this.currentManageSnomedCTProcessStatus = currentManageSnomedCTProcessStatus;
	}
	/**
	 * @return currentManageSnomedCTProcessStatus
	 */
	public String getCurrentManageSnomedCTProcessStatus() {
		return currentManageSnomedCTProcessStatus;
	}
	/**
	 * @param currentManageSnomedCTProcessStartTime the currentManageSnomedCTProcessStartTime to set
	 */
	public void setCurrentManageSnomedCTProcessStartTime(String currentManageSnomedCTProcessStartTime) {
		this.currentManageSnomedCTProcessStartTime = currentManageSnomedCTProcessStartTime;
	}
	/**
	 * @return currentManageSnomedCTProcessStartTime
	 */
	public String getCurrentManageSnomedCTProcessStartTime() {
		return currentManageSnomedCTP

	}
	/**
	 * @param currentManageSnomedCTProcessDirectoryLocation the
	 *            currentManageSnomedCTProcessDirectoryLocation to set
	 */
	public void setCurrentManageSnomedCTProcessDirectoryLocation(String currentManageSnomedCTProcessDirectoryLocation) {
		this.currentManageSnomedCTProcessDirectoryLocation = currentManageSnomedCTProcessDirectoryLocation;
	}
	/**
	 * @return currentManageSnomedCTProcessDirectoryLocation
	 */
	public String getCurrentManageSnomedCTProcessDirectoryLocation() {
		return currentManageSnomedCTProcessDirectoryLocation;
	}
	/**
	 * @param currentManageSnomedCTProcessNumProcessed the currentManageSnomedCTProcessNumProcessed
	 *            to set
	 */
	public void setCurrentManageSnomedCTProcessNumProcessed(int currentManageSnomedCTProcessNumProcessed) {
		this.currentManageSnomedCTProcessNumProcessed = currentManageSnomedCTProcessNumProcessed;
	}
	/**
	 * @return currentManageSnomedCTProcessNumProcessed
	 */
	public int getCurrentManageSnomedCTProcessNumP
/*
 * Copyright (c) 2013 Christopher Klinkmüller
 * 
 * This software is released under the terms of the
 * for more information.
 */
public class Fragment {
	private ProcessModel processModel;
	private List<ProcessNode> nodes;
	public Fragment() {
		this.nodes = new ArrayList<ProcessNode>();
	}
	public ProcessModel getProcessModel() {
		return this.processModel;
	}
	public void setProcessModel(ProcessModel processModel) {
		this.processModel = processModel;
	}
	public void addProcessNode(ProcessNode processNode) {
		this.nodes.add(processNode);
	}
	public Iterable<ProcessNode> getProcessNodes() {
		return this.nodes;
	}
	public void removeProcessNode(ProcessNode processNode) {
		this.nodes.add(processNode);
	}
	public boolean containsProcessNode(ProcessNode processNode) {
		return this.nodes.contains(processNode);
	}
	public int getProcessNodesSize() {
		return this.nodes.size();
	}
	public ProcessNode getNode(int i) {
		return this.nodes.get(i);
	}
	public boolean containsNode(Proces
/**
 * 개요
 * - 팝업창에 대한 ServiceImpl을 정의한다.
 * 
 * 상세내용
 * - 팝업창에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 팝업창의 조회기능은 목록조회, 상세조회로, 사용자화면 보기로 구분된다.
 * @author 이창원
 * @version 1.0
 * @created 05-8-2009 오후 2:19:58
 */
@Service("egovPopupManageService")
public class EgovPopupManageServiceImpl extends AbstractServiceImpl implements EgovPopupManageService {
        @Resource(name = "popupManageDAO")
	public PopupManageDAO dao;
        @Resource(name = "egovPopupManageIdGnrService")
        private EgovIdGnrService idgenService;
        
	public EgovPopupManageServiceImpl(){}
	/**
	 * 기 등록된 팝업창정보를 삭제한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 * 
	 * @param popupManage
	 */
	public void deletePopup(PopupManageVO popupManageVO) throws Exception {
	    dao.deletePopup(popupManageVO);
	}
	/**
	 * 팝업창정보를 신규로 등록한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 * 
	 * @param popupManage
	 */
	public void insertPopup(PopupManageVO popupManageVO) throws Exce

	    String sMakeId = idgenService.getNextStringId();
	    popupManageVO.setPopupId(sMakeId);
	    dao.insertPopup(popupManageVO);
	}
        /**
         * 기 등록된 팝업창정보를 수정한다.
         * @param popupManage - 팝업창 model
         * @return boolean - 반영성공 여부
         * 
         * @param popupManage
         */
        public void updatePopup(PopupManageVO popupManageVO) throws Exception {
                dao.updatePopup(popupManageVO);
        }
	/**
	 * 팝업창을 사용자 화면에서 볼수 있는 정보들을 조회한다.
	 * @param popupManageVO - 팝업창 Vo
	 * @return popupManageVO - 팝업창 Vo
	 * 
	 * @param popupManageVO
	 */
	public PopupManageVO selectPopup(PopupManageVO popupManageVO) throws Exception {
		return (PopupManageVO)dao.selectPopup(popupManageVO);
	}
	/**
	 * 팝업창를 관리하기 위해 등록된 팝업창목록을 조회한다.
	 * @param popupManageVO - 팝업창 Vo
	 * @return List - 팝업창 목록
	 * 
	 * @param popupManageVO
	 */
	public List selectPopupList(PopupManageVO popupManageVO) throws Exception {
		return (List)dao.selectPopupList(popupManageVO);
	}
  
/**
 * The Interface IProcessBCF.
 * 
 * @author QAT Global
 */
public interface IProcessCSVBCF
	/**
	 * Update csv downloaded.
	 * 
	 * @param processRequest the process request
	 * @return the process response
	 */
	ProcessResponse updateCSVDownloaded(ProcessRequest processRequest);
	/**
	 * Generate file csv summary.
	 * 
	 * @param inquiryProcessRequest the inquiry process request
	 * @return the process response
	 */
	ProcessResponse generateFileCSVSummary(InquiryProcessRequest inquiryProcessRequest);
	/**
	 * Insert csv process.
	 * 
	 * @param processRequest the process request
	 * @return the process response
	 */
	ProcessResponse insertCSVProcess(InquiryProcessRequest processRequest);
	/**
	 * Generate file csv communication summary.
	 * 
	 * @param inquiryProcessRequest the inquiry process request
	 * @return the process response
	 */
	ProcessResponse generateFileCSVCommunicationSummary(InquiryProcessRequest inquiryProcessRequest);
	/**
	 * Generate file csv demand response s

	 * 
	 * @param inquiryProcessRequest the inquiry process request
	 * @return the process response
	 */
	ProcessResponse generateFileCSVDemandResponseSummary(InquiryProcessRequest inquiryProcessRequest);
	/**
	 * Generate file csv demand read summary.
	 * 
	 * @param inquiryProcessRequest the inquiry process request
	 * @return the process response
	 */
	ProcessResponse generateFileCSVDemandReadSummary(InquiryProcessRequest inquiryProcessRequest);
	/**
	 * 
	 * @param inquiryProcessRequest the inquiry process request
	 * @return the process response
	 */
	ProcessResponse generateFileCSVImportHanSummary(InquiryProcessRequest inquiryProcessRequest);
	/**
	 * Generate file csv today.
	 * 
	 * @param inquiryProcessRequest the inquiry process request
	 * @return the process response
	 */
	ProcessResponse generateFileCSVToday(InquiryProcessRequest inquiryProcessRequest);
	/**
	 * Generate file csv event history.
	 * 
	 * @param inquiryProcessRequest the inquiry process request
	 * @return t
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
public class MetierFactory {
    private static LivreService livreService;
    private static BibliothecaireService bibliothecaireService;
    private static FileService fileService;
    private static CategorieService categorieService;
    private static Principale principale;
    private static ArmoireService armoireService;
    private static EtagereService etagereService;
    private static StructureBibliothequeService structureService;
    public static StructureBibliothequeService getStructureService() {
        if(structureService == null){
            structureService = new StructureBibliothequeServiceImpl();
        }
        return structureService;
    }
    public static EtagereService getEtagereService() {
        if(etagereService == null){
            etagereService = new EtagereServiceImpl();
        }
        return etagereService;
    }
    public static ArmoireService 

        if(armoireService == null){
            armoireService = new ArmoireServiceImpl();
        }
        return armoireService;
    }
    public static CategorieService getCategorieService() {
        if (categorieService == null) {
            categorieService = new CategorieServiceImpl();
        }
        return categorieService;
    }
    
    public static Principale getPrincipale() {
        if (principale == null) {
            principale = new Principale();
        }
        return principale;
    }
    public static FileService getFileService() {
        if (fileService == null) {
            fileService = new FileServiceImpl();
        }
        return fileService;
    }
    public static LivreService getLivreService() {
        if (livreService == null) {
            livreService = new LivreServiceImpl();
        }
        return livreService;
    }
    public static BibliothecaireService getBibliothecaireService() {
        if (bibliothecaireService == null) {
        
public enum ServiceControlEnum{ 
	SERVICE_CONTROL_STOP(Service.SERVICE_CONTROL_STOP, "SERVICE_CONTROL_STOP"), 
	SERVICE_CONTROL_PAUSE(Service.SERVICE_CONTROL_PAUSE, "SERVICE_CONTROL_PAUSE"),
	SERVICE_CONTROL_CONTINUE(Service.SERVICE_CONTROL_STOP, "SERVICE_CONTROL_STOP"),
	SERVICE_CONTROL_INTERROGATE(Service.SERVICE_CONTROL_INTERROGATE, "SERVICE_CONTROL_INTERROGATE"),
	SERVICE_CONTROL_SHUTDOWN(Service.SERVICE_CONTROL_SHUTDOWN, "SERVICE_CONTROL_SHUTDOWN"),
	SERVICE_CONTROL_PARAMCHANGE(Service.SERVICE_CONTROL_PARAMCHANGE, "SERVICE_CONTROL_PARAMCHANGE"),
	SERVICE_CONTROL_NETBINDADD(Service.SERVICE_CONTROL_NETBINDADD, "SERVICE_CONTROL_NETBINDADD"),
	SERVICE_CONTROL_NETBINDREMOVE(Service.SERVICE_CONTROL_NETBINDREMOVE, "SERVICE_CONTROL_NETBINDREMOVE"),
	SERVICE_CONTROL_NETBINDENABLE(Service.SERVICE_CONTROL_NETBINDENABLE, "SERVICE_CONTROL_NETBINDENABLE"),
	SERVICE_CONTROL_NETBINDDISABLE(Service.SERVICE_CONTROL_NETBINDDISABLE, "SERVICE_CONTROL_NETBINDDISABLE"),
	SERVICE_CONTROL_DEVICEEVENT(Serv

	SERVICE_CONTROL_HARDWAREPROFILECHANGE(Service.SERVICE_CONTROL_HARDWAREPROFILECHANGE, "SERVICE_CONTROL_HARDWAREPROFILECHANGE"),
	SERVICE_CONTROL_POWEREVENT(Service.SERVICE_CONTROL_POWEREVENT, "SERVICE_CONTROL_POWEREVENT"),
	SERVICE_CONTROL_SESSIONCHANGE(Service.SERVICE_CONTROL_SESSIONCHANGE, "SERVICE_CONTROL_SESSIONCHANGE");
	static private Map<Integer, ServiceControlEnum> controlMap = 
			new HashMap<Integer, ServiceControlEnum>();
	static{
		for(ServiceControlEnum control : ServiceControlEnum.values()){
			controlMap.put(control.getId(), control);
		}
	}
	private int id;
	private String description;
	ServiceControlEnum(int id, String description){
		this.id = id; 
		this.description = description;
	}
	/**
	 * @return the id
	 */
	public int getId() {
		return id;
	}
	/**
	 * @return the description
	 */
	public String getDescription() {
		return description;
	}
	/**
	 * @return the description
	 */
	public static String getDescription(int id) {
		return controlMap.get(id).getDescrip
public class ServiceLocator {
    private static HolidayRequestRepository holidayRequestRepository;
    private static IdentityRepository identityRepository;
    private static NotificationChannel notificationChannel;
    public static HolidayRequestRepository getHolidayRequestRepository() {
        return holidayRequestRepository;
    }
    public static void setHolidayRequestRepository(HolidayRequestRepository holidayRequestRepository) {
        ServiceLocator.holidayRequestRepository = holidayRequestRepository;
    }
    public static IdentityRepository getIdentityRepository() {
        return identityRepository;
    }
    public static void setIdentityRepository(IdentityRepository identityRepository) {
        ServiceLocator.identityRepository = identityRepository;
    }
    public static NotificationChannel getNotificationChannel() {
        return notificationChannel;
    }
    public static void setNotificationChannel(NotificationChannel notificationChannel) {
        ServiceLoc
/**
 * 개요
 * - PROCESS모니터링에 대한 ServiceImpl 클래스를 정의한다.
 *
 * 상세내용
 * - PROCESS모니터링에 대한 등록, 수정, 삭제, 조회 기능을 제공한다.
 * - PROCESS모니터링의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 박종선
 * @version 1.0
 * @created 08-9-2010 오후 3:54:46
 */
@Service("EgovProcessMonService")
public class EgovProcessMonServiceImpl extends EgovAbstractServiceImpl implements EgovProcessMonService {
	@Resource(name = "ProcessMonDAO")
	private ProcessMonDAO processMonDAO;
	@Resource(name="egovProcessMonIdGnrService")
	private EgovIdGnrService idgenServiceProcessMon;
	@Resource(name="egovProcessMonLogIdGnrService")
	private EgovIdGnrService idgenServiceProcessMonLog;
	/**
	 * 등록된 PROCESS모니터링 목록을 조회한다.
	 * @param processMonVO - PROCESS모니터링 Vo
	 * @return List - PROCESS모니터링 목록
	 *
	 * @param processMonVO
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public List selectProcessMonList(ProcessMonVO processMonVO) throws Exception {
        return processMonDAO.selectProcessMonList(processMonVO);
	}
	/**
	 * PROCESS모니

	 * @param processMonVO - PROCESS모니터링 Vo
	 * @return int - PROCESS모니터링 토탈 카운트 수
	 *
	 * @param processMonVO
	 */
	@Override
	public int selectProcessMonTotCnt(ProcessMonVO processMonVO) throws Exception {
        return processMonDAO.selectProcessMonTotCnt(processMonVO);
	}
	/**
	 * 등록된 PROCESS모니터링의 상세정보를 조회한다.
	 * @param processMonVO - PROCESS모니터링 Vo
	 * @return processMonVO - PROCESS모니터링 Vo
	 *
	 * @param processMonVO
	 */
	@Override
	public ProcessMonVO selectProcessMon(ProcessMonVO processMonVO) throws Exception {
		return processMonDAO.selectProcessMon(processMonVO);
	}
	/**
	 * PROCESS모니터링 정보를 신규로 등록한다.
	 * @param processNm - PROCESS모니터링 model
	 *
	 * @param processNm
	 */
	@Override
	public void insertProcessMon(ProcessMon processMon) throws Exception {
		processMon.setProcessId(idgenServiceProcessMon.getNextStringId());
		processMonDAO.insertProcessMon(processMon);
	}
	/**
	 * 기 등록된 PROCESS모니터링 정보를 수정한다.
	 * @param processNm - PROCESS모니터링 model
	 *
	 * @param processNm
	 */
	@

	public void updateProcessMon(ProcessMon processMon) throws Exception {
		processMonDAO.updateProcessMon(processMon);
	}
	/**
	 * 기 등록된 PROCESS모니터링 정보를 삭제한다.
	 * @param processNm - PROCESS모니터링 model
	 *
	 * @param processNm
	 */
	@Override
	public void deleteProcessMon(ProcessMon processMon) throws Exception {
		processMonDAO.deleteProcessMon(processMon);
	}
	/**
	 * 프로세스 모니터링로그 목록을 조회한다.
	 * @param ProcessMonVO - 프로세스모니터링로그 VO
	 * @return  List<ProcessMonVO> - 프로세스모니터링로그 List
	 *
	 * @param processMonLogVO
	 */
	@Override
	public Map<String, Object> selectProcessMonLogList(ProcessMonLogVO processMonLogVO) throws Exception {
		List<ProcessMonLogVO> result = processMonDAO.selectProcessMonLogList(processMonLogVO);
		int cnt = processMonDAO.selectProcessMonLogTotCnt(processMonLogVO);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("resultList", result);
		map.put("resultCnt", Integer.toString(cnt));
		return map;
	}
	/**
	 * 프로세스 모니터링로그의 상세정보를 조회한다.
	 * @param Proces

	 * @return  ProcessMonVO - 프로세스모니터링로그 model
	 *
	 * @param processMonLogVO
	 */
	@Override
	public ProcessMonLogVO selectProcessMonLog(ProcessMonLogVO processMonLogVO) throws Exception {
		return processMonDAO.selectProcessMonLog(processMonLogVO);
	}
	/**
	 * 프로세스 모니터링로그를 등록한다.
	 * @param processMonLog - 프로세스 모니터링로그 model
	 *
	 * @param processMonLog
	 */
	@Override
	public void insertProcessMonLog(ProcessMonLog processMonLog) throws Exception{
		processMonDAO.insertProcessMonLog(processMonLog);
	}
	/**
	 * 프로세스 모니터링 결과를 수정한다.
	 * @param processMonLog - 프로세스 모니터링대상 model
	 *
	 * @param processMonLog
	 */
	@Override
	public void updateProcessMonSttus(ProcessMon processMon) throws Exception{
		processMonDAO.updateProcessMonSttus(processMon);
		ProcessMonLog processMonLog = new ProcessMonLog();
		processMonLog.setProcessId(processMon.getProcessId());
		processMonLog.setLogId(idgenServiceProcessMonLog.getNextStringId());
		processMonLog.setProcessNm(processMon.getProcessNm());
		processM
/**
 * @Class Name : EgovBkmkMenuManageServiceImpl.java
 * @Description : 바로가기메뉴를 관리하는 서비스 구현 클래스
 * @Modification Information
 *
 *    수정일       수정자         수정내용
 *    -------        -------     -------------------
 *    2009. 9. 25.     윤성록
 *
 * @author 공통 컴포넌트 개발팀 윤성록
 * @since 2009. 9. 25.
 * @version
 * @see
 *
 */
@Service("bkmkMenuManageservice")
public class EgovBkmkMenuManageServiceImpl extends EgovAbstractServiceImpl implements EgovBkmkMenuManageservice{
    
    @Resource(name = "bkmkMenuManageDAO")
    private BkmkMenuManageDAO bkmkMenuManageDAO;
       
    /**
     * 바로가기메뉴관리 정보를 삭제한다.
     * @param BkmkMenuManage
     * @return  
     * @exception Exception
     */
    public void deleteBkmkMenuManage(BkmkMenuManage bkmkMenuManage) throws Exception  {
        bkmkMenuManageDAO.deleteBkmkMenuManage(bkmkMenuManage);        
    }
    /**
     * 바로가기메뉴관리 정보를 등록한다.
     * @param BkmkMenuManage
     * @return  
     * @exception Exception
     */
    public void insertBkmkMe

        bkmkMenuManageDAO.insertBkmkMenuManage(bkmkMenuManage);        
    }
    /**
     * 바로가기메뉴관리 정보의 전체목록을 조회한다.
     * @param BkmkMenuManage
     * @return  Map<String, Object>
     * @exception Exception
     */
    public Map<String, Object> selectBkmkMenuManageList(
            BkmkMenuManageVO bkmkMenuManageVO)  throws Exception{
        
        List<BkmkMenuManageVO> result = bkmkMenuManageDAO.selectBkmkMenuManageList(bkmkMenuManageVO);
        
        int cnt = bkmkMenuManageDAO.selectBkmkMenuManageListCnt(bkmkMenuManageVO);
        Map<String, Object> map = new HashMap<String, Object>();
        
        map.put("resultList", result);
        map.put("resultCnt", Integer.toString(cnt));
        return map;  
    }
    /**
     * 바로가기메뉴관리 정보를 조회한다.
     * @param BkmkMenuManageVO
     * @return  BkmkMenuManageVO
     * @exception Exception
     */
    public BkmkMenuManageVO selectBkmkMenuManageResult(
            BkmkMenuManageVO bkmkMenuManageVO) throws Exception {
    

    }
    /**
     * 등록할  메뉴정보 목록을 조회한다.
     * @param BkmkMenuManageVO
     * @return  Map<String, Object>
     * @exception Exception
     */
    public  Map<String, Object> selectMenuList(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        
        List<BkmkMenuManageVO> result = bkmkMenuManageDAO.selectBkmkMenuList(bkmkMenuManageVO);
        
        int cnt = bkmkMenuManageDAO.selectBkmkMenuListCnt(bkmkMenuManageVO);
        Map<String, Object> map = new HashMap<String, Object>();
        
        map.put("resultList", result);
        map.put("resultCnt", Integer.toString(cnt));
        return map;  
        
    }
    /**
     * 미리보기를 할 바로가기메뉴관리의 목록을 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return  List<MenuManageVO> 
     * @throws Exception
     */
    public List<MenuManageVO>  selectBkmkPreviewList(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        
                
        List<MenuManageVO> result = bkmkMenuManageDA
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 * Factoria de creación de Procesos. Es Singleton
 * @author javier.abella
 */
public class ProcessFactory {
    
    private static ProcessFactory instance;
    
    private ProcessFactory(){
        
    }
    
    public static ProcessFactory getInstance(){
        if (instance == null){
            synchronized(ProcessFactory.class){
                if (instance == null){
                    instance = new ProcessFactory();
                }
            }            
        }
        return instance;
    }
    
    private HashMap processMap = new HashMap();
    
    public void registerProcess (int processID, ProcessType process){
        processMap.put(processID, process);
    }
    
    
    public ProcessType createProcess(int tipo, Element elementProcess) throws NoSuchTypeOfProcessException{
        if(processMap.get(tipo)==null){
            throw new NoSuchTypeOfProcessEx
/**
 * The Class ServiceCenterManager.
 */
public class ServiceCenterManager implements ServiceCenterManagerMBean{
	/** The sc. */
	private ServiceCenter sc;
	/**
	 * Instantiates a new service center manager.
	 */
	public ServiceCenterManager() {
		sc = ServiceCenter.getServiceCenter();
	}
	/* (non-Javadoc)
	 * @see org.omni.service.ServiceCenterManagerMBean#stopService(java.lang.String)
	 */
	public boolean stopService(String serviceName) {
		return sc.stopService(serviceName);
	}
	/* (non-Javadoc)
	 * @see org.omni.service.ServiceCenterManagerMBean#startService(java.lang.String)
	 */
	public boolean startService(String serviceName) {
		return sc.startService(serviceName);
	}
	/* (non-Javadoc)
	 * @see org.omni.service.ServiceCenterManagerMBean#startService(java.lang.String, java.lang.String)
	 */
	public boolean startService(String serviceGroup, String serviceName) {
		return sc.startService(serviceGroup, serviceName);
	}
	/* (non-Javadoc)
	 * @see org.omni.service.ServiceCenterMana
/**
 * 
 * XpManageUser entity. @author MyEclipse Persistence Tools
 */
@Entity
@Table(name = "xp_manage_user", catalog = "xplan")
public class XpManageUser implements java.io.Serializable {
	private Integer xpManageUserId;
	private String xpManageUserName;
	private String xpManageUserPassword;
	private String xpManageUserSex;
	private String xpManageUserPhone;
	private String xpManageUserEmail;
	/** default constructor */
	public XpManageUser() {
	}
	/** full constructor */
	public XpManageUser(String xpManageUserName, String xpManageUserPassword,
			String xpManageUserSex, String xpManageUserPhone,
			String xpManageUserEmail) {
		this.xpManageUserName = xpManageUserName;
		this.xpManageUserPassword = xpManageUserPassword;
		this.xpManageUserSex = xpManageUserSex;
		this.xpManageUserPhone = xpManageUserPhone;
		this.xpManageUserEmail = xpManageUserEmail;
	}
	@Id
	@GeneratedValue
	@Column(name = "xp_manage_user_id", unique = true, nullable = false)
	public Integer getXpManageUserId() 

		return this.xpManageUserId;
	}
	public void setXpManageUserId(Integer xpManageUserId) {
		this.xpManageUserId = xpManageUserId;
	}
	@Column(name = "xp_manage_user_name", nullable = false, length = 20)
	public String getXpManageUserName() {
		return this.xpManageUserName;
	}
	public void setXpManageUserName(String xpManageUserName) {
		this.xpManageUserName = xpManageUserName;
	}
	@Column(name = "xp_manage_user_password", nullable = false, length = 20)
	public String getXpManageUserPassword() {
		return this.xpManageUserPassword;
	}
	public void setXpManageUserPassword(String xpManageUserPassword) {
		this.xpManageUserPassword = xpManageUserPassword;
	}
	@Column(name = "xp_manage_user_sex", nullable = false, length = 5)
	public String getXpManageUserSex() {
		return this.xpManageUserSex;
	}
	public void setXpManageUserSex(String xpManageUserSex) {
		this.xpManageUserSex = xpManageUserSex;
	}
	@Column(name = "xp_manage_user_phone", nullable = false, length = 11)
	public String getXpMa
public class MoProcess {
    private String processId;
    private String processCode;
    private String processName;
    private String processDescription;
    private String processDepartment;
    private int processRowNo;
    private String processSequence;
    protected boolean byProcess = true;
    public MoProcess() {
   
    }
    public void setProcessCode(String processCode) {
        this.processCode = processCode;
    }
    public void setProcessDepartment(String processDepartment) {
        this.processDepartment = processDepartment;
    }
    public void setProcessDescription(String processDescription) {
        this.processDescription = processDescription;
    }
    public void setProcessId(String processId) {
        this.processId = processId;
    }
    public void setProcessName(String processName) {
        this.processName = processName;
    }
    public void setProcessSequence(String processSequence) {
        this.processSequence = processSequence;
    }
    publi
public class ManageFacilityServiceImpl implements ManageFacilityService
		private ManageFacilityDao manageFacilityDao;
		public ManageFacilityDao getManageAgentDao()
		{
				return this.manageFacilityDao;
		}
		public void setManageFacilityDao(ManageFacilityDao manageFacilityDao)
		{
				this.manageFacilityDao = manageFacilityDao;
		}
		@Override
		public ArrayList<ManageFacilityBean> getFacilityDetails(ManageFacilityBean manageFacilityBean) {
			return manageFacilityDao.getFacilityDetails(manageFacilityBean);
		}
		@Override
		public boolean deleteFaciity(ManageFacilityBean manageFacilityBean) {
			return manageFacilityDao.deleteFaciity(manageFacilityBean);
		}
		@Override
		public ArrayList<ManageFacilityBean> getFacilityList() {
			return manageFacilityDao.getFacilityList();
		}
		@Override
		public ArrayList<ManageFacilityBean> getCheckpointList() {
			return manageFacilityDao.getCheckpointList();
		}
		@Override
		public boolean insertFacility(ManageFacilityBean objManageFacilityB
/**
 * 권한관리에 대한 Vo 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  이문준          최초 생성
 *
 * </pre>
 */
public class AuthorManageVO extends AuthorManage {
	private static final long serialVersionUID = 1L;
	List <AuthorManageVO> authorManageList;
	/**
	 * AuthorManage 를 리턴한다.
	 * @return AuthorManage
	 */
	public AuthorManage getAuthorManage()
    {
    	return getAuthorManage();
    }
	/**
	 * AuthorManage 값을 설정한다.
	 * @param authorManage AuthorManage
	 */	
    public void setAuthorManage(AuthorManage authorManage)
    {
    	setAuthorManage(authorManage);
    }
	/**
	 * authorManageList attribute 를 리턴한다.
	 * @return List<AuthorManageVO>
	 */
	public List<AuthorManageVO> getAuthorManageList() {
		return authorManageList;
	}
	/**
	 * authorManageList attribute 값을 설정한다.
	 * @param authorManageLis
/**
 * 로그인정책관리에 대한 DAO 클래스
 * @loginPolicy 배치운영환경 김지완
 * @since 2012.07.16
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2012.07.16  김지완          최초 생성
 *
 * </pre>
 */
@Repository("loginPolicyManageDAO")
public class LoginPolicyManageDAO extends EgovAbstractDAO {
	 /**
	 * 모든 사용자에 대한 로그인 정책 조회
	 * @param loginPolicyManageVO LoginPolicyManageVO
	 * @return List<LoginPolicyManageVO>
	 * @exception Exception
	 */
    @SuppressWarnings("unchecked")
	public List<LoginPolicyManageVO> selectLoginPolicyList(LoginPolicyManageVO loginPolicyManageVO) throws Exception {
        return (List<LoginPolicyManageVO>) list("loginPolicyManageDAO.selectLoginPolicyList", loginPolicyManageVO);
    }
	/**
	 * 사용자에 대한 로그인 정책 등록
	 * @param loginPolicyManage LoginPolicyManage
	 * @exception Exception
	 */
    public void insertLoginPolicy(LoginPolicyManage loginPolicyManage) throws Exce

        insert("loginPolicyManageDAO.insertLoginPolicy", loginPolicyManage);
    }
    /**
	 * 사용자에 대한 로그인 정책 수정
	 * @param loginPolicyManage LoginPolicyManage
	 * @exception Exception
	 */
    public void updateLoginPolicy(LoginPolicyManage loginPolicyManage) throws Exception {
        update("loginPolicyManageDAO.updateLoginPolicy", loginPolicyManage);
    }
    /**
	 * 사용자에 대한 로그인 정책 삭제
	 * @param loginPolicyManage LoginPolicyManage
	 * @exception Exception
	 */
    public void deleteLoginPolicy(LoginPolicyManage loginPolicyManage) throws Exception {
        delete("loginPolicyManageDAO.deleteLoginPolicy", loginPolicyManage);
    }
    /**
	 * 로그인 정책목록 총 갯수 조회
	 * @param loginPolicyManageVO LoginPolicyManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectLoginPolicyListTotCnt(LoginPolicyManageVO loginPolicyManageVO)  throws Exception {
        return (Integer)select("loginPolicyManageDAO.selectLoginPolicyListTotCnt", loginPolicyManageVO);
    }
    /**
	 * 로그인
/**
 * 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성
 *
 * </pre>
 */
@Repository("roleManageDAO")
public class RoleManageDAO extends EgovAbstractDAO {
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception {
		return (RoleManageVO) select("roleManageDAO.selectRole", roleManageVO);
	}
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception {
		return (List<RoleManageVO>) list("roleManageDAO.selectRol

	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 등록
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void insertRole(RoleManage roleManage) throws Exception {
		insert("roleManageDAO.insertRole", roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void updateRole(RoleManage roleManage) throws Exception {
		update("roleManageDAO.updateRole", roleManage);
	}
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception {
		delete("roleManageDAO.deleteRole", roleManage);
	}
    /**
	 * 롤목록 총 갯수를 조회한다.
	 * @param roleManageVO RoleManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectRoleListTotCnt(RoleManageVO roleManageVO) throws Exception {
        return (Integer)select("roleManageDAO.selectAuthorListTotCnt", roleManageVO);
    }
	/**
	 * 등록된 모든 롤 정보 목록
/**
 *
 */
/**
 * @author hanhlh
 *
 */
public class MessageHandlerMap {
    /**
     * <p>��å������ϥ�ɥ����Ͽ����ơ��֥�Ǥ����ϥ�ɥ� ID ʸ�����
     * �����ͤȤ��ơ��ϥ�ɥ��ޥåפ��ͤ��ݻ�ޤ���</p>
     * <String,MessageHandler>
     */
    private Map<String, MessageHandler> _mhandlers;
    /**
     * <p>�ǥե���ȤΥ�å������ϥ�ɥ�Ǥ����б������å������ϥ�ɥ餬
     * ��Ͽ����Ƥ��ʤ��Ȥ��˻��Ѥ���ޤ���</p>
     */
    private MessageHandler _defaultHandler;
    /**
     * DefaultHandler�Ȥ���NullHandler�����Ѥ����å������ϥ�ɥ��б�ɽ��
     * �������ޤ���
     */
    public MessageHandlerMap(){
        this(NullHandler.getInstance());
    }
    /**
     * ����ǻ��ꤵ�줿DefaultHandler�����Ѥ����å������ϥ�ɥ��б�ɽ��
     * �������ޤ���
     */
    public MessageHandlerMap(MessageHandler _defaultHandler) {
        super();
        _mhandlers = new ConcurrentHashMap<String, MessageHandler>();
        setDefaultHandler(_defaultHandler);
    }
    /**
     * ����ǻ��ꤵ�줿handlerID���б�����MessageHandler�ؤλ��Ȥ��֤��ޤ���
     * @param handlerID ʸ����Ǥ

     * @return handlerID���б��դ���줿MessageHandler
     */
    public MessageHandler getHandler(String handlerID) {
        if (handlerID == null){
            return _defaultHandler;
        }
        	MessageHandler handler = _mhandlers.get(handlerID);
        	return (handler == null) ? _defaultHandler : handler;
    }
    /**
     * <p> ����ǻ��ꤵ�줿 Message Handler �� default �� Handler �Ȥ�
     * �����Ѥ��ޤ���</p>
     *
     * <p> DefaultHandler �ϡ��б������å������ϥ�ɥ餬��Ͽ����Ƥ��ʤ��Ȥ���
     * ���Ѥ���ޤ���</p>
     * @param defaultHandler
     */
    public void setDefaultHandler(MessageHandler defaultHandler) {
        _defaultHandler = defaultHandler;
    }
    /**
     * <p> ����ǻ��ꤵ�줿 handlerID ���б����� �ϥ�ɥ�Ȥ��ơ�
     * handler ����Ͽ���ޤ��� </p>
     *
     * <p> �����null����ꤷ�ƤϤ����ޤ��� </p>
     *
     * @param handlerID �����Ȥʤ�ʸ����
     * @param handler �б����� MessageHandler
     * @exception IllegalArgumentException ����� null ����ꤷ���Ȥ��֤�ޤ���
     */
    public void add
public class ExceptionHandler implements UncaughtExceptionHandler {
    private UncaughtExceptionHandler _handler;
    private JexboxConnectorImpl _jexbox;
    public ExceptionHandler(UncaughtExceptionHandler handler, JexboxConnectorImpl notifier) {
        _handler = handler;
        _jexbox = notifier;
    }
    
    public static void install(JexboxConnectorImpl notifier) {
        UncaughtExceptionHandler currentHandler = Thread.getDefaultUncaughtExceptionHandler();
        if(currentHandler instanceof ExceptionHandler) {
            currentHandler = ((ExceptionHandler)currentHandler)._handler;
        }
        Thread.setDefaultUncaughtExceptionHandler(new ExceptionHandler(currentHandler, notifier));
    }
    public static void remove() {
        UncaughtExceptionHandler currentHandler = Thread.getDefaultUncaughtExceptionHandler();
        if(currentHandler instanceof ExceptionHandler) {
            Thread.setDefaultUncaughtExceptionHandler(((ExceptionHandler)currentHandler)._han
public class AnalyseService {
	private InventoryService inventoryService;
	private UserService userService;
	private BookService bookService;
	private CategoryService categoryService;
	private CouponsService couponsService;
	private OrderService orderService;
	public void analyse() {
		inventoryService.newAnalyse();
		userService.analyse();
		categoryService.analyse();
		bookService.analyse();
		couponsService.analyse();
		orderService.analyse();
	}
	public void setInventoryService(InventoryService inventoryService) {
		this.inventoryService = inventoryService;
	}
	public void setUserService(UserService userService) {
		this.userService = userService;
	}
	public void setCategoryService(CategoryService categoryService) {
		this.categoryService = categoryService;
	}
	public void setBookService(BookService bookService) {
		this.bookService = bookService;
	}
	public void setCouponsService(CouponsService couponsService) {
		this.couponsService = couponsService;
	}
	public void setOrderServi
@Component( role = NexusRepositoryMetadataHandler.class )
public class DefaultNexusRepositoryMetadataHandler
    extends AbstractLogEnabled
    implements NexusRepositoryMetadataHandler
    @Requirement
    private RepositoryRegistry repositoryRegistry;
    @Requirement
    private RepositoryMetadataHandler repositoryMetadataHandler;
    public RepositoryMetadata readRemoteRepositoryMetadata( String url )
        throws MetadataHandlerException,
            IOException
    {
        RestletRawTransport restletRawTransport = new RestletRawTransport( url );
        return repositoryMetadataHandler.readRepositoryMetadata( restletRawTransport );
    }
    public RepositoryMetadata readRepositoryMetadata( String repositoryId )
        throws NoSuchRepositoryException,
            MetadataHandlerException,
            IOException
    {
        Repository repository = repositoryRegistry.getRepository( repositoryId );
        NexusRawTransport nrt = new NexusRawTransport( repository, false, tr
public class ServiceLocator {
	private static IRecetasService recetasService = null;
	private static IMedidasService medidasService = null;
	private static ITiposIngredientesService tiposIngredientesService = null;
	private static ICategoriasService categoriasService = null;
	private static ITiposAnotacionesService tiposAnotacionesService = null;
	public static IRecetasService getRecetasService() {
		if(recetasService ==null){
			recetasService = new RecetasService();
			
		}
		return recetasService;
	}
	public static IMedidasService getMedidasService() {
		if(medidasService ==null){
			medidasService = new MedidasService();
			
		}
		return medidasService;
	}
	public static ITiposIngredientesService getTiposIngredientesService() {
		if(tiposIngredientesService ==null){
			tiposIngredientesService = new TiposIngredientesService();
			
		}
		return tiposIngredientesService;
	}
	public static ICategoriasService getCategoriasService() {
		if (categoriasService==null) {
			categoriasServic
/**
 * @author yoqu
 * @date 2017年05月12日
 * @time 下午3:04
 * @email wcjiang2@iflytek.com
 */
public class CustomRepositoryFactoryBean<T extends JpaRepository<S,ID>,S,ID extends Serializable> extends JpaRepositoryFactoryBean<T,S,ID>{
    public CustomRepositoryFactoryBean(Class<? extends T> repositoryInterface) {
        super(repositoryInterface);
    }
    @Override
    protected RepositoryFactorySupport createRepositoryFactory(EntityManager entityManager) {
        return new CustomRepositoryFactory(entityManager);
    }
    private static class CustomRepositoryFactory extends JpaRepositoryFactory{
        public CustomRepositoryFactory(EntityManager entityManager) {
            super(entityManager);
        }
        @Override
        protected <T, ID extends Serializable> SimpleJpaRepository<?, ?> getTargetRepository(RepositoryInformation information, EntityManager entityManager) {
            return new CustomRepositoryImpl<T,ID>((Class<T>)information.getDomainType(),entityManager)
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 * This object is passed to a method. Allows processes registered with this object to be cancelled outside of the method.
 * 
 * @author Michael Golden <michaelgolden0@gmail.com>
 */
public class ProcessReference {
    
    ArrayList<ProcessObject> referencedProcesses = new ArrayList<>();
    public boolean cancelled = false;
    
    public void addProcess(Process process)
    {
        referencedProcesses.add(new ProcessObject(process));
    }    
    
    public boolean isAlive(Process process)
    {
        for(ProcessObject p : referencedProcesses)
        {
            if(p.process.equals(process))
            {
                return !p.cancelled;
            }
        }
        
        return true;
    }
    
    public void cancelAllProcesses()
    {
        for(ProcessObject p : referencedProcesses)
        {
            if(p.process != null)
            {
                
/**
 * 개요
 * - 포상관리에 대한 ServiceImpl 클래스를 정의한다.
 * 
 * 상세내용
 * - 포상관리에 대한 등록, 수정, 삭제, 조회, 승인처리 기능을 제공한다.
 * - 포상관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Service("egovRwardManageService")
public class EgovRwardManageServiceImpl extends AbstractServiceImpl implements EgovRwardManageService {
	@Resource(name="rwardManageDAO")
    private RwardManageDAO rwardManageDAO;
    /** ID Generation */  
	@Resource(name="egovRwardManageIdGnrService")
	private EgovIdGnrService idgenRwardManageService;
	@Resource(name="EgovInfrmlSanctnService")
    protected EgovInfrmlSanctnService infrmlSanctnService;
	/**
	 * 포상관리정보를 관리하기 위해 등록된 포상관리 목록을 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return List - 포상관리 목록
	 */
	public List<RwardManageVO> selectRwardManageList(RwardManageVO rwardManageVO) throws Exception{
		rwardManageVO.setSearchFromDate(EgovStringUtil.removeMinusChar(rwardManageVO.getSearchFromDate()));
		rwardManageVO.setSearchToDate(EgovStri

		List<RwardManageVO> result = rwardManageDAO.selectRwardManageList(rwardManageVO);
		
		int num = result.size();
	    for (int i = 0 ; i < num ; i ++ ){
	    	RwardManageVO rwardManageVO1 = result.get(i);
	    	rwardManageVO1.setRwardDe(EgovDateUtil.formatDate(rwardManageVO1.getRwardDe(), "-"));
	    	result.set(i, rwardManageVO1);
	    }	
		return result;
	}
	/**
	 * 포상관리목록 총 갯수를 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return int - 포상관리 카운트 수
	 */
	public int selectRwardManageListTotCnt(RwardManageVO rwardManageVO) throws Exception {
		return rwardManageDAO.selectRwardManageListTotCnt(rwardManageVO);
	}
	/**
	 * 등록된 포상관리의 상세정보를 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return RwardManageVO - 포상관리 VO
	 */
	public RwardManageVO selectRwardManage(RwardManageVO rwardManageVO) throws Exception {
		RwardManageVO rwardManageVOTemp = rwardManageDAO.selectRwardManage(rwardManageVO);
		rwardManageVOTemp.setRwardDe(EgovDateUtil.formatDate(rwardManageVOTemp.getRwardDe(), "-"));		
		
	

	}
	/**
	 * 포상관리정보를 신규로 등록한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void insertRwardManage(RwardManage rwardManage) throws Exception {
		/*
		 * 포상 승인처리  신청 infrmlSanctnService.insertInfrmlSanctn("000", vcatnManage);
		 */
		rwardManage.setRwardDe(EgovStringUtil.removeMinusChar(rwardManage.getRwardDe()));
		rwardManage.setInfrmlSanctnId(infrmlSanctn.getInfrmlSanctnId());
		rwardManage.setConfmAt(infrmlSanctn.getConfmAt());
		String	sRwardId = idgenRwardManageService.getNextStringId();
		rwardManage.setRwardId(sRwardId);
		
		rwardManageDAO.insertRwardManage(rwardManage);
	}
	/**
	 * 기 등록된 포상관리정보를 수정한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void updtRwardManage(RwardManage rwardManage) throws Exception {
		rwardManage.setRwardDe(EgovStringUtil.removeMinusChar(rwardManage.getRwardDe()));
		rwardManageDAO.updtRwardManage(rwardManage);
	}
	/**
	 * 기 등록된 포상관리정보를 삭제한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void deleteRwardManage(RwardManage rwardManage) thro

		/*
		 * 포상 승인처리  삭제 infrmlSanctnService.deleteInfrmlSanctn("000", vcatnManage);
		 */
		rwardManage.setRwardDe(EgovStringUtil.removeMinusChar(rwardManage.getRwardDe()));
		rwardManageDAO.deleteRwardManage(rwardManage);
	}
	/**
	 * 포상관리정보 승인 처리를 위해 신청된 포상관리 목록을 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return List - 포상관리 목록
	 */
	public List<RwardManageVO> selectRwardManageConfmList(RwardManageVO rwardManageVO) throws Exception{
		rwardManageVO.setSearchFromDate(EgovStringUtil.removeMinusChar(rwardManageVO.getSearchFromDate()));
		rwardManageVO.setSearchToDate(EgovStringUtil.removeMinusChar(rwardManageVO.getSearchToDate()));
		List<RwardManageVO> result = rwardManageDAO.selectRwardManageConfmList(rwardManageVO);
		int num = result.size();
	    for (int i = 0 ; i < num ; i ++ ){
	    	RwardManageVO rwardManageVO1 = result.get(i);
	    	rwardManageVO1.setRwardDe(EgovDateUtil.formatDate(rwardManageVO1.getRwardDe(), "-"));
	    	result.set(i, rwardManageVO1);
	    }	
		return result;

	}
	/**
	 * 포상승인목록 총 갯수를 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return int - 포상관리 카운트 수
	 */
	public int selectRwardManageConfmListTotCnt(RwardManageVO rwardManageVO) throws Exception {
		return rwardManageDAO.selectRwardManageConfmListTotCnt(rwardManageVO);
	}
	/**
	 * 포상정보를 승인/반려처리 한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void updtRwardManageConfm(RwardManage rwardManage) throws Exception {
		 InfrmlSanctn infrmlSanctn = new InfrmlSanctn();
		 rwardManage.setRwardDe(EgovStringUtil.removeMinusChar(rwardManage.getRwardDe()));
		 if(rwardManage.getConfmAt().equals("C")){
			/*
			 * 승인처리
			 */
		 }else if(rwardManage.getConfmAt().equals("R")){
			/*
			 * 반려처리
			 */
		 }
		 rwardManage.setSanctnDt(infrmlSanctn.getSanctnDt());
		 rwardManage.setConfmAt(infrmlSanctn.getConfmAt());
		 rwardManageDAO.updtRwardManageConfm(rwardManage);
	}
	/**
	 * RwardManage model을 InfrmlSanctn model로 변환한다.
	 * @param RwardManage
	 * @return InfrmlSanctn
	 * @param rwardManage
	 */
	pr
/**
 * Broadcaster is a bundle of handlers. On
 * {@link Broadcaster#handle(dem.quanta.Event)}
 * it passes an {@link dem.quanta.Event} to every contained handler.
 *
 * @author Devgru &lt;java@devg.ru&gt;
 * @since 0.17
 */
public final class Broadcaster<E extends Event>
        implements HandlingBundle<E, Handler<? super E>> {
    private final Set<Handler<? super E>> handlers =
            new LinkedHashSet<Handler<? super E>>();
    public Broadcaster(Handler<? super E>... handlers) {
        for (Handler<? super E> handler : handlers) {
            addHandler(handler);
        }
    }
    public Broadcaster(Collection<? extends Handler<? super E>> handlers) {
        for (Handler<? super E> handler : handlers) {
            addHandler(handler);
        }
    }
    public void handle(E event) {
        assert event != null;
        for (Handler<? super E> handler : handlers) {
            handler.handle(event);
        }
    }
    public boolean addHandler(Handler<? super E> handl
/**
 * 그룹관리에 관한 서비스 인터페이스 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성 
 *
 * </pre>
 */
public interface EgovGroupManageService {
	/**
	 * 검색조건에 따른 그룹정보를 조회
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO selectGroup(GroupManageVO groupManageVO) throws Exception;
	/**
	 * 시스템사용 목적별 그룹 목록 조회
	 * @param groupManageVO GroupManageVO
	 * @return List<GroupManageVO>
	 * @exception Exception
	 */
	public List<GroupManageVO> selectGroupList(GroupManageVO groupManageVO) throws Exception;
	/**
	 * 그룹 기본정보를 화면에서 입력하여 항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param groupManage GroupManage
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Excepti
/**
 * 责任链模式
 * 报销流程,项目经理<部门经理<总经理
 * 其中项目经理报销额度不能大于500,则部门经理的报销额度是不大于1000,超过1000则需要总经理审核
 * 
 */
public class GeneralHandler extends ConsumeHandler {
    @Override
    public void doHandler(String user, double free) {
        if (free >= 1000) {
            if (user.equals("lwxzy")) {
                System.out.println("给予报销:" + free);
            } else {
                System.out.println("报销不通过");
            }
        } else {
            if (getNextHandler() != null) {
                getNextHandler().doHandler(user, free);
            }
        }
    }
    public static void main(String[] args) {
        ProjectHandler projectHandler = new ProjectHandler();
        DeptHandler deptHandler = new DeptHandler();
        GeneralHandler generalHandler = new GeneralHandler();
        projectHandler.setNextHandler(deptHandler);
        deptHandler.setNextHandler(generalHandler);
        projectHandler.doHandler("lwx", 450);
        projectHandler.doHandler("lwx", 600);
        projectH
public class Run {
	public static void main(String[] args) {
		
		/*
		ProcessService ps = new ProcessService("localhost");
		Map<String, Process> allProcess = ps.getAllProcess();
		
		Map<String, Process> svchosts = ps.getAllProcessWithName("svchost.exe");
		
		for (Process process : svchosts.values()) {
			System.out.printf("[%5s] [%10s] %-26s:\t%s\n", process.getProcessId(), process.getWorkingSetSize(), process.getName(), process.getExecutablePath());
		}
		for (Process process : allProcess.values()) {
			System.out.printf("[%5s] [%10s] %-26s:\t%s\n", process.getProcessId(), process.getWorkingSetSize(), process.getName(), process.getExecutablePath());
		}
		
		*/
		
		Thread t = new Thread(new Runnable() {
			
			ProcessService ps = new ProcessService("localhost");
			Process p;
			
			@Override
			public void run() {
				
				
				while (true) {
					int memory = 0;
					
					try {
						Map<String, Process> processes = ps.getAllProcessWithName("javaw.exe");
						
						for (Proc

							System.out.printf("[%5s] [%20s] -> %-26s:\t%s\n", process.getProcessId(), Integer.parseInt(process.getWorkingSetSize()) / 1024, process.getName(), process.getExecutablePath());
							memory += Integer.parseInt(process.getWorkingSetSize());
						}
						
						System.out.println(" --->> memory: " + memory / 1024.0 + " K");
						
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
		});
		
		t.start();
		
		/*
		 * "Eğitim, ögrendiklerinizi unuttuğunuzda geriye kalan izlerdir.
		 * Iyi eğitim derin izler bırakır. Ve kritik durumlarda, öğrendiklerinizin sizde bıraktığı 
		 * izler yardımıyla yeni bilgiler üretir, yeni kararlar alabilirsiniz. 
		 * Ĕğitim bilmediğiniz durumlarla karşılaştığınızda soğukkanlılığınızı koruyabilmenize yarar."
		 * 
		 */
		
		/*
		
		Thread t = new Thread(new Runnable() {
			ProcessService ps = new ProcessService("localhost");
			Process p;
			@Override
			public void run() {
				while (tru
/**
 * 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Repository("roleManageDAO")
public class RoleManageDAO extends EgovAbstractDAO {
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception {
		return (RoleManageVO) selectByPk("roleManageDAO.selectRole", roleManageVO);
	}
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception {
		return list("roleManageDAO.selectRoleList", roleManageVO);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의

	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void insertRole(RoleManage roleManage) throws Exception {
		insert("roleManageDAO.insertRole", roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void updateRole(RoleManage roleManage) throws Exception {
		update("roleManageDAO.updateRole", roleManage);
	}
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception {
		delete("roleManageDAO.deleteRole", roleManage);
	}
    /**
	 * 롤목록 총 갯수를 조회한다.
	 * @param roleManageVO RoleManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectRoleListTotCnt(RoleManageVO roleManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("roleManageDAO.selectAuthorListTotCnt", roleManageVO);
    }	
    
	/**
	 * 등록된 모든 롤 정보 목록 조회
	 * @param
/**
 * User: littlehui Date: 14-12-1 Time: 上午10:10
 */
@Service
public class ServiceDetailService {
	@Autowired
	@Qualifier("serviceDetailDAOImpl")
	ServiceDetailDAO serviceDetailDAO;
	@Autowired
	ServiceBaseService serviceBaseService;
    @Autowired
    ServiceDetailClassifyService serviceDetailClassifyService;
	public void transInsertServiceDetail(ServiceDetail serviceDetail) {
		ServiceBaseVo serviceBaseVo = serviceDetail.getServiceBaseVo();
		serviceBaseVo.setStatus(ServiceTagConstants.SERVICE_BASE_STATUS_UNPUBLISH);
        serviceDetail = serviceDetailClassifyService.produceServiceDetailForInsertTeleText(serviceDetail, serviceBaseVo.getServiceType());
        serviceDetail = serviceDetailClassifyService.reproduceServiceDetailForAgenda(serviceDetail, serviceBaseVo.getServiceType());
        serviceDetail =  serviceDetailClassifyService.reproduceServiceDetailForTask(serviceDetail, serviceBaseVo.getServiceType());
        serviceDetail =  serviceDetailClassifyService.reproduceServic

		serviceDetailDAO.insertServiceDetail(serviceDetail);
	}
	public void transUpdateServiceDetail(ServiceDetail serviceDetail) {
		ServiceBase serviceBase = ObjectUtil.convertObj(serviceDetail.getServiceBaseVo(), ServiceBase.class);
		if (serviceBase.getId() == null) {
			throw new RuntimeException("serviceBaseId 为空");
		}
        serviceDetail =  serviceDetailClassifyService.reproduceServiceDetailForAgenda(serviceDetail, serviceBase.getServiceType());
        serviceDetail = serviceDetailClassifyService.reproduceServiceDetailForTask(serviceDetail, serviceBase.getServiceType());
        serviceDetail =  serviceDetailClassifyService.reproduceServiceDetailForReward(serviceDetail, serviceBase.getServiceType());
        serviceDetail = serviceDetailClassifyService.reproduceServiceDetailForTeleText(serviceDetail, serviceBase.getServiceType());
		serviceDetailDAO.updateServiceDetail(serviceDetail);
	}
	public ServiceDetail getServiceDetail(Integer serviceBaseId) {
		ServiceBase serviceBase = 
public class ProcessUserTest 
	@Rule
	public TestName testName = new TestName();
	@Before
	public void before()
	{
		System.out.println("Running test: " + this.getClass().toString() + "::" + testName.getMethodName());
	}
	@After
	public void after()
	{
		System.out.println("Finished test.\n");
	}
	@Test
	public void testInsert()
	{
		ProcessUser process = new ProcessUser();
		assertFalse("User was inserted", process.insert(null));
	}
	@Test
	public void testDelete()
	{
		ProcessUser process = new ProcessUser();
		assertFalse("User was deleted", process.delete(null));
	}
	@Test
	public void testUpdate()
	{
		ProcessUser process = new ProcessUser();
		assertFalse("User was updated", process.update(null));
	}
	@Test
	public void testValidate()
	{
		ProcessUser process = new ProcessUser();
		assertFalse("Username/ password invalid", process.validateUser(null, null));
	}
	@Test
	public void testValidate2()
	{
		ProcessUser process = new ProcessUser();
		assertFalse("Username/ password inval
/**
 * 개요
 * - 행사관리에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - 행사관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 행사관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Repository("eventManageDAO")
public class EventManageDAO extends EgovComAbstractDAO {
	/**
	 * 행사관리정보를 관리하기 위해 등록된 행사관리 목록을 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<EventManageVO> selectEventManageList(EventManageVO eventManageVO) throws Exception {
		return (List<EventManageVO>) list("eventManageDAO.selectEventManageList", eventManageVO);
	}
    /**
	 * 행사관리목록 총 갯수를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectEventManageListTotCnt(EventManageVO eventManageVO) throws Exception {
        return (Integer)select("eventManageDAO.selectEventManageListTotCnt", eventManageVO);
    }
	/**
	 * 등록된 행사관리의 상세정보를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @retur

	 */
	public EventManageVO selectEventManage(EventManageVO eventManageVO)  throws Exception {
		return (EventManageVO) select("eventManageDAO.selectEventManage", eventManageVO);
	}
	/**
	 * 행사관리정보를 신규로 등록한다.
	 * @param eventManage - 행사관리 model
	 */
	public void insertEventManage(EventManage eventManage) throws Exception {
		insert("eventManageDAO.insertEventManage", eventManage);
	}
	/**
	 * 기 등록된 행사관리정보를 수정한다.
	 * @param eventManage - 행사관리 model
	 */
	public void updtEventManage(EventManage eventManage) throws Exception {
		update("eventManageDAO.updateEventManage", eventManage);
	}
	/**
	 * 기 등록된 행사관리정보를 삭제한다.
	 * @param eventManage - 행사관리 model
	 */
	public void deleteEventManage(EventManage eventManage) throws Exception {
        delete("eventManageDAO.deleteEventManage",eventManage);
	}
	/** 행사접수관리 ***/
	/**
	 * 행사접수정보를 관리하기 위해 등록된 행사관리 목록을 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<EventManageVO> selectEv

		return (List<EventManageVO>) list("eventManageDAO.selectEventAtdrnList", eventManageVO);
	}
    /**
	 * 행사접수관리목록 총 갯수를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectEventAtdrnListTotCnt(EventManageVO eventManageVO) throws Exception {
        return (Integer)select("eventManageDAO.selectEventAtdrnListTotCnt", eventManageVO);
    }
	/**
	 * 행사접수승인/반려 처리를 위해 등록된 행사접수 목록을 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<EventManageVO> selectEventRceptConfmList(EventManageVO eventManageVO) throws Exception {
		return (List<EventManageVO>) list("eventManageDAO.selectEventRceptConfmList", eventManageVO);
	}
    /**
	 * 행사접수승인/반려 처리를 위해 등록된 행사접수 목록 총 갯수를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectEventRceptConfmListTotCnt(EventManageVO eventManageVO) throws Exception {
        return (Integer)selec

    }
	/**
	 * 행사일자, 행사구분 조건에 따른 행사명 목록을 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<EventManageVO> selectEventNmList(EventManageVO eventManageVO) throws Exception {
		return (List<EventManageVO>) list("eventManageDAO.selectEventNmList", eventManageVO);
	}
    
	/**
	 * 등록된 행사접수관리의 상세정보를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return EventManageVO - 행사관리 VO
	 */
	public EventManageVO selectEventAtdrn(EventManageVO eventManageVO)  throws Exception {
		return (EventManageVO) select("eventManageDAO.selectEventAtdrn", eventManageVO);
	}
	/**
	 * 행사접수관리정보를 신규로 등록한다.
	 * @param eventManage - 행사관리 model
	 */
	public void insertEventAtdrn(EventAtdrn eventAtdrn) throws Exception {
		insert("eventManageDAO.insertEventAtdrn", eventAtdrn);
	}
	/**
	 * 기 등록된 행사접수관리정보를 삭제한다.
	 * @param eventManage - 행사관리 model
	 */
	public void deleteEventAtdrn(EventAtdrn eventAtdrn) throws Exception {
        delete("eventManageDAO.del
/* Generated by Protogen
 *
 *
 *
*/
@Component
public class SafeseedDaoService {
	private SiteContentService siteContentService;
	public SiteContentService getSiteContentService() {
		return siteContentService;
	}
	@Autowired 
	public void setSiteContentService(SiteContentService siteContentService) {
		this.siteContentService = siteContentService;
	}
	/*************searchStatusService*****************/
	private SearchStatusService searchStatusService;
	public SearchStatusService getSearchStatusService() {
		return searchStatusService;
	}
    @Autowired 
	public void setSearchStatusService(SearchStatusService searchStatusService) {
		this.searchStatusService = searchStatusService;
	}
	/*********** searchResultSerivce ****************/
	private SearchResultService searchResultService;
    public SearchResultService getSearchResultService() {
		return searchResultService;
	}
    @Autowired 
	public void setSearchResultService(SearchResultService searchResultService) {
		this.searchResul

	}
	/*********** personService ****************/
    private PersonService personService; 
    public PersonService getPersonService()
    {
        return personService;
    }
    @Autowired 
    public void setPersonService(PersonService personService)
    {
        this.personService = personService;
    }
    /*********** seqService ****************/
    private SeqService seqService; 
    public SeqService getSeqService()
    {
        return seqService;
    }
    @Autowired 
    public void setSeqService(SeqService seqService)
    {
        this.seqService = seqService;
    }
    /*********** fragService ****************/
    private FragService fragService; 
    public FragService getFragService()
    {
        return fragService;
    }
    @Autowired 
    public void setFragService(FragService fragService)
    {
        this.fragService = fragService;
    }
    /*********** systemSettingService ****************/
    private SystemSettingService systemSettingService; 
    publi

    {
        return systemSettingService;
    }
    @Autowired 
    public void setSystemSettingService(SystemSettingService systemSettingService)
    {
        this.systemSettingService = systemSettingService;
    }
    /*********** globalHistoryService ****************/
    private GlobalHistoryService globalHistoryService; 
    public GlobalHistoryService getGlobalHistoryService()
    {
        return globalHistoryService;
    }
    @Autowired 
    public void setGlobalHistoryService(GlobalHistoryService globalHistoryService)
    {
        this.globalHistoryService = globalHistoryService;
    }
    /*********** auditService ****************/
    private AuditService auditService; 
    public AuditService getAuditService()
    {
        return auditService;
    }
    @Autowired 
    public void setAuditService(AuditService auditService)
    {
        this.auditService = auditService;
    }
    /*********** groupService ****************/
    private GroupService groupService; 
    p

    {
        return groupService;
    }
    @Autowired 
    public void setGroupService(GroupService groupService)
    {
        this.groupService = groupService;
    }
    /*********** groupSeqService ****************/
    private GroupSeqService groupSeqService; 
    public GroupSeqService getGroupSeqService()
    {
        return groupSeqService;
    }
    @Autowired 
    public void setGroupSeqService(GroupSeqService groupSeqService)
    {
        this.groupSeqService = groupSeqService;
    }
    /*********** personGroupService ****************/
    private PersonGroupService personGroupService; 
    public PersonGroupService getPersonGroupService()
    {
        return personGroupService;
    }
    @Autowired 
    public void setPersonGroupService(PersonGroupService personGroupService)
    {
        this.personGroupService = personGroupService;
    }
    /*********** queueService ****************/
    private QueueService queueService; 
    public QueueService getQueueService()


        return queueService;
    }
    @Autowired 
    public void setQueueService(QueueService queueService)
    {
        this.queueService = queueService;
    }
    /*********** seqFragService ****************/
    private SeqFragService seqFragService; 
    public SeqFragService getSeqFragService()
    {
        return seqFragService;
    }
    @Autowired 
    public void setSeqFragService(SeqFragService seqFragService)
    {
        this.seqFragService = seqFragService;
    }
    /*********** submissionService ****************/
    private SubmissionService submissionService; 
    public SubmissionService getSubmissionService()
    {
        return submissionService;
    }
    @Autowired 
    public void setSubmissionService(SubmissionService submissionService)
    {
        this.submissionService = submissionService;
    }
    /*********** globalSeqService ****************/
    private GlobalSeqService globalSeqService; 
    public GlobalSeqService getGlobalSeqService()
    {
  

    }
    @Autowired 
    public void setGlobalSeqService(GlobalSeqService globalSeqService)
    {
        this.globalSeqService = globalSeqService;
    }
    /*********** globalSeqFragService ****************/
    private GlobalSeqFragService globalSeqFragService; 
    public GlobalSeqFragService getGlobalSeqFragService()
    {
        return globalSeqFragService;
    }
    @Autowired 
    public void setGlobalSeqFragService(GlobalSeqFragService globalSeqFragService)
    {
        this.globalSeqFragService = globalSeqFragService;
    }
    /*********** seqRelationshipService ****************/
    private SeqRelationshipService seqRelationshipService; 
    public SeqRelationshipService getSeqRelationshipService()
    {
        return seqRelationshipService;
    }
    @Autowired 
    public void setSeqRelationshipService(SeqRelationshipService seqRelationshipService)
    {
        this.seqRelationshipService = seqRelationshipService;
    }
    /*********** collectionService ***********

    private CollectionService collectionService; 
    public CollectionService getCollectionService()
    {
        return collectionService;
    }
    @Autowired 
    public void setCollectionService(CollectionService collectionService)
    {
        this.collectionService = collectionService;
    }
    /*********** globalCollectionService ****************/
    private GlobalCollectionService globalCollectionService; 
    public GlobalCollectionService getGlobalCollectionService()
    {
        return globalCollectionService;
    }
    @Autowired 
    public void setGlobalCollectionService(GlobalCollectionService globalCollectionService)
    {
        this.globalCollectionService = globalCollectionService;
    }
    /*********** historyService ****************/
    private HistoryService historyService; 
    public HistoryService getHistoryService()
    {
        return historyService;
    }
    @Autowired 
    public void setHistoryService(HistoryService historyService)
    {
      
/**
 *
 * All rights reserved. Licensed under the OSI BSD License.
 *
 */
/**
 * Convenience tuple for returning the results of a RequestHandler / path prefix
 * lookup.
 */
public class RequestHandlerMapping {
	private final String path;
	private final RequestHandler handler;
	private final RequestHandlerFactory factory;
	public RequestHandlerMapping(final String path_,
			final RequestHandler handler_) {
		path = path_;
		handler = handler_;
		factory = null;
	}
	public RequestHandlerMapping(final String path_,
			final RequestHandlerFactory factory_) {
		path = path_;
		handler = null;
		factory = factory_;
	}
	public String path() {
		return path;
	}
	public RequestHandler handler(final ServerRequest request) {
		if (handler != null) {
			return handler;
		}
		return factory.newHandler(request);
	}
	public static RequestHandlerMapping create(final String path_,
			final Object handler_) {
		if (handler_ instanceof RequestHandler) {
			return new RequestHandlerMapping(path_, (Reques
public class SOAPKeepSessionHandlerSettor {
	private static Logger log = Logger.getLogger(SOAPKeepSessionHandlerSettor.class);
	private ThreadLocal<SOAPKeepSessionHandler> keepSessionHandler = new ThreadLocal<SOAPKeepSessionHandler>();
	private static SOAPKeepSessionHandlerSettor instance;
	private SOAPKeepSessionHandlerSettor() {}
	public static SOAPKeepSessionHandlerSettor getInstance() {
		
		if (instance == null) {
			instance = new SOAPKeepSessionHandlerSettor();
		}
		
		return instance;
	}
	public void addHandler(BindingProvider proxy) {
		
		if (proxy == null) {
			return;
		}
		SOAPKeepSessionHandler handler = keepSessionHandler.get();
		
		if (handler == null) {
			handler = new SOAPKeepSessionHandler();
			keepSessionHandler.set(handler);
		}
		Binding binding = ((BindingProvider) proxy).getBinding();
			handlerList.add(handler);
			binding.setHandlerChain(handlerList);
		}
	}
	public void removeHandler(BindingProvider proxy) {
		
		SOAPKeepSessionHandler handler = keepSessi
/**
 * 권한관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성 
 *
 * </pre>
 */
@Service("egovAuthorManageService")
public class EgovAuthorManageServiceImpl extends EgovAbstractServiceImpl implements EgovAuthorManageService {
    
	@Resource(name="authorManageDAO")
    private AuthorManageDAO authorManageDAO;
    /**
	 * 권한 목록을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return List<AuthorManageVO>
	 * @exception Exception
	 */
    public List<AuthorManageVO> selectAuthorList(AuthorManageVO authorManageVO) throws Exception {
        return authorManageDAO.selectAuthorList(authorManageVO);
    }
    
	/**
	 * 권한을 등록한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void i

    	authorManageDAO.insertAuthor(authorManage);
    }
    /**
	 * 권한을 수정한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void updateAuthor(AuthorManage authorManage) throws Exception {
    	authorManageDAO.updateAuthor(authorManage);
    }
    /**
	 * 권한을 삭제한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void deleteAuthor(AuthorManage authorManage) throws Exception {
    	authorManageDAO.deleteAuthor(authorManage);
    }
    /**
	 * 권한을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return AuthorManageVO
	 * @exception Exception
	 */
    public AuthorManageVO selectAuthor(AuthorManageVO authorManageVO) throws Exception {
    	AuthorManageVO resultVO = authorManageDAO.selectAuthor(authorManageVO);
        if (resultVO == null)
            throw processException("info.nodata.msg");
        return resultVO;
    }
    /**
	 * 권한 목록 카운트를 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return int
	 * @exception Exc
/**
 * @author Bonux
 */
public class ItemHandler extends AbstractHolder
	private static final Logger _log = LoggerFactory.getLogger(ItemHandler.class);
	public static final IItemHandler DEFAULT_HANDLER = new DefaultItemHandler();
	public static final IItemHandler EQUIPABLE_HANDLER = new EquipableItemHandler();
	public static final IItemHandler ENCHANT_SCROLL_HANDLER = new EnchantScrollItemHandler();
	public static final IItemHandler APPEARANCE_STONE_HANDLER = new AppearanceStoneHandler();
	public static final IItemHandler ATTRIBUTE_STONE_HANDLER = new AttributeStoneItemHandler();
	public static final IItemHandler SOULSHOT_HANDLER = new SoulShotItemHandler();
	public static final IItemHandler SPIRITSHOT_HANDLER = new SpiritShotItemHandler();
	public static final IItemHandler BLESSED_SPIRITSHOT_HANDLER = new BlessedSpiritShotItemHandler();
	public static final IItemHandler SKILL_ITEM_HANDLER = new SkillsItemHandler();
	public static final IItemHandler SKILL_REDUCE_ITEM_HANDLER = new Ski

	public static final IItemHandler CAPSULED_ITEM_HANDLER = new CapsuledItemHandler();
	public static final IItemHandler PET_SUMMON_HANDLER = new PetSummonItemHandler();
	public static final IItemHandler RECIPE_HANDLER = new RecipeItemHandler();
	public static final IItemHandler FORGOTTEN_SCROLL_HANDLER = new ForgottenScrollItemHandler();
	public static final IItemHandler SEED_HANDLER = new SeedItemHandler();
	public static final IItemHandler SOUL_CRYSTALL_HANDLER = new SoulCrystalItemHandler();
	public static final IItemHandler MERCENARY_TICKET_HANDLER = new MercenaryTicketItemHandler();
	private static final ItemHandler _instance = new ItemHandler();
	private final Map<String, IItemHandler> _handlers = new HashMap<String, IItemHandler>();
	public static ItemHandler getInstance()
	{
		return _instance;
	}
	private ItemHandler()
	{
		registerItemHandler(DEFAULT_HANDLER);
		registerItemHandler(ENCHANT_SCROLL_HANDLER);
		registerItemHandler(EQUIPABLE_HANDLER);
		registerItemHandler(APPEAR

		registerItemHandler(ATTRIBUTE_STONE_HANDLER);
		registerItemHandler(SOULSHOT_HANDLER);
		registerItemHandler(SPIRITSHOT_HANDLER);
		registerItemHandler(BLESSED_SPIRITSHOT_HANDLER);
		registerItemHandler(SKILL_ITEM_HANDLER);
		registerItemHandler(SKILL_REDUCE_ITEM_HANDLER);
		registerItemHandler(CAPSULED_ITEM_HANDLER);
		registerItemHandler(PET_SUMMON_HANDLER);
		registerItemHandler(RECIPE_HANDLER);
		registerItemHandler(FORGOTTEN_SCROLL_HANDLER);
		registerItemHandler(SEED_HANDLER);
		registerItemHandler(SOUL_CRYSTALL_HANDLER);
		registerItemHandler(MERCENARY_TICKET_HANDLER);
		registerItemHandler(new CalculatorItemHandler());
		registerItemHandler(new HarvesterItemHandler());
		registerItemHandler(new KeyItemHandler());
		registerItemHandler(new NameColorItemHandler());
		registerItemHandler(new RollingDiceItemHandler());
		registerItemHandler(new WorldMapItemHandler());
	}
	public void registerItemHandler(IItemHandler handler)
	{
		_handlers.put(handler.getClass().getSimpleName().
/**
 * DOCUMENT ME!.
 *
 * @author Welson
 */
@Controller
@Scope("request")
@ManagedBean(name = "processView")
public class ProcessView extends CrudView {
	/** A constante serialVersionUID. */
	private static final long serialVersionUID = 3004186622742064923L;
	/** process service. */
	@Autowired
	private ProcessService processService;
	/** process. */
	private Process process;
	/** list process. */
	private List<Process> listProcess;
	/**
	 * Search process.
	 */
	public void searchProcess() {
		setListProcess(processService.findByFilter(new Process()));
	}
	/* (non-Javadoc)
	 * @see br.com.teste.jsdm.view.CrudView#newItem()
	 */
	@Override
	protected void newItem() {
		erase();
	}
	/* (non-Javadoc)
	 * @see br.com.teste.jsdm.view.CrudView#editItem()
	 */
	@Override
	protected void editItem() {
		System.out.println("edit");
	}
	/**
	 * Save process.
	 */
	public void saveProcess() {
		processService.save(getProcess());
		addInfoMessage("Cadastro com sucesso");
		
		setProcess(null);
	
/**
 * Created by a.vescera on 08/12/2016.
 * This regroups all the databaseHandlers initialization, to only refer to this same class.
 */
public class InitDataBaseHandlers {
    private final DatabaseMoneyHandler dbMoneyHandler;
    private final DatabaseObjectHandler dbObjectHandler;
    private final DatabaseContactHandler dbContactHandler;
    private final DatabaseCategoryHandler dbCategoryHandler;
    private final DatabaseTypeHandler dbTypeHandler;
    private final DatabaseReminderHandler dbReminderHandler;
    public InitDataBaseHandlers(Context context) {
        dbMoneyHandler = new DatabaseMoneyHandler(context);
        try {
            dbMoneyHandler.open();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        dbObjectHandler = new DatabaseObjectHandler(context);
        try {
            dbObjectHandler.open();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        dbCategoryHandler = new DatabaseCategoryHan

        try {
            dbCategoryHandler.open();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        dbTypeHandler = new DatabaseTypeHandler(context);
        try {
            dbTypeHandler.open();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        dbContactHandler = new DatabaseContactHandler(context);
        try {
            dbContactHandler.open();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        dbReminderHandler = new DatabaseReminderHandler(context);
        try {
            dbReminderHandler.open();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    public DatabaseMoneyHandler getDbMoneyHandler() {
        return dbMoneyHandler;
    }
    public DatabaseObjectHandler getDbObjectHandler() {
        return dbObjectHandler;
    }
    public DatabaseContactHandler getDbContactHandler() {
        return dbContactHandler;
    }
    publ
/*
 */
/**
 * Test : Implementation of ProcessControlService
 */
@RunWith(MockitoJUnitRunner.class)
public class ProcessControlServiceImplTest
    @InjectMocks
    private ProcessControlServiceImpl processControlService;
    @Mock
    private ProcessControlJpaRepository processControlJpaRepository;
    @Mock
    private ProcessControlServiceMapper processControlServiceMapper;
    private ProcessControlFactoryForTest processControlFactoryForTest = new ProcessControlFactoryForTest();
    private ProcessControlEntityFactoryForTest processControlEntityFactoryForTest = new ProcessControlEntityFactoryForTest();
    private MockValues mockValues = new MockValues();
    @Test
    public void findById()
    {
        Integer processId = mockValues.nextInteger();
        ProcessControlEntity processControlEntity = processControlJpaRepository.findOne(processId);
        ProcessControl processControl = processControlFactoryForTest.newProcessControl();
        when(processControlServiceMapper.mapPr

                processControl);
        ProcessControl processControlFound = processControlService.findById(processId);
        assertEquals(processControl.getProcessId(), processControlFound.getProcessId());
    }
    @Test
    public void findAll()
    {
        List<ProcessControlEntity> processControlEntitys = new ArrayList<ProcessControlEntity>();
        ProcessControlEntity processControlEntity1 = processControlEntityFactoryForTest.newProcessControlEntity();
        processControlEntitys.add(processControlEntity1);
        ProcessControlEntity processControlEntity2 = processControlEntityFactoryForTest.newProcessControlEntity();
        processControlEntitys.add(processControlEntity2);
        when(processControlJpaRepository.findAll()).thenReturn(processControlEntitys);
        ProcessControl processControl1 = processControlFactoryForTest.newProcessControl();
        when(processControlServiceMapper.mapProcessControlEntityToProcessControl(processControlEntity1)).thenReturn(
  

        ProcessControl processControl2 = processControlFactoryForTest.newProcessControl();
        when(processControlServiceMapper.mapProcessControlEntityToProcessControl(processControlEntity2)).thenReturn(
                processControl2);
        List<ProcessControl> processControlsFounds = processControlService.findAll();
        assertTrue(processControl1 == processControlsFounds.get(0));
        assertTrue(processControl2 == processControlsFounds.get(1));
    }
    @Test
    public void create()
    {
        ProcessControl processControl = processControlFactoryForTest.newProcessControl();
        ProcessControlEntity processControlEntity = processControlEntityFactoryForTest.newProcessControlEntity();
        when(processControlJpaRepository.findOne(processControl.getProcessId())).thenReturn(null);
        processControlEntity = new ProcessControlEntity();
        processControlServiceMapper.mapProcessControlToProcessControlEntity(processControl, processControlEntity);
        P

        ProcessControl processControlSaved = processControlFactoryForTest.newProcessControl();
        when(processControlServiceMapper.mapProcessControlEntityToProcessControl(processControlEntitySaved))
                .thenReturn(processControlSaved);
        ProcessControl processControlResult = processControlService.create(processControl);
        assertTrue(processControlResult == processControlSaved);
    }
    @Test
    public void createKOExists()
    {
        ProcessControl processControl = processControlFactoryForTest.newProcessControl();
        ProcessControlEntity processControlEntity = processControlEntityFactoryForTest.newProcessControlEntity();
        when(processControlJpaRepository.findOne(processControl.getProcessId())).thenReturn(processControlEntity);
        Exception exception = null;
        try
        {
            processControlService.create(processControl);
        }
        catch (Exception e)
        {
            exception = e;
        }
        asser

        assertEquals("already.exists", exception.getMessage());
    }
    @Test
    public void update()
    {
        ProcessControl processControl = processControlFactoryForTest.newProcessControl();
        ProcessControlEntity processControlEntity = processControlEntityFactoryForTest.newProcessControlEntity();
        when(processControlJpaRepository.findOne(processControl.getProcessId())).thenReturn(processControlEntity);
        ProcessControlEntity processControlEntitySaved = processControlEntityFactoryForTest.newProcessControlEntity();
        when(processControlJpaRepository.save(processControlEntity)).thenReturn(processControlEntitySaved);
        ProcessControl processControlSaved = processControlFactoryForTest.newProcessControl();
        when(processControlServiceMapper.mapProcessControlEntityToProcessControl(processControlEntitySaved))
                .thenReturn(processControlSaved);
        ProcessControl processControlResult = processControlService.update(processContro
/**
 * 调仓接口实现
 * 
 * @author Dong
 * 
 */
public class AdjustRepositoryServiceImpl extends BaseServiceImpl implements
		IAdjustRepositoryService {
	/**
	 * 
	 */
	AdjustRepositoryDao adjustRepositoryDao = new AdjustRepositoryDao();
	/*
	 * (non-Javadoc)
	 * 
	 * @see com.topsun.posclient.repository.service.IAdjustRepositoryService#
	 * saveAdjustRepositoryInfo
	 * (com.topsun.posclient.repository.dto.AdjustRepositoryDTO)
	 */
	public void saveAdjustRepositoryInfo(AdjustRepositoryDTO adjustRepositoryDTO)
			throws POSException {
		try {
			adjustRepositoryDao.saveAdjustRepository(adjustRepositoryDTO);
		} catch (Exception e) {
			e.printStackTrace();
			LoggerUtil.logError(RepositoryActivator.PLUGIN_ID, e);
			throw new POSException("调仓出错！");
		}
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see com.topsun.posclient.repository.service.IAdjustRepositoryService#
	 * queryAdjustShopList(com.topsun.posclient.datamodel.AdjustShopInfo)
	 */
	public List<AdjustRepositoryInfo> queryAdjustShopList(
			Adju
/*
 * Copyright 2009 Rafal Myslek 
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at
 * 
 *     
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License.     
 */
/**
 * The Class AbstractContentHandler.
 */
public abstract class AbstractContentHandler implements ContentHandler {
	/** The attributes handler. */
	private AttributesHandler attributesHandler;
	/** The envelope handler. */
	private EnvelopeHandler envelopeHandler;
	/**
	 * Instantiates a new abstract content handler.
	 */
	public AbstractContentHandler() {
		attributesHandler = new DefaultAttributesHandler();
		envelopeHandler =
/**
 * 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Repository("roleManageDAO")
public class RoleManageDAO extends EgovComAbstractDAO {
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception {
		return (RoleManageVO) selectByPk("roleManageDAO.selectRole", roleManageVO);
	}
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception {
		return (List<RoleManageVO>) list("roleManageDAO.selectRoleList", roleManageVO);
	}
	/**
	 * 시스템 메뉴에 

	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void insertRole(RoleManage roleManage) throws Exception {
		insert("roleManageDAO.insertRole", roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void updateRole(RoleManage roleManage) throws Exception {
		update("roleManageDAO.updateRole", roleManage);
	}
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception {
		delete("roleManageDAO.deleteRole", roleManage);
	}
    /**
	 * 롤목록 총 갯수를 조회한다.
	 * @param roleManageVO RoleManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectRoleListTotCnt(RoleManageVO roleManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("roleManageDAO.selectAuthorListTotCnt", roleManageVO);
    }	
    
	/**
	 * 등록된 모든 롤 정보 목록 조회
	 * @param
public class BaseController {
	protected AccuracyService accuracyService;
	protected AdminService adminService;
	protected AnswerService answerService;
	protected ClassesService classesService;
	protected DisscusionService disscusionService;
	protected LessonService lessonService;
	protected NewsService newsService;
	protected QuestionService questionService;
	protected ReplyService replyService;
	protected RereplyService rereplyService;
	protected ScoreService scoreService;
	protected StatusService statusService;
	protected StudentService studentService;
	protected TeacherService teacherService;
	protected JSONObject json = new JSONObject();
	protected String tip;
	public AccuracyService getAccuracyService() {
		return accuracyService;
	}
	@Resource(name="AccuracyService")
	public void setAccuracyService(AccuracyService accuracyService) {
		this.accuracyService = accuracyService;
	}
	public AdminService getAdminService() {
		return adminService;
	}
	@Resource(name="AdminService")
	pub

		this.adminService = adminService;
	}
	public AnswerService getAnswerService() {
		return answerService;
	}
	@Resource(name="AnswerService")
	public void setAnswerService(AnswerService answerService) {
		this.answerService = answerService;
	}
	public ClassesService getClassesService() {
		return classesService;
	}
	@Resource(name="ClassesService")
	public void setClassesService(ClassesService classesService) {
		this.classesService = classesService;
	}
	public DisscusionService getDisscusionService() {
		return disscusionService;
	}
	@Resource(name="DisscusionService")
	public void setDisscusionService(DisscusionService disscusionService) {
		this.disscusionService = disscusionService;
	}
	public LessonService getLessonService() {
		return lessonService;
	}
	@Resource(name="LessonService")
	public void setLessonService(LessonService lessonService) {
		this.lessonService = lessonService;
	}
	public NewsService getNewsService() {
		return newsService;
	}
	@Resource(name="NewsService")


		this.newsService = newsService;
	}
	public QuestionService getQuestionService() {
		return questionService;
	}
	@Resource(name="QuestionService")
	public void setQuestionService(QuestionService questionService) {
		this.questionService = questionService;
	}
	public ReplyService getReplyService() {
		return replyService;
	}
	@Resource(name="ReplyService")
	public void setReplyService(ReplyService replyService) {
		this.replyService = replyService;
	}
	public RereplyService getRereplyService() {
		return rereplyService;
	}
	@Resource(name="RereplyService")
	public void setRereplyService(RereplyService rereplyService) {
		this.rereplyService = rereplyService;
	}
	public ScoreService getScoreService() {
		return scoreService;
	}
	@Resource(name="ScoreService")
	public void setScoreService(ScoreService scoreService) {
		this.scoreService = scoreService;
	}
	public StatusService getStatusService() {
		return statusService;
	}
	@Resource(name="StatusService")
	public void setStatusService(
/**
 * @author Matt Stine
 */
@Service
public class MenuService {
    private final SizeRepository sizeRepository;
    private final CrustRepository crustRepository;
    private final SauceRepository sauceRepository;
    private final ToppingRepository toppingRepository;
    @Autowired
    public MenuService(SizeRepository sizeRepository, CrustRepository crustRepository, SauceRepository sauceRepository, ToppingRepository toppingRepository) {
        this.sizeRepository = sizeRepository;
        this.crustRepository = crustRepository;
        this.sauceRepository = sauceRepository;
        this.toppingRepository = toppingRepository;
    }
    public BasePizzaMenuOptions loadBasePizzaMenuOptions() {
        Iterable<Size> sizes = sizeRepository.findAll();
        Iterable<Crust> crusts = crustRepository.findAll();
        Iterable<Sauce> sauces = sauceRepository.findAll();
        return new BasePizzaMenuOptions(sizes, crusts, sauces);
    }
    public Pizza loadDefaultPizzaConfiguration
/*
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2013 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 * 
 *  
 */
@UnitTest
public class DefaultBusinessProcessServiceTest
	private String processName;
	private String processDefinitionName;
	private Map<String, Object> contextParameters;
	private BusinessProcessModel mockProcessModel;
	private ProcessFactory processFactory;
	private ProcessDefinition mockProcessDefinition;
	private ProcessDefinitionFactory processDefinitionFactory;
	private TransactionTemplate transactionTemplate;
	private ModelService modelService;
	/**
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception
	{
		processName = "testProcess1";
		processDefinitionName = "testProcess1D

		processFactory = createNiceMock(ProcessFactory.class);
		contextParameters = new HashMap<String, Object>();
		contextParameters.put("P1", Integer.valueOf(1));
		mockProcessModel = new BusinessProcessModel();
		mockProcessModel.setProcessDefinitionName(processDefinitionName);
		mockProcessDefinition = createNiceMock(ProcessDefinition.class);
		processDefinitionFactory = createNiceMock(ProcessDefinitionFactory.class);
		modelService = createNiceMock(ModelService.class);
		transactionTemplate = new TransactionTemplate()
		{
			@Override
			public <T extends Object> T execute(final TransactionCallback<T> action) throws TransactionException
			{
				return action.doInTransaction(null);
			}
		};
	}
	/**
	 * Test of correct use of startProcess
	 */
	@Test
	public void testStartProcess()
	{
		final ProcessDefinitionId processDefinitionId = new ProcessDefinitionId("mockDefinition", "mockVersion");
		expect(processFactory.createProcessModel(processName, processDefinitionName, contextParamete

				.andReturn(mockProcessModel);
		expect(processDefinitionFactory.getProcessDefinition(new ProcessDefinitionId(processDefinitionName))).andReturn(
				mockProcessDefinition);
		expect(mockProcessDefinition.getId()).andReturn(processDefinitionId);
		modelService.save(mockProcessModel);
		mockProcessDefinition.start(mockProcessModel);
		replay(processFactory, processDefinitionFactory, modelService, mockProcessDefinition);
		final DefaultBusinessProcessService defaultService = new DefaultBusinessProcessService()
		{
			@Override
			protected void validateContext(final BusinessProcessModel processModel, final ProcessDefinition processDefinition)
			{
				assertEquals("mockProcessModel not equals to processModel", mockProcessModel, processModel);
				assertEquals("mockProcessDefinition not equals to processDefinition", mockProcessDefinition, processDefinition);
			}
		};
		defaultService.setProcessFactory(processFactory);
		defaultService.setProcessDefinitionFactory(processDefinitionFact

		defaultService.setModelService(modelService);
		defaultService.setTransactionTemplate(transactionTemplate);
		defaultService.startProcess(processName, processDefinitionName, contextParameters);
		verify(processFactory, processDefinitionFactory, modelService);
		assertEquals("mockProcessModel.getState() not in RUNNING state", ProcessState.RUNNING, mockProcessModel.getState());
	}
	/**
	 * Test of correct use of startProcess
	 */
	@Test(expected = UnsatisfiedContextParameterException.class)
	public void testStartProcessValidationException()
	{
		expect(processFactory.createProcessModel(processName, processDefinitionName, contextParameters))
				.andReturn(mockProcessModel);
		expect(processDefinitionFactory.getProcessDefinition(new ProcessDefinitionId(processDefinitionName))).andReturn(
				mockProcessDefinition);
		replay(processFactory, processDefinitionFactory);
		final DefaultBusinessProcessService defaultService = new DefaultBusinessProcessService()
		{
			@Override
			protected 

			{
				assertEquals("mockProcessModel not equals to processModel", mockProcessModel, processModel);
				assertEquals("mockProcessDefinition not equals to processDefinition", mockProcessDefinition, processDefinition);
				throw new UnsatisfiedContextParameterException();
			}
		};
		defaultService.setProcessFactory(processFactory);
		defaultService.setProcessDefinitionFactory(processDefinitionFactory);
		defaultService.setModelService(modelService);
		defaultService.setTransactionTemplate(transactionTemplate);
		defaultService.startProcess(processName, processDefinitionName, contextParameters);
		verify(processFactory, processDefinitionFactory);
	}
	@Test
	public void testValidateContext()
	{
		processDefinitionName = "process1";
		expect(processFactory.createProcessModel(processName, processDefinitionName, contextParameters))
				.andReturn(mockProcessModel);
		expect(processDefinitionFactory.getProcessDefinition(new ProcessDefinitionId(processDefinitionName))).andReturn(
				mockPr
public class TituloServiceImpl implements TituloService {
    private TituloRepository tituloRepository;
    private UsuarioRepository usuarioRepository;
    public TituloServiceImpl() {}
    public TituloServiceImpl(TituloRepository tituloRepository) {
        this.tituloRepository = tituloRepository;
    }
    
    public List<Titulo> findAllByUsuario(String id) throws RepositoryException {
        Usuario usuario = getUsuarioRepository().get(id);
        return getTituloRepository().findAllByUsuario(usuario);
    }
    public double getTotalTitulosByUsuario(String id) throws RepositoryException {
         Usuario usuario = getUsuarioRepository().get(id);
        return getTituloRepository().getTotalTitulosByUsuario(usuario);
    }
    protected TituloRepository getTituloRepository() {
        if (tituloRepository == null) {
            tituloRepository = new TituloRepositoryHibernate();
        }
        return tituloRepository;
    }
    protected UsuarioRepository getUsuarioReposi
public class MainApplication extends Application {
	private DataBaseBackupService dataBaseBackupService;
	private UserService userService;
	private AccountBookService accountBookService;
	private CategoryService categoryService;
	private BillService billService;
	private StatisticsService statisticsService;
	@Override
	public void onCreate() {
		super.onCreate();
		initDB();
		initVariables();
	}
	private void initVariables() {
		dataBaseBackupService = new DataBaseBackupService(this);
		userService = new UserService();
		accountBookService = new AccountBookService();
		categoryService = new CategoryService();
		billService = new BillService();
		statisticsService = new StatisticsService(this, userService, billService);
	}
	private void initDB() {
		SQLiteHelper.setContext(this);
	}
	public DataBaseBackupService getDataBaseBackupService() {
		return dataBaseBackupService;
	}
	public UserService getUserService() {
		return userService;
	}
	public AccountBookService getAccountBookService
public class InitializationService {
	public static List<ProcessActivity> prepareProcessActivitiesFromActivities(List<Activity> activities) {
		if (Configuration.LOG) {
			System.out.println("Initializare processActivities...");
		}
		List<ProcessActivity> processActivities = new ArrayList<ProcessActivity>();
		for (Activity currentActivity : activities) {
			ProcessActivity processActivity = new ProcessActivity();
			processActivity.setActivity(currentActivity);
			processActivity.setWorking(true);
			processActivity.setRemainingHours(currentActivity.getContinuousOpenHours());
			processActivity.setPersonsAttending(null);
			processActivities.add(processActivity);
		}
		return processActivities;
	}
	public static List<ProcessPerson> prepareProcessPersonsFromPersons(List<Person> persons) {
		if (Configuration.LOG) {
			System.out.println("Initializare ProcessPerson...");
		}
		List<ProcessPerson> processPersons = new ArrayList<ProcessPerson>();
		for (Person currentPerson : persons) {

/**
 * 개요
 * - 행사관리에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - 행사관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 행사관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Repository("eventManageDAO")
public class EventManageDAO extends EgovComAbstractDAO {
	/**
	 * 행사관리정보를 관리하기 위해 등록된 행사관리 목록을 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<EventManageVO> selectEventManageList(EventManageVO eventManageVO) throws Exception {
		return list("eventManageDAO.selectEventManageList", eventManageVO);
	}
    /**
	 * 행사관리목록 총 갯수를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectEventManageListTotCnt(EventManageVO eventManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("eventManageDAO.selectEventManageListTotCnt", eventManageVO);
    }
	/**
	 * 등록된 행사관리의 상세정보를 조회한다.
	 * @param eventManageVO - 행사관리 V

	 * @return EventManageVO - 행사관리 VO
	 */
	public EventManageVO selectEventManage(EventManageVO eventManageVO)  throws Exception {
		return (EventManageVO) selectByPk("eventManageDAO.selectEventManage", eventManageVO);
	}
	/**
	 * 행사관리정보를 신규로 등록한다.
	 * @param eventManage - 행사관리 model
	 */
	public void insertEventManage(EventManage eventManage) throws Exception {
		insert("eventManageDAO.insertEventManage", eventManage);
	}
	/**
	 * 기 등록된 행사관리정보를 수정한다.
	 * @param eventManage - 행사관리 model
	 */
	public void updtEventManage(EventManage eventManage) throws Exception {
		update("eventManageDAO.updateEventManage", eventManage);
	}
	/**
	 * 기 등록된 행사관리정보를 삭제한다.
	 * @param eventManage - 행사관리 model
	 */
	public void deleteEventManage(EventManage eventManage) throws Exception {
        delete("eventManageDAO.deleteEventManage",eventManage);
	}
	/** 행사접수관리 ***/
	/**
	 * 행사접수정보를 관리하기 위해 등록된 행사관리 목록을 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사관리 목록
	 */
	@SuppressWarnings("unchecke

	public List<EventManageVO> selectEventAtdrnList(EventManageVO eventManageVO) throws Exception {
		return list("eventManageDAO.selectEventAtdrnList", eventManageVO);
	}
    /**
	 * 행사접수관리목록 총 갯수를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectEventAtdrnListTotCnt(EventManageVO eventManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("eventManageDAO.selectEventAtdrnListTotCnt", eventManageVO);
    }
	/**
	 * 행사접수승인/반려 처리를 위해 등록된 행사접수 목록을 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<EventManageVO> selectEventRceptConfmList(EventManageVO eventManageVO) throws Exception {
		return list("eventManageDAO.selectEventRceptConfmList", eventManageVO);
	}
    /**
	 * 행사접수승인/반려 처리를 위해 등록된 행사접수 목록 총 갯수를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectEventRceptConfmL

        return (Integer)getSqlMapClientTemplate().queryForObject("eeventManageDAO.selectEventRceptConfmListTotCnt", eventManageVO);
    }
	/**
	 * 행사일자, 행사구분 조건에 따른 행사명 목록을 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<EventManageVO> selectEventNmList(EventManageVO eventManageVO) throws Exception {
		return list("eventManageDAO.selectEventNmList", eventManageVO);
	}
    
	/**
	 * 등록된 행사접수관리의 상세정보를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return EventManageVO - 행사관리 VO
	 */
	public EventManageVO selectEventAtdrn(EventManageVO eventManageVO)  throws Exception {
		return (EventManageVO) selectByPk("eventManageDAO.selectEventAtdrn", eventManageVO);
	}
	/**
	 * 행사접수관리정보를 신규로 등록한다.
	 * @param eventManage - 행사관리 model
	 */
	public void insertEventAtdrn(EventAtdrn eventAtdrn) throws Exception {
		insert("eventManageDAO.insertEventAtdrn", eventAtdrn);
	}
	/**
	 * 기 등록된 행사접수관리정보를 삭제한다.
	 * @param eventManage - 행사관리 mod
/**
 * 招聘人员信息接口
 * @author taozhaoping 26078
 * @author mail taozhaoping@gmail.com
 */
public interface TechnologicalProcessService {
	/**
	 * 查询信息
	 * @param 
	 * @return
	 */
	public TechnologicalProcess query(TechnologicalProcess technologicalProcess);
	/**
	 * 修改
	 * @param 
	 */
	public void update(TechnologicalProcess technologicalProcess);
	/**
	 * 查询列表
	 * @param 
	 * @return
	 */
	public List<TechnologicalProcess> queryList(TechnologicalProcess technologicalProcess);
	/**
	 * 查询列表，带分页
	 * @param 
	 * @return
	 */
	public List<TechnologicalProcess> queryList(TechnologicalProcess technologicalProcess , Pager page);
	/**
	 * 查询数量
	 * @param 
	 * @return
	 */
	public Integer count(TechnologicalProcess technologicalProcess);
	/**
	 * 查询列表，带分页
	 * @param 
	 * @return
	 */
	public List<TechnologicalProcess> queryListByPermission(TechnologicalProcess technologicalProcess , Pager page);
	/**
	 * 查询数量
	 * @param 
	 * @return
	 */
	public Integer countByPermission(TechnologicalProcess te
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Александр
 */
@Repository
public class ProcessDAOImpl implements ProcessDAO {
    
    @Autowired
    private SessionFactory sessionFactory;
    
    
    
     @Override
     public void addProcess(SalesProcess process) {
        sessionFactory.getCurrentSession().save(process);
     }
    
    @Override
    public List<SalesProcess> getAllProcesses() {
      return sessionFactory.getCurrentSession().
                 createCriteria(SalesProcess.class).list();   
      }
    
    @Override
     public List<SalesProcess> listProcesses() {
        return sessionFactory.getCurrentSession().createQuery("from com.mycompany.CRMFly.entities.Processs")
            .list();
    }
     
     
       @Override
     public void removeProcess(SalesProcess process) {
        if (null != process) {
 

        }
     }
        
     @Override
     public void changeProcess (SalesProcess process) {
         sessionFactory.getCurrentSession().update(process);
     }
     
     
     @Override
     public SalesProcess getProcessForId (Long id) {
         return (SalesProcess) sessionFactory.getCurrentSession().
                 get(SalesProcess.class, id);
     }
     
      @Override
     public List<Payments> getProcessPayments (Long id) {
         org.hibernate.Session sess =  sessionFactory.getCurrentSession();
        sess.enableFetchProfile("process-with-payments");
         SalesProcess process = (SalesProcess) sess.
                 get(SalesProcess.class, id);
        return process.getPayments();
     }
     
     @Override
     public List<Shipments> getProcessShipments (Long id) {
         org.hibernate.Session sess =  sessionFactory.getCurrentSession();
        sess.enableFetchProfile("process-with-shipments");
         SalesProcess process = (SalesProcess) sess.
         

        return process.getShipments();
     }
     
     @Override
     public void addContractConnection (SalesProcess process, Contracts contract)
     {
         org.hibernate.Session sess =  sessionFactory.getCurrentSession();
        sess.enableFetchProfile("process-with-contract");
        contract.setProcess(process);
        sess.update(contract);
        process.setContract(contract);
        sess.update(process);
     }
     
     @Override
     public void addRequestConnection (SalesProcess process, Requests request)
     {
         org.hibernate.Session sess =  sessionFactory.getCurrentSession();
        sess.enableFetchProfile("process-with-request");
        request.setProcess(process);
        sess.update(request);
        process.setOffer(request);
        sess.update(process);
     }
     
     @Override
     public void addPaymentConnection (SalesProcess process, Payments payment)
     {
         org.hibernate.Session sess =  sessionFactory.getCurrentSession();
     

        payment.setContractOnPayment(process.getContract());
        sess.update(payment);
        sess.enableFetchProfile("process-with-payments");
        process=(SalesProcess) sess.
                 get(SalesProcess.class, process.getId());
        process.getPayments().add(payment);
        sess.update(process);
     }
     
     
     @Override
     public void addShipmentConnection (SalesProcess process, Shipments shipment)
     {
         org.hibernate.Session sess =  sessionFactory.getCurrentSession();
        sess.enableFetchProfile("process-with-contract");
        shipment.setContract(process.getContract());
        sess.update(shipment);
        sess.enableFetchProfile("process-with-shipments");
        process=(SalesProcess) sess.
                 get(SalesProcess.class, process.getId());
        process.getShipments().add(shipment);
        sess.update(process);
     }
     
     @Override
     public Requests getProcessRequest (Long id)
     {
         org.hibernate.Se
/**
 * 
 */
/**
 * @author timchiang
 *
 */
public class CostUnitDefaultFacade {
    /**組織單位的 Service*/
    private DepartmentService departmentService;
    /**行政費用申請單 Service*/
    private ExpapplCService expapplCService;
    /**費用項目 Service*/
    private ExpItemService expItemService;
    /**功能的 Service*/
    private FunctionService functionService;
    /**費用性質 Service*/
    private ExpTypeService expTypeService;
    /**費用中分類 Service*/
    private MiddleTypeService middleTypeService;
    /**
     * @param 費用項目 Service
     */
    public void setExpItemService(ExpItemService expItemService) {
        this.expItemService = expItemService;
    }
    /**
     * @return 費用項目 Service
     */
    public ExpItemService getExpItemService() {
        return expItemService;
    }
    /**
     * @param 功能的 Service
     */
    public void setFunctionService(FunctionService functionService) {
        this.functionService = functionService;
    }
    /**
     * @return 功能的 Service
     */
    publi

        return functionService;
    }
    /**
     * @param 組織單位的 Service
     */
    public void setDepartmentService(DepartmentService departmentService) {
        this.departmentService = departmentService;
    }
    /**
     * @return 組織單位的 Service
     */
    public DepartmentService getDepartmentService() {
        return departmentService;
    }
    /**
     * @param 行政費用申請單 Service
     */
    public void setExpapplCService(ExpapplCService expapplCService) {
        this.expapplCService = expapplCService;
    }
    /**
     * @return 行政費用申請單 Service
     */
    public ExpapplCService getExpapplCService() {
        return expapplCService;
    }
    /**
     * @param 費用性質 Service
     */
    public void setExpTypeService(ExpTypeService expTypeService) {
        this.expTypeService = expTypeService;
    }
    /**
     * @return 費用性質 Service
     */
    public ExpTypeService getExpTypeService() {
        return expTypeService;
    }
    /**
     * @param 費用中分類 Service
     */
    
/**
 * 롤관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성 
 *
 * </pre>
 */
@Service("egovRoleManageService")
public class EgovRoleManageServiceImpl extends EgovAbstractServiceImpl implements EgovRoleManageService {
	@Resource(name="roleManageDAO")
	public RoleManageDAO roleManageDAO;
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception {
		return roleManageDAO.selectRole(roleManageVO);
	}
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManag

		return roleManageDAO.selectRoleList(roleManageVO);
	}
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception {
		roleManageDAO.deleteRole(roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void updateRole(RoleManage roleManage) throws Exception {
		roleManageDAO.updateRole(roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 등록
	 * @param roleManage RoleManage
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO insertRole(RoleManage roleManage, RoleManageVO roleManageVO) throws Exception {
		roleManageDAO.insertRole(roleManage);	
		roleManageVO.setRoleCode(roleManage.getRoleCode());
		return roleManageDAO.selectRole(roleManageVO);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @param roleManageVO RoleManageVO
	 * @return int
	 * 
public class GarageServiceProvider {
	private static BillService billService = new BillService();
	private static CustomerService custService = new CustomerService();
	private static AppointmentService appService = new AppointmentService();
	private static EmployeeService empService = new EmployeeService();
	private static LetterService letService = new LetterService();
	private static ParkingBookingService parkService = new ParkingBookingService();
	private static CarService carService = new CarService();
	private static OrderService ordService = new OrderService();
	private static ArticleService artService = new ArticleService();
	private static FuelService fuelService = new FuelService();
	public static BillService getBillService() {
		return billService;
	}
	public static CustomerService getCustService() {
		return custService;
	}
	public static AppointmentService getAppService() {
		return appService;
	}
	public static EmployeeService getEmpService() {
		return empService;
	}
	pub
/**
 * 권한관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성
 *
 * </pre>
 */
@Repository("authorManageDAO")
public class AuthorManageDAO extends EgovAbstractDAO {
    /**
	 * 권한목록을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return List<AuthorManageVO>
	 * @exception Exception
	 */
    @SuppressWarnings("unchecked")
	public List<AuthorManageVO> selectAuthorList(AuthorManageVO authorManageVO) throws Exception {
        return (List<AuthorManageVO>) list("authorManageDAO.selectAuthorList", authorManageVO);
    }
	/**
	 * 권한을 등록한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void insertAuthor(AuthorManage authorManage) throws Exception {
        insert("authorManageDAO.insertAuth

    }
    /**
	 * 권한을 수정한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void updateAuthor(AuthorManage authorManage) throws Exception {
        update("authorManageDAO.updateAuthor", authorManage);
    }
    /**
	 * 권한을 삭제한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void deleteAuthor(AuthorManage authorManage) throws Exception {
        delete("authorManageDAO.deleteAuthor", authorManage);
    }
    /**
	 * 권한을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return AuthorManageVO
	 * @exception Exception
	 */
    public AuthorManageVO selectAuthor(AuthorManageVO authorManageVO) throws Exception {
        return (AuthorManageVO) select("authorManageDAO.selectAuthor", authorManageVO);
    }
    /**
	 * 권한목록 총 갯수를 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectAuthorListTotCnt(AuthorManageVO authorManageVO)  throws Exception {
        return (Integ
/*
 *
 * Licensed under the Aduna BSD-style license.
 */
/**
 * FIXME: do not extend NotifyingRepositoryWrapper, because SystemRepository
 * shouldn't expose RepositoryWrapper behaviour, just implement
 * NotifyingRepository.
 * 
 * @author Herko ter Horst
 * @author Arjohn Kampman
 */
public class SystemRepository extends NotifyingRepositoryWrapper {
	/*-----------*
	 * Constants *
	 *-----------*/
	private final Logger logger = LoggerFactory.getLogger(this.getClass());
	/**
	 * The repository identifier for the system repository that contains the
	 * configuration data.
	 */
	public static final String ID = "SYSTEM";
	public static final String TITLE = "System configuration repository";
	public static final String REPOSITORY_TYPE = "openrdf:SystemRepository";
	/*--------------*
	 * Constructors *
	 *--------------*/
	public SystemRepository(File systemDir) throws RepositoryException {
		super();
		super.setDelegate(new SailRepository(new MemoryStore(systemDir)));
	}
	/*---------*
	 *
/**
 * 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성 
 *
 * </pre>
 */
@Repository("roleManageDAO")
public class RoleManageDAO extends EgovAbstractDAO {
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception {
		return (RoleManageVO) selectByPk("roleManageDAO.selectRole", roleManageVO);
	}
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception {
		return list("roleManageDAO.selectRoleList", roleM

	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 등록
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void insertRole(RoleManage roleManage) throws Exception {
		insert("roleManageDAO.insertRole", roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void updateRole(RoleManage roleManage) throws Exception {
		update("roleManageDAO.updateRole", roleManage);
	}
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception {
		delete("roleManageDAO.deleteRole", roleManage);
	}
    /**
	 * 롤목록 총 갯수를 조회한다.
	 * @param roleManageVO RoleManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectRoleListTotCnt(RoleManageVO roleManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("roleManageDAO.selectAuthorListTotCnt", roleManage
public class UpdateService {
	public static void updateProcessActivityAtEndOfHour(List<ProcessActivity> processActivities) {
		if (Configuration.LOG) {
			System.out.println("Se actualizeaza activitatile la sfarsitul orei...");
		}
		for (ProcessActivity processActivity : processActivities) {
			if (processActivity.getRemainingHours() > 1) {
				processActivity.setRemainingHours(processActivity.getRemainingHours() - 1);
			} else {
				processActivity.setWorking(!processActivity.getWorking());
				processActivity.setRemainingHours(processActivity.getWorking() ? processActivity.getActivity().getContinuousOpenHours() : processActivity.getActivity().getMaintenanceHours());
			}
			processActivity.setPersonsAttending(new ArrayList<ProcessPerson>());
		}
	}
	public static void updateProcessPersonAtEndOfHour(List<ProcessPerson> processPersons) {
		if (Configuration.LOG) {
			System.out.println("Se actualizeaza persoanele la sfarsitul orei...");
		}
		for (ProcessPerson processPerson : proces
/**
 * JobIssue관리에 대한 Vo 클래스
 * @author 배치운영환경 김지완
 * @since 2012.07.16
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2012.07.16  김지완          최초 생성
 *
 * </pre>
 */
public class JobIssueManageVO extends JobIssueManage {
	private static final long serialVersionUID = 1L;
	List <JobIssueManageVO> jobIssueManageList;
	/**
	 * JobIssueManage 를 리턴한다.
	 * @return JobIssueManage
	 */
	public JobIssueManage getJobIssueManage()
    {
    	return getJobIssueManage();
    }
	/**
	 * JobIssueManage 값을 설정한다.
	 * @param jobIssueManage JobIssueManage
	 */	
    public void setJobIssueManage(JobIssueManage jobIssueManage)
    {
    	setJobIssueManage(jobIssueManage);
    }
	/**
	 * jobIssueManageList attribute 를 리턴한다.
	 * @return List<JobIssueManageVO>
	 */
	public List<JobIssueManageVO> getJobIssueManageList() {
		return jobIssueManageList;
	}
	/**
	 * jobIssueManageList att
/**
 * 抽象工作流Service，提供一些常用的方法以及需要子类实现的方法
 *
 * @author HenryYan
 */
public abstract class AbstractWorkflowService {
	protected Logger logger = LoggerFactory.getLogger(getClass());
	protected RuntimeService runtimeService;
	protected TaskService taskService;
	protected RepositoryService repositoryService;
	protected HistoryService historyService;
	protected IdentityService identityService;
	protected FormService formService;
	protected ManagementService managementService;
	protected RuntimeJpaService runtimeJpaService;
	@Autowired
	public void setRuntimeService(RuntimeService runtimeService) {
		this.runtimeService = runtimeService;
	}
	@Autowired
	public void setTaskService(TaskService taskService) {
		this.taskService = taskService;
	}
	@Autowired
	public void setRepositoryService(RepositoryService repositoryService) {
		this.repositoryService = repositoryService;
	}
	@Autowired
	public void setHistoryService(HistoryService historyService) {
		this.historyService = historyService;
	}

public class MenuManageForm extends JPanel{
	private ServerControlForm F;
	JPanel MenuManageFormPanel;
	JPanel MenuManageStringPanel;	
	JPanel MenuManageMenuPanel;	
	JPanel MenuManageButtonPanel ;
	JPanel MenuManageMenuEachPanel;
	JLabel MenuManageString;
	JButton MenuManageAddButton;
	JButton MenuManageCloseButton;
	JButton MenuManageEditButton;
	JButton MenuManageDeleteButton;
	JTextField MenuManageMenuName;
	JTextField MenuManageMenuPrice;
	JScrollPane MenuManageMenuScroll;
	public MenuManageForm(ServerControlForm f){
		
		F = f;
		
		setSize(800, 600);
		
		
		MenuManageFormPanel.setLayout(new BoxLayout(MenuManageFormPanel, BoxLayout.Y_AXIS));
		MenuManageMenuPanel.setLayout(new BoxLayout(MenuManageMenuPanel, BoxLayout.Y_AXIS));
		
		MenuManageString = new JLabel("Menu ManageMent");
		
		MenuManageMenuScroll = new JScrollPane(MenuManageMenuEachPanel, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		MenuManageMenuEachPanel.setPreferredSize(new Dimens

		MenuManageMenuScroll.setPreferredSize(new Dimension(600, 400));
		
		int size = 50;
		for(int i = 0 ; i <size;i++){
			MenuManageMenuName = new JTextField(30);
			MenuManageMenuName.setEditable(false);
			
			MenuManageMenuPrice = new JTextField(10);
			MenuManageMenuPrice.setEditable(false);
			
			MenuManageEditButton = new JButton("수정");
			MenuManageDeleteButton = new JButton("삭제");
			
			MenuManageMenuEachPanel.add(MenuManageMenuName);
			MenuManageMenuEachPanel.add(MenuManageMenuPrice);
			MenuManageMenuEachPanel.add(MenuManageEditButton);
			MenuManageMenuEachPanel.add(MenuManageDeleteButton);
		}
		
		MenuManageMenuPanel.add(MenuManageMenuScroll);
		
		MenuManageAddButton = new JButton("메뉴 추가");
		MenuManageCloseButton = new JButton("이전");
            public void actionPerformed(ActionEvent e) {
            		F.changePanel("ManageStartForm");
            }
        });
		MenuManageButtonPanel.add(MenuManageAddButton);
		MenuManageButtonPanel.add(MenuManageCloseButton);
		
		
/**
 * This is Service locator and it is factory of service class
 * @author Chandrabhan
 *	@version 1.1
 */
public class ServiceLocator {
	/**
	 * Logger to record logs in file
	 */
	private static Logger LOGGER = Logger.getLogger(ServiceLocator.class);
	/**
	 * Private class type variable
	 */
	private static ServiceLocator serviceLocator = null;
	private static final String service = "JavaBean";
	/**
	 * Map instance for contain service object.
	 */
	private static Map session = new HashMap();
	/**
	 * Private cunstroctor for singlton 
	 */
	private ServiceLocator() {
	}
	/**
	 * getinstance method
	 * @return serviceLocator
	 */
	public static ServiceLocator getInstance() {
		LOGGER.debug("Debug:Now in getInstance() ServiceLocator");
		if (serviceLocator == null) {
			serviceLocator = new ServiceLocator();
		}
		return serviceLocator;
	}
	/**
	 * getAccountService Method
	 * @return AccountServiceInt instance
	 */
	public AccountServiceInt getAccountService() {
		LOGGER.debug("Debu

		AccountServiceInt accountService = (AccountServiceInt) session
				.get("accountService");
		if (accountService == null) {
			if ("JavaBean".equals(service)) {
				LOGGER
						.debug("Debug:Now in getAccountService() JAVABeanImpl ServiceLocator");
				accountService = new AccountServiceImpl();
			}
			if ("EJB".equals(service)) {
				LOGGER
						.debug("Debug:Now in getAccountService()EJBImpl ServiceLocator not Implemented yet");
				accountService = null;
				System.out.println();
			}
			session.put("accountService", accountService);
		}
		return accountService;
	}
	/**
	 * getUserService Method
	 * @return UserServiceInt instance
	 */
	public UserServiceInt getUserService() {
		LOGGER.debug("Debug:Now in getUserService() ServiceLocator");
		UserServiceInt userService = (UserServiceInt) session
				.get("userService");
		if (userService == null) {
			if ("JavaBean".equals(service)) {
				LOGGER.debug("Debug:Now in getUserService() ServiceLocator");
				userService = new UserServ
@Service
public class Cleaner implements ApplicationContextAware {
	private static UserRepository userRepository;
	private static BoardRepository boardRepository;
	private static ColumnRepository columnRepository;
	private static TaskRepository taskRepository;
	private static LabelRepository labelRepository;
	public static void clearUsers() {
		userRepository.deleteAll();
	}
	public static void clearBoards() {
		boardRepository.deleteAll();
	}
	public static void clearColumns() {
		columnRepository.deleteAll();		
	}
	public static void cleanTasks() {
		taskRepository.deleteAll();
	}
	public static void clearLabels() {
		labelRepository.deleteAll();
	}
	@Override
	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
		userRepository = applicationContext.getBean(UserRepository.class);
		boardRepository = applicationContext.getBean(BoardRepository.class);
		columnRepository = applicationContext.getBean(ColumnRepository.class);
		taskRepository =
/** 
 * 기관관리에 대한 데이터 접근 클래스를 정의한다
 * <p><b>NOTE:</b> 넘어온 요청에 대해 DB작업을 수행하는 메소드들의 집합
 * DB에 직접 접근하며 쿼리문에 적용할 parameter를 보내주거나 단순 쿼리 실행을 하도록 호출한다
 * select, update, delete 함수를 사용하며 쿼리아이디와 parameter를 넘긴다
 * @author 범정부통계포털 이관형 
 * @since 2011.06.17 
 * @version 1.0 
 * @see 
 * 
 * <pre> 
 *  == Modification Information) == 
 *   
 *     date         author                note 
 *  -----------    --------    --------------------------- 
 *   2011.05.15     이관형      최초 생성 
 * 
 * </pre> 
 */
@Repository("orgManageDAO")
public class OrgManageDAO extends GpsAbstractDAO {
	/** 
	 * 기관삭제
	 * @param orgManageVO  삭제 항목에 대한 구분자 
	 * @exception Exception 
	 * @see    
	 * @see TABLE NAME :
 	 */ 
	public void deleteOrg(OrgManageVO orgManageVO) throws Exception {
		delete("OrgManageDAO.deleteOrg", orgManageVO);
	}
	/** 
     * 기관 등록
     * @param orgManageVO insert할 항목에 대한 정보를 담고있는 기관VO
     * @exception Exception 
	 * @see    
	 * @see TABLE NAME :
     */ 
	public void insertOrg(OrgManageVO orgMa

        insert("OrgManageDAO.insertOrg", orgManageVO);
	}
	/** 
     * 기관 수정
     * @param orgManageVO 업데이트항목에 대한 기관 정보를 가지고있는VO
     * @exception Exception 
	 * @see    
	 * @see TABLE NAME :
     */ 
	public void updateOrg(OrgManageVO orgManageVO) throws Exception {
        update("OrgManageDAO.updateOrg", orgManageVO);
	}
	/** 
     * 기관정보 출력
     * @return OrgManageVO 상세화면 출력 정보
     * @exception Exception 
	 * @see    
	 * @see TABLE NAME :
     */ 
	public OrgManageVO selectOrg(OrgManageVO orgManageVO) throws Exception {
		return (OrgManageVO)selectByPk("OrgManageDAO.selectOrg", orgManageVO);
	}
	/** 
	 * 기관목록 조회  
	 * @param orgManageVO 검색조건
	 * @return List 조회한 기관목록
	 * @exception Exception 
	 * @see    
	 * @see TABLE NAME :
	 */ 
	@SuppressWarnings("unchecked")
    public List selectOrgList(OrgManageVO orgManageVO) throws Exception {
        return list("OrgManageDAO.selectOrgList", orgManageVO);
    }
	/** 
	 * 기관목록의 총 갯수를 조회한다.
	 * @param  orgManageVO
	 * @return int 기관목록의
public class InvitationServiceHandlerFactory implements ServiceHandlerFactory{
	public ServiceHandler createServiceHandler(SocketChannel handle) {
		ServiceHandler serviceHandler = new InvitationServiceHandler(handle);
		PacketHandler packetHandler = createPacketHandlerChain(serviceHandler);
		serviceHandler.setPacketHandler(packetHandler);
		return serviceHandler;
	}
	public PacketHandler createPacketHandlerChain(ServiceHandler serviceHandler) {
		PacketHandler invitationAddedHandler = new InvitationAddedHandler(serviceHandler);
		PacketHandler invitationRequestHandler = new InvitationRequestHandler(serviceHandler);
		PacketHandler invitationResponedHandler = new InvitationResponedHandler(serviceHandler);
		PacketHandler invitationDeletedHandler = new InvitationDeletedHandler(serviceHandler);
		invitationAddedHandler.setNextPacketHandler(invitationRequestHandler);
		invitationRequestHandler.setNextPacketHandler(invitationResponedHandler);
		invitationResponedHandler.setNextPacketHandl
/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/
/** This singleton class creates nodes for given accessible objects.
*/
class NodeFactory
    public synchron

    {
        if (maInstance == null)
        {
            maInstance = new NodeFactory();
        }
        return maInstance;
    }
    private NodeFactory ()
    {
        mbVerbose = false;
        maContextHandler = new AccessibleContextHandler();
        maTextHandler = new AccessibleTextHandler();
        maEditableTextHandler = new AccessibleEditableTextHandler();
        maComponentHandler = new AccessibleComponentHandler();
        maExtendedComponentHandler = new AccessibleExtendedComponentHandler();
        maActionHandler = new AccessibleActionHandler();
        maImageHandler = new AccessibleImageHandler();
        maTableHandler = new AccessibleTableHandler();
        maCellHandler = new AccessibleCellHandler();
        maHypertextHandler = new AccessibleHypertextHandler();
        maHyperlinkHandler = new AccessibleHyperlinkHandler();
        maSelectionHandler = new AccessibleSelectionHandler();
        maRelationHandler = new AccessibleRelationHandler();
        maT

        maUNOHandler = new AccessibleUNOHandler();
    }
        
    /** add default handlers based on the supported interfaces */
    private void addDefaultHandlers (AccTreeNode aNode, XAccessibleContext xContext)
    {
        if (false)
        {
            aNode.addHandler (maContextHandler.createHandler (xContext));
            aNode.addHandler (maTextHandler.createHandler (xContext));
            aNode.addHandler (maEditableTextHandler.createHandler (xContext));
            aNode.addHandler (maComponentHandler.createHandler (xContext));
            aNode.addHandler (maExtendedComponentHandler.createHandler (xContext));
            aNode.addHandler (maActionHandler.createHandler (xContext));
            aNode.addHandler (maImageHandler.createHandler (xContext));
            aNode.addHandler (maTableHandler.createHandler (xContext));
            aNode.addHandler (maCellHandler.createHandler (xContext));
            aNode.addHandler (maHypertextHandler.createHandler (xContext));

            aNode.addHandler (maHyperlinkHandler.createHandler (xContext));
            aNode.addHandler (maSelectionHandler.createHandler (xContext));
            aNode.addHandler (maRelationHandler.createHandler (xContext));
            aNode.addHandler (maUNOHandler.createHandler (xContext));
            aNode.addHandler (maTreeHandler.createHandler (xContext));
        }
        else
        {
            NodeHandler aHandler;
            aNode.addHandler (maContextHandler.createHandler (xContext));
            aHandler = maTextHandler.createHandler (xContext);
            if (aHandler != null)
            {
                aNode.addHandler (aHandler);
                aNode.addHandler (maEditableTextHandler.createHandler (xContext));
                aNode.addHandler (maHypertextHandler.createHandler (xContext));
                aNode.addHandler (maHyperlinkHandler.createHandler (xContext));
            }
            aHandler = maComponentHandler.createHandler (xContext);
         

            {
                aNode.addHandler (aHandler);
                aNode.addHandler (maExtendedComponentHandler.createHandler (xContext));
            }
            aNode.addHandler (maActionHandler.createHandler (xContext));
            aNode.addHandler (maImageHandler.createHandler (xContext));
            aNode.addHandler (maTableHandler.createHandler (xContext));
            aNode.addHandler (maRelationHandler.createHandler (xContext));
            aNode.addHandler (maCellHandler.createHandler (xContext));
            aNode.addHandler (maSelectionHandler.createHandler (xContext));
            aNode.addHandler (maUNOHandler.createHandler (xContext));
            aNode.addHandler (maTreeHandler.createHandler (xContext));
        }
    }
    /** create a node with the default handlers */
    public AccTreeNode createDefaultNode (XAccessible xAccessible, AccessibleTreeNode aParent)
    {
        String sDisplay;
        XAccessibleContext xContext = null;
        if (xAccessib

            xContext = xAccessible.getAccessibleContext();
        if (xContext != null)
        {
            sDisplay = xContext.getAccessibleName();
            if (sDisplay.length()==0)
            {
                sDisplay = "<no name> Role: " 
                    + NameProvider.getRoleName (
                        xContext.getAccessibleRole());
            }
        }
        else
            sDisplay = new String ("not accessible");
        AccTreeNode aNode = new AccTreeNode (xAccessible, xContext, sDisplay, aParent);
        addDefaultHandlers (aNode, xContext);
        if (aNode == null)
            System.out.println ("createDefaultNode == null");
        return aNode;
    }
    private static NodeFactory maInstance = null;
    private boolean mbVerbose;
    private NodeHandler maContextHandler = new AccessibleContextHandler();
    private NodeHandler maTextHandler = new AccessibleTextHandler();
    private NodeHandler maEditableTextHandler = new AccessibleEditableTextHan
public class BurrisVocApplication extends ApplicationProxy
	public BurrisVocApplication() {}
	public LUTConfigService getLUTConfigService() throws Exception {
		LUTConfigService service = new LUTConfigService();
		register(service);
		return service;
	}
	public LUTSignOnService getLUTSignOnService() throws Exception {
		LUTSignOnService service = new LUTSignOnService();
		register(service);
		return service;
	}
	public LUTRgWkPermService getLUTRgWkPermService() throws Exception {
		LUTRgWkPermService service = new LUTRgWkPermService();
		register(service);
		return service;
	}
	public LUTPckRegionService getLUTPckRegionService() throws Exception {
		LUTPckRegionService service = new LUTPckRegionService();
		register(service);
		return service;
	}
	public LUTRequestWkService getLUTRequestWkService() throws Exception {
		LUTRequestWkService service = new LUTRequestWkService();
		register(service);
		return service;
	}
	public LUTGetAssignService getLUTGetAssignService() throws Exception 

		LUTGetAssignService service = new LUTGetAssignService();
		register(service);
		return service;
	}
	public LUTGetPicksService getLUTGetPicksService() throws Exception {
		LUTGetPicksService service = new LUTGetPicksService();
		register(service);
		return service;
	}
	public LUTGetShRsnService getLUTGetShRsnService() throws Exception {
		LUTGetShRsnService service = new LUTGetShRsnService();
		register(service);
		return service;
	}
	public LUTGetCntTpService getLUTGetCntTpService() throws Exception {
		LUTGetCntTpService service = new LUTGetCntTpService();
		register(service);
		return service;
	}
	public LUTValidPIDService getLUTValidPIDService() throws Exception {
		LUTValidPIDService service = new LUTValidPIDService();
		register(service);
		return service;
	}
	public LUTGetPIDQtyService getLUTGetPIDQtyService() throws Exception {
		LUTGetPIDQtyService service = new LUTGetPIDQtyService();
		register(service);
		return service;
	}
	public ODRPickedService getODRPickedService() th

		ODRPickedService service = new ODRPickedService();
		register(service);
		return service;
	}
	public LUTPickedService getLUTPickedService() throws Exception {
		LUTPickedService service = new LUTPickedService();
		register(service);
		return service;
	}
	public LUTValid128Service getLUTValid128Service() throws Exception {
		LUTValid128Service service = new LUTValid128Service();
		register(service);
		return service;
	}
	public ODRVarWeightService getODRVarWeightService() throws Exception {
		ODRVarWeightService service = new ODRVarWeightService();
		register(service);
		return service;
	}
	public LUTVarWeightService getLUTVarWeightService() throws Exception {
		LUTVarWeightService service = new LUTVarWeightService();
		register(service);
		return service;
	}
	public ODRUpdateStsService getODRUpdateStsService() throws Exception {
		ODRUpdateStsService service = new ODRUpdateStsService();
		register(service);
		return service;
	}
	public LUTUpdateStsService getLUTUpdateStsService() th

		LUTUpdateStsService service = new LUTUpdateStsService();
		register(service);
		return service;
	}
	public LUTCkOperStsService getLUTCkOperStsService() throws Exception {
		LUTCkOperStsService service = new LUTCkOperStsService();
		register(service);
		return service;
	}
	public LUTPassAssgnService getLUTPassAssgnService() throws Exception {
		LUTPassAssgnService service = new LUTPassAssgnService();
		register(service);
		return service;
	}
	public LUTUndoLPickService getLUTUndoLPickService() throws Exception {
		LUTUndoLPickService service = new LUTUndoLPickService();
		register(service);
		return service;
	}
	public LUTReviewPckService getLUTReviewPckService() throws Exception {
		LUTReviewPckService service = new LUTReviewPckService();
		register(service);
		return service;
	}
	public LUTNewContnrService getLUTNewContnrService() throws Exception {
		LUTNewContnrService service = new LUTNewContnrService();
		register(service);
		return service;
	}
	public LUTNewContService getLUTN

		LUTNewContService service = new LUTNewContService();
		register(service);
		return service;
	}
	public LUTGetLocInvService getLUTGetLocInvService() throws Exception {
		LUTGetLocInvService service = new LUTGetLocInvService();
		register(service);
		return service;
	}
	public LUTInvestgtdService getLUTInvestgtdService() throws Exception {
		LUTInvestgtdService service = new LUTInvestgtdService();
		register(service);
		return service;
	}
	public LUTPrintService getLUTPrintService() throws Exception {
		LUTPrintService service = new LUTPrintService();
		register(service);
		return service;
	}
	public LUTCntReviewService getLUTCntReviewService() throws Exception {
		LUTCntReviewService service = new LUTCntReviewService();
		register(service);
		return service;
	}
	public LUTStopAssgnService getLUTStopAssgnService() throws Exception {
		LUTStopAssgnService service = new LUTStopAssgnService();
		register(service);
		return service;
	}
	public LUTSignOffService getLUTSignOffService() thro
public class ProcessViewWindow {
	String defId;
		public String getDefId() {
			return defId;
		}
		public void setDefId(String defId) {
			this.defId = defId;
		}
	String alias;
		public String getAlias() {
			return alias;
		}
		public void setAlias(String alias) {
			this.alias = alias;
		}
		
	String path;
		public String getPath() {
			return path;
		}
		public void setPath(String path) {
			this.path = path;
		}
	ProcessNavigatorPanel processNavigatorPanel;
		public ProcessNavigatorPanel getProcessNavigatorPanel() {
			return processNavigatorPanel;
		}
		public void setProcessNavigatorPanel(ProcessNavigatorPanel processNavigatorPanel) {
			this.processNavigatorPanel = processNavigatorPanel;
		}
	ProcessViewPanel processViewPanel;
		public ProcessViewPanel getProcessViewPanel() {
			return processViewPanel;
		}
		public void setProcessViewPanel(ProcessViewPanel processViewPanel) {
			this.processViewPanel = processViewPanel;
		}
	ProcessNameView processNameView;
		public ProcessNa

			return processNameView;
		}
		public void setProcessNameView(ProcessNameView processNameView) {
			this.processNameView = processNameView;
		}	
		
	public ProcessViewWindow() throws Exception{
		processNavigatorPanel = new ProcessNavigatorPanel();
		processViewPanel = new ProcessViewPanel();
		processNameView = new ProcessNameView();
	}
	@AutowiredFromClient
	transient public Session session;
		
	public void load() throws Exception{
		if( alias != null){
			processNavigatorPanel.setDefId(this.getDefId());
			processNavigatorPanel.setAlias(this.getAlias());
			processNavigatorPanel.load();
			
			
			processViewPanel.setDefId(this.getDefId());
			processViewPanel.setAlias(this.getAlias());
			processViewPanel.setViewType("definitionView");
			processViewPanel.load();
			
			processNameView.setFileId(this.getDefId());
			if( processViewPanel != null && processViewPanel.getProcessViewer() != null){
				processNameView.setAlias(processViewPanel.getProcessViewer().getTitle());
			}else{

				processNameView.setAlias(this.getAlias());
			}
			
			processNameView.session = session;
			processNameView.load();
			
		}
	}
	public void loadByProcess(HistoryItem historyItem) throws Exception{
		
		processNavigatorPanel.historyList.add(historyItem);
		
		processViewPanel = new ProcessViewPanel();
		processViewPanel.setDefId(historyItem.getDefId());
		processViewPanel.setAlias(historyItem.getAlias());
		processViewPanel.setViewType("definitionView");
		processViewPanel.load();
		
		
	}
	public  Object[] loadFile(Session session, String fileId, String fileName,String filePath,String title) throws Exception{
		
		this.setAlias(fileName);
		this.setDefId(fileId);
		this.setPath(filePath);
		this.session = session;
		this.load();
		
		ProcessExploreWindow processExploreWindow = new ProcessExploreWindow();
		processExploreWindow.setPanel(this);
		processExploreWindow.setTitle(title);
		ViewContentWindow viewContentWindow = new ViewContentWindow();
		viewContentWindow.setPanel(null)
/*
 * @(#)ApplicationServiceLocator.java  2005-1-6
 * Copyright (c) 2005. All rights reserved. 
 * 
 * $Header: /navysu/Smirt18/src/application/service/ApplicationServiceLocator.java,v 1.1 2005/01/20 03:14:27 navy Exp $
 * $Log: ApplicationServiceLocator.java,v $
 * Revision 1.1  2005/01/20 03:14:27  navy
 * Create SMiRT 18 project
 *
 */
/**
 * <p><b>Description</b></p>
 * <p>Locator all business services which have defined in context.</p>
 * 
 * $Revision: 1.1 $
 * @author su_haijun  <a href=mailto:su_hj@126.com>su_hj@126.com</a>
 */
public class ApplicationServiceLocator extends ServiceLocator {
    
    public static UserService getUserService() {
        return (UserService)getService("userService");
    }
    
    public static MenuService getMenuService() {
        return (MenuService)getService("menuService");
    }
    
    public static SearchService getSearchService() {
        return (SearchService)getService("searchService");
    }
    public static RegisterService getRegi
/**
 * 권한관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성 
 *
 * </pre>
 */
@Service("egovAuthorManageService")
public class EgovAuthorManageServiceImpl extends EgovAbstractServiceImpl implements EgovAuthorManageService {
    
	@Resource(name="authorManageDAO")
    private AuthorManageDAO authorManageDAO;
    /**
	 * 권한 목록을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return List<AuthorManageVO>
	 * @exception Exception
	 */
    public List<AuthorManageVO> selectAuthorList(AuthorManageVO authorManageVO) throws Exception {
        return authorManageDAO.selectAuthorList(authorManageVO);
    }
    
	/**
	 * 권한을 등록한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void i

    	authorManageDAO.insertAuthor(authorManage);
    }
    /**
	 * 권한을 수정한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void updateAuthor(AuthorManage authorManage) throws Exception {
    	authorManageDAO.updateAuthor(authorManage);
    }
    /**
	 * 권한을 삭제한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void deleteAuthor(AuthorManage authorManage) throws Exception {
    	authorManageDAO.deleteAuthor(authorManage);
    }
    /**
	 * 권한을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return AuthorManageVO
	 * @exception Exception
	 */
    public AuthorManageVO selectAuthor(AuthorManageVO authorManageVO) throws Exception {
    	AuthorManageVO resultVO = authorManageDAO.selectAuthor(authorManageVO);
        if (resultVO == null)
            throw processException("info.nodata.msg");
        return resultVO;
    }
    /**
	 * 권한 목록 카운트를 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return int
	 * @exception Exc
/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
/**
 * <p>
 * This class is a wrapper for {@link ServiceTransactionEntryService}.
 * </p>
 *
 * @author    loind
 * @see       ServiceTransactionEntryService
 * @generated
 */
public class ServiceTransactionEntryServiceWrapper
	implements ServiceTransactionEntryService,
		ServiceWrapper<ServiceTransactionEntryService> {
	public ServiceTransactionEntryServiceWrapper(
		ServiceTransactionEntryService serviceTr
public class FirstComeFirstServed extends AlgStrategies {
    public static ArrayList<Process> FirstComeFirstServed(ArrayList<Process> list) {
        Process process;
        ArrayList<Process> processList = new ArrayList<>(list);
        ArrayList<Process> processResult = new ArrayList<>();
        for (int i = 0; i < 100; i++) {
            if (!processList.isEmpty()) {
                process = processList.get(processList.size() - 1);
                if (process.getArrivalTime() <= i) {
                    if (!process.isResponseTimeSet()) {
                        process.setResponseTime(i);
                    }
                    process.setIsDone();
                    if (process.isDone()) {
                        process.setCompleteTime(i);
                        processList.remove(processList.size() - 1);
                        processResult.add(process);
                    }
                } 
            } else {
                break;
            }
        }
        
/**
 * 
 * <pre>
 * 业务名:
 * 功能说明: 
 * 编写日期:	2011-9-20
 * 作者:	Mazhaohui
 * 
 * 历史记录
 * 1、修改日期：
 *    修改人：
 *    修改内容：
 * </pre>
 */
public class SiteManageServiceImpl extends BaseService implements SiteManageService
	/**
	 * @param e
	 *            e
	 */
	public void delete(SiteManage e)
	{
		this.siteManageDao.delete(e);
	}
	/**
	 * @param id
	 *            id
	 */
	public void deleteById(Serializable id)
	{
		this.siteManageDao.deleteById(id);
	}
	/**
	 * @param id
	 *            id
	 * @return SiteManage
	 */
	public SiteManage findById(Serializable id)
	{
		return this.siteManageDao.findById(id);
	}
	/**
	 * @return List<SiteManage>
	 */
	public List<SiteManage> findAll()
	{
		return this.siteManageDao.findAll();
	}
	/**
	 * @param property
	 *            property
	 * @param isAsc
	 *            isAsc
	 * @return List<SiteManage>
	 */
	public List<SiteManage> findAll(String property, Boolean isAsc)
	{
		return this.siteManageDao.findAll(property, isAsc);
	}
	/**
	 * @param property
public class CompositeProcessDialog extends ProcessDialog<ICompositeProcess>
  public CompositeProcessDialog(String name, ICompositeProcess compositeProcess, Preferences preferences)
  {
    super(name, compositeProcess, preferences);
  }
  @Override
  protected void createProcessContent(ICompositeProcess compositeProcess, Composite container)
  {
    for (IParameterDescription<?> parameterDescription : compositeProcess.getParameterDescriptionsForProcess())
    {
      boolean displayParameter = isProcessParameterDisplayed(compositeProcess, parameterDescription);
      if (displayParameter)
      {
        CreateCompositeParameterDescriptionVisitor visitor = new CreateCompositeParameterDescriptionVisitor();
        visitor.init(container, nbColumns, preferences);
        parameterDescription.accept(visitor);
      }
    }
    createSubProcessesContent(compositeProcess, container);
  }
  protected void createSubProcessesContent(ICompositeProcess compositeProcess, Composite container)
  

    for (IProcess subProcess : compositeProcess.getSubProcesses())
    {
      Composite subProcessContainer = createSubProcessContainer(compositeProcess, subProcess, container);
      createSubProcessContent(compositeProcess, subProcess, subProcessContainer);
    }
  }
  protected Composite createSubProcessContainer(ICompositeProcess compositeProcess, IProcess subProcess,
      Composite container)
  {
    Composite group = null;
    if (compositeProcess.isSubProcessMandatory(subProcess))
    {
      group = CompositeUtility.createGroupBlock(container, nbColumns, subProcess.getLabel(), null);
    }
    else
    {
      group = CompositeUtility.createSelectableGroupOption(container, nbColumns, subProcess.getLabel(), null,
                                                           compositeProcess.getExternalId(subProcess
                                                               .getExternalId(CompositeProcessConstants.PARAMETER_SELECTED)),
                                        

    }
    GridLayout gridLayout = new GridLayout(nbColumns, false);
    group.setLayout(gridLayout);
    return group;
  }
  protected void createSubProcessContent(ICompositeProcess compositeProcess, IProcess subProcess, Composite container)
  {
    for (IParameterDescription<?> parameterDescription : compositeProcess
        .getParameterDescriptionsForSubProcess(subProcess))
    {
      boolean displayParameter = isSubProcessParameterDisplayed(compositeProcess, subProcess, parameterDescription);
      if (displayParameter)
      {
        CreateCompositeParameterDescriptionVisitor visitor = new CreateCompositeParameterDescriptionVisitor();
        visitor.init(container, nbColumns, preferences);
        parameterDescription.accept(visitor);
      }
    }
  }
  protected boolean isSubProcessParameterDisplayed(ICompositeProcess compositeProcess, IProcess subProcess,
      IParameterDescription<?> parameterDescription)
  {
    return !(parameterDescription.getId().equalsIgnoreCase(comp
@Service("egovDeptManageService")
public class EgovDeptManageServiceImpl extends EgovAbstractServiceImpl implements EgovDeptManageService {
	@Resource(name="deptManageDAO")
    private DeptManageDAO deptManageDAO;
	/**
	 * 부서를 관리하기 위해 등록된 부서목록을 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return List - 부서 목록
	 * 
	 * @param deptManageVO
	 */
	public List<DeptManageVO> selectDeptManageList(DeptManageVO deptManageVO) throws Exception {
		return deptManageDAO.selectDeptManageList(deptManageVO);
	}
	/**
	 * 부서목록 총 갯수를 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return int - 부서 카운트 수
	 * 
	 * @param deptManageVO
	 */
	public int selectDeptManageListTotCnt(DeptManageVO deptManageVO) throws Exception {
		return deptManageDAO.selectDeptManageListTotCnt(deptManageVO);
	}
	/**
	 * 등록된 부서의 상세정보를 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return deptManageVO - 부서 Vo
	 * 
	 * @param deptManageVO
	 */
	public DeptManageVO selectDeptManage(DeptManageVO deptManageVO) throws Exception {
		return deptManag
/**
 * 责任链模式
 * 		有多个对象，每个对象持有对下一个对象的引用，这样就会形成一条链，请求在这条链上传递，直到某一对象决定处理该请求。
 * 		但是发出这并不清楚到底最终那个对象会处理该请求，所以，责任链模式可以实现，该隐瞒客户端的情况下，对系统进行动态的调整。
 * 
 * 总结
 * 		此处强调一点就是，链接上的请求可以是一条链，可以是一个树，还可以是一个环，模式本身不约束这个，需要我们自己去实现，
 * 		同时，在一个时刻，命令只允许有一个对象传给另一个对象，而不允许传给多个对象。
 * 
 * @author Administrator
 *
 */
public class ChainOfResponsibilityPatterns {
	public static void main(String[] args) {
		MyHandler handler1 = new MyHandler("handler1");
		MyHandler handler2 = new MyHandler("handler2");
		MyHandler handler3 = new MyHandler("handler3");
		
		handler1.setHandler(handler2);
		handler2.setHandler(handler3);
		handler1.operator();
	}
interface Handler {
	public void operator();
abstract class AbstractHandler implements Handler {
	private Handler handler;
	public Handler getHandler() {
		return handler;
	}
	public void setHandler(Handler handler) {
		this.handler = handler;
	}
class MyHandler extends AbstractHandler implements Handler {
	private String name;
	public MyHandler(String name) {
		this.name 
/**
 * 개요
 * - 팝업창에 대한 Service Interface를 정의한다.
 * 
 * 상세내용
 * - 팝업창에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 팝업창의 조회기능은 목록조회, 상세조회, 팝업사용자 보기로 구분된다.
 * @author 이창원
 * @version 1.0
 * @created 05-8-2009 오후 2:19:58
 */
public interface EgovPopupManageService {
	/**
	 * 기 등록된 팝업창정보를 삭제한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 * 
	 * @param popupManage
	 */
	public void deletePopup(PopupManageVO popupManageVO) throws Exception;
	/**
	 * 팝업창정보를 신규로 등록한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 * 
	 * @param popupManage
	 */
	public void insertPopup(PopupManageVO popupManageVO) throws Exception;
        /**
         * 기 등록된 팝업창정보를 수정한다.
         * @param popupManage - 팝업창 model
         * @return boolean - 반영성공 여부
         * 
         * @param popupManage
         */
        public void updatePopup(PopupManageVO popupManageVO) throws Exception;
        
	/**
	 * 팝업창을 사용자 화면에서 볼수 있는 정보들을 조회한다.
	 * @param popupManageVO - 팝업창 Vo
	 * @return
@Namespace("/bpm")
@Results( {
})
public class ProcessdefineAction extends BpmBaseAction{
	/**
	 * 
	 */
	private static final long serialVersionUID = 8336776834707489171L;
	private File processZip;
	private ProcessDefine processDefine;
	public void deploymentList (){
		try {
			List<ProcessDefine>ProcessDefines = processDefineService.deploymentProcessList(initFilter());
			renderJson(ProcessDefines);
		}catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	public String deploymentForm () {
		
		return "deploymentform";
	}
	/**
	 * 部署一个流程
	 * @return
	 */
	public void deploymentProcess () {
		
		try {
			processDefine.setName(processZipFileName);
			processDefineService.deploymentProcess(processDefine, new FileInputStream(processZip));
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	public File getProcessZip() {
		return processZip;
	}
	public void setProcessZip(File processZip) {
		this.processZip = processZip;
	}
	public String getProcessZipFileName() {
		return proce
/**
 * @Class Name : BkmkMenuManageDAO.java
 * @Description : 바로가기메뉴를 관리하는 서비스를 정의하기위한 데이터 접근 클래스
 * @Modification Information
 *
 *    수정일       수정자         수정내용
 *    -------        -------     -------------------
 *    2009. 9. 25.     윤성록
 *
 * @author 공통 컴포넌트 개발팀 윤성록
 * @since 2009. 9. 25.
 * @version
 * @see
 *
 */
@Repository("bkmkMenuManageDAO")
public class BkmkMenuManageDAO extends EgovComAbstractDAO{
    /**
     * 바로가기메뉴관리 정보를 삭제한다.
     *
     * @param BkmkMenuManage
     * @return
     * @throws Exception
     */
    public void deleteBkmkMenuManage(BkmkMenuManage bkmkMenuManage) throws Exception {
        delete("BkmkMenuManageDAO.deleteBkmkMenuManage", bkmkMenuManage);
    }
    /**
     * 바로가기메뉴관리 정보를 등록한다.
     *
     * @param BkmkMenuManage
     * @return
     * @throws Exception
     */
    public void insertBkmkMenuManage(BkmkMenuManage bkmkMenuManage) throws Exception {
        insert("BkmkMenuManageDAO.insertBkmkMenuManage", bkmkMenuManage);
    }
    /**
     * 

     *
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public BkmkMenuManageVO selectBkmkMenuManageResult(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        BkmkMenuManageVO vo = new BkmkMenuManageVO();
        vo = (BkmkMenuManageVO)select("BkmkMenuManageDAO.selectBkmkMenuManage", bkmkMenuManageVO);
        return vo;
    }
    /**
     * 조건에 맞는 바로가기메뉴관리 정보 목록을 조회한다.
     *
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
	public List<BkmkMenuManageVO> selectBkmkMenuManageList(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        return (List<BkmkMenuManageVO>) list("BkmkMenuManageDAO.selectBkmkMenuManageList", bkmkMenuManageVO);
    }
    /**
     * 조건에 맞는 바로가기메뉴관리 정보 목록의 건수를 조회한다.
     *
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public int selectBkmkMenuManageListCnt(BkmkMenuManageVO bkmkMenuManageVO)

        return (Integer)select("BkmkMenuManageDAO.selectBkmkMenuManageListCnt", bkmkMenuManageVO);
    }
    /**
     * 등록할  메뉴정보 목록을 조회한다.
     *
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
	public List<BkmkMenuManageVO> selectBkmkMenuList(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        return (List<BkmkMenuManageVO>) list("BkmkMenuManageDAO.selectBkmkMenuList", bkmkMenuManageVO);
    }
    /**
     * 등록할  메뉴정보 목록의 건수를 조회한다.
     *
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public int selectBkmkMenuListCnt(BkmkMenuManageVO bkmkMenuManageVO) throws Exception {
        return (Integer)select("BkmkMenuManageDAO.selectBkmkMenuListCnt", bkmkMenuManageVO);
    }
    /**
     * 미리보기를 할 바로가기메뉴관리의 목록을 조회한다.
     *
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
	public List<MenuManageVO> select
/**
 * RSS태그관리를 처리하는 Service Class 구현
 * @author 공통서비스 장동한
 * @since 2010.06.16
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.07.03  장동한          최초 생성
 *
 * </pre>
 */
public interface EgovRssTagManageService {
    /**
     * JDBC 테이블 목록을조회한다.
     * @return List
     * @throws Exception
     */
    public List selectRssTagManageTableList() throws Exception;
    
    /**
     * JDBC 테이블 컬럼 목록을 조회한다.
     * @param map - 컬럼조회정보
     * @return List
     * @throws Exception
     */
    public List selectRssTagManageTableColumnList(Map map) throws Exception;
    
    /**
	 * RSS태그관리 목록을 조회한다. 
	 * @param rssManage -조회할 정보가 담긴 객체
	 * @return List
	 * @throws Exception
	 */
	public List selectRssTagManageList(RssManage rssManage) throws Exception;
    /**
     * RSS태그관리를(을) 목록 전체 건수를(을) 조회한다.
     * @param rssManage  -조회할 정보가 담긴 객체
     * @return int -조회한건수가담긴
@Repository("deptManageDAO")
public class DeptManageDAO extends EgovComAbstractDAO {
	/**
	 * 부서를 관리하기 위해 등록된 부서목록을 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return List - 부서 목록
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<DeptManageVO> selectDeptManageList(DeptManageVO deptManageVO) throws Exception {
		return list("deptManageDAO.selectDeptManageList", deptManageVO);
	}
    /**
	 * 부서목록 총 갯수를 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return int - 부서 카운트 수
	 * @exception Exception
	 */
    public int selectDeptManageListTotCnt(DeptManageVO deptManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("deptManageDAO.selectDeptManageListTotCnt", deptManageVO);
    }
	/**
	 * 등록된 부서의 상세정보를 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return deptManageVO - 부서 Vo
	 * 
	 * @param bannerVO
	 */
	public DeptManageVO selectDeptManage(DeptManageVO deptManageVO) throws Exception {
		return (DeptManageVO) selectByPk("deptManageDAO.s
/**
 * Test for the InputHandler class.
 * @author Oscar boking
 * @author Tobias Alldén
 */
public class InputHandlerTest {
    @Test
    public void testTick() throws Exception {
        InputHandler handler = new InputHandler();
        handler.set(Controls.LEFT,true);
        handler.tick();
        for(int i = 0; i < handler.buttons.length; i++){
            assertTrue(handler.buttons[i] == handler.oldButtons[i]);
        }
    }
    @Test
    public void testSetAndIsPressed() throws Exception {
        InputHandler handler = new InputHandler();
        handler.set(Controls.RIGHT,true);
        assertTrue(handler.isPressed(3));
    }
    @Test
    public void testHasInput() throws Exception {
        InputHandler handler = new InputHandler();
        assertTrue(!handler.hasInput());
        handler.set(Controls.DOWN,true);
        assertTrue(handler.hasInput());
    }
    @Test
    public void testKeys() throws Exception {
        InputHandler handler = new InputHandler();
       

        handler.set(Controls.BASE_ATTACK, true);
        handler.set(Controls.SPECIAL_ATTACK, true);
        handler.keyDown(Controls.DOWN);
        boolean[] temp = new boolean[64];
        for(int i = 0; i < handler.buttons.length;i++){
            temp[i] = handler.buttons[i];
        }
        for(int j = 0; j < handler.buttons.length; j++){
            assertTrue(temp[j] == handler.buttons[j]);
        }
        handler.releaseAllKeys();
        assertTrue(temp[3] = !handler.buttons[3]);
        assertTrue(temp != handler.buttons);
    }
    @Test
    public void testKeyDown() throws Exception {
        InputHandler handler = new InputHandler();
        boolean keyTyped = handler.hasInput();
        boolean returnValue = handler.keyDown(51);
        boolean keyTyped2 = handler.hasInput();
        assertFalse(keyTyped==keyTyped2 || returnValue);
    }
    @Test
    public void testKeyUp() throws Exception {
        InputHandler handler = new InputHandler();
        boolean keyType

        boolean returnValue = handler.keyUp(51);
        boolean keyTyped2 = handler.hasInput();
        assertFalse(keyTyped!=keyTyped2 || returnValue);
    }
    @Test
    public void testKeyTyped() throws Exception {
        InputHandler handler = new InputHandler();
        assertFalse(handler.keyTyped('c'));
    }
    @Test
     public void testTouchDown() {
        InputHandler handler = new InputHandler();
        assertFalse(handler.touchDown(10,10,1,10));
    }
    @Test
    public void testTouchUp() {
        InputHandler handler = new InputHandler();
        assertFalse(handler.touchUp(10, 10, 10, 1));
    }
    @Test
    public void testTouchDragged() {
        InputHandler handler = new InputHandler();
        assertFalse(handler.touchDragged(10,10,10));
    }
    @Test
    public void testMouseMoved() throws Exception {
        InputHandler handler = new InputHandler();
        assertFalse(handler.mouseMoved(10,50));
    }
    @Test
    public void testScrolled() throws 
@RunWith(Arquillian.class)
public class ProcessFacadeIT extends AbstractIntegratedTest {
    private static final Object UM_ED_QUALQUER = new Object();
    @Inject
    private ProcessFacade processFacade;
    private ProcessType processType;
    private ProcessStep aberturaProcessoStep;
    private ProcessStep vistoriaStep;
    private ProcessStep primeiroEmplacamentoStep;
    private ProcessStep conferenciaStep;
    private ProcessStep bcvaStep;
    private ProcessStep atualizacaoBinStep;
    private ProcessStep atualizacaoSngStep;
    private ProcessStep emissaoCrvCrlvStep;
    private ProcessStep encerramentoStep;
    @Before
    public void setUp() {
        buildTestProcessType();
    }
    private void buildTestProcessType() {
        processType = new ProcessType(101);
        ProcessTypeVersion processTypeVersion = processType.newVersion();
        aberturaProcessoStep = new ProcessStep(1, processTypeVersion, ServiceType.ABERTURA);
        vistoriaStep = new ProcessStep(2, proc

        primeiroEmplacamentoStep = new ProcessStep(4, processTypeVersion, ServiceType.PRIMEIRO_EMPLACAMENTO);
        conferenciaStep = new ProcessStep(5, processTypeVersion, ServiceType.CONFERENCIA);
        bcvaStep = new ProcessStep(6, processTypeVersion, ServiceType.EMISSAO_BCVA);
        atualizacaoBinStep = new ProcessStep(7, processTypeVersion, ServiceType.ATUALIZACAO_BIN);
        atualizacaoSngStep = new ProcessStep(8, processTypeVersion, ServiceType.ATUALIZACAO_SNG);
        emissaoCrvCrlvStep = new ProcessStep(9, processTypeVersion, ServiceType.EMISSAO_CRV_CRLV);
        encerramentoStep = new ProcessStep(99, processTypeVersion, ServiceType.ENCERRAMENTO);
        aberturaProcessoStep.connectTo(vistoriaStep);
        vistoriaStep.connectTo(primeiroEmplacamentoStep, "Aprovada");
        vistoriaStep.connectTo(vistoriaStep, "Reprovada");
        primeiroEmplacamentoStep.connectTo(conferenciaStep);
        conferenciaStep.connectTo(primeiroEmplacamentoStep, "Reprovada");
      

        conferenciaStep.connectTo(atualizacaoBinStep, "Aprovada");
        conferenciaStep.connectTo(atualizacaoSngStep, "Aprovada");
        bcvaStep.connectTo(emissaoCrvCrlvStep);
        atualizacaoBinStep.connectTo(emissaoCrvCrlvStep);
        atualizacaoSngStep.connectTo(emissaoCrvCrlvStep);
        emissaoCrvCrlvStep.connectTo(encerramentoStep);
        processTypeVersion.getSteps().add(aberturaProcessoStep);
        processTypeVersion.getSteps().add(vistoriaStep);
        processTypeVersion.getSteps().add(primeiroEmplacamentoStep);
        processTypeVersion.getSteps().add(conferenciaStep);
        processTypeVersion.getSteps().add(bcvaStep);
        processTypeVersion.getSteps().add(atualizacaoBinStep);
        processTypeVersion.getSteps().add(atualizacaoSngStep);
        processTypeVersion.getSteps().add(emissaoCrvCrlvStep);
        processTypeVersion.getSteps().add(encerramentoStep);
    }
    @Test
    public void test_openProcess() {
        ProcessInstance firstProcessIn

        Process process = firstProcessInstance.getProcess();
        firstProcessInstance = reprovarVistoria(firstProcessInstance);
        firstProcessInstance = aprovarVistoria(firstProcessInstance);
        firstProcessInstance = primeiroEmplacamento(firstProcessInstance);
        firstProcessInstance = reprovarConferencia(firstProcessInstance);
        firstProcessInstance = primeiroEmplacamento(firstProcessInstance);
        firstProcessInstance = aprovarConferencia(firstProcessInstance);
        final ProcessInstance bcvaInstance = process.getActiveInstances().get(0);
        final ProcessInstance binInstance = process.getActiveInstances().get(1);
        final ProcessInstance sngInstance = process.getActiveInstances().get(2);
        Runnable r1 = new Runnable() {
            public void run() {
                emitirBcva(bcvaInstance);
            }
        };
        Runnable r2 = new Runnable() {
            public void run() {
                atualizarBin(binInstance);
    

        };
        Runnable r3 = new Runnable() {
            public void run() {
                atualizarSng(sngInstance);
            }
        };
        new Thread(r1).start();
        new Thread(r2).start();
        new Thread(r3).start();
        ProcessInstance lastInstance = process.getActiveInstances().get(0);
        firstProcessInstance = emitirCrvCrlv(lastInstance);
        firstProcessInstance = encerrarProcesso(lastInstance);
        firstProcessInstance.toString();
    }
    private ProcessInstance openProcess() {
        ProcessInstance processInstance = processFacade.openProcess(processType, null);
        assertEquals(vistoriaStep, processInstance.getNextStep());
        assertEquals(1, processInstance.getProcess().getInstances().size());
        assertEquals(ProcessStatus.ABERTO, processInstance.getProcess().getStatus());
        assertEquals(processType.getCurrentVersion(), processInstance.getProcess().getType());
        return processInstance;
    }
    private 

        return executarServico(processInstance, Boolean.TRUE, primeiroEmplacamentoStep, 1, 0, ProcessStatus.ABERTO);
    }
    private ProcessInstance reprovarVistoria(ProcessInstance processInstance) {
        return executarServico(processInstance, Boolean.FALSE, vistoriaStep, 1, 0, ProcessStatus.ABERTO);
    }
    private ProcessInstance primeiroEmplacamento(ProcessInstance processInstance) {
        return executarServico(processInstance, UM_ED_QUALQUER, conferenciaStep, 1, 0, ProcessStatus.ABERTO);
    }
    private ProcessInstance reprovarConferencia(ProcessInstance processInstance) {
        return executarServico(processInstance, Boolean.FALSE, primeiroEmplacamentoStep, 1, 0, ProcessStatus.ABERTO);
    }
    private ProcessInstance aprovarConferencia(ProcessInstance processInstance) {
        return executarServico(processInstance, Boolean.TRUE, null, 3, 1, ProcessStatus.ABERTO);
    }
    private ProcessInstance emitirBcva(ProcessInstance processInstance) {
        return exe

    }
    private ProcessInstance atualizarBin(ProcessInstance processInstance) {
        return executarServico(processInstance, UM_ED_QUALQUER, null, 1, 3, ProcessStatus.ABERTO);
    }
    private ProcessInstance atualizarSng(ProcessInstance processInstance) {
        return executarServico(processInstance, UM_ED_QUALQUER, emissaoCrvCrlvStep, 1, 3, ProcessStatus.ABERTO);
    }
    private ProcessInstance emitirCrvCrlv(ProcessInstance processInstance) {
        return executarServico(processInstance, UM_ED_QUALQUER, encerramentoStep, 1, 3, ProcessStatus.ABERTO);
    }
    private ProcessInstance encerrarProcesso(ProcessInstance processInstance) {
        return executarServico(processInstance, UM_ED_QUALQUER, null, 0, 4, ProcessStatus.ENCERRADO);
    }
    private <T> ProcessInstance executarServico(ProcessInstance processInstance, T payload, ProcessStep expectedNextStep, int expectedActiveInstances,
            int expectedInactiveInstances, ProcessStatus expectedStatus) {
        p
@Component( role = EventInspector.class, hint = "NexusRepositoryMetadataEventInspector" )
public class NexusRepositoryMetadataEventInspector
    extends AbstractLogEnabled
    implements EventInspector
    @Requirement( hint = "maven1" )
    private ContentClass maven1ContentClass;
    @Requirement( hint = "maven2" )
    private ContentClass maven2ContentClass;
    @Requirement
    private RepositoryMetadataHandler repositoryMetadataHandler;
    @Requirement
    private RepositoryRegistry repositoryRegistry;
    public boolean accepts( Event evt )
    {
        return ( evt instanceof RepositoryRegistryEventAdd ) || ( evt instanceof RepositoryConfigurationUpdatedEvent );
    }
    public void inspect( Event evt )
    {
        Repository repository = null;
        if ( evt instanceof RepositoryRegistryEventAdd )
        {
            repository = ( (RepositoryRegistryEventAdd) evt ).getRepository();
        }
        else
        {
            repository = ( (RepositoryConfigurationUpd

        }
        if ( repository.getRepositoryContentClass().isCompatible( maven2ContentClass )
            || repository.getRepositoryContentClass().isCompatible( maven1ContentClass ) )
        {
            if ( LocalStatus.OUT_OF_SERVICE.equals( repository.getLocalStatus() ) )
            {
                return;
            }
            String repositoryUrl = null;
            String repositoryLocalUrl = null;
            List<RepositoryMirrorMetadata> mirrors = null;
            if ( repository.getRepositoryKind().isFacetAvailable( GroupRepository.class ) )
            {
                repositoryUrl = getRepositoryLocalUrl( repository );
                repositoryLocalUrl = null;
            }
            else if ( repository.getRepositoryKind().isFacetAvailable( MavenRepository.class ) )
            {
                MavenRepository mrepository = repository.adaptToFacet( MavenRepository.class );
                if ( mrepository.getRepositoryKind().isFacetAvailable( ProxyRepo

                {
                    repositoryUrl = mrepository.adaptToFacet( ProxyRepository.class ).getRemoteUrl();
                    repositoryLocalUrl = getRepositoryLocalUrl( mrepository );
                }
                else
                {
                    repositoryUrl = getRepositoryLocalUrl( mrepository );
                    repositoryLocalUrl = null;
                }
            }
            else
            {
                return;
            }
            if ( repository.getRepositoryKind().isFacetAvailable( HostedRepository.class ) )
            {
                mirrors = getMirrors( repository.getId() );
            }
            RepositoryMetadata rm = new RepositoryMetadata();
            rm.setUrl( repositoryUrl );
            rm.setId( repository.getId() );
            rm.setName( repository.getName() );
            rm.setLayout( repository.getRepositoryContentClass().getId() );
            rm.setPolicy( getRepositoryPolicy( repository ) );
       

            if ( repositoryLocalUrl != null )
            {
                rm.setLocalUrl( repositoryLocalUrl );
            }
            if ( repository.getRepositoryKind().isFacetAvailable( GroupRepository.class ) )
            {
                List<Repository> members = repository.adaptToFacet( GroupRepository.class ).getMemberRepositories();
                List<RepositoryMemberMetadata> memberMetadatas =
                    new ArrayList<RepositoryMemberMetadata>( members.size() );
                for ( Repository member : members )
                {
                    RepositoryMemberMetadata memberMetadata = new RepositoryMemberMetadata();
                    memberMetadata.setId( member.getId() );
                    memberMetadata.setName( member.getName() );
                    memberMetadata.setUrl( getRepositoryLocalUrl( member ) );
                    memberMetadata.setPolicy( getRepositoryPolicy( member ) );
                    memberMetadatas.add( memberMetadata );


                rm.getMemberRepositories().addAll( memberMetadatas );
            }
            try
            {
                NexusRawTransport nrt = new NexusRawTransport( repository, true, false );
                repositoryMetadataHandler.writeRepositoryMetadata( rm, nrt );
                StorageFileItem file = nrt.getLastWriteFile();
                file.getAttributes().put( ContentGenerator.CONTENT_GENERATOR_ID,
                                          "NexusRepositoryMetadataContentGenerator" );
                repository.getLocalStorage().updateItemAttributes( repository, new ResourceStoreRequest( file ), file );
            }
            catch ( MetadataHandlerException e )
            {
                getLogger().info( "Could not write repository metadata!", e );
            }
            catch ( IOException e )
            {
                getLogger().warn( "IOException during write of repository metadata!", e );
            }
            catch ( Exception e )
      

                getLogger().info( "Could not save repository metadata: ", e );
            }
        }
    }
    protected String getRepositoryLocalUrl( Repository repository )
    {
        if ( repository.getRepositoryKind().isFacetAvailable( GroupRepository.class ) )
        {
            return "@rootUrl@/content/groups/" + repository.getId();
        }
        else
        {
            return "@rootUrl@/content/repositories/" + repository.getId();
        }
    }
    protected String getRepositoryPolicy( Repository repository )
    {
        if ( repository.getRepositoryKind().isFacetAvailable( MavenRepository.class ) )
        {
            return repository.adaptToFacet( MavenRepository.class ).getRepositoryPolicy().toString().toLowerCase();
        }
        else if ( repository.getRepositoryKind().isFacetAvailable( GroupRepository.class ) )
        {
            List<Repository> members = repository.adaptToFacet( GroupRepository.class ).getMemberRepositories();
            H

            for ( Repository member : members )
            {
                memberPolicies.add( getRepositoryPolicy( member ) );
            }
            if ( memberPolicies.size() == 1 )
            {
                return memberPolicies.iterator().next();
            }
            else
            {
                return RepositoryMetadata.POLICY_MIXED;
            }
        }
        else
        {
            return RepositoryMetadata.POLICY_MIXED;
        }
    }
    protected List<RepositoryMirrorMetadata> getMirrors( String repositoryId )
    {
        try
        {
            List<RepositoryMirrorMetadata> mirrors = new ArrayList<RepositoryMirrorMetadata>();
            Repository repository = repositoryRegistry.getRepository( repositoryId );
            PublishedMirrors publishedMirrors = repository.getPublishedMirrors();
            for ( Mirror mirror : (List<Mirror>) publishedMirrors.getMirrors() )
            {
                RepositoryMirrorMetadata md = new Repos
/**
 * 개요
 * - 경조관리에 대한 ServiceImpl 클래스를 정의한다.
 * 
 * 상세내용
 * - 경조관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 경조관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Service("egovCtsnnManageService")
public class EgovCtsnnManageServiceImpl extends EgovAbstractServiceImpl implements EgovCtsnnManageService {
	@Resource(name="ctsnnManageDAO")
    private CtsnnManageDAO ctsnnManageDAO;
    /** ID Generation */  
	@Resource(name="egovCtsnnManageIdGnrService")
	private EgovIdGnrService idgenCtsnnManageService;
	@Resource(name="EgovInfrmlSanctnService")
    protected EgovInfrmlSanctnService infrmlSanctnService;
	/**
	 * 경조관리정보를 관리하기 위해 등록된 경조관리 목록을 조회한다.
	 * @param ctsnnManageVO - 경조관리 VO
	 * @return List - 경조관리 목록
	 */
	public List<CtsnnManageVO> selectCtsnnManageList(CtsnnManageVO ctsnnManageVO) throws Exception{
		ctsnnManageVO.setSearchFromDate(EgovStringUtil.removeMinusChar(ctsnnManageVO.getSearchFromDate()));
		ctsnnManageVO.setSearchToDate(Egov

		List<CtsnnManageVO> result = ctsnnManageDAO.selectCtsnnManageList(ctsnnManageVO);
		int num = result.size();
	    for (int i = 0 ; i < num ; i ++ ){
	    	CtsnnManageVO ctsnnManageVO1 = result.get(i);
	    	ctsnnManageVO1.setReqstDe(EgovDateUtil.formatDate(ctsnnManageVO1.getReqstDe(), "-"));
	    	ctsnnManageVO1.setOccrrDe(EgovDateUtil.formatDate(ctsnnManageVO1.getOccrrDe(), "-"));		
	    	result.set(i, ctsnnManageVO1);
	    }	
		return result;
	}
	/**
	 * 경조관리목록 총 갯수를 조회한다.
	 * @param ctsnnManageVO - 경조관리 VO
	 * @return int - 경조관리 카운트 수
	 */
	public int selectCtsnnManageListTotCnt(CtsnnManageVO ctsnnManageVO) throws Exception {
		return ctsnnManageDAO.selectCtsnnManageListTotCnt(ctsnnManageVO);
	}
	/**
	 * 등록된 경조관리의 상세정보를 조회한다.
	 * @param ctsnnManageVO - 경조관리 VO
	 * @return CtsnnManageVO - 경조관리 VO
	 */
	public CtsnnManageVO selectCtsnnManage(CtsnnManageVO ctsnnManageVO) throws Exception {
		CtsnnManageVO ctsnnManageVOTemp = ctsnnManageDAO.selectCtsnnManage(ctsnnManageVO);
		ctsnnMa

		ctsnnManageVOTemp.setOccrrDe(EgovDateUtil.formatDate(ctsnnManageVOTemp.getOccrrDe(), "-"));		
		ctsnnManageVOTemp.setBrth(EgovDateUtil.formatDate(ctsnnManageVOTemp.getBrth(), "-"));		
		return ctsnnManageVOTemp;
	}
	/**
	 * 경조관리정보를 신규로 등록한다.
	 * @param ctsnnManage - 경조관리 model
	 */
	public void insertCtsnnManage(CtsnnManage ctsnnManage) throws Exception {
		java.util.Calendar cal = java.util.Calendar.getInstance();
    	String  sYear  =Integer.toString(cal.get(java.util.Calendar.YEAR));
    	String  sMonth =Integer.toString(cal.get(java.util.Calendar.MONTH)+1);
    	if(sMonth.length() == 1) sMonth = "0"+sMonth;
    	String  sDay   =Integer.toString(cal.get(java.util.Calendar.DATE));
    	if(sDay.length() == 1) sDay = "0"+sDay;
    	ctsnnManage.setReqstDe(sYear+sMonth+sDay);
    	
		/*
		 * 경조 승인처리  신청 
		 */
    	ctsnnManage.setReqstDe(EgovStringUtil.removeMinusChar(ctsnnManage.getReqstDe()));
    	ctsnnManage.setBrth(EgovStringUtil.removeMinusChar(ctsnnManage.getBrth()));
    	ctsn

		ctsnnManage.setInfrmlSanctnId(infrmlSanctn.getInfrmlSanctnId());
		ctsnnManage.setConfmAt(infrmlSanctn.getConfmAt());
		String	sCtsnnId = idgenCtsnnManageService.getNextStringId();
		ctsnnManage.setCtsnnId(sCtsnnId);
		
		ctsnnManageDAO.insertCtsnnManage(ctsnnManage);
	}
	/**
	 * 기 등록된 경조관리정보를 수정한다.
	 * @param ctsnnManage - 경조관리 model
	 */
	public void updtCtsnnManage(CtsnnManage ctsnnManage) throws Exception {
		ctsnnManage.setReqstDe(EgovStringUtil.removeMinusChar(ctsnnManage.getReqstDe()));
    	ctsnnManage.setBrth(EgovStringUtil.removeMinusChar(ctsnnManage.getBrth()));
    	ctsnnManage.setOccrrDe(EgovStringUtil.removeMinusChar(ctsnnManage.getOccrrDe()));
		ctsnnManage.setBrth(EgovStringUtil.removeMinusChar(ctsnnManage.getBrth()));
		ctsnnManage.setOccrrDe(EgovStringUtil.removeMinusChar(ctsnnManage.getOccrrDe()));
		ctsnnManageDAO.updtCtsnnManage(ctsnnManage);
	}
	/**
	 * 기 등록된 경조관리정보를 삭제한다.
	 * @param ctsnnManage - 경조관리 model
	 */
	public void deleteCtsnnManage(CtsnnManage ctsnn

		ctsnnManage.setReqstDe(EgovStringUtil.removeMinusChar(ctsnnManage.getReqstDe()));
    	ctsnnManage.setBrth(EgovStringUtil.removeMinusChar(ctsnnManage.getBrth()));
    	ctsnnManage.setOccrrDe(EgovStringUtil.removeMinusChar(ctsnnManage.getOccrrDe()));
		/*
		 * 포상 승인처리  삭제 infrmlSanctnService.deleteInfrmlSanctn("000", vcatnManage);
		 */
		ctsnnManageDAO.deleteCtsnnManage(ctsnnManage);
	}
	/**
	 * 경조관리정보 승인 처리를 위해 신청된 경조관리 목록을 조회한다.
	 * @param ctsnnManageVO - 경조관리 VO
	 * @return List - 경조관리 목록
	 */
	public List<CtsnnManageVO> selectCtsnnManageConfmList(CtsnnManageVO ctsnnManageVO) throws Exception{
		ctsnnManageVO.setSearchFromDate(EgovStringUtil.removeMinusChar(ctsnnManageVO.getSearchFromDate()));
		ctsnnManageVO.setSearchToDate(EgovStringUtil.removeMinusChar(ctsnnManageVO.getSearchToDate()));
		List<CtsnnManageVO> result = ctsnnManageDAO.selectCtsnnManageConfmList(ctsnnManageVO);
		int num = result.size();
	    for (int i = 0 ; i < num ; i ++ ){
	    	CtsnnManageVO ctsnnManageVO1 = 

	    	ctsnnManageVO1.setReqstDe(EgovDateUtil.formatDate(ctsnnManageVO1.getReqstDe(), "-"));
	    	ctsnnManageVO1.setOccrrDe(EgovDateUtil.formatDate(ctsnnManageVO1.getOccrrDe(), "-"));	
	    	result.set(i, ctsnnManageVO1);
	    }	
		return result;
	}
	/**
	 * 경조승인목록 총 갯수를 조회한다.
	 * @param ctsnnManageVO - 경조관리 VO
	 * @return int - 경조관리 카운트 수
	 */
	public int selectCtsnnManageConfmListTotCnt(CtsnnManageVO ctsnnManageVO) throws Exception {
		return ctsnnManageDAO.selectCtsnnManageConfmListTotCnt(ctsnnManageVO);
	}
	/**
	 * 경조정보를 승인처리 한다.
	 * @param ctsnnManage - 경조관리 model
	 */
	public void updtCtsnnManageConfm(CtsnnManage ctsnnManage) throws Exception {
		 InfrmlSanctn infrmlSanctn = new InfrmlSanctn();
		 ctsnnManage.setReqstDe(EgovStringUtil.removeMinusChar(ctsnnManage.getReqstDe()));
	     ctsnnManage.setBrth(EgovStringUtil.removeMinusChar(ctsnnManage.getBrth()));
	     ctsnnManage.setOccrrDe(EgovStringUtil.removeMinusChar(ctsnnManage.getOccrrDe()));
		 if(ctsnnManage.getConfmAt().equ
/**
 * 权限管理信息
 * 属性：唯一标识、权限编号、雇员管理、订单管理、类别管理、菜品管理
 * @author Icker
 *
 */
public class PurviewManage {
	private int id;
	private int purviewId;
	private int employeManage;
	private int orderManage;
	private int sortManage;
	private int dishManage;
	public PurviewManage() {
		super();
	}
	public PurviewManage(int purviewId, int employeManage, int orderManage,
			int sortManage, int dishManage) {
		super();
		this.purviewId = purviewId;
		this.employeManage = employeManage;
		this.orderManage = orderManage;
		this.sortManage = sortManage;
		this.dishManage = dishManage;
	}
	public PurviewManage(int id, int purviewId, int employeManage, int orderManage,
			int sortManage, int dishManage) {
		super();
		this.id = id;
		this.purviewId = purviewId;
		this.employeManage = employeManage;
		this.orderManage = orderManage;
		this.sortManage = sortManage;
		this.dishManage = dishManage;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public int getPurview
public interface HasVideoHandlers {
    HandlerRegistration addAbortHandler(VideoAbortHandler abortHandler);
    HandlerRegistration addCanPlayHandler(VideoCanPlayHandler canPlayHandler);
    HandlerRegistration addCanPlayThroughHandler(VideoCanPlayThroughHandler canPlayThroughHandler);
    HandlerRegistration addDurationChangeHandler(VideoDurationChangeHandler durationChangeHandler);
    HandlerRegistration addEmptyHandler(VideoEmptyHandler emptyHandler);
    HandlerRegistration addEndedHandler(VideoEndedHandler endedHandler);
    HandlerRegistration addErrorHandler(VideoErrorHandler errorHandler);
    HandlerRegistration addLoadDataHandler(VideoLoadDataHandler loadDataHandler);
    HandlerRegistration addLoadMetadataHandler(VideoLoadMetadataHandler loadMetadataHandler);
    HandlerRegistration addLoadStartHandler(VideoLoadStartHandler loadStartHandler);
    HandlerRegistration addPauseHanlder(VideoPauseHandler pauseHandler);
    HandlerRegistration addPlayHandler(VideoPlayHandler pla
/**
 * @author francisco
 */
public class HomeBean {
	private IProductRepository productRepository;
	private ICategoryRepository categoryRepository;
	/**
	 * @return the categoryRepository
	 */
	public ICategoryRepository getCategoryRepository() {
		return categoryRepository;
	}
	/**
	 * @param categoryRepository the categoryRepository to set
	 */
	public void setCategoryRepository(ICategoryRepository categoryRepository) {
		this.categoryRepository = categoryRepository;
	}
	public List<Product> getHighlights() {
		
		List<Product> products = productRepository.list(); 
		
		return products;
	}
	/**
	 * @return the productRepository
	 */
	public IProductRepository getProductRepository() {
		return productRepository;
	}
	/**
	 * @param productRepository the productRepository to set
	 */
	public void setProductRepository(IProductRepository productRepository) {
		this.productRepository = productRepository;
	}
	public List<Category> getTopCategories() {
		return categoryRepository.findTop5()
public class ServiceLocator {
	private static ILogicFacade logicFacade;
	private static IPostHandler postHandler;
	private static IBeerHandler beerHandler;
	private static IBarHandler barHandler;
	private static LoginHandler loginHandler;
	private static IDataHandler dataHandler;
	public static ILogicFacade getLogicFacade() {
		if (logicFacade == null)
			logicFacade = new LogicFacade();
		return logicFacade;
	}
	public static IPostHandler getPostHandler() {
		if (postHandler == null)
			postHandler = new PostHandler();
		return postHandler;
	}
	public static IBeerHandler getBeerHandler() {
		if (beerHandler == null)
			beerHandler = new BeerHandler();
		return beerHandler;
	}
	public static void setBeerHandler(IBeerHandler beerHandler) {
		ServiceLocator.beerHandler = beerHandler;
	}
	public static IBarHandler getBarHandler() {
		if (barHandler == null)
			barHandler = new BarHandler();
		return barHandler;
	}
	public static IDataHandler getDataHandler() {
		if (dataHandler == null) {
@Component
public class CmdHandlerManager {
	private static Logger logger = Slf4jLogUtils
			.getLogger(CmdHandlerManager.class);
	private Map<String, CmdHandler> cmdHandlers = new ConcurrentHashMap<String, CmdHandler>();
	public CmdHandler getCmdHandler(String cmd) {
		return cmdHandlers.get(cmd);
	}
	private void registerCmdHandler(CmdHandler handler) {
		logger.debug("register CmdHandler {} = {}", handler.getCmd(), handler);
		cmdHandlers.put(handler.getCmd(), handler);
	}
	@Autowired
	@Qualifier("userLoginHandler")
	public void setUserLoginHandler(CmdHandler handler) {
		registerCmdHandler(handler);
	}
	@Autowired
	@Qualifier("appUploadHandler")
	public void setAppUploadHandler(CmdHandler handler) {
		registerCmdHandler(handler);
	}
	@Autowired
	@Qualifier("queryFolderHandler")
	public void setQueryFolderHandler(CmdHandler handler) {
		registerCmdHandler(handler);
	}
	@Autowired
	@Qualifier("checkFileHandler")
	public void setCheckFileHandler(CmdHandler handler) {
		registerCmdHand
public class TestActiviti {
	/**使用代码创建工作流需要的23张表*/
	@Test
	public void createTable(){
		ProcessEngineConfiguration processEngineConfiguration = ProcessEngineConfiguration.createStandaloneProcessEngineConfiguration();
		processEngineConfiguration.setJdbcDriver("com.mysql.jdbc.Driver");
		processEngineConfiguration.setJdbcUsername("root");
		processEngineConfiguration.setJdbcPassword("root");
		
		/**
		 	public static final String DB_SCHEMA_UPDATE_FALSE = "false";不能自动创建表，需要表存在
  			public static final String DB_SCHEMA_UPDATE_CREATE_DROP = "create-drop";先删除表再创建表
  			public static final String DB_SCHEMA_UPDATE_TRUE = "true";如果表不存在，自动创建表
		 */
		processEngineConfiguration.setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);
		ProcessEngine processEngine = processEngineConfiguration.buildProcessEngine();
		System.out.println("processEngine:"+processEngine);
	}
	/**使用配置文件创建工作流需要的23张表*/
	@Test
	public void createTable_2(){
		
									.buildProcessEngine();
		System.out
public class ServiceFactory {
	public static SecurityService createSecurityService() {
		
		SecurityService service = SessionDecorator.<SecurityService>createProxy(new SecurityServiceImpl(), SecurityService.class);
		return service;
	}
	public static ContactService createContactService() {
		
		ContactService service = SessionDecorator.<ContactService>createProxy(new ContactServiceImpl(), ContactService.class);
		return service;
	}
	public static UserService createUserService() {
		
		UserService service = SessionDecorator.<UserService>createProxy(new UserServiceImpl(), UserService.class);
		return service;
	}
	public static RoleService createRoleService() {
		
		RoleService service = SessionDecorator.<RoleService>createProxy(new RoleServiceImpl(), RoleService.class);
		return service;
	}
	public static PermissionService createPermissionService() {
		
		PermissionService service = SessionDecorator.<PermissionService>createProxy(new PermissionServiceImpl(), PermissionService.class);
		r
/**
 * 권한관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Repository("authorManageDAO")
public class AuthorManageDAO extends EgovComAbstractDAO {
    /**
	 * 권한목록을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return List<AuthorManageVO>
	 * @exception Exception
	 */
    @SuppressWarnings("unchecked")
	public List<AuthorManageVO> selectAuthorList(AuthorManageVO authorManageVO) throws Exception {
        return (List<AuthorManageVO>) list("authorManageDAO.selectAuthorList", authorManageVO);
    }
	/**
	 * 권한을 등록한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void insertAuthor(AuthorManage authorManage) throws Exception {
        insert("authorManageDAO.insertAuthor", authorManage);
    }
    /**
	 * 권한을 수정한다.

	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void updateAuthor(AuthorManage authorManage) throws Exception {
        update("authorManageDAO.updateAuthor", authorManage);
    }
    /**
	 * 권한을 삭제한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void deleteAuthor(AuthorManage authorManage) throws Exception {
        delete("authorManageDAO.deleteAuthor", authorManage);
    }
    /**
	 * 권한을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return AuthorManageVO
	 * @exception Exception
	 */
    public AuthorManageVO selectAuthor(AuthorManageVO authorManageVO) throws Exception {
        return (AuthorManageVO) selectByPk("authorManageDAO.selectAuthor", authorManageVO);
    }
    /**
	 * 권한목록 총 갯수를 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectAuthorListTotCnt(AuthorManageVO authorManageVO)  throws Exception {
        return (Integer)getSqlMapClientTempla
/**
 * 
 */
/**
 * Class MatchingResult represents a matching result. It contains informations of 
 * matching BPEL-process, and has two subclasses ExactMatchingResult and InexactMatchingResult.
 * 
 * @author luwei
 *
 */
public class MatchingResult {
	protected String processID;
	protected String processNamespace;
	protected String processName;
	/**
	 * Creates a MatchingResult object.
	 * 
	 * @param processID
	 * @param processNamespace
	 * @param processName
	 */
	public MatchingResult(String processID, String processNamespace,
			String processName) {
		super();
		this.processID = processID;
		this.processNamespace = processNamespace;
		this.processName = processName;
	}
	public String getProcessID() {
		return processID;
	}
	public void setProcessID(String processID) {
		this.processID = processID;
	}
	public String getProcessNamespace() {
		return processNamespace;
	}
	public void setProcessNamespace(String processNamespace) {
		this.processNamespace = processNamespace;
	}
	pub
/**
 * 개요
 * - 경조관리에 대한 Service Interface를 정의한다.
 * 
 * 상세내용
 * - 경조관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 경조관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
public interface EgovCtsnnManageService {
	/**
	 * 경조관리 정보를 관리하기 위해 등록된 로그인화면이미지 목록을 조회한다.
	 * @param ctsnnManageVO - 경조관리 VO
	 * @return List - 경조관리 목록
	 */
	public List<CtsnnManageVO> selectCtsnnManageList(CtsnnManageVO ctsnnManageVO) throws Exception;
	/**
	 * 경조관리 목록 총 갯수를 조회한다.
	 * @param ctsnnManageVO - 경조관리 VO
	 * @return int - 경조관리 카운트 수
	 */
	public int selectCtsnnManageListTotCnt(CtsnnManageVO ctsnnManageVO) throws Exception ;
	/**
	 * 등록된 경조관리의 상세정보를 조회한다.
	 * @param ctsnnManageVO - 경조관리 VO
	 * @return CtsnnManageVO - 경조관리 VO
	 */
	public CtsnnManageVO selectCtsnnManage(CtsnnManageVO ctsnnManageVO) throws Exception;
	/**
	 * 경조관리 정보를 신규로 등록한다.
	 * @param ctsnnManage - 경조관리 model
	 */
	public void insertCtsnnManage(CtsnnManage ctsnnManage) throws Exception;
	/**
	 * 기 등록
public class BaseRepositoryFactoryBean<R extends JpaRepository<T, I>, T, I extends Serializable>
        extends JpaRepositoryFactoryBean<R, T, I> {
    protected RepositoryFactorySupport createRepositoryFactory(EntityManager entityManager) {
        return new BaseRepositoryFactory(entityManager);
    }
    private static class BaseRepositoryFactory<T, I extends Serializable> extends JpaRepositoryFactory {
        private EntityManager entityManager;
        public BaseRepositoryFactory(EntityManager entityManager) {
            super(entityManager);
            this.entityManager = entityManager;
        }
        @SuppressWarnings("unchecked")
        protected Object getTargetRepository(RepositoryInformation information) {
            Class<?> repositoryInterface = information.getRepositoryInterface();
            if (isBaseRepositoryInterface(repositoryInterface)) {
                return new SimpleBaseRepository<T, I>(
                        (JpaEntityInformation<T, I>) getEntit
public class AdminVo {
long id;
String username;
String password;
String email;
String image;
String type;
String role;
double balance;
int isCategoryManage;
int isMerchantManage;
int isWebsiteManage;
int isCouponManage;
int isUserManage;
int isUserSubManage;
int isCommentManage;
int isBannerManage;
int isGeneralManage;
int isCoupanReqManage;
int enebled;
String status;
String created;
String modified;
public long getId() {
	return id;
public void setId(long id) {
	this.id = id;
public String getUsername() {
	return username;
public void setUsername(String username) {
	this.username = username;
public String getPassword() {
	return password;
public void setPassword(String password) {
	this.password = password;
public String getEmail() {
	return email;
public void setEmail(String email) {
	this.email = email;
public String getImage() {
	return image;
public void setImage(String image) {
	this.image = image;
public String getType() {
	return type;
public void setType(String type) {
	this

public String getRole() {
	return role;
public void setRole(String role) {
	this.role = role;
public double getBalance() {
	return balance;
public void setBalance(double balance) {
	this.balance = balance;
public int getIsCategoryManage() {
	return isCategoryManage;
public void setIsCategoryManage(int isCategoryManage) {
	this.isCategoryManage = isCategoryManage;
public int getIsMerchantManage() {
	return isMerchantManage;
public void setIsMerchantManage(int isMerchantManage) {
	this.isMerchantManage = isMerchantManage;
public int getIsWebsiteManage() {
	return isWebsiteManage;
public void setIsWebsiteManage(int isWebsiteManage) {
	this.isWebsiteManage = isWebsiteManage;
public int getIsCouponManage() {
	return isCouponManage;
public void setIsCouponManage(int isCouponManage) {
	this.isCouponManage = isCouponManage;
public int getIsUserManage() {
	return isUserManage;
public void setIsUserManage(int isUserManage) {
	this.isUserManage = isUserManage;
public int getIsUserSubManage() {
	

public void setIsUserSubManage(int isUserSubManage) {
	this.isUserSubManage = isUserSubManage;
public int getIsCommentManage() {
	return isCommentManage;
public void setIsCommentManage(int isCommentManage) {
	this.isCommentManage = isCommentManage;
public int getIsBannerManage() {
	return isBannerManage;
public void setIsBannerManage(int isBannerManage) {
	this.isBannerManage = isBannerManage;
public int getIsGeneralManage() {
	return isGeneralManage;
public void setIsGeneralManage(int isGeneralManage) {
	this.isGeneralManage = isGeneralManage;
public int getIsCoupanReqManage() {
	return isCoupanReqManage;
public void setIsCoupanReqManage(int isCoupanReqManage) {
	this.isCoupanReqManage = isCoupanReqManage;
public int getEnebled() {
	return enebled;
public void setEnebled(int enebled) {
	this.enebled = enebled;
public String getStatus() {
	return status;
public void setStatus(String status) {
	this.status = status;
public String getCreated() {
	return created;
public void setCreated(S
public class JPAProcessInstanceManager implements ProcessInstanceManager {
    private EntityManager manager;
    private WorkingMemory workingMemory;
    
    public void setEntityManager(EntityManager manager) {
        this.manager = manager;
    }
    
    public void setWorkingMemory(WorkingMemory workingMemory) {
        this.workingMemory = workingMemory;
    }
    
    public void addProcessInstance(ProcessInstance processInstance) {
        ProcessInstanceInfo processInstanceInfo = new ProcessInstanceInfo(processInstance);
        manager.persist(processInstanceInfo);
        ((ProcessInstance) processInstance).setId(processInstanceInfo.getId());
        processInstanceInfo.updateLastReadDate();
    }
    
    public void internalAddProcessInstance(ProcessInstance processInstance) {
    }
    public ProcessInstance getProcessInstance(long id) {
        ProcessInstanceInfo processInstanceInfo = manager.find(ProcessInstanceInfo.class, id);
        if (processInstanceInfo == null

            return null;
        }
        processInstanceInfo.updateLastReadDate();
        ProcessInstance processInstance = (ProcessInstance) processInstanceInfo.getProcessInstance();
        Process process = ((InternalRuleBase) workingMemory.getRuleBase()).getProcess(processInstance.getProcessId());
        if (process == null) {
        	throw new IllegalArgumentException(
    			"Could not find process " + processInstance.getProcessId());
        }
        processInstance.setProcess(process);
        if (processInstance.getWorkingMemory() == null) {
            processInstance.setWorkingMemory((InternalWorkingMemory) workingMemory);
            ((ProcessInstanceImpl) processInstance).reconnect();
        }
        return processInstance;
    }
	public Collection<ProcessInstance> getProcessInstances() {
        return new ArrayList<ProcessInstance>();
    }
    public void removeProcessInstance(ProcessInstance processInstance) {
        ProcessInstanceInfo processInstanceInfo = 
/**
 * 설문템플릿 Dao Class 구현
 * @author 공통서비스 장동한
 * @since 2009.03.20
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  장동한          최초 생성
 *
 * </pre>
 */
@Repository("qustnrTmplatManageDao")
public class QustnrTmplatManageDao extends EgovComAbstractDAO {
    /**
	 * 템플릿파일명을 조회한다.
	 * @param qustnrTmplatManageVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	public Map<?, ?> selectQustnrTmplatManageTmplatImagepathnm(QustnrTmplatManageVO qustnrTmplatManageVO){
		return (Map<?, ?>)select("QustnrTmplatManage.selectQustnrTmplatManageTmplatImagepathnm", qustnrTmplatManageVO);
	}
	/**
	 * 설문템플릿 목록을 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	public List<?> selectQustnrTmplatManageList(ComDefaultVO searchVO){
		return list("QustnrTmplatManage.selectQustnrTmplatManage", searchVO);
	}
    /**
	 * 설문템플릿를(을) 상

	 * @param QustnrTmplatManage - 회정정보가 담김 VO
	 * @return List
	 * @throws Exception
	 */
	public List<?> selectQustnrTmplatManageDetail(QustnrTmplatManageVO qustnrTmplatManageVO){
		return list("QustnrTmplatManage.selectQustnrTmplatManageDetail", qustnrTmplatManageVO);
	}
    /**
	 * 설문템플릿를(을) 목록 전체 건수를(을) 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return int
	 * @throws Exception
	 */
	public int selectQustnrTmplatManageListCnt(ComDefaultVO searchVO){
		return (Integer)select("QustnrTmplatManage.selectQustnrTmplatManageCnt", searchVO);
	}
    /**
	 * 설문템플릿를(을) 등록한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @throws Exception
	 */
	public void insertQustnrTmplatManage(QustnrTmplatManageVO qustnrTmplatManageVO){
		insert("QustnrTmplatManage.insertQustnrTmplatManage", qustnrTmplatManageVO);
	}
    /**
	 * 설문템플릿를(을) 수정한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @throws Exception
	 */
	public void updateQustnrTmplatManage(QustnrTmplatManageVO qustnrTmplatManageVO){
		insert("QustnrTmplat
public class HibernateRepositoryFactory implements RepositoryFactory {
	private static RepositoryFactory repositoryFactory;
	private TaxiParkRepository taxiParkRepository;
	private TaxiCarRepository taxiCarRepository;
	private TaxiDriverRepository taxiDriverRepository;
	public static RepositoryFactory getFactory() {
		if (repositoryFactory == null) {
			repositoryFactory = new HibernateRepositoryFactory();
		}
		return repositoryFactory;
	}
	@Override
	public TaxiParkRepository getTaxiParkRepository() {
		if (taxiParkRepository == null) {
			taxiParkRepository = new HibernateTaxiParkRepository(
					SessionFactoryHolder.getSessionFactory());
		}
		return taxiParkRepository;
	}
	@Override
	public TaxiCarRepository getCarRepository() {
		if (taxiCarRepository == null) {
			taxiCarRepository = new HibernateTaxiCarRepository(
					SessionFactoryHolder.getSessionFactory());
		}
		return taxiCarRepository;
	}
	@Override
	public TaxiDriverRepository getDriverRepository() {
		if (taxiDriverRep
@Controller
@Scope("request")
public class ManageRoleResourcesController {
	public static final String MODULE_PATH = "manage/manageRoleResources/";
	@Resource
	private ManageRoleResourcesService manageRoleResourcesServiceImpl;
	@Resource
	private ResourcesService resourcesService;
	@RequestMapping(value = "/manage/manageRoleResources/manager")
	public String manager() {
		return MODULE_PATH + "manager";
	}
	@RequestMapping(value = "/manage/manageRoleResources/query")
	public String query(ManageRoleResources manageRoleResources, 
		Integer page, Integer rows, String orderBy, String sortBy, Model model) {
		if(null == manageRoleResources){
			return MODULE_PATH + "resourceList";
		}
		List<Resources> resourceList = resourcesService.findAll();
		Map<String, Object> params = manageRoleResources.toHashMap();
		params.put("manageRoleId", manageRoleResources.getManageRoleId());
		Pager<ManageRoleResources> pager = manageRoleResourcesServiceImpl.queryPage(params, 1, Integer.MAX_VALUE);
		if (n

			for (ManageRoleResources mr : pager.getDataList()) {
				Resources r = new Resources();
				r.setId(mr.getResourceId());
				for(Resources rs : resourceList){
					if(rs.equals(r)){
						rs.setAttribute5("1");
						continue;
					}
				}
			}
		}
		model.addAttribute("list", resourceList);
		return MODULE_PATH + "resourceList";
	}
	@RequestMapping(value = "/manage/manageRoleResources/toAdd")
	public String toAdd(){
		return MODULE_PATH + "add";
	}
	@RequestMapping(value = "/manage/manageRoleResources/add")
	@ResponseBody
	public String add(ManageRoleResourcesArray manageRoleResourcesArray, Integer roleId) {
		Map<String, Object> condition = new HashMap<String, Object>();
		if (null != roleId) {
			condition.put("manageRoleId", roleId);
		} else {
			condition.put("manageRoleId", manageRoleResourcesArray
					.getManageRoleResourcesArray().get(0).getManageRoleId());
		}
		manageRoleResourcesServiceImpl.deleteByCondition(condition);
		if (null != manageRoleResourcesArray.getManageR

				&& manageRoleResourcesArray.getManageRoleResourcesArray()
						.size() > 0) {
			for (ManageRoleResources m : manageRoleResourcesArray
					.getManageRoleResourcesArray()) {
				manageRoleResourcesServiceImpl.save(m);
			}
		}
		return "1";
	}
	@RequestMapping(value = "/manage/manageRoleResources/toEdit")
	public String toEdit(Model model, Integer id){
		ManageRoleResources manageRoleResources = manageRoleResourcesServiceImpl.fetch(id);
		model.addAttribute("manageRoleResources", manageRoleResources);
		return MODULE_PATH + "edit";
	}
	@RequestMapping(value = "/manage/manageRoleResources/edit")
	@ResponseBody
	public String edit(ManageRoleResources manageRoleResources){
		manageRoleResourcesServiceImpl.saveOrUpdate(manageRoleResources);
		return "1";
	}
	@RequestMapping(value = "/manage/manageRoleResources/deleteByIds")
	@ResponseBody
	public String deleteByIds(ManageRoleResourcesArray array){
		if(null != array && null != array.getManageRoleResourcesArray()){
			for(ManageRoleRe
public class RepositoryFixtures {
    private RepositoryFixtures() {
    }
    public static class FakeReadableRepositoryDsl<T extends Resource> {
        private final ReadableRepository<T> repository;
        public FakeReadableRepositoryDsl(ReadableRepository<T> repository) {
            this.repository = repository;
        }
        public void toReturn(List<T> resources) {
            when(repository.all()).thenReturn(Observable.just(resources));
            when(repository.find(anyString())).thenAnswer(invocation -> {
                String id = (String) invocation.getArguments()[0];
                T resource = FluentIterable.from(resources)
                        .firstMatch(x -> x.getId().equals(id))
                        .get();
                return Observable.just(resource);
            });
        }
        public void toErrorWith(Throwable error) {
            when(repository.all()).thenReturn(Observable.error(error));
        }
    }
    public static class Readable

        private final ReadableRepository<T> repository;
        private final String id;
        public ReadableRepositoryFindDsl(ReadableRepository<T> repository, String id) {
            this.repository = repository;
            this.id = id;
        }
        public void toReturn(T resource) {
            when(repository.find(id)).thenReturn(Observable.just(resource));
        }
        public void toErrorWith(Throwable throwable) {
            when(repository.find(id)).thenReturn(Observable.error(throwable));
        }
    }
    public static class SearchableRepositoryDsl<T extends Resource> {
        private final SearchableRepository<T> repository;
        private final String query;
        public SearchableRepositoryDsl(SearchableRepository<T> repository, String query) {
            this.repository = repository;
            this.query = query;
        }
        public void toReturn(List<T> resources) {
            when(repository.search(query)).thenReturn(Observable.just(resou

        }
        public void toErrorWith(Throwable throwable) {
            when(repository.search(query)).thenReturn(Observable.error(throwable));
        }
    }
    public static <T extends Resource> FakeReadableRepositoryDsl<T> stub(ReadableRepository<T> repository) {
        return new FakeReadableRepositoryDsl<>(repository);
    }
    public static <T extends Resource> ReadableRepositoryFindDsl<T> stubFind(ReadableRepository<T> repository, String id) {
        return new ReadableRepositoryFindDsl<>(repository, id);
    }
    public static <T extends Resource> SearchableRepositoryDsl<T> stubSearch(SearchableRepository<T> repository, String query) {
        return new SearchableRepositoryDsl<>(repository, query);
    }
    public static class FakeTimelineEventsRepositoryDsl extends FakeReadableRepositoryDsl<Event> {
        private final TimelineEventsRepository repository;
        public FakeTimelineEventsRepositoryDsl(TimelineEventsRepository repository) {
            super(rep
public class Tests {
	public void testLoad(){
		
		try{
			Util.init();
		}
		catch(IOException e){
			
			e.printStackTrace();
		}
		
		Core core = new Core(1);
		Process pt  =  Util.queueProcess.get(0);
		Process pt1  =  Util.queueProcess.get(1);
		Process pt2  =  Util.queueProcess.get(2);
		Process pt3  =  Util.queueProcess.get(3);
		Process pt4 = Util.queueProcess.get(4);
		
		core.putProcess(pt);
		core.putProcess(pt1);
		core.putProcess(pt2);
		core.putProcess(pt3);
		core.putProcess(pt4);
		
		for (Process process : Util.queueProcess){
			
			System.out.println(process.toString());			
		}
		
	}
	public void testProcessInCore(){
		try{
			Util.init(); 
		}
		catch(IOException e){
			e.printStackTrace();
		}
		
		Core core = new Core(1);
		Process pt  =  Util.queueProcess.get(0);
		Process pt1  =  Util.queueProcess.get(1);
		Process pt2  =  Util.queueProcess.get(2);
		Process pt3  =  Util.queueProcess.get(3);
		Process pt4 = Util.queueProcess.get(4);
		
		core.putProcess(pt);
		co

		core.putProcess(pt2);
		core.putProcess(pt3);
		core.putProcess(pt4);
		
		for (Process process : Util.queueProcess) {
			System.out.println(process.toString());
		}
		
	}
	public void testProcessInCoreCacheMiss(){
		try{
			Util.init(); 
		}
		catch(IOException e){
			e.printStackTrace();
		}
		
		CoreCacheMiss core = new CoreCacheMiss(1);
		Process pt  =  Util.queueProcess.get(0);
		Process pt1  =  Util.queueProcess.get(1);
		Process pt2  =  Util.queueProcess.get(2);
		Process pt3  =  Util.queueProcess.get(3);
		Process pt4 = Util.queueProcess.get(4);
		
		core.putProcess(pt);
		core.putProcess(pt1);
		core.putProcess(pt2);
		core.putProcess(pt3);
		core.putProcess(pt4);
		
		for (Process process : Util.queueProcess) {
			System.out.println(process.toString());
		}
		
	}
		public void testProcessInCoreAccessMemory(){
			try{
				Util.init(); 
			}
			catch(IOException e){
				e.printStackTrace();
			}
			
			CoreAccessMemory core = new CoreAccessMemory(1);
			Process pt  =  Util.q

			Process pt1  =  Util.queueProcess.get(1);
			Process pt2  =  Util.queueProcess.get(2);
			Process pt3  =  Util.queueProcess.get(3);
			Process pt4 = Util.queueProcess.get(4);
			
			core.putProcess(pt);
			core.putProcess(pt1);
			core.putProcess(pt2);
			core.putProcess(pt3);
			core.putProcess(pt4);
			
			for (Process process : Util.queueProcess) {
				System.out.println(process.toString());
			}
			
		}
	public void testProcessInCoreCalculations() {
		try {
			Util.init();
		} catch (IOException e) {
			e.printStackTrace();
		}
		CoreCalculations core = new CoreCalculations(1);
		Process pt = Util.queueProcess.get(0);
		Process pt1 = Util.queueProcess.get(1);
		Process pt2 = Util.queueProcess.get(2);
		Process pt3 = Util.queueProcess.get(3);
		Process pt4 = Util.queueProcess.get(4);
		core.putProcess(pt);
		core.putProcess(pt1);
		core.putProcess(pt2);
		core.putProcess(pt3);
		core.putProcess(pt4);
		for (Process process : Util.queueProcess) {
			System.out.println(process.toS

		}
	}
	public void testScheduler(){
				
		Scheduler scheduler = new Scheduler();
		
		try {
			Util.init();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		while(Util.numProcess < Util.numProcessTotal){
			
			for (Process process : Util.queueProcess)			
				if(process.getTimeArriving() == Util.timeClock)
					Util.addProcessInQueueReady(process);
		
			for(Process process : Util.queueReady){
				if(!scheduler.chooseCore(process))
					break;
			}
			
			
			Util.executeCores();
			Util.plusTimerClock();
		}
		
		for (Process process : Util.queueFinished) {
			System.out.println(process.toString());
		}
		
	}
/*	
	public void testeSchedulerFIFO() {
		
		SchedulerFIFO schedulerFIFO = new SchedulerFIFO();
		
		try {
			Util.init();
		} catch (IOException e) {
			e.printStackTrace();
		}
		Process pt = Util.queueProcess.get(0);
		Process pt1 = Util.queueProcess.get(1);
		Process pt2 = Util.queueProcess.get(2);
		Process pt3 = Util.queueProcess.get(3);
		Process pt4 = Util.

		
		while(Util.timeClock <= 50){
			
			schedulerFIFO.alocaProcess(pt);
			schedulerFIFO.alocaProcess(pt1);
			schedulerFIFO.alocaProcess(pt2);
			schedulerFIFO.alocaProcess(pt3);
			schedulerFIFO.alocaProcess(pt4);
			
			
		}
		
		for (Process process : Util.queueProcess) {
			System.out.println(process.toString());
		}
		
	}*/
	public static void main(String[] args) {
		
		Tests test = new Tests();
		
		/*System.out.println("Test Load from file");
		test.testLoad();
		
		System.out.println("\n Test process in core");
		test.testProcessInCore();
		
		System.out.println("\n Teste process in Core Cache Miss");
		test.testProcessInCoreCacheMiss();
		
		System.out.println("\n Tests process in core Access Mememory");
		test.testProcessInCoreAccessMemory();
		
		System.out.println("\n Tests process in core Calculations");
		test.testProcessInCoreCalculations();
		
		System.out.println("\n Tests Scheduler");
		test.testScheduler();
		
		System.out.println("\n Tests SchedulerFIFO");
		test
public interface Pipeline {
    void addFirst(Handler handler);
    void addFirst(HandlerContextInvoker invoker, Handler handler);
    void addFirst(EventExecutor executor, Handler handler);
    void addFirst(String name, Handler handler);
    void addFirst(HandlerContextInvoker invoker, String name, Handler handler);
    void addFirst(EventExecutor executor, String name, Handler handler);
    void addLast(Handler handler);
    void addLast(HandlerContextInvoker invoker, Handler handler);
    void addLast(EventExecutor executor, Handler handler);
    void addLast(String name, Handler handler);
    void addLast(HandlerContextInvoker invoker, String name, Handler handler);
    void addLast(EventExecutor executor, String name, Handler handler);
    void addBefore(Handler handler, Handler before);
    void addBefore(HandlerContextInvoker invoker, Handler handler, Handler before);
    void addBefore(EventExecutor executor, Handler handler, Handler before);
    void addBefore(Handler handler

    void addBefore(HandlerContextInvoker invoker, Handler handler, String beforeName);
    void addBefore(EventExecutor executor, Handler handler, String beforeName);
    void addBefore(String name, Handler handler, Handler before);
    void addBefore(HandlerContextInvoker invoker, String name, Handler handler, Handler before);
    void addBefore(EventExecutor executor, String name, Handler handler, Handler before);
    void addBefore(String name, Handler handler, String beforeName);
    void addBefore(HandlerContextInvoker invoker, String name, Handler handler, String beforeName);
    void addBefore(EventExecutor executor, String name, Handler handler, String beforeName);
    void addAfter(Handler handler, Handler after);
    void addAfter(HandlerContextInvoker invoker, Handler handler, Handler after);
    void addAfter(EventExecutor executor, Handler handler, Handler after);
    void addAfter(Handler handler, String afterName);
    void addAfter(HandlerContextInvoker invoker, Handle

    void addAfter(EventExecutor executor, Handler handler, String afterName);
    void addAfter(String name, Handler handler, Handler after);
    void addAfter(HandlerContextInvoker invoker, String name, Handler handler, Handler after);
    void addAfter(EventExecutor executor, String name, Handler handler, Handler after);
    void addAfter(String name, Handler handler, String afterName);
    void addAfter(HandlerContextInvoker invoker, String name, Handler handler, String afterName);
    void addAfter(EventExecutor executor, String name, Handler handler, String afterName);
    void remove(Handler handler);
    void remove(String name);
    void clear();
    void copy(Pipeline pipeline);
    void fireRegistered();
    void fireUnregistered();
    void fireOpen();
    void fireMessageReceived(Object message);
    void fireExceptionCaught(Throwable e);
    void fireRead(ChannelPromise channelPromise);
    void fireMessageSent(Object message, ChannelPromise channelPromise);
    void fire
@Entity
@Table(name = "xx_service")
@SequenceGenerator(name = "sequenceGenerator", sequenceName = "xx_service_sequence")
public class SiteService extends BaseEntity{
	/**
	 * 
	 */
	private static final long serialVersionUID = -3929195901282530124L;
	/** 网点名称 */
	private String serviceName;
	/** 联系人 */
	private String serviceMan;
	/** 联系电话 */
	private String servicePhone;
	/** 邮箱 */
	private String serviceEmail;
	/** 固定电话 */
	private String serviceTel;
	/** 省份 */
	private String serviceProvince;
	/** 市 */
	private String servicePcity;
	/** 区 */
	private String serviceCity;
	/** 地址 */
	private String serviceAddress;
	/** 网点是否可用*/
	private Integer serviceDisabled;
	/** 是否安装网点 */
	private Integer serviceIsinstall;
	/** 是否维修网点 */
	private Integer serviceIsmaintenance;
	/** 网点是否门店 */
	private Integer serviceIsstore;
	@Column(nullable = true)
	public String getServiceName() {
		return serviceName;
	}
	public void setServiceName(String serviceName) {
		this.serviceName = serviceName;
	}
	@Col

	public String getServiceMan() {
		return serviceMan;
	}
	public void setServiceMan(String serviceMan) {
		this.serviceMan = serviceMan;
	}
	@Column(nullable = true)
	public String getServicePhone() {
		return servicePhone;
	}
	public void setServicePhone(String servicePhone) {
		this.servicePhone = servicePhone;
	}
	@Column(nullable = true)
	public String getServiceEmail() {
		return serviceEmail;
	}
	public void setServiceEmail(String serviceEmail) {
		this.serviceEmail = serviceEmail;
	}
	@Column(nullable = true)
	public String getServiceTel() {
		return serviceTel;
	}
	public void setServiceTel(String serviceTel) {
		this.serviceTel = serviceTel;
	}
	@Column(nullable = true)
	public String getServiceProvince() {
		return serviceProvince;
	}
	public void setServiceProvince(String serviceProvince) {
		this.serviceProvince = serviceProvince;
	}
	@Column(nullable = true)
	public String getServicePcity() {
		return servicePcity;
	}
	public void setServicePcity(String servicePcity) {
		

	}
	@Column(nullable = true)
	public String getServiceCity() {
		return serviceCity;
	}
	public void setServiceCity(String serviceCity) {
		this.serviceCity = serviceCity;
	}
	@Column(nullable = true)
	public String getServiceAddress() {
		return serviceAddress;
	}
	public void setServiceAddress(String serviceAddress) {
		this.serviceAddress = serviceAddress;
	}
	@Column(nullable = true)
	public Integer getServiceDisabled() {
		return serviceDisabled;
	}
	public void setServiceDisabled(Integer serviceDisabled) {
		this.serviceDisabled = serviceDisabled;
	}
	@Column(nullable = true)
	public Integer getServiceIsinstall() {
		return serviceIsinstall;
	}
	public void setServiceIsinstall(Integer serviceIsinstall) {
		this.serviceIsinstall = serviceIsinstall;
	}
	@Column(nullable = true)
	public Integer getServiceIsmaintenance() {
		return serviceIsmaintenance;
	}
	public void setServiceIsmaintenance(Integer serviceIsmaintenance) {
		this.serviceIsmaintenance = serviceIsmaintenance;
	}
	@Co
public class HxServiceTicketVO {
	private HxServiceCustomer serviceCustomer;
	private HxServiceProduct serviceProduct;
	private HxServiceTicket serviceTicket; 
	private List<HxServiceTroubleInfo> serviceTroubleInfos;
	private List<HxServicePartsInfo> servicePartsInfos;
	private List<HxServiceProject> serviceProjects;
	private List<HxServiceProgressInfo> serviceProgressInfos;
	public HxServiceCustomer getServiceCustomer() {
		return serviceCustomer;
	}
	public HxServiceProduct getServiceProduct() {
		return serviceProduct;
	}
	public HxServiceTicket getServiceTicket() {
		return serviceTicket;
	}
	public List<HxServiceTroubleInfo> getServiceTroubleInfos() {
		return serviceTroubleInfos;
	}
	public List<HxServicePartsInfo> getServicePartsInfos() {
		return servicePartsInfos;
	}
	public List<HxServiceProject> getServiceProjects() {
		return serviceProjects;
	}
	public void setServiceCustomer(HxServiceCustomer serviceCustomer) {
		this.serviceCustomer = serviceCustomer;
	}
	public void set
/*
 *
 * Licensed under the Aduna BSD-style license.
 */
public class RepositoryConfigUtil {
	public static Set<String> getRepositoryIDs(Repository repository)
		throws RepositoryException
	{
		RepositoryConnection con = repository.getConnection();
		try {
			Set<String> idSet = new LinkedHashSet<String>();
			RepositoryResult<Statement> idStatementIter = con.getStatements(null, REPOSITORYID, null, true);
			try {
				while (idStatementIter.hasNext()) {
					Statement idStatement = idStatementIter.next();
					if (idStatement.getObject() instanceof Literal) {
						Literal idLiteral = (Literal)idStatement.getObject();
						idSet.add(idLiteral.getLabel());
					}
				}
			}
			finally {
				idStatementIter.close();
			}
			return idSet;
		}
		finally {
			con.close();
		}
	}
	/**
	 * Is configuration information for the specified repository ID present in
	 * the (system) repository?
	 * 
	 * @param repository
	 *        the repository to look in
	 * @param repositoryID
	 *        the r

	 * @return true if configurion information for the specified repository ID
	 *         was found, false otherwise
	 * @throws RepositoryException
	 *         if an error occurred while trying to retrieve information from the
	 *         (system) repository
	 * @throws RepositoryConfigException
	 */
	public static boolean hasRepositoryConfig(Repository repository, String repositoryID)
		throws RepositoryException, RepositoryConfigException
	{
		RepositoryConnection con = repository.getConnection();
		try {
			return getIDStatement(con, repositoryID) != null;
		}
		finally {
			con.close();
		}
	}
	public static RepositoryConfig getRepositoryConfig(Repository repository, String repositoryID)
		throws RepositoryConfigException, RepositoryException
	{
		RepositoryConnection con = repository.getConnection();
		try {
			Statement idStatement = getIDStatement(con, repositoryID);
			if (idStatement == null) {
				return null;
			}
			Resource repositoryNode = idStatement.getSubject();
			Res

			if (context == null) {
				throw new RepositoryException("No configuration context for repository " + repositoryID);
			}
			Graph contextGraph = new GraphImpl();
			con.getStatements(null, null, null, true, context).addTo(contextGraph);
			return RepositoryConfig.create(contextGraph, repositoryNode);
		}
		finally {
			con.close();
		}
	}
	/**
	 * Update the specified Repository with the specified set of
	 * RepositoryConfigs. This will overwrite all existing configurations in the
	 * Repository that have a Repository ID occurring in these RepositoryConfigs.
	 * 
	 * @param repository
	 *        The Repository whose contents will be modified.
	 * @param configs
	 *        The RepositoryConfigs that should be added to or updated in the
	 *        Repository. The RepositoryConfig's ID may already occur in the
	 *        Repository, in which case all previous configuration data for that
	 *        Repository will be cleared before the RepositoryConfig is added.
	 * @throws Repository

	 *         When access to the Repository's RepositoryConnection causes a
	 *         RepositoryException.
	 * @throws RepositoryConfigException
	 */
	public static void updateRepositoryConfigs(Repository repository, RepositoryConfig... configs)
		throws RepositoryException, RepositoryConfigException
	{
		RepositoryConnection con = repository.getConnection();
		try {
			updateRepositoryConfigs(con, configs);
		}
		finally {
			con.close();
		}
	}
	/**
	 * Update the specified RepositoryConnection with the specified set of
	 * RepositoryConfigs. This will overwrite all existing configurations in the
	 * Repository that have a Repository ID occurring in these RepositoryConfigs.
	 * 
	 * Note: this method does NOT commit the updates on the connection.
	 * 
	 * @param con
	 *        the repository connection to perform the update on
	 * @param configs
	 *        The RepositoryConfigs that should be added to or updated in the
	 *        Repository. The RepositoryConfig's ID may already occ

	 *        Repository, in which case all previous configuration data for that
	 *        Repository will be cleared before the RepositoryConfig is added.
	 * 
	 * @throws RepositoryException
	 * @throws RepositoryConfigException
	 */
	public static void updateRepositoryConfigs(RepositoryConnection con, RepositoryConfig... configs)
		throws RepositoryException, RepositoryConfigException
	{
		ValueFactory vf = con.getRepository().getValueFactory();
		boolean wasAutoCommit = con.isAutoCommit();
		con.setAutoCommit(false);
		for (RepositoryConfig config : configs) {
			Resource context = getContext(con, config.getID());
			if (context != null) {
				con.clear(context);
			}
			else {
				context = vf.createBNode();
			}
			con.add(context, RDF.TYPE, REPOSITORY_CONTEXT);
			Graph graph = new GraphImpl(vf);
			config.export(graph);
			con.add(graph, context);
		}
		con.setAutoCommit(wasAutoCommit);
	}
	/**
	 * Removes one or more Repository configurations from a Repository. Nothing
	 * happ

	 * Repository IDs.
	 * 
	 * @param repository
	 *        The Repository to remove the configurations from.
	 * @param repositoryIDs
	 *        The IDs of the Repositories whose configurations need to be
	 *        removed.
	 * @throws RepositoryException
	 *         Whenever access to the Repository's RepositoryConnection causes a
	 *         RepositoryException.
	 * @throws RepositoryConfigException
	 */
	public static boolean removeRepositoryConfigs(Repository repository, String... repositoryIDs)
		throws RepositoryException, RepositoryConfigException
	{
		boolean changed = false;
		RepositoryConnection con = repository.getConnection();
		try {
			con.setAutoCommit(false);
			for (String id : repositoryIDs) {
				Resource context = getContext(con, id);
				if (context != null) {
					con.clear(context);
					con.remove(context, RDF.TYPE, REPOSITORY_CONTEXT);
					changed = true;
				}
			}
			con.commit();
		}
		finally {
			con.close();
		}
		return changed;
	}
	public static Reso
public class MockServiceFactory implements ServiceFactory
    private CityService cityService = mock(CityService.class);
    private FacultyService facultyService = mock(FacultyService.class);
    private GradeService gradeService = mock(GradeService.class);
    private GroupService groupService = mock(GroupService.class);
    private LanguageService languageService = mock(LanguageService.class);
    private UserDetailsService userDetailsService = mock(UserDetailsService.class);
    private NewsService newsService = mock(NewsService.class);
    private PersonService personService = mock(PersonService.class);
    private PictureService pictureService = mock(PictureService.class);
    private StudentService studentService = mock(StudentService.class);
    private SubjectService subjectService = mock(SubjectService.class);
    private TeacherService teacherService = mock(TeacherService.class);
    private UniversityService universityService = mock(UniversityService.class);
    @Override
 

    {
        return cityService;
    }
    @Override
    public FacultyService getFacultyService()
    {
        return facultyService;
    }
    @Override
    public GradeService getGradeService()
    {
        return gradeService;
    }
    @Override
    public GroupService getGroupService()
    {
        return groupService;
    }
    @Override
    public LanguageService getLanguageService()
    {
        return languageService;
    }
    @Override
    public UserDetailsService getUserDetailsService()
    {
        return userDetailsService;
    }
    @Override
    public NewsService getNewsService()
    {
        return newsService;
    }
    @Override
    public PersonService getPersonService()
    {
        return personService;
    }
    @Override
    public PictureService getPictureService()
    {
        return pictureService;
    }
    @Override
    public StudentService getStudentService()
    {
        return studentService;
    }
    @Override
    public SubjectService g
/**
 * 권한별 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Repository("authorRoleManageDAO")
public class AuthorRoleManageDAO extends EgovComAbstractDAO {
	/**
	 * 권한 롤 관계정보를 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return AuthorRoleManageVO
	 * @exception Exception
	 */
	public AuthorRoleManageVO selectAuthorRole(AuthorRoleManageVO authorRoleManageVO) throws Exception {
		return (AuthorRoleManageVO) select("authorRoleManageDAO.selectAuthorRole", authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보 목록 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return List<AuthorRoleManageVO>
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<AuthorRoleManageVO> selectAuthorRoleList(AuthorRoleManageVO authorRoleManageVO

		return (List<AuthorRoleManageVO>) list("authorRoleManageDAO.selectAuthorRoleList", authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보를 화면에서 입력하여 입력항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void insertAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		insert("authorRoleManageDAO.insertAuthorRole", authorRoleManage);
	}
	/**
	 * 수정된 권한 롤 관계정보를 데이터베이스에 반영
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void updateAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		update("authorRoleManageDAO.updateAuthorRole", authorRoleManage);
	}
	/**
	 * 권한 롤 관계정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void deleteAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		delete("authorRoleManageDAO.deleteAuthorRole", authorRoleManage);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @param authorRoleManageVO AuthorRole
public class SubscriptionCacheFactory implements Factory<SubscriptionsCache> {
    private final InternalNotificationsBus notificationsBus;
    private final GroupRepository groupRepository;
    private final TopicRepository topicRepository;
    private final SubscriptionRepository subscriptionRepository;
    @Inject
    public SubscriptionCacheFactory(InternalNotificationsBus notificationsBus,
                                    GroupRepository groupRepository,
                                    TopicRepository topicRepository,
                                    SubscriptionRepository subscriptionRepository) {
        this.notificationsBus = notificationsBus;
        this.groupRepository = groupRepository;
        this.topicRepository = topicRepository;
        this.subscriptionRepository = subscriptionRepository;
    }
    @Override
    public SubscriptionsCache provide() {
        SubscriptionsCache cache = new NotificationsBasedSubscriptionCache(
                notificationsBus,
public class PersistenceFactoryImpl implements PersistenceFactory {
    private final HashMap<Class<?>, JpaRepository> repositories = new HashMap<Class<?>, JpaRepository>();
    public PersistenceFactoryImpl(EntityManager entityManager) {
        UserJpaRepository userJpaRepository = new UserJpaRepository();
        userJpaRepository.setEntityManager(entityManager);
        repositories.put(UserJpaRepository.class, userJpaRepository);
    
        AuthTokenJpaRepository authTokenJpaRepository = new AuthTokenJpaRepository();
        authTokenJpaRepository.setEntityManager(entityManager);
        repositories.put(AuthTokenJpaRepository.class, authTokenJpaRepository);
    
        TenantJpaRepository tenantJpaRepository = new TenantJpaRepository();
        tenantJpaRepository.setEntityManager(entityManager);
        repositories.put(TenantJpaRepository.class, tenantJpaRepository);
    }
	public UserJpaRepository userJpaRepository() {
		return (UserJpaRepository) repositories.get(UserJpaRe
/**
 * <p>Title: Handler工具类</p>
 * <p>Description: 所有的Handler都要通过此类注册</p>
 * @author zhangzuoqiang
 * <br/>Date: 2011-3-6
 */
public final class HandlerManager{
	public static void AddHandlerListener(){
		
		Notifier notifier = Notifier.getNotifier();
		
		
		LogHandler loger = new LogHandler();
		ServerHandler server = new ServerHandler();
		TimeHandler timer = new TimeHandler();
		RegisterHandler register = new RegisterHandler();
		LoginHandler login = new LoginHandler();
		BaseInfoHandler basicInfo = new BaseInfoHandler();
		ContactInfoHandler contactInfo = new ContactInfoHandler();
		ModifyPwdHandler modify = new ModifyPwdHandler();
		BindMobileHandler bindMobile = new BindMobileHandler();
		SetPositionHandler setPosition = new SetPositionHandler();
		MobileTipsHandler tips = new MobileTipsHandler();
		PositionListHandler positionList = new PositionListHandler();
		EmailHandler email = new EmailHandler();
		HelpHandler help = new HelpHandler();
		SuggestionHandler suggestion = new 
@org.springframework.stereotype.Service("serviceService")
public class ServiceServiceImpl implements ServiceService {
    @Autowired
    private ServiceDataService serviceDataService;
    @Override
    @Transactional
    public List<Service> allServices() {
        return serviceDataService.retrieveAll();
    }
    @Override
    @Transactional
    public void deleteAll() {
        serviceDataService.deleteAll();
    }
    @Override
    @Transactional
    public Service getServiceByEntityID(String entityID) {
        return serviceDataService.findByEntityID(entityID);
    }
    @Override
    @Transactional
    public void update(Service service) {
        delete(service.getEntityID());
        serviceDataService.create(service);
    }
    @Override
    @Transactional
    public void delete(String entityID) {
        Service service = getServiceByEntityID(entityID);
        if (service != null) {
            serviceDataService.delete(service);
        }
    }
    @Override
    @Transacti
/**
 * 롤관리에 관한 서비스 인터페이스 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  이문준          최초 생성
 *
 * </pre>
 */
public interface EgovRoleManageService {
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception;
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception;
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception;
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 *
@Service
@Transactional
public class LocationManageImpl implements LocationManage {
	@Autowired
	LocationManageDao locationManageDao;
	/**
	 * 查询一级位置管理列表
	 */
	@Override
	public List<Object> findLocationManageList(HashMap<String, Object> manage) {
		return locationManageDao.findLocationManageList(manage);
	}
	@Override
	public Object findLocationManageCount() {
		return locationManageDao.findLocationManageCount();
	}
	@Override
	public Long delLocationmanage(String loctionManageIds) {
		if (loctionManageIds != null && loctionManageIds.trim().length() > 0
				&& !loctionManageIds.equals("")) {
			String[] arry = loctionManageIds.split(",");
			for (int i = 0; i < arry.length; i++) {
				locationManageDao.delLocationmanage(arry[i]);
			}
		}
		return (long) 1;
	}
	@Override
	public List<Object> findLocationManageSubsetList(
			HashMap<String, Object> sublm) {
		return locationManageDao.findLocationManageSubsetList(sublm);
	}
	@Override
	public Object findLocationManageSubsetListCount(
		
/**
 * Adapts the WS Services JAXB responses to the {@link ProcessService} interface. 
 * 
 * @see ProcessService
 * 
 * @author bradsdavis
 *
 */
public class ProcessServiceAdapter implements ProcessService {
	private final ProcessServiceWS processService;
	public ProcessServiceAdapter(ProcessServiceWS restService) {
		this.processService = restService;
	}
	@Override
	public ProcessInstance startProcess(KieReleaseId releaseId, String processId) {
		JaxbInitializeProcessRequest request = new JaxbInitializeProcessRequest();
		request.setReleaseId(releaseId);
		
		return this.processService.startProcess(processId, request);
	}
	@Override
	public ProcessInstance startProcess(KieReleaseId releaseId, String processId, Map<String, Object> parameters) {
		try {
			JaxbInitializeProcessRequest request = new JaxbInitializeProcessRequest();
			request.setReleaseId(releaseId);
			request.setVariables(parameters);
			
			return this.processService.startProcess(processId, request);
		} catch (Excep

			throw new RemoteServiceException(e);
		}
	}
	@Override
	public void signalEvent(long processInstanceId, String type, Object event) {
		this.processService.signalEvent(processInstanceId, type, event);
	}
	@Override
	public ProcessInstance getProcessInstance(long processInstanceId) {
		return this.processService.getProcessInstance(processInstanceId);
	}
	@Override
	public void abortProcessInstance(long processInstanceId) {
		this.processService.abortProcessInstance(processInstanceId);
	}
	@Override
	public void setProcessInstanceVariable(long processInstanceId, String variableName, Object variable) {
		JaxbObjectRequest request = new JaxbObjectRequest((Serializable)variable);
		this.processService.setProcessInstanceVariable(processInstanceId, variableName, request);
	}
	@Override
	public Object getProcessInstanceVariable(long processInstanceId, String variableName) {
		JaxbObjectResponse response = this.processService.getProcessInstanceVariable(processInstanceId, variableName);
		ret
/**
 * @Class Name : BkmkMenuManageDAO.java
 * @Description : 바로가기메뉴를 관리하는 서비스를 정의하기위한 데이터 접근 클래스
 * @Modification Information
 *
 *    수정일       수정자         수정내용
 *    -------        -------     -------------------
 *    2009. 9. 25.     윤성록
 *
 * @author 공통 컴포넌트 개발팀 윤성록
 * @since 2009. 9. 25.
 * @version
 * @see
 *
 */
@Repository("bkmkMenuManageDAO")
public class BkmkMenuManageDAO extends ComAbstractDAO{
    
    /**
     * 바로가기메뉴관리 정보를 삭제한다.
     * 
     * @param BkmkMenuManage
     * @return
     * @throws Exception
     */
    public void deleteBkmkMenuManage(BkmkMenuManage bkmkMenuManage) throws Exception {
        delete("BkmkMenuManageDAO.deleteBkmkMenuManage", bkmkMenuManage);
    }
    
    /**
     * 바로가기메뉴관리 정보를 등록한다.
     * 
     * @param BkmkMenuManage
     * @return
     * @throws Exception
     */
    public void insertBkmkMenuManage(BkmkMenuManage bkmkMenuManage) throws Exception {
        insert("BkmkMenuManageDAO.insertBkmkMenuManage", bkmkMenuManage);
    }
   
   

     * 바로가기메뉴관리 정보를 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public BkmkMenuManageVO selectBkmkMenuManageResult(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        BkmkMenuManageVO vo = new BkmkMenuManageVO();
        vo = (BkmkMenuManageVO)selectByPk("BkmkMenuManageDAO.selectBkmkMenuManage", bkmkMenuManageVO);
        return vo;
    }
    /**
     * 조건에 맞는 바로가기메뉴관리 정보 목록을 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public List<BkmkMenuManageVO> selectBkmkMenuManageList(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        return list("BkmkMenuManageDAO.selectBkmkMenuManageList", bkmkMenuManageVO);
    }    
    
    /**
     * 조건에 맞는 바로가기메뉴관리 정보 목록의 건수를 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public int selectBkmkMenuManageListCnt(BkmkMenuManageVO bkmkMenuManageVO) throws Excepti

        return (Integer)getSqlMapClientTemplate().queryForObject("BkmkMenuManageDAO.selectBkmkMenuManageListCnt", bkmkMenuManageVO);
    }
    
    /**
     * 등록할  메뉴정보 목록을 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public List<BkmkMenuManageVO> selectBkmkMenuList(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        return list("BkmkMenuManageDAO.selectBkmkMenuList", bkmkMenuManageVO);
    }    
    /**
     * 등록할  메뉴정보 목록의 건수를 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public int selectBkmkMenuListCnt(BkmkMenuManageVO bkmkMenuManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("BkmkMenuManageDAO.selectBkmkMenuListCnt", bkmkMenuManageVO);
    }
    
    /**
     * 미리보기를 할 바로가기메뉴관리의 목록을 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public List<MenuManageVO> selectBkmk
@Service
public class ServiceFactory implements Serializable {
	private static final long serialVersionUID = 1L;
	@Autowired
	private Propiedades properties;
	@Autowired
	private UsuarioService usuarioService;
	@Autowired
	private PersonaService personaService;
	@Autowired
	private MaestroService tablaService;
	@Autowired
	private KardexService kardexService;
	@Autowired
	private ActoService actoService;
	@Autowired
	private IntervinienteEmpresaService intervinienteEmpresaService;
	@Autowired
	private IntervinientePersonaService intervinientePersonaService;
	@Autowired
	private EmpleadoService empleadoService;
	@Autowired
	private EmpresaService empresaService;
	@Autowired
	private AbogadoService abogadoService;
	public Propiedades getProperties() {
		return properties;
	}
	public void setProperties(Propiedades properties) {
		this.properties = properties;
	}
	public UsuarioService getUsuarioService() {
		return usuarioService;
	}
	public void setUsuarioService(UsuarioService usuarioSe

		this.usuarioService = usuarioService;
	}
	public PersonaService getPersonaService() {
		return personaService;
	}
	public void setPersonaService(PersonaService personaService) {
		this.personaService = personaService;
	}
	public MaestroService getTablaService() {
		return tablaService;
	}
	public void setTablaService(MaestroService tablaService) {
		this.tablaService = tablaService;
	}
	public KardexService getKardexService() {
		return kardexService;
	}
	public void setKardexService(KardexService kardexService) {
		this.kardexService = kardexService;
	}
	public ActoService getActoService() {
		return actoService;
	}
	public void setActoService(ActoService actoService) {
		this.actoService = actoService;
	}
	public IntervinienteEmpresaService getIntervinienteEmpresaService() {
		return intervinienteEmpresaService;
	}
	public void setIntervinienteEmpresaService(
			IntervinienteEmpresaService intervinienteEmpresaService) {
		this.intervinienteEmpresaService = intervinienteEmpresaServ
/**
 * 권한별 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성 
 *
 * </pre>
 */
@Service("egovAuthorRoleManageService")
public class EgovAuthorRoleManageServiceImpl extends EgovAbstractServiceImpl implements EgovAuthorRoleManageService {
	@Resource(name="authorRoleManageDAO")
    private AuthorRoleManageDAO authorRoleManageDAO;
	/**
	 * 권한 롤 관계정보를 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return AuthorRoleManageVO
	 * @exception Exception
	 */
	public AuthorRoleManageVO selectAuthorRole(AuthorRoleManageVO authorRoleManageVO) throws Exception {
		return authorRoleManageDAO.selectAuthorRole(authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보 목록 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return Li

	 * @exception Exception
	 */
	public List<AuthorRoleManageVO> selectAuthorRoleList(AuthorRoleManageVO authorRoleManageVO) throws Exception {
		return authorRoleManageDAO.selectAuthorRoleList(authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보를 화면에서 입력하여 입력항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void insertAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		authorRoleManageDAO.insertAuthorRole(authorRoleManage);
	}
	/**
	 * 수정된 권한 롤 관계정보를 데이터베이스에 반영
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void updateAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		authorRoleManageDAO.updateAuthorRole(authorRoleManage);
	}
	/**
	 * 권한 롤 관계정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void deleteAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		authorRoleManageDAO.deleteAuthorRole(authorRoleMa
/**
 * iddl
 * 
 * Intelligent Distributed Data Layer
 * 
 * iddl-common
 */
/**
 * 
 * @author sihai
 *
 */
public interface Pipeline {
	/**
	 * 
	 * @param name
	 * @param handler
	 */
	void addHead(String name, Handler handler);
	/**
	 * 
	 * @param name
	 * @param handler
	 */
	void addTail(String name, Handler handler);
	/**
	 * 
	 * @param baseName
	 * @param name
	 * @param handler
	 */
	void addBefore(String baseName, String name, Handler handler);
	/**
	 * 
	 * @param baseName
	 * @param name
	 * @param handler
	 */
	void addAfter(String baseName, String name, Handler handler);
	/**
	 * 
	 * @param handler
	 */
	void remove(Handler handler);
	/**
	 * 
	 * @param name
	 * @return
	 */
	Handler remove(String name);
	/**
	 * 
	 * @param <T>
	 * @param handlerType
	 * @return
	 */
	<T extends Handler> T remove(Class<T> handlerType);
	/**
	 * 
	 * @return
	 */
	Handler removeHead();
	/**
	 * 
	 * @return
	 */
	Handler removeTail();
	/**
	 * 
	 * @param oldHandler
	 * @param newName

	 * @param newHandler
	 */
	void replace(Handler oldHandler, String newName, Handler newHandler);
	/**
	 * 
	 * @param oldName
	 * @param newName
	 * @param newHandler
	 * @return
	 */
	Handler replace(String oldName, String newName, Handler newHandler);
	/**
	 * 
	 * @param <T>
	 * @param oldHandlerType
	 * @param newName
	 * @param newHandler
	 * @return
	 */
	<T extends Handler> T replace(Class<T> oldHandlerType, String newName,
			Handler newHandler);
	/**
	 * 
	 * @return
	 */
	Handler getHead();
	/**
	 * 
	 * @return
	 */
	Handler getTail();
	/**
	 * 
	 * @param name
	 * @return
	 */
	Handler get(String name);
	/**
	 * 
	 * @param handler
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	HandlerContext getContext(Handler handler);
	/**
	 * 
	 * @param name
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	HandlerContext getContext(String name);
	/**
	 * 
	 * @param handlerType
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	HandlerContext getContext(Class<? extends Handler> handl
/**
 * 
 * @author Francesco Cina'
 *
 * 29/gen/2011
 */
public abstract class ASystemProvider implements ISystem {
	private ILoggerService loggerService = new Slf4jLoggerService(new NullLoggerService());
	private IMailService mailService = new NullMailService();
	private ILoggerReaderService loggerReaderService = new LoggerReaderService(new NullQueueMessages());;
    @Override
	public final ILoggerService getLoggerService() {
		return loggerService;
	}
	@Override
	public final IMailService getMailService() {
		return mailService;
	}
    
	@Override
	public ILoggerReaderService getLoggerReaderService() {
		return loggerReaderService;
	}
	@Override
	public void setLoggerReaderServiceBuilder(IServiceBuilder<ILoggerReaderService> loggerReaderServiceBuilder) {
		loggerReaderService = loggerReaderServiceBuilder.buildService();
	}
	@Override
	public void setLoggerServiceBuilder(IServiceBuilder<ILoggerService> loggerServiceBuilder) {
		loggerService = loggerServiceBuilder.buildService();		
	}
/**
 * The Class AbstractAudioInService.
 */
public abstract class AbstractAudioInService extends AbstractService {
    /**
     * Builds the audio in service.
     * 
     * @param upnpService
     *            the upnp service
     * @param dev
     *            the dev
     * @return the audio in service
     */
    public static AbstractAudioInService buildAudioInService(final UpnpService upnpService, final RemoteDevice dev) {
        final Service audioService = AbstractService.findService(dev, ZonePlayerConstants.SONOS_SERVICE_AUDIO_IN);
        if (audioService != null) {
            return new AudioInService(upnpService, audioService);
        } else {
            return new AudioInServiceUnavailable(upnpService, audioService);
        }
    }
    /**
     * Instantiates a new abstract audio in service.
     * 
     * @param upnpService
     *            the upnp service
     * @param service
     *            the service
     * @param type
     *            the type
     */
  
/**
 * RSS태그관리를 처리하는 ServiceImpl Class 구현
 * @author 공통서비스 장동한
 * @since 2010.06.16
 * @version 1.0
 * @see <pre>
 * &lt;&lt; 개정이력(Modification Information) &gt;&gt;
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.07.03  장동한          최초 생성
 *
 * </pre>
 */
@Service("egovRssManageService")
public class EgovRssTagManageServiceImpl extends EgovAbstractServiceImpl
        implements EgovRssTagManageService {
	/* RSS관리 DAO */
    @Resource(name = "rssManageDao")
    private RssTagManageDao dao;
    /* RSS ID Generator Service */
    @Resource(name = "egovRssTagManageIdGnrService")
    private EgovIdGnrService idgenService;
    /**
     * JDBC 테이블 목록을조회한다.
     * @return List -조회한목록이담긴List
     * @throws Exception
     */
    @Override
	public List<?> selectRssTagManageTableList() throws Exception {
    	return dao.selectRssTagManageTableList();
    }
    /**
     * JDBC 테이블 컬럼 목록을 조회한다.
     * @param map - 컬럼조회정보
     * @return List -조회한목

     * @throws Exception
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public List<?> selectRssTagManageTableColumnList(Map map) throws Exception {
    	return dao.selectRssTagManageTableColumnList(map);
    }
    /**
     * RSS태그관리를(을) 목록을 조회 한다.
     * @param rssManage -조회할 정보가 담긴 객체
     * @return List -조회한목록이담긴List
     * @throws Exception
     */
    @Override
	public List<?> selectRssTagManageList(RssManage rssManage) throws Exception {
    	return dao.selectRssTagManageList(rssManage);
    }
    /**
     * RSS태그관리를(을) 목록 전체 건수를(을) 조회한다.
     * @param searchVO -조회할 정보가 담긴 객체
     * @return int -조회한건수가담긴Integer
     * @throws Exception
     */
    @Override
	public int selectRssTagManageListCnt(RssManage rssManage) throws Exception {
        return dao.selectRssTagManageListCnt(rssManage);
    }
    /**
     * RSS태그관리를(을) 상세조회 한다.
     * @param searchVO -조회할 정보가 담긴 객체
     * @return List -조회한목록이담긴List
     * @throws Exception
     */
    @Override
	public
public class Activator extends FrameActivator {
    @Override
    public void start() throws Exception {
        this.start(new MulitServiceTrackerCustomizer() {
            private FactoryService factoryService;
            @Override
            public void removedService() {}
            @Override
            public void addingService() {
                LogService logService = getService(LogService.class);
                SqlService sqlService = (SqlService) getService(SqlService.class);
                ProxyFactory pf = ProxyFactory.getInstance();
                pf.getOp().setDs(new ProxyDBSourceImpl(sqlService, logService));
                pf.setLogService(logService);
                factoryService = new FactoryServiceImpl(pf);
                registerService(FactoryService.class, factoryService);
            }
            @Override
            public void updated(Dictionary<String, ?> props) {
            }
        }, LogService.class, SqlService.class);
    }
    @Override
  
public class ManageUserBusiness extends ModuleBusiness<ManageUser> implements ManageUserService {
	@Override
	public boolean hasSame(ManageUser value) {
		boolean result = false;
		String account = value.getAccount();
		String hql = "from ManageUser t where upper(t.account) = upper(?)";
		List<ManageUser> manageUsers = this.select(hql, account);
		if ((manageUsers != null) && (manageUsers.size() > 0)) {
			ManageUser originalManageUser = manageUsers.get(0);
			if (value.getUuid() == null) {
				result = true;
			} else {
				if (!value.getUuid().equals(originalManageUser.getUuid())) {
					result = true;
				}
			}
		}
		return result;
	}
	@Override
	public boolean hasReference(String uuid) {
		return false;
	}
	@Override
	public boolean deleteReference(String uuid) {
		return true;
	}
	@Override
	public ManageUser authenticationValidation(String account, String password) {
		ManageUser result = null;
		if ((account != null) && (password != null)) {
			password = Security.md5(password)

			String hql = "from ManageUser t where upper(t.account) = upper(?)";
			List<ManageUser> manageUsers = this.select(hql, account);
			if ((manageUsers != null) && (manageUsers.size() > 0)) {
				if (manageUsers.get(0).getPassword().equals(password)) {
					result = manageUsers.get(0);
				}
			}
		}
		return result;
	}
	@Override
	public boolean permissionValidation(String userId, String action, String execute) {
		System.out.println(action);
		return true;
	}
	public List<ManageUser> queryDataGrid(Paging paging, ManageUser manageUser) {
		List<ManageUser> results = null;
		String hql = "";
		List<Object> parameters = new ArrayList<Object>();
		StringBuffer stringBuffer = new StringBuffer();
		stringBuffer.append("from ManageUser as t where t.uuid is not null ");
		if (manageUser != null) {
			if (manageUser.getName() != null) {
				if (!manageUser.getName().isEmpty()) {
					stringBuffer.append("and t.name = ? ");
					parameters.add(manageUser.getName());
				}
			}
			if (manageUs
public abstract class AbstractRepositoryGateway implements RepositoryGateway {
    
	protected Map<String, KuabaRepository> repositoryMap;
        
        protected abstract KuabaRepository createRepository(String url);
	protected abstract KuabaRepository newRepository(String url);	
	public AbstractRepositoryGateway() {
		super();
		this.repositoryMap = new HashMap<String, KuabaRepository>();
	}
        
	public Map<String, KuabaRepository> getRepositoryMap() {
		return repositoryMap;
	}
	@Override
	public KuabaRepository load(String url) {
		if(this.repositoryMap.containsKey(url))
			return this.repositoryMap.get(url);
		
		this.repositoryMap.put(url, this.createRepository(url));
		return this.repositoryMap.get(url);
	}
        
	@Override
	public KuabaRepository createNewRepository(String url) {
		if(this.repositoryMap.containsKey(url))			
			return this.repositoryMap.get(url);
                
		this.repositoryMap.put(url, this.newRepository(url));
		return this.repositoryMap.get(u
/*****************************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 ****************************************************************************/
public class PreflightConfiguration {
	public static final String CATALOG_PROCE

	public static final String STREAM_PROCESS = "stream-process";
	public static final String TRAILER_PROCESS = "trailer-process";
	public static final String XREF_PROCESS = "xref-process";
	public static final String BOOKMARK_PROCESS = "bookmark-process";
	public static final String FILE_SPECIF_PROCESS = "file-specification-process";
	public static final String PAGES_TREE_PROCESS = "pages-tree-process";
	public static final String META_DATA_PROCESS = "metadata-process";
	public static final String PAGE_PROCESS = "page-process";
	public static final String RESOURCES_PROCESS = "resources-process";
	public static final String ACTIONS_PROCESS = "actions-process";
	public static final String ANNOTATIONS_PROCESS = "annotations-process";
	public static final String GRAPHIC_PROCESS = "graphic-process";
	public static final String FONT_PROCESS = "font-process";
	public static final String EXTGSTATE_PROCESS = "extgstate-process";
	public static final String SHADDING_PATTERN_PROCESS = "shadding-pa

	public static final String TILING_PATTERN_PROCESS = "tiling-pattern-process";
	/* TODO other configuration option should be possible :
	 * - skip some validation process ?
	 * - ???
	 */
	/**
	 * Boolean to know if an exception must be thrown if a ValidationProcess is missing.
	 */
	private boolean errorOnMissingProcess = true;
	/**
	 * Boolean to know mark some error as a Warning, if the validation result contains only warning
	 * the validation is successful 
	 */
	private boolean lazyValidation = false;
	private Map<String, Class<? extends ValidationProcess>> processes = new HashMap<String, Class<? extends ValidationProcess>>();
	private Map<String, Class<? extends ValidationProcess>> innerProcesses = new HashMap<String, Class<? extends ValidationProcess>>();
	/**
	 * Define the AnnotationFactory used by ValidationProcess
	 */
	private AnnotationValidatorFactory annotFact;
	/**
	 * Define the ActionManagerFactory used by ValidationProcess
	 */
	private ActionManagerFactory actionF

	/**
	 * Define the ColorSpaceHelperFactory used by the validationProcess.
	 */
	private ColorSpaceHelperFactory colorSpaceHelperFact;
	public static PreflightConfiguration createPdfA1BConfiguration() {
		PreflightConfiguration configuration = new PreflightConfiguration();
		configuration.replaceProcess(CATALOG_PROCESS, CatalogValidationProcess.class);
		configuration.replaceProcess(FILE_SPECIF_PROCESS, FileSpecificationValidationProcess.class);
		configuration.replaceProcess(TRAILER_PROCESS, TrailerValidationProcess.class);
		configuration.replaceProcess(XREF_PROCESS, XRefValidationProcess.class);
		configuration.replaceProcess(ACRO_FORM_PROCESS, AcroFormValidationProcess.class);
		configuration.replaceProcess(BOOKMARK_PROCESS, BookmarkValidationProcess.class);
		configuration.replaceProcess(PAGES_TREE_PROCESS, PageTreeValidationProcess.class);
		configuration.replaceProcess(META_DATA_PROCESS, MetadataValidationProcess.class);
		configuration.replaceProcess(STREAM_PROCESS, StreamVali

		configuration.replacePageProcess(PAGE_PROCESS, SinglePageValidationProcess.class);
		configuration.replacePageProcess(EXTGSTATE_PROCESS, ExtGStateValidationProcess.class);
		configuration.replacePageProcess(SHADDING_PATTERN_PROCESS, ShaddingPatternValidationProcess.class);
		configuration.replacePageProcess(GRAPHIC_PROCESS, GraphicObjectPageValidationProcess.class);
		configuration.replacePageProcess(TILING_PATTERN_PROCESS, TilingPatternValidationProcess.class);
		configuration.replacePageProcess(RESOURCES_PROCESS, ResourcesValidationProcess.class);
		configuration.replacePageProcess(FONT_PROCESS, FontValidationProcess.class);
		configuration.replacePageProcess(ACTIONS_PROCESS, ActionsValidationProcess.class);
		configuration.replacePageProcess(ANNOTATIONS_PROCESS, AnnotationValidationProcess.class);
		configuration.actionFact = new ActionManagerFactory();
		configuration.annotFact = new PDFAbAnnotationFactory();
		configuration.colorSpaceHelperFact = new ColorSpaceHelperFactory();


	}
	public Collection<String> getProcessNames() {
		return this.processes.keySet();
	}
	/**
	 * Return the validation process linked with the given name
	 * @param processName 
	 * @return an instance of validationProcess, null if it doesn't exist and if the errorOnMissingProcess is false
	 * @throws MissingValidationProcessException if the Process doesn't exist (errorOnMissingProcess is true)
	 */
	public ValidationProcess getInstanceOfProcess(String processName) 
	throws MissingValidationProcessException, ValidationException {
		Class<? extends ValidationProcess> clazz = null;
		if (processes.containsKey(processName)) {
			clazz = processes.get(processName);
		} else if (innerProcesses.containsKey(processName)) {
			clazz = innerProcesses.get(processName);
		} else if (errorOnMissingProcess) {
			throw new MissingValidationProcessException(processName);
		} else {
			return new EmptyValidationProcess();
		}
		try {
			return clazz.newInstance();	
		} catch (InstantiationException e)

			throw new ValidationException(processName + " can't be created", e);
		} catch (IllegalAccessException e) {
			throw new ValidationException(processName + " can't be created", e);
		}	
	}
	public void replaceProcess(String processName, Class<? extends ValidationProcess> process) {
		this.processes.put(processName, process);
	}
	public Collection<String> getPageValidationProcessNames() {
		return this.innerProcesses.keySet();
	}
	public void replacePageProcess(String processName, Class<? extends ValidationProcess> process) {
		this.innerProcesses.put(processName, process);
	}
	public boolean isErrorOnMissingProcess() {
		return errorOnMissingProcess;
	}
	public void setErrorOnMissingProcess(boolean errorOnMissingProcess) {
		this.errorOnMissingProcess = errorOnMissingProcess;
	}
	public boolean isLazyValidation() {
		return lazyValidation;
	}
	public void setLazyValidation(boolean lazyValidation) {
		this.lazyValidation = lazyValidation;
	}
	public AnnotationValidatorFactory getAnno
/**
 * @author Vasily Vasilkov (vgv@ecwid.com)
 */
public class CatalogService {
	@SerializedName("Node")
	private String node;
	@SerializedName("Address")
	private String address;
	@SerializedName("ServiceID")
	private String serviceId;
	@SerializedName("ServiceName")
	private String serviceName;
	@SerializedName("ServiceTags")
	private List<String> serviceTags;
	@SerializedName("ServiceAddress")
	private String serviceAddress;
	@SerializedName("ServicePort")
	private Integer servicePort;
	public String getNode() {
		return node;
	}
	public void setNode(String node) {
		this.node = node;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	public String getServiceId() {
		return serviceId;
	}
	public void setServiceId(String serviceId) {
		this.serviceId = serviceId;
	}
	public String getServiceName() {
		return serviceName;
	}
	public void setServiceName(String serviceName) {
		this.serviceName = serviceName;
	}
public class ProcessManager implements IProcessManager {
	private List<Process> processList;
	private List<Process> processQueue;
	public ProcessManager() {
		processList = new ArrayList<Process>();
		processQueue = new ArrayList<Process>();
	}
	@Override
	public void addProcess(Process p) {
		processQueue.add(p);
	}
	@Override
	public void update(long nanoSeconds) {
		processList.addAll(processQueue);
		processQueue.clear();
		List<Process> toRemove = new ArrayList<Process>();
		for (Process p: processList) {
			if (!p.isInitialized()) {
				p.initialize();
			}
			if (p.isRunning()) {
				p.update(nanoSeconds);
			}
			if (p.isDead()) {
				if (p.isFinished() && p.getChild() != null) {
					processQueue.add(p.getChild());
				}
				toRemove.add(p);
			}
		}
		processList.removeAll(toRemove);
	}
	@Override
	public void clearProcesses(boolean executeExitMethod) {
		if (executeExitMethod) {
			for (Process p : processList) {
				p.onAbort();
			}
		}
		processList.clear();
		processQueu
public class ProcessHelper
	private RequestData data;
	private  Process process;
	public ProcessHelper(RequestData data)
	{
		process=ProcessFactory.getProcess(data);
		this.data=data;
	}
	public ResponseData getProcessResponse()
	{
		int type=data.getType();
		
		switch (type) {
		
		case 0: 
			return process.processPendingMessages();
            
		case 1: 
			return process.processRegistration();
            
		case 2:
			return process.processSMSCodeRequest();
            
		case 3:
			return process.processSMSCodeValidate(data);
            
		case 4: 
			return process.processInviteRequest(data);
            
		case 5: 
			return process.processInviteRecipientResponse(data);
            
		case 6: 
			return process.processInviteInitiatorResponse(data);
            
		case 7: 
			return process.processSendMessage(data);
            
		case 8: 
			return process.processFetchMessage(data);
            
		case 9: 
			return process.processDeleteRequest(data);
            
		case 10

			return process.processUpdatePublicKey(data);
            
		case 12: 
			return process.processUpdatePushID(data);
            
		case 13: 
			return process.processDeleteContact(data);
            
		case 14: 
			return process.processDeleteContactResponse(data);
            
		case 15: 
			return process.processMessageAcknowledgement(data);
            
		case 16: 
			return process.processDeleteResponse(data);
            
		case 17: 
			return process.processDeleteAcknowledgement(data);
            
		case 18: 
			return process.processLicenseCheck(data);
            
		case 19: 
			return process.processMessageRead(data);
            
		case 21: 
			return process.processMessageDelete(data);
            
		case 22: 
			return process.processSendWebKey(data);
            
		case 23: 
			return process.processGetAffiliateContacts(data);
            
		case 24:
			return process.processSendAffiliateContactByUID(data);
            
		case 25:
			return process.processSendAffiliate
public class FormSubmissionRouter {
    private final Map<String, FormSubmissionHandler> handlerMap;
    private FormDataRepository formDataRepository;
    public FormSubmissionRouter(FormDataRepository formDataRepository,
                                ECRegistrationHandler ecRegistrationHandler,
                                FPComplicationsHandler fpComplicationsHandler,
                                FPChangeHandler fpChangeHandler,
                                RenewFPProductHandler renewFPProductHandler,
                                ECCloseHandler ecCloseHandler,
                                ANCRegistrationHandler ancRegistrationHandler,
                                ANCRegistrationOAHandler ancRegistrationOAHandler,
                                ANCVisitHandler ancVisitHandler,
                                ANCCloseHandler ancCloseHandler,
                                TTHandler ttHandler,
                                IFAHandler ifaHandler,
                

                                DeliveryOutcomeHandler deliveryOutcomeHandler,
                                PNCRegistrationOAHandler pncRegistrationOAHandler,
                                PNCCloseHandler pncCloseHandler,
                                PNCVisitHandler pncVisitHandler,
                                ChildImmunizationsHandler childImmunizationsHandler,
                                ChildRegistrationECHandler childRegistrationECHandler,
                                ChildRegistrationOAHandler childRegistrationOAHandler,
                                ChildCloseHandler childCloseHandler, ChildIllnessHandler childIllnessHandler,
                                VitaminAHandler vitaminAHandler, DeliveryPlanHandler deliveryPlanHandler,
                                ECEditHandler ecEditHandler, ANCInvestigationsHandler ancInvestigationsHandler) {
        this.formDataRepository = formDataRepository;
        handlerMap = new HashMap<String, FormSubmissionHandler>(

        handlerMap.put(EC_REGISTRATION, ecRegistrationHandler);
        handlerMap.put(FP_COMPLICATIONS, fpComplicationsHandler);
        handlerMap.put(FP_CHANGE, fpChangeHandler);
        handlerMap.put(RENEW_FP_PRODUCT, renewFPProductHandler);
        handlerMap.put(EC_CLOSE, ecCloseHandler);
        handlerMap.put(ANC_REGISTRATION, ancRegistrationHandler);
        handlerMap.put(ANC_REGISTRATION_OA, ancRegistrationOAHandler);
        handlerMap.put(ANC_VISIT, ancVisitHandler);
        handlerMap.put(ANC_CLOSE, ancCloseHandler);
        handlerMap.put(TT, ttHandler);
        handlerMap.put(TT_BOOSTER, ttHandler);
        handlerMap.put(TT_1, ttHandler);
        handlerMap.put(TT_2, ttHandler);
        handlerMap.put(IFA, ifaHandler);
        handlerMap.put(HB_TEST, hbTestHandler);
        handlerMap.put(DELIVERY_OUTCOME, deliveryOutcomeHandler);
        handlerMap.put(PNC_REGISTRATION_OA, pncRegistrationOAHandler);
        handlerMap.put(PNC_CLOSE, pncCloseHandler);
        handler

        handlerMap.put(CHILD_IMMUNIZATIONS, childImmunizationsHandler);
        handlerMap.put(CHILD_REGISTRATION_EC, childRegistrationECHandler);
        handlerMap.put(CHILD_REGISTRATION_OA, childRegistrationOAHandler);
        handlerMap.put(CHILD_CLOSE, childCloseHandler);
        handlerMap.put(CHILD_ILLNESS, childIllnessHandler);
        handlerMap.put(VITAMIN_A, vitaminAHandler);
        handlerMap.put(DELIVERY_PLAN, deliveryPlanHandler);
        handlerMap.put(EC_EDIT, ecEditHandler);
        handlerMap.put(ANC_INVESTIGATIONS, ancInvestigationsHandler);
    }
    public void route(String instanceId) throws Exception {
        FormSubmission submission = formDataRepository.fetchFromSubmission(instanceId);
        FormSubmissionHandler handler = handlerMap.get(submission.formName());
        if (handler == null) {
            logWarn("Could not find a handler due to unknown form submission: " + submission);
        } else {
            try {
                handler.handle(submis
/*******************************************************************************
 * Copyright (c) 2012 Arieh 'Vainolo' Bibliowicz
 * You can use this code for educational purposes. For any other uses
 * please contact me: vainolo@gmail.com
 *******************************************************************************/
public class OPMProcessInstanceFactory {
  public static OPMProcessInstance createProcessInstance(final OPMProcess process, final OPMProcessKind kind) {
    OPMProcessInstance processInstance;
    switch(kind) {
      case BUILT_IN:
        processInstance = createBuildInProcess(process);
        break;
      case COMPOUND:
        processInstance = new OPMCompoundProcessInstance(process);
        break;
      case CONCEPTUAL:
        processInstance = new OPMConceptualProcess(process);
        break;
      case JAVA:
        processInstance = new OPMJavaProcessInstance(process);
        break;
      default:
        throw new IllegalStateException("Received unexpected 
public class NodeHandlerFactoryTest {
    @Test
    public void shouldGiveAppropriateHandlersForAllNodeTypes() {
        CourseNodeHandler courseNodeHandler = mock(CourseNodeHandler.class);
        ModuleNodeHandler moduleNodeHandler = mock(ModuleNodeHandler.class);
        ChapterNodeHandler chapterNodeHandler = mock(ChapterNodeHandler.class);
        MessageNodeHandler messageNodeHandler = mock(MessageNodeHandler.class);
        QuizNodeHandler quizNodeHandler = mock(QuizNodeHandler.class);
        QuestionNodeHandler questionNodeHandler = mock(QuestionNodeHandler.class);
        NodeHandlerFactory nodeHandlerFactory = new NodeHandlerFactory(courseNodeHandler, moduleNodeHandler, chapterNodeHandler, messageNodeHandler, quizNodeHandler, questionNodeHandler);
        assertEquals(courseNodeHandler, nodeHandlerFactory.getHandler(NodeType.COURSE));
        assertEquals(moduleNodeHandler, nodeHandlerFactory.getHandler(NodeType.MODULE));
        assertEquals(chapterNodeHandler, nodeHandlerF
public class Processes {
	static OS LOCAL_OS;
	static ProcessDetailsFactory<? extends ProcessDetails> PROCESS_FACTORY;
	static void init() {
		if (LOCAL_OS == null) {
			LOCAL_OS = OS.detect();
			
			switch (LOCAL_OS) {
			case UNIX:
			case LINUX:
			case MAC:
			case SOLARIS:
				PROCESS_FACTORY = new UnixProcessDetailsFactory<UnixProcessDetails>();
				break;
			case WINDOWS:
				break;
			}
			
			PROCESS_FACTORY.checkSupported();
		}
	}
	public static List<ProcessDetails> listAll() {
		return listAll(false);
	}
	@SuppressWarnings("unchecked")
	public static List<ProcessDetails> listAll(boolean updateAll) {
		init();
		return (List<ProcessDetails>) PROCESS_FACTORY.listProcesses(updateAll);
	}
	public static ProcessDetails getProcess(int pid) {
		init();
		return PROCESS_FACTORY.getProcess(pid);
	}
	public static void updateStats(ProcessDetails process) {
		init();
		PROCESS_FACTORY.updateStats(process);
	}
	public static void stopProcess(ProcessDetails process) {
		init();
		PROCE
/**
 * The repository manager only for {@link CmrRepositoryDefinition}s.
 *
 * @author Ivan Senic
 *
 */
public class CmrRepositoryManager {
	/**
	 * /** Update online repository status job repetition time in milliseconds.
	 */
	public static final long UPDATE_JOB_REPETITION = 60000;
	/**
	 * The list containing the available {@link RepositoryDefinition} objects.
	 */
	private List<CmrRepositoryDefinition> cmrRepositoryDefinitions = new ArrayList<>();
	/**
	 * The list of listeners to be notified.
	 */
	private ListenerList<CmrRepositoryChangeListener> cmrRepositoryChangeListeners = new ListenerList<>();
	/**
	 * Map of jobs.
	 */
	private Map<CmrRepositoryDefinition, UpdateRepositoryJob> repositoryUpdateJobMap = new ConcurrentHashMap<>();
	/**
	 * Default constructor.
	 * <p>
	 * Loads the repository definitions from the preference store.
	 */
	public CmrRepositoryManager() {
		List<CmrRepositoryDefinition> savedCmrs = PreferencesUtils.getCmrRepositoryDefinitions();
		if (CollectionUt

			cmrRepositoryDefinitions.addAll(savedCmrs);
			for (CmrRepositoryDefinition cmrRepositoryDefinition : cmrRepositoryDefinitions) {
				for (CmrRepositoryChangeListener repositoryChangeListener : cmrRepositoryChangeListeners) {
					cmrRepositoryDefinition.addCmrRepositoryChangeListener(repositoryChangeListener);
				}
				UpdateRepositoryJob updateRepositoryJob = new UpdateRepositoryJob(cmrRepositoryDefinition, true);
				updateRepositoryJob.schedule();
				repositoryUpdateJobMap.put(cmrRepositoryDefinition, updateRepositoryJob);
			}
		}
	}
	/**
	 * Adds a repository definition handled by this manager.
	 *
	 * @param cmrRepositoryDefinition
	 *            The definition to add.
	 */
	public void addCmrRepositoryDefinition(CmrRepositoryDefinition cmrRepositoryDefinition) {
		if (!cmrRepositoryDefinitions.contains(cmrRepositoryDefinition)) {
			for (CmrRepositoryChangeListener repositoryChangeListener : cmrRepositoryChangeListeners) {
				cmrRepositoryDefinition.addCmrRepositoryChang

			}
			cmrRepositoryDefinitions.add(cmrRepositoryDefinition);
			savePreference();
			for (CmrRepositoryChangeListener repositoryChangeListener : cmrRepositoryChangeListeners) {
				repositoryChangeListener.repositoryAdded(cmrRepositoryDefinition);
			}
			UpdateRepositoryJob updateRepositoryJob = new UpdateRepositoryJob(cmrRepositoryDefinition, true);
			updateRepositoryJob.schedule();
			repositoryUpdateJobMap.put(cmrRepositoryDefinition, updateRepositoryJob);
		}
	}
	/**
	 * Removes a repository definition and notifies all registered listeners.
	 *
	 * @param cmrRepositoryDefinition
	 *            The definition to remove.
	 */
	public void removeCmrRepositoryDefinition(CmrRepositoryDefinition cmrRepositoryDefinition) {
		for (CmrRepositoryChangeListener repositoryChangeListener : cmrRepositoryChangeListeners) {
			cmrRepositoryDefinition.removeCmrRepositoryChangeListener(repositoryChangeListener);
		}
		cmrRepositoryDefinitions.remove(cmrRepositoryDefinition);
		savePreference();

		for (CmrRepositoryChangeListener repositoryChangeListener : cmrRepositoryChangeListeners) {
			repositoryChangeListener.repositoryRemoved(cmrRepositoryDefinition);
		}
		UpdateRepositoryJob updateRepositoryJob = repositoryUpdateJobMap.remove(cmrRepositoryDefinition);
		if (null != updateRepositoryJob) {
			updateRepositoryJob.cancel();
		}
	}
	/**
	 * Forces the CMR Online update check. If the {@link CmrRepositoryDefinition} to check is not on
	 * the current list of repositories, this method will create a small job to check online status,
	 * but this job won't be rescheduled.
	 *
	 * @param cmrRepositoryDefinition
	 *            {@link CmrRepositoryDefinition}.
	 * @return Returns the job that will be performing the update. Caller can use this job to react
	 *         on the job being done.
	 */
	public UpdateRepositoryJob forceCmrRepositoryOnlineStatusUpdate(final CmrRepositoryDefinition cmrRepositoryDefinition) {
		UpdateRepositoryJob updateRepositoryJob = repositoryUpdateJobMap

		if (null != updateRepositoryJob) {
			if (updateRepositoryJob.cancel()) {
				updateRepositoryJob.schedule();
			}
		}
		return updateRepositoryJob;
	}
	/**
	 * Forces update of all repositories.
	 *
	 * @return Returns the collection of jobs that will be performing the update. Caller can use
	 *         these jobs to react on the one or more jobs being done.
	 */
	public Collection<UpdateRepositoryJob> forceAllCmrRepositoriesOnlineStatusUpdate() {
		List<UpdateRepositoryJob> jobs = new ArrayList<>();
		for (CmrRepositoryDefinition cmrRepositoryDefinition : cmrRepositoryDefinitions) {
			jobs.add(this.forceCmrRepositoryOnlineStatusUpdate(cmrRepositoryDefinition));
		}
		return jobs;
	}
	/**
	 * Returns all registered repository definitions handled by this manager. The list is
	 * unmodifiable.
	 *
	 * @return The list of repository definitions.
	 */
	public List<CmrRepositoryDefinition> getCmrRepositoryDefinitions() {
		return Collections.unmodifiableList(cmrRepositoryDefinitions);


	/**
	 * Adds a listener which notifies on certain events.
	 *
	 * @param repositoryChangeListener
	 *            The listener to add.
	 */
	public void addCmrRepositoryChangeListener(CmrRepositoryChangeListener repositoryChangeListener) {
		cmrRepositoryChangeListeners.add(repositoryChangeListener);
		for (CmrRepositoryDefinition cmrRepositoryDefinition : cmrRepositoryDefinitions) {
			cmrRepositoryDefinition.addCmrRepositoryChangeListener(repositoryChangeListener);
		}
	}
	/**
	 * Removes the listener.
	 *
	 * @param repositoryChangeListener
	 *            The listener to remove.
	 */
	public void removeCmrRepositoryChangeListener(CmrRepositoryChangeListener repositoryChangeListener) {
		cmrRepositoryChangeListeners.remove(repositoryChangeListener);
		for (CmrRepositoryDefinition cmrRepositoryDefinition : cmrRepositoryDefinitions) {
			cmrRepositoryDefinition.removeCmrRepositoryChangeListener(repositoryChangeListener);
		}
	}
	/**
	 * Cancels all the update repository jobs. The meth

	 * canceled.
	 */
	public void cancelAllUpdateRepositoriesJobs() {
		for (UpdateRepositoryJob updateRepositoryJob : repositoryUpdateJobMap.values()) {
			while (!updateRepositoryJob.cancel()) {
				try {
					updateRepositoryJob.join();
				} catch (InterruptedException e) {
					break;
				}
			}
		}
	}
	/**
	 * Updates the {@link CmrRepositoryDefinition} entry in the preferences.
	 *
	 * @param cmrRepositoryDefinition
	 *            Repository to update.
	 */
	public void updateCmrRepositoryDefinitionData(CmrRepositoryDefinition cmrRepositoryDefinition) {
		this.savePreference();
		for (CmrRepositoryChangeListener listener : cmrRepositoryChangeListeners) {
			listener.repositoryDataUpdated(cmrRepositoryDefinition);
		}
	}
	/**
	 * Informs all listener that the provided agent on the repository has been deleted.
	 *
	 * @param cmrRepositoryDefinition
	 *            the repository definition.
	 * @param agent
	 *            Agent that was deleted.
	 */
	public void repositoryAgentDele

		for (CmrRepositoryChangeListener listener : cmrRepositoryChangeListeners) {
			listener.repositoryAgentDeleted(cmrRepositoryDefinition, agent);
		}
	}
	/**
	 * Save the preferences to the backend store.
	 */
	private void savePreference() {
		List<CmrRepositoryDefinition> toSave = new ArrayList<>();
		for (CmrRepositoryDefinition repositoryDefinition : cmrRepositoryDefinitions) {
			toSave.add(repositoryDefinition);
		}
		PreferencesUtils.saveCmrRepositoryDefinitions(toSave, false);
	}
	/**
	 * Update online status of all repositories job.
	 *
	 * @author Ivan Senic
	 *
	 */
	public static class UpdateRepositoryJob extends Job {
		/**
		 * CMR to update.
		 */
		private CmrRepositoryDefinition cmrRepositoryDefinition;
		/**
		 * Should job be rescheduled after its execution.
		 */
		private boolean rescheduleJob;
		/**
		 * Default constructor.
		 *
		 * @param cmrRepositoryDefinition
		 *            {@link CmrRepositoryDefinition} to update.
		 * @param rescheduleJob
		 *          
/**
 * 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Repository("roleManageDAO")
public class RoleManageDAO extends EgovComAbstractDAO {
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception {
		return (RoleManageVO) selectByPk("roleManageDAO.selectRole", roleManageVO);
	}
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception {
		return list("roleManageDAO.selectRoleList", roleManageVO);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 

	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void insertRole(RoleManage roleManage) throws Exception {
		insert("roleManageDAO.insertRole", roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void updateRole(RoleManage roleManage) throws Exception {
		update("roleManageDAO.updateRole", roleManage);
	}
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception {
		delete("roleManageDAO.deleteRole", roleManage);
	}
    /**
	 * 롤목록 총 갯수를 조회한다.
	 * @param roleManageVO RoleManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectRoleListTotCnt(RoleManageVO roleManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("roleManageDAO.selectAuthorListTotCnt", roleManageVO);
    }	
    
	/**
	 * 등록된 모든 롤 정보 목록 조회
	 * @param
/*
 * @(#)ProcessAction.java 2015-4-4 下午02:45:11 erp-manufacture
 */
/**
 * ProcessAction
 * @author wang
 * @version 1.0
 *
 */
@Component("processAction")
@Scope("prototype")
public class ProcessAction extends BaseAction {
    private Process process;
    private List<Process> processList;
    private ProcessDetail processDetail;
    private List<ProcessDetail> processDetailList;
    private Product product;
    private List<Product> productList;
    public String listProcess() {
        processList = processService.list();
        productList = productService.list();
        return SUCCESS;
    }
    public String saveProcess() {
        process.setDate(new Date());
        process.setUser(loginUser);
        processService.saveOrUpdate(process);
        msg = "success";
        return SUCCESS;
    }
    public String destoryProcess() {
        process = processService.getEntityById(process.getId());
        for (ProcessDetail pd : process.getProcessDetailList()) {
            proce

        }
        processService.delete(process);
        return SUCCESS;
    }
    public String listProcessDetail() {
        process = processService.getEntityById(process.getId());
        processDetailList = process.getProcessDetailList();
        return SUCCESS;
    }
    public String saveProcessDetail() {
        processDetailService.saveOrUpdate(processDetail);
        msg = "success";
        return SUCCESS;
    }
    public String destoryProcessDetail() {
        processDetailService.delete(processDetail);
        return SUCCESS;
    }
    /**
     * 返回  process
     * @return process
     */
    public Process getProcess() {
        return process;
    }
    /**
     * 设置 process
     * @param process process
     */
    public void setProcess(Process process) {
        this.process = process;
    }
    /**
     * 返回  processList
     * @return processList
     */
    public List<Process> getProcessList() {
        return processList;
    }
    /**
     * 设置 processList
  

     */
    public void setProcessList(List<Process> processList) {
        this.processList = processList;
    }
    /**
     * 返回  processDetail
     * @return processDetail
     */
    public ProcessDetail getProcessDetail() {
        return processDetail;
    }
    /**
     * 设置 processDetail
     * @param processDetail processDetail
     */
    public void setProcessDetail(ProcessDetail processDetail) {
        this.processDetail = processDetail;
    }
    /**
     * 返回  processDetailList
     * @return processDetailList
     */
    public List<ProcessDetail> getProcessDetailList() {
        return processDetailList;
    }
    /**
     * 设置 processDetailList
     * @param processDetailList processDetailList
     */
    public void setProcessDetailList(List<ProcessDetail> processDetailList) {
        this.processDetailList = processDetailList;
    }
    /**
     * 返回  product
     * @return product
     */
    public Product getProduct() {
        return product;
    }
    /**
   
/** 
 * @author M. C. Høj
 */
public abstract class Process {
	private int ProcessStep;
	private ProcessLine processLine;
	private ArrayList<ProcessLog> processLogs  = new ArrayList<ProcessLog>();
	public Process(int processStep, ProcessLine processLine) throws RuntimeException{
		if (processLine==null){
			throw new RuntimeException("processLine can't be set to null");
		} else {
			this.setProcessStep(processStep);
			this.processLine=processLine;
		}
	}
	public int getProcessStep(){
		return this.ProcessStep;
	}
	public void setProcessStep(int processStep)throws RuntimeException{
		if (processStep<0) {
			throw new RuntimeException("processStep can't be a negative number");
		} else {
			this.ProcessStep=processStep;
		}
	}
	public ProcessLine getProcessLine(){
		return this.processLine;
	}
	public ArrayList<ProcessLog> getProcessLogs(){
		return this.processLogs;
	}
	public void addProcessLog(ProcessLog processLog){
		this.processLogs.add(processLog);
		if (processLog.getProcess()!
public class ServiceLocator {
	public final static String FACEBOOK_SERVICE = "Facebook_Service";
	public final static String SIGNATURE_SERVICE = "SIGNATURE_SERVICE";
	private ServiceLocator() {
	}
	/**
     * <p>
     * This map is used to hold the instances of the services implementation
     * that are looked up, and serves as the cache.
     * </p>
     */
    private Map<String, IBaseService> cache = Collections.synchronizedMap(new HashMap<String, IBaseService>());
    private FacebookServiceConfig serviceConfig=new FacebookServiceConfig(Context.facebookAppId, Context.facebookAppSecret, Context.facebookAppChannelURL);
    /**
     * <p>
     * Stores the singleton instance of the service locator.
     * </p>
     */
    private static ServiceLocator instance = new ServiceLocator();
	public static ServiceLocator getInstance() {
		if(instance == null){
			instance = new ServiceLocator();
		}
		return instance;
	}
	public IBaseService getService(String serviceName) {
		IBaseService se
/**
 * Generated by Protogen
 * Thu Jul 03 12:55:47 CDT 2014
 */
@Component
public class InvDaoService {
    /*********** messageService ****************/
    private MessageService messageService; 
    public MessageService getMessageService() {
        return messageService;
    }
    @Autowired 
    public void setMessageService(MessageService messageService) {
        this.messageService = messageService;
    }
    /*********** systemSettingService ****************/
    private SystemSettingService systemSettingService; 
    public SystemSettingService getSystemSettingService() {
        return systemSettingService;
    }
    @Autowired 
    public void setSystemSettingService(SystemSettingService systemSettingService) {
        this.systemSettingService = systemSettingService;
    }
    /*********** propertyService ****************/
    private PropertyService propertyService; 
    public PropertyService getPropertyService() {
        return propertyService;
    }
    @Autowired 

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author russel
 */
@Aggregator(contextName = "com.smartitengineering.user.service")
public class Services {
  @InjectableField
  private OrganizationService organizationService;
  @InjectableField
  private UserService userService;
  @InjectableField
  private PrivilegeService privilegeService;
  @InjectableField
  private RoleService roleService;
  @InjectableField
  private SecuredObjectService securedObjectService;
  @InjectableField
  private UserGroupService userGroupService;
  @InjectableField
  private UserPersonService userPersonService;
  @InjectableField
  private AuthorizationService authorizationService;
  @InjectableField
  private PersonService personService;
  private Services() {
  }
  public PersonService getPersonService() {
    return personService;
  }
  public void setPersonService(PersonService personService) {
    this.personService = personService;
  }
 

    return authorizationService;
  }
  public void setAuthorizationService(AuthorizationService authorizationService) {
    this.authorizationService = authorizationService;
  }
  public OrganizationService getOrganizationService() {
    return organizationService;
  }
  public UserService getUserService() {
    return userService;
  }
  public PrivilegeService getPrivilegeService() {
    return privilegeService;
  }
  public RoleService getRoleService() {
    return roleService;
  }
  public SecuredObjectService getSecuredObjectService() {
    return securedObjectService;
  }
  public void setSecuredObjectService(SecuredObjectService securedObjectService) {
    this.securedObjectService = securedObjectService;
  }
  public UserGroupService getUserGroupService() {
    return userGroupService;
  }
  public void setUserGroupService(UserGroupService userGroupService) {
    this.userGroupService = userGroupService;
  }
  public UserPersonService getUserPersonService() {
    return userPer
/*
 * Copyright (c) 2013. Ground Zero Labs, Private Company.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @author <a href="mailto:gpan@groundzerolabs.com">George Panagiotopoulos</a>
 */
public class Handlers {
    public static HttpHandler errors(final boolean debugMode, final HttpHandler nextHandler) {
        return new ErrorHandler(debugMode, nextHandler);
    }
    public static HttpHandler errors(final HttpHandler nextHandler) {
        return new ErrorHandler(nextHandler);
    }
    public static HttpHandler sessio
/**
 * Map between a serviceDefinition and switchingService.
 *
 * @author hacksaw
 */
public class ServiceDefinitionMap {
    private NmlSwitchingServiceType switchingService;
    private ServiceDefinitionType serviceDefinition;
    /**
     * Get the NML SwitchingService.
     *
     * @return the switchingService
     */
    public NmlSwitchingServiceType getSwitchingService() {
        return switchingService;
    }
    /**
     * Set the NML SwitchingService.
     *
     * @param switchingService the switchingService to set
     */
    public void setSwitchingService(NmlSwitchingServiceType switchingService) {
        this.switchingService = switchingService;
    }
    /**
     * Get the NSI serviceDefinition.
     *
     * @return the serviceDefinition
     */
    public ServiceDefinitionType getServiceDefinition() {
        return serviceDefinition;
    }
    /**
     * Set the NSI serviceDefinition.
     *
     * @param serviceDefinition the serviceDefinition to set
     */
   
/**
 * 
 * @author bdavis, abaxter
 *
 * Interface to BRMS process runtime. 
 * 
 * For starting, creating, and aborting processes and signaling events to a process
 */
public interface ProcessService {
	/**
	 * Starts a process with no variables
	 * 
	 * @param releaseId Deployment information for the process's kjar
	 * @param processId The process's name 
	 * @return Process instance information
	 */
	ProcessInstance startProcess(KieReleaseId releaseId, String processId);
	/**
	 * Starts a process with provided variables
	 * 
	 * @param releaseId Deployment information for the process's kjar
	 * @param processId The process's name 
	 * @param parameters Process variables to start with
	 * @return Process instance information
	 */
	ProcessInstance startProcess(KieReleaseId releaseId, String processId, Map<String, Object> parameters);
	/**
	 * Created, but doesn't start, a process with provided variables
	 * 
	 * @param releaseId Deployment information for the process's kjar
	 * @param

	 * @param parameters Process variables to start with
	 * @return Process instance information
	 */
	ProcessInstance createProcessInstance(KieReleaseId releaseId, String processId, Map<String, Object> parameters);
	/**
	 * Starts a previously created process
	 * 
	 * @param processInstanceId The process instance's unique identifier
	 * @return Process instance information
	 */
	ProcessInstance startProcessInstance(long processInstanceId);
	/**
	 * Signal an event to a single process
	 * 
	 * @param type The event's ID in the process
	 * @param event The event object to be passed in with the event
	 * @param processInstanceId The process instance's unique identifier
	 */
	void signalEvent(String type, Object event, long processInstanceId);
	/**
	 * Returns process instance information. Will return null if no
	 * active process with that id is found
	 * 
	 * @param processInstanceId The process instance's unique identifier
	 * @return Process instance information
	 */
	ProcessInstance g
/**
 * 롤관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Service("egovRoleManageService")
public class EgovRoleManageServiceImpl extends AbstractServiceImpl implements EgovRoleManageService {
	@Resource(name="roleManageDAO")
	public RoleManageDAO roleManageDAO;
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception {
		return roleManageDAO.selectRole(roleManageVO);
	}
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception {
		return roleManageDAO.selectRoleL

	}
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception {
		roleManageDAO.deleteRole(roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void updateRole(RoleManage roleManage) throws Exception {
		roleManageDAO.updateRole(roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 등록
	 * @param roleManage RoleManage
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO insertRole(RoleManage roleManage, RoleManageVO roleManageVO) throws Exception {
		roleManageDAO.insertRole(roleManage);	
		roleManageVO.setRoleCode(roleManage.getRoleCode());
		return roleManageDAO.selectRole(roleManageVO);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @param roleManageVO RoleManageVO
	 * @return int
	 * @exception Exception
	 */
	public int selectRoleListT
/**
 * Copyright 2014-2015 SHAF-WORK
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * The {@code ProcessExecException} occurs, when the {@link Process process}
 * execution has failed.
 * 
 * @author Mykola Galushka
 */
@SuppressWarnings("serial")
public class ProcessExecException extends ProcessException {
	/**
	 * Constructs a new {@code ProcessExecException} object.
	 * 
	 * @param message
	 *            the message.
	 */
	public ProcessExecException(final String message) {
		super(message);
	}
	/**
	 * Constructs a ne

	 * 
	 * @param message
	 *            the message.
	 * @param cause
	 *            the cause.
	 */
	public ProcessExecException(final String message, final Throwable cause) {
		super(message, cause);
	}
	/**
	 * Constructs a new {@code ProcessExecException} for the
	 * {@link LocalProcess local process}.
	 * 
	 * @param process
	 *            the failed local process.
	 * @param cause
	 *            the cause.
	 */
	public ProcessExecException(final LocalProcess process,
			final Throwable cause) {
		super("Failed to execute the local process.", cause);
	}
	/**
	 * Constructs a new {@code ProcessExecException} for the
	 * {@link DistributedProcess distributed process}.
	 * 
	 * @param process
	 *            the failed distributed process.
	 * @param cause
	 *            the cause.
	 */
	public ProcessExecException(
			final DistributedProcess<?, ?, ?, ?, ?, ?> process,
			final Throwable cause) {
		super("Failed to execute the distributed process.", cause);
	}
	/**
	 * Constructs a n
public class RRQueueTests {
	@Test
	public void testTickTime() {
		ProcessQueue processes = new ProcessQueue();
		
		Process p1 = Process.makeProcess(8, 4);
		Process p2 = Process.makeProcess(4, 2);
		processes.addProcess(p1, 0);
		processes.addProcess(p2, 0);
		
		Queue queue = new RRQueue(processes, 8);		
		queue.run();
		
		assertTrue(queue.running_time == 24);
		
		for(ProcessStatistics p : ProcessStatistics.getAllStats()) {
			if(p.getProcess().equals(p1)) {
				double response_time = p.getResponseTime();
				double slowdown = p.getSlowDown(); 
				assertTrue(response_time == 8);
				assertTrue(slowdown == 1.5);
			}
		}
		
		double cpu_utilization = ProcessStatistics.getCPUUtilization();
	}
	@Test
	public void testTickTimeWithQuanta4() {
		ProcessQueue processes = new ProcessQueue();
		
		Process p1 = Process.makeProcess(8, 4);
		Process p2 = Process.makeProcess(4, 2);
		processes.addProcess(p1, 0);
		processes.addProcess(p2, 0);
		
		Queue queue = new RRQueue(processes, 4);		
		
/**
 * 권한관리에 관한 서비스 인터페이스 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  이문준          최초 생성
 *
 * </pre>
 */
public interface EgovAuthorManageService {
    /**
	 * 모든 권한목록을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return List<AuthorManageVO>
	 * @exception Exception
	 */
	public List<AuthorManageVO> selectAuthorAllList(AuthorManageVO authorManageVO) throws Exception;
	/**
	 * 시스템 사용자중 불필요한 시스템권한정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
	public void deleteAuthor(AuthorManage authorManage) throws Exception;
	/**
	 * 사용자의 시스테접근권한를 화면에서 입력하여 입력항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
	public void insertAuthor(AuthorManage authorManage) throws Exception;
	/**
	 * 개별사용자에게 할당된 권한 조회
	 * @p
/**
 * @author Jacky.gao
 * @since 2013年9月22日
 */
@Controller
public class ProcessController {
	@Autowired
	@Qualifier(ProcessService.BEAN_ID)
	private ProcessService processService;
	@RequestMapping(method=RequestMethod.POST,value="/uflo/process/start/id/{processId}")
	public @ResponseBody ProcessInstance startProcessById(@PathVariable long processId,@RequestBody StartProcessInfo info){
		return processService.startProcessById(processId, info);
	}
	@RequestMapping(method=RequestMethod.POST,value="/uflo/process/start/key/{processKey}")
	public @ResponseBody ProcessInstance startProcessByKey(@PathVariable String processKey,@RequestBody StartProcessInfo info){
		return processService.startProcessByKey(processKey, info);
	}
	@RequestMapping(method=RequestMethod.POST,value="/uflo/process/start/name/{processName}")
	public @ResponseBody ProcessInstance startProcessByName(@PathVariable String processName,@RequestBody StartProcessInfo info){
		return processService.startProcessByName(processN

	}
	@RequestMapping(method=RequestMethod.POST,value="/uflo/processinstance/delete/{processInstanceId}")
	public @ResponseBody void deleteProcessInstance(@PathVariable long processInstanceId){
		processService.deleteProcessInstanceById(processInstanceId);
	}
	@RequestMapping(method=RequestMethod.POST,value="/uflo/process/updatememory/id/{processId}")
	public @ResponseBody void updateProcessForMemory(@PathVariable long processId){
		processService.updateProcessForMemory(processId);
	}
	@RequestMapping(method=RequestMethod.POST,value="/uflo/process/delete/id/{processId}")
	public @ResponseBody void deleteProcessById(@PathVariable long processId){
		processService.deleteProcess(processId);
	}
	@RequestMapping(method=RequestMethod.POST,value="/uflo/process/deletememory/id/{processId}")
	public @ResponseBody void deleteProcessFromMemory(@PathVariable long processId){
		processService.deleteProcessFromMemory(processId);
	}
	@RequestMapping(method=RequestMethod.POST,value="/uflo/process/delet
public class HandlerAdapters {
    public static HandlerAdapter adjustRouteParametersPreProcess(final HandlerEntry entry, final HandlerAdapter handler) {
        return new HandlerAdapter() {
            @Override
            public void handle(Pipeline pipeline) {
                RouteParametersHandler routeParametersHandler = pipeline.get(RouteParametersHandler.class);
                if (routeParametersHandler != null)
                    routeParametersHandler.adjustFor(pipeline, entry);
                handler.handle(pipeline);
            }
        };
    }
    public static HandlerAdapter wrap(final PipelineDownstreamHandler handler) {
        return new HandlerAdapter() {
            @Override
            public void handle(Pipeline pipeline) {
                pipeline.with(Handler.Mode.class, Handler.Mode.Downstream);
                handler.handleDownstream(pipeline);
            }
        };
    }
    public static HandlerAdapter wrap(final PipelineUpstreamHandler handler) {
@Service("myProcessService")
public class ProcessServiceImpl implements ProcessService {
    @Inject
    private ProcessDAO myProcessDAO;
    @Override
    public ProcessDTO save(String appKey, String processName, String processDesc)  {
        logger.info("流程保存。。。");
        ProcessDTO process = new ProcessDTO();
        process.setAppKey(appKey);
        process.setProcessId(UUID.randomUUID().toString().replace("-", ""));
        process.setProcessName(processName);
        process.setProcessDesc(processDesc);
        myProcessDAO.save(process);
        return process;
    }
    @Override
    public Pager query(String param, int offset, int pagesize) {
        return myProcessDAO.query(param, offset, pagesize);
    }
    @Override
    public void delProcessByProcessId(String processId) {
        myProcessDAO.delProcessByProcessId
                (processId);
    }
    @Override
    public ProcessDTO update(int id, String processName, String processDesc) {
        return myProcessDAO.
/*    */ 
/*    */ 
/*    */ public class Process
/*    */ {
/*    */   private Task task;
/*    */   private Map<String, Object> variables;
/*    */   private ProcessInstance processInstance;
/*    */   private HistoricProcessInstance historicProcessInstance;
/*    */   private ProcessDefinition processDefinition;
/*    */ 
/*    */   @Transient
/*    */   public Task getTask()
/*    */   {
/* 33 */     return this.task;
/*    */   }
/*    */ 
/*    */   public void setTask(Task task) {
/* 37 */     this.task = task;
/*    */   }
/*    */   @Transient
/*    */   public Map<String, Object> getVariables() {
/* 42 */     return this.variables;
/*    */   }
/*    */ 
/*    */   public void setVariables(Map<String, Object> variables) {
/* 46 */     this.variables = variables;
/*    */   }
/*    */   @Transient
/*    */   public ProcessInstance getProcessInstance() {
/* 51 */     return this.processInstance;
/*    */   }
/*    */ 
/*    */   public void setProcessInstance(ProcessInstance pr
@Service
public class ProviderService {
	private static final Logger LOGGER = LoggerFactory
			.getLogger(ProviderService.class);
	@Autowired
	private CourseService courseService;
	@Autowired
	private SubjectService subjectService;
	@Autowired
	private TopicService topicService;
	@Autowired
	private ScoreBoardService scoreBoardService;
	@Autowired
	private PersonService personService;
	@Autowired
	private RoomService roomService;
	@Autowired
	private ParticipantsService participantsService;
	@Autowired
	private AveragesCalculationService averagesCalculationService;
	public AveragesCalculationService getAveragesCalculationService() {
		return averagesCalculationService;
	}
	public void setAveragesCalculationService(AveragesCalculationService averagesCalculationService) {
		this.averagesCalculationService = averagesCalculationService;
	}
	public PersonService getPersonService() {
		return personService;
	}
	public void setPersonService(PersonService personService) {
		this.personService 

	}
	public CourseService getCourseService() {
		return courseService;
	}
	public void setCourseService(CourseService courseService) {
		this.courseService = courseService;
	}
	public SubjectService getSubjectService() {
		return subjectService;
	}
	public void setSubjectService(SubjectService subjectService) {
		this.subjectService = subjectService;
	}
	public TopicService getTopicService() {
		return topicService;
	}
	public void setTopicService(TopicService topicService) {
		this.topicService = topicService;
	}
	public ScoreBoardService getScoreBoardService() {
		return scoreBoardService;
	}
	public void setScoreBoardService(ScoreBoardService scoreBoardService) {
		this.scoreBoardService = scoreBoardService;
	}
	public RoomService getRoomService() {
		return roomService;
	}
	public void setRoomService(RoomService roomService) {
		this.roomService = roomService;
	}
	public ParticipantsService getParticipantsService() {
		return participantsService;
	}
	public void setParticipantsServ
/**
 * 服务对象容器
 * 
 * @author jzw
 * @since 0.0.1
 */
public class ServiceHolder {
	private static final Logger logger = LoggerFactory
			.getLogger(ServiceHolder.class);
	private static ServiceHolder singleton;
	public static ServiceHolder getDefault() {
		return singleton;
	}
	public void activate() {
		singleton = this;
	}
	public void deactivate() {
		singleton = null;
	}
	private CourseService courseService;
	public void setCourseService(CourseService courseService) {
		logger.info("注入CourseService");
		this.courseService = courseService;
	}
	public void unsetCourseService(CourseService courseService) {
		logger.info("注销CourseService");
		if (this.courseService == courseService) {
			this.courseService = null;
		}
	}
	public CourseService getCourseService() {
		return this.courseService;
	}
	private LessonService lessonService;
	public void setLessonService(LessonService lessonService) {
		logger.info("注入LessonService");
		this.lessonService = lessonService;
	}
	public void unsetLe

		logger.info("注销LessonService");
		if (this.lessonService == lessonService) {
			this.lessonService = null;
		}
	}
	public LessonService getLessonService() {
		return lessonService;
	}
	private PPTService pptService;
	public void setPPTService(PPTService pptService) {
		logger.info("注入PPTService");
		this.pptService = pptService;
	}
	public void unsetPPTService(PPTService pptService) {
		logger.info("注销PPTService");
		if (this.pptService == pptService) {
			this.pptService = null;
		}
	}
	public PPTService getPPTService() {
		return pptService;
	}
	private ClassService classService;
	public void setClassService(ClassService classService) {
		logger.info("注入ClassService");
		this.classService = classService;
	}
	public void unsetClassService(ClassService classService) {
		logger.info("注销ClassService");
		if (this.classService == classService) {
			this.classService = null;
		}
	}
	public ClassService getClassService() {
		return classService;
	}
	private CurriculumService curriculumSe
/**
 * This is Service locator and it is factory of service class
 * @author Chandrabhan
 *	@version 1.1
 */
public class ServiceLocator {
	/**
	 * Logger to record logs in file
	 */
	private static Logger LOGGER = Logger.getLogger(ServiceLocator.class);
	/**
	 * Private class type variable
	 */
	private static ServiceLocator serviceLocator = null;
	private static final String service = "JavaBean";
	/**
	 * Map instance for contain service object.
	 */
	private static Map session = new HashMap();
	/**
	 * Private cunstroctor for singlton 
	 */
	private ServiceLocator() {
	}
	/**
	 * getinstance method
	 * @return serviceLocator
	 */
	public static ServiceLocator getInstance() {
		LOGGER.debug("Debug:Now in getInstance() ServiceLocator");
		if (serviceLocator == null) {
			serviceLocator = new ServiceLocator();
		}
		return serviceLocator;
	}
	/**
	 * getAccountService Method
	 * @return AccountServiceInt instance
	 */
	public AccountServiceInt getAccountService() {
		LOGGER.debug("Debu

		AccountServiceInt accountService = (AccountServiceInt) session
				.get("accountService");
		if (accountService == null) {
			if ("JavaBean".equals(service)) {
				LOGGER
						.debug("Debug:Now in getAccountService() JAVABeanImpl ServiceLocator");
				accountService = new AccountServiceImpl();
			}
			if ("EJB".equals(service)) {
				LOGGER
						.debug("Debug:Now in getAccountService()EJBImpl ServiceLocator not Implemented yet");
				accountService = null;
				System.out.println();
			}
			session.put("accountService", accountService);
		}
		return accountService;
	}
	/**
	 * getUserService Method
	 * @return UserServiceInt instance
	 */
	public UserServiceInt getUserService() {
		LOGGER.debug("Debug:Now in getUserService() ServiceLocator");
		UserServiceInt userService = (UserServiceInt) session
				.get("userService");
		if (userService == null) {
			if ("JavaBean".equals(service)) {
				LOGGER.debug("Debug:Now in getUserService() ServiceLocator");
				userService = new UserServ
public abstract class BaseServlet extends HttpServlet implements Constant{
	private static final long serialVersionUID = -2042216527569795845L;
	public void init() throws ServletException {
		super.init();
		initailizeMap();
	}
	protected HashMap<String,Basehandler> pageMap = new HashMap<String,Basehandler>();
	protected void initailizeMap() {
		
		pageMap.put(LoginHandler.getPageName(), new LoginHandler());
		
		pageMap.put(LogoutHandler.getPageName(), new LogoutHandler());
		
		pageMap.put(HomeSettingHandler.getPageName(), new HomeSettingHandler());
		
		pageMap.put(ItemGroupHandler.getPageName(), new ItemGroupHandler());
		
		pageMap.put(ItemCategoryHandler.getPageName(), new ItemCategoryHandler());
		
		pageMap.put(ItemHandler.getPageName(), new ItemHandler());
		
		pageMap.put(CustomerGroupHandler.getPageName(), new CustomerGroupHandler());
		
		pageMap.put(CustomerHandler.getPageName(), new CustomerHandler());
		
		pageMap.put(AccessPointHandler.getPageName(), new AccessPointHand

		
		pageMap.put(UserHandler.getPageName(), new UserHandler());
		
		pageMap.put(UserAccessHandler.getPageName(), new UserAccessHandler());
		
		pageMap.put(OfferHandler.getPageName(), new OfferHandler());
		
		pageMap.put(EnquiryHandler.getPageName(), new EnquiryHandler());
		
		pageMap.put(SalesmanEnquiryHandler.getPageName(), new SalesmanEnquiryHandler());
		
		pageMap.put(SalesmanDailyHandler.getPageName(), new SalesmanDailyHandler());
		
		pageMap.put(EnquiryRptHandler.getPageName(), new EnquiryRptHandler());
		
		pageMap.put(TaxHandler.getPageName(), new TaxHandler());
		
		pageMap.put(SalesHandler.getPageName(), new SalesHandler());
		
		pageMap.put(TransferHandler.getPageName(), new TransferHandler());
		
		pageMap.put(BranchDayEntryHandler.getPageName(), new BranchDayEntryHandler());
		
		pageMap.put(PurchaseHandler.getPageName(), new PurchaseHandler());
		
		pageMap.put(ExcelHandler.getPageName(), new ExcelHandler());
		
		pageMap.put(CollectionHandler.getPageName(), new Col

		
		pageMap.put(SalesReportHandler.getPageName(), new SalesReportHandler());
		
		pageMap.put(PurchaseReportHandler.getPageName(), new PurchaseReportHandler());
		
		pageMap.put(TransferReportHandler.getPageName(), new TransferReportHandler());
		
		pageMap.put(QuotationHandler.getPageName(), new QuotationHandler());
		
		pageMap.put(OrderHandler.getPageName(), new OrderHandler());
		
		pageMap.put(BranchDayEntryReportHandler.getPageName(), new BranchDayEntryReportHandler()); 
		
		pageMap.put(CustomerLedgerRptHandler.getPageName(), new CustomerLedgerRptHandler());
		
		pageMap.put(PromotionalMailHandler.getPageName(), new PromotionalMailHandler());
		
		pageMap.put(AjaxHandler.getPageName(), new AjaxHandler());
		 
		pageMap.put(ApprovalHandler.getPageName(), new ApprovalHandler());
		
		pageMap.put(BranchStockHandler.getPageName(), new BranchStockHandler());
		pageMap.put(LabourInvoiceHandler.getPageName(), new LabourInvoiceHandler());
		pageMap.put(LabourBillRptHandler.getPageName

		pageMap.put(CreditNoteHandler.getPageName(), new CreditNoteHandler());
		pageMap.put(CreditNoteRptHandler.getPageName(), new CreditNoteRptHandler());
		pageMap.put(PurchaseReturnHandler.getPageName(), new PurchaseReturnHandler());
		pageMap.put(PurchaseReturnRptHandler.getPageName(), new PurchaseReturnRptHandler());
		pageMap.put(LedgerAdjustmentHandler.getPageName(), new LedgerAdjustmentHandler());
		pageMap.put(ExhibitionOrderHandler.getPageName(), new ExhibitionOrderHandler());
		pageMap.put(ExhibitionQuotationHandler.getPageName(), new ExhibitionQuotationHandler());
		pageMap.put(OrderReportHandler.getPageName(), new OrderReportHandler());
		pageMap.put(CustomerEmailRptHandler.getPageName(), new CustomerEmailRptHandler());
		pageMap.put(TransferRequestHandler.getPageName(), new TransferRequestHandler());
		pageMap.put(StockRegisterHandler.getPageName(), new StockRegisterHandler());
		pageMap.put(PromotionalSMSHandler.getPageName(), new PromotionalSMSHandler());
		pageMap.put(Ite
/**
 * 부서일정관리를 처리하는 Dao Class 구현
 * @author 공통서비스 장동한
 * @since 2009.04.10
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.04.10  장동한          최초 생성
 *
 * </pre>
 */
@Repository("deptSchdulManageDao")
public class DeptSchdulManageDao extends EgovComAbstractDAO {
    /**
	 * 부서일정 목록을 Map(map)형식으로 조회한다. 
	 * @param Map(map) - 조회할 정보가 담긴 VO
	 * @return List
	 * @exception Exception
	 */
	public List selectDeptSchdulManageMainList(Map map) throws Exception{
		 return  (List)list("DeptSchdulManage.selectDeptSchdulManageMainList", map);
	}
    /**
	 * 부서일정 목록을 Map(map)형식으로 조회한다. 
	 * @param Map(map) - 조회할 정보가 담긴 VO
	 * @return List
	 * @exception Exception
	 */
	public List selectDeptSchdulManageRetrieve(Map map) throws Exception{
		 return  (List)list("DeptSchdulManage.selectDeptSchdulManageRetrieve", map);
	}
    /**
	 * 부서일정 목록을 VO(model)형식으로 조회한다. 
	 * @para

	 * @return DeptSchdulManageVO
	 * @exception Exception
	 */
	public DeptSchdulManageVO selectDeptSchdulManageDetailVO(DeptSchdulManageVO deptSchdulManageVO) throws Exception{
		return (DeptSchdulManageVO)getSqlMapClientTemplate().queryForObject("DeptSchdulManage.selectDeptSchdulManageDetailVO", deptSchdulManageVO);
	}
    /**
	 * 부서일정 목록을 조회한다. 
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @exception Exception
	 */
	public List selectDeptSchdulManageList(ComDefaultVO searchVO) throws Exception{
		return (List)list("DeptSchdulManage.selectDeptSchdulManage", searchVO);
	}
    /**
	 * 부서일정를(을) 상세조회 한다.
	 * @param deptSchdulManageVO - 부서일정 정보 담김 VO
	 * @return List
	 * @exception Exception
	 */
	public List selectDeptSchdulManageDetail(DeptSchdulManageVO deptSchdulManageVO) throws Exception{
		return (List)list("DeptSchdulManage.selectDeptSchdulManageDetail", deptSchdulManageVO);
	}
    /**
	 * 부서일정를(을) 목록 전체 건수를(을) 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return int
	 

	 */
	public int selectDeptSchdulManageListCnt(ComDefaultVO searchVO) throws Exception{
		return (Integer)getSqlMapClientTemplate().queryForObject("DeptSchdulManage.selectDeptSchdulManageCnt", searchVO);
	}
    /**
	 * 부서일정를(을) 등록한다.
	 * @param qdeptSchdulManageVO - 부서일정 정보 담김 VO
	 * @exception Exception
	 */
	public void insertDeptSchdulManage(DeptSchdulManageVO deptSchdulManageVO) throws Exception{
		insert("DeptSchdulManage.insertDeptSchdulManage", deptSchdulManageVO);
	}
    /**
	 * 부서일정를(을) 수정한다.
	 * @param deptSchdulManageVO - 부서일정 정보 담김 VO
	 * @exception Exception
	 */
	public void updateDeptSchdulManage(DeptSchdulManageVO deptSchdulManageVO) throws Exception{
		insert("DeptSchdulManage.updateDeptSchdulManage", deptSchdulManageVO);
	}
    /**
	 * 부서일정를(을) 삭제한다.
	 * @param deptSchdulManageVO - 부서일정 정보 담김 VO
	 * @exception Exception
	 */
	public void deleteDeptSchdulManage(DeptSchdulManageVO deptSchdulManageVO) throws Exception{
		delete("DeptSchdulManage.deleteDiaryManage", dept
/**
 * 消息管理
 */
public class MessageManager {
	private Handler handler = null;
	private Object result;
	public MessageManager(Handler handler) {
		this.handler = handler;
	}
	public Handler getHandler() {
		return handler;
	}
	public void setHandler(Handler handler) {
		this.handler = handler;
	}
	public Object getResult() {
		return result;
	}
	private void setResult(Object result) {
		this.result = result;
	}
	public void sendHandlerMessage(int msgid, Object obj) {
		if (handler != null) {
			Message message = new Message();
			message.what = msgid;
			message.obj = obj;
			handler.sendMessage(message);
		}
		setResult(obj);
	}
	public static void sendMessage(Handler handler, int msgid, Object obj) {
		if (handler != null) {
			Message message = handler.obtainMessage();
			message.what = msgid;
			message.obj = obj;
			handler.sendMessage(message);
		}
	}
	public static void sendMessage(Handler handler, int msgid, Object obj, int position) {
		if (handler != null) {
			Message messag
/**
 * @author Igor Usenko
 *         Date: 24.11.2009
 */
public class ProcessManagerTest extends TestCase {
    public ProcessManagerTest(final String _s) {
        super(_s);
    }
    public void testSmoke() {
        ProcessExecutorMock mock = new ProcessExecutorMock();
        ExternalProcessManager manager = new ExternalProcessManager(3, mock);
        assertEquals(ProcessWrapper.PROCESS_TIMEOUT, manager.call("1", "2", ProcessWrapper.WAIT_FOREVER));
        assertEquals(ProcessWrapper.PROCESS_TIMEOUT, manager.call("1", "2", ProcessWrapper.WAIT_FOREVER));
        assertEquals(ProcessWrapper.PROCESS_TIMEOUT, manager.call("1", "2", ProcessWrapper.WAIT_FOREVER));
        assertEquals(ProcessWrapper.PROCESS_DONT_RUN, manager.call("1", "2", ProcessWrapper.WAIT_FOREVER));
    }
    public void testNormalThenBan() {
        ProcessExecutorMock mock = new ProcessExecutorMock();
        mock.setReply(ProcessWrapper.PROCESS_OK);
        ExternalProcessManager manager = new ExternalProcessM
/**
 * @Project Meituan
 * @Name ProcessUtil
 * @User Slbw
 * @Time 2015-1-28 下午3:23:40
 * @Version 1.0
 * @describe 
 */
/**
 * @author F
 *
 */
public class ProcessUtil {
	private static ProcessUtil processUtil;
	private HttpSession session;
	private HashMap<String,ProcessStatus> map;
	private ProcessUtil(HttpSession session)
	{
		map=new HashMap<String, ProcessStatus>();
		this.session=session;
	}
	public static ProcessUtil newInstance(HttpSession session)
	{
		if(processUtil==null)
		{
			processUtil=new ProcessUtil(session);
		}
		return processUtil;
	}
	public void setProcess(String cityId,String process,String status)
	{
		XLog.d(status+" "+process);
		ProcessStatus processStatus=new ProcessStatus();
		processStatus.setProcess(process);
		processStatus.setStatus(status);
		if(map.containsKey(cityId))
		{
			map.remove(cityId);
			map.put(cityId,processStatus);
		}
		else
		{
			map.put(cityId,processStatus);
		}
		if(session!=null)
		{
			session.setAttribute("updateStatus",map)
public class ServiceHolder {
	private static ServiceHolder singleton;
	public static ServiceHolder getDefault() {
		return singleton;
	}
	public void activate() {
		singleton = this;
	}
	public void deactivate() {
		singleton = null;
	}
	private FileService fileService;
	public void unsetFileService(FileService fileService) {
		if (this.fileService == fileService) {
			this.fileService = null;
		}
	}
	public void setFileService(FileService fileService) {
		this.fileService = fileService;
	}
	public FileService getFileService() {
		return fileService;
	}
	private TagService tagService;
	public void unsetTagService(TagService tagService) {
		if (this.tagService == tagService) {
			this.tagService = null;
		}
	}
	public void setTagService(TagService tagService) {
		this.tagService = tagService;
	}
	public TagService getTagService() {
		return tagService;
	}
	private CategoryService categoryService;
	public void unsetCategoryService(CategoryService categoryService) {
		if (this.categorySer
/**
 *
 * @author om95446
 */
public class CommerceExpressCRUD {
    private static CommerceExpressCRUD commerceExpressCRUD;
    private final static ApplicationContext CTX = GetContext.getApplicationContext();
    private AdministratorCrudService administratorCrudService;
    private CategoryCrudService categoryCrudService;
    private ProductCrudService productCrudService;
    private CustomerCrudService customerCrudService;
    private OrdersCrudService ordersCrudService;
    private OrderLineCrudService orderLineCrudService;
    private AccessDetailsCrudService accessDetailsCrudService;
    private AddressCrudService addressCrudService;
    private FAQCrudService fAQCrudService;
    private RatingCrudService ratingCrudService;
    private RolesCrudService rolesCrudService;
    private UsersCrudService usersCrudService;
    private WishListCrudService wishListCrudService;
    
    private CommerceExpressCRUD() {
    }
    
    public static synchronized CommerceExpressCRUD getCommer

        if (commerceExpressCRUD == null) {
            commerceExpressCRUD = new CommerceExpressCRUD();
        }
        return commerceExpressCRUD;
    }
    
    public AdministratorCrudService getAdministratorCrudService() {
        administratorCrudService = (AdministratorCrudService) CTX.getBean("AdministratorCrudService");
        return administratorCrudService;
    }
    
    public WishListCrudService getWishListCrudService() {
        wishListCrudService = (WishListCrudService) CTX.getBean("WishListCrudService");
        return wishListCrudService;
    }
    
    public AddressCrudService getAddressCrudService() {
        addressCrudService = (AddressCrudService) CTX.getBean("AddressCrudService");
        return addressCrudService;
    }
    
    public FAQCrudService getFAQCrudService() {
        fAQCrudService = (FAQCrudService) CTX.getBean("FAQCrudService");
        return fAQCrudService;
    }
    
    public RatingCrudService getRatingCrudService() {
        ratingCrud

        return ratingCrudService;
    }
    
    public OrdersCrudService getOrdersCrudService() {
        ordersCrudService = (OrdersCrudService) CTX.getBean("OrdersCrudService");
        return ordersCrudService;
    }
    
    public RolesCrudService getRolesCrudService() {
        rolesCrudService = (RolesCrudService) CTX.getBean("RolesCrudService");
        return rolesCrudService;
    }
    
    public UsersCrudService getUsersCrudService() {
        usersCrudService = (UsersCrudService) CTX.getBean("UsersCrudService");
        return usersCrudService;
    }
    
    public CustomerCrudService getCustomerCrudService() {
        customerCrudService = (CustomerCrudService) CTX.getBean("CustomerCrudService");
        return customerCrudService;
    }
    
    public OrderLineCrudService getOrderLineCrudService() {
        orderLineCrudService = (OrderLineCrudService) CTX.getBean("OrderLineCrudService");
        return orderLineCrudService;
    }
    
    public AccessDetailsCrudSer
/**
 * Created by zhongqinng on 1/1/15.
 */
public class AssetHandler {
    private String TAG = "AssetHandler";
    public FrameLayoutHandler frameLayoutHandler;
    public ImageButtonHandler imageButtonHandler;
    public LinearLayoutHandler linearLayoutHandler;
    public TextViewHandler textViewHandler;
    public EditTextHandler editTextHandler;
    public KeyBoardHandler keyBoardHandler;
    public ImageViewHandler imageViewHandler;
    public ButtonHandler buttonHandler;
    public SmartImageViewHandler smartImageViewHandler;
    public MapViewHandler mapViewHandler;
    public ToastHandler toastHandler;
    public AssetHandler(FragmentActivity fragmentActivity){
        frameLayoutHandler =new FrameLayoutHandler();
        imageButtonHandler =new ImageButtonHandler();
        linearLayoutHandler =new LinearLayoutHandler();
        textViewHandler =new TextViewHandler();
        editTextHandler=new EditTextHandler();
        keyBoardHandler=new KeyBoardHandler(fragmentActivity);
/**
 * 일정관리를 처리하는 Dao Class 구현
 * @author 공통서비스 장동한
 * @since 2009.04.10
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.04.10  장동한          최초 생성
 *
 * </pre>
 */
@Repository("indvdlSchdulManageDao")
public class IndvdlSchdulManageDao extends EgovComAbstractDAO {
    /**
	 * 메인페이지/일정관리조회 목록을 Map(map)형식으로 조회한다. 
	 * @param Map(map) - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	public List selectIndvdlSchdulManageMainList(Map map) throws Exception{
		 return  (List)list("IndvdlSchdulManage.selectIndvdlSchdulManageMainList", map);
	}
    /**
	 * 일정 목록을 Map(map)형식으로 조회한다. 
	 * @param Map(map) - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	public List selectIndvdlSchdulManageRetrieve(Map map) throws Exception{
		 return  (List)list("IndvdlSchdulManage.selectIndvdlSchdulManageRetrieve", map);
	}
    /**
	 * 일정 목록을 VO(model)형식으로 조회한다

	 * @param indvdlSchdulManageVO - 조회할 정보가 담긴 VO
	 * @return IndvdlSchdulManageVO
	 * @throws Exception
	 */
	public IndvdlSchdulManageVO selectIndvdlSchdulManageDetailVO(IndvdlSchdulManageVO indvdlSchdulManageVO) throws Exception{
		return (IndvdlSchdulManageVO)getSqlMapClientTemplate().queryForObject("IndvdlSchdulManage.selectIndvdlSchdulManageDetailVO", indvdlSchdulManageVO);
	}
    /**
	 * 일정 목록을 조회한다. 
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	public List selectIndvdlSchdulManageList(ComDefaultVO searchVO) throws Exception{
		return (List)list("IndvdlSchdulManage.selectIndvdlSchdulManage", searchVO);
	}
    /**
	 * 일정를(을) 상세조회 한다.
	 * @param indvdlSchdulManageVO - 일정 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
	public List selectIndvdlSchdulManageDetail(IndvdlSchdulManageVO indvdlSchdulManageVO) throws Exception{
		return (List)list("IndvdlSchdulManage.selectIndvdlSchdulManageDetail", indvdlSchdulManageVO);
	}
    /**
	 * 일정를(을) 목록 전

	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return int
	 * @throws Exception
	 */
	public int selectIndvdlSchdulManageListCnt(ComDefaultVO searchVO) throws Exception{
		return (Integer)getSqlMapClientTemplate().queryForObject("IndvdlSchdulManage.selectIndvdlSchdulManageCnt", searchVO);
	}
    /**
	 * 일정를(을) 등록한다.
	 * @param qindvdlSchdulManageVO - 일정 정보 담김 VO
	 * @throws Exception
	 */
	public void insertIndvdlSchdulManage(IndvdlSchdulManageVO indvdlSchdulManageVO) throws Exception{
		insert("IndvdlSchdulManage.insertIndvdlSchdulManage", indvdlSchdulManageVO);
	}
    /**
	 * 일정를(을) 수정한다.
	 * @param indvdlSchdulManageVO - 일정 정보 담김 VO
	 * @throws Exception
	 */
	public void updateIndvdlSchdulManage(IndvdlSchdulManageVO indvdlSchdulManageVO) throws Exception{
		insert("IndvdlSchdulManage.updateIndvdlSchdulManage", indvdlSchdulManageVO);
	}
    /**
	 * 일정를(을) 삭제한다.
	 * @param indvdlSchdulManageVO - 일정 정보 담김 VO
	 * @throws Exception
	 */
	public void deleteIndvdlSchdulManage(IndvdlSchdulManag
/**
 * Created by James Cooper <james@bitmechanic.com>
 * Date: Feb 6, 2010
 */
public class InfrastructureContainer implements Infrastructure {
    
    private PersistenceService persistenceService;
    private BlobService blobService;
    private MailService mailService;
    private QueueService queueService;
    private CacheService cacheService;
    private AsyncService asyncService;
    private ImageService imageService;
    private BillingService billingService;
    private LockService lockService;
    public BillingService getBillingService() {
        return billingService;
    }
    public void setBillingService(BillingService billingService) {
        this.billingService = billingService;
    }
    public AsyncService getAsyncService() {
        return asyncService;
    }
    public void setAsyncService(AsyncService asyncService) {
        this.asyncService = asyncService;
    }
    public BlobService getBlobService() {
        return blobService;
    }
    public void setBl

        this.blobService = blobService;
    }
    public CacheService getCacheService() {
        return cacheService;
    }
    public void setCacheService(CacheService cacheService) {
        this.cacheService = cacheService;
    }
    public MailService getMailService() {
        return mailService;
    }
    public void setMailService(MailService mailService) {
        this.mailService = mailService;
    }
    public PersistenceService getPersistenceService() {
        return persistenceService;
    }
    public void setPersistenceService(PersistenceService persistenceService) {
        persistenceService.setInfrastructure(this);
        this.persistenceService = persistenceService;
    }
    public QueueService getQueueService() {
        return queueService;
    }
    public void setQueueService(QueueService queueService) {
        this.queueService = queueService;
    }
    public ImageService getImageService() {
        return imageService;
    }
    public void setImageServic
/*
 * PartA: this class will use the heap sort to sort and print an 
 * array of processes based on priority and time stamp
 * */
public class PartA {
	/*
	 * this class HAS A process array to store processes, a heap sort to
	 * perform the sorting
	 * */
	Process[] processArray;
	ProcessHeapSort heapSort;
	/*
	 * constructor
	 * */
	public PartA(Process[] processArray){
		this.processArray = processArray;
		this.heapSort = new ProcessHeapSort();
	}
	public static void main(String[] args) {
			
		
		Process[] processArray = new Process[9];
		
		/*
		 * create processes to sort as specified in the  assignment
		 * */
		Process p1 = new Process(PriorityClass.CRITICAL, (long) 100);
		Process p2 = new Process(PriorityClass.NORMAL, (long) 50);
		Process p3 = new Process(PriorityClass.BACKGROUND, (long) 1000);
		Process p4 = new Process(PriorityClass.BACKGROUND, (long) 900);
		Process p5 = new Process(PriorityClass.NORMAL, (long) 100);
		Process p6 = new Process(PriorityClass.CRITICAL, (long
public abstract class AbstractMavenRepositoryTemplate
    extends AbstractRepositoryTemplate
    private RepositoryPolicy repositoryPolicy;
    public AbstractMavenRepositoryTemplate( DefaultRepositoryTemplateProvider provider, String id, String description,
                                            ContentClass contentClass, Class<?> mainFacet,
                                            RepositoryPolicy repositoryPolicy )
    {
        super( provider, id, description, contentClass, mainFacet );
        setRepositoryPolicy( repositoryPolicy );
    }
    @Override
    public boolean targetFits( Object clazz )
    {
        return super.targetFits( clazz ) || clazz.equals( getRepositoryPolicy() );
    }
    public RepositoryPolicy getRepositoryPolicy()
    {
        return repositoryPolicy;
    }
    public void setRepositoryPolicy( RepositoryPolicy repositoryPolicy )
    {
        this.repositoryPolicy = repositoryPolicy;
    }
    @Override
    public MavenRepository create()
     
/**
 * 图片管理 业务层
 * 
 * @author an hao
 *
 * 2014-12-25
 */
public interface PictureManageService {
    /**
     * 插入一条数据，并返回该条数据的主键
     * @param pictureManage
     * @return
     */
    public int insertAndGetPictureId(PictureManage pictureManage);
    
    /**
     * 获取促销图片（即 类型为 2））信息
     * 信息 ：data， 与关键字有关
     * @return
     */
    public List<Object> getPictureManageByType(Long cityId);
    /**
     * 获取轮播图片（即 类型为 1））信息
     * @return
     */
    public List<Object> getNextPictureManageByType(Long cityId);
    
    /**
     * 根据 PictureManage 的id，更新 PictureManage 对象（图片地址字段不会更新）
     * @param pictureManage
     * @return
     */
    public Map<String, Object> updatePictureManage(PictureManage pictureManage);
    
    /**
     * 获取图片列表
     * @param pictureManage
     * @param pagination
     * @return
     */
    public Map<String, Object> listPagePictureManage(PictureManage pictureManage, Pagination pagination);
    
    /**
     * 批量 修改状态
     * @param state 状态（0：使用； 1：停用）
    
/**
 * 
 */
/**
 * @author hrishi
 * 
 */
public class ProcessRegistryManager implements IProcessRegistryManager {
	public ProcessRegistryManager() {
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.openappengine.bpm.procrepo.IProcessRegistryManager#loadProcessRegistry
	 * (java.io.File[])
	 */
	public void loadProcessRegistry(String[] definitionFiles)
			throws ProcessRegistryException {
		if (definitionFiles != null && definitionFiles.length != 0) {
			for (String file : definitionFiles) {
				loadProcessRegistry(file);
			}
		}
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.openappengine.bpm.procrepo.IProcessRegistryManager#loadProcessRegistry
	 * (java.io.File)
	 */
	public void loadProcessRegistry(String file)
			throws ProcessRegistryException {
		try {
			InputStream inputStream = getClass().getClassLoader()
					.getResourceAsStream(file);
			ProcessDefReader defReader = new ProcessDefReader(inputStream);
			ProcessDefinition processDefinition = defReader
					.readProcessDefinit
public class Demo5 {
	public static void main(String[] args) {
		ManageQueue manageQueue = new ManageQueue();
		
		Producer producer = new Producer(manageQueue);
		Consumer consumer = new Consumer(manageQueue);
		
		new Thread(producer).start();
		new Thread(consumer).start();
	}
class Producer implements Runnable {
	private ManageQueue manageQueue;
	public Producer(ManageQueue manageQueue){
		this.manageQueue = manageQueue;
	}
	@Override
	public void run() {
		for (int i = 0; i < 100; i++) {
			
			try {
				Thread.currentThread().sleep((int) (Math.random() * 100));
				Person person =  new Person();
				
				person.setName("Person " + i);
				person.setId(i);
				manageQueue.enqueue(person);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			
		}
		
	}
class Consumer implements Runnable {
	private ManageQueue manageQueue;
	public Consumer(ManageQueue manageQueue) {
		this.manageQueue = manageQueue;
	}
	@Override
	public void run() {
		for (int i = 0; i < 100; i++)
/**
 * 개요
 * - 휴가관리에 대한 Service Interface를 정의한다.
 * 
 * 상세내용
 * - 휴가관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 휴가관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
public interface EgovVcatnManageService {
	/**
	 * 휴가관리 정보를 관리하기 위해 등록된 로그인화면이미지 목록을 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return List - 휴가관리 목록
	 */
	public List<VcatnManageVO> selectVcatnManageList(VcatnManageVO vcatnManageVO) throws Exception;
	/**
	 * 휴가관리 목록 총 갯수를 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return int - 휴가관리 카운트 수
	 */
	public int selectVcatnManageListTotCnt(VcatnManageVO vcatnManageVO) throws Exception ;
	/**
	 * 등록된 휴가관리의 상세정보를 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return VcatnManageVO - 휴가관리 VO
	 */
	public VcatnManageVO selectVcatnManage(VcatnManageVO vcatnManageVO) throws Exception;
	/**
	 * 휴가관리 정보를 신규로 등록한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public String insertVcatnManage(VcatnManage vcatnManage, VcatnManageVO vcatnManageVO) 

	/**
	 * 기 등록된 휴가관리 정보를 수정한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public String updtVcatnManage(VcatnManage vcatnManage, VcatnManageVO vcatnManageVO) throws Exception;
	/**
	 * 기 등록된 휴가관리 정보를 삭제한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public void deleteVcatnManage(VcatnManage vcatnManage) throws Exception;
    /**
	 * 휴가일자 중복여부 체크
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return int
	 * @exception Exception
	 */
	public int selectVcatnManageDplctAt(VcatnManageVO vcatnManageVO) throws Exception;
		
	/*** 승인처리관련 ***/
	/**
	 * 휴가관리정보 승인 처리를 위해 신청된 휴가관리 목록을 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return List - 휴가관리 목록
	 */
	public List<VcatnManageVO> selectVcatnManageConfmList(VcatnManageVO vcatnManageVO) throws Exception;
	/**
	 * 휴가관리정보 승인 처리를 위해 신청된 휴가관리 목록 총 갯수를 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return int - 휴가관리 카운트 수
	 */
	public int selectVcatnManageConfmListTotCnt(VcatnManageVO vcatnManageVO) throws Exception ;
	/**
	 * 신청된 휴가를 승인처리한다.
	 * @param vcatnMa
/*
 * Created On:  Nov 19, 2007 9:20:48 AM
 */
/**
 * <b>Title:</b>thinkParity Ophelia Support UI Profile Delete Action<br>
 * <b>Description:</b><br>
 * 
 * @author raymond@thinkparity.com
 * @version 1.1.2.1
 */
public final class Terminate extends AbstractAction {
    /**
     * Determine if the process is the executable.
     * 
     * @param process
     *            A <code>ProcessInfo</code>.
     * @return True if the process is the thinkParity executable.
     */
    private static boolean isExecutable(final ProcessInfo process) {
        final File executable = new File(System.getProperty(
                Constants.PropertyNames.ThinkParity.Executable));
        return process.getFile().equals(executable.getName());
    }
    /**
     * Determine if the process is the image executable.
     * 
     * @param process
     *            A <code>ProcessInfo</code>.
     * @return True if the process is the image executable.
     */
    private static boolean isImageExecutable(fina

        final File imageExecutable = new File(System.getProperty(
                Constants.PropertyNames.ThinkParity.ImageExecutable));
        return process.getFile().equals(imageExecutable.getName());
    }
    /**
     * Determine if the parent process is the thinkParity executable.
     * 
     * @param process
     *            A <code>ProcessInfo</code>.
     * @param processList
     *            A <code>List<ProcessInfo></code>.
     * @return True if the parent process is the thinkParity executable.
     */
    private static boolean isParentExecutable(final ProcessInfo process,
            final List<ProcessInfo> processList) {
        ProcessInfo parent = null;
        for (final ProcessInfo p : processList) {
            if (p.getId().equals(process.getParentId())) {
                parent = p;
                break;
            }
        }
        return null == parent ? false : isExecutable(parent);
    }
    /**
     * Determine if the parent process is non existent.


     * @param process
     *            A <code>ProcessInfo</code>.
     * @param processList
     *            A <code>List<ProcessInfo></code>.
     * @return True if the parent process is non existent.
     */
    private static boolean isParentNull(final ProcessInfo process,
            final List<ProcessInfo> processList) {
        ProcessInfo parent = null;
        for (final ProcessInfo p : processList) {
            if (p.getId().equals(process.getParentId())) {
                parent = p;
                break;
            }
        }
        return null == parent ? true : false;
    }
    /**
     * Determine if the process is a target for termination.
     * 
     * @param process
     *            A <code>ProcessInfo</code>.
     * @param processList
     *            A <code>List<ProcessInfo></code>.
     * @return True if the process is the thinkParity executable or if it is a
     *         child of a thinkParity executable.
     */
    private static boolean isTarget(f

            final List<ProcessInfo> processList) {
        if (isExecutable(process)) {
            return true;
        } else {
            if (isParentExecutable(process, processList)) {
                return true;
            } else {
                if (isImageExecutable(process) && isParentNull(process, processList)) {
                    return true;
                } else {
                    return false;
                }
            }
        }
    }
    /**
     * Create Kill.
     *
     */
    public Terminate() {
        super("/application/process/terminate");
    }
    /**
     * @see com.thinkparity.ophelia.support.ui.action.Action#invoke(com.thinkparity.ophelia.support.ui.action.Input)
     *
     */
    @Override
    public void invoke(final Input input) {
        final ProcessUtil processUtil = getProcessUtil();
        try {
            final List<ProcessInfo> processList = processUtil.getProcessList();
            final List<ProcessInfo> targetProcessList = ne
/**
 * 권한관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성
 *
 * </pre>
 */
@Repository("authorManageDAO")
public class AuthorManageDAO extends EgovAbstractDAO {
    /**
	 * 권한목록을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return List<AuthorManageVO>
	 * @exception Exception
	 */
    @SuppressWarnings("unchecked")
	public List<AuthorManageVO> selectAuthorList(AuthorManageVO authorManageVO) throws Exception {
        return (List<AuthorManageVO>) list("authorManageDAO.selectAuthorList", authorManageVO);
    }
	/**
	 * 권한을 등록한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void insertAuthor(AuthorManage authorManage) throws Exception {
        insert("authorManageDAO.insertAuth

    }
    /**
	 * 권한을 수정한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void updateAuthor(AuthorManage authorManage) throws Exception {
        update("authorManageDAO.updateAuthor", authorManage);
    }
    /**
	 * 권한을 삭제한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void deleteAuthor(AuthorManage authorManage) throws Exception {
        delete("authorManageDAO.deleteAuthor", authorManage);
    }
    /**
	 * 권한을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return AuthorManageVO
	 * @exception Exception
	 */
    public AuthorManageVO selectAuthor(AuthorManageVO authorManageVO) throws Exception {
        return (AuthorManageVO) selectByPk("authorManageDAO.selectAuthor", authorManageVO);
    }
    /**
	 * 권한목록 총 갯수를 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectAuthorListTotCnt(AuthorManageVO authorManageVO)  throws Exception {
        return (I
public class NestedContentHandler extends DefaultContentHandler {
    static class HandlerChain {
        ContentHandler handler;
        HandlerChain parent;
        HandlerChain(ContentHandler handler) {
            this.handler = handler;
        }
        HandlerChain(ContentHandler handler, HandlerChain parent) {
            this.handler = handler;
            this.parent = parent;
        }
    }
    private final XMLReader xmlreader;
    private HandlerChain handlers;
    public NestedContentHandler(NestedContentHandler parent) {
        this(parent.xmlreader);
    }
    public NestedContentHandler(XMLReader xmlreader, ContentHandler handler) {
        this.xmlreader = xmlreader;
        this.handlers = new HandlerChain(handler);
    }
    public NestedContentHandler(XMLReader xmlreader) {
        this.xmlreader = xmlreader;
    }
    public final XMLReader getXMLReader() {
        return xmlreader;
    }
    public final void pushHandler(ContentHandler handler) {
        handle
public interface RepositoryService {
	public List<GoodsRepository> saveOrUpdateRepository(HttpServletRequest request, GoodsRepository goodsRepository) throws Exception;
	public List<GoodsRepository> getRepositoryByLoginName(String loginName) throws Exception;
	public List<GoodsRepository> getRepositoryByLoginNameAndType(String loginName,String type, boolean excludeSelf) throws Exception;
	public GoodsRepository getRepositoryByCode(String repositoryCode) throws Exception;
	public void updateRepositoryUser(GoodsRepositoryUser repositoryUser) throws Exception;
	public void removeRepository(GoodsRepository goodsRepositoryFromPage) throws Exception;
	public List<GoodsRepositoryUser> getRepositoryUserByRepositoryCode(String repositoryCode, String currentUser) throws Exception;
	public List<GoodsRepositoryUser> getRepositoryUserByUserId(String repositoryCode, String userId) throws Exception;
	public void saveRepositoryUser(GoodsRepositoryUser repositoryUser) throws Exception;
	public void rem
/**
 * Created by mavarazy on 9/15/14.
 */
public class IntegrationGoalOperations implements GoalOperations {
    final private GoalConfigurationService configurationService;
    final private GoalConstructionService constructionService;
    final private GoalSuggestionService suggestionService;
    final private GoalRecordService recordService;
    final private GoalInitiationService initiationService;
    final private GoalActionService actionService;
    final private GoalVictoryService victoryService;
    public IntegrationGoalOperations(String player,
        GoalConfigurationServiceController configurationService,
        GoalInitiationServiceController initiationService,
        GoalSuggestionServiceController suggestionService,
        GoalConstructionServiceController constructionService,
        GoalActionServiceController actionService,
        GoalRecordServiceController recordService,
        GoalVictoryServiceController victoryService) {
        this.recordService = new I

        this.configurationService = new IntegrationGoalConfigurationService(player, configurationService);
        this.suggestionService = new IntegrationGoalSuggestionService(player, suggestionService);
        this.initiationService = new IntegrationGoalInitiationService(player, initiationService);
        this.constructionService = new IntegrationGoalConstructionService(player, constructionService);
        this.actionService = new IntegrationGoalActionService(player, actionService);
        this.victoryService = new IntegrationGoalVictoryService(player, victoryService);
    }
    @Override
    public GoalConfigurationService configurationService() {
        return configurationService;
    }
    @Override
    public GoalConstructionService constructionService() {
        return constructionService;
    }
    @Override
    public GoalSuggestionService suggestionService() {
        return suggestionService;
    }
    @Override
    public GoalInitiationService initiationService() {

public interface HasVideoHandlers
    HandlerRegistration addAbortHandler(VideoAbortHandler abortHandler);
    HandlerRegistration addCanPlayHandler(VideoCanPlayHandler canPlayHandler);
    HandlerRegistration addCanPlayThroughHandler(VideoCanPlayThroughHandler canPlayThroughHandler);
    HandlerRegistration addDurationChangeHandler(VideoDurationChangeHandler durationChangeHandler);
    HandlerRegistration addEmptyHandler(VideoEmptyHandler emptyHandler);
    HandlerRegistration addEndedHandler(VideoEndedHandler endedHandler);
    HandlerRegistration addErrorHandler(VideoErrorHandler errorHandler);
    HandlerRegistration addLoadDataHandler(VideoLoadDataHandler loadDataHandler);
    HandlerRegistration addLoadMetadataHandler(VideoLoadMetadataHandler loadMetadataHandler);
    HandlerRegistration addLoadStartHandler(VideoLoadStartHandler loadStartHandler);
    HandlerRegistration addPauseHanlder(VideoPauseHandler pauseHandler);
    HandlerRegistration addPlayHandler(VideoPlayHandler playH
/**
 * Услуга
 * 
 * @author dima_d
 */
public class Service implements Serializable {
	private static final long serialVersionUID = 5146546219455184305L;
	public String getServiceCode() {
		return serviceCode;
	}
	public void setServiceCode(String serviceCode) {
		this.serviceCode = serviceCode;
	}
	public String getServiceAlias() {
		return serviceAlias;
	}
	public void setServiceAlias(String serviceAlias) {
		this.serviceAlias = serviceAlias;
	}
	public String getServiceDescription() {
		return serviceDescription;
	}
	public void setServiceDescription(String serviceDescription) {
		this.serviceDescription = serviceDescription;
	}
	public int getServiceCount() {
		return serviceCount;
	}
	public void setServiceCount(int serviceCount) {
		this.serviceCount = serviceCount;
	}
	@Override
	public String toString() {
		return "Service [serviceAlias=" + serviceAlias + ", serviceCode="
				+ serviceCode + ", serviceCount=" + serviceCount
				+ ", serviceDescription=" + serviceDescription + 
public class ProcessInfo {
	private int processID;
	private String processName;
	private int slaveID;
	private Enum<Status> status;
	private long time;
	private MigratableProcess process;
	public ProcessInfo (MigratableProcess process, int processID, String processName, int slaveID, Enum<Status> status) {
		this.process = process;
		this.processID = processID;
		this.processName = processName;
		this.slaveID = slaveID;
		this.status = status;
	}
	public enum Status {
	    INITIALIZING, RUNNING, SUSPENDING, TERNIMATED
	}
	public int getProcessID() {
		return processID;
	}
	public void setProcessID(int processID) {
		this.processID = processID;
	}
	public String getProcessName() {
		return processName;
	}
	public void setProcessName(String processName) {
		this.processName = processName;
	}
	public int getSlaveID() {
		return slaveID;
	}
	public void setSlaveID(int slaveID) {
		this.slaveID = slaveID;
	}
	public Enum<Status> getStatus() {
		return status;
	}
	public void setStatus(Enum<S
/**
 * @see ProcessCacheManager
 * @author jyoti.yadav@globallogic.com
 */
public class MemoryProcessCacheManager implements ProcessCacheManager{
	private Map<ProcessCacheKey, ProcessInstance> processCache = new HashMap<ProcessCacheKey, ProcessInstance>();
	/**
	 * @see ProcessCacheManager#getProcess(String, String)
	 */
	@Override
	public com.wineaccess.orchestration.workflow.process.ProcessInstance getProcess(String processName, String versionId) {
		
		try {
			ProcessCacheKey processCacheKey = new ProcessCacheKey(processName, versionId);
			
			if (!processCache.containsKey(processCacheKey)) {
				ProcessInstance process = new ProcessInstance(processName, versionId);
				processCache.put(processCacheKey, process);
			} 
			return processCache.get(processCacheKey);
		} catch(XmlException xmlException) {
			throw new RuntimeException("Error in getting data from cache");
		}
	}
	public class ProcessCacheKey {
		private String processName;
		private String version;
		
		public ProcessC
/**
 * Mail연동관리에 관한 ServiceImpl 클래스
 * @mailIntrl 배치운영환경 김지완
 * @since 2012.07.16
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2012.07.16  김지완          최초 생성
 *
 * </pre>
 */
@Service("egovMailIntrlManageService")
public class EgovMailIntrlManageServiceImpl extends EgovAbstractServiceImpl implements EgovMailIntrlManageService {
    
	@Resource(name="mailIntrlManageDAO")
    private MailIntrlManageDAO mailIntrlManageDAO;
    /**
	 *MailIntrl 목록 조회
	 * @param mailIntrlManageVO MailIntrlManageVO
	 * @return List<MailIntrlManageVO>
	 * @exception Exception
	 */
    public List<MailIntrlManageVO> selectMailIntrlList(MailIntrlManageVO mailIntrlManageVO) throws Exception {
        return mailIntrlManageDAO.selectMailIntrlList(mailIntrlManageVO);
    }
    
	/**
	 * MailIntrl 등록
	 * @param mailIntrlManage MailIntrlManage
	 * @exception Exception
	 */
    public void

    	mailIntrlManageDAO.insertMailIntrl(mailIntrlManage);
    }
    /**
	 * MailIntrl 수정
	 * @param mailIntrlManage MailIntrlManage
	 * @exception Exception
	 */
    public void updateMailIntrl(MailIntrlManage mailIntrlManage) throws Exception {
    	mailIntrlManageDAO.updateMailIntrl(mailIntrlManage);
    }
    /**
	 * MailIntrl 삭제
	 * @param mailIntrlManage MailIntrlManage
	 * @exception Exception
	 */
    public void deleteMailIntrl(MailIntrlManage mailIntrlManage) throws Exception {
    	mailIntrlManageDAO.deleteMailIntrl(mailIntrlManage);
    }
    /**
	 * MailIntrl 조회
	 * @param mailIntrlManageVO MailIntrlManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectMailIntrlListTotCnt(MailIntrlManageVO mailIntrlManageVO) throws Exception {
        return mailIntrlManageDAO.selectMailIntrlListTotCnt(mailIntrlManageVO);
    }
    /**
	 * MailIntrl 조회
	 * @param mailIntrlManageVO MailIntrlManageVO
	 * @return MailIntrlManageVO
	 * @exception Exception
	 */
    public
/**
 * 分类活动类
 */
public class ManageCatalogAction extends ModuleAction {
	/**
	 * 分类服务
	 */
	private ManageCatalogService manageCatalogService;
	/**
	 * 分类集合
	 */
	private List<ManageCatalog> manageCatalogs;
	/**
	 * 分类
	 */
	private ManageCatalog manageCatalog;
	@JSON(serialize = false, deserialize = false)
	public ManageCatalogService getManageCatalogService() {
		return manageCatalogService;
	}
	public void setManageCatalogService(ManageCatalogService manageCatalogService) {
		this.manageCatalogService = manageCatalogService;
	}
	public List<ManageCatalog> getManageCatalogs() {
		return manageCatalogs;
	}
	public void setManageCatalogs(List<ManageCatalog> manageCatalogs) {
		this.manageCatalogs = manageCatalogs;
	}
	public ManageCatalog getManageCatalog() {
		return manageCatalog;
	}
	public void setManageCatalog(ManageCatalog manageCatalog) {
		this.manageCatalog = manageCatalog;
	}
	@Override
	public void prepare() throws Exception {
	}
	public String execute() throws Exception {


		return result;
	}
	public String executeQueryDataGrid() throws Exception {
		String result = ModuleAction.JSON;
		this.manageCatalogs = this.manageCatalogService.queryDataGrid(this.paging, this.manageCatalog);
		this.dojoDataGrid.setIdentifier("uuid");
		this.dojoDataGrid.setItems(this.manageCatalogs);
		return result;
	}
	public String executeInsert() throws Exception {
		String result = ModuleAction.JSON;
		ResultType resultType = ResultType.NONE;
		if (this.manageCatalog != null) {
			String userId = (String) this.strutsSession.get(InitializeListener.SESSION_USER_ID);
			Calendar now = Calendar.getInstance();
			this.manageCatalog.setUuid(null);
			this.manageCatalog.setInsertUserId(userId);
			this.manageCatalog.setInsertTime(now);
			this.manageCatalog.setUpdateUserId(userId);
			this.manageCatalog.setUpdateTime(now);
			resultType = this.manageCatalogService.insert(this.manageCatalog);
		}
		this.processMessage(resultType);
		return result;
	}
	public String executeUpdate() th

		String result = ModuleAction.JSON;
		ResultType resultType = ResultType.NONE;
		if ((this.manageCatalog != null) && (this.manageCatalog.getUuid() != null)) {
			String userId = (String) this.strutsSession.get(InitializeListener.SESSION_USER_ID);
			Calendar now = Calendar.getInstance();
			ManageCatalog originalManageCatalog = this.manageCatalogService.select(this.manageCatalog.getUuid());
			if (originalManageCatalog != null) {
				this.manageCatalog.setInsertUserId(originalManageCatalog.getInsertUserId());
				this.manageCatalog.setInsertTime(originalManageCatalog.getInsertTime());
				this.manageCatalog.setUpdateUserId(userId);
				this.manageCatalog.setUpdateTime(now);
				resultType = this.manageCatalogService.update(this.manageCatalog);
			}
		}
		this.processMessage(resultType);
		return result;
	}
	public String executeDelete() throws Exception {
		String result = ModuleAction.JSON;
		ResultType resultType = ResultType.NONE;
		if (this.manageCatalog != null) {
			resultType 
/**
 * 그룹관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Service("egovGroupManageService")
public class EgovGroupManageServiceImpl extends AbstractServiceImpl implements EgovGroupManageService {
	@Resource(name="groupManageDAO")
    private GroupManageDAO groupManageDAO;
	/**
	 * 시스템사용 목적별 그룹 목록 조회
	 * @param groupManageVO GroupManageVO
	 * @return List<GroupManageVO>
	 * @exception Exception
	 */
	public List<GroupManageVO> selectGroupList(GroupManageVO groupManageVO) throws Exception {
		return groupManageDAO.selectGroupList(groupManageVO);
	}
	/**
	 * 검색조건에 따른 그룹정보를 조회
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO selectGroup(GroupManageVO groupManageVO) throws Exce

		return groupManageDAO.selectGroup(groupManageVO);
	}
	/**
	 * 그룹 기본정보를 화면에서 입력하여 항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param groupManage GroupManage
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO insertGroup(GroupManage groupManage, GroupManageVO groupManageVO) throws Exception {
		groupManageDAO.insertGroup(groupManage);
		groupManageVO.setGroupId(groupManage.getGroupId());
		return groupManageDAO.selectGroup(groupManageVO);
	}
	/**
	 * 화면에 조회된 그룹의 기본정보를 수정하여 항목의 정합성을 체크하고 수정된 데이터를 데이터베이스에 반영
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void updateGroup(GroupManage groupManage) throws Exception {
		groupManageDAO.updateGroup(groupManage);
	}
	/**
	 * 불필요한 그룹정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void deleteGroup(GroupManage groupManage) throws Exception {
		groupManageDAO.deleteGroup(groupManage);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @par
public class RepositoryManager {
    private static RepositoryManager INSTANCE = new RepositoryManager();
    private IProgressMonitor monitor = new SysoutProgressMonitor();
    private RepositoryManager() {
    }
    public static RepositoryManager getInstance() {
        return INSTANCE;
    }
    public List<ITeamRepository> getRepositories() {
        ITeamRepository[] iTeamRepositoryArray = TeamPlatform.getTeamRepositoryService().getTeamRepositories();
        List<ITeamRepository> iTeamRepositories;
        iTeamRepositories = Arrays.asList(iTeamRepositoryArray);
        return iTeamRepositories;
    }
    public ITeamRepository login(final String repositoryURI, final String userName, final String passWord) {
        ITeamRepository repository = TeamPlatform.getTeamRepositoryService().getTeamRepository(repositoryURI);
        repository.registerLoginHandler(new ITeamRepository.ILoginHandler() {
            public ILoginInfo challenge(ITeamRepository repository) {
                
/*
 *
 */
/**
 * The Interface IProcessBCL.
 */
public interface IProcessBCL
	/**
	 * Insert process.
	 * 
	 * @param processRequest the process request
	 * @return the internal results response
	 */
	InternalResultsResponse<Process> insertProcess(ProcessRequest processRequest);
	/**
	 * Update process.
	 * 
	 * @param processRequest the process request
	 * @return the internal response
	 */
	InternalResponse updateProcess(ProcessRequest processRequest);
	/**
	 * Unmonitor process.
	 * 
	 * @param processRequest the process request
	 * @return the internal response
	 */
	InternalResponse unmonitorProcess(ProcessRequest processRequest);
	/**
	 * Fetch processes.
	 * 
	 * @param processRequest the process request
	 * @return the internal results response
	 */
	InternalResultsResponse<Process> fetchProcesses(InquiryProcessRequest processRequest);
	/**
	 * Fetch process by id.
	 * 
	 * @param processRequest the process request
	 * @return the internal results response
	 */
	InternalResults

	/**
	 * Fetch process by rni id.
	 * 
	 * @param processRequest the process request
	 * @return the internal results response
	 */
	InternalResultsResponse<Process> fetchProcessByRniId(ProcessRequest processRequest);
	/**
	 * Fetch process by file name.
	 * 
	 * @param processRequest the process request
	 * @return the internal results response
	 */
	InternalResultsResponse<Process> fetchProcessByFileName(ProcessRequest processRequest);
	/**
	 * Fetch monitored processes.
	 * 
	 * @param processRequest the process request
	 * @return the internal results response
	 */
	InternalResultsResponse<Process> fetchMonitoredProcesses(ProcessRequest processRequest);
	/**
	 * Retry process.
	 * 
	 * @param processRequest the process request
	 * @return the internal response
	 */
	InternalResponse retryProcess(ProcessRequest processRequest);
	/**
	 * Abort process.
	 * 
	 * @param processRequest the process request
	 * @return the internal response
	 */
	InternalResponse abortProcess(ProcessRequ

	/**
	 * Fetch process by light.
	 * 
	 * @param lightRequest the light request
	 * @return the internal results response
	 */
	InternalResultsResponse<Process> fetchProcessByLight(LightRequest lightRequest);
	/**
	 * Submit process.
	 * 
	 * @param processRequest the process request
	 * @param action the action
	 * @return the internal results response
	 */
	InternalResultsResponse<Process> submitProcess(ProcessRequest processRequest, LCAction action);
	/**
	 * Fetch rni link status.
	 * 
	 * @param tenant the tenant
	 * @return the boolean
	 */
	InternalResultsResponse<Boolean> fetchRniLinkStatus(Tenant tenant);
	/**
	 * Check rni status.
	 */
	void checkRniStatus();
	/**
	 * Sets the gateway active.
	 * 
	 * @param tenant the tenant
	 * @param value the new gateway active
	 */
	void setGatewayActive(Tenant tenant, Boolean value);
	/**
	 * Fetch tenant by rni code.
	 * 
	 * @param rniCode the rni code
	 * @return the internal results response
	 */
	InternalResultsResponse<Tenant> fe

	/**
	 * Fetch all tenant.
	 * 
	 * @return the internal results response
	 */
	InternalResultsResponse<Tenant> fetchAllTenant();
	/**
	 * Update csv downloaded.
	 * 
	 * @param processRequest the process request
	 * @return the internal response
	 */
	InternalResponse updateCSVDownloaded(ProcessRequest processRequest);
	/**
	 * Generate sumary file csv.
	 * 
	 * @param processRequest the process request
	 * @return the process response
	 */
	ProcessResponse generateSumaryFileCSV(ProcessRequest processRequest);
	/**
	 * Fetch count monitored processes.
	 * 
	 * @param processRequest the process request
	 * @return the internal results response
	 */
	InternalResultsResponse<HashMap<String, Integer>> fetchCountMonitoredProcesses(ProcessRequest processRequest);
	/**
	 * Generate process file csvu.
	 * 
	 * @param inquiryProcessRequest the inquiry process request
	 * @return the process response
	 */
	ProcessResponse insertCSVProcess(LightSelectionRequest lightSelectionRequest);
	/**
	 * 
/**
 * Created by tangweiqun on 2014/12/1.
 */
public abstract class AbstractHandlerMapping implements HandlerMapping {
    private Object defaultHandler;
    public Object getDefaultHandler() {
        return defaultHandler;
    }
    public void setDefaultHandler(Object defaultHandler) {
        this.defaultHandler = defaultHandler;
    }
    @Override
    public HandlerExecutionChain getHandler(ActivityRequestVo requestVo) throws Exception {
        Object handler = getHandlerInternal(requestVo);
        if (handler == null) {
            handler = defaultHandler;
        }
        if (handler == null) {
            return null;
        }
        if (handler instanceof String) {
            String handlerName = (String) handler;
            handler = Class.forName(handlerName).newInstance();
        }
        return getHandlerExcutionChain(handler, requestVo);
    }
    public abstract Object getHandlerInternal(ActivityRequestVo requestVo) throws Exception;
    public HandlerExecuti
class $Handler
  .Label a;
  .Label b;
  .Label c;
  String d;
  int e;
  Handler f;
  
  static Handler a(Handler paramHandler, .Label paramLabel1, .Label paramLabel2)
  {
    if (paramHandler == null) {
      return null;
    }
    paramHandler.f = a(paramHandler.f, paramLabel1, paramLabel2);
    int i = paramHandler.a.c;
    int j = paramHandler.b.c;
    int k = paramLabel1.c;
    int m = paramLabel2 == null ? Integer.MAX_VALUE : paramLabel2.c;
    if ((k < j) && (m > i)) {
      if (k <= i)
      {
        if (m >= j) {
          paramHandler = paramHandler.f;
        } else {
          paramHandler.a = paramLabel2;
        }
      }
      else if (m >= j)
      {
        paramHandler.b = paramLabel1;
      }
      else
      {
        Handler localHandler = new Handler();
        localHandler.a = paramLabel2;
        localHandler.b = paramHandler.b;
        localHandler.c = paramHandler.c;
        localHandler.d = paramHandler.d;
        localHandler.e = paramHandler.e;
        lo
public abstract class AbstractHandlerManager {
	protected List<AbstractHandler> handler;
	public AbstractHandlerManager() {
		handler = new ArrayList<AbstractHandler>();
	}
	/**
	 * Adds the assigned handler to the end of chain
	 * 
	 * @param newHandler
	 */
	public void appendHandler(AbstractHandler newHandler) {
		if (handler.size() > 0) {
			handler.get(handler.size() - 1).setNext(newHandler);
		}
		handler.add(newHandler);
	}
	/**
	 * Adds the handler to the chain depending on their priorities. Default: 100
	 * FileChooserFormHandler; 200 DroppedFileMetadataHandler; 300
	 * UnknownFileFormatHandler; 400 MultipleFiletypesHandler; 500
	 * FileDataHandler
	 * 
	 * @param newHandler
	 *            The AbstractClientHandler to add
	 */
	public void addHandler(AbstractHandler newHandler) {
		int prio = newHandler.getPriority();
		for (int i = 0; i < handler.size(); i++) {
			if (handler.get(i).getPriority() > prio) {
				addHandlerToIndex(newHandler, i);
				return;
			}
		}
		appendHan
/*******************************************************************************
 * Copyright 2010 Simon Mieth
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
/**
 * @author <a href="mailto:simon.mieth@gmx.de>Simon Mieth</a>
 *
 *
 *
 */
public class DXFParserBuilder {
    public static Parser createDefaultParser() {
        DXFParser parser = new DXFParser();
        DXFHandler handler;
        handler = new DXFHeaderSectionHandler();
        parser.a

        DXFHandlerManager handlerManager = new DXFBlocksSectionHandler();
        parser.addHandler(handlerManager);
        DXFHandler h = new DXFLineHandler();
        handlerManager.addHandler(h);
        h = new DXFCircleHandler();
        handlerManager.addHandler(h);
        h = new DXFArcHandler();
        handlerManager.addHandler(h);
        
        h = new DXFAttribHandler();
        handlerManager.addHandler(h);
        
        h = new DXFAttribDefinitionHandler();
        handlerManager.addHandler(h);
        h = new DXFPolylineHandler();
        handlerManager.addHandler(h);
        h = new DXFLWPolylineHandler();
        handlerManager.addHandler(h);
        h = new DXFMTextHandler();
        handlerManager.addHandler(h);
        h = new DXFTextHandler();
        handlerManager.addHandler(h);
        h = new DXFInsertHandler();
        handlerManager.addHandler(h);
        h = new DXFEllipseHandler();
        handlerManager.addHandler(h);
        h = new DXFSolidHandle

        handlerManager.addHandler(h);
        h = new DXFTraceHandler();
        handlerManager.addHandler(h);
        h = new DXFDimensionHandler();
        handlerManager.addHandler(h);
        h = new DXFHatchHandler();
        handlerManager.addHandler(h);
        h = new DXFImageHandler();
        handlerManager.addHandler(h);
        h = new DXF3DFaceHandler();
        handlerManager.addHandler(h);
        h = new DXFRayHandler();
        handlerManager.addHandler(h);
        h = new DXFXLineHandler();
        handlerManager.addHandler(h);
        h = new DXFRegionHandler();
        handlerManager.addHandler(h);
        
        h = new DXFPointHandler();
        handlerManager.addHandler(h);
        h = new DXFBodyHandler();
        handlerManager.addHandler(h);
        h = new DXF3DSolidHandler();
        handlerManager.addHandler(h);
        h = new DXFSplineHandler();
        handlerManager.addHandler(h);
        h = new DXFMLineHandler();
        handlerManager.addHandler(h

        h = new DXFLeaderHandler();
        handlerManager.addHandler(h);
        h = new DXFToleranceHandler();
        handlerManager.addHandler(h);
        h = new DXFViewportHandler();
        handlerManager.addHandler(h);
        handlerManager = new DXFTableSectionHandler();
        parser.addHandler(handlerManager);
        handler = new DXFLayerTableHandler();
        handlerManager.addHandler(handler);
        handler = new DXFLineTypeTableHandler();
        handlerManager.addHandler(handler);
        handler = new DXFDimensionStyleTableHandler();
        handlerManager.addHandler(handler);
        handler = new DXFStyleTableHandler();
        handlerManager.addHandler(handler);
        handler = new DXFVPortTableHandler();
        handlerManager.addHandler(handler);
        handler = new DXFViewTableHandler();
        handlerManager.addHandler(handler);
        handlerManager = new DXFEntitiesSectionHandler();
        parser.addHandler(handlerManager);
        h = new DXFLin

        handlerManager.addHandler(h);
        h = new DXFCircleHandler();
        handlerManager.addHandler(h);
        h = new DXFArcHandler();
        handlerManager.addHandler(h);
        h = new DXFAttribHandler();
        handlerManager.addHandler(h);
        
        h = new DXFAttribDefinitionHandler();
        handlerManager.addHandler(h);
          
        h = new DXFPolylineHandler();
        handlerManager.addHandler(h);
        h = new DXFLWPolylineHandler();
        handlerManager.addHandler(h);
        h = new DXFMTextHandler();
        handlerManager.addHandler(h);
        h = new DXFTextHandler();
        handlerManager.addHandler(h);
        h = new DXFInsertHandler();
        handlerManager.addHandler(h);
        h = new DXFEllipseHandler();
        handlerManager.addHandler(h);
        h = new DXFSolidHandler();
        handlerManager.addHandler(h);
        h = new DXFTraceHandler();
        handlerManager.addHandler(h);
        h = new DXFDimensionHandler();
     

        h = new DXFHatchHandler();
        handlerManager.addHandler(h);
        h = new DXFImageHandler();
        handlerManager.addHandler(h);
        h = new DXF3DFaceHandler();
        handlerManager.addHandler(h);
        h = new DXFRayHandler();
        handlerManager.addHandler(h);
        h = new DXFXLineHandler();
        handlerManager.addHandler(h);
        h = new DXFRegionHandler();
        handlerManager.addHandler(h);
        h = new DXFBodyHandler();
        handlerManager.addHandler(h);
        h = new DXF3DSolidHandler();
        handlerManager.addHandler(h);
        h = new DXFSplineHandler();
        handlerManager.addHandler(h);
        h = new DXFMLineHandler();
        handlerManager.addHandler(h);
        h = new DXFLeaderHandler();
        handlerManager.addHandler(h);
        h = new DXFToleranceHandler();
        handlerManager.addHandler(h);
        h = new DXFViewportHandler();
        handlerManager.addHandler(h);
        h = new DXFPointHandler();
     

        
        handlerManager = new DXFObjectsSectionHandler();
        h = new DXFImageDefHandler();
        handlerManager.addHandler(h);
        h = new DXFDictionaryHandler();
        handlerManager.addHandler(h);
        h = new DXFPlotsettingsHandler();
        handlerManager.addHandler(h);
        h = new DXFLayoutHandler();
        handlerManager.addHandler(h);
        h = new DXFMLineStyleHandler();
        handlerManager.addHandler(h);
        parser.addHandler(handlerManager);
        return parser;
    }
    /**
     * @see org.kabeja.dxf.parser.SAXParserBuilder the SAXParserBuilder for XML
     *      description
     *
     * @param file
     * @return the DXFParser build from the XML description file
     */
    public static Parser buildFromXML(String file) {
        try {
            return buildFromXML(new FileInputStream(file));
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        return null;
    }
    public static Parse
/**
 * @Class Name : BkmkMenuManageDAO.java
 * @Description : 바로가기메뉴를 관리하는 서비스를 정의하기위한 데이터 접근 클래스
 * @Modification Information
 *
 *    수정일       수정자         수정내용
 *    -------        -------     -------------------
 *    2009. 9. 25.     윤성록
 *
 * @author 공통 컴포넌트 개발팀 윤성록
 * @since 2009. 9. 25.
 * @version
 * @see
 *
 */
@Repository("bkmkMenuManageDAO")
public class BkmkMenuManageDAO extends EgovComAbstractDAO{
    
    /**
     * 바로가기메뉴관리 정보를 삭제한다.
     * 
     * @param BkmkMenuManage
     * @return
     * @throws Exception
     */
    public void deleteBkmkMenuManage(BkmkMenuManage bkmkMenuManage) throws Exception {
        delete("BkmkMenuManageDAO.deleteBkmkMenuManage", bkmkMenuManage);
    }
    
    /**
     * 바로가기메뉴관리 정보를 등록한다.
     * 
     * @param BkmkMenuManage
     * @return
     * @throws Exception
     */
    public void insertBkmkMenuManage(BkmkMenuManage bkmkMenuManage) throws Exception {
        insert("BkmkMenuManageDAO.insertBkmkMenuManage", bkmkMenuManage);
    }
   

    /**
     * 바로가기메뉴관리 정보를 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public BkmkMenuManageVO selectBkmkMenuManageResult(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        BkmkMenuManageVO vo = new BkmkMenuManageVO();
        vo = (BkmkMenuManageVO)selectByPk("BkmkMenuManageDAO.selectBkmkMenuManage", bkmkMenuManageVO);
        return vo;
    }
    /**
     * 조건에 맞는 바로가기메뉴관리 정보 목록을 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public List<BkmkMenuManageVO> selectBkmkMenuManageList(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        return (List<BkmkMenuManageVO>) list("BkmkMenuManageDAO.selectBkmkMenuManageList", bkmkMenuManageVO);
    }    
    
    /**
     * 조건에 맞는 바로가기메뉴관리 정보 목록의 건수를 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public int selectBkmkMenuManageListCnt(BkmkMenuManageVO

        return (Integer)getSqlMapClientTemplate().queryForObject("BkmkMenuManageDAO.selectBkmkMenuManageListCnt", bkmkMenuManageVO);
    }
    
    /**
     * 등록할  메뉴정보 목록을 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public List<BkmkMenuManageVO> selectBkmkMenuList(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        return (List<BkmkMenuManageVO>) list("BkmkMenuManageDAO.selectBkmkMenuList", bkmkMenuManageVO);
    }    
    /**
     * 등록할  메뉴정보 목록의 건수를 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public int selectBkmkMenuListCnt(BkmkMenuManageVO bkmkMenuManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("BkmkMenuManageDAO.selectBkmkMenuListCnt", bkmkMenuManageVO);
    }
    
    /**
     * 미리보기를 할 바로가기메뉴관리의 목록을 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public List
/**
 * Detects when a process is finished and invokes the associated listeners.
 */
public class ProcessExitDetector extends Thread
	/** The process for which we have to detect the end. */
	private Process process;
	/** The associated listeners to be invoked at the end of the process. */
	private List<ProcessListener> listeners = new ArrayList<ProcessListener>();
	/**
	 * Starts the detection for the given process
	 * @param process the process for which we have to detect when it is finished
	 */
	public ProcessExitDetector(Process process)
	{
		try
		{
			process.exitValue();
			throw new IllegalArgumentException("The process is already ended");
		}
		catch (IllegalThreadStateException exc)
		{
			this.process = process;
		}
	}
	/** @return the process that it is watched by this detector. */
	public Process getProcess()
	{
		return process;
	}
	public void run()
	{
		try
		{
			process.waitFor();
			for (ProcessListener listener : listeners)
			{
				listener.processFinished(process);
/**
 * 그룹관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Service("egovGroupManageService")
public class EgovGroupManageServiceImpl extends EgovAbstractServiceImpl implements EgovGroupManageService {
	@Resource(name="groupManageDAO")
    private GroupManageDAO groupManageDAO;
	/**
	 * 시스템사용 목적별 그룹 목록 조회
	 * @param groupManageVO GroupManageVO
	 * @return List<GroupManageVO>
	 * @exception Exception
	 */
	public List<GroupManageVO> selectGroupList(GroupManageVO groupManageVO) throws Exception {
		return groupManageDAO.selectGroupList(groupManageVO);
	}
	/**
	 * 검색조건에 따른 그룹정보를 조회
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO selectGroup(GroupManageVO groupManageVO) throws 

		return groupManageDAO.selectGroup(groupManageVO);
	}
	/**
	 * 그룹 기본정보를 화면에서 입력하여 항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param groupManage GroupManage
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO insertGroup(GroupManage groupManage, GroupManageVO groupManageVO) throws Exception {
		groupManageDAO.insertGroup(groupManage);
		groupManageVO.setGroupId(groupManage.getGroupId());
		return groupManageDAO.selectGroup(groupManageVO);
	}
	/**
	 * 화면에 조회된 그룹의 기본정보를 수정하여 항목의 정합성을 체크하고 수정된 데이터를 데이터베이스에 반영
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void updateGroup(GroupManage groupManage) throws Exception {
		groupManageDAO.updateGroup(groupManage);
	}
	/**
	 * 불필요한 그룹정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void deleteGroup(GroupManage groupManage) throws Exception {
		groupManageDAO.deleteGroup(groupManage);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @par
public class RepositoryFactory implements PoolableObjectFactory {
	private final Logger logger = Logger.getLogger(RepositoryFactory.class);
	private RepositoryMeta repositoryMeta;
	public RepositoryFactory(RepositoryMeta repositoryMeta) {
		this.repositoryMeta = repositoryMeta;
	}
	/**
	 * 产生一个新资源库对象对象
	 */
	@Override
	public Object makeObject() throws Exception {
		logger.info("创建Repository对象");
		Repository rep = PluginRegistry.getInstance().loadClass(
				RepositoryPluginType.class, repositoryMeta,
				Repository.class);
		rep.init(repositoryMeta);
		rep.connect();
		return rep;
	}
	/**
	 * 还原对象状态
	 */
	@Override
	public void passivateObject(Object obj) {
		Repository rep = (Repository) obj;
		rep.clearSharedObjectCache();
	}
	@Override
	public void activateObject(Object obj) throws Exception {
	}
	@Override
	public void destroyObject(Object obj) throws Exception {
		logger.info("销毁无效Repository对象");
		if (obj == null) {
			return;
		}
		
		Repository repository = (Repository) obj;
	
/**
 * 권한관리에 관한 서비스 인터페이스 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  이문준          최초 생성
 *
 * </pre>
 */
public interface EgovAuthorManageService {
    /**
	 * 모든 권한목록을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return List<AuthorManageVO>
	 * @exception Exception
	 */
	public List<AuthorManageVO> selectAuthorAllList(AuthorManageVO authorManageVO) throws Exception;
	/**
	 * 시스템 사용자중 불필요한 시스템권한정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
	public void deleteAuthor(AuthorManage authorManage) throws Exception;
	/**
	 * 사용자의 시스테접근권한를 화면에서 입력하여 입력항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
	public void insertAuthor(AuthorManage authorManage) throws Exception;
	/**
	 * 개별사용자에게 할당된 권한 조회
	 * @p
/**
 * 개요
 * - 당직관리에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - 당직관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 당직관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Repository("bndtManageDAO")
public class BndtManageDAO extends EgovComAbstractDAO {
	/**
	 * 당직관리정보를 관리하기 위해 등록된 당직관리 목록을 조회한다.
	 * @param bndtManageVO - 당직관리 VO
	 * @return List - 당직관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<BndtManageVO> selectBndtManageList(BndtManageVO bndtManageVO) throws Exception {
		return (List<BndtManageVO>) list("bndtManageDAO.selectBndtManageList", bndtManageVO);
	}
    /**
	 * 당직관리목록 총 갯수를 조회한다.
	 * @param bndtManageVO - 당직관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectBndtManageListTotCnt(BndtManageVO bndtManageVO) throws Exception {
        return (Integer)select("bndtManageDAO.selectBndtManageListTotCnt", bndtManageVO);
    }
	/**
	 * 등록된 당직관리의 상세정보를 조회한다.
	 * @param bndtManageVO - 당직관리 VO
	 * @return BndtManageVO - 당직

	 */
	public BndtManageVO selectBndtManage(BndtManageVO bndtManageVO)  throws Exception {
		return (BndtManageVO) select("bndtManageDAO.selectBndtManage", bndtManageVO);
	}
	/**
	 * 당직관리정보를 신규로 등록한다.
	 * @param bndtManage - 당직관리 model
	 */
	public void insertBndtManage(BndtManage bndtManage) throws Exception {
		insert("bndtManageDAO.insertBndtManage", bndtManage);
	}
	/**
	 * 기 등록된 당직관리정보를 수정한다.
	 * @param bndtManage - 당직관리 model
	 */
	public void updtBndtManage(BndtManage bndtManage) throws Exception {
		update("bndtManageDAO.updtBndtManage", bndtManage);
	}
	/**
	 * 기 등록된 당직관리정보를 삭제한다.
	 * @param bndtManage - 당직관리 model
	 */
	public void deleteBndtManage(BndtManage bndtManage) throws Exception {
        delete("bndtManageDAO.deleteBndtManage",bndtManage);
	}
    /**
	 * 당직일지 갯수를 조회한다.
	 * @param bndtManageVO - 당직관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectBndtDiaryTotCnt(BndtManage bndtManage) throws Exception {
        return (Integer)select("bndtManag

    }
    /***** 당직 체크관리 *****/	
	/**
	 * 당직체크관리정보를 관리하기 위해 등록된 당직체크관리 목록을 조회한다.
	 * @param bndtCeckManageVO - 당직체크관리 VO
	 * @return List - 당직체크관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<BndtCeckManageVO> selectBndtCeckManageList(BndtCeckManageVO bndtCeckManageVO) throws Exception {
		return (List<BndtCeckManageVO>) list("bndtManageDAO.selectBndtCeckManageList", bndtCeckManageVO);
	}
    /**
	 * 당직체크관리목록 총 갯수를 조회한다.
	 * @param bndtCeckManageVO - 당직체크관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectBndtCeckManageListTotCnt(BndtCeckManageVO bndtCeckManageVO) throws Exception {
        return (Integer)select("bndtManageDAO.selectBndtCeckManageListTotCnt", bndtCeckManageVO);
    }
	/**
	 * 등록된 당직체크관리의 상세정보를 조회한다.
	 * @param bndtCeckManageVO - 당직체크관리 VO
	 * @return BndtCeckManageVO - 당직체크관리 VO
	 */
	public BndtCeckManageVO selectBndtCeckManage(BndtCeckManageVO bndtCeckManageVO)  throws Exception {
		return (BndtCeckManageVO) select("bndtManageDAO.select

	}
	/**
	 * 당직체크관리정보를 신규로 등록한다.
	 * @param bndtCeckManage - 당직체크관리 model
	 */
	public void insertBndtCeckManage(BndtCeckManage bndtCeckManage) throws Exception {
		insert("bndtManageDAO.insertBndtCeckManage", bndtCeckManage);
	}
	/**
	 * 기 등록된 당직체크관리정보를 수정한다.
	 * @param bndtCeckManage - 당직체크관리 model
	 */
	public void updtBndtCeckManage(BndtCeckManage bndtCeckManage) throws Exception {
		update("bndtManageDAO.updtBndtCeckManage", bndtCeckManage);
	}
	/**
	 * 기 등록된 당직체크관리정보를 삭제한다.
	 * @param bndtCeckManage - 당직체크관리 model
	 */
	public void deleteBndtCeckManage(BndtCeckManage bndtCeckManage) throws Exception {
        delete("bndtManageDAO.deleteBndtCeckManage",bndtCeckManage);
	}
    /**
	 * 당직체크 중복여부 조회한다.
	 * @param bndtCeckManageVO - 당직체크관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectBndtCeckManageDplctAt(BndtCeckManage bndtCeckManage) throws Exception {
        return (Integer)select("bndtManageDAO.selectBndtCeckManageDplctAt", bndtCeckManage);
    }
    /**

	/**
	 * 등록된 당직일지관리의 상세정보를 조회한다.
	 * @param bndtDiaryVO - 당직일지관리 VO
	 * @return List - 당직일지관리 VO
	 */
	@SuppressWarnings("unchecked")
	public List<BndtDiaryVO> selectBndtDiary(BndtDiaryVO bndtDiaryVO) throws Exception {
		return (List<BndtDiaryVO>) list("bndtManageDAO.selectBndtDiary", bndtDiaryVO);
	}
	/**
	 * 당직일지관리정보를 신규로 등록한다.
	 * @param bndtDiary - 당직일지관리 model
	 */
	public void insertBndtDiary(BndtDiary bndtDiary) throws Exception {
		insert("bndtManageDAO.insertBndtDiary", bndtDiary);
	}
	/**
	 * 기 등록된 당직일지관리정보를 수정한다.
	 * @param bndtDiary - 당직일지관리 model
	 */
	public void updtBndtDiary(BndtDiary bndtDiary) throws Exception {
		update("bndtManageDAO.updtBndtDiary", bndtDiary);
	}
	/**
	 * 기 등록된 당직일지관리정보를 삭제한다.
	 * @param bndtDiary - 당직일지관리 model
	 */
	public void deleteBndtDiary(BndtDiary bndtDiary) throws Exception {
        delete("bndtManageDAO.deleteBndtDiary",bndtDiary);
	}
	/**
	 * 등록된 당직관리의 상세정보를 조회한다.
	 * @param bndtManageVO - 당직관리 VO
	 * @return BndtManageVO - 당직관리 VO
	 
/**
 * <code>Handlers</code> is a utility class with static factory methods to
 * return instances of argument {@link Handler} objects.
 **/
public final class Handlers {
    public static final BooleanHandler booleanHandler (boolean initialValue) {
	return new BooleanHandler (initialValue) ;
    }
    public static final BooleanHandler booleanHandler (Boolean initialValue) {
	return new BooleanHandler (initialValue) ;
    }
    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    public static final CountHandler countHandler (int initialValue) {
	return new CountHandler (initialValue) ;
    }
    public static final CountHandler countHandler (Integer initialValue) {
	return new CountHandler (initialValue) ;
    }
    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    public static final InputFileHandler inputFileHandler (File defaultFile) {
	return
	    defaultFile != null
	    ? new InputFileHandler (null, defaultFile)
	    : in

    }
    public static final InputFileHandler inputFileHandler () {
	return InputFileHandler.NULL_HANDLER ;
    }
    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    public static final OutputFileHandler outputFileHandler (File defaultOut) {
	return
	    defaultOut != null
	    ? new OutputFileHandler (null, defaultOut)
	    : outputFileHandler () ;
    }
    public static final OutputFileHandler outputFileHandler () {
	return OutputFileHandler.NULL_HANDLER ;
    }
    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    final public static PatternHandler patternHandler (String defaultValue) {
	return
	    defaultValue != null
	    ? new PatternHandler (defaultValue)
	    : patternHandler () ;
    }
    public static final PatternHandler patternHandler () {
	return PatternHandler.NULL_HANDLER ;
    }
    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    public static final StringHandler stringHan
public class UndoableChangeProcess extends AbstractUndoableEdit
    private OpdProject myProject;
    private ProcessEntry myEntry;
    private OpmProcess originalProcess;
    private OpmProcess changedProcess;
    public UndoableChangeProcess(OpdProject project, ProcessEntry pEntry,
                                OpmProcess originalProcess, OpmProcess changedProcess)
    {
        myProject = project;
        myEntry = pEntry;
        this.originalProcess = new OpmProcess(-1, "");
        this.changedProcess = new OpmProcess(-1, "");
        this.originalProcess.copyPropsFrom(originalProcess);
        this.changedProcess.copyPropsFrom(changedProcess);
    }
    public String getPresentationName()
    {
        return "Process Change";
    }
    public void undo()
    {
        super.undo();
        ((OpmProcess)myEntry.getLogicalEntity()).copyPropsFrom(originalProcess);
        myEntry.updateInstances();
    }
    public void redo()
    {
        super.redo();
        ((OpmProcess)my
/**
 * a queue for timeout {@link Process}es, calls {@link OnProcessTimeoutListener#onProcessTimeout(Process)} of the {@link OnProcessTimeoutListener} passed to the constructor when a {@link Process} times out
 */
public class ProcessTimeoutQueue extends Thread {
	/**
	 * a class holding a {@link Process} and a timestamp specifying when it times out
	 */
	private class ProcessTime {
		Process process;
		long time;
		ProcessTime(Process process, long time) {
			this.process = process;
			this.time = time;
		}
	}
	/**
	 * the {@link OnProcessTimeoutListener} to call on timeout
	 */
	private OnProcessTimeoutListener onProcessTimeoutListener;
	/**
	 * {@link ArrayList} containing the timeout {@link Process}es
	 */
	private ArrayList<ProcessTime> processes = new ArrayList<ProcessTime>();
	/**
	 * the timestamp of the next timeout of a process
	 */
	private long time;
	public ProcessTimeoutQueue(OnProcessTimeoutListener onProcessTimeoutListener) {
		this.onProcessTimeoutListener = onProcessT

		this.start();
	}
	/**
	 * adds a new Process to time out after the given amount of time
	 * @param process the {@link Process} to time out
	 * @param timeout the time until the {@link Process} times out, in milliseconds
	 */
	public void add(Process process, long timeout) {
		ProcessTime pt = new ProcessTime(process, System.currentTimeMillis() + timeout);
		synchronized(this) {
			processes.add(pt);
			if(time > pt.time) {
				this.interrupt();
			}
		}
	}
	public void run() {
		for(;;) {
			long delay = 1000, now;
			clean: for(;;) {
				now = System.currentTimeMillis();
				Process process = null;
				synchronized(this) {
					search: for(ProcessTime pt : processes) {
						if(pt.time < now) {
							process = pt.process;
							processes.remove(pt);
							break search;
						}
					}
				}
				if(process == null) break;
				else {
					onProcessTimeoutListener.onProcessTimeout(process);
				}
			}
			long nexttime = now+delay;
			for(ProcessTime pt : processes) {
				if(pt.time 
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Paresb 
 */
public class ServiceMaster {
    private static final Logger logger = Logger.getLogger(ServiceMaster.class);
    private static RoleMasterService roleMasterService;
    private static OtherMasterService otherMasterService;
    private static CategoryMCHService categoryMCHService;
    private static OrganizationMasterService organizationMasterService;
    private static UserMasterService userMasterService;
    private static PromotionProposalService promotionProposalService;
    private static ODSService odsService;
    private static PromotionInitiateService promotionInitiateService;
    private static ProposalSearch proposalSearchService;
    private static TransPromoService transPromoService;
    private static SearchPromotionService searchPromotionService;
    private static ApprRejHoldPromotionReqService apprRejHoldPromotionReqService;
    private static

    private static TaskService taskService;
    private static CommService commService;
    private static DownloadArticleService downloadArticleService;
    private static ReportService reportService;
    private ServiceMaster() {
    }
    static {
        roleMasterService = new RoleMasterServiceService().getRoleMasterServicePort();
        otherMasterService = new OtherMasterServiceService().getOtherMasterServicePort();
        categoryMCHService = new CategoryMCHServiceService().getCategoryMCHServicePort();
        organizationMasterService = new OrganizationMasterServiceService().getOrganizationMasterServicePort();
        userMasterService = new UserMasterServiceService().getUserMasterServicePort();
        promotionProposalService = new PromotionProposalServiceService().getPromotionProposalServicePort();
        odsService = new ODSServiceService().getODSServicePort();
        promotionInitiateService = new PromotionInitiateServiceService().getPromotionInitiateServicePort();
 

        transPromoService = new TransPromoServiceService().getTransPromoServicePort();
        searchPromotionService = new SearchPromotionServiceService().getSearchPromotionServicePort();
        apprRejHoldPromotionReqService = new ApprRejHoldPromotionReqServiceService().getApprRejHoldPromotionReqServicePort();
        commonPromotionService = new CommonPromotionServiceService().getCommonPromotionServicePort();
        taskService = new TaskServiceService().getTaskServicePort();
        commService= new CommServiceService().getCommServicePort();
        downloadArticleService=new DownloadArticleServiceService().getDownloadArticleServicePort();
        reportService = new ReportServiceService().getReportServicePort();
        logger.info("----- All Ports are created successfully ------- ");
    }
    public static TaskService getTaskService() {
        return taskService;
    }
    public static void setTaskService(TaskService taskService) {
        ServiceMaster.taskService = taskSe

    }
    public static CommonPromotionService getCommonPromotionService() {
        return commonPromotionService;
    }
    public static void setCommonPromotionService(CommonPromotionService commonPromotionService) {
        ServiceMaster.commonPromotionService = commonPromotionService;
    }
    public static CategoryMCHService getCategoryMCHService() {
        return categoryMCHService;
    }
    public static void setCategoryMCHService(CategoryMCHService categoryMCHService) {
        ServiceMaster.categoryMCHService = categoryMCHService;
    }
    public static RoleMasterService getRoleMasterService() {
        return roleMasterService;
    }
    public static void setRoleMasterService(RoleMasterService roleMasterService) {
        ServiceMaster.roleMasterService = roleMasterService;
    }
    public static OtherMasterService getOtherMasterService() {
        return otherMasterService;
    }
    public static void setOtherMasterService(OtherMasterService otherMasterService) {
  

    }
    public static OrganizationMasterService getOrganizationMasterService() {
        return organizationMasterService;
    }
    public static void setOrganizationMasterService(OrganizationMasterService organizationMasterService) {
        ServiceMaster.organizationMasterService = organizationMasterService;
    }
    public static UserMasterService getUserMasterService() {
        return userMasterService;
    }
    public static void setUserMasterService(UserMasterService userMasterService) {
        ServiceMaster.userMasterService = userMasterService;
    }
    public static PromotionProposalService getPromotionProposalService() {
        return promotionProposalService;
    }
    public static void setPromotionProposalService(PromotionProposalService promotionProposalService) {
        ServiceMaster.promotionProposalService = promotionProposalService;
    }
    public static ODSService getOdsService() {
        return odsService;
    }
    public static void setOdsService(ODS

        ServiceMaster.odsService = odsService;
    }
    public static PromotionInitiateService getPromotionInitiateService() {
        return promotionInitiateService;
    }
    public static void setPromotionInitiateService(PromotionInitiateService promotionInitiateService) {
        ServiceMaster.promotionInitiateService = promotionInitiateService;
    }
    public static ProposalSearch getProposalSearchService() {
        return proposalSearchService;
    }
    public static void setProposalSearchService(ProposalSearch proposalSearchService) {
        ServiceMaster.proposalSearchService = proposalSearchService;
    }
    public static TransPromoService getTransPromoService() {
        return transPromoService;
    }
    public static void setTransPromoService(TransPromoService transPromoService) {
        ServiceMaster.transPromoService = transPromoService;
    }
    public static SearchPromotionService getSearchPromotionService() {
        return searchPromotionService;
    }
   

        ServiceMaster.searchPromotionService = searchPromotionService;
    }
    public static ApprRejHoldPromotionReqService getApprRejHoldPromotionReqService() {
        return apprRejHoldPromotionReqService;
    }
    public static void setApprRejHoldPromotionReqService(ApprRejHoldPromotionReqService apprRejHoldPromotionReqService) {
        ServiceMaster.apprRejHoldPromotionReqService = apprRejHoldPromotionReqService;
    }
    public static CommService getCommService() {
        return commService;
    }
    public static void setCommService(CommService commService) {
        ServiceMaster.commService = commService;
    }
    public static DownloadArticleService getDownloadArticleService() {
        return downloadArticleService;
    }
    public static void setDownloadArticleService(DownloadArticleService downloadArticleService) {
        ServiceMaster.downloadArticleService = downloadArticleService;
    }
    public static ReportService getReportService() {
        return repor
/**
 * 개요
 * - 연차관리에 대한 ServiceImpl 클래스를 정의한다.
 *
 * 상세내용
 * - 연차관리에 대한 등록, 수정, 삭제, 조회 기능을 제공한다.
 * - 연차관리의 조회기능은 목록조회로 구분된다.
 * @author 이기하
 * @version 1.0
 * @created 2014.11.14
 */
@Service("egovIndvdlYrycManageService")
public class EgovIndvdlYrycManageServiceImpl extends EgovAbstractServiceImpl implements EgovIndvdlYrycManageService {
	@Resource(name="indvdlYrycDAO")
    private IndvdlYrycDAO indvdlYrycDAO;
	/**
	 * 개인별 연차를 조회 처리한다.
	 * @param indvdlYrycManage - 연차관리 model
	 */
	@Override
	public List<IndvdlYrycManage> selectIndvdlYrycManageList(IndvdlYrycManage indvdlYrycManage) throws Exception {
		List<IndvdlYrycManage> result = indvdlYrycDAO.selectIndvdlYrycManageList(indvdlYrycManage);
		return result;
	}
	/**
	 * 개인별 연차 리스트 갯수를 조회 처리한다.
	 * @param indvdlYrycManage - 연차관리 model
	 */
	@Override
	public int selectIndvdlYrycManageListTotCnt(IndvdlYrycManage indvdlYrycManage) throws Exception {
		return indvdlYrycDAO.selectIndvdlYrycManageListTotCnt(indvdlYrycManage);
	}
	/**
	 *
public interface ProcessJbpmDao {
	List<org.drools.definition.process.Process> getProcesses();
	org.drools.definition.process.Process getProcess(String processId);
	org.drools.definition.process.Process getProcessByName(String name);
	void removeProcess(String processId);
	List<ProcessInstanceLog> getProcessInstanceLogs();
	ProcessInstanceLog getProcessInstanceLog(long processInstanceId);
	List<ProcessInstanceLog> getProcessInstances(ProcessSorter sorter, Page pager, Date startFrom, Date endBefore,
											   org.flexpay.common.process.persistence.ProcessInstance.STATE state, String name);
	List<ProcessInstanceLog> getProcessInstanceLogsByProcessId(String processId);
	ProcessInstance startProcess(String processId, Map<String, Object> parameters);
	void abortProcessInstance(long processInstanceId);
    void deleteFinishedProcessInstances(DateRange range, String processDefinitionId);
	Map<String, Object> getProcessInstanceVariables(long processInstanceId);
	void setProcessInstanceVari
/**
 * 개요
 * - PROCESS모니터링에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - PROCESS모니터링에 대한 등록, 수정, 삭제, 조회 기능을 제공한다.
 * - PROCESS모니터링의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 박종선
 * @version 1.0
 * @created 08-9-2010 오후 3:54:46
 */
@Repository("ProcessMonDAO")
public class ProcessMonDAO extends EgovComAbstractDAO {
	/**
	 * 등록된 PROCESS모니터링 목록을 조회한다.
	 * @param processMonVO - PROCESS모니터링 Vo
	 * @return List - PROCESS모니터링 목록
	 * 
	 * @param processMonVO
	 */
	@SuppressWarnings("unchecked")	
	public List<ProcessMonVO> selectProcessMonList(ProcessMonVO processMonVO) throws Exception {
		return list("ProcessMonDAO.selectProcessMonList", processMonVO);
	}
	/**
	 * PROCESS모니터링 목록 총 갯수를 조회한다.
	 * @param ProcessMonVO - PROCESS모니터링 Vo
	 * @return int - PROCESS모니터링 토탈 카운트 수
	 * 
	 * @param processMonVO
	 */
	public int selectProcessMonTotCnt(ProcessMonVO processMonVO) throws Exception {
		return (Integer)getSqlMapClientTemplate().queryForObject("ProcessMonDAO.selectProcessMonTotCnt", processMonVO);
	}
	/**
	 * 등록된

	 * @param processMonVO - PROCESS모니터링 Vo
	 * @return processMonVO - PROCESS모니터링 Vo
	 * 
	 * @param processMonVO
	 */
	public ProcessMonVO selectProcessMon(ProcessMonVO processMonVO) throws Exception {
		return (ProcessMonVO)selectByPk("ProcessMonDAO.selectProcessMon", processMonVO);
	}
	/**
	 * PROCESS모니터링 정보를 신규로 등록한다.
	 * @param processNm - PROCESS모니터링 model
	 * 
	 * @param processNm
	 */
	public void insertProcessMon(ProcessMon processMon) throws Exception {
		insert("ProcessMonDAO.insertProcessMon", processMon);
	}
	/**
	 * 기 등록된 PROCESS모니터링 정보를 수정한다.
	 * @param processNm - PROCESS모니터링 model
	 * 
	 * @param processNm
	 */
	public void updateProcessMon(ProcessMon processMon) throws Exception {
		update("ProcessMonDAO.updateProcessMon", processMon);
	}
	/**
	 * 기 등록된 PROCESS모니터링 정보를 삭제한다.
	 * @param processNm - PROCESS모니터링 model
	 * 
	 * @param processNm
	 */
	public void deleteProcessMon(ProcessMon processMon) throws Exception {
		delete("ProcessMonDAO.deleteProcessMon", processMon

	}
	/**
	 * 프로세스 모니터링로그 목록을 조회한다.
	 * @param ProcessMonVO - 프로세스모니터링로그 VO
	 * @return  List<ProcessMonLogVO> - 프로세스모니터링로그 List
	 * 
	 * @param processMonVO
	 */
	@SuppressWarnings("unchecked")	
	public List<ProcessMonLogVO> selectProcessMonLogList(ProcessMonLogVO processMonLogVO) throws Exception {
		return list("ProcessMonDAO.selectProcessMonLogList", processMonLogVO);
	}
	/**
	 * PROCESS모니터링로그 목록 총 갯수를 조회한다.
	 * @param ProcessMonVO - PROCESS모니터링로그 Vo
	 * @return int - PROCESS모니터링로그 토탈 카운트 수
	 * 
	 * @param processMonVO
	 */
	public int selectProcessMonLogTotCnt(ProcessMonLogVO processMonLogVO) throws Exception {
		return (Integer)getSqlMapClientTemplate().queryForObject("ProcessMonDAO.selectProcessMonLogTotCnt", processMonLogVO);
	}	
	/**
	 * 프로세스 모니터링로그의 상세정보를 조회한다.
	 * @param ProcessMonVO - 프로세스모니터링로그 model
	 * @return  ProcessMonVO - 프로세스모니터링로그 model
	 * 
	 * @param processMonVO
	 */
	public ProcessMonLogVO selectProcessMonLog(ProcessMonLogVO processMonLogVO){
		return (ProcessMo
/**
 * Copyright 2010 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
public class ProcessManagement implements org.jboss.bpm.console.server.integration.ProcessManagement {
	private CommandDelegate delegate;
    public ProcessManagement() {
        delegate = new CommandDelegate();
    }
    
	public List<ProcessDefinitionRef> getProcessDefinitions() {
		List<Process> processes = delegate.getProcesses();
		List<ProcessDefinitionRef> result = new ArrayList<ProcessDefinitionRef>();
		for (Process process: processes) {
			r

		}
		return result;
	}
	public ProcessDefinitionRef getProcessDefinition(String definitionId) {
		Process process = delegate.getProcess(definitionId);
		return Transform.processDefinition(process);
	}
	/**
	 * method unsupported
	 */
	public List<ProcessDefinitionRef> removeProcessDefinition(String definitionId) {
		delegate.removeProcess(definitionId); 
	    return getProcessDefinitions();
	}
	public ProcessInstanceRef getProcessInstance(String instanceId) {
		ProcessInstanceLog processInstance = delegate.getProcessInstanceLog(instanceId);
		return Transform.processInstance(processInstance);
	}
	public List<ProcessInstanceRef> getProcessInstances(String definitionId) {
		List<ProcessInstanceLog> processInstances = delegate.getActiveProcessInstanceLogsByProcessId(definitionId);
		List<ProcessInstanceRef> result = new ArrayList<ProcessInstanceRef>();
		for (ProcessInstanceLog processInstance: processInstances) {
			result.add(Transform.processInstance(processInstance));
		}
		return r

	}
	public List<ProcessInstanceRef> getHistoricProcessInstances(String definitionId) {
		List<ProcessInstanceLog> processInstances = delegate.getInactiveProcessInstanceLogsByProcessId(definitionId);
		List<ProcessInstanceRef> result = new ArrayList<ProcessInstanceRef>();
		for (ProcessInstanceLog processInstance: processInstances) {
			result.add(Transform.processInstance(processInstance));
		}
		return result;
	}
	public List<NodeInstanceRef> getNodeInstances(String processInstanceId) {
		List<NodeInstanceLog> nodeInstances = delegate.getNodeInstanceLogsByProcessInstanceId(processInstanceId);
		List<NodeInstanceRef> result = new ArrayList<NodeInstanceRef>();
		for (NodeInstanceLog nodeInstance: nodeInstances) {
			result.add(Transform.nodeInstance(nodeInstance));
		}
		return result;
	}
	public ProcessInstanceRef newInstance(String definitionId) {
		ProcessInstanceLog processInstance = delegate.startProcess(definitionId, null);
		return Transform.processInstance(processInstance);
	}

/**
 * 개요
 * - 장애처리결과 관리정보에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - 장애처리결과 관리정보에 대한 등록, 수정, 삭제, 조회 등의 기능을 제공한다.
 * - 장애처리결과 관리정보의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author lee.m.j
 * @version 1.0
 * @created 28-6-2010 오전 10:44:58
 */
@Repository("troblProcessDAO")
public class TroblProcessDAO extends EgovComAbstractDAO {
	/**
	 * 장애처리정보를 관리하기 위해 대상 장애처리목록을 조회한다.
	 * @param troblProcessVO - 장애처리결과 Vo
	 * @return List - 장애처리결과 목록
	 */
	@SuppressWarnings("unchecked")
	public List<TroblProcessVO> selectTroblProcessList(TroblProcessVO troblProcessVO) throws Exception {
		return (List<TroblProcessVO>) list("troblProcessDAO.selectTroblProcessList", troblProcessVO);
	}
	/**
	 * 장애처리목록 총 갯수를 조회한다.
	 * @param troblProcessVO - 장애처리결과 Vo
	 * @return int - 장애처리결과 카운트 수
	 */
	public int selectTroblProcessListTotCnt(TroblProcessVO troblProcessVO) throws Exception {
		return (Integer)select("troblProcessDAO.selectTroblProcessListTotCnt", troblProcessVO);
	}
	/**
	 * 등록된 장애처리의 상세정보를 조회한다.
	 * @param troblProcessVO
/**
* Data access object used to access cfms process and errors. This class contains simple crud
* based functions to manipulate the data.
*/
public interface ButterProcessDao {
  
  /**
   * @param processId
   * @return Collection of ProcessError's
   */
  public Collection<ButterProcessError> getErrors(String processId);
  
  /**
   * @param errorId
   * @return ProcessError
   */
  public ButterProcessError getError(String errorId);
  
  
  /**
	 * Insert a process onto the system
	 * @param process to insert
	 */
	public void insertProcess(ButterProcess ButterProcess);
	/**
	 * Update a process on the system
	 * @param  process to insert
	 */
	public void updateProcess(ButterProcess ButterProcess);
  /**
   * @param processId
   * @return ButterProcess
   */
  public ButterProcess getProcess(String processId);
  
	/**
   * Retrieve a collection of processes
   * @param  criteria
   * @return A collection of ButterProcess objects
   */
  public Collection<ButterProcess> processSear
public class HomeServiceImpl extends BaseServiceImpl  implements HomeService {
	private static final long serialVersionUID = 1L;
	private AppointmentService appointmentService;
	private PersonService personService;
	private OrderService orderService;
	private ShippingMethodService shipperService;
	public List<Appointment> findOpenAppointments(){	
		return appointmentService.getOpenAppointments();		
	}
	public List<Appointment> findOpenAppointmentsForEmployee(Employee emp) {
		return appointmentService.getOpenAppointmentsForEmployee(emp);
	}
	public AppointmentService getAppointmentService() {
		return appointmentService;
	}
	@Required
	public void setAppointmentService(AppointmentService appointmentService) {
		this.appointmentService = appointmentService;
	}
	public PersonService getPersonService() {
		return personService;
	}
	@Required
	public void setPersonService(PersonService personService) {
		this.personService = personService;
	}
	public OrderService getOrderService() {
		retu
/**
 * 
 */
/**
 * @作者:彭乐
 * @功能: 
 * @时间:2015-11-27 上午10:55:54
 * @邮箱:pengle@hztianque.com
 */
public interface OtherSituationManageService {
	/**
	 * 保存
	 */
	public OtherSituationManage addOtherSituationManage(OtherSituationManage info);
	/**
	 * 查询列表
	 */
	public PageInfo<OtherSituationManage> getOtherSituationManageListByQuery(OtherSituationManage otherSituationManage,
			Integer page, Integer rows, String sidx, String sord);
	/**
	 * 更新信息
	 * 
	 * @param companyBaseInfo
	 * @return
	 * @throws Exception
	 */
	public OtherSituationManage updateOtherSituationManage(OtherSituationManage otherSituationManage);
	/**
	 * 批量删除信息
	 * 
	 * @param ids
	 */
	public void deleteOtherSituationManageByIds(String ids);
	/**
	 * 获取主表信息
	 * 
	 * @param id
	 * @return
	 */
	public OtherSituationManage getOtherSituationManageById(Long id);
	/**
	 * 签收
	 */
	public OtherSituationManage signOtherSituationManage(OtherSituationManage otherSituationManage);
	/**
	 * 回复
	 */
	public OtherSituationManage r
/**
 * 
 */
/**
 * @author LuZheqi
 * 
 */
public class ServiceUtils {
	private static UserService userService;
	private static OriginalEventService originalEventService;
	private static UserTraceService userTraceService;
	private static GoodsService goodsService;
	private static ExchangeRecordService exchangeRecordService;
	public static ExchangeRecordService getExchangeRecordService() {
		return exchangeRecordService;
	}
	public static void setExchangeRecordService(
			ExchangeRecordService exchangeRecordService) {
		ServiceUtils.exchangeRecordService = exchangeRecordService;
	}
	public static GoodsService getGoodsService() {
		return goodsService;
	}
	public static void setGoodsService(GoodsService goodsService) {
		ServiceUtils.goodsService = goodsService;
	}
	/**
	 * @return the Userservice
	 */
	public static UserService getUserService() {
		return userService;
	}
	/**
	 * @return the Originaleventservice
	 */
	public static OriginalEventService getOriginalEventService() {
		retu
/**
 * CMS管理项持久化接口
 * @author jyz
 */
public interface ManageItemDao {
  /**
   * 创建管理项
   * @param manageItem 管理项
   * @return 管理项id
   * @throws Exception
   */
  public int createManageItem(ManageItem manageItem) throws Exception;
  /**
   * 获取管理项
   * @param id 管理项id
   * @return 管理项
   * @throws Exception
   */
  public ManageItem getManageItemById(int id) throws Exception;
  /**
   * 获取管理项
   * @param name 管理项名称
   * @return 管理项
   * @throws Exception
   */
  public ManageItem getManageItem(String name) throws Exception;
  /**
   * 更新管理项
   * @param manageItem 管理项
   * @throws Exception
   */
  public void updateManageItem(ManageItem manageItem) throws Exception;
  /**
   * 删除管理项
   * @param id 管理项id
   * @throws Exception
   */
  public void deleteManageItem(int id) throws Exception;
  /**
   * 获取管理项列表
   * @return 管理项列表
   * @throws Exception
   */
  public List<ManageItem> listManageItem() throws Exception;
  /**
   * 更新管理项排序
   * @param id 管理项id
   * @param order 管理项顺序
   * @
@Repository("merchantManageDao")
public class MerchantManageDaoImpl extends BaseDaoImpl<MerchantManage> implements IMerchantManageDao{
	@Override
	public List<MerchantManage> getMerchantManage() {
		final String sql = "from MerchantManage mm where mm.available = 1 ";
		List<MerchantManage> merchantManageList = new ArrayList<MerchantManage>(); 
		merchantManageList = getHibernateTemplate().execute(
					new HibernateCallback<List<MerchantManage>>() {
						@Override
						public List<MerchantManage> doInHibernate(org.hibernate.Session arg0)
								throws HibernateException, SQLException {
							Query query = arg0.createQuery(sql);
							if(query.list().size()>=1)
							  return (List<MerchantManage>) query.list();
							else 
							  return null;	
						}
					});
		return merchantManageList;
	}
	@Override
	public void saveMerchantManage(MerchantManage mm) {
		 save(mm);
	}
	@Override
	public void clearOldMerchantManage() {
		 List<MerchantManage> oldMms = getMerchantManage();
	  
public class ServiceManager {
	private UserService userService;
	private HomePageService homePageService;
	private AboutService aboutService;
	private KnowledgeService knowledgeService;
	private PrimaryService primaryService;
	private MethodService methodService;
	private ExperienceService experienceService;
	private DataService dataService;
	private JuniorService juniorService;
	private FrontService frontService;
	public UserService getUserService() {
		return userService;
	}
	public void setUserService(UserService userService) {
		this.userService = userService;
	}
	public HomePageService getHomePageService() {
		return homePageService;
	}
	public void setHomePageService(HomePageService homePageService) {
		this.homePageService = homePageService;
	}
	public FrontService getFrontService() {
		return frontService;
	}
	public void setFrontService(FrontService frontService) {
		this.frontService = frontService;
	}
	public AboutService getAboutService() {
		return aboutService;
	}
	public

		this.aboutService = aboutService;
	}
	public KnowledgeService getKnowledgeService() {
		return knowledgeService;
	}
	public void setKnowledgeService(KnowledgeService knowledgeService) {
		this.knowledgeService = knowledgeService;
	}
	public PrimaryService getPrimaryService() {
		return primaryService;
	}
	public void setPrimaryService(PrimaryService primaryService) {
		this.primaryService = primaryService;
	}
	public MethodService getMethodService() {
		return methodService;
	}
	public void setMethodService(MethodService methodService) {
		this.methodService = methodService;
	}
	public ExperienceService getExperienceService() {
		return experienceService;
	}
	public void setExperienceService(ExperienceService experienceService) {
		this.experienceService = experienceService;
	}
	public DataService getDataService() {
		return dataService;
	}
	public void setDataService(DataService dataService) {
		this.dataService = dataService;
	}
	public JuniorService getJuniorService() {
		return 
/**
 * <p>{@link RepositoryManagerConnectionFactory} handles connections to a multiple corresponding
 * {@link org.openrdf.repository.Repository}s managed by a {@link org.openrdf.repository.manager.RepositoryManager}
 * and manages the transaction state (represented by {@link SesameTransactionObject}).</p>
 *
 * @author ameingast@gmail.com
 */
public class DynamicRepositoryManagerConnectionFactory implements SesameConnectionFactory, DisposableBean {
    private final RepositoryManager repositoryManager;
    private final RepositoryIdProvider repositoryIdProvider;
    private final RepositoryImplConfig repositoryImplConfig;
    private final Map<String, RepositoryConnectionFactory> repositoryConnectionFactoryMap;
    /**
     * <p>Creates a new {@link DynamicRepositoryManagerConnectionFactory} for the {@link org.openrdf.repository.Repository}
     * identified by the provided {@link org.openrdf.spring.DynamicRepositoryManagerConnectionFactory.RepositoryIdProvider}
     * in the {@link R

     * <p/>
     * <p>For example, a <code>repositoryIdProvider</code> that fetches IDs based on a thread-local, user-specific variable
     * can be used to create <i>dynamic</i> repositories for multiple users.</p>
     *
     * @param repositoryManager    The {@link RepositoryManager} that holds the {@link org.openrdf.repository.Repository} to which connections
     *                             will be opened.
     * @param repositoryIdProvider The id of the {@link org.openrdf.repository.Repository} which is used by the {@link RepositoryManager} to
     *                             identify the {@link org.openrdf.repository.Repository} to which connections will be opened is retrieved
     *                             from via a call-back from <code>repositoryIdProvider</code>.
     */
    DynamicRepositoryManagerConnectionFactory(RepositoryManager repositoryManager,
                                              RepositoryIdProvider repositoryIdProvider) {
        this(repository

    }
    DynamicRepositoryManagerConnectionFactory(RepositoryManager repositoryManager,
                                              RepositoryImplConfig repositoryImplConfig,
                                              RepositoryIdProvider repositoryIdProvider) {
        this.repositoryManager = repositoryManager;
        this.repositoryImplConfig = repositoryImplConfig;
        this.repositoryIdProvider = repositoryIdProvider;
        this.repositoryConnectionFactoryMap = new HashMap<>(128);
    }
    /**
     * @inheritDoc
     */
    @Override
    public RepositoryConnection getConnection() {
        return getRepositoryConnectionFactory().getConnection();
    }
    /**
     * @inheritDoc
     */
    @Override
    public void closeConnection() {
        getRepositoryConnectionFactory().closeConnection();
    }
    /**
     * @inheritDoc
     */
    @Override
    public SesameTransactionObject createTransaction() throws RepositoryException {
        return getRepositoryConnecti

    }
    /**
     * @inheritDoc
     */
    @Override
    public void endTransaction(boolean rollback) throws RepositoryException {
        getRepositoryConnectionFactory().endTransaction(rollback);
    }
    /**
     * @inheritDoc
     */
    @Override
    public SesameTransactionObject getLocalTransactionObject() {
        return getRepositoryConnectionFactory().getLocalTransactionObject();
    }
    private synchronized RepositoryConnectionFactory getRepositoryConnectionFactory() {
        String repositoryId = repositoryIdProvider.getRepositoryId();
        RepositoryConnectionFactory repositoryConnectionFactory = repositoryConnectionFactoryMap.get(repositoryId);
        if (repositoryConnectionFactory == null) {
            repositoryConnectionFactory = initializeRepositoryConnectionFactory(repositoryId);
            repositoryConnectionFactoryMap.put(repositoryId, repositoryConnectionFactory);
        }
        return repositoryConnectionFactory;
    }
    private RepositoryCon

        try {
            Repository repository = repositoryManager.getRepository(repositoryId);
            if (repository == null) {
                if (repositoryImplConfig != null) {
                    RepositoryConfig repositoryConfig = new RepositoryConfig(repositoryId, repositoryImplConfig);
                    repositoryManager.addRepositoryConfig(repositoryConfig);
                    repository = repositoryManager.getRepository(repositoryId);
                } else {
                    throw new SesameTransactionException("No such repository: " + repositoryId);
                }
            }
            return new RepositoryConnectionFactory(repository);
        } catch (RepositoryException | RepositoryConfigException e) {
            throw new SesameTransactionException(e);
        }
    }
    /**
     * <p>Shuts down the associated {@link Repository}s if they were initialized before and resets the
     * state of the object.</p>
     *
     * @throws Exception {@see Rep
/**
 * Sonatype Nexus (TM) Open Source Version.
 * Copyright (c) 2008 Sonatype, Inc. All rights reserved.
 * This program is licensed to you under Version 3 only of the GNU General Public License as published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License Version 3 for more details.
 * You should have received a copy of the GNU General Public License Version 3 along with this program.
 * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc.
 * "Sonatype" and "Sonatype Nexus" are trademarks of Sonatype, Inc.
 */
/**
 * Repository registry. It holds handles to registered repositories and sorts them properly. This class is used to get a
 * grip on repositories.
 * <p>
 * Getting reposes from here and changing repo attributes like group, id and rank have no effect

 * that kind of change, you have to: 1) get repository, 2) remove repository from registry, 3) change repo attributes
 * and 4) add repository.
 * <p>
 * ProximityEvents: this component just "concentrates" the repositiry events of all known repositories by it. It can be
 * used as single point to access all repository events. TODO this is not a good place to keep group repository
 * management code
 *
 * @author cstamas
 */
@Component( role = RepositoryRegistry.class )
public class DefaultRepositoryRegistry
    extends AbstractLogEnabled
    implements RepositoryRegistry, Disposable
    @Requirement
    private ApplicationEventMulticaster applicationEventMulticaster;
    /** The repo register, [Repository.getId, Repository] */
    private Map<String, Repository> repositories = new HashMap<String, Repository>();
    /** The repo status checkrs */
    private Map<String, RepositoryStatusCheckerThread> repositoryStatusCheckers =
        new HashMap<String, RepositoryStatusCheckerThread>(

    public void addRepository( Repository repository )
    {
        insertRepository( repository );
        getLogger().info(
                          "Added repository ID='" + repository.getId() + "' (contentClass='"
                              + repository.getRepositoryContentClass().getId() + "', mainFacet='"
                              + repository.getRepositoryKind().getMainFacet().getName() + "')" );
    }
    public void removeRepository( String repoId )
        throws NoSuchRepositoryException
    {
        Repository repository = getRepository( repoId );
        deleteRepository( repository, false );
        getLogger().info(
                          "Removed repository ID='" + repository.getId() + "' (contentClass='"
                              + repository.getRepositoryContentClass().getId() + "', mainFacet='"
                              + repository.getRepositoryKind().getMainFacet().getName() + "')" );
    }
    public void removeRepositorySilently( String repo

        throws NoSuchRepositoryException
    {
        Repository repository = getRepository( repoId );
        deleteRepository( repository, true );
    }
    public List<Repository> getRepositories()
    {
        return Collections.unmodifiableList( new ArrayList<Repository>( repositories.values() ) );
    }
    public <T> List<T> getRepositoriesWithFacet( Class<T> f )
    {
        ArrayList<T> result = new ArrayList<T>();
        for ( Repository repository : repositories.values() )
        {
            if ( repository.getRepositoryKind().isFacetAvailable( f ) )
            {
                result.add( repository.adaptToFacet( f ) );
            }
        }
        return Collections.unmodifiableList( result );
    }
    public Repository getRepository( String repoId )
        throws NoSuchRepositoryException
    {
        if ( repositories.containsKey( repoId ) )
        {
            return repositories.get( repoId );
        }
        else
        {
            throw new NoS

        }
    }
    public <T> T getRepositoryWithFacet( String repoId, Class<T> f )
        throws NoSuchRepositoryException
    {
        Repository r = getRepository( repoId );
        if ( r.getRepositoryKind().isFacetAvailable( f ) )
        {
            return r.adaptToFacet( f );
        }
        else
        {
            throw new NoSuchRepositoryException( repoId );
        }
    }
    public boolean repositoryIdExists( String repositoryId )
    {
        return repositories.containsKey( repositoryId );
    }
    public List<String> getGroupsOfRepository( String repositoryId )
    {
        ArrayList<String> result = new ArrayList<String>();
        for ( Repository repository : getRepositories() )
        {
            if ( !repository.getId().equals( repositoryId )
                && repository.getRepositoryKind().isFacetAvailable( GroupRepository.class ) )
            {
                GroupRepository group = repository.adaptToFacet( GroupRepository.class );
           

                {
                    if ( repositoryId.equals( member.getId() ) )
                    {
                        result.add( group.getId() );
                        break;
                    }
                }
            }
        }
        return result;
    }
    public List<GroupRepository> getGroupsOfRepository( Repository repository )
    {
        ArrayList<GroupRepository> result = new ArrayList<GroupRepository>();
        for ( Repository repo : getRepositories() )
        {
            if ( !repo.getId().equals( repository.getId() )
                && repo.getRepositoryKind().isFacetAvailable( GroupRepository.class ) )
            {
                GroupRepository group = repo.adaptToFacet( GroupRepository.class );
                members: for ( Repository member : group.getMemberRepositories() )
                {
                    if ( repository.getId().equals( member.getId() ) )
                    {
                        result.add( group );
      

                    }
                }
            }
        }
        return result;
    }
    private void insertRepository( Repository repository )
    {
        repositories.put( repository.getId(), repository );
        if ( repository.getRepositoryKind().isFacetAvailable( ProxyRepository.class ) )
        {
            if ( repositoryStatusCheckers.containsKey( repository.getId() ) )
            {
                RepositoryStatusCheckerThread thread = repositoryStatusCheckers.remove( repository.getId() );
                thread.interrupt();
            }
            RepositoryStatusCheckerThread thread = new RepositoryStatusCheckerThread( (ProxyRepository) repository );
            repositoryStatusCheckers.put( repository.getId(), thread );
            thread.setDaemon( true );
            thread.start();
        }
        applicationEventMulticaster.notifyEventListeners( new RepositoryRegistryEventAdd( this, repository ) );
    }
    private void deleteRepository( Repository r
@Service
public class TwitServiceImpl implements TwitService {
    private TwitRepository twitRepository;
    private AnswerRepository answerRepository;
    private FavoritesRepository favoritesRepository;
    private RetwitRepository retwitRepository;
    @Autowired
    public TwitServiceImpl(TwitRepository twitRepository, AnswerRepository answerRepository, FavoritesRepository favoritesRepository,
                           RetwitRepository retwitRepository) {
        this.twitRepository = twitRepository;
        this.answerRepository=answerRepository;
        this.favoritesRepository=favoritesRepository;
        this.retwitRepository=retwitRepository;
    }
    public Iterable<Twit> getAllTwits () {
        return twitRepository.findAllOrderByDate();
    }
    @Override
    public void saveTwit(Twit twit) {
        twitRepository.save(twit);
    }
    @Override
    public Twit findOne(Long id) {
        Twit twit = twitRepository.findOne(id);
        twit.setAnswer(answerRepository.f

        return twit;
    }
    @Override
    public Long getTwitsCount(Users user) {
        return twitRepository.getTwitCount(user);
    }
    @Override
    public void saveFav(Favorites favorites) {
       favoritesRepository.save(favorites);
    }
    @Override
    public void saveRetwit(Retwit retwit) {
       retwitRepository.save(retwit);
    }
    @Override
    public Long findFavoritesCount(Long twitId) {
        Twit twit = twitRepository.findOne(twitId);
        return favoritesRepository.findFavoritesCount(twit);
    }
    @Override
    public List<Users> findAllFavotitesAuthors(Long twitId) {
        Twit twit = twitRepository.findOne(twitId);
        return favoritesRepository.findAllFavotitesAuthors(twit);
    }
    @Override
    public List<Users> findAllRetwitsAuthors(Long twitId) {
        Twit twit = twitRepository.findOne(twitId);
        return retwitRepository.findAllRetwitsAuthors(twit);
    }
    @Override
    public Long findRetwitsCount(Long twitId) {
       
public class PersistenceFactoryImpl implements PersistenceFactory {
    private final HashMap<Class<?>, JpaRepository> repositories = new HashMap<Class<?>, JpaRepository>();
    public PersistenceFactoryImpl(EntityManager entityManager) {
      
        KundenJpaRepository kundenJpaRepository = new KundenJpaRepository();
        kundenJpaRepository.setEntityManager(entityManager);
        repositories.put(KundenJpaRepository.class, kundenJpaRepository);
        
        KaffeeJpaRepository kaffeeJpaRepository = new KaffeeJpaRepository();
        kaffeeJpaRepository.setEntityManager(entityManager);
        repositories.put(KaffeeJpaRepository.class, kaffeeJpaRepository);
        
        TortenJpaRepository tortenJpaRepository = new TortenJpaRepository();
        tortenJpaRepository.setEntityManager(entityManager);
        repositories.put(TortenJpaRepository.class, tortenJpaRepository);
        
    }
    
    
    public KundenJpaRepository kundenRepository() {
        return (KundenJ
/**
 * 개요
 * - PROCESS모니터링에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - PROCESS모니터링에 대한 등록, 수정, 삭제, 조회 기능을 제공한다.
 * - PROCESS모니터링의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 박종선
 * @version 1.0
 * @created 08-9-2010 오후 3:54:46
 */
@Repository("ProcessMonDAO")
public class ProcessMonDAO extends EgovComAbstractDAO {
	/**
	 * 등록된 PROCESS모니터링 목록을 조회한다.
	 * @param processMonVO - PROCESS모니터링 Vo
	 * @return List - PROCESS모니터링 목록
	 * 
	 * @param processMonVO
	 */
	@SuppressWarnings("unchecked")	
	public List<ProcessMonVO> selectProcessMonList(ProcessMonVO processMonVO) throws Exception {
		return list("ProcessMonDAO.selectProcessMonList", processMonVO);
	}
	/**
	 * PROCESS모니터링 목록 총 갯수를 조회한다.
	 * @param ProcessMonVO - PROCESS모니터링 Vo
	 * @return int - PROCESS모니터링 토탈 카운트 수
	 * 
	 * @param processMonVO
	 */
	public int selectProcessMonTotCnt(ProcessMonVO processMonVO) throws Exception {
		return (Integer)getSqlMapClientTemplate().queryForObject("ProcessMonDAO.selectProcessMonTotCnt", processMonVO);
	}
	/**
	 * 등록된

	 * @param processMonVO - PROCESS모니터링 Vo
	 * @return processMonVO - PROCESS모니터링 Vo
	 * 
	 * @param processMonVO
	 */
	public ProcessMonVO selectProcessMon(ProcessMonVO processMonVO) throws Exception {
		return (ProcessMonVO)selectByPk("ProcessMonDAO.selectProcessMon", processMonVO);
	}
	/**
	 * PROCESS모니터링 정보를 신규로 등록한다.
	 * @param processNm - PROCESS모니터링 model
	 * 
	 * @param processNm
	 */
	public void insertProcessMon(ProcessMon processMon) throws Exception {
		insert("ProcessMonDAO.insertProcessMon", processMon);
	}
	/**
	 * 기 등록된 PROCESS모니터링 정보를 수정한다.
	 * @param processNm - PROCESS모니터링 model
	 * 
	 * @param processNm
	 */
	public void updateProcessMon(ProcessMon processMon) throws Exception {
		update("ProcessMonDAO.updateProcessMon", processMon);
	}
	/**
	 * 기 등록된 PROCESS모니터링 정보를 삭제한다.
	 * @param processNm - PROCESS모니터링 model
	 * 
	 * @param processNm
	 */
	public void deleteProcessMon(ProcessMon processMon) throws Exception {
		delete("ProcessMonDAO.deleteProcessMon", processMon

	}
	/**
	 * 프로세스 모니터링로그 목록을 조회한다.
	 * @param ProcessMonVO - 프로세스모니터링로그 VO
	 * @return  List<ProcessMonLogVO> - 프로세스모니터링로그 List
	 * 
	 * @param processMonVO
	 */
	@SuppressWarnings("unchecked")	
	public List<ProcessMonLogVO> selectProcessMonLogList(ProcessMonLogVO processMonLogVO) throws Exception {
		return list("ProcessMonDAO.selectProcessMonLogList", processMonLogVO);
	}
	/**
	 * PROCESS모니터링로그 목록 총 갯수를 조회한다.
	 * @param ProcessMonVO - PROCESS모니터링로그 Vo
	 * @return int - PROCESS모니터링로그 토탈 카운트 수
	 * 
	 * @param processMonVO
	 */
	public int selectProcessMonLogTotCnt(ProcessMonLogVO processMonLogVO) throws Exception {
		return (Integer)getSqlMapClientTemplate().queryForObject("ProcessMonDAO.selectProcessMonLogTotCnt", processMonLogVO);
	}	
	/**
	 * 프로세스 모니터링로그의 상세정보를 조회한다.
	 * @param ProcessMonVO - 프로세스모니터링로그 model
	 * @return  ProcessMonVO - 프로세스모니터링로그 model
	 * 
	 * @param processMonVO
	 */
	public ProcessMonLogVO selectProcessMonLog(ProcessMonLogVO processMonLogVO){
		return (ProcessMo
public interface TimeManageService extends BaseService
	/**查询日经营情况*/
    public String findDayManage(TimeManageVo timeManageVo)throws Exception;
    /**查询年经营情况*/
    public String findMonthManage(TimeManageVo timeManageVo)throws Exception;
    /**查询年经营情况*/
    public String findYearManage(TimeManageVo timeManageVo)throws Exception;
    /**获取年经营情况折线图信息*/
    public JFreeChart findYearManageSnapMap(TimeManageVo timeManageVo)throws Exception;
    /**获取年经营情况饼图信息*/
    public JFreeChart findYearManageCakeMap(TimeManageVo timeManageVo)throws Exception;
    /**获取月经营情况折线图信息*/
    public JFreeChart findMonthManageSnapMap(TimeManageVo timeManageVo)throws Exception;
    /**获取月经营情况饼图信息*/
    public JFreeChart findMonthManageCakeMap(TimeManageVo timeManageVo)throws Exception;
    /**获取日经营情况折线图信息*/
    public JFreeChart findDayManageSnapMap(TimeManageVo timeManageVo)throws Exception;
    /**获取日经营情况饼图信息*/
    public JFreeChart findDayManageCakeMap(TimeManageVo timeManageVo)throws Exception;
    /**日营
/**
 * 일지관리를 처리하는 Dao Class 구현
 * @author 공통서비스 장동한
 * @since 2009.04.10
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.04.10  장동한          최초 생성
 *
 * </pre>
 */
@Repository("diaryManageDao")
public class DiaryManageDao extends EgovComAbstractDAO {
    /**
	 * 일지관리 목록을 조회한다. 
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	public List selectDiaryManageList(ComDefaultVO searchVO) throws Exception{
		return (List)list("DiaryManage.selectDiaryManage", searchVO);
	}
    /**
	 * 일지관리를(을) 상세조회 한다.
	 * @param diaryManageVO - 일지관리 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
	public DiaryManageVO selectDiaryManageDetail(DiaryManageVO diaryManageVO) throws Exception{
		return (DiaryManageVO)select("DiaryManage.selectDiaryManageDetail", diaryManageVO);
	}
    /**
	 * 일지관리를(을) 목록 전체 건수를(을) 조회한다.
	 * @param searchVO - 조회할 정보가
/**
 * Created by YinLin on 2015/8/12.
 * Description :
 * Version 1.0
 */
public interface ManageUserService {
	interface Default {
		String DEFAULT_PASSWORD 	= "default";
		Gender DEFAULT_SEX			= Gender.MAN;
		MemberType DEFAULT_TYPE		= MemberType.CLERK;
	}
	/**
	 *
	 * 根据account查询
	 *
	 * @param username
	 * @return
	 */
	ManageUser findByUsername(String username)throws ManageUserServiceException;
	/**
	 * 通过账号ID查找
	 * @param id
	 * @return
	 */
	ManageUser findOne(Integer id);
	/**
	 * 保存新的manageuser
	 * @param manageUser
	 */
	void saveManageUser(ManageUser manageUser)throws ManageUserServiceException;
	/**
	 * 更新用户信息
	 * @param manageUser
	 */
	void update(ManageUser manageUser)throws ManageUserServiceException;
	/**
	 * 分页查询全部的manage user
	 * @param pageRequest
	 * @return
	 */
	Page<ManageUser> getManageUserPage(PageRequest pageRequest) throws ManageUserServiceException;
	/**
	 * 根据条件查询
	 * @param pageRequest
	 * @param userName
	 * @param name
	 * @return
	 * @throws ManageUse
public class ProcessStartInfoDTO {
	/**
	 * 流程ID
	 */
	private String processId;
	/**
	 * 流程的创建者
	 */
	private String creater;
	/**
	 * 流程实例ID
	 */
	long processInstanceId;
	/**
	 * 值诸如：@KJ_keyId@@@keyName##showOrder##innerVariable##keyValue###@KJ_keyId@@@keyName##showOrder##innerVariable##keyValue###...
	 * innerVariable是指：是否作为流程变量
	 */
	private String dynaProcessKeysForShow;
	/**
	 * 作为流程变量的key放入该列表
	 */
	private List<DynaProcessKeyDTO> innerVariables;
	/**
	 * 表单所有的key
	 */
	private List<DynaProcessKeyDTO> allDynaProcessKeys;
	public List<DynaProcessKeyDTO> getAllDynaProcessKeys() {
		return allDynaProcessKeys;
	}
	public void setAllDynaProcessKeys(List<DynaProcessKeyDTO> allDynaProcessKeys) {
		this.allDynaProcessKeys = allDynaProcessKeys;
	}
	public List<DynaProcessKeyDTO> getInnerVariables() {
		return innerVariables;
	}
	public void setInnerVariables(List<DynaProcessKeyDTO> innerVariables) {
		this.innerVariables = innerVariables;
	}
	public String getDynaProcessKeysForShow() {

/**
 * Detects when a process is finished and invokes the associated listeners.
 */
public class ProcessExitDetector extends Thread {
    /** The process for which we have to detect the end. */
    private Process process;
    /** The associated listeners to be invoked at the end of the process. */
    private List<ProcessListener> listeners = new ArrayList <ProcessListener>();
    /**
     * Starts the detection for the given process
     * @param process the process for which we have to detect when it is finished
     */
    public ProcessExitDetector(Process process) {
        try {
            process.exitValue();
            throw new IllegalArgumentException("The process is already ended");
        } catch (IllegalThreadStateException exc) {
            this.process = process;
        }
    }
    /** @return the process that it is watched by this detector. */
    public Process getProcess() {
        return process;
    }
    public void run() {
        try {
            process.
public class DeleteProcessInstanceDbTest extends AbstractDbTestCase {
  public void testDeleteProcessInstance() {
    ProcessDefinition processDefinition = ProcessDefinition.parseXmlString("<process-definition name='make fondue'>"
        + "  <start-state>"
        + "    <transition to='buy cheese' />"
        + "  </start-state>"
        + "  <state name='buy cheese' />"
        + "</process-definition>");
    deployProcessDefinition(processDefinition);
    ProcessInstance processInstance = jbpmContext.newProcessInstance("make fondue");
    processInstance.signal();
    processInstance = saveAndReload(processInstance);
    jbpmContext.getGraphSession().deleteProcessInstance(processInstance);
    newTransaction();
    assertDeleted(processInstance);
  }
  public void testDeleteProcessInstanceWithTask() {
    ProcessDefinition processDefinition = ProcessDefinition.parseXmlString("<process-definition name='make fondue'>"
        + "  <start-state>"
        + "    <transition to='buy ch

        + "  </start-state>"
        + "  <task-node name='buy cheese'>"
        + "    <task />"
        + "  </task-node>"
        + "</process-definition>");
    deployProcessDefinition(processDefinition);
    ProcessInstance processInstance = jbpmContext.newProcessInstance("make fondue");
    processInstance.signal();
    processInstance = saveAndReload(processInstance);
    jbpmContext.getGraphSession().deleteProcessInstance(processInstance);
    newTransaction();
    assertDeleted(processInstance);
  }
  public void testDeleteProcessInstanceWithSubProcessInstance() {
    ProcessDefinition buyCheese = ProcessDefinition.parseXmlString("<process-definition name='buy cheese'>"
        + "  <start-state>"
        + "    <transition to='find shop' />"
        + "  </start-state>"
        + "  <state name='find shop' />"
        + "</process-definition>");
    deployProcessDefinition(buyCheese);
    ProcessDefinition makeFondue = ProcessDefinition.parseXmlString("<process-definition na

        + "  <start-state>"
        + "    <transition to='buy cheese' />"
        + "  </start-state>"
        + "  <process-state name='buy cheese'>"
        + "    <sub-process name='buy cheese' />"
        + "  </process-state>"
        + "</process-definition>");
    deployProcessDefinition(makeFondue);
    ProcessInstance processInstance = jbpmContext.newProcessInstance("make fondue");
    processInstance.signal();
    processInstance = saveAndReload(processInstance);
    jbpmContext.getGraphSession().deleteProcessInstance(processInstance);
    newTransaction();
    assertDeleted(processInstance.getRootToken().getProcessInstance());
    assertDeleted(processInstance);
  }
  public void testDeleteProcessInstanceWithConcurrentPathsOfExecution() {
    ProcessDefinition makeFondue = ProcessDefinition.parseXmlString("<process-definition name='make fondue'>"
        + "  <start-state>"
        + "    <transition to='fork' />"
        + "  </start-state>"
        + "  <fork name='fork'

        + "    <transition name='cheese' to='buy cheese' />"
        + "    <transition name='bread' to='bake bread' />"
        + "  </fork>"
        + "  <state name='buy cheese' />"
        + "  <state name='bake bread' />"
        + "</process-definition>");
    deployProcessDefinition(makeFondue);
    ProcessInstance processInstance = jbpmContext.newProcessInstance("make fondue");
    ContextInstance contextInstance = processInstance.getContextInstance();
    contextInstance.setVariable("a", "asterix");
    contextInstance.setVariable("b", "obelix");
    processInstance.signal();
    Token cheese = processInstance.getRootToken().getChild("cheese");
    contextInstance.setVariable("a", "mik", cheese);
    contextInstance.setVariable("b", "mak", cheese);
    contextInstance.setVariable("c", "mon", cheese);
    Token bread = processInstance.getRootToken().getChild("bread");
    contextInstance.setVariable("a", "jip", bread);
    contextInstance.setVariable("b", "janneke", bread);
  
@Remote
public interface RafProcessSessionEJBRemote {
	/**
	 * queryByRange - allows querying by range/block
	 * 
	 * @param jpqlStmt
	 * @param firstResult
	 * @param maxResults
	 * @return a list of RafProcess
	 */
	public List<RafProcess> queryByRange(String jpqlStmt, int firstResult,
			int maxResults);
	/**
	 * persistRafProcess persists a country
	 * 
	 * @param rafProcess
	 * @return the persisted RafProcess
	 */
	public RafProcess persistRafProcess(RafProcess rafProcess);
	/**
	 * persistRafProcessList - persists a list of RafProcess
	 * 
	 * @param rafProcessList
	 * @return the list of persisted RafProcess
	 */
	public ArrayList<RafProcess> persistRafProcessList(
			List<RafProcess> rafProcessList);
	/**
	 * mergeRafProcess - merges a RafProcess
	 * 
	 * @param rafProcess
	 * @return the merged RafProcess
	 */
	public RafProcess mergeRafProcess(RafProcess rafProcess);
	/**
	 * mergeRafProcessList - merges a list of RafProcess
	 * 
	 * @param rafProcessList
	 * @return the mer
/**
 * RSS태그관리를 처리하는 ServiceImpl Class 구현
 * @author 공통서비스 장동한
 * @since 2010.06.16
 * @version 1.0
 * @see <pre>
 * &lt;&lt; 개정이력(Modification Information) &gt;&gt;
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.07.03  장동한          최초 생성
 *
 * </pre>
 */
@Service("egovRssManageService")
public class EgovRssTagManageServiceImpl extends EgovAbstractServiceImpl
        implements EgovRssTagManageService {
	/* RSS관리 DAO */
    @Resource(name = "rssManageDao")
    private RssTagManageDao dao;
    /* RSS ID Generator Service */
    @Resource(name = "egovRssTagManageIdGnrService")
    private EgovIdGnrService idgenService;
    /**
     * JDBC 테이블 목록을조회한다.
     * @return List -조회한목록이담긴List
     * @throws Exception
     */
    @Override
	public List<?> selectRssTagManageTableList() throws Exception {
    	return dao.selectRssTagManageTableList();
    }
    /**
     * JDBC 테이블 컬럼 목록을 조회한다.
     * @param map - 컬럼조회정보
     * @return List -조회한목

     * @throws Exception
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public List<?> selectRssTagManageTableColumnList(Map map) throws Exception {
    	return dao.selectRssTagManageTableColumnList(map);
    }
    /**
     * RSS태그관리를(을) 목록을 조회 한다.
     * @param rssManage -조회할 정보가 담긴 객체
     * @return List -조회한목록이담긴List
     * @throws Exception
     */
    @Override
	public List<?> selectRssTagManageList(RssManage rssManage) throws Exception {
    	return dao.selectRssTagManageList(rssManage);
    }
    /**
     * RSS태그관리를(을) 목록 전체 건수를(을) 조회한다.
     * @param searchVO -조회할 정보가 담긴 객체
     * @return int -조회한건수가담긴Integer
     * @throws Exception
     */
    @Override
	public int selectRssTagManageListCnt(RssManage rssManage) throws Exception {
        return dao.selectRssTagManageListCnt(rssManage);
    }
    /**
     * RSS태그관리를(을) 상세조회 한다.
     * @param searchVO -조회할 정보가 담긴 객체
     * @return List -조회한목록이담긴List
     * @throws Exception
     */
    @Override
	public
/**
 * 
 * @author Shamanou van Leeuwen
 * @Since 2016-07-02
 */
public class Repository {
    private FilterResolver filterResolver;
    @Autowired
    private RepositoryConfiguration configuration;
    private ItemRepository itemRepository;
    private SetRepository setRepository;
    private ResumptionTokenFormat resumptionTokenFormatter;
    public RepositoryConfiguration getConfiguration() {
        return configuration;
    }
    public ItemRepository getItemRepository() {
        return itemRepository;
    }
    public Repository withItemRepository(ItemRepository itemRepository) {
        this.itemRepository = itemRepository;
        return this;
    }
    public SetRepository getSetRepository() {
        return setRepository;
    }
    public Repository withSetRepository(SetRepository setRepository) {
        this.setRepository = setRepository;
        return this;
    }
    public ResumptionTokenFormat getResumptionTokenFormatter() {
        return resumptionTokenFormatter;
  
/**********************************************************************************
 * $Id: Repository.java 59673 2009-04-03 23:02:03Z arwhyte@umich.edu $
 **********************************************************************************
 *
 * Copyright (c) 2003, 2004, 2005, 2007, 2008 The Sakai Foundation
 *
 * Licensed under the Educational Community License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 **********************************************************************************/
public abstract class Repository
implements org.osid.repository.Repository
    p

    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void updateDisplayName(String displayName)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public String getDescription()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void updateDescription(String description)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Id getId()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Type getType(

    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset createAsset(String displayName
                                               , String description
                                               , org.osid.shared.Type assetType)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void deleteAsset(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.AssetIterator getAssets()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.AssetIterator 

    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.TypeIterator getAssetTypes()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RecordStructureIterator getRecordStructures()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RecordStructureIterator getMandatoryRecordStructures(org.osid.shared.Type assetType)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.TypeIterator getSearchTypes()
    throws org.osid.repository.RepositoryException
    {
		  throw ne

    }
    public org.osid.shared.TypeIterator getStatusTypes()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Type getStatus(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public boolean validateAsset(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void invalidateAsset(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset getAsset(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryExcept

    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset getAssetByDate(org.osid.shared.Id assetId
                                                  , long date)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.LongValueIterator getAssetDates(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.AssetIterator getAssetsBySearch(java.io.Serializable searchCriteria
                                                             , org.osid.shared.Type searchType
                                                             , org.osid.shared.Properties searchProperties)
    throws org.osid.repository.RepositoryException


		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Id copyAsset(org.osid.repository.Asset asset)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RecordStructureIterator getRecordStructuresByType(org.osid.shared.Type recordStructureType)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.PropertiesIterator getProperties()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Properties getPropertiesByType(org.osid.shared.Type propertiesType)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid
/**
 * 설문관리를 처리하는 Dao Class 구현
 * @author 공통서비스 장동한
 * @since 2009.03.20
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  장동한          최초 생성
 *
 * </pre>
 */ 
@Repository("qustnrManageDao")
public class QustnrManageDao extends EgovAbstractDAO {
    /**
	 * 설문템플릿 목록을 조회한다. 
	 * @param qustnrManageVO - 설문관리 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public List selectQustnrTmplatManageList(QustnrManageVO qustnrManageVO) throws Exception{
		return (List)list("QustnrManage.selectQustnrTmplatManage", qustnrManageVO);
	}
    /**
	 * 설문관리 목록을 조회한다. 
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public List selectQustnrManageList(ComDefaultVO searchVO) throws Exception{
		return (List)list("QustnrManage.selectQustnrManage", searchVO);
	}
    /**
	 * 

	 * @param qustnrManageVO - 설문관리 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
    public QustnrManageVO selectQustnrManageDetailModel(QustnrManageVO qustnrManageVO) throws Exception {    	
        return (QustnrManageVO) selectByPk("QustnrManage.selectQustnrManageDetailModel", qustnrManageVO);
    }
    
    /**
	 * 설문관리를(을) 상세조회 한다.
	 * @param qustnrManageVO - 설문관리 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public List selectQustnrManageDetail(QustnrManageVO qustnrManageVO) throws Exception{
		return (List)list("QustnrManage.selectQustnrManageDetail", qustnrManageVO);
	}
    /**
	 * 설문관리를(을) 목록 전체 건수를(을) 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return int
	 * @throws Exception
	 */
	public int selectQustnrManageListCnt(ComDefaultVO searchVO) throws Exception{
		return (Integer)getSqlMapClientTemplate().queryForObject("QustnrManage.selectQustnrManageCnt", searchVO);
	}
    /**
	 * 설문관리를(을) 등록한다.
	 * @param qqustnrManageVO - 설문관리
/**
 * 사용자관리에 대한 Vo 클래스
 * @author 배치운영환경 김지완
 * @since 2012.07.12
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2012.07.12  김지완          최초 생성
 *
 * </pre>
 */
public class UserManageVO extends  UserManage{
	private static final long serialVersionUID = 1L;
	List <UserManageVO> userManageList;
	/**
	 * UserManage 를 리턴한다.
	 * @return UserManage
	 */
	public UserManage getUserManage()
    {
    	return getUserManage();
    }
	/**
	 * UserManage 값을 설정한다.
	 * @param userManage UserManage
	 */	
    public void setUserManage(UserManage userManage)
    {
    	setUserManage(userManage);
    }
	/**
	 * userManageList attribute 를 리턴한다.
	 * @return List<UserManageVO>
	 */
	public List<UserManageVO> getUserManageList() {
		return userManageList;
	}
	/**
	 * userManageList attribute 값을 설정한다.
	 * @param userManageList List<UserManageVO> 
	 */
	public void setUserManageList
/**
 * 개요
 * - 회의실관리에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - 회의실관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 회의실관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Repository("mtgPlaceManageDAO")
public class MtgPlaceManageDAO extends EgovComAbstractDAO {
	/**
	 * 회의실관리정보를 관리하기 위해 등록된 회의실관리 목록을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return List - 회의실관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<MtgPlaceManageVO> selectMtgPlaceManageList(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
		return list("mtgPlaceManageDAO.selectMtgPlaceManageList", mtgPlaceManageVO);
	}
    /**
	 * 회의실관리목록 총 갯수를 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectMtgPlaceManageListTotCnt(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("mtgPlaceManageDAO.selectMtgPlaceManageListTotCnt", mtgPlaceManageVO);
    }
	/**

	 * 등록된 회의실관리의 상세정보를 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	public MtgPlaceManage selectMtgPlaceManage(MtgPlaceManageVO mtgPlaceManageVO)  throws Exception {
		return (MtgPlaceManage) selectByPk("mtgPlaceManageDAO.selectMtgPlaceManage", mtgPlaceManageVO);
	}
	/**
	 * 회의실관리정보를 신규로 등록한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void insertMtgPlaceManage(MtgPlaceManage mtgPlaceManage) throws Exception {
		insert("mtgPlaceManageDAO.insertMtgPlaceManage", mtgPlaceManage);
	}
	/**
	 * 기 등록된 회의실관리정보를 수정한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void updtMtgPlaceManage(MtgPlaceManage mtgPlaceManage) throws Exception {
		update("mtgPlaceManageDAO.updtMtgPlaceManage", mtgPlaceManage);
	}
	/**
	 * 기 등록된 회의실관리정보를 삭제한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void deleteMtgPlaceManage(MtgPlaceManage mtgPlaceManage) throws Exception {
        delete("mtgPlaceManageDAO.deleteMtgPlaceManage",mtgPlaceManage);
	}

	/******** 회의실 예약 관리 *************/
	/** 
	 * 회의실 ID 정보 목록을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return List - 회의실관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<MtgPlaceManageVO> selectMtgPlaceIDList(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
		return list("mtgPlaceManageDAO.selectMtgPlaceIDList", mtgPlaceManageVO);
	}
	/** 
	 * 회의실 예약정보를 관리하기 위해 등록된 회의실예약을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 목록
	 */
	public MtgPlaceManageVO selectMtgPlaceResveManageList(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
		return (MtgPlaceManageVO) selectByPk("mtgPlaceManageDAO.selectMtgPlaceResveManageList", mtgPlaceManageVO);
	}
	/**
	 * 회의실예약 신청화면을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	public MtgPlaceManageVO selectMtgPlaceResve(MtgPlaceManageVO mtgPlaceManageVO)  throws Exception {
		return (MtgPlaceManageVO) selectByPk("mtgPlaceManageDAO.selectMtgPlaceResve", mtgP

	}
	/**
	 * 등록된 회의실예약 상세정보를 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	public MtgPlaceManageVO selectMtgPlaceResveDetail(MtgPlaceManageVO mtgPlaceManageVO)  throws Exception {
		return (MtgPlaceManageVO) selectByPk("mtgPlaceManageDAO.selectMtgPlaceResveDetail", mtgPlaceManageVO);
	}
	/**
	 * 회의실예약 정보를 신규로 등록한다.
	 * @param mtgPlaceResve - 회의실예약 model
	 */
	public void insertMtgPlaceResve(MtgPlaceResve mtgPlaceResve) throws Exception {
		insert("mtgPlaceManageDAO.insertMtgPlaceResve", mtgPlaceResve);
	}
	/**
	 * 기 등록된 회의실예약 정보를 수정한다.
	 * @param mtgPlaceResve - 회의실예약 model
	 */
	public void updtMtgPlaceResve(MtgPlaceResve mtgPlaceResve) throws Exception {
		update("mtgPlaceManageDAO.updtMtgPlaceResve", mtgPlaceResve);
	}
	/**
	 * 기 등록된 회의실예약 정보를 삭제한다.
	 * @param mtgPlaceResve - 회의실예약 model
	 */
	public void deleteMtgPlaceResve(MtgPlaceResve mtgPlaceResve) throws Exception {
        delete("mtgPlaceManageDAO.deleteMtgPlaceResve",mtgPlaceResv

	}	
	/**
	 * 회의실 중복여부 체크.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return int - 중복건수
	 */
	public int mtgPlaceResveDplactCeck(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
		return (Integer)getSqlMapClientTemplate().queryForObject("mtgPlaceManageDAO.mtgPlaceResveDplactCeck", mtgPlaceManageVO);
	}
	/******** 회의실 비품 관리 *************/
	/**
	 * 비품정보 목록을 조회한다
	 * @param fxtrsManageVO - 비품관리 VO
	 * @return List - 비품관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<MtgPlaceFxtrsVO> selectFxtrsManageList(MtgPlaceFxtrsVO mtgPlaceFxtrsVO) throws Exception {
		return list("mtgPlaceManageDAO.selectFxtrsManageList", mtgPlaceFxtrsVO);
	}
	/**
	 * 회의실관리 비품정보를 신규로 등록한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void insertMtgPlaceFxtrs(MtgPlaceFxtrs mtgPlaceFxtrs) throws Exception {
		insert("mtgPlaceManageDAO.insertMtgPlaceFxtrs", mtgPlaceFxtrs);
	}
	/**
	 * 회의실관리 비품정보를 삭제한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void deleteMtgPlaceFxtrs(MtgPlaceFxtrs mtgPl
@Action (value="houseManageAssign",results={
		@Result(name="add",location="/HouseManageaddoredit.jsp"),
		@Result(name="edit",location="/HouseManageaddoredit.jsp"),
		@Result(name="list",location="/HouseManagelist.jsp")})
@Controller
public class HouseManageAssign extends ActionSupport{
	private HouseManageViewModel cvm;
	 private String houseId;
	 
	 @Resource(name = "houseManageService")
	private IHouseManageService houseManageService;
	private List list;
	public HouseManageViewModel getCvm() {
		return cvm;
	}
	public void setCvm(HouseManageViewModel cvm) {
		this.cvm = cvm;
	}
	public String add(){
		HouseManageViewModel houseManageViewModel=new HouseManageViewModel();
		
		HouseManage houseManage = new HouseManage();
		
		ViewClass vc=new ViewClass();
		 vc.action="houseManageAction!add";
		 vc.message="<div class='col-md-6 col-md-offset-1'><h2>添加房屋管理信息</h2></div>";
		 houseManageViewModel.viewClass=vc;
		
		ViewStringSet viewStringSet = new ViewStringSet(houseManage);
		
		house

		
		cvm = houseManageViewModel;
		
		
		return "add";
		
	}
	public String edit(){
		
		HouseManageViewModel houseManageViewModel=new HouseManageViewModel();
		
		HouseManage houseManage = houseManageService.edit(Integer.parseInt(houseId));
		
		ViewClass vc=new ViewClass();
		 vc.action="houseManageAction!edit";
		 vc.message="<div class='col-md-6 col-md-offset-1'><h2>编辑房屋管理信息</h2></div>";
		 houseManageViewModel.viewClass=vc;
		
		ViewStringSet viewStringSet = new ViewStringSet(houseManage);
		
		houseManageViewModel.setInput(viewStringSet.updateset());
		
		cvm = houseManageViewModel;
		
		
		return "edit";
		
	}
	public String list() throws IllegalArgumentException, IllegalAccessException, IntrospectionException{
		
		 HouseManageViewModel houseManageViewModel=new HouseManageViewModel();
		
		 list = houseManageService.findall();
		 
		 ViewStringSet viewStringSet = new ViewStringSet();
			
			houseManageViewModel.setList(viewStringSet.listSet(list));
			
			cvm = houseManageView
public class SharkProcess {
    private String processId;
    private String processName;
    private String processRequesterId;
    private String processVersion;
    private String processDefId;
    public String getProcessId() {
        return processId;
    }
    public void setProcessId(String processId) {
        this.processId = processId;
    }
    public String getProcessName() {
        return processName;
    }
    public void setProcessName(String processName) {
        this.processName = processName;
    }
    public String getProcessRequesterId() {
        return processRequesterId;
    }
    public void setProcessRequesterId(String processRequesterId) {
        this.processRequesterId = processRequesterId;
    }
    public String getProcessVersion() {
        return processVersion;
    }
    public void setProcessVersion(String processVersion) {
        this.processVersion = processVersion;
    }
    public String getProcessDefId() {
        return processDefId;
    }
  
/**
 * Created by lin on 2014/7/22.
 */
public class UncaughtExceptionHandlerWrapper implements Thread.UncaughtExceptionHandler {
    public final static String TAG = UncaughtExceptionHandlerWrapper.class.getName();
    public static Thread.UncaughtExceptionHandler defaultHandler = new Thread.UncaughtExceptionHandler() {
        @Override
        public void uncaughtException(Thread thread, Throwable throwable) {
        }
    };
    private final Thread.UncaughtExceptionHandler originalHandler;
    private UncaughtExceptionHandlerWrapper(Thread.UncaughtExceptionHandler originalHandler) {
        this.originalHandler = originalHandler;
    }
    @Override
    public void uncaughtException(Thread thread, Throwable throwable) {
        throwable.printStackTrace();
        if (defaultHandler != null) {
            defaultHandler.uncaughtException(thread, throwable);
        }
        if (originalHandler != null) {
            originalHandler.uncaughtException(thread, throwable);
        }
public class Powermart implements Cloneable {
	private String creationDate;
	private String repositoryVersion;
	private ArrayList<Repository> repositoryList;
	public String getCreationDate() {
		return creationDate;
	}
	public void setCreationDate(String creationDate) {
		this.creationDate = creationDate;
	}
	public String getRepositoryVersion() {
		return repositoryVersion;
	}
	public void setRepositoryVersion(String repositoryVersion) {
		this.repositoryVersion = repositoryVersion;
	}
	public ArrayList<Repository> getRepositoryList() {
		return repositoryList;
	}
	public void setRepositoryList(ArrayList<Repository> repositoryList) {
		this.repositoryList = repositoryList;
	}	
	public void addRepository( Repository rep ) {
		if ( repositoryList == null ) {
			repositoryList = new ArrayList<Repository>();
		}
		repositoryList.add(rep);
	}
	@Override
	public Object clone() {
		try {
			return super.clone();
		} catch ( CloneNotSupportedException e ) {
			throw new RuntimeException(e);
	
public class FoodProcessAction extends ActionSupport{
	private static final long serialVersionUID = -11025061163530110L;
	private IFoodProcessService foodProcessService;
	private FoodProcess foodProcess;
	public IFoodProcessService getFoodProcessService() {
		return foodProcessService;
	}
	public void setFoodProcessService(IFoodProcessService foodProcessService) {
		this.foodProcessService = foodProcessService;
	}
	public FoodProcess getFoodProcess() {
		return foodProcess;
	}
	public void setFoodProcess(FoodProcess foodProcess) {
		this.foodProcess = foodProcess;
	}
	public String findFoodProcess() {
		if (foodProcess != null) {
			foodProcessService.selectByPrimaryKey(foodProcess.getPid());
			
			return "findSuccess";
		}
		
		return "findFail";
	}
	public String addFoodProcess() {
		if (foodProcess != null) {
			foodProcessService.insert(foodProcess);
			
			return "addSuccess";
		}
		
		return "addFail";
	}
	public String removeFoodProcess() {
		if (foodProcess != null) {
			foodP
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Morgane
 */
public class ServiceService {
    
    public static Integer creerService (String nom_service) {
        Service service = new Service (nom_service);
        return ServiceDAOImpl.getInstance().save(service);
        
    }
    public static Boolean modifierService (Service service, String nom_service) {
        service.setNom_service(nom_service);
        return ServiceDAOImpl.getInstance().update(service);
    }
    public static Boolean modifierService (Integer id_service, String nom_service) {
        Service s = ServiceDAOImpl.getInstance().get(id_service);
        s.setNom_service(nom_service);
        return ServiceDAOImpl.getInstance().update(s);
    }
    public static Boolean supprimerService (Service service) {
        return ServiceDAOImpl.getInstance().delete(service.getId_service());
    }
    public static Boolean supprimerService (Integer id_

        return ServiceDAOImpl.getInstance().delete(id_service);
    }
    public static Boolean ajouterTitulaire (Titulaire titulaire, Service service) {
        titulaire.setService(service);
        service.ajouterTitulaire(titulaire);
        return ServiceDAOImpl.getInstance().update(service);
    }
        public static Boolean ajouterTitulaire (Integer id_titulaire, Service service) {
        Titulaire t = TitulaireDAOImpl.getInstance().get(id_titulaire);
        t.setService(service);
        service.ajouterTitulaire(t);
        return ServiceDAOImpl.getInstance().update(service);
    }
    public static Boolean ajouterLit (Lit lit, Service service) {
       lit.setService(service);
       service.ajouterLit(lit);
       return ServiceDAOImpl.getInstance().update(service);
    }
    public static Boolean ajouterLit (Integer id_lit, Service service) {
       Lit lit = LitDAOImpl.getInstance().get(id_lit);
       lit.setService(service);
       service.ajouterLit(lit);
       ret
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author russel
 */
@Aggregator(contextName = "com.smartitengineering.user.service")
public class Services {
  @InjectableField
  private OrganizationService organizationService;
  @InjectableField
  private UserService userService;
  @InjectableField
  private PrivilegeService privilegeService;
  @InjectableField
  private RoleService roleService;
  @InjectableField
  private SecuredObjectService securedObjectService;
  @InjectableField
  private UserGroupService userGroupService;
  @InjectableField
  private UserPersonService userPersonService;
  @InjectableField
  private AuthorizationService authorizationService;
  @InjectableField
  private PersonService personService;
  private Services() {
  }
  public PersonService getPersonService() {
    return personService;
  }
  public void setPersonService(PersonService personService) {
    this.personService = personService;
  }
 

    return authorizationService;
  }
  public void setAuthorizationService(AuthorizationService authorizationService) {
    this.authorizationService = authorizationService;
  }
  public OrganizationService getOrganizationService() {
    return organizationService;
  }
  public UserService getUserService() {
    return userService;
  }
  public PrivilegeService getPrivilegeService() {
    return privilegeService;
  }
  public RoleService getRoleService() {
    return roleService;
  }
  public SecuredObjectService getSecuredObjectService() {
    return securedObjectService;
  }
  public void setSecuredObjectService(SecuredObjectService securedObjectService) {
    this.securedObjectService = securedObjectService;
  }
  public UserGroupService getUserGroupService() {
    return userGroupService;
  }
  public void setUserGroupService(UserGroupService userGroupService) {
    this.userGroupService = userGroupService;
  }
  public UserPersonService getUserPersonService() {
    return userPer
/**
 * 설문관리를 처리하는 Dao Class 구현
 * @author 공통서비스 장동한
 * @since 2009.03.20
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  장동한          최초 생성
 *
 * </pre>
 */ 
@Repository("qustnrManageDao")
public class QustnrManageDao extends EgovComAbstractDAO {
    /**
	 * 설문템플릿 목록을 조회한다. 
	 * @param qustnrManageVO - 설문관리 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
	public List selectQustnrTmplatManageList(QustnrManageVO qustnrManageVO) throws Exception{
		return (List)list("QustnrManage.selectQustnrTmplatManage", qustnrManageVO);
	}
    /**
	 * 설문관리 목록을 조회한다. 
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	public List selectQustnrManageList(ComDefaultVO searchVO) throws Exception{
		return (List)list("QustnrManage.selectQustnrManage", searchVO);
	}
    /**
	 * 설문관리를 상세조회(Model) 한다. 
	 * @param qustnrManageVO - 설문관리 정보 담김

	 * @return List
	 * @throws Exception
	 */
    public QustnrManageVO selectQustnrManageDetailModel(QustnrManageVO qustnrManageVO) throws Exception {    	
        return (QustnrManageVO) selectByPk("QustnrManage.selectQustnrManageDetailModel", qustnrManageVO);
    }
    
    /**
	 * 설문관리를(을) 상세조회 한다.
	 * @param qustnrManageVO - 설문관리 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
	public List selectQustnrManageDetail(QustnrManageVO qustnrManageVO) throws Exception{
		return (List)list("QustnrManage.selectQustnrManageDetail", qustnrManageVO);
	}
    /**
	 * 설문관리를(을) 목록 전체 건수를(을) 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return int
	 * @throws Exception
	 */
	public int selectQustnrManageListCnt(ComDefaultVO searchVO) throws Exception{
		return (Integer)getSqlMapClientTemplate().queryForObject("QustnrManage.selectQustnrManageCnt", searchVO);
	}
    /**
	 * 설문관리를(을) 등록한다.
	 * @param qqustnrManageVO - 설문관리 정보 담김 VO
	 * @throws Exception
	 */
	public void insertQustnrManage(Qustn
/*
 * Created On:  Nov 19, 2007 12:59:36 PM
 */
/**
 * <b>Title:</b><br>
 * <b>Description:</b><br>
 * @author raymond@thinkparity.com
 * @version 1.1.2.1
 */
public class Win32ProcessUtil implements ProcessUtil {
    /** A loaded flag. */
    private static boolean loaded;
    /** A library name. */
    private static final String PROCESS_UTIL_LIBNAME;
    static {
        PROCESS_UTIL_LIBNAME = "Win32ProcessUtil";
        loaded = false;
        try {
            System.loadLibrary(PROCESS_UTIL_LIBNAME);
            loaded = true;
        } catch (final Throwable t) {
            t.printStackTrace(System.err);
        }
    }
    /**
     * Instantiate a process exception for an unloaded library.
     * 
     * @return A <code>ProcessException</code>.
     */
    private static ProcessException newProcessExceptionLoad() {
        return new ProcessException("Process util native library was not loaded.");
    }
    /** A log4j wrapper. */
    private final Log4JWrapper logger;
    /**

     * Create Win32ProcessUtil.
     *
     */
    public Win32ProcessUtil() {
        super();
        this.logger = new Log4JWrapper(getClass());
    }
    /**
     * @see com.thinkparity.ophelia.support.util.process.ProcessUtil#terminate()
     *
     */
    public String getProcessId() throws ProcessException {
        if (loaded) {
            return String.valueOf(getCurrentProcessId());
        } else {
            throw newProcessExceptionLoad();
        }
    }
    /**
     * @see com.thinkparity.ophelia.support.util.process.ProcessUtil#getProcessList()
     * 
     */
    @Override
    public List<ProcessInfo> getProcessList() throws ProcessException {
        if (loaded) {
            if (createProcessSnapshot()) {
                try {
                    final List<ProcessInfo> processList = new ArrayList<ProcessInfo>();
                    int processSnapshotId, processSnapshotParentId;
                    String processSnapshotExeFile;
                    ProcessInfo pr

                    while (nextSnapshotProcess()) {
                        processSnapshotId = getProcessSnapshotId();
                        processSnapshotParentId = getProcessSnapshotParentId();
                        processSnapshotExeFile = getProcessSnapshotExeFile();
                        logger.logVariable("processSnapshotId", processSnapshotId);
                        logger.logVariable("processSnapshotParentId", processSnapshotParentId);
                        logger.logVariable("processSnapshotExeFile", processSnapshotExeFile);
                        process = new ProcessInfo();
                        process.setFile(processSnapshotExeFile);
                        process.setId(String.valueOf(processSnapshotId));
                        process.setParentId(String.valueOf(processSnapshotParentId));
                        processList.add(process);
                    }
                    return processList;
                } finally {
                    deletePro

                }
            } else {
                throw new ProcessException("Could not create process snapshot.");
            }
        } else {
            throw newProcessExceptionLoad();
        }
    }
    
    /**
     * @see com.thinkparity.ophelia.support.util.process.ProcessUtil#isLoaded()
     *
     */
    public Boolean isLoaded() {
        return Boolean.valueOf(loaded);
    }
    /**
     * @see com.thinkparity.ophelia.support.util.process.ProcessUtil#terminate(java.lang.String)
     *
     */
    @Override
    public Boolean terminate(final String id) throws ProcessException {
        if (loaded) {
            return Boolean.valueOf(terminate(Integer.valueOf(id).intValue()));
        } else {
            throw newProcessExceptionLoad();
        }
    }
    /**
     * Create a process snapshot.
     *
     */
    private native boolean createProcessSnapshot();
    /**
     * Delete the process snapshot.
     *
     */
    private native boolean deleteProcessSnapsho
public interface EgovDeptManageService {
	/**
	 * 부서를 관리하기 위해 등록된 부서목록을 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return List - 부서 목록
	 * 
	 * @param deptManageVO
	 */
	public List<DeptManageVO> selectDeptManageList(DeptManageVO deptManageVO) throws Exception;
	/**
	 * 부서목록 총 갯수를 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return int - 부서 카운트 수
	 * 
	 * @param deptManageVO
	 */
	public int selectDeptManageListTotCnt(DeptManageVO deptManageVO) throws Exception;
	/**
	 * 등록된 부서의 상세정보를 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return deptManageVO - 부서 Vo
	 * 
	 * @param deptManageVO
	 */
	public DeptManageVO selectDeptManage(DeptManageVO deptManageVO) throws Exception;
	/**
	 * 부서정보를 신규로 등록한다.
	 * @param deptManageVO - 부서 model
	 * 
	 * @param deptManageVO
	 */
	public void insertDeptManage(DeptManageVO deptManageVO) throws Exception;
	/**
	 * 기 등록된 부서정보를 수정한다.
	 * @param deptManageVO - 부서 model
	 * 
	 * @param deptManageVO
	 */
	public void updateDeptManage(DeptManageVO deptManageVO) th
/**
 * 그룹관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성 
 *
 * </pre>
 */
@Service("egovGroupManageService")
public class EgovGroupManageServiceImpl extends EgovAbstractServiceImpl implements EgovGroupManageService {
	@Resource(name="groupManageDAO")
    private GroupManageDAO groupManageDAO;
	/**
	 * 시스템사용 목적별 그룹 목록 조회
	 * @param groupManageVO GroupManageVO
	 * @return List<GroupManageVO>
	 * @exception Exception
	 */
	public List<GroupManageVO> selectGroupList(GroupManageVO groupManageVO) throws Exception {
		return groupManageDAO.selectGroupList(groupManageVO);
	}
	/**
	 * 검색조건에 따른 그룹정보를 조회
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupMan

		return groupManageDAO.selectGroup(groupManageVO);
	}
	/**
	 * 그룹 기본정보를 화면에서 입력하여 항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param groupManage GroupManage
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO insertGroup(GroupManage groupManage, GroupManageVO groupManageVO) throws Exception {
		groupManageDAO.insertGroup(groupManage);
		groupManageVO.setGroupId(groupManage.getGroupId());
		return groupManageDAO.selectGroup(groupManageVO);
	}
	/**
	 * 화면에 조회된 그룹의 기본정보를 수정하여 항목의 정합성을 체크하고 수정된 데이터를 데이터베이스에 반영
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void updateGroup(GroupManage groupManage) throws Exception {
		groupManageDAO.updateGroup(groupManage);
	}
	/**
	 * 불필요한 그룹정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void deleteGroup(GroupManage groupManage) throws Exception {
		groupManageDAO.deleteGroup(groupManage);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @par
public class AllManagementLoanUserViewController implements IViewController {
	/**
	 * 
	 * @author Yanet Crespo Diaz
	 * 
	 */
	private ILoanUserService manageLoanUser;
	private IPersonService personService;
	private IPenaltyService managePenalty;
	private ITransactionService manageTransaction;
	private IReservationService manageReservation;
	public IPenaltyService getManagePenalty() {
		return managePenalty;
	}
	public void setManagePenalty(IPenaltyService managePenalty) {
		this.managePenalty = managePenalty;
	}
	public ILoanUserService getManageLoanUser() {
		return manageLoanUser;
	}
	public void setManageLoanUser(ILoanUserService manageLoanUser) {
		this.manageLoanUser = manageLoanUser;
	}
	public IPersonService getPersonService() {
		return personService;
	}
	public void setPersonService(IPersonService personService) {
		this.personService = personService;
	}
	public ITransactionService getManageTransaction() {
		return manageTransaction;
	}
	public void setManageTransaction(ITr
/**
 * 롤관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성 
 *
 * </pre>
 */
@Service("egovRoleManageService")
public class EgovRoleManageServiceImpl extends EgovAbstractServiceImpl implements EgovRoleManageService {
	@Resource(name="roleManageDAO")
	public RoleManageDAO roleManageDAO;
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception {
		return roleManageDAO.selectRole(roleManageVO);
	}
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManag

		return roleManageDAO.selectRoleList(roleManageVO);
	}
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception {
		roleManageDAO.deleteRole(roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void updateRole(RoleManage roleManage) throws Exception {
		roleManageDAO.updateRole(roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 등록
	 * @param roleManage RoleManage
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO insertRole(RoleManage roleManage, RoleManageVO roleManageVO) throws Exception {
		roleManageDAO.insertRole(roleManage);	
		roleManageVO.setRoleCode(roleManage.getRoleCode());
		return roleManageDAO.selectRole(roleManageVO);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @param roleManageVO RoleManageVO
	 * @return int
	 * 
public class EntityService extends TemplateEntityService<Entity> implements
		Serializable {
	private static final long serialVersionUID = 1482098001518685537L;
	private AuthorService authorService;
	private UserService userService;
	private BookService bookService;
	private RoleService roleService;
	private CategoryService categoryService;
	private LoanBookService loanBookService;
	public UserService getUserService() {
		return this.userService;
	}
	public void setUserService(final UserService userService) {
		this.userService = userService;
	}
	public BookService getBookService() {
		return this.bookService;
	}
	public void setBookService(final BookService bookService) {
		this.bookService = bookService;
	}
	public RoleService getRoleService() {
		return this.roleService;
	}
	public void setRoleService(final RoleService roleService) {
		this.roleService = roleService;
	}
	public CategoryService getCategoryService() {
		return this.categoryService;
	}
	public void setCategoryService(f
public class ServiceFactory {
	private static UserService userService = new UserServiceImpl();
	private static OrderStatusService orderStatusService = new OrderStatusServiceImpl();
	private static OrderService ordersService = new OrderServiceImpl();
	private static OrderLineService orderLineService = new OrderLineServiceImpl();
	private static PayWayService paywayService = new PayWayServiceImpl();
	private static CategoryService categoryService = new CategoryServerImpl();
	private static ProductService productService = new ProductServiceImpl();
	private static ContactInfoService contactInfoService = new ContactInfoServiceImpl();
	public static ContactInfoService getContactInfoService() {
		return contactInfoService;
	}
	public static ProductService  getProductService() {
		return productService;
	}
	public static CategoryService getcategoryService() {
		return categoryService;
	}
	public static PayWayService getPaywayService() {
		return paywayService;
	}
	public static OrderLineServic
/*
 * Copyright (C) 2009 eXo Platform SAS.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 */
/**
 * Created by The eXo Platform SAS<br>
 *
 * The repository service  interface
 * 
 * @author <a href="mailto:geaz@users.sourceforge.net">Gennady Azarenkov</a>
 * @author <a href="mailto:benjamin.mestrallet@exoplatform.com">Benjamin 

 * @version $Id: RepositoryService.java 11907 2008-03-13 15:36:21Z ksm $
 * @LevelAPI Provisional
 */
public interface RepositoryService
   /**
    * Get default repository.
    * 
    * @return default repository
    * @throws RepositoryException
    * @throws RepositoryConfigurationException
    */
   ManageableRepository getDefaultRepository() throws RepositoryException, RepositoryConfigurationException;
   /**
    * Get repository by name.
    * 
    * @param name
    *          repository name
    * @return repository by name
    * @throws RepositoryException
    * @throws RepositoryConfigurationException
    */
   ManageableRepository getRepository(String name) throws RepositoryException, RepositoryConfigurationException;
   /**
    * Get current repository.
    * 
    * @return ManagableRepository
    * @throws RepositoryException
    */
   ManageableRepository getCurrentRepository() throws RepositoryException;
   /**
    * Set current repository name.
    * 
    * @param repos

    *          repository name
    * @throws RepositoryConfigurationException
    */
   void setCurrentRepositoryName(String repositoryName) throws RepositoryConfigurationException;
   /**
    * Get repository service configuration.
    * 
    * @return RepositoryServiceConfiguration
    */
   RepositoryServiceConfiguration getConfig();
   /**
    * Create new repository .
    * 
    * @param repositoryEntry
    *          repository entry
    * @throws RepositoryConfigurationException
    * @throws RepositoryException
    */
   void createRepository(RepositoryEntry repositoryEntry) throws RepositoryConfigurationException, RepositoryException;
   /**
    * Remove repository with name repositoryName.
    * 
    * @param repositoryName
    *          repository name
    * @throws RepositoryException
    */
   void removeRepository(String repositoryName) throws RepositoryException;
   /**
    * Remove repository with name repositoryName.
    *
    * @param repositoryName
    *          r
/**
 * FTP연동관리에 관한 ServiceImpl 클래스
 * @ftpIntrl 배치운영환경 김지완
 * @since 2012.07.16
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2012.07.16  김지완          최초 생성
 *
 * </pre>
 */
@Service("ftpIntrlManageService")
public class FtpIntrlManageServiceImpl extends AbstractServiceImpl implements FtpIntrlManageService {
    
	@Resource(name="ftpIntrlManageDAO")
    private FtpIntrlManageDAO ftpIntrlManageDAO;
    /**
	 *FtpIntrl 목록 조회
	 * @param ftpIntrlManageVO FtpIntrlManageVO
	 * @return List<FtpIntrlManageVO>
	 * @exception Exception
	 */
    public List<FtpIntrlManageVO> selectFtpIntrlList(FtpIntrlManageVO ftpIntrlManageVO) throws Exception {
        return ftpIntrlManageDAO.selectFtpIntrlList(ftpIntrlManageVO);
    }
    
	/**
	 * FtpIntrl 등록
	 * @param ftpIntrlManage FtpIntrlManage
	 * @exception Exception
	 */
    public void insertFtpIntrl(FtpIntrlManage ftpIntr

    	ftpIntrlManageDAO.insertFtpIntrl(ftpIntrlManage);
    }
    /**
	 * FtpIntrl 수정
	 * @param ftpIntrlManage FtpIntrlManage
	 * @exception Exception
	 */
    public void updateFtpIntrl(FtpIntrlManage ftpIntrlManage) throws Exception {
    	ftpIntrlManageDAO.updateFtpIntrl(ftpIntrlManage);
    }
    /**
	 * FtpIntrl 삭제
	 * @param ftpIntrlManage FtpIntrlManage
	 * @exception Exception
	 */
    public void deleteFtpIntrl(FtpIntrlManage ftpIntrlManage) throws Exception {
    	
    	if(ftpIntrlManage.getFtpIntrlckNo().equals("FTP_0000000000000000")){
    		return;
    	}else if(ftpIntrlManage.getFtpIntrlckNo().equals("FTP_1000000000000000")){
    		return;
    	}else{
    		ftpIntrlManageDAO.deleteFtpIntrl(ftpIntrlManage);
    	}
    	
    }
    /**
	 * FtpIntrl 조회
	 * @param ftpIntrlManageVO FtpIntrlManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectFtpIntrlListTotCnt(FtpIntrlManageVO ftpIntrlManageVO) throws Exception {
        return ftpIntrlManageDAO.selectFt
/**
 * Keeps a registry of the processes running on an Agent. Helps in killing
 * processes on error state or aborting the test.
 *
 * @author Himadri Singh
 */
public class ProcessRegistry {
	private static Map<String, ProcessThread> map = new ConcurrentHashMap<String, ProcessThread>();
	private static Logger log = Logger.getLogger(ProcessRegistry.class);
	private ProcessRegistry() {
	}
	private static class ProcessRegistryHolder {
		private static ProcessRegistry instance = new ProcessRegistry();
	}
	/**
	 * @return singleton instance
	 */
	public static ProcessRegistry getInstance() {
		return ProcessRegistryHolder.instance;
	}
	/**
	 * Register the process with the process name provided
	 *
	 * @param processName
	 * @param process
	 */
	void register(String processName, ProcessThread process) {
		map.put(processName, process);
	}
	/**
	 * Remove the process with the process name provided. Process is not killed
	 * for this call.
	 *
	 * @param processName
	 */
	void unregister(Str

		if (processName != null)
			map.remove(processName);
	}
	/**
	 * Kill the process and remove from registry
	 *
	 * @param processName
	 * @return true when process killed successfully
	 */
	public boolean killProcess(String processName) {
		if (processName != null) {
			ProcessThread pt = map.remove(processName);
			if (pt != null)
				pt.destroy();
			else {
				log.warn("Process thread not found for " + processName
						+ ". Not killing any process.");
				return Boolean.FALSE;
			}
			return Boolean.TRUE;
		}
		return Boolean.FALSE;
	}
	/**
	 * Kill and remove all the processes running on the agent
	 */
	public void killAllProcesses() {
		log.info(String.format("Killing %d process(es) on this agent.",
				map.size()));
		for (ProcessThread p : map.values())
			p.destroy();
	}
	/**
	 * Process is already registered
	 *
	 * @param processName
	 * @return true, if process is already present in the registry
	 */
	boolean isRegistered(String processName) {
		if (map.get(processName) 
/**
 * 國外研修差旅費用Facade
 * @author Eustace
 */
public class OvsaTrvlLrnExpFacade {
    
    /**使用者的 Service */
    private UserService userService;
    
    /**申請人資訊 Service */
    private ApplInfoService applInfoService;
    
    /**組織單位的 Service */
    private DepartmentService departmentService;
    
    /**行政費用申請單 Service */
    private ExpapplCService expapplCService;
    
    /**過渡付款明細 Service */
    private TransitPaymentDetailService transitPaymentDetailService;
    /**流程簽核歷程 Service */
    private FlowCheckstatusService flowCheckstatusService;
    
    /**國外研修差旅費用領款資料 Service */
    private OvsaExpDrawInfoService ovsaExpDrawInfoService;
    
    /**領款帳號類 Service */
    private DrawAccountTypeService drawAccountTypeService;
    
    /**地域別 Service */
    private ZoneTypeService zoneTypeService;
    
    /**駐在地點 Service */
    private StationService stationService;
    
    /**駐在地點之費用明細 Service */
    private StationExpDetailService stationExpDetailService;
    
    /**國外差旅費用項目 Se

    private OvsaTrvlLrnExpItemService ovsaTrvlLrnExpItemService;
    
    /**會計科目的 Service */
    private AccTitleService accTitleService;
    
    /**出差事由 Service */
    private BizMatterService bizMatterService;
    
    /**分錄群組 Service*/
    private EntryGroupService entryGroupService;
    
    /**分錄 Service */
    private EntryService entryService;
    
    /**分錄借貸別 Service*/
    private EntryTypeService entryTypeService;
    
    /**成本單位預設對照表 Service*/
    private CostUnitDefaultService costUnitDefaultService;
    
    /**所得人證號類別 Service */
    private IncomeIdTypeService incomeIdTypeService;
    
    /**所得人資料 Service */
    private IncomeUserService incomeUserService;
    /** 費用年月 Service */
    private ExpYearsService expYearsService;
    
    /**所得人資料 Service */
    public IncomeUserService getIncomeUserService() {
		return incomeUserService;
	}
    /**所得人資料 Service */
	public void setIncomeUserService(IncomeUserService incomeUserService) {
		this.incomeUserService = incomeUse

	}
	/**使用者的 Service */
    public UserService getUserService() {
        return userService;
    }
    /**使用者的 Service */
    public void setUserService(UserService userService) {
        this.userService = userService;
    }
    /**申請人資訊 Service */
    public ApplInfoService getApplInfoService() {
        return applInfoService;
    }
    /**申請人資訊 Service */
    public void setApplInfoService(ApplInfoService applInfoService) {
        this.applInfoService = applInfoService;
    }
    /**組織單位的 Service */
    public DepartmentService getDepartmentService() {
        return departmentService;
    }
    /**組織單位的 Service */
    public void setDepartmentService(DepartmentService departmentService) {
        this.departmentService = departmentService;
    }
    /**行政費用申請單 Service */
    public ExpapplCService getExpapplCService() {
        return expapplCService;
    }
    /**行政費用申請單 Service */
    public void setExpapplCService(ExpapplCService expapplCService) {
        this.expapplCServic

    }
    /**過渡付款明細 Service */
    public TransitPaymentDetailService getTransitPaymentDetailService() {
        return transitPaymentDetailService;
    }
    /**過渡付款明細 Service */
    public void setTransitPaymentDetailService(TransitPaymentDetailService transitPaymentDetailService) {
        this.transitPaymentDetailService = transitPaymentDetailService;
    }
    /**流程簽核歷程 Service */
    public FlowCheckstatusService getFlowCheckstatusService() {
        return flowCheckstatusService;
    }
    /**流程簽核歷程 Service */
    public void setFlowCheckstatusService(FlowCheckstatusService flowCheckstatusService) {
        this.flowCheckstatusService = flowCheckstatusService;
    }
    /**國外研修差旅費用領款資料 Service */
    public OvsaExpDrawInfoService getOvsaExpDrawInfoService() {
        return ovsaExpDrawInfoService;
    }
    /**國外研修差旅費用領款資料 Service */
    public void setOvsaExpDrawInfoService(OvsaExpDrawInfoService ovsaExpDrawInfoService) {
        this.ovsaExpDrawInfoService = ovsaExpDrawInfoSe

    }
    /**領款帳號類 Service */
    public DrawAccountTypeService getDrawAccountTypeService() {
        return drawAccountTypeService;
    }
    /**領款帳號類 Service */
    public void setDrawAccountTypeService(DrawAccountTypeService drawAccountTypeService) {
        this.drawAccountTypeService = drawAccountTypeService;
    }
    /**地域別 Service */
    public ZoneTypeService getZoneTypeService() {
        return zoneTypeService;
    }
    /**地域別 Service */
    public void setZoneTypeService(ZoneTypeService zoneTypeService) {
        this.zoneTypeService = zoneTypeService;
    }
    /**駐在地點 Service */
    public StationService getStationService() {
        return stationService;
    }
    /**駐在地點 Service */
    public void setStationService(StationService stationService) {
        this.stationService = stationService;
    }
    /**駐在地點之費用明細 Service */
    public StationExpDetailService getStationExpDetailService() {
        return stationExpDetailService;
    }
    /**駐在地點之費用明細 Service */
   

        this.stationExpDetailService = stationExpDetailService;
    }
    /**國外差旅費用項目 Service */
    public OvsaTrvlLrnExpItemService getOvsaTrvlLrnExpItemService() {
        return ovsaTrvlLrnExpItemService;
    }
    /**國外差旅費用項目 Service */
    public void setOvsaTrvlLrnExpItemService(OvsaTrvlLrnExpItemService ovsaTrvlLrnExpItemService) {
        this.ovsaTrvlLrnExpItemService = ovsaTrvlLrnExpItemService;
    }
    /**會計科目的 Service */
    public AccTitleService getAccTitleService() {
        return accTitleService;
    }
    /**會計科目的 Service */
    public void setAccTitleService(AccTitleService accTitleService) {
        this.accTitleService = accTitleService;
    }
    /**出差事由 Service */
    public BizMatterService getBizMatterService() {
        return bizMatterService;
    }
    /**出差事由 Service */
    public void setBizMatterService(BizMatterService bizMatterService) {
        this.bizMatterService = bizMatterService;
    }
    /**分錄群組 Service*/
    public EntryGroupService getEnt

        return entryGroupService;
    }
    /**分錄群組 Service*/
    public void setEntryGroupService(EntryGroupService entryGroupService) {
        this.entryGroupService = entryGroupService;
    }
    /**分錄 Service */
    public EntryService getEntryService() {
        return entryService;
    }
    /**分錄 Service */
    public void setEntryService(EntryService entryService) {
        this.entryService = entryService;
    }
    /**分錄借貸別 Service*/
    public EntryTypeService getEntryTypeService() {
        return entryTypeService;
    }
    /**分錄借貸別 Service*/
    public void setEntryTypeService(EntryTypeService entryTypeService) {
        this.entryTypeService = entryTypeService;
    }
    /**成本單位預設對照表 Service*/
    public CostUnitDefaultService getCostUnitDefaultService() {
        return costUnitDefaultService;
    }
    /**成本單位預設對照表 Service*/
    public void setCostUnitDefaultService(CostUnitDefaultService costUnitDefaultService) {
        this.costUnitDefaultService = costUnitDefault
/**********************************************************************************
 * $URL$
 * $Id$
 **********************************************************************************
 *
 * Copyright (c) 2003, 2004, 2005, 2007, 2008 The Sakai Foundation
 *
 * Licensed under the Educational Community License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 **********************************************************************************/
public abstract class RepositoryManager
implements org.osid.repository.RepositoryManager
    public org.osid.OsidContext getOsidContex

    throws org.osid.repository.RepositoryException
    {
	 		throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
   }
    public void assignOsidContext(org.osid.OsidContext context)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void assignConfiguration(java.util.Properties configuration)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Repository createRepository(String displayName
                                                         , String description
                                                         , org.osid.shared.Type repositoryType)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED

    }
    public void deleteRepository(org.osid.shared.Id repositoryId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RepositoryIterator getRepositories()
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RepositoryIterator getRepositoriesByType(org.osid.shared.Type repositoryType)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Repository getRepository(org.osid.shared.Id repositoryId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset getA

    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset getAssetByDate(org.osid.shared.Id assetId
                                                  , long date)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.LongValueIterator getAssetDates(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.AssetIterator getAssetsBySearch(org.osid.repository.Repository[] repositories
                                                             , java.io.Serializable searchCriteria
                                                             , org.osid.shared.Type searchType
  
/**
 * @author rap
 */
public class TransactionAttributeTest {
	private ProcessDao processDao;
	private UserDao userDao;
	@Before
	public void init() throws NamingException {
		Context context = ContextUtils.createContext();
		processDao = ContextUtils.lookupProcessDao(context);
		userDao = ContextUtils.lookupUserDao(context);
	}
	@Test
	public void saveProcess() throws SystemException, NotSupportedException {
		Process process = new Process();
		process.setValue("Calibrate Fuse");
		processDao.save(process);
		Process savedProcess = processDao.findById(process.getId());
		Assert.assertNotNull(savedProcess);
		Assert.assertNotNull(savedProcess.getId());
		Assert.assertEquals(process.getId(), savedProcess.getId());
	}
	@Test
	public void addProcessAttributeWithCheck() {
		Process process = new Process();
		process.setValue("Calibrate Fuse");
		processDao.save(process);
		ProcessAttribute processAttribute1 = new ProcessAttribute("Fuse depth", "14", 1);
		ProcessAttribute processAttribute

		ProcessAttribute processAttribute3 = new ProcessAttribute("Fuse width", "3", 1);
		Integer processId = process.getId();
		processDao.addProcessAttributeWithCheck(process, processAttribute1);
		processDao.addProcessAttributeWithCheck(process, processAttribute2);
		processDao.addProcessAttributeWithCheck(process, processAttribute3);
		Process savedProcess = processDao.findById(processId);
		Assert.assertEquals(3, savedProcess.getProcessAttributes().size());
	}
	@Test(expected = EJBException.class)
	public void addProcessAttributeWithoutCheck() {
		Process process = new Process();
		process.setValue("Calibrate Fuse");
		processDao.save(process);
		ProcessAttribute processAttribute1 = new ProcessAttribute("Fuse depth", "14", 1);
		ProcessAttribute processAttribute2 = new ProcessAttribute("Fuse height", "5", 1);
		processDao.addProcessAttributeWithoutCheck(process, processAttribute1);
		processDao.addProcessAttributeWithoutCheck(process, processAttribute2);
	}
	@Test
	public void testMap
/**
 * 일반회원관리에 관한비지니스클래스를 정의한다.
 * @author 공통서비스 개발팀 조재영
 * @since 2009.04.10
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.04.10  조재영          최초 생성
 *
 * </pre>
 */
@Service("mberManageService")
public class EgovMberManageServiceImpl extends AbstractServiceImpl implements EgovMberManageService {
	/** userManageDAO */
	@Resource(name="userManageDAO")
	private UserManageDAO userManageDAO;
	/** mberManageDAO */
	@Resource(name="mberManageDAO")
	private MberManageDAO mberManageDAO;
	/** entrprsManageDAO */
	@Resource(name="entrprsManageDAO")
	private EntrprsManageDAO entrprsManageDAO;
	/** egovUsrCnfrmIdGnrService */
	@Resource(name="egovUsrCnfrmIdGnrService")
	private EgovIdGnrService idgenService;
	/**
	 * 사용자의 기본정보를 화면에서 입력하여 항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param mberManageVO 일반회원 등록정보
	 * @return result 등록결과
	 * @throws Exception
	 */
	public String inse

		String uniqId = idgenService.getNextStringId();
		mberManageVO.setUniqId(uniqId);
		String pass = EgovFileScrty.encryptPassword(mberManageVO.getPassword());
		mberManageVO.setPassword(pass);
		
		String result = mberManageDAO.insertMber(mberManageVO);
		return result;
	}
	/**
	 * 기 등록된 사용자 중 검색조건에 맞는 일반회원의 정보를 데이터베이스에서 읽어와 화면에 출력
	 * @param uniqId 상세조회대상 일반회원아이디
	 * @return mberManageVO 일반회원상세정보
	 * @throws Exception
	 */
	public MberManageVO selectMber(String uniqId) {
		MberManageVO mberManageVO = mberManageDAO.selectMber(uniqId);		
		return mberManageVO;
	}
	/**
	 * 기 등록된 회원 중 검색조건에 맞는 회원들의 정보를 데이터베이스에서 읽어와 화면에 출력
	 * @param userSearchVO 검색조건
	 * @return List<MberManageVO> 일반회원목록정보
	 */
	public List<MberManageVO> selectMberList(UserDefaultVO userSearchVO) {
		return mberManageDAO.selectMberList(userSearchVO);
	}
    /**
     * 일반회원 총 갯수를 조회한다.
     * @param userSearchVO 검색조건
     * @return 일반회원총갯수(int) 
     */
    public int selectMberListTotCnt(UserDefaultVO userSearchVO) {
   

    }
	/**
	 * 화면에 조회된 일반회원의 기본정보를 수정하여 항목의 정합성을 체크하고 수정된 데이터를 데이터베이스에 반영
	 * @param mberManageVO 일반회원수정정보
	 * @throws Exception
	 */
	public void updateMber(MberManageVO mberManageVO) throws Exception {
		String pass = EgovFileScrty.encryptPassword(mberManageVO.getPassword());
		mberManageVO.setPassword(pass);
		mberManageDAO.updateMber(mberManageVO);
	}
	/**
	 * 화면에 조회된 사용자의 정보를 데이터베이스에서 삭제
	 * @param checkedIdForDel 삭제대상 일반회원아이디
	 * @throws Exception
	 */
	public void deleteMber(String checkedIdForDel)  {
		String [] delId = checkedIdForDel.split(",");
		for (int i=0; i<delId.length ; i++){
			String [] id = delId[i].split(":");
			if (id[0].equals("USR03")){
				userManageDAO.deleteUser(id[1]);				
			}else if(id[0].equals("USR01")){
				mberManageDAO.deleteMber(id[1]);
			}else if(id[0].equals("USR02")){
				entrprsManageDAO.deleteEntrprsmber(id[1]);
			}
		}
	}
	/**
	 * 일반회원 약관확인
	 * @param stplatId 일반회원약관아이디
	 * @return 일반회원약관정보(List)
	 * @throws Exception
	 */
	public List sel
public class DynamicRepository {
	private AdvisorsRepository advisorRepository;
	private UsersAdvisorsRepository userAdvisorsRepository;
	private AdvisorsRepository advisorRepositoryDISABLED;
	private UsersAdvisorsRepository userAdvisorsRepositoryDISABLED; 
	public DynamicRepository() {
		advisorRepository = new AdvisorsRepository();
		userAdvisorsRepository = new UsersAdvisorsRepository();
		
		advisorRepositoryDISABLED = new AdvisorsRepository();
		userAdvisorsRepositoryDISABLED = new UsersAdvisorsRepository();
	}
	public DynamicRepository(AdvisorsRepository advisorRepository, UsersAdvisorsRepository userAdvisorsRepository, AdvisorsRepository advisorRepositoryDISABLED, UsersAdvisorsRepository userAdvisorsRepositoryDISABLED) {
		this.advisorRepository = advisorRepository;
		this.userAdvisorsRepository = userAdvisorsRepository;
		
		this.advisorRepositoryDISABLED = advisorRepositoryDISABLED;
		this.userAdvisorsRepositoryDISABLED = userAdvisorsRepositoryDISABLED;
	}
	public AdvisorsRepo
/**
 * 개요
 * - 회의실관리에 대한 Service Interface를 정의한다.
 * 
 * 상세내용
 * - 회의실관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 회의실관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
public interface EgovMtgPlaceManageService {
	/**
	 * 회의실관리 정보를 관리하기 위해 등록된 회의실 목록을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return List - 회의실관리 목록
	 */
	public List<MtgPlaceManageVO> selectMtgPlaceManageList(MtgPlaceManageVO mtgPlaceManageVO) throws Exception;
	/**
	 * 회의실관리 목록 총 갯수를 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return int - 회의실관리 카운트 수
	 */
	public int selectMtgPlaceManageListTotCnt(MtgPlaceManageVO mtgPlaceManageVO) throws Exception ;
	/**
	 * 등록된 회의실관리의 상세정보를 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	public MtgPlaceManage selectMtgPlaceManage(MtgPlaceManageVO mtgPlaceManageVO) throws Exception;
	/**
	 * 회의실관리 정보를 신규로 등록한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void insertMtgPlaceMa

	/**
	 * 기 등록된 회의실관리 정보를 수정한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void updtMtgPlaceManage(MtgPlaceManage mtgPlaceManage, String checkedMtgPlacesForInsert, MtgPlaceManageVO mtgPlaceManageVO) throws Exception;
	/**
	 * 기 등록된 회의실관리 정보를 삭제한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void deleteMtgPlaceManage(MtgPlaceManage mtgPlaceManage) throws Exception;
	/**
	 * 회의실관리가 특정화면에 반영된 결과를 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	/******** 회의실 예약 관리 *************/
	/**
	 * 회의실 예약정보를 관리하기 위해 등록된 회의실 예약 목록을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return List - 회의실관리 목록
	 */
	public List<MtgPlaceManageVO> selectMtgPlaceResveManageList(MtgPlaceManageVO mtgPlaceManageVO) throws Exception;
	/**
	 * 회의실예약 신청화면을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	public MtgPlaceManageVO selectMtgPlaceResve(MtgPlaceManageVO mtgPlaceManageVO) throws Exception;
	/**
	 * 등록된 회의

	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	public MtgPlaceManageVO selectMtgPlaceResveDetail(MtgPlaceManageVO mtgPlaceManageVO) throws Exception;
	/**
	 * 회의실 예약정보를 신규로 등록한다.
	 * @param mtgPlaceManage - 회의실예약 model
	 */
	public void insertMtgPlaceResve(MtgPlaceResve mtgPlaceResve) throws Exception;
	/**
	 * 기 등록된 회의실 예약정보를 수정한다.
	 * @param mtgPlaceManage - 회의실예약 model
	 */
	public void updtMtgPlaceResve(MtgPlaceResve mtgPlaceResve) throws Exception;
	/**
	 * 기 등록된 회의실 예약정보를 삭제한다.
	 * @param mtgPlaceManage - 회의실예약 model
	 */
	public void deleteMtgPlaceResve(MtgPlaceResve mtgPlaceResve) throws Exception;
	/**
	 * 회의실 중복여부 체크.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return int - 중복건수
	 */
	public int mtgPlaceResveDplactCeck(MtgPlaceManageVO mtgPlaceManageVO) throws Exception;
	/******** 회의실 비품 관리 *************/
	/**
	 * 비품정보 목록을 조회한다.
	 * @param fxtrsManageVO - 비품관리 VO
	 * @return List - 비품관리 목록
	 */
	public List<MtgPlaceFxtrsVO> selectFxtrsM
public abstract class AbstractCalculationService<T> implements CalculationService {
    protected final Logger logger = LoggerFactory.getLogger(this.getClass().getName());
    @Autowired
    CalculationServiceRegistry calculationServiceRegistry;
    public CalculationServiceRegistry getCalculationServiceRegistry() {
        return calculationServiceRegistry;
    }
    public void setCalculationServiceRegistry(CalculationServiceRegistry calculationServiceRegistry) {
        this.calculationServiceRegistry = calculationServiceRegistry;
    }
    @Override
    public void calculationDone() {
        ServiceState.removeServiceState(getServiceIdentifier());
    }
    @SuppressWarnings("unchecked")
    protected T getServiceState() {
        T serviceState = (T) ServiceState.getServiceState(getServiceIdentifier());
        if (serviceState == null) {
            synchronized (this) {
                serviceState = (T) ServiceState.getServiceState(getServiceIdentifier());
                if (
public class ServiceFactory {
	/**
	 * 取得UserService接口的实例
	 * 
	 * @return UserService 实例
	 */
	public static UserService getUserServiceInstance() {
		return new UserServiceImpl();
	}
	/**
	 * 取得CategoryService接口的实例
	 * 
	 * @return
	 */
	public static CategoryService getCategoryServiceInstance() {
		return new CategoryServiceImpl();
	}
	/**
	 * 取得ItemService接口实例
	 * 
	 * @return
	 */
	public static ItemService getItemServiceInstance() {
		return new ItemServiceImpl();
	}
	/**
	 * 取得ProductService接口实例
	 * 
	 * @return
	 */
	public static ProductService getProductServiceInstance() {
		return new ProductServiceImpl();
	}
	/**
	 * 取得CartService接口实例
	 * 
	 * @return
	 */
	public static CartService getCartServiceInstance() {
		return new CartServiceImpl();
	}
	/**
	 * 取得OrderService接口实例
	 * 
	 * @return
	 */
	public static MyOrderService getOrderServiceInstance() {
		return new MyOrderServiceImpl();
	}
	/**
	 * 取得ContactService接口实例
	 * 
	 * @return
	 */
	public static ContactService getCont
/**
 * Job지식관리에 대한 DAO 클래스
 * @jobKnwldg 배치운영환경 김지완
 * @since 2012.07.16
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2012.07.16  김지완          최초 생성
 *
 * </pre>
 */
@Repository("jobKnwldgManageDAO")
public class JobKnwldgManageDAO extends EgovAbstractDAO {
	 /**
	 * 모든 JobKnwldg 조회
	 * @param jobKnwldgManageVO JobKnwldgManageVO
	 * @return List<JobKnwldgManageVO>
	 * @exception Exception
	 */
    @SuppressWarnings("unchecked")
	public List<JobKnwldgManageVO> selectJobKnwldgList(JobKnwldgManageVO jobKnwldgManageVO) throws Exception {
        return (List<JobKnwldgManageVO>) list("jobKnwldgManageDAO.selectJobKnwldgList", jobKnwldgManageVO);
    }
	/**
	 * JobKnwldg 등록
	 * @param jobKnwldgManage JobKnwldgManage
	 * @exception Exception
	 */
    public void insertJobKnwldg(JobKnwldgManage jobKnwldgManage) throws Exception {
        insert("jobKnwldgManageDAO.inser

    }
    /**
	 * JobKnwldg 수정
	 * @param jobKnwldgManage JobKnwldgManage
	 * @exception Exception
	 */
    public void updateJobKnwldg(JobKnwldgManage jobKnwldgManage) throws Exception {
        update("jobKnwldgManageDAO.updateJobKnwldg", jobKnwldgManage);
    }
    /**
	 * JobKnwldg 삭제
	 * @param jobKnwldgManage JobKnwldgManage
	 * @exception Exception
	 */
    public void deleteJobKnwldg(JobKnwldgManage jobKnwldgManage) throws Exception {
        delete("jobKnwldgManageDAO.deleteJobKnwldg", jobKnwldgManage);
    }
    /**
	 * JobKnwldg 총 갯수 조회
	 * @param jobKnwldgManageVO JobKnwldgManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectJobKnwldgListTotCnt(JobKnwldgManageVO jobKnwldgManageVO)  throws Exception {
        return (Integer)select("jobKnwldgManageDAO.selectJobKnwldgListTotCnt", jobKnwldgManageVO);
    }
    /**
	 * JobKnwldg 조회
	 * @param jobKnwldgManageVO JobKnwldgManageVO
	 * @return JobKnwldgManageVO
	 * @exception Exception
	 */
    public JobKnw
/**
 * @dateCreate 25/08/2015
 * @authorBy PhanAnh
 */
public class ConfigConnection {
    
    private static ConfigConnection instance;
    private final RegionalPriceModelManage regionalPriceModelManage;
    private final ProfileLandModelManage profileLandModelManage;
    private final PaymentModeModelManage paymentModeModelManage;
    private final AccountModelManage accountModelManage;
    private final PersonModelManage personModelManage;
    private final InvoiceTransactionModelManage invoiceTransactionModelManage;
    private final BuyLandModelManage buyLandModelManage;
    
    public static String PERSISTENCE_UNIT_NAME = "HousingPU";
    public ConfigConnection() {
        System.out.println("--------------------------------------");
        System.out.println("................LOADING...............");
        EntityManagerFactory emf = Persistence.createEntityManagerFactory(PERSISTENCE_UNIT_NAME);
        profileLandModelManage = new ProfileLandModelManage(emf);
        regi

        paymentModeModelManage = new PaymentModeModelManage(emf);
        accountModelManage = new AccountModelManage(emf);
        personModelManage = new PersonModelManage(emf);
        invoiceTransactionModelManage = new InvoiceTransactionModelManage(emf);
        buyLandModelManage = new BuyLandModelManage(emf);
        System.out.println(".......MANAGE MODEL OPEN SUCSESS......");
        System.out.println("--------------------------------------");
    }
    
    public static ConfigConnection getInstance(){
        if(instance == null)
            instance = new ConfigConnection();
        return instance;
    }
    
    public ProfileLandModelManage getProfileLandModelManage(){
        return profileLandModelManage;
    }
    public RegionalPriceModelManage getRegionalPriceModelManage() {
        return regionalPriceModelManage;
    }
    public PaymentModeModelManage getPaymentModeModelManage() {
        return paymentModeModelManage;
    }
    public AccountModelManage getAcc
/**
 * 그룹관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Repository("groupManageDAO")
public class GroupManageDAO extends EgovComAbstractDAO {
	/**
	 * 검색조건에 따른 그룹정보를 조회
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO selectGroup(GroupManageVO groupManageVO) throws Exception {
		return (GroupManageVO) select("groupManageDAO.selectGroup", groupManageVO);
	}
	/**
	 * 시스템사용 목적별 그룹 목록 조회
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<GroupManageVO> selectGroupList(GroupManageVO groupManageVO) throws Exception {
		return (List<GroupManageVO>) list("groupManageDAO.selectGroupList", groupManageVO)

	}
	/**
	 * 그룹 기본정보를 화면에서 입력하여 항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void insertGroup(GroupManage groupManage) throws Exception {
		insert("groupManageDAO.insertGroup", groupManage);
	}
	/**
	 * 화면에 조회된 그룹의 기본정보를 수정하여 항목의 정합성을 체크하고 수정된 데이터를 데이터베이스에 반영
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void updateGroup(GroupManage groupManage) throws Exception {
		update("groupManageDAO.updateGroup", groupManage);
	}
	/**
	 * 불필요한 그룹정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void deleteGroup(GroupManage groupManage) throws Exception {
		delete("groupManageDAO.deleteGroup", groupManage);
	}
    /**
	 * 롤목록 총 갯수를 조회한다.
	 * @param groupManageVO GroupManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectGroupListTotCnt(GroupManageVO groupManageVO) throws Exception {
        return (Integer)select("groupManageDAO.selectGroupListTotCnt
/**
 * 
 ******************************************************************************
 * Modification log of MainController.java                                            
 ******************************************************************************
 * Date     User         Description                                           
 * -------- ------------ ------------------------------------------------------
 * 05-12-17 romerori     Initial creation.
 ******************************************************************************
 *
 */
public class MainController {
	private MainModel mainModel;
	private MainView mainView;
	public void addModel(MainModel mainModel) {
		this.mainModel = mainModel;
	}
	public void addView(MainView mainView) {
		this.mainView = mainView;
	}
	public void init() {
		mainModel.init();
		mainView.showView();
	}
	public void manageSubcategory() {
		try {
			/*
			 * Create Model & View
			 */
			ManageSubcategoryModel manageSubcategoryModel = new ManageSubca

			ManageSubcategoryView manageSubcategoryView = new ManageSubcategoryView(mainView, true);
			/*
			 * Hardwire Model & View
			 */
			manageSubcategoryModel.addObserver(manageSubcategoryView);
			/*
			 * Create Controller and fill it with Model & View
			 */
			ManageSubcategoryController manageSubcategoryController = new ManageSubcategoryController();
			manageSubcategoryController.addModel(manageSubcategoryModel);
			manageSubcategoryController.addView(manageSubcategoryView);
			/*
			 * Add Controller to the View
			 */
			manageSubcategoryView.addController(manageSubcategoryController);
			manageSubcategoryView.init();
		}
		catch(HibernateException ex) {
			if(Constants.TESTING_MODE)
				ex.printStackTrace();
		}
	}
	public void managePerson() {
		try {
			ManagePersonModel managePersonModel = new ManagePersonModel();
			ManagePersonView managePersonView = new ManagePersonView(mainView, true);
			managePersonModel.addObserver(managePersonView);
			
			ManagePersonController ma

			managePersonController.addModel(managePersonModel);
			managePersonController.addView(managePersonView);
			
			managePersonView.addController(managePersonController);
			managePersonView.init();
		}
		catch(HibernateException ex) {
			if(Constants.TESTING_MODE)
				ex.printStackTrace();
		}
	}
	public void manageVehicle() {
		try {
			ManageVehicleModel manageVehicleModel = new ManageVehicleModel();
			ManageVehicleView manageVehicleView = new ManageVehicleView(mainView, true);
			manageVehicleModel.addObserver(manageVehicleView);
			
			ManageVehicleController manageVehicleController = new ManageVehicleController();
			manageVehicleController.addModel(manageVehicleModel);
			manageVehicleController.addView(manageVehicleView);
			
			manageVehicleView.addController(manageVehicleController);
			manageVehicleView.init();
		}
		catch(HibernateException ex) {
			if(Constants.TESTING_MODE)
				ex.printStackTrace();
		}
	}
	public void manageAccountVehicle() {
		try {
			ManageAccountVe

			ManageAccountVehicleView manageAccountVehicleView = new ManageAccountVehicleView(mainView, true);
			manageAccountVehicleModel.addObserver(manageAccountVehicleView);
			
			ManageAccountVehicleController manageAccountVehicleController = new ManageAccountVehicleController();
			manageAccountVehicleController.addModel(manageAccountVehicleModel);
			manageAccountVehicleController.addView(manageAccountVehicleView);
			
			manageAccountVehicleView.addController(manageAccountVehicleController);
			manageAccountVehicleView.init();
		}
		catch(HibernateException ex) {
			if(Constants.TESTING_MODE)
				ex.printStackTrace();
		}
	}
	public void manageAccount() {
		try {
			ManageAccountModel manageAccountModel = new ManageAccountModel();
			ManageAccountView manageAccountView = new ManageAccountView(mainView, true);
			manageAccountModel.addObserver(manageAccountView);
			
			ManageAccountController manageAccountController = new ManageAccountController();
			manageAccountController.addModel(
public class ServiceFactory
	private static PersistenceService persistenceService;
	private static PresentationService presentationService;
	private static DomainService domainService;
	private static AppConfig appConfig;
	public static PersistenceService getPersistenceService()
	{
		return persistenceService;
	}
	public static void setPersistenceService(PersistenceService persistenceService)
	{
		ServiceFactory.persistenceService = persistenceService;
	}
	public static PresentationService getPresentationService()
	{
		return presentationService;
	}
	public static void setPresentationService(PresentationService presentationService)
	{
		ServiceFactory.presentationService = presentationService;
	}
	public static DomainService getDomainService()
	{
		return domainService;
	}
	public static void setDomainService(DomainService domainService)
	{
		ServiceFactory.domainService = domainService;
	}
	public static AppConfig getAppConfig()
	{
		return appConfig;
	}
	public static void setAppConf
/**
 * The ServiceProcessRelatedException is thrown when an exception occurs, that
 * is related to a special ServiceProcess.
 */
public class ServiceProcessRelatedException extends ProcessManagerException implements IsServiceProcessRelated {
	/**
	 * UID for serialization
	 */
	private static final long serialVersionUID = -6443651068622451794L;
	/**
	 * Stores the ServiceProcess that is related to the exception.
	 */
	private ServiceProcess serviceProcess;
	/**
	 * Creates a new ServiceProcessRelatedException with a message that contains
	 * special information about this exception and the ServiceProcess that is
	 * related to it.
	 * 
	 * @param message
	 *            The special information.
	 * @param process
	 *            The related ServiceProcess.
	 */
	public ServiceProcessRelatedException(String message, ServiceProcess process) {
		super(message);
		setServiceProcess(process);
	}
	@Override
	public ServiceProcess getServiceProcess() {
		return serviceProcess;
	}
	/**
	 * Sets
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 * TEMPLATE:    SpringServiceImpl.vsl in andromda-spring cartridge
 * MODEL CLASS: AndroMDAModel::JR Appointment Service::com.systemsjr.jrappointment::service::service::ServiceService
 * STEREOTYPE:  Service
 */
/**
 * @see com.systemsjr.jrappointment.service.service.ServiceService
 */
public class ServiceServiceImpl
    extends ServiceServiceBase
    /**
     * @see com.systemsjr.jrappointment.service.service.ServiceService#delete(ServiceVO)
     */
    protected  void handleDelete(ServiceVO serviceVO)
        throws Exception
    {
    	if(serviceVO.getId() != null){
    		getServiceDao().remove(serviceVO.getId());
    	}
    }
    /**
     * @see com.systemsjr.jrappointment.service.service.ServiceService#save(ServiceVO)
     */
    protected  ServiceVO handleSave(ServiceVO serviceVO)
        throws Exception
    {
    	Service service = getServiceDao().serviceVOToEnt
/**
 * @author Devos Inc.
 * Clase que maneja todos los servicios, obteniendo la instancia solicitada.
 * 
 */
public class BusinessDelegate {
	private BusinessDelegate() {
		
	}
	public static UsuarioService getUsuarioService(){
		return new UsuarioServiceImpl();
	}
	public static PuntoInteresService getPuntoInteresService(){
		return new PuntoInteresServiceImpl();
	}
	public static GeocercaService getGeocercaService(){
		return new GeocercaServiceImpl();
	}
	public static CategoriaService getCategoriaService(){
		return new CategoriaServiceImpl();
	}
	public static HandsetService getHandsetService(){
		return new HandsetServiceImpl();
	}
	public static GrupoService getGrupoService(){
		return new GrupoServiceImpl();
	}
	public static TrackingService getTrackingService(){
		return new TrackingServiceImpl();
	}
	public static CuentaService getCuentaService(){
		return new CuentaServiceImpl();
	}
	public static AuditoriaService getAuditoriaService(){
		return new AuditoriaServiceImpl();
/*
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
public class ManagedAccessTokenProcessTemplate<P> implements ProcessTemplate<P, OAuth2Adapter>
    private final ProcessInterceptor<P, OAuth2Adapter> processInterceptor;
    public ManagedAccessTokenProcessTemplate(OAuth2Manager<OAuth2Adapter> oauthManager,
                                             MuleContext muleContext)
    {
        ProcessInterceptor<P, OAuth2Adapter> processCallbackProcessInterceptor = new ProcessCallbackProcessInterceptor<P, OAuth2Adapter>();
        ProcessInterceptor<P, OAuth2Adapter> refreshTokenProcessInterceptor = (ProcessInterceptor<P, OAuth2Adapter>) new RefreshTokenProcessInterceptor<P>(
            processCallbackProcessInterceptor, muleContext);
        ProcessInterceptor<P, OAuth2Adapter> managedAccessTokenProcessInterceptor = new ManagedAccessTokenProcessInterceptor<P>(
            refreshTokenProcessInterceptor, oauthManager);
        processIn
/**
* @Author: KingZhao
*          Kylin Soong
*/
@Service("AutoManageManager")
public class AutoManageManagerImpl extends ManagerImpl implements AutoManageManager {
    private static Log log = LogFactory.getLog(AutoManageManagerImpl.class);
    
    @Autowired
    private AutoManageDAO dao;
    public void setAutoManageDAO(AutoManageDAO dao) {
        this.dao = dao;
        super.setDao(dao);
    }
    public AutoManage initialize(AutoManage obj) {
        if (obj != null && !Hibernate.isInitialized(obj)) {
            obj = dao.getAutoManage(obj.getId());
        }
        return obj;
    }
    public List<AutoManage> getAutoManageList(int firstRow, int maxRow) {
        List list = getList(firstRow, maxRow);
        return (List<AutoManage>)list;
    }
    public int getAutoManageCount(Criteria criteria) {
        return getCount(criteria);
    }
    public List<AutoManage> getAutoManageList(Criteria criteria) {
        List list = getList(criteria);
        return (List<AutoManag
/**
 * 그룹관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Service("egovGroupManageService")
public class EgovGroupManageServiceImpl extends EgovAbstractServiceImpl implements EgovGroupManageService {
	@Resource(name="groupManageDAO")
    private GroupManageDAO groupManageDAO;
	/**
	 * 시스템사용 목적별 그룹 목록 조회
	 * @param groupManageVO GroupManageVO
	 * @return List<GroupManageVO>
	 * @exception Exception
	 */
	public List<GroupManageVO> selectGroupList(GroupManageVO groupManageVO) throws Exception {
		return groupManageDAO.selectGroupList(groupManageVO);
	}
	/**
	 * 검색조건에 따른 그룹정보를 조회
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO selectGroup(GroupManageVO groupManageVO) throws 

		return groupManageDAO.selectGroup(groupManageVO);
	}
	/**
	 * 그룹 기본정보를 화면에서 입력하여 항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param groupManage GroupManage
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO insertGroup(GroupManage groupManage, GroupManageVO groupManageVO) throws Exception {
		groupManageDAO.insertGroup(groupManage);
		groupManageVO.setGroupId(groupManage.getGroupId());
		return groupManageDAO.selectGroup(groupManageVO);
	}
	/**
	 * 화면에 조회된 그룹의 기본정보를 수정하여 항목의 정합성을 체크하고 수정된 데이터를 데이터베이스에 반영
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void updateGroup(GroupManage groupManage) throws Exception {
		groupManageDAO.updateGroup(groupManage);
	}
	/**
	 * 불필요한 그룹정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void deleteGroup(GroupManage groupManage) throws Exception {
		groupManageDAO.deleteGroup(groupManage);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @par
public class JmsProcessDesignerContainer extends ProcessDesignerContainer {
	ProcessDetailPanel processDetailPanel;
		public ProcessDetailPanel getProcessDetailPanel() {
			return processDetailPanel;
		}
		public void setProcessDetailPanel(ProcessDetailPanel processDetailPanel) {
			this.processDetailPanel = processDetailPanel;
		}
	ProcessSummaryPanel processSummaryPanel;
		public ProcessSummaryPanel getProcessSummaryPanel() {
			return processSummaryPanel;
		}
		public void setProcessSummaryPanel(ProcessSummaryPanel processSummaryPanel) {
			this.processSummaryPanel = processSummaryPanel;
		}
	@Override
	public void init(){
		super.init();
		
		processDetailPanel = new ProcessDetailPanel();
		processSummaryPanel = new ProcessSummaryPanel();
	}
	@Override
	public void load(ProcessDefinition def) throws Exception{
		processDetailPanel.setEditorId(this.getEditorId());
		processSummaryPanel.setEditorId(this.getEditorId());
		
		super.load(def);
		
		processDetailPanel.load(def.getDocumen
/**
 * 개요
 * - 회의실관리에 대한 Service Interface를 정의한다.
 * 
 * 상세내용
 * - 회의실관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 회의실관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
public interface EgovMtgPlaceManageService {
	/**
	 * 회의실관리 정보를 관리하기 위해 등록된 회의실 목록을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return List - 회의실관리 목록
	 */
	public List<MtgPlaceManageVO> selectMtgPlaceManageList(MtgPlaceManageVO mtgPlaceManageVO) throws Exception;
	/**
	 * 회의실관리 목록 총 갯수를 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return int - 회의실관리 카운트 수
	 */
	public int selectMtgPlaceManageListTotCnt(MtgPlaceManageVO mtgPlaceManageVO) throws Exception ;
	/**
	 * 등록된 회의실관리의 상세정보를 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	public MtgPlaceManage selectMtgPlaceManage(MtgPlaceManageVO mtgPlaceManageVO) throws Exception;
	/**
	 * 회의실관리 정보를 신규로 등록한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void insertMtgPlaceMa

	/**
	 * 기 등록된 회의실관리 정보를 수정한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void updtMtgPlaceManage(MtgPlaceManage mtgPlaceManage, String checkedMtgPlacesForInsert, MtgPlaceManageVO mtgPlaceManageVO) throws Exception;
	/**
	 * 기 등록된 회의실관리 정보를 삭제한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void deleteMtgPlaceManage(MtgPlaceManage mtgPlaceManage) throws Exception;
	/**
	 * 회의실관리가 특정화면에 반영된 결과를 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	/******** 회의실 예약 관리 *************/
	/**
	 * 회의실 예약정보를 관리하기 위해 등록된 회의실 예약 목록을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return List - 회의실관리 목록
	 */
	public List<MtgPlaceManageVO> selectMtgPlaceResveManageList(MtgPlaceManageVO mtgPlaceManageVO) throws Exception;
	/**
	 * 회의실예약 신청화면을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	public MtgPlaceManageVO selectMtgPlaceResve(MtgPlaceManageVO mtgPlaceManageVO) throws Exception;
	/**
	 * 등록된 회의

	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	public MtgPlaceManageVO selectMtgPlaceResveDetail(MtgPlaceManageVO mtgPlaceManageVO) throws Exception;
	/**
	 * 회의실 예약정보를 신규로 등록한다.
	 * @param mtgPlaceManage - 회의실예약 model
	 */
	public void insertMtgPlaceResve(MtgPlaceResve mtgPlaceResve) throws Exception;
	/**
	 * 기 등록된 회의실 예약정보를 수정한다.
	 * @param mtgPlaceManage - 회의실예약 model
	 */
	public void updtMtgPlaceResve(MtgPlaceResve mtgPlaceResve) throws Exception;
	/**
	 * 기 등록된 회의실 예약정보를 삭제한다.
	 * @param mtgPlaceManage - 회의실예약 model
	 */
	public void deleteMtgPlaceResve(MtgPlaceResve mtgPlaceResve) throws Exception;
	/**
	 * 회의실 중복여부 체크.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return int - 중복건수
	 */
	public int mtgPlaceResveDplactCeck(MtgPlaceManageVO mtgPlaceManageVO) throws Exception;
	/******** 회의실 비품 관리 *************/
	/**
	 * 비품정보 목록을 조회한다.
	 * @param fxtrsManageVO - 비품관리 VO
	 * @return List - 비품관리 목록
	 */
	public List<MtgPlaceFxtrsVO> selectFxtrsM
/**
 * 
 */
/**
 * @author acabrera
 * @since 13 Dic,2009
 */
public class AbstractTest extends AbstractDependencyInjectionSpringContextTests {
	protected static final int CERO = 0;
	protected static final int UNO = 1;	
	/**
	 * 
	 */
	private ClubService clubService;
	/**
	 * 
	 */
	private EstadoClubService estadoClubService;
	/**
	 * 
	 */
	private TorneoService torneoService;
	/**
	 * 
	 */
	private EstadoTorneoService estadoTorneoService;
	/**
	 * 
	 */
	private LigaService ligaService;
	/**
	 * 
	 */
	private FechaTorneoService fechaTorneoService;
	/**
	 * 
	 */
	private JugadaService jugadaService;
	/**
	 * 
	 */
	private UsuarioService usuarioService;
	/**
	 * 
	 */
	private GrupoService grupoService;
	private EstadioService estadioService;
	@Override
	protected String[] getConfigLocations() {
		return new String[] { "classpath:/ar/com/futbolprode/negocio/logica/service/spring-service.xml" };
	}
	public void testTest() {
		System.out.println("Listo");
	}
	public ClubService get

		return clubService;
	}
	public void setClubService(ClubService clubService) {
		this.clubService = clubService;
	}
	public EstadoClubService getEstadoClubService() {
		return estadoClubService;
	}
	public void setEstadoClubService(EstadoClubService estadoClubService) {
		this.estadoClubService = estadoClubService;
	}
	public TorneoService getTorneoService() {
		return torneoService;
	}
	public void setTorneoService(TorneoService torneoService) {
		this.torneoService = torneoService;
	}
	public LigaService getLigaService() {
		return ligaService;
	}
	public void setLigaService(LigaService ligaService) {
		this.ligaService = ligaService;
	}
	public EstadoTorneoService getEstadoTorneoService() {
		return estadoTorneoService;
	}
	public void setEstadoTorneoService(EstadoTorneoService estadoTorneoService) {
		this.estadoTorneoService = estadoTorneoService;
	}
	public FechaTorneoService getFechaTorneoService() {
		return fechaTorneoService;
	}
	public void setFechaTorneoService(FechaTorne
/**
 * 개요
 * - PROCESS모니터링에 대한 ServiceImpl 클래스를 정의한다.
 * 
 * 상세내용
 * - PROCESS모니터링에 대한 등록, 수정, 삭제, 조회 기능을 제공한다.
 * - PROCESS모니터링의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 박종선
 * @version 1.0
 * @created 08-9-2010 오후 3:54:46
 */
@Service("EgovProcessMonService")
public class EgovProcessMonServiceImpl extends AbstractServiceImpl implements EgovProcessMonService {
	@Resource(name = "ProcessMonDAO")
	private ProcessMonDAO processMonDAO;
	@Resource(name="egovProcessMonIdGnrService")
	private EgovIdGnrService idgenServiceProcessMon;
	@Resource(name="egovProcessMonLogIdGnrService")
	private EgovIdGnrService idgenServiceProcessMonLog;	
	/**
	 * 등록된 PROCESS모니터링 목록을 조회한다.
	 * @param processMonVO - PROCESS모니터링 Vo
	 * @return List - PROCESS모니터링 목록
	 * 
	 * @param processMonVO
	 */
	public List selectProcessMonList(ProcessMonVO processMonVO) throws Exception {
        return processMonDAO.selectProcessMonList(processMonVO);	
	}
	/**
	 * PROCESS모니터링 목록 총 갯수를 조회한다.
	 * @param processMonVO - PROCESS모니터링 Vo


	 * 
	 * @param processMonVO
	 */
	public int selectProcessMonTotCnt(ProcessMonVO processMonVO) throws Exception {
        return processMonDAO.selectProcessMonTotCnt(processMonVO);
	}	
	/**
	 * 등록된 PROCESS모니터링의 상세정보를 조회한다.
	 * @param processMonVO - PROCESS모니터링 Vo
	 * @return processMonVO - PROCESS모니터링 Vo
	 * 
	 * @param processMonVO
	 */
	public ProcessMonVO selectProcessMon(ProcessMonVO processMonVO) throws Exception {
		return processMonDAO.selectProcessMon(processMonVO);
	}
	/**
	 * PROCESS모니터링 정보를 신규로 등록한다.
	 * @param processNm - PROCESS모니터링 model
	 * 
	 * @param processNm
	 */
	public void insertProcessMon(ProcessMon processMon) throws Exception {
		processMon.setProcessId(idgenServiceProcessMon.getNextStringId());
		processMonDAO.insertProcessMon(processMon);
	}
	/**
	 * 기 등록된 PROCESS모니터링 정보를 수정한다.
	 * @param processNm - PROCESS모니터링 model
	 * 
	 * @param processNm
	 */
	public void updateProcessMon(ProcessMon processMon) throws Exception {
		processMonDAO.updateProcessMon(proce

	}
	/**
	 * 기 등록된 PROCESS모니터링 정보를 삭제한다.
	 * @param processNm - PROCESS모니터링 model
	 * 
	 * @param processNm
	 */
	public void deleteProcessMon(ProcessMon processMon) throws Exception {
		processMonDAO.deleteProcessMon(processMon);
	}
	/**
	 * 프로세스 모니터링로그 목록을 조회한다.
	 * @param ProcessMonVO - 프로세스모니터링로그 VO
	 * @return  List<ProcessMonVO> - 프로세스모니터링로그 List
	 * 
	 * @param processMonLogVO
	 */
	public Map<String, Object> selectProcessMonLogList(ProcessMonLogVO processMonLogVO) throws Exception {
		List<ProcessMonLogVO> result = processMonDAO.selectProcessMonLogList(processMonLogVO);
		int cnt = processMonDAO.selectProcessMonLogTotCnt(processMonLogVO);
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		map.put("resultList", result);
		map.put("resultCnt", Integer.toString(cnt));
		return map;
	}
	/**
	 * 프로세스 모니터링로그의 상세정보를 조회한다.
	 * @param ProcessMonVO - 프로세스모니터링로그 model
	 * @return  ProcessMonVO - 프로세스모니터링로그 model
	 * 
	 * @param processMonLogVO
	 */
	public ProcessMonLogVO 

		return processMonDAO.selectProcessMonLog(processMonLogVO);
	}
	/**
	 * 프로세스 모니터링로그를 등록한다.
	 * @param processMonLog - 프로세스 모니터링로그 model
	 * 
	 * @param processMonLog
	 */
	public void insertProcessMonLog(ProcessMonLog processMonLog) throws Exception{
		processMonDAO.insertProcessMonLog(processMonLog);
	}	
	/**
	 * 프로세스 모니터링 결과를 수정한다.
	 * @param processMonLog - 프로세스 모니터링대상 model
	 * 
	 * @param processMonLog
	 */
	public void updateProcessMonSttus(ProcessMon processMon) throws Exception{
		processMonDAO.updateProcessMonSttus(processMon);
		
		ProcessMonLog processMonLog = new ProcessMonLog();
		processMonLog.setProcessId(processMon.getProcessId());
		processMonLog.setLogId(idgenServiceProcessMonLog.getNextStringId());
		processMonLog.setProcessNm(processMon.getProcessNm());
		processMonLog.setProcsSttus(processMon.getProcsSttus());
		processMonLog.setCreatDt(processMon.getCreatDt());
		processMonLog.setLogInfo(processMon.getLogInfo());
		processMonLog.setMngrNm(processMon.getMngrNm())
/**
 * 개요
 * - 휴가관리에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - 휴가관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 휴가관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Repository("vcatnManageDAO")
public class VcatnManageDAO extends EgovComAbstractDAO {
	/**
	 * 휴가관리정보를 관리하기 위해 등록된 휴가관리 목록을 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return List - 휴가관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<VcatnManageVO> selectVcatnManageList(VcatnManageVO vcatnManageVO) throws Exception {
		return list("vcatnManageDAO.selectVcatnManageList", vcatnManageVO);
	}
    /**
	 * 휴가관리목록 총 갯수를 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectVcatnManageListTotCnt(VcatnManageVO vcatnManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("vcatnManageDAO.selectVcatnManageListTotCnt", vcatnManageVO);
    }
	/**
	 * 등록된 휴가관리의 상세정보를 조회한다.
	 * @param vcatnManageVO - 휴가관리 V

	 * @return VcatnManageVO - 휴가관리 VO
	 */
	public VcatnManageVO selectVcatnManage(VcatnManageVO vcatnManageVO)  throws Exception {
		return (VcatnManageVO) selectByPk("vcatnManageDAO.selectVcatnManage", vcatnManageVO);
	}
	/**
	 * 휴가관리정보를 신규로 등록한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public void insertVcatnManage(VcatnManage vcatnManage) throws Exception {
		insert("vcatnManageDAO.insertVcatnManage", vcatnManage);
	}
	/**
	 * 기 등록된 휴가관리정보를 수정한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public void updtVcatnManage(VcatnManage vcatnManage) throws Exception {
		update("vcatnManageDAO.updateVcatnManage", vcatnManage);
	}
	/**
	 * 기 등록된 휴가관리정보를 삭제한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public void deleteVcatnManage(VcatnManage vcatnManage) throws Exception {
        delete("vcatnManageDAO.deleteVcatnManage",vcatnManage);
	}
    /**
	 * 휴가일자 중복여부 체크
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectVcatnManageDplctAt(VcatnManag

        return (Integer)getSqlMapClientTemplate().queryForObject("vcatnManageDAO.selectVcatnManageDplctAt", vcatnManageVO);
    }
    /*** 승인관련 ***/	
	/**
	 * 휴가관리정보 승인 처리를 위해 신청된 휴가관리 목록을 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return List - 휴가관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<VcatnManageVO> selectVcatnManageConfmList(VcatnManageVO vcatnManageVO) throws Exception {
		return list("vcatnManageDAO.selectVcatnManageConfmList", vcatnManageVO);
	}
    /**
	 * 휴가관리정보 승인 처리를 위해 신청된 휴가관리 목록 총 갯수를 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectVcatnManageConfmListTotCnt(VcatnManageVO vcatnManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("vcatnManageDAO.selectVcatnManageConfmListTotCnt", vcatnManageVO);
    }
	/**
	 * 신청된 휴가를 승인처리한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public void updtVcatnManageConfm(VcatnManage vcatnManage) throws Exception {
		update("vc
/**
 * 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Repository("roleManageDAO")
public class RoleManageDAO extends EgovComAbstractDAO {
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception {
		return (RoleManageVO) select("roleManageDAO.selectRole", roleManageVO);
	}
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception {
		return (List<RoleManageVO>) list("roleManageDAO.selectRoleList", roleManageVO);
	}
	/**
	 * 시스템 메뉴에 따른 접

	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void insertRole(RoleManage roleManage) throws Exception {
		insert("roleManageDAO.insertRole", roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void updateRole(RoleManage roleManage) throws Exception {
		update("roleManageDAO.updateRole", roleManage);
	}
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception {
		delete("roleManageDAO.deleteRole", roleManage);
	}
    /**
	 * 롤목록 총 갯수를 조회한다.
	 * @param roleManageVO RoleManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectRoleListTotCnt(RoleManageVO roleManageVO) throws Exception {
        return (Integer)select("roleManageDAO.selectAuthorListTotCnt", roleManageVO);
    }	
    
	/**
	 * 등록된 모든 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @re
/**
 * 권한별 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Service("egovAuthorRoleManageService")
public class EgovAuthorRoleManageServiceImpl extends EgovAbstractServiceImpl implements EgovAuthorRoleManageService {
	@Resource(name="authorRoleManageDAO")
    private AuthorRoleManageDAO authorRoleManageDAO;
	/**
	 * 권한 롤 관계정보를 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return AuthorRoleManageVO
	 * @exception Exception
	 */
	public AuthorRoleManageVO selectAuthorRole(AuthorRoleManageVO authorRoleManageVO) throws Exception {
		return authorRoleManageDAO.selectAuthorRole(authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보 목록 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return List<AuthorRoleManageVO>
	 * @exception Exception
	 */
	

		return authorRoleManageDAO.selectAuthorRoleList(authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보를 화면에서 입력하여 입력항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void insertAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		authorRoleManageDAO.insertAuthorRole(authorRoleManage);
	}
	/**
	 * 수정된 권한 롤 관계정보를 데이터베이스에 반영
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void updateAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		authorRoleManageDAO.updateAuthorRole(authorRoleManage);
	}
	/**
	 * 권한 롤 관계정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void deleteAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		authorRoleManageDAO.deleteAuthorRole(authorRoleManage);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return int
	 * @exception Exception
	 */
	public in
/**
 * @author Thingtrack S.L.
 *
 */
public class ServiceServiceImpl implements ServiceService {
	@Autowired
	private ServiceDao serviceDao;
	@Autowired
	private ServiceStatusDao serviceStatusDao;
	@Autowired
	private SequenceService sequenceService;
	@Override
	public List<Service> getAll() throws Exception {
		return this.serviceDao.getAll();
		
	}
	@Override
	public Service get(Integer serviceId) throws Exception {
		return this.serviceDao.get(serviceId);
		
	}
	@Override
	public Service getByCode(String code) throws Exception {
		return this.serviceDao.getByCode(code);
		
	}
	@Override
	public Service save(Service service) throws Exception {
		return this.serviceDao.save(service);
		
	}
	@Override
	public void delete(Service service) throws Exception {
		this.serviceDao.delete(service);
		
	}
	@Override
	public Service createNewService(Organization organization) throws Exception {
		Service service = new Service();
		
		service.setCode(sequenceService.setNextSequence(Sequence.CODE
public class RTBFeatureExtractor 
	private Extractor _extractor= new Extractor();
	public RTBFeatureExtractor(String dataDir) throws IOException
	{
		DomainFeatureHandler domainHandler = new DomainFeatureHandler(dataDir,1);
		AdSlotIDHandler adSlotIDHandler = new AdSlotIDHandler(dataDir, 2);
		AdSlotFormatHandler adSlotFormatHandler = new AdSlotFormatHandler(3);
		AdSlotVisibilityHandler adSlotVisibilityHandler = new AdSlotVisibilityHandler(4);
		CreativeIdHandler creativeIdHandler = new CreativeIdHandler(dataDir, 6);
		ExchangeHandler exchangeHandler = new ExchangeHandler(7);
		RegionHandler regionHandler = new RegionHandler(8);
		UserAgentHandler userAgentHandler = new UserAgentHandler(9);
		
		_extractor.AddFeatureHandler(domainHandler);
		_extractor.AddFeatureHandler(adSlotIDHandler);
		_extractor.AddFeatureHandler(adSlotFormatHandler);
		_extractor.AddFeatureHandler(adSlotVisibilityHandler);
		_extractor.AddFeatureHandler(creativeIdHandler);
		_extractor.AddFeatureHandler(exchange
@Singleton
@Startup
public class SaeInfra {
	private static SaeInfra instance;
	public static SaeInfra getInstance(){ return instance; }
	@EJB private ValorAlimentacaoRepository valorAlimentacaoRepository;
	@EJB private AssinaturaTermoBaRepository assinaturaTermoBaRepository;
	@EJB private OcorrenciaRepository ocorrenciaRepository;
	@EJB private AgendaRepository agendaRepository;
	@EJB private AgendamentoRepository agendamentoRepository;
	@EJB private EstudoPreliminarRepository estudoPreliminarRepository;
	@EJB private DocumentacaoPendenteRepository documentacaoPendenteRepository;
	@EJB private DocumentacaoRepository documentacaoRepository;
	@EJB private EstudoSocioEconomicoRepository estudoSocioEconomicoRepository;
	public SaeInfra(){
		instance = this;
	}
	@PersistenceContext(unitName = "service_context")
	public EntityManager saeContext;
	public ValorAlimentacaoRepository getValorAlimentacaoRepository() {
		return valorAlimentacaoRepository;
	}
	public AssinaturaTermoBaRepository ge
@SuppressWarnings("serial")
@NodeEntity
public class ProcessComponent extends AbstractEntity {
	@Indexed(unique = true)
	private String processName;
	private String processType;
	private String positionLeft;
	private String positionTop;
	@Fetch
	@RelatedTo(type = "hasConfig", direction = Direction.OUTGOING)
	private ProcessConfig processConfig;
	@Fetch
	@RelatedTo(type = "hasNextProcess", direction = Direction.OUTGOING)
	private ProcessComponent nextProcess;
	public String getProcessName() {
		return processName;
	}
	public void setProcessName(String processName) {
		this.processName = processName;
	}
	public String getProcessType() {
		return processType;
	}
	public void setProcessType(String processType) {
		this.processType = processType;
	}
	public String getPositionLeft() {
		return positionLeft;
	}
	public void setPositionLeft(String positionLeft) {
		this.positionLeft = positionLeft;
	}
	public String getPositionTop() {
		return positionTop;
	}
	public void setPositionTop(String
public class RepositoryMock
    private CustomerRepository customerRepository;
    private ProductRepository productRepository;
    private static RepositoryMock instance;
    static
    {
        RepositoryMock.instance = new RepositoryMock();
    }
    public static void initializeFactory(final CustomerRepository customerRepository, final ProductRepository productRepository)
    {
        if (RepositoryMock.instance.customerRepository == null)
        {
            RepositoryMock.instance.customerRepository = customerRepository;
            RepositoryMock.instance.productRepository = productRepository;
            RepositoryMock.instance.buildCustomers();
            RepositoryMock.instance.buildProducts();
        }
    }
    private void buildCustomers()
    {
        Customer customer = new Customer(Location.LIVERPOOL);
        this.customerRepository.save(customer);
        customer = new Customer(Location.LIVERPOOL);
        this.customerRepository.save(customer);
        custom
/**
 * @author huangfeilong
 * @ClassName: CacheManageServiceImpl
 * @Description: TODO(这里用一句话描述这个类的作用)
 * @date Mar 6, 2013 3:33:22 PM
 */
@Service("cacheManageService")
public class CacheManageServiceImpl implements ICacheManageService {
    protected static final Logger log = Logger.getLogger(CacheManageServiceImpl.class);
    @Autowired
    CacheManageMapper cacheManageMapper;
    /*
     * <p>Title: queryCacheManageInfoList</p>
     * <p>Description: 查询所有缓存设置信息</p>
     * @param cacheManageBean
     * @return
     * @see com.xwtech.uomp.base.service.ICacheManageService#queryCacheManageInfoList(com.xwtech.uomp.base.pojo.memcache.CacheManageBean)
     */
    public List<CacheManageBean> queryCacheManageInfoList(CacheManageBean cacheManageBean) {
        return cacheManageMapper.queryCacheManageInfoList(cacheManageBean);
    }
    /*
     * <p>Title: queryCacheManageInfoById</p>
     * <p>Description: 根据id查询缓存设置信息</p>
     * @param memKey
     * @return
     * @see com.xwtech.uomp.ba

     */
    public CacheManageBean queryCacheManageInfoById(String memKey) {
        CacheManageBean cacheManageBean = null;
        List<CacheManageBean> cacheManageinfo = cacheManageMapper.queryCacheManageInfoById(memKey);
        if (cacheManageinfo != null && cacheManageinfo.size() > 0) {
            cacheManageBean = cacheManageinfo.get(0);
        }
        return cacheManageBean;
    }
    /*
     * <p>Title: addCacheManageInfo</p>
     * <p>Description: 添加缓存设置信息</p>
     * @param cacheManageBean
     * @see com.xwtech.uomp.base.service.ICacheManageService#addCacheManageInfo(com.xwtech.uomp.base.pojo.memcache.CacheManageBean)
     */
    public void addCacheManageInfo(CacheManageBean cacheManageBean) {
        cacheManageMapper.addCacheManageInfo(cacheManageBean);
    }
    /*
     * <p>Title: modCacheManageInfo</p>
     * <p>Description: 修改缓存设置信息</p>
     * @param cacheManageBean
     * @see com.xwtech.uomp.base.service.ICacheManageService#modCacheManageInfo(com.xwtech.uomp.ba
public class NexusCompat
    public static CRepository getRepositoryRawConfiguration( Repository repository )
    {
        return ( (CRepositoryCoreConfiguration) repository.getCurrentCoreConfiguration() ).getConfiguration( false );
    }
    /**
     * Returns repository's role.
     * 
     * @param repository
     * @return
     * @deprecated Use repository.getProviderRole() instead!
     */
    public static String getRepositoryProviderRole( Repository repository )
    {
        return repository.getProviderRole();
    }
    /**
     * Returns repository's hint.
     * 
     * @param repository
     * @return
     * @deprecated Use Repository.getProviderHint() instead!
     */
    public static String getRepositoryProviderHint( Repository repository )
    {
        return repository.getProviderHint();
    }
    public static String getRepositoryPolicy( Repository repository )
    {
        if ( repository.getRepositoryKind().isFacetAvailable( MavenRepository.class ) )
        {
  
/*
   Copyright 2005 Simon Mieth
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
/**
 * @author <a href="mailto:simon.mieth@gmx.de>Simon Mieth</a>
 *
 *
 *
 */
public class ParserBuilder {
    public static Parser createDefaultParser() {
        DXFParser parser = new DXFParser();
        Handler handler;
        handler = new DXFHeaderSectionHandler();
        parser.addHandler(handler);
        HandlerManager handlerManager = new DXFBlocksSectionHandler();
        parser.addHandler(handlerManager);
        Handler h = new DXFLineHandler()

        handlerManager.addHandler(h);
        h = new DXFCircleHandler();
        handlerManager.addHandler(h);
        h = new DXFArcHandler();
        handlerManager.addHandler(h);
        h = new DXFPolylineHandler();
        handlerManager.addHandler(h);
        h = new DXFLWPolylineHandler();
        handlerManager.addHandler(h);
        h = new DXFMTextHandler();
        handlerManager.addHandler(h);
        h = new DXFTextHandler();
        handlerManager.addHandler(h);
        h = new DXFInsertHandler();
        handlerManager.addHandler(h);
        h = new DXFEllipseHandler();
        handlerManager.addHandler(h);
        h = new DXFSolidHandler();
        handlerManager.addHandler(h);
        h = new DXFTraceHandler();
        handlerManager.addHandler(h);
        h = new DXFDimensionHandler();
        handlerManager.addHandler(h);
        h = new DXFHatchHandler();
        handlerManager.addHandler(h);
        h = new DXFImageHandler();
        handlerManager.addHandler(h);

        h = new DXF3DFaceHandler();
        handlerManager.addHandler(h);
        h = new DXFRayHandler();
        handlerManager.addHandler(h);
        h = new DXFXLineHandler();
        handlerManager.addHandler(h);
        h = new DXFRegionHandler();
        handlerManager.addHandler(h);
        h = new DXFBodyHandler();
        handlerManager.addHandler(h);
        h = new DXF3DSolidHandler();
        handlerManager.addHandler(h);
        h = new DXFSplineHandler();
        handlerManager.addHandler(h);
        h = new DXFMLineHandler();
        handlerManager.addHandler(h);
        h = new DXFLeaderHandler();
        handlerManager.addHandler(h);
        h = new DXFToleranceHandler();
        handlerManager.addHandler(h);
        h = new DXFViewportHandler();
        handlerManager.addHandler(h);
        handlerManager = new DXFTableSectionHandler();
        parser.addHandler(handlerManager);
        handler = new DXFLayerTableHandler();
        handlerManager.addHandler(handler)

        handler = new DXFLineTypeTableHandler();
        handlerManager.addHandler(handler);
        handler = new DXFDimensionStyleTableHandler();
        handlerManager.addHandler(handler);
        handler = new DXFStyleTableHandler();
        handlerManager.addHandler(handler);
        handler = new DXFVPortTableHandler();
        handlerManager.addHandler(handler);
        handler = new DXFViewTableHandler();
        handlerManager.addHandler(handler);
        handlerManager = new DXFEntitiesSectionHandler();
        parser.addHandler(handlerManager);
        h = new DXFLineHandler();
        handlerManager.addHandler(h);
        h = new DXFCircleHandler();
        handlerManager.addHandler(h);
        h = new DXFArcHandler();
        handlerManager.addHandler(h);
        
        h = new DXFEllipseHandler();
        handlerManager.addHandler(h);
        h = new DXFSolidHandler();
        handlerManager.addHandler(h);
        h = new DXFTraceHandler();
        handlerManager.addHa

        h = new DXFDimensionHandler();
        handlerManager.addHandler(h);
        h = new DXFHatchHandler();
        handlerManager.addHandler(h);
        h = new DXFImageHandler();
        handlerManager.addHandler(h);
        h = new DXF3DFaceHandler();
        handlerManager.addHandler(h);
        h = new DXFRayHandler();
        handlerManager.addHandler(h);
        h = new DXFXLineHandler();
        handlerManager.addHandler(h);
        h = new DXFRegionHandler();
        handlerManager.addHandler(h);
        h = new DXFBodyHandler();
        handlerManager.addHandler(h);
        h = new DXF3DSolidHandler();
        handlerManager.addHandler(h);
        h = new DXFSplineHandler();
        handlerManager.addHandler(h);
        h = new DXFMLineHandler();
        handlerManager.addHandler(h);
        h = new DXFLeaderHandler();
        handlerManager.addHandler(h);
        h = new DXFToleranceHandler();
        handlerManager.addHandler(h);
        h = new DXFViewportHandler();
 

        h = new DXFPolylineHandler();
        handlerManager.addHandler(h);
        h = new DXFLWPolylineHandler();
        handlerManager.addHandler(h);
        h = new DXFMTextHandler();
        handlerManager.addHandler(h);
        h = new DXFTextHandler();
        handlerManager.addHandler(h);
        h = new DXFInsertHandler();
        handlerManager.addHandler(h);
        handlerManager = new DXFObjectsSectionHandler();
        h = new DXFImageDefHandler();
        handlerManager.addHandler(h);
        h = new DXFDictionaryHandler();
        handlerManager.addHandler(h);
        h = new DXFPlotsettingsHandler();
        handlerManager.addHandler(h);
        h = new DXFLayoutHandler();
        handlerManager.addHandler(h);
        h = new DXFMLineStyleHandler();
        handlerManager.addHandler(h);
        parser.addHandler(handlerManager);
        return parser;
    }
    /**
     * @see org.kabeja.parser.SAXParserBuilder the SAXParserBuilder for XML
     *      description
   
public class CPU {
	public CPU() {
	}
	public void addProcess(Process process) {
		runningProcess = process;
		Window.getConsole().appendCpuMessage("+CPU: Added process to cpu");
		Window.getConsole().appendCpuMessage(runningProcess.toString());
	}
	public Process removeProcessFromCpu() {
		Process temp = runningProcess;
		runningProcess = null;
		Window.getConsole().appendCpuMessage("-CPU: Removed process from cpu");
		Window.getConsole().appendCpuMessage(temp.toString());
		return temp;
	}
	public void execute() {
		if (runningProcess != null) {
			if (runningProcess.getCpuRemainingTime() > 0) {
				runningProcess.changeCpuRemainingTime(runningProcess.getCpuRemainingTime() - 1);
				Window.getConsole().appendExecuteMessage("+Exec: Executed process at cpu");
				Window.getConsole().appendExecuteMessage(runningProcess.toString());
			}
		}
	}
	public Process peekCpuProcess() {
		return runningProcess;
	}
	public int getLastProcessStartTime() {
		return lastProcessStartTime;
	}
	public 
/**
 * 개요
 * - 휴가관리에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - 휴가관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 휴가관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Repository("vcatnManageDAO")
public class VcatnManageDAO extends EgovComAbstractDAO {
	/**
	 * 휴가관리정보를 관리하기 위해 등록된 휴가관리 목록을 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return List - 휴가관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<VcatnManageVO> selectVcatnManageList(VcatnManageVO vcatnManageVO) throws Exception {
		return (List<VcatnManageVO>) list("vcatnManageDAO.selectVcatnManageList", vcatnManageVO);
	}
    /**
	 * 휴가관리목록 총 갯수를 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectVcatnManageListTotCnt(VcatnManageVO vcatnManageVO) throws Exception {
        return (Integer)select("vcatnManageDAO.selectVcatnManageListTotCnt", vcatnManageVO);
    }
	/**
	 * 등록된 휴가관리의 상세정보를 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @retur

	 */
	public VcatnManageVO selectVcatnManage(VcatnManageVO vcatnManageVO)  throws Exception {
		return (VcatnManageVO) select("vcatnManageDAO.selectVcatnManage", vcatnManageVO);
	}
	/**
	 * 휴가관리정보를 신규로 등록한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public void insertVcatnManage(VcatnManage vcatnManage) throws Exception {
		insert("vcatnManageDAO.insertVcatnManage", vcatnManage);
	}
	/**
	 * 기 등록된 휴가관리정보를 수정한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public void updtVcatnManage(VcatnManage vcatnManage) throws Exception {
		update("vcatnManageDAO.updateVcatnManage", vcatnManage);
	}
	/**
	 * 기 등록된 휴가관리정보를 삭제한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public void deleteVcatnManage(VcatnManage vcatnManage) throws Exception {
        delete("vcatnManageDAO.deleteVcatnManage",vcatnManage);
	}
    /**
	 * 휴가일자 중복여부 체크
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectVcatnManageDplctAt(VcatnManageVO vcatnManageVO) throws Exception {
  

    }
    /*** 승인관련 ***/	
	/**
	 * 휴가관리정보 승인 처리를 위해 신청된 휴가관리 목록을 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return List - 휴가관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<VcatnManageVO> selectVcatnManageConfmList(VcatnManageVO vcatnManageVO) throws Exception {
		return (List<VcatnManageVO>) list("vcatnManageDAO.selectVcatnManageConfmList", vcatnManageVO);
	}
    /**
	 * 휴가관리정보 승인 처리를 위해 신청된 휴가관리 목록 총 갯수를 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectVcatnManageConfmListTotCnt(VcatnManageVO vcatnManageVO) throws Exception {
        return (Integer)select("vcatnManageDAO.selectVcatnManageConfmListTotCnt", vcatnManageVO);
    }
	/**
	 * 신청된 휴가를 승인처리한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public void updtVcatnManageConfm(VcatnManage vcatnManage) throws Exception {
		update("vcatnManageDAO.updateVcatnManageConfm", vcatnManage);
	}	
    /*** 연차관련 ***/	
	/**
	 * 개인별 연차관리의 상세정보를 조회한다.
	 * @param vcatnManageVO - 휴가
/**
 * 온라인POLL관리를 처리하는 Dao Class 구현
 * @author 공통서비스 장동한
 * @since 2009.07.03
 * @version 1.0
 * @see <pre>
 * &lt;&lt; 개정이력(Modification Information) &gt;&gt;
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.07.03  장동한          최초 생성
 * 
 * </pre>
 */
@Repository("onlinePollManageDao")
public class OnlinePollManageDao extends EgovComAbstractDAO {
    /**
     * 온라인POLL관리를(을) 목록을 한다.
     * @param onlinePollVO  온라인POLL관리 정보 담김 VO
     * @return List
     * @throws Exception
     */
    public List selectOnlinePollManageList(ComDefaultVO searchVO) throws Exception {
        return (List)list("OnlinePollManage.selectOnlinePollManage", searchVO);
    }
    
    /**
     * 온라인POLL관리를(을) 상세조회 한다.
     * @param onlinePollManage 온라인POLL관리 정보가 담김 VO
     * @return List
     * @throws Exception
     */
    public OnlinePollManage selectOnlinePollManageDetail(OnlinePollManage onlinePollManage) throws Exception {
        return (OnlinePollMan

    }
    /**
     * 온라인POLL관리를(을) 목록 전체 건수를(을) 조회한다.
     * @param onlinePollManage 온라인POLL관리 정보가 담김 VO
     * @return int
     * @throws Exception
     */
    public int selectOnlinePollManageListCnt(ComDefaultVO searchVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("OnlinePollManage.selectOnlinePollManageCnt", searchVO);
    }
    /**
     * 온라인POLL관리를(을) 등록한다.
     * @param onlinePollManage 온라인POLL관리 정보가 담김 VO
     * @throws Exception
     */
    public void insertOnlinePollManage(OnlinePollManage onlinePollManage) throws Exception {
        insert("OnlinePollManage.insertOnlinePollManage", onlinePollManage);
    }
    /**
     * 온라인POLL관리를(을) 수정한다.
     * @param onlinePollManage 온라인POLL관리 정보가 담김 VO
     * @throws Exception
     */
    public void updateOnlinePollManage(OnlinePollManage onlinePollManage) throws Exception {
        update("OnlinePollManage.updateOnlinePollManage", onlinePollManage);
    }
    /**
     * 온라인POLL관리를(을) 삭제한다.
  

     * @throws Exception
     */
    public void deleteOnlinePollManage(OnlinePollManage onlinePollManage) throws Exception {
        delete("OnlinePollManage.deleteOnlinePollResultAll", onlinePollManage);
        delete("OnlinePollManage.deleteOnlinePollItemAll", onlinePollManage);
        delete("OnlinePollManage.deleteOnlinePollManage", onlinePollManage); 
    }
    
    /**
     * 온라인POLL관리를(을) 통계를 조회 한다.
     * @param onlinePollManage 온라인POLL관리 정보가 담김 VO
     * @throws Exception 
     */
    public List selectOnlinePollManageStatistics(OnlinePollManage onlinePollManage) throws Exception {
        return (List)list("OnlinePollManage.selectOnlinePollManageDetail", onlinePollManage);
    }
    
    /**
     * 온라인POLL항목를(을) 조회한다.
     * @param onlinePollItem  온라인POLL항목 정보가 담김 VO
     * @throws Exception
     */
    public List selectOnlinePollItemList(OnlinePollItem onlinePollItem) throws Exception {
        return (List)list("OnlinePollManage.selectOnlinePollItem", onlinePollItem);

public enum ProcessStatusEnum {
	NONE("NONE",0),
	NEW("NEW",1),
	SUBMITTED("SUBMITTED",2),
	PROCESSING("PROCESSING",3),
	VALIDATIONFAILURE("VALIDATIONFAILURE",4),
	FAILED("FAILED",5),
	COMPLETED("COMPLETED",6);	
	public String getProcessStatusName() {
		return processStatusName;
	}
	public int getProcessStatus() {
		return processStatus;
	}
	private String processStatusName;
	private int processStatus;
	ProcessStatusEnum(String processStatusName, int processStatus)
	{
			this.processStatusName = processStatusName;
			this.processStatus = processStatus;		
	}
	public static ProcessStatusEnum parse(int processStatus) throws Exception
	{
		ProcessStatusEnum processStatusEnum;
		switch(processStatus)
		{
			case 1: processStatusEnum = ProcessStatusEnum.NEW;break;
			case 2: processStatusEnum = ProcessStatusEnum.SUBMITTED;break;
			case 3: processStatusEnum = ProcessStatusEnum.PROCESSING;break;
			case 4: processStatusEnum = ProcessStatusEnum.VALIDATIONFAILURE;break;
			case 5: processStatus

			case 6: processStatusEnum = ProcessStatusEnum.COMPLETED;break;
			default:throw new Exception("Failed to parse "+processStatus+" to any enum type.");
		}
		
		return processStatusEnum;
	}
	public static ProcessStatusEnum parse(String processStatusName) throws Exception
	{
		ProcessStatusEnum value = ProcessStatusEnum.NONE;
		if (processStatusName!=null)
		{
			String r = processStatusName.trim();
			if (r.equalsIgnoreCase(ProcessStatusEnum.NEW.getProcessStatusName()))
				value = ProcessStatusEnum.NEW;
			else if (r.equalsIgnoreCase(ProcessStatusEnum.SUBMITTED.getProcessStatusName()))
				value = ProcessStatusEnum.SUBMITTED;
			else if (r.equalsIgnoreCase(ProcessStatusEnum.PROCESSING.getProcessStatusName()))
				value = ProcessStatusEnum.PROCESSING;
			else if (r.equalsIgnoreCase(ProcessStatusEnum.VALIDATIONFAILURE.getProcessStatusName()))
				value = ProcessStatusEnum.VALIDATIONFAILURE;
			else if (r.equalsIgnoreCase(ProcessStatusEnum.FAILED.getProcessStatusName()))
				value = Pr
/**
 * Created with IntelliJ IDEA.
 * User: Administrator
 * Date: 2/21/13
 * Time: 9:01 PM
 * To change this template use File | Settings | File Templates.
 */
public class PacketRepository {
    private WaveRecordRepository waveRecordRepository;
    private UserRepository userRepository;
    private LastWaveRecordRepository lastWaveRecordRepository;
    private DigitRecordRepository digitRecordRepository;
    public PacketRepository() {
    }
    public PacketRepository(DigitRecordRepository digitRecordRepository,
                            WaveRecordRepository waveRecordRepository,
                            UserRepository userRepository,
                            LastWaveRecordRepository lastWaveRecordRepository) {
        this.digitRecordRepository = digitRecordRepository;
        this.waveRecordRepository = waveRecordRepository;
        this.userRepository = userRepository;
        this.lastWaveRecordRepository = lastWaveRecordRepository;
    }
    public void setUserReposito
/**
 * 
 */
/**
 * @author idemydenko
 *
 */
public class ServiceFactory {
	private static final String ACCOUNT_SERVICE_NAME = "loginService";
	private static final String TWITTER_SERVICE_NAME = "twitterService";
	private static final String UNSENT_MESSAGE_SERVICE_NAME = "unsentMessageService";
	private static final String YFROG_SERVICE_NAME = "yfrogService";
	private static final String GEOLOCATION_SERVICE_NAME = "geolocationService";
	private static final HashMap<String, Object> cache = new HashMap<String, Object>();
	private ServiceFactory() {
	}
	public static AccountService getAccountService() {
		if (!contains(ACCOUNT_SERVICE_NAME)) {
			AccountService service = new AccountService();
			put(ACCOUNT_SERVICE_NAME, service);
			return service;
		} 
		return (AccountService) get(ACCOUNT_SERVICE_NAME);
	}
	public static TwitterService getTwitterService() {
		if (!contains(TWITTER_SERVICE_NAME)) {
			TwitterService service = new Twitter4JService();
			put(TWITTER_SERVICE_NAME, service)

			return service;
		} 
		return (TwitterService) get(TWITTER_SERVICE_NAME);
	}
	public static UnsentMessageService getUnsentMessageService() {
		if (!contains(UNSENT_MESSAGE_SERVICE_NAME)) {
			UnsentMessageService service = new UnsentMessageService();
			put(UNSENT_MESSAGE_SERVICE_NAME, service);
			return service;
		}
		return (UnsentMessageService) get(UNSENT_MESSAGE_SERVICE_NAME);
	}
	public static YFrogService getYFrogService() {
		if (!contains(YFROG_SERVICE_NAME)) {
			YFrogService service = new YFrogService();
			put(YFROG_SERVICE_NAME, service);
			return service;
		}
		return (YFrogService) get(YFROG_SERVICE_NAME);
	}
	public static GeoLocationService getGeoLocationService(Context context) {
		if (!contains(GEOLOCATION_SERVICE_NAME)) {
			GeoLocationService service = new GeoLocationService(context);
			put(GEOLOCATION_SERVICE_NAME, service);
			return service;
		}
		return (GeoLocationService) get(GEOLOCATION_SERVICE_NAME);
	}
	public static GeoLocationService getGeoLocatio
/**
 * 권한관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Repository("authorManageDAO")
public class AuthorManageDAO extends EgovComAbstractDAO {
    /**
	 * 권한목록을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return List<AuthorManageVO>
	 * @exception Exception
	 */
    @SuppressWarnings("unchecked")
	public List<AuthorManageVO> selectAuthorList(AuthorManageVO authorManageVO) throws Exception {
        return list("authorManageDAO.selectAuthorList", authorManageVO);
    }
	/**
	 * 권한을 등록한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void insertAuthor(AuthorManage authorManage) throws Exception {
        insert("authorManageDAO.insertAuthor", authorManage);
    }
    /**
	 * 권한을 수정한다.
	 * @param authorManag

	 * @exception Exception
	 */
    public void updateAuthor(AuthorManage authorManage) throws Exception {
        update("authorManageDAO.updateAuthor", authorManage);
    }
    /**
	 * 권한을 삭제한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void deleteAuthor(AuthorManage authorManage) throws Exception {
        delete("authorManageDAO.deleteAuthor", authorManage);
    }
    /**
	 * 권한을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return AuthorManageVO
	 * @exception Exception
	 */
    public AuthorManageVO selectAuthor(AuthorManageVO authorManageVO) throws Exception {
        return (AuthorManageVO) selectByPk("authorManageDAO.selectAuthor", authorManageVO);
    }
    /**
	 * 권한목록 총 갯수를 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectAuthorListTotCnt(AuthorManageVO authorManageVO)  throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("authorManageDAO.
/**
 * Created by Josip.Mihelko @ Gmail
 */
public class OfyRepositoryService implements IRepositoryService {
    private final OfyShadowTokenRepository ofyShadowTokenRepository;
    private final OfyClientRepository ofyClientRepository;
    private final OfyPersistentNetworkTokenRepository ofyPersistentNetworkTokenRepository;
    public OfyRepositoryService(ObjectifyFactory objectifyFactory) {
        ofyShadowTokenRepository = new OfyShadowTokenRepository(objectifyFactory);
        ofyClientRepository = new OfyClientRepository(objectifyFactory);
        ofyPersistentNetworkTokenRepository = new OfyPersistentNetworkTokenRepository(objectifyFactory);
    }
    @Override
    public IShadowTokenRepository getShadowTokenRepository() {
        return ofyShadowTokenRepository;
    }
    @Override
    public IClientRepository getClientRepository() {
        return ofyClientRepository;
    }
    @Override
    public IPersistenNetworkTokenRepository getPersistenNetworkTokenRepository() {
     
/**
 * @Class Name : BkmkMenuManageDAO.java
 * @Description : 바로가기메뉴를 관리하는 서비스를 정의하기위한 데이터 접근 클래스
 * @Modification Information
 *
 *    수정일       수정자         수정내용
 *    -------        -------     -------------------
 *    2009. 9. 25.     윤성록
 *
 * @author 공통 컴포넌트 개발팀 윤성록
 * @since 2009. 9. 25.
 * @version
 * @see
 *
 */
@Repository("bkmkMenuManageDAO")
public class BkmkMenuManageDAO extends EgovComAbstractDAO{
    
    /**
     * 바로가기메뉴관리 정보를 삭제한다.
     * 
     * @param BkmkMenuManage
     * @return
     * @throws Exception
     */
    public void deleteBkmkMenuManage(BkmkMenuManage bkmkMenuManage) throws Exception {
        delete("BkmkMenuManageDAO.deleteBkmkMenuManage", bkmkMenuManage);
    }
    
    /**
     * 바로가기메뉴관리 정보를 등록한다.
     * 
     * @param BkmkMenuManage
     * @return
     * @throws Exception
     */
    public void insertBkmkMenuManage(BkmkMenuManage bkmkMenuManage) throws Exception {
        insert("BkmkMenuManageDAO.insertBkmkMenuManage", bkmkMenuManage);
    }
   

    /**
     * 바로가기메뉴관리 정보를 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public BkmkMenuManageVO selectBkmkMenuManageResult(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        BkmkMenuManageVO vo = new BkmkMenuManageVO();
        vo = (BkmkMenuManageVO)selectByPk("BkmkMenuManageDAO.selectBkmkMenuManage", bkmkMenuManageVO);
        return vo;
    }
    /**
     * 조건에 맞는 바로가기메뉴관리 정보 목록을 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public List<BkmkMenuManageVO> selectBkmkMenuManageList(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        return list("BkmkMenuManageDAO.selectBkmkMenuManageList", bkmkMenuManageVO);
    }    
    
    /**
     * 조건에 맞는 바로가기메뉴관리 정보 목록의 건수를 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public int selectBkmkMenuManageListCnt(BkmkMenuManageVO bkmkMenuManageVO) throws

        return (Integer)getSqlMapClientTemplate().queryForObject("BkmkMenuManageDAO.selectBkmkMenuManageListCnt", bkmkMenuManageVO);
    }
    
    /**
     * 등록할  메뉴정보 목록을 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public List<BkmkMenuManageVO> selectBkmkMenuList(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        return list("BkmkMenuManageDAO.selectBkmkMenuList", bkmkMenuManageVO);
    }    
    /**
     * 등록할  메뉴정보 목록의 건수를 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public int selectBkmkMenuListCnt(BkmkMenuManageVO bkmkMenuManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("BkmkMenuManageDAO.selectBkmkMenuListCnt", bkmkMenuManageVO);
    }
    
    /**
     * 미리보기를 할 바로가기메뉴관리의 목록을 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public List<MenuManageVO> selectBkmk
/**
 * 该类用来封装事件有关的Actioin中所有的service，然后把该类注入到Action中去
 * @author yang li
 *
 */
public class EventBaseClass {
	private IEventmoniService eventmoniService;
	private IEventtaskseleService eventtaskseleService;
	private IEventrealdispService eventrealdispService;
	private IEventStatisticsService eventStatisticsService;
	private IEventmoniinfoService eventmoniinfoService;
	private IEventReceive serviceClient;
	private IEventcorrruleService eventcorrruleService;
	private IGetTopoInfo getTopoInfo;
	private SystemLogService logService;
	public SystemLogService getLogService(){
		return this.logService;
	}
	public void setLogService(SystemLogService logService){
		this.logService = logService;
	}
	public IGetTopoInfo getGetTopoInfo() {
		return getTopoInfo;
	}
	public void setGetTopoInfo(IGetTopoInfo getTopoInfo) {
		this.getTopoInfo = getTopoInfo;
	}
	public IEventmoniService getEventmoniService() {
		return eventmoniService;
	}
	public void setEventmoniService(IEventmoniService eventmoniServ

		this.eventmoniService = eventmoniService;
	}
	public IEventtaskseleService getEventtaskseleService() {
		return eventtaskseleService;
	}
	public void setEventtaskseleService(IEventtaskseleService eventtaskseleService) {
		this.eventtaskseleService = eventtaskseleService;
	}
	public IEventrealdispService getEventrealdispService() {
		return eventrealdispService;
	}
	public void setEventrealdispService(IEventrealdispService eventrealdispService) {
		this.eventrealdispService = eventrealdispService;
	}
	public IEventStatisticsService getEventStatisticsService() {
		return eventStatisticsService;
	}
	public void setEventStatisticsService(
			IEventStatisticsService eventStatisticsService) {
		this.eventStatisticsService = eventStatisticsService;
	}
	public IEventReceive getServiceClient() {
		return serviceClient;
	}
	public void setServiceClient(IEventReceive serviceClient) {
		this.serviceClient = serviceClient;
	}
	public IEventcorrruleService getEventcorrruleService() {
		return eve
/**
 * Copyright 2010 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
public class DefaultProcessInstanceManager implements ProcessInstanceManager {
    private Map<Long, ProcessInstance> processInstances = new ConcurrentHashMap<Long, ProcessInstance>();
    private Map<CorrelationKey, ProcessInstance> processInstancesByCorrelationKey = new ConcurrentHashMap<CorrelationKey, ProcessInstance>();
    private AtomicLong processCounter = new AtomicLong(0);
    public void addProcessInstance(ProcessInstance processInstance, Co

        ((org.jbpm.process.instance.ProcessInstance) processInstance).setId(processCounter.incrementAndGet());
        internalAddProcessInstance(processInstance);
        if (correlationKey != null) {  
            if (processInstancesByCorrelationKey.containsKey(correlationKey)) {
                throw new RuntimeException(correlationKey + " already exists");
            }
            processInstancesByCorrelationKey.put(correlationKey, processInstance);
        }
    }
    
    public void internalAddProcessInstance(ProcessInstance processInstance) {
    	processInstances.put(((ProcessInstance)processInstance).getId(), processInstance);
    }
    public Collection<ProcessInstance> getProcessInstances() {
        return Collections.unmodifiableCollection(processInstances.values());
    }
    public ProcessInstance getProcessInstance(long id) {
        return (ProcessInstance) processInstances.get(id);
    }
    public ProcessInstance getProcessInstance(long id, boolean readOnly) {
 
public class DeviceCapability {
	private String analytics;
	private String deviceService;
	private String eventsService;
	private String imagingService;
	private String mediaService;
	private String ptzService;
	public DeviceCapability(){
		
	}
	public String getAnalytics() {
		return analytics;
	}
	public void setAnalytics(String analytics) {
		this.analytics = analytics;
	}
	public String getDeviceService() {
		return deviceService;
	}
	public void setDeviceService(String deviceService) {
		this.deviceService = deviceService;
	}
	public String getEventsService() {
		return eventsService;
	}
	public void setEventsService(String eventsService) {
		this.eventsService = eventsService;
	}
	public String getImagingService() {
		return imagingService;
	}
	public void setImagingService(String imagingService) {
		this.imagingService = imagingService;
	}
	public String getMediaService() {
		return mediaService;
	}
	public void setMediaService(String mediaService) {
		this.mediaService = mediaS
/**
 * Created with IntelliJ IDEA.
 * User: hvdang
 * Date: 6/10/14
 * Time: 2:31 PM
 * To change this template use File | Settings | File Templates.
 */
public class ServiceLocator {
  private ServiceCache serviceCache = new ServiceCache();
  public Service getService(String serviceName){
    Service service = serviceCache.getService(serviceName);
    if(service != null){
      return  service;
    }
    service = ServiceContext.lookup(serviceName);
    if(service != null){
      serviceCache.addService(service);
    }
    return service;
  }
  private static class ServiceCache {
    private List<Service> services = new ArrayList<Service>();
    public Service getService(String serviceName){
      for(Service service: services){
        if(service.getName().equalsIgnoreCase(serviceName)){
          System.out.println("Got service from service cache: " + serviceName);
          return  service;
        }
      }
      return null;
    }
    public void addService(Service service){
    
/**
 * User: chjp
 * Date: 11-10-20
 * Time: 上午11:00
 */
@UrlBinding("/admin/manage_node.do")
public class ManageNodeAction extends BaseAdminAction{
    @SpringBean
    private ManagerService managerService;
    private ManageNode manageNode;
    private long id;
    private Map<ManageNode, ManageChannel> nodes;
    private List<ManageChannel> channels;
    @DefaultHandler
    public Resolution list(){
    	nodes = new HashMap<ManageNode, ManageChannel>();
        List<ManageNode> mNodes=managerService.getManageNodes();
        if(mNodes != null){
        	for(ManageNode mn : mNodes){
        		nodes.put(mn, managerService.getManageChannel(mn.getCid()));
        	}
        }
        return getResolution("admin/manageNodeList");
    }
    public Resolution form(){
        if(id>0){
            manageNode=managerService.getManageNode(id);
        }
        channels = managerService.getManageChannels();
        return getResolution("admin/manageNodeForm");
    }
    public Resolution subm
/**
 * Factory of RequestHander which corresponds to the request from 
 * controll device
 */
public class RequestHandlerFactory 
    private static final Logger logger = Logger.getLogger(RequestHandlerFactory.class.getName());
    private ReadRequestHandler readRequestHander;
    private ReadDirRequestHandler readDirRequestHandler;
    private GetAttrRequestHandler getAttrRequestHandler;
    private WriteRequestHandler writeRequestHandler;
    private CreateRequestHandler createRequestHandler;
    private RemoveRequestHandler removeRequestHandler;
    private MkdirRequestHandler mkdirRequestHandler;
    private RmdirRequestHandler rmdirRequestHandler;
    public RequestHandler getHandler (RequestType requestType)
    {
        RequestHandler handler;
            switch (requestType) {
                case READ_REQUEST:
                    if (null == readRequestHander) 
                    {
                        readRequestHander = new ReadRequestHandler();
                    }
  

                    break;
                case READDIR_REQUEST:
                    if (null == readDirRequestHandler)
                    {
                        readDirRequestHandler = new ReadDirRequestHandler();
                    }
                    handler = readDirRequestHandler;
                    break;
                case GETATTR_REQUEST:
                    if (null == getAttrRequestHandler)
                    {
                        getAttrRequestHandler = new GetAttrRequestHandler();                        
                    }
                    handler = getAttrRequestHandler;
                    break;
                case WRITE_REQUEST:
                    if (null == writeRequestHandler)
                    {
                        writeRequestHandler = new WriteRequestHandler();
                    }
                    handler = writeRequestHandler;
                    break;
                case CREATE_REQUEST:
                    if (null == createR

                    {
                        createRequestHandler = new CreateRequestHandler();
                    }
                    handler = createRequestHandler;
                    break;
                case REMOVE_REQUEST:
                    if (null == removeRequestHandler)
                    {
                        removeRequestHandler = new RemoveRequestHandler();
                    }
                    handler = removeRequestHandler;
                    break;
                case MKDIR_REQUEST:
                    if (null == mkdirRequestHandler)
                    {
                        mkdirRequestHandler = new MkdirRequestHandler();
                    }
                    handler = mkdirRequestHandler;
                    break;
                case RMDIR_REQUEST:
                    if (null == rmdirRequestHandler)
                    {
                        rmdirRequestHandler = new RmdirRequestHandler();
                    }
                    ha
/**********************************************************************************
 * $URL$
 * $Id$
 **********************************************************************************
 *
 * Copyright (c) 2003, 2004, 2005, 2007, 2008 The Sakai Foundation
 *
 * Licensed under the Educational Community License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 **********************************************************************************/
public abstract class Asset implements org.osid.repository.Asset
    public String getDisplayName()
    throws org.osid.repository.Rep

    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void updateDisplayName(String displayName)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
		}
    public String getDescription()
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void updateDescription(String description)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Id getId()
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Id getRepository()
    throws org.osid.repository.RepositoryException

    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public java.io.Serializable getContent()
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void updateContent(java.io.Serializable content)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void addAsset(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void removeAsset(org.osid.shared.Id assetId
                          , boolean includeChildren)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    publi

    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.AssetIterator getAssetsByType(org.osid.shared.Type assetType)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Record createRecord(org.osid.shared.Id recordStructureId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void inheritRecordStructure(org.osid.shared.Id assetId
                                     , org.osid.shared.Id recordStructureId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void copyRecordStructure(org.osid.shared.Id

                                  , org.osid.shared.Id recordStructureId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void deleteRecord(org.osid.shared.Id recordId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RecordIterator getRecords()
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RecordIterator getRecordsByRecordStructure(org.osid.shared.Id recordStructureId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
	}
    public org.osid.repository.RecordStructureIterator getRecordStructures()
  

    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RecordStructure getContentRecordStructure()
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Record getRecord(org.osid.shared.Id recordId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Part getPart(org.osid.shared.Id partId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public java.io.Serializable getPartValue(org.osid.shared.Id partId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UN

    }
    public org.osid.repository.PartIterator getPartByPart(org.osid.shared.Id partStructureId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.ObjectIterator getPartValueByPart(org.osid.shared.Id partStructureId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public long getEffectiveDate()
    throws org.osid.repository.RepositoryException
    {
			 throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void updateEffectiveDate(long effectiveDate)
    throws org.osid.repository.RepositoryException
    {
			 throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public long getExpirationDate()
    throws org.osid.repository.RepositoryException
  
/**
 * 개요
 * - 행사관리에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - 행사관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 행사관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Repository("eventManageDAO")
public class EventManageDAO extends EgovComAbstractDAO {
	/**
	 * 행사관리정보를 관리하기 위해 등록된 행사관리 목록을 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<EventManageVO> selectEventManageList(EventManageVO eventManageVO) throws Exception {
		return (List<EventManageVO>) list("eventManageDAO.selectEventManageList", eventManageVO);
	}
    /**
	 * 행사관리목록 총 갯수를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectEventManageListTotCnt(EventManageVO eventManageVO) throws Exception {
        return (Integer)select("eventManageDAO.selectEventManageListTotCnt", eventManageVO);
    }
	/**
	 * 등록된 행사관리의 상세정보를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @retur

	 */
	public EventManageVO selectEventManage(EventManageVO eventManageVO)  throws Exception {
		return (EventManageVO) select("eventManageDAO.selectEventManage", eventManageVO);
	}
	/**
	 * 행사관리정보를 신규로 등록한다.
	 * @param eventManage - 행사관리 model
	 */
	public void insertEventManage(EventManage eventManage) throws Exception {
		insert("eventManageDAO.insertEventManage", eventManage);
	}
	/**
	 * 기 등록된 행사관리정보를 수정한다.
	 * @param eventManage - 행사관리 model
	 */
	public void updtEventManage(EventManage eventManage) throws Exception {
		update("eventManageDAO.updateEventManage", eventManage);
	}
	/**
	 * 기 등록된 행사관리정보를 삭제한다.
	 * @param eventManage - 행사관리 model
	 */
	public void deleteEventManage(EventManage eventManage) throws Exception {
        delete("eventManageDAO.deleteEventManage",eventManage);
	}
	/** 행사접수관리 ***/
	/**
	 * 행사접수정보를 관리하기 위해 등록된 행사관리 목록을 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<EventManageVO> selectEv

		return (List<EventManageVO>) list("eventManageDAO.selectEventAtdrnList", eventManageVO);
	}
    /**
	 * 행사접수관리목록 총 갯수를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectEventAtdrnListTotCnt(EventManageVO eventManageVO) throws Exception {
        return (Integer)select("eventManageDAO.selectEventAtdrnListTotCnt", eventManageVO);
    }
	/**
	 * 행사접수승인/반려 처리를 위해 등록된 행사접수 목록을 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<EventManageVO> selectEventRceptConfmList(EventManageVO eventManageVO) throws Exception {
		return (List<EventManageVO>) list("eventManageDAO.selectEventRceptConfmList", eventManageVO);
	}
    /**
	 * 행사접수승인/반려 처리를 위해 등록된 행사접수 목록 총 갯수를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectEventRceptConfmListTotCnt(EventManageVO eventManageVO) throws Exception {
        return (Integer)selec

    }
	/**
	 * 행사일자, 행사구분 조건에 따른 행사명 목록을 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<EventManageVO> selectEventNmList(EventManageVO eventManageVO) throws Exception {
		return (List<EventManageVO>) list("eventManageDAO.selectEventNmList", eventManageVO);
	}
    
	/**
	 * 등록된 행사접수관리의 상세정보를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return EventManageVO - 행사관리 VO
	 */
	public EventManageVO selectEventAtdrn(EventManageVO eventManageVO)  throws Exception {
		return (EventManageVO) select("eventManageDAO.selectEventAtdrn", eventManageVO);
	}
	/**
	 * 행사접수관리정보를 신규로 등록한다.
	 * @param eventManage - 행사관리 model
	 */
	public void insertEventAtdrn(EventAtdrn eventAtdrn) throws Exception {
		insert("eventManageDAO.insertEventAtdrn", eventAtdrn);
	}
	/**
	 * 기 등록된 행사접수관리정보를 삭제한다.
	 * @param eventManage - 행사관리 model
	 */
	public void deleteEventAtdrn(EventAtdrn eventAtdrn) throws Exception {
        delete("eventManageDAO.del
/**
 * 개요
 * - 당직관리에 대한 Service Interface를 정의한다.
 *
 * 상세내용
 * - 당직관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 당직관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
public interface EgovBndtManageService {
	/**
	 * 당직관리 정보를 관리하기 위해 등록된 당직관리 목록을 조회한다.
	 * @param bndtManageVO - 당직관리 VO
	 * @return List - 당직관리 목록
	 */
	public List<BndtManageVO> selectBndtManageList(BndtManageVO bndtManageVO) throws Exception;
	/**
	 * 당직관리 목록 총 갯수를 조회한다.
	 * @param bndtManageVO - 당직관리 VO
	 * @return int - 당직관리 카운트 수
	 */
	public int selectBndtManageListTotCnt(BndtManageVO bndtManageVO) throws Exception ;
	/**
	 * 등록된 당직관리의 상세정보를 조회한다.
	 * @param bndtManageVO - 당직관리 VO
	 * @return BndtManageVO - 당직관리 VO
	 */
	public BndtManageVO selectBndtManage(BndtManageVO bndtManageVO) throws Exception;
	/**
	 * 당직관리 정보를 신규로 등록한다.
	 * @param bndtManage - 당직관리 model
	 */
	public void insertBndtManage(BndtManage bndtManage) throws Exception;
	/**
	 * 기 등록된 당직관리 정보를 수정한다.
	 * @par

	 */
	public void updtBndtManage(BndtManage bndtManage) throws Exception;
	/**
	 * 기 등록된 당직관리 정보를 삭제한다.
	 * @param bndtManage - 당직관리 model
	 */
	public void deleteBndtManage(BndtManage bndtManage) throws Exception;
    /**
	 * 당직일지 갯수를 조회한다.
	 * @param bndtManageVO - 당직관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectBndtDiaryTotCnt(BndtManage bndtManage) throws Exception;
    /***** 당직 체크관리 *****/
	/**
	 * 당직체크관리 정보를 관리하기 위해 등록된 당직체크관리 목록을 조회한다.
	 * @param bndtCeckManageVO - 당직체크관리 VO
	 * @return List - 당직체크관리 목록
	 */
	public List<BndtCeckManageVO> selectBndtCeckManageList(BndtCeckManageVO bndtCeckManageVO) throws Exception;
	/**
	 * 당직체크관리 목록 총 갯수를 조회한다.
	 * @param bndtCeckManageVO - 당직체크관리 VO
	 * @return int - 당직체크관리 카운트 수
	 */
	public int selectBndtCeckManageListTotCnt(BndtCeckManageVO bndtCeckManageVO) throws Exception ;
	/**
	 * 등록된 당직체크관리의 상세정보를 조회한다.
	 * @param bndtCeckManageVO - 당직체크관리 VO
	 * @return BndtCeckManageVO - 당직체크관리 VO
	 */
	public BndtCeckMa

	/**
	 * 당직체크관리 정보를 신규로 등록한다.
	 * @param bndtCeckManage - 당직체크관리 model
	 */
	public void insertBndtCeckManage(BndtCeckManage bndtCeckManage) throws Exception;
	/**
	 * 기 등록된 당직체크관리 정보를 수정한다.
	 * @param bndtCeckManage - 당직체크관리 model
	 */
	public void updtBndtCeckManage(BndtCeckManage bndtCeckManage) throws Exception;
	/**
	 * 기 등록된 당직체크관리 정보를 삭제한다.
	 * @param bndtCeckManage - 당직체크관리 model
	 */
	public void deleteBndtCeckManage(BndtCeckManage bndtCeckManage) throws Exception;
    /**
	 * 당직체크 중복여부 조회한다.
	 * @param bndtCeckManageVO - 당직체크관리 VO
	 * @return int
	 * @exception Exception
	 */
	public int selectBndtCeckManageDplctAt(BndtCeckManage bndtCeckManage) throws Exception ;
    /***** 당직 일지 *****/
	/**
	 * 등록된 당직일지관리의 상세정보를 조회한다.
	 * @param bndtDiaryVO - 당직일지관리 VO
	 * @return BndtDiaryVO - 당직일지관리 VO
	 */
	public List<?> selectBndtDiary(BndtDiaryVO bndtDiaryVO) throws Exception;
	/**
	 * 당직일지관리 정보를 신규로 등록한다.
	 * @param bndtDiary - 당직일지관리 model
	 */
	public void insertBndtDiary(BndtDiar
/**
 * 개요
 * - 휴가관리에 대한 Service Interface를 정의한다.
 * 
 * 상세내용
 * - 휴가관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 휴가관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
public interface EgovVcatnManageService {
	/**
	 * 휴가관리 정보를 관리하기 위해 등록된 로그인화면이미지 목록을 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return List - 휴가관리 목록
	 */
	public List<VcatnManageVO> selectVcatnManageList(VcatnManageVO vcatnManageVO) throws Exception;
	/**
	 * 휴가관리 목록 총 갯수를 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return int - 휴가관리 카운트 수
	 */
	public int selectVcatnManageListTotCnt(VcatnManageVO vcatnManageVO) throws Exception ;
	/**
	 * 등록된 휴가관리의 상세정보를 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return VcatnManageVO - 휴가관리 VO
	 */
	public VcatnManageVO selectVcatnManage(VcatnManageVO vcatnManageVO) throws Exception;
	/**
	 * 휴가관리 정보를 신규로 등록한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public String insertVcatnManage(VcatnManage vcatnManage, VcatnManageVO vcatnManageVO) 

	/**
	 * 기 등록된 휴가관리 정보를 수정한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public String updtVcatnManage(VcatnManage vcatnManage, VcatnManageVO vcatnManageVO) throws Exception;
	/**
	 * 기 등록된 휴가관리 정보를 삭제한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public void deleteVcatnManage(VcatnManage vcatnManage) throws Exception;
    /**
	 * 휴가일자 중복여부 체크
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return int
	 * @exception Exception
	 */
	public int selectVcatnManageDplctAt(VcatnManageVO vcatnManageVO) throws Exception;
		
	/*** 승인처리관련 ***/
	/**
	 * 휴가관리정보 승인 처리를 위해 신청된 휴가관리 목록을 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return List - 휴가관리 목록
	 */
	public List<VcatnManageVO> selectVcatnManageConfmList(VcatnManageVO vcatnManageVO) throws Exception;
	/**
	 * 휴가관리정보 승인 처리를 위해 신청된 휴가관리 목록 총 갯수를 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return int - 휴가관리 카운트 수
	 */
	public int selectVcatnManageConfmListTotCnt(VcatnManageVO vcatnManageVO) throws Exception ;
	/**
	 * 신청된 휴가를 승인처리한다.
	 * @param vcatnMa
/**
 * Purviewmanage entity. @author MyEclipse Persistence Tools
 */
public class Purviewmanage implements java.io.Serializable {
	private Integer id;
	private Integer purviewId;
	private Integer employeManage;
	private Integer orderManage;
	private Integer sortManage;
	private Integer dishManage;
	/** default constructor */
	public Purviewmanage() {
	}
	/** minimal constructor */
	public Purviewmanage(Integer purviewId) {
		this.purviewId = purviewId;
	}
	/** full constructor */
	public Purviewmanage(Integer purviewId, Integer employeManage,
			Integer orderManage, Integer sortManage, Integer dishManage) {
		this.purviewId = purviewId;
		this.employeManage = employeManage;
		this.orderManage = orderManage;
		this.sortManage = sortManage;
		this.dishManage = dishManage;
	}
	public Integer getId() {
		return this.id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public Integer getPurviewId() {
		return this.purviewId;
	}
	public void setPurviewId(Integer purviewId) {
		this.pu
/**
 * 롤관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Service("egovRoleManageService")
public class EgovRoleManageServiceImpl extends EgovAbstractServiceImpl implements EgovRoleManageService {
	@Resource(name="roleManageDAO")
	public RoleManageDAO roleManageDAO;
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception {
		return roleManageDAO.selectRole(roleManageVO);
	}
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception {
		return roleManageDAO.selectR

	}
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception {
		roleManageDAO.deleteRole(roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void updateRole(RoleManage roleManage) throws Exception {
		roleManageDAO.updateRole(roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 등록
	 * @param roleManage RoleManage
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO insertRole(RoleManage roleManage, RoleManageVO roleManageVO) throws Exception {
		roleManageDAO.insertRole(roleManage);	
		roleManageVO.setRoleCode(roleManage.getRoleCode());
		return roleManageDAO.selectRole(roleManageVO);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @param roleManageVO RoleManageVO
	 * @return int
	 * @exception Exception
	 */
	public int selectRoleListT
/**
 * 这是一个开源的软件，请在LGPLv3下合法使用、修改或重新发布。
 * 
 * @author 陈侃(cknet@126.com, 13910090885)
 */
public interface IProcessManager extends IVariableAware<ProcessBean>, IListenerAware<ProcessBean>,
		IScriptAware<ProcessBean>, IBeanManagerAware<ProcessBean> {
	/**
	 * 获取流程模型
	 * 
	 * @param process
	 * @return
	 */
	ProcessModelBean getProcessModel(ProcessBean process);
	/**
	 * 创建流程实例
	 * 
	 * @param initiateItem
	 *           启动项
	 * @param topic
	 *           主题
	 * @return
	 */
	ProcessBean startProcess(InitiateItem initiateItem, String topic);
	ProcessBean startProcess(InitiateItem initiateItem);
	/**
	 * 非人工方式启动流程，一般用在子流程及接口方式
	 * 
	 * @param processModel
	 * @param variables
	 * @param properties
	 * @param topic
	 * @return
	 */
	ProcessBean startProcess(ProcessModelBean processModel, KVMap variables, Properties properties,
			String topic);
	IDataQuery<ProcessBean> getProcessList(ProcessModelBean processModel, EProcessStatus... status);
	/**
	 * 挂起及恢复流程
	 * 
	 * @param process
	 * @par
/**
 * 公告管理Service
 * 
 * @author like
 * @version 2017-08-03
 */
@Service
@Transactional(readOnly = true)
public class NoticeManageService extends CrudService<NoticeManageDao, NoticeManage> {
	public NoticeManage get(String id) {
		return super.get(id);
	}
	public List<NoticeManage> findList(NoticeManage noticeManage) {
		return super.findList(noticeManage);
	}
	public Page<NoticeManage> findPage(Page<NoticeManage> page, NoticeManage noticeManage) {
		return super.findPage(page, noticeManage);
	}
	@Transactional(readOnly = false)
	public void save(NoticeManage noticeManage) {
		super.save(noticeManage);
	}
	@Transactional(readOnly = false)
	public void delete(NoticeManage noticeManage) {
		super.delete(noticeManage);
	}
	/**
	 * 获取最新一条公告
	 * 
	 * @param villageInfoId
	 *            楼盘ID
	 * @return
	 */
	public NoticeManage getLatestNotice(String villageInfoId) {
		return dao.getLatestNotice(villageInfoId);
	}
	/**
	 * 公告列表
	 * 
	 * @param villageInfoId
	 * @return
	 */
	public List<N
/**
 * Project: phoenix-router
 * 
 * File Created at 2013-4-12
 * $Id$
 * 
 * Copyright 2010 dianping.com.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Dianping Company. ("Confidential Information").  You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with dianping.com.
 */
/**
 * TODO Comment of ServiceScannerTest
 * 
 * @author Leo Liang
 * 
 */
public class ServiceScannerTest {
    @Test
    public void test() {
        List<String> expected = Arrays.asList(new String[] {
        Scanner<String> scanner = new ServiceScanner();
        Assert.assertTrue(expected.equals(scanner.scan(FileUtils.toFile(this.getClass().getResource("service.xml")))));
    }
    @Test
    public void testhasNoService() {
        Scanner<String> scanner = new ServiceScanner();
        Assert.assertTrue(scanner.scan(FileUtils.toFile(this.getClass().getRe
/**
 * 권한관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Service("egovAuthorManageService")
public class EgovAuthorManageServiceImpl extends EgovAbstractServiceImpl implements EgovAuthorManageService {
    
	@Resource(name="authorManageDAO")
    private AuthorManageDAO authorManageDAO;
    /**
	 * 권한 목록을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return List<AuthorManageVO>
	 * @exception Exception
	 */
    public List<AuthorManageVO> selectAuthorList(AuthorManageVO authorManageVO) throws Exception {
        return authorManageDAO.selectAuthorList(authorManageVO);
    }
    
	/**
	 * 권한을 등록한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void insertAuthor(AuthorManage authorManage) throws Exceptio

    	authorManageDAO.insertAuthor(authorManage);
    }
    /**
	 * 권한을 수정한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void updateAuthor(AuthorManage authorManage) throws Exception {
    	authorManageDAO.updateAuthor(authorManage);
    }
    /**
	 * 권한을 삭제한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void deleteAuthor(AuthorManage authorManage) throws Exception {
    	authorManageDAO.deleteAuthor(authorManage);
    }
    /**
	 * 권한을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return AuthorManageVO
	 * @exception Exception
	 */
    public AuthorManageVO selectAuthor(AuthorManageVO authorManageVO) throws Exception {
    	AuthorManageVO resultVO = authorManageDAO.selectAuthor(authorManageVO);
        if (resultVO == null)
            throw processException("info.nodata.msg");
        return resultVO;
    }
    /**
	 * 권한 목록 카운트를 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return int
	 * @exception Exc
@Action (value="foreignManageAssign",results={
		@Result(name="add",location="/ForeignManageaddoredit.jsp"),
		@Result(name="edit",location="/ForeignManageaddoredit.jsp"),
		@Result(name="list",location="/ForeignManagelist.jsp")})
@Controller
public class ForeignManageAssign extends ActionSupport{
	private ForeignManageViewModel cvm;
	 private String foreignId;
	 
	 @Resource(name = "foreignManageService")
	private IForeignManageService foreignManageService;
	private List list;
	public ForeignManageViewModel getCvm() {
		return cvm;
	}
	public void setCvm(ForeignManageViewModel cvm) {
		this.cvm = cvm;
	}
	public String getForeignId() {
		return foreignId;
	}
	public void setForeignId(String foreignManageId) {
		this.foreignId = foreignManageId;
	}
	public String add(){
		ForeignManageViewModel foreignManageViewModel=new ForeignManageViewModel();
		
		ForeignManage foreignManage = new ForeignManage();
		
		ViewClass vc=new ViewClass();
		 vc.action="foreignManageAction!add";
		 vc.mess

		 foreignManageViewModel.viewClass=vc;
		
		ViewStringSet viewStringSet = new ViewStringSet(foreignManage);
		
		foreignManageViewModel.setInput(viewStringSet.Addset());
		
		cvm = foreignManageViewModel;
		
		
		return "add";
		
	}
	public String edit(){
		
		ForeignManageViewModel foreignManageViewModel=new ForeignManageViewModel();
		
		ForeignManage foreignManage = foreignManageService.edit(Integer.parseInt(foreignId));
		
		ViewClass vc=new ViewClass();
		 vc.action="foreignManageAction!edit";
		 vc.message="<div class='col-md-6 col-md-offset-1'><h2>编辑外来人口信息</h2></div>";
		 foreignManageViewModel.viewClass=vc;
		
		ViewStringSet viewStringSet = new ViewStringSet(foreignManage);
		
		foreignManageViewModel.setInput(viewStringSet.updateset());
		
		cvm = foreignManageViewModel;
		
		
		return "edit";
		
	}
	public String list() throws IllegalArgumentException, IllegalAccessException, IntrospectionException{
		
		 ForeignManageViewModel foreignManageViewModel=new ForeignManageViewM
public class ServiceFactory {
	private AccountService accountService;
	private ConsumptionService consumptionService;
	private OutletService outletService;
	private RfidService rfidService;
	private SchedulingService schedulingService;
	private StatisticService statisticService;
	private SystemService systemService;
	private UserService userService;
	public ServiceFactory(){
		accountService = new AccountService();
		consumptionService = new ConsumptionService();
		outletService = new OutletService();
		rfidService = new RfidService();
		schedulingService = new SchedulingService();
		statisticService = new StatisticService();
		systemService = new SystemService();
		userService = new UserService();
	}
	public ServiceFactory(AccountService accountService, ConsumptionService consumptionService, OutletService outletService, 
			RfidService rfidService, SchedulingService schedulingService, StatisticService statisticService, SystemService systemService,
			UserService userService){
		this.a

		this.consumptionService = consumptionService;
		this.outletService = outletService;
		this.rfidService = rfidService;
		this.schedulingService = schedulingService;
		this.statisticService = statisticService;
		this.systemService = systemService;
		this.userService = userService;
	}
	public AccountService getAccountService() {
		return accountService;
	}
	public void setAccountService(AccountService accountService) {
		this.accountService = accountService;
	}
	public ConsumptionService getConsumptionService() {
		return consumptionService;
	}
	public void setConsumptionService(ConsumptionService consumptionService) {
		this.consumptionService = consumptionService;
	}
	public OutletService getOutletService() {
		return outletService;
	}
	public void setOutletService(OutletService outletService) {
		this.outletService = outletService;
	}
	public RfidService getRfidService() {
		return rfidService;
	}
	public void setRfidService(RfidService rfidService) {
		this.rfidService = rfidServic
/**
 * Service管理器
 * 
 * @author Nanlei
 * 
 */
public class ServiceManager {
	private LogService logService;
	private AboutService aboutService;
	private ContactService contactService;
	private CityServcie cityServcie;
	private SpecialService specialService;
	private LinkService linkService;
	private PicService picService;
	private UserService userService;
	private ArticleService articleService;
	private FeedbackService feedbackService;
	private ReservationService reservationService;
	private HotelService hotelService;
	private RecommendService recommendService;
	private WeatherService weatherService;
	private ResourceService resourceService;
	private SendResourceService sendResourceService;
	private SubscriberService subscriberService;
	private TourService tourService;
	private ProductService productService;
	private ExchangeService exchangeService;
	private IndexService indexService;
	private FrontService frontService;
	public ReservationService getReservationService() {
		return re

	}
	public void setReservationService(ReservationService reservationService) {
		this.reservationService = reservationService;
	}
	public FeedbackService getFeedbackService() {
		return feedbackService;
	}
	public void setFeedbackService(FeedbackService feedbackService) {
		this.feedbackService = feedbackService;
	}
	public LinkService getLinkService() {
		return linkService;
	}
	public void setLinkService(LinkService linkService) {
		this.linkService = linkService;
	}
	public SpecialService getSpecialService() {
		return specialService;
	}
	public void setSpecialService(SpecialService specialService) {
		this.specialService = specialService;
	}
	public CityServcie getCityServcie() {
		return cityServcie;
	}
	public void setCityServcie(CityServcie cityServcie) {
		this.cityServcie = cityServcie;
	}
	public ContactService getContactService() {
		return contactService;
	}
	public void setContactService(ContactService contactService) {
		this.contactService = contactService;
	}
	public A

		return aboutService;
	}
	public void setAboutService(AboutService aboutService) {
		this.aboutService = aboutService;
	}
	public LogService getLogService() {
		return logService;
	}
	public void setLogService(LogService logService) {
		this.logService = logService;
	}
	public PicService getPicService() {
		return picService;
	}
	public void setPicService(PicService picService) {
		this.picService = picService;
	}
	public UserService getUserService() {
		return userService;
	}
	public void setUserService(UserService userService) {
		this.userService = userService;
	}
	public ArticleService getArticleService() {
		return articleService;
	}
	public void setArticleService(ArticleService articleService) {
		this.articleService = articleService;
	}
	public HotelService getHotelService() {
		return hotelService;
	}
	public void setHotelService(HotelService hotelService) {
		this.hotelService = hotelService;
	}
	public RecommendService getRecommendService() {
		return recommendService;
	}
	

		this.recommendService = recommendService;
	}
	public WeatherService getWeatherService() {
		return weatherService;
	}
	public void setWeatherService(WeatherService weatherService) {
		this.weatherService = weatherService;
	}
	public ResourceService getResourceService() {
		return resourceService;
	}
	public void setResourceService(ResourceService resourceService) {
		this.resourceService = resourceService;
	}
	public SubscriberService getSubscriberService() {
		return subscriberService;
	}
	public void setSubscriberService(SubscriberService subscriberService) {
		this.subscriberService = subscriberService;
	}
	public TourService getTourService() {
		return tourService;
	}
	public void setTourService(TourService tourService) {
		this.tourService = tourService;
	}
	public ProductService getProductService() {
		return productService;
	}
	public void setProductService(ProductService productService) {
		this.productService = productService;
	}
	public ExchangeService getExchangeService()
/**
 * 
 */
/**
 * Email Engine contains all the services for email operations.
 * 
 * @author JiTing
 */
public class EmailEngine {
	private EmailService emailService;
	private HistoryService historyService;
	private TemplateService templateService;
	/**
	 * @return the emailService
	 */
	public EmailService getEmailService() {
		return emailService;
	}
	/**
	 * @param emailService
	 *            the emailService to set
	 */
	public void setEmailService(EmailService emailService) {
		this.emailService = emailService;
	}
	/**
	 * @return the historyService
	 */
	public HistoryService getHistoryService() {
		return historyService;
	}
	/**
	 * @param historyService
	 *            the historyService to set
	 */
	public void setHistoryService(HistoryService historyService) {
		this.historyService = historyService;
	}
	/**
	 * @return the templateService
	 */
	public TemplateService getTemplateService() {
		return templateService;
	}
	/**
	 * @param templateService
	 *            the templa
public class SupplierIntegrityManageService implements ISupplierIntegrityManageService {
  private IBaseDao baseDao;
  private IWorkflowDao workflowDao;
  private WFEngineAdapter wfEngineAdapter;
  private ISupplierIntegrityManageDao supplierIntegrityManageDao;
  public IBaseDao getBaseDao() {
    return baseDao;
  }
  public void setBaseDao(IBaseDao baseDao) {
    this.baseDao = baseDao;
  }
  public IWorkflowDao getWorkflowDao() {
    return workflowDao;
  }
  public void setWorkflowDao(IWorkflowDao workflowDao) {
    this.workflowDao = workflowDao;
  }
  public WFEngineAdapter getWfEngineAdapter() {
    return wfEngineAdapter;
  }
  public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {
    this.wfEngineAdapter = wfEngineAdapter;
  }
  public ISupplierIntegrityManageDao getSupplierIntegrityManageDao() {
    return supplierIntegrityManageDao;
  }
  public void setSupplierIntegrityManageDao(
  ISupplierIntegrityManageDao supplierIntegrityManageDao) {
    this.supplierIntegr
public interface CarSellManageService {
	public Boolean addSellInfor(CarSellManageVo carSellManageVo)throws Exception;
	public List getReserveCode(CarSellManageVo carSellManageVo)throws Exception;
	public Json getInforById(CarSellManageVo carSellManageVo)throws Exception;
	public Json findSellInfor(CarSellManageVo carSellManageVo)throws Exception;
	public boolean deleteSellInfor(CarSellManageVo carSellManageVo)throws Exception;
	public Boolean updateSellInfor(CarSellManageVo carSellManageVo)throws Exception;
	public Message doAuditSellInfor(CarSellManageVo carSellManageVo)throws Exception;
	public List getPdiCheck(CarSellManageVo carSellManageVo)throws Exception;
	public Json findFactoryPdiCheck(CarSellManageVo carSellManageVo)throws Exception;
	public void savePDI(CarSellManageVo carSellManageVo)throws Exception;
	public Msg doAabandon(CarSellManageVo carSellManageVo)throws Exception;
	public Json getCarInfor(CarSellManageVo carSellManageVo)throws Exception;
	public Json getcustomInfo
/**
 * 개요
 * - 팝업창에 대한 ServiceImpl을 정의한다.
 * 
 * 상세내용
 * - 팝업창에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 팝업창의 조회기능은 목록조회, 상세조회로, 사용자화면 보기로 구분된다.
 * @author 이창원
 * @version 1.0
 * @created 05-8-2009 오후 2:19:58
 */
@Service("egovPopupManageService")
public class EgovPopupManageServiceImpl extends AbstractServiceImpl implements EgovPopupManageService {
        @Resource(name = "popupManageDAO")
	public PopupManageDAO dao;
        @Resource(name = "egovPopupManageIdGnrService")
        private EgovIdGnrService idgenService;
        
	public EgovPopupManageServiceImpl(){}
	/**
	 * 기 등록된 팝업창정보를 삭제한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 * 
	 * @param popupManage
	 */
	public void deletePopup(PopupManageVO popupManageVO) throws Exception {
	    dao.deletePopup(popupManageVO);
	}
	/**
	 * 팝업창정보를 신규로 등록한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 * 
	 * @param popupManage
	 */
	public void insertPopup(PopupManageVO popupManageVO) throws Exce

	    String sMakeId = idgenService.getNextStringId();
	    popupManageVO.setPopupId(sMakeId);
	    dao.insertPopup(popupManageVO);
	}
        /**
         * 기 등록된 팝업창정보를 수정한다.
         * @param popupManage - 팝업창 model
         * @return boolean - 반영성공 여부
         * 
         * @param popupManage
         */
        public void updatePopup(PopupManageVO popupManageVO) throws Exception {
                dao.updatePopup(popupManageVO);
        }
	/**
	 * 팝업창을 사용자 화면에서 볼수 있는 정보들을 조회한다.
	 * @param popupManageVO - 팝업창 Vo
	 * @return popupManageVO - 팝업창 Vo
	 * 
	 * @param popupManageVO
	 */
	public PopupManageVO selectPopup(PopupManageVO popupManageVO) throws Exception {
		return (PopupManageVO)dao.selectPopup(popupManageVO);
	}
	/**
	 * 팝업창를 관리하기 위해 등록된 팝업창목록을 조회한다.
	 * @param popupManageVO - 팝업창 Vo
	 * @return List - 팝업창 목록
	 * 
	 * @param popupManageVO
	 */
	public List selectPopupList(PopupManageVO popupManageVO) throws Exception {
		return (List)dao.selectPopupList(popupManageVO);
	}
  
/**
 * 일반회원관리에 관한비지니스클래스를 정의한다.
 * @author 공통서비스 개발팀 조재영
 * @since 2009.04.10
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.04.10  조재영          최초 생성
 *
 * </pre>
 */
@Service("mberManageService")
public class EgovMberManageServiceImpl extends EgovAbstractServiceImpl implements EgovMberManageService {
	/** userManageDAO */
	@Resource(name="userManageDAO")
	private UserManageDAO userManageDAO;
	/** mberManageDAO */
	@Resource(name="mberManageDAO")
	private MberManageDAO mberManageDAO;
	/** entrprsManageDAO */
	@Resource(name="entrprsManageDAO")
	private EntrprsManageDAO entrprsManageDAO;
	/** egovUsrCnfrmIdGnrService */
	@Resource(name="egovUsrCnfrmIdGnrService")
	private EgovIdGnrService idgenService;
	/**
	 * 사용자의 기본정보를 화면에서 입력하여 항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param mberManageVO 일반회원 등록정보
	 * @return result 등록결과
	 * @throws Exception
	 */
	public String 

		String uniqId = "";
		if (mberManageVO.getUniqId() == null || mberManageVO.getUniqId().equals("")){
			uniqId = idgenService.getNextStringId();
			mberManageVO.setUniqId(uniqId);
		}
		String pass = EgovFileScrty.encryptPassword(mberManageVO.getPassword());
		mberManageVO.setPassword(pass);
		
		String result = mberManageDAO.insertMber(mberManageVO);
		return result;
	}
	/**
	 * 기 등록된 사용자 중 검색조건에 맞는 일반회원의 정보를 데이터베이스에서 읽어와 화면에 출력
	 * @param uniqId 상세조회대상 일반회원아이디
	 * @return mberManageVO 일반회원상세정보
	 * @throws Exception
	 */
	public MberManageVO selectMber(String uniqId) {
		MberManageVO mberManageVO = mberManageDAO.selectMber(uniqId);		
		return mberManageVO;
	}
	/**
	 * 기 등록된 사용자 중 검색조건에 맞는 일반회원의 정보를 데이터베이스에서 읽어와 화면에 출력
	 * @param mberId 상세조회대상 일반회원아이디
	 * @return mberManageVO 일반회원상세정보
	 * @throws Exception
	 */
	public MberManageVO selectMberById(String mberId) {
		MberManageVO mberManageVO = mberManageDAO.selectMberById(mberId);		
		return mberManageVO;
	}
	/**
	 * 기 등록된 회원 중 검색조건에 

	 * @param userSearchVO 검색조건
	 * @return List<MberManageVO> 일반회원목록정보
	 */
	public List<MberManageVO> selectMberList(UserDefaultVO userSearchVO) {
		return mberManageDAO.selectMberList(userSearchVO);
	}
    /**
     * 일반회원 총 갯수를 조회한다.
     * @param userSearchVO 검색조건
     * @return 일반회원총갯수(int) 
     */
    public int selectMberListTotCnt(UserDefaultVO userSearchVO) {
    	return mberManageDAO.selectMberListTotCnt(userSearchVO);
    }
	/**
	 * 화면에 조회된 일반회원의 기본정보를 수정하여 항목의 정합성을 체크하고 수정된 데이터를 데이터베이스에 반영
	 * @param mberManageVO 일반회원수정정보
	 * @throws Exception
	 */
	public void updateMber(MberManageVO mberManageVO) throws Exception {
		mberManageDAO.updateMber(mberManageVO);
		
		if(mberManageVO.getMberManageAwardVOList() != null){
			mberManageDAO.deleteAward(mberManageVO.getMberId());
			mberManageDAO.insertAward(mberManageVO.getMberManageAwardVOList());
		}
		
		if(mberManageVO.getMberManageCareerVOList() != null){
			mberManageDAO.deleteCareer(mberManageVO.getMberId());
			mberManageDAO.

		}
		if(mberManageVO.getMberManageDegreeVOList() != null){
			mberManageDAO.deleteDegree(mberManageVO.getMberId());
			mberManageDAO.insertDegree(mberManageVO.getMberManageDegreeVOList());
		}
		if(mberManageVO.getMberManagePaperVOList() != null){
			mberManageDAO.deletePaper(mberManageVO.getMberId());
			mberManageDAO.insertPaper(mberManageVO.getMberManagePaperVOList());
		}
		if(mberManageVO.getMberManageActiveTyVOList() != null){
			mberManageDAO.deleteActiveTy(mberManageVO.getMberId());
			mberManageDAO.insertActiveTy(mberManageVO.getMberManageActiveTyVOList());
		}
	}
	/**
	 * 신규: 화면에 조회된 일반회원의 기본정보를 수정하여 항목의 정합성을 체크하고 수정된 데이터를 데이터베이스에 반영
	 * @param mberManageVO 일반회원수정정보
	 * @throws Exception
	 */
	public void updateMberMain(MberManageVO mberManageVO) throws Exception {
		mberManageDAO.updateMberMain(mberManageVO);
	}
	/**
	 * 신규:화면에 조회된 일반회원의 기본정보를 수정하여 항목의 정합성을 체크하고 수정된 데이터를 데이터베이스에 반영
	 * @param mberManageVO 일반회원수정정보
	 * @throws Exception
	 */
	public void updateMberSub(MberM

		mberManageDAO.updateMberSub(mberManageVO);
		
		if(mberManageVO.getMberManageAwardVOList() != null){
			mberManageDAO.deleteAward(mberManageVO.getMberId());
			mberManageDAO.insertAward(mberManageVO.getMberManageAwardVOList());
		}
		
		if(mberManageVO.getMberManageCareerVOList() != null){
			mberManageDAO.deleteCareer(mberManageVO.getMberId());
			mberManageDAO.insertCareer(mberManageVO.getMberManageCareerVOList());
		}
		if(mberManageVO.getMberManageDegreeVOList() != null){
			mberManageDAO.deleteDegree(mberManageVO.getMberId());
			mberManageDAO.insertDegree(mberManageVO.getMberManageDegreeVOList());
		}
		if(mberManageVO.getMberManagePaperVOList() != null){
			mberManageDAO.deletePaper(mberManageVO.getMberId());
			mberManageDAO.insertPaper(mberManageVO.getMberManagePaperVOList());
		}
		
	}
	/**
	 * 화면에 조회된 사용자의 정보를 데이터베이스에서 삭제
	 * @param checkedIdForDel 삭제대상 일반회원아이디
	 * @throws Exception
	 */
	public void deleteMber(String checkedIdForDel)  {
		String [] delId = checkedIdForDe

		for (int i=0; i<delId.length ; i++){
			String [] id = delId[i].split(":");
			if (id[0].equals("USR03")){
				userManageDAO.deleteUser(id[1]);				
			}else if(id[0].equals("USR01")){
				mberManageDAO.deleteMber(id[1]);
			}else if(id[0].equals("USR02")){
				entrprsManageDAO.deleteEntrprsmber(id[1]);
			}
		}
	}
	/**
	 * 일반회원 약관확인
	 * @param stplatId 일반회원약관아이디
	 * @return 일반회원약관정보(List)
	 * @throws Exception
	 */
	public List selectStplat(String stplatId)  {
        return mberManageDAO.selectStplat(stplatId);
	}
	/**
	 * 일반회원암호수정
	 * @param mberManageVO 일반회원수정정보(비밀번호)
	 * @throws Exception
	 */
	public void updatePassword(MberManageVO mberManageVO) {
		mberManageDAO.updatePassword(mberManageVO);
	}
	/**
	 * 일반회원이 비밀번호를 기억하지 못할 때 비밀번호를 찾을 수 있도록 함
	 * @param passVO 일반회원암호 조회조건정보
	 * @return mberManageVO 일반회원암호정보
	 * @throws Exception
	 */
	public MberManageVO selectPassword(MberManageVO passVO) {
		MberManageVO mberManageVO = mberManageDAO.selectPassword(passVO);
		return mberManag
public class AbstractManagedBean implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 2122641597484555564L;
	@ManagedProperty(value = "#{baseService}")
	private IBaseService baseService;
	@ManagedProperty(value = "#{assetTypeService}")
	private IAssetTypeService assetTypeService;
	@ManagedProperty(value = "#{auditService}")
	private IAuditService auditService;
	@ManagedProperty(value = "#{auditTypeService}")
	private IAuditTypeService auditTypeService;
	@ManagedProperty(value = "#{customerService}")
	private ICustomerService customerService;
	@ManagedProperty(value = "#{loanService}")
	private ILoanService loanService;
	@ManagedProperty(value = "#{meetingService}")
	private IMeetingService meetingService;
	@ManagedProperty(value = "#{occupationTypeService}")
	private IOccupationTypeService occupationTypeService;
	@ManagedProperty(value = "#{employeeService}")
	private IEmployeeService employeeService;
	@ManagedProperty(value = "#{portalUserService}")
	

	@ManagedProperty(value = "#{riskRatingService}")
	private IRiskRatingService riskRatingService;
	@ManagedProperty(value = "#{loginBean}")
	private LoginManagedBean loginBean;
	public void addFacesError(String errorMessage) {
		FacesContext.getCurrentInstance().addMessage(
				null,
				new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMessage,
						errorMessage));
	}
	public void addFacesWarning(String warningMessage) {
		FacesContext.getCurrentInstance().addMessage(
				null,
				new FacesMessage(FacesMessage.SEVERITY_WARN, warningMessage,
						warningMessage));
	}
	public void addFacesInfo(String infoMessage) {
		FacesContext.getCurrentInstance().addMessage(
				null,
				new FacesMessage(FacesMessage.SEVERITY_INFO, infoMessage,
						""));
	}
	public IBaseService getBaseService() {
		return baseService;
	}
	public void setBaseService(IBaseService baseService) {
		this.baseService = baseService;
	}
	public IAssetTypeService getAssetTypeService() {
		return assetTypeService;
	}
	

		this.assetTypeService = assetTypeService;
	}
	public IAuditService getAuditService() {
		return auditService;
	}
	public void setAuditService(IAuditService auditService) {
		this.auditService = auditService;
	}
	public IAuditTypeService getAuditTypeService() {
		return auditTypeService;
	}
	public void setAuditTypeService(IAuditTypeService auditTypeService) {
		this.auditTypeService = auditTypeService;
	}
	public ICustomerService getCustomerService() {
		return customerService;
	}
	public void setCustomerService(ICustomerService customerService) {
		this.customerService = customerService;
	}
	public ILoanService getLoanService() {
		return loanService;
	}
	public void setLoanService(ILoanService loanService) {
		this.loanService = loanService;
	}
	public IMeetingService getMeetingService() {
		return meetingService;
	}
	public void setMeetingService(IMeetingService meetingService) {
		this.meetingService = meetingService;
	}
	public IOccupationTypeService getOccupationTypeService() 

		return occupationTypeService;
	}
	public void setOccupationTypeService(
			IOccupationTypeService occupationTypeService) {
		this.occupationTypeService = occupationTypeService;
	}
	public LoginManagedBean getLoginBean() {
		return loginBean;
	}
	public void setLoginBean(LoginManagedBean loginBean) {
		this.loginBean = loginBean;
	}
	public IEmployeeService getEmployeeService() {
		return employeeService;
	}
	public void setEmployeeService(IEmployeeService employeeService) {
		this.employeeService = employeeService;
	}
	public IPortalUserService getUserService() {
		return userService;
	}
	public void setUserService(IPortalUserService userService) {
		this.userService = userService;
	}
	/**
	 * @return the riskRatingService
	 */
	public IRiskRatingService getRiskRatingService() {
		return riskRatingService;
	}
	/**
	 * @param riskRatingService the riskRatingService to set
	 */
	public void setRiskRatingService(IRiskRatingService riskRatingService) {
		this.riskRatingService = riskRat
public class ProcessDefinitionProvider {
	public static ProcessEngine getApplianceProcess() {
		ProcessEngine processContainer = new ProcessEngine();
		ProcessItem delData1 = ProcessItemFactory.getProcessElement(ProcessItemType.ACTION, "delData1", null);
		processContainer.addElement(delData1);
		ProcessItem delData2 = ProcessItemFactory.getProcessElement(ProcessItemType.ACTION, "delData2", null);
		processContainer.addElement(delData2);
		ProcessItem revoke = ProcessItemFactory.getProcessElement(ProcessItemType.ACTION, "revoke", null);
		processContainer.addElement(revoke);
		ProcessItem acknowledgeData = ProcessItemFactory.getProcessElement(ProcessItemType.ACTION, "acknowledgeData", null);
		processContainer.addElement(acknowledgeData);
		ProcessItem infoMail = ProcessItemFactory.getProcessElement(ProcessItemType.ACTION, "infoMail", null);
		processContainer.addElement(infoMail);
		ProcessItem confStoreData = ProcessItemFactory.getProcessElement(ProcessItemType.ACTION, "confStoreData

		processContainer.addElement(confStoreData);
		ProcessItem ackNoStorage = ProcessItemFactory.getProcessElement(ProcessItemType.ACTION, "ackNoStorage", null);
		processContainer.addElement(ackNoStorage);
		ProcessItem askStoreData = ProcessItemFactory.getProcessElement(ProcessItemType.ACTION, "askStoreData", null);
		processContainer.addElement(askStoreData);
		ProcessItem gatherData = ProcessItemFactory.getProcessElement(ProcessItemType.TASK, "gatherData", null);
		processContainer.addElement(gatherData);
		ProcessItem sightData = ProcessItemFactory.getProcessElement(ProcessItemType.TASK, "sightData", null);
		processContainer.addElement(sightData);
		ProcessItem appoint = ProcessItemFactory.getProcessElement(ProcessItemType.TASK, "appoint", null);
		processContainer.addElement(appoint);
		ProcessItem writeHrDB = ProcessItemFactory.getProcessElement(ProcessItemType.TASK, "writeHrDB", null);
		processContainer.addElement(writeHrDB);
		ProcessItem storePotDB = ProcessItemFactory.getPro

		processContainer.addElement(storePotDB);
		ProcessItem storeAnswer = ProcessItemFactory.getProcessElement(ProcessItemType.TASK, "storeAnswer", null);
		processContainer.addElement(storeAnswer);
		ProcessItem timer1 = ProcessItemFactory.getProcessElement(ProcessItemType.WAIT, "timer1", null);
		processContainer.addElement(timer1);
		ProcessItem join1 = ProcessItemFactory.getProcessElement(ProcessItemType.JOIN, "join1", null);
		processContainer.addElement(join1);
		ProcessItem join2 = ProcessItemFactory.getProcessElement(ProcessItemType.JOIN, "join2", null);
		processContainer.addElement(join2);
		ProcessItem fork1 = ProcessItemFactory.getProcessElement(ProcessItemType.FORK, "fork1", null);
		processContainer.addElement(fork1);
		ProcessItem fork2 = ProcessItemFactory.getProcessElement(ProcessItemType.FORK, "fork2", null);
		processContainer.addElement(fork2);
		ProcessItem fork3 = ProcessItemFactory.getProcessElement(ProcessItemType.FORK, "fork3", null);
		processContainer.addElemen

		ProcessItem fork4 = ProcessItemFactory.getProcessElement(ProcessItemType.FORK, "fork4", null);
		processContainer.addElement(fork4);
		ProcessItem start = ProcessItemFactory.getProcessElement(ProcessItemType.START, "start", null);
		processContainer.addElement(start);
		ProcessItem end1 = ProcessItemFactory.getProcessElement(ProcessItemType.END, "end1", null);
		processContainer.addElement(end1);
		ProcessItem end2 = ProcessItemFactory.getProcessElement(ProcessItemType.END, "end2", null);
		processContainer.addElement(end2);
		ProcessItem end3 = ProcessItemFactory.getProcessElement(ProcessItemType.END, "end3", null);
		processContainer.addElement(end3);
		ProcessItem end4 = ProcessItemFactory.getProcessElement(ProcessItemType.END, "end4", null);
		processContainer.addElement(end4);
		/* 01 */processContainer.relateParentFromTo("revoke", "end1");
		/* 02 */processContainer.relateParentFromTo("delData1", "revoke");
		/* 03 */processContainer.relateParentFromTo("join1", "delData1");
		

		/* 06 */processContainer.relateParentFromTo("fork4", "join1");
		/* 07 */processContainer.relateParentFromTo("fork2", "fork4");
		/* 08 */processContainer.relateParentFromTo("fork2", "writeHrDB");
		/* 09 */processContainer.relateParentFromTo("writeHrDB", "infoMail");
		/* 10 */processContainer.relateParentFromTo("infoMail", "end2");
		/* 11 */processContainer.relateParentFromTo("fork1", "join2");
		/* 12 */processContainer.relateParentFromTo("fork1", "askStoreData");
		/* 13 */processContainer.relateParentFromTo("sightData", "fork1");
		/* 14 */processContainer.relateParentFromTo("acknowledgeData", "sightData");
		/* 15 */processContainer.relateParentFromTo("gatherData", "acknowledgeData");
		/* 16 */processContainer.relateParentFromTo("start", "gatherData");
		/* 17 */processContainer.relateParentFromTo("askStoreData", "storeAnswer");
		/* 18 */processContainer.relateParentFromTo("storeAnswer", "fork3");
		/* 19 */processContainer.relateParentFromTo("fork3", "ackNoStorage");
		/* 

		/* 21 */processContainer.relateParentFromTo("ackNoStorage", "delData2");
		/* 22 */processContainer.relateParentFromTo("confStoreData", "storePotDB");
		/* 23 */processContainer.relateParentFromTo("delData2", "end3");
		/* 24 */processContainer.relateParentFromTo("storePotDB", "end4");
		/* 25 */processContainer.relateParentFromTo("timer1", "join2");
		/* 26 */processContainer.relateParentFromTo("join2", "appoint");
		/* 27 */processContainer.relateParentFromTo("appoint", "fork2");
		/* 99 */processContainer.relateParentFromTo("fork4", "timer1");
		/*
		 * processContainer.addTaskResolver("gatherData",
		 * GenericTrueResolver.class);
		 * processContainer.addTaskResolver("sightData",
		 * GenericTrueResolver.class);
		 * processContainer.addTaskResolver("appoint",
		 * GenericTrueResolver.class);
		 * processContainer.addTaskResolver("writeHrDB",
		 * GenericTrueResolver.class);
		 * processContainer.addTaskResolver("storePotDB",
		 * GenericTrueResolver.class);
		 * processContain
/**
 * 롤관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Service("egovRoleManageService")
public class EgovRoleManageServiceImpl extends EgovAbstractServiceImpl implements EgovRoleManageService {
	@Resource(name="roleManageDAO")
	public RoleManageDAO roleManageDAO;
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception {
		return roleManageDAO.selectRole(roleManageVO);
	}
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception {
		return roleManageDAO.selectR

	}
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception {
		roleManageDAO.deleteRole(roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void updateRole(RoleManage roleManage) throws Exception {
		roleManageDAO.updateRole(roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 등록
	 * @param roleManage RoleManage
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO insertRole(RoleManage roleManage, RoleManageVO roleManageVO) throws Exception {
		roleManageDAO.insertRole(roleManage);	
		roleManageVO.setRoleCode(roleManage.getRoleCode());
		return roleManageDAO.selectRole(roleManageVO);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @param roleManageVO RoleManageVO
	 * @return int
	 * @exception Exception
	 */
	public int selectRoleListT
/**
 * Copyright 2010 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
public class DefaultProcessInstanceManager implements ProcessInstanceManager {
    private Map<Long, ProcessInstance> processInstances = new ConcurrentHashMap<Long, ProcessInstance>();
    private AtomicLong processCounter = new AtomicLong(0);
    public void addProcessInstance(ProcessInstance processInstance) {
        ((org.jbpm.process.instance.ProcessInstance) processInstance).setId(processCounter.incrementAndGet());
        internalAddProcessInsta
public class PersistenceFactorylmpl implements PersistenceFactory {
    private final HashMap<Class<?>, JpaRepository> repositories = new HashMap<>();
    public PersistenceFactorylmpl(EntityManager entityManager) {
        AutoJpaRepository AutoJpaRepository = new AutoJpaRepository();
        AutoJpaRepository.setEntityManager(entityManager);
        repositories.put(AutoJpaRepository.class, AutoJpaRepository);
        FilialeJpaRepository FilialeJpaRepository = new FilialeJpaRepository();
        FilialeJpaRepository.setEntityManager(entityManager);
        repositories.put(FilialeJpaRepository.class, FilialeJpaRepository);
        KaufJpaRepository KaufJpaRepository = new KaufJpaRepository();
        KaufJpaRepository.setEntityManager(entityManager);
        repositories.put(KaufJpaRepository.class, KaufJpaRepository);
        KundeJpaRepository KundeJpaRepository = new KundeJpaRepository();
        KundeJpaRepository.setEntityManager(entityManager);
        repositories.put(KundeJp

        MitarbeiterJpaRepository MitarbeiterJpaRepository = new MitarbeiterJpaRepository();
        MitarbeiterJpaRepository.setEntityManager(entityManager);
        repositories.put(MitarbeiterJpaRepository.class, MitarbeiterJpaRepository);
       
    }
    @Override
    public AutoJpaRepository AutoRepository() {
        return (AutoJpaRepository)repositories.get(AutoJpaRepository.class);
    }
    @Override
    public FilialeJpaRepository FilialeRepository() {
        return (FilialeJpaRepository)repositories.get(FilialeJpaRepository.class);
    }
    @Override
    public KaufJpaRepository KaufRepository() {
        return (KaufJpaRepository)repositories.get(KaufJpaRepository.class);
    }
    @Override
    public KundeJpaRepository KundeRepository() {
        return (KundeJpaRepository)repositories.get(KundeJpaRepository.class);
    }
    @Override
    public MitarbeiterJpaRepository MitarbeiterRepository() {
        return (MitarbeiterJpaRepository)repositories.get(MitarbeiterJp
/**
 * 설문관리를 처리하는 Dao Class 구현
 * @author 공통서비스 장동한
 * @since 2009.03.20
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  장동한          최초 생성
 *
 * </pre>
 */ 
@Repository("qustnrManageDao")
public class QustnrManageDao extends EgovComAbstractDAO {
    /**
	 * 설문템플릿 목록을 조회한다. 
	 * @param qustnrManageVO - 설문관리 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
	public List selectQustnrTmplatManageList(QustnrManageVO qustnrManageVO) throws Exception{
		return (List)list("QustnrManage.selectQustnrTmplatManage", qustnrManageVO);
	}
    /**
	 * 설문관리 목록을 조회한다. 
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	public List selectQustnrManageList(ComDefaultVO searchVO) throws Exception{
		return (List)list("QustnrManage.selectQustnrManage", searchVO);
	}
    /**
	 * 설문관리를 상세조회(Model) 한다. 
	 * @param qustnrManageVO - 설문관리 정보 담김

	 * @return List
	 * @throws Exception
	 */
    public QustnrManageVO selectQustnrManageDetailModel(QustnrManageVO qustnrManageVO) throws Exception {    	
        return (QustnrManageVO) selectByPk("QustnrManage.selectQustnrManageDetailModel", qustnrManageVO);
    }
    
    /**
	 * 설문관리를(을) 상세조회 한다.
	 * @param qustnrManageVO - 설문관리 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
	public List selectQustnrManageDetail(QustnrManageVO qustnrManageVO) throws Exception{
		return (List)list("QustnrManage.selectQustnrManageDetail", qustnrManageVO);
	}
    /**
	 * 설문관리를(을) 목록 전체 건수를(을) 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return int
	 * @throws Exception
	 */
	public int selectQustnrManageListCnt(ComDefaultVO searchVO) throws Exception{
		return (Integer)getSqlMapClientTemplate().queryForObject("QustnrManage.selectQustnrManageCnt", searchVO);
	}
    /**
	 * 설문관리를(을) 등록한다.
	 * @param qqustnrManageVO - 설문관리 정보 담김 VO
	 * @throws Exception
	 */
	public void insertQustnrManage(Qustn
/**
 * Created by apple on 09.07.14.
 */
@Service
public class FacadeService {
    private StadiumService stadiumService;
    private SectionOfStadiumService sectionOfStadiumService;
    private RowAndSeatService rowAndSeatService;
    private TicketService ticketService;
    private ActionService actionService;
    private PriceService priceService;
    private CustomerService customerService;
    @Autowired
    public void setStadiumService(StadiumService stadiumService){
        this.stadiumService = stadiumService;
    }
    public StadiumService getStadiumService() { return this.stadiumService; }
    @Autowired
    public void setSectionOfStadiumService(SectionOfStadiumService sectionOfStadiumService){
        this.sectionOfStadiumService = sectionOfStadiumService;
    }
    public SectionOfStadiumService getSectionOfStadiumService() {
        return this.sectionOfStadiumService;
    }
    @Autowired
    public void setRowAndSeatService(RowAndSeatService rowAndSeatService){
      
/**
 * 롤관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Service("egovRoleManageService")
public class EgovRoleManageServiceImpl extends AbstractServiceImpl implements EgovRoleManageService {
	@Resource(name="roleManageDAO")
	public RoleManageDAO roleManageDAO;
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception {
		return roleManageDAO.selectRole(roleManageVO);
	}
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception {
		return roleManageDAO.selectRoleL

	}
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception {
		roleManageDAO.deleteRole(roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void updateRole(RoleManage roleManage) throws Exception {
		roleManageDAO.updateRole(roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 등록
	 * @param roleManage RoleManage
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO insertRole(RoleManage roleManage, RoleManageVO roleManageVO) throws Exception {
		roleManageDAO.insertRole(roleManage);	
		roleManageVO.setRoleCode(roleManage.getRoleCode());
		return roleManageDAO.selectRole(roleManageVO);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @param roleManageVO RoleManageVO
	 * @return int
	 * @exception Exception
	 */
	public int selectRoleListT
public final class Commander {
	private static final Map<Command, CommandHandler> HANDLERS
			= new HashMap<Command, CommandHandler>();
	static {
		CommandHandler applicationHandler = new ApplicationCommandHandler();		
		HANDLERS.put(Command.exit, applicationHandler);		
		HANDLERS.put(Command.h, applicationHandler);
		HANDLERS.put(Command.version, applicationHandler);
		
		CommandHandler connectionHandler = new ConnectionCommandHandler();
		HANDLERS.put(Command.login, connectionHandler);
		HANDLERS.put(Command.logoff, connectionHandler);
		
		HANDLERS.put(Command.register, new RegisterCommandHandler());
		HANDLERS.put(Command.edit, new EditCommandHandler());
		
		CommandHandler tradeHandler = new TradeCommandHandler();
		HANDLERS.put(Command.add, tradeHandler);
		HANDLERS.put(Command.remove, tradeHandler);
		HANDLERS.put(Command.delete, tradeHandler);
		HANDLERS.put(Command.destroy, tradeHandler);
		
		CommandHandler blockHandler = new BlockCommandHandler();
		HANDLERS.put(Command.prim

		HANDLERS.put(Command.unprime, blockHandler);
		HANDLERS.put(Command.activate, blockHandler);
		HANDLERS.put(Command.deactivate, blockHandler);
		HANDLERS.put(Command.accept, blockHandler);
		HANDLERS.put(Command.reject, blockHandler);
		
		HANDLERS.put(Command.link, new LinkCommandHandler());
		HANDLERS.put(Command.unlink, new UnlinkCommandHandler());
		HANDLERS.put(Command.cancel, new CancelCommandHandler());
		HANDLERS.put(Command.history, new HistoryCommandHandler());
		HANDLERS.put(Command.date, new DateCommandHandler());
		HANDLERS.put(Command.time, new TimeCommandHandler());
		HANDLERS.put(Command.auth, new AuthCommandHandler());
		
		CommandHandler profileHandler = new ProfileCommandHandler();
		HANDLERS.put(Command.profile, profileHandler);
		HANDLERS.put(Command.si, profileHandler);
		HANDLERS.put(Command.ls, new ListCommandHandler());
		
		CommandHandler proxyHandler = new ProxyCommandHandler();
		HANDLERS.put(Command.represent, proxyHandler);
		
		CommandHandler lockHandl

		HANDLERS.put(Command.lock, lockHandler);
		HANDLERS.put(Command.unlock, lockHandler);
		
		CommandHandler memoryHandler = new MemoryHandler();
		HANDLERS.put(Command.heap, memoryHandler);
	}
	private static final Commander INSTANCE = new Commander();
	public static Commander getInstance() {
		return INSTANCE;
	}
	public void execute(String input, Application application) 
	throws CommandException {
		String[] tokens = input.split(" ");
		Command command = null;
		try {
			command = Command.valueOf(tokens[0].toLowerCase());
		} catch (IllegalArgumentException e) {
			throw new CommandException(input);
		}
			 
		try {
			CommandHandler handler = HANDLERS.get(command);
			if (handler != null) {
				String[] args = new String[tokens.length - 1];
				System.arraycopy(tokens, 1, args, 0, args.length);
				handler.handle(command, args, application);
			} else {
				throw new AssertionError("Missing handler for interactive command: " + command);
			}	
		} catch (RuntimeException e) {
			Sy
public class ProcessBuildContext extends PackageBuildContext {
    private Process      process;
    private ProcessDescr processDescr;
    public ProcessBuildContext(final PackageBuilder pkgBuilder,
                               final Package pkg,
                               final Process process,
                               final BaseDescr processDescr,
                               final DialectCompiletimeRegistry dialectRegistry,
                               final Dialect defaultDialect) {
        this.process = process;
        this.processDescr = (ProcessDescr) processDescr;
        init( pkgBuilder,
              pkg,
              processDescr,
              dialectRegistry,
              defaultDialect,
              null );
    }
    public ProcessDescr getProcessDescr() {
        return processDescr;
    }
    public void setProcessDescr(ProcessDescr processDescr) {
        this.processDescr = processDescr;
    }
    public Process getProcess() {
        return pro
@Component
public class AppointmentsContext
    @Autowired
    private AppointmentService appointmentService;
    @Autowired
    private ReminderService reminderService;
    @Autowired
    private VisitService visitService;
    public AppointmentService getAppointmentService()
    {
        return appointmentService;
    }
    public void setAppointmentService(AppointmentService appointmentService)
    {
        this.appointmentService = appointmentService;
    }
    public ReminderService getReminderService()
    {
        return reminderService;
    }
    public void setReminderService(ReminderService reminderService)
    {
        this.reminderService = reminderService;
    }
    public VisitService getVisitService()
    {
        return visitService;
    }
    public void setVisitService(VisitService visitService)
    {
        this.visitService = visitService;
    }
    public static AppointmentsContext getInstance(){
		return instance;
	}
	private static AppointmentsContext insta
public class ProcessBuildContext extends PackageBuildContext {
    private Process      process;
    private ProcessDescr processDescr;
    private DialectCompiletimeRegistry dialectRegistry;
    public ProcessBuildContext(final PackageBuilder pkgBuilder,
                               final Package pkg,
                               final Process process,
                               final BaseDescr processDescr,
                               final DialectCompiletimeRegistry dialectRegistry,
                               final Dialect defaultDialect) {
        this.process = process;
        this.processDescr = (ProcessDescr) processDescr;
        this.dialectRegistry = dialectRegistry;
        init( pkgBuilder,
              pkg,
              processDescr,
              dialectRegistry,
              defaultDialect,
              null );
    }
    public ProcessDescr getProcessDescr() {
        return processDescr;
    }
    public void setProcessDescr(ProcessDescr processDescr
public class ServiceModuleTest {
    @Test
    public void shouldBeAbleToGetAddedService() throws Exception {
        ServiceModule serviceModule = new ServiceModule() {
            @Override
            protected void configure() {
                addService(TestService.class).implementedBy(TestServiceProvider.class);
            }
        };
        serviceModule.initialize();
        ServiceDefinition<TestService> serviceDefinition = serviceModule.getService(TestService.class, null);
        assertEquals(serviceDefinition.getServiceProvider(), TestServiceProvider.class);
    }
    @Test
    public void shouldNotGetServiceBeforeInitialize() throws Exception {
        ServiceModule serviceModule = new ServiceModule() {
            @Override
            protected void configure() {
                addService(TestService.class).implementedBy(TestServiceProvider.class);
            }
        };
        ServiceDefinition<TestService> serviceDefinition = serviceModule.getService(TestServic
/**
 * 개요
 * - PROCESS모니터링에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - PROCESS모니터링에 대한 등록, 수정, 삭제, 조회 기능을 제공한다.
 * - PROCESS모니터링의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 박종선
 * @version 1.0
 * @created 08-9-2010 오후 3:54:46
 */
@Repository("ProcessMonDAO")
public class ProcessMonDAO extends EgovComAbstractDAO {
	/**
	 * 등록된 PROCESS모니터링 목록을 조회한다.
	 * @param processMonVO - PROCESS모니터링 Vo
	 * @return List - PROCESS모니터링 목록
	 * 
	 * @param processMonVO
	 */
	@SuppressWarnings("unchecked")	
	public List<ProcessMonVO> selectProcessMonList(ProcessMonVO processMonVO) throws Exception {
		return (List<ProcessMonVO>) list("ProcessMonDAO.selectProcessMonList", processMonVO);
	}
	/**
	 * PROCESS모니터링 목록 총 갯수를 조회한다.
	 * @param ProcessMonVO - PROCESS모니터링 Vo
	 * @return int - PROCESS모니터링 토탈 카운트 수
	 * 
	 * @param processMonVO
	 */
	public int selectProcessMonTotCnt(ProcessMonVO processMonVO) throws Exception {
		return (Integer)getSqlMapClientTemplate().queryForObject("ProcessMonDAO.selectProcessMonTotCnt", processMo

	}
	/**
	 * 등록된 PROCESS모니터링의 상세정보를 조회한다.
	 * @param processMonVO - PROCESS모니터링 Vo
	 * @return processMonVO - PROCESS모니터링 Vo
	 * 
	 * @param processMonVO
	 */
	public ProcessMonVO selectProcessMon(ProcessMonVO processMonVO) throws Exception {
		return (ProcessMonVO)selectByPk("ProcessMonDAO.selectProcessMon", processMonVO);
	}
	/**
	 * PROCESS모니터링 정보를 신규로 등록한다.
	 * @param processNm - PROCESS모니터링 model
	 * 
	 * @param processNm
	 */
	public void insertProcessMon(ProcessMon processMon) throws Exception {
		insert("ProcessMonDAO.insertProcessMon", processMon);
	}
	/**
	 * 기 등록된 PROCESS모니터링 정보를 수정한다.
	 * @param processNm - PROCESS모니터링 model
	 * 
	 * @param processNm
	 */
	public void updateProcessMon(ProcessMon processMon) throws Exception {
		update("ProcessMonDAO.updateProcessMon", processMon);
	}
	/**
	 * 기 등록된 PROCESS모니터링 정보를 삭제한다.
	 * @param processNm - PROCESS모니터링 model
	 * 
	 * @param processNm
	 */
	public void deleteProcessMon(ProcessMon processMon) throws Exception {
		delete("Pr

	}
	/**
	 * 프로세스 모니터링로그 목록을 조회한다.
	 * @param ProcessMonVO - 프로세스모니터링로그 VO
	 * @return  List<ProcessMonLogVO> - 프로세스모니터링로그 List
	 * 
	 * @param processMonVO
	 */
	@SuppressWarnings("unchecked")	
	public List<ProcessMonLogVO> selectProcessMonLogList(ProcessMonLogVO processMonLogVO) throws Exception {
		return (List<ProcessMonLogVO>) list("ProcessMonDAO.selectProcessMonLogList", processMonLogVO);
	}
	/**
	 * PROCESS모니터링로그 목록 총 갯수를 조회한다.
	 * @param ProcessMonVO - PROCESS모니터링로그 Vo
	 * @return int - PROCESS모니터링로그 토탈 카운트 수
	 * 
	 * @param processMonVO
	 */
	public int selectProcessMonLogTotCnt(ProcessMonLogVO processMonLogVO) throws Exception {
		return (Integer)getSqlMapClientTemplate().queryForObject("ProcessMonDAO.selectProcessMonLogTotCnt", processMonLogVO);
	}	
	/**
	 * 프로세스 모니터링로그의 상세정보를 조회한다.
	 * @param ProcessMonVO - 프로세스모니터링로그 model
	 * @return  ProcessMonVO - 프로세스모니터링로그 model
	 * 
	 * @param processMonVO
	 */
	public ProcessMonLogVO selectProcessMonLog(ProcessMonLogVO processMonLog
/*
 * Created on Dec 14, 2004
 */
/**
 * @author Matthew Avery, mavery@einnovation.com
 */
public class CompoundRepositoryTest extends BaseTestCase
	public CompoundRepositoryTest( String inName )
	{
		super( inName );
	}
	protected Repository createRepository() throws Exception
	{
		CompoundRepository repository = new CompoundRepository();
		BaseRepositoryTest test = new BaseRepositoryTest( "blah");
		test.makeIndexFile();
		repository.setDefaultRepository( test.getRepository() );
		FileRepository repos = new FileRepository("/openedit/test/", new File( getRoot(),"/openedit/test") );
		repository.addRepository(repos);
		return repository;
	}
	public void testGet() throws Exception
	{
		Repository repository = createRepository();
		ContentItem index = repository.get( "/index.html" );
		assertTrue(index instanceof FileItem );
	}
	public void testMountPoint() throws Exception
	{
		CompoundRepository repository = new CompoundRepository();
		FileRepository stuff = new FileRepository("/stuff"
public class DolphinProcessJPARepository extends JPARepository<ProcessDefinition, Long> implements DolphinProcessRepository {
	public DolphinProcessJPARepository() {
		entityClass = ProcessDefinition.class;
	}
	public List<ProcessDefinition> getProcessListByProcessId(String processId) {
		List<ProcessDefinition> dolphinProcessList = getEntityManager().createQuery(
				"from ProcessDefinition where processId = :processId order by version desc", ProcessDefinition.class).setParameter(
				"processId", processId).getResultList();
		return dolphinProcessList;
	}
	public ProcessDefinition getProcessByVersion(String processId, double version) {
		ProcessDefinition dolphinProcess;
		try {
			dolphinProcess = getEntityManager().createQuery(
					"from ProcessDefinition where processId = :processId and version = :version", ProcessDefinition.class)
					.setParameter("processId", processId).setParameter("version", version).getSingleResult();
		} catch (NoResultException e) {
			dolphinProcess = n

		}
		return dolphinProcess;
	}
	public List<ProcessDefinition> getAllProcessDefinitions() {
		List<ProcessDefinition> dolphinProcessList = getEntityManager()
				.createQuery("from ProcessDefinition ", ProcessDefinition.class).getResultList();
		return dolphinProcessList;
	}
	public List<ProcessDefinition> getUsedProcessDefinitions() {
		List<ProcessDefinition> dolphinProcessList = getEntityManager().createQuery(
				"from ProcessDefinition d where d.id IN (select i.processDef from ProcessInstance i)", ProcessDefinition.class)
				.getResultList();
		return dolphinProcessList;
	}
	public void save(ProcessDefinition def) {
		this.persist(def);
	}
	public ProcessDefinition getProcessDefinition(long id) {
		return refresh(findById(id));
	}
	public void delete(long id) {
		this.remove(getProcessDefinition(id));
	}
	public List<ProcessDefinition> searchProcessDefinitions(String str) {
		List<ProcessDefinition> dolphinProcessList = getEntityManager().createQuery(
				"from ProcessDefinitio
public class ProcessBuildContext extends PackageBuildContext {
    private Process      process;
    private ProcessDescr processDescr;
    public ProcessBuildContext(final PackageBuilderConfiguration cfg,
                               final Package pkg,
                               final Process process,
                               final BaseDescr processDescr,
                               final DialectCompiletimeRegistry dialectRegistry,
                               final Dialect defaultDialect) {
        this.process = process;
        this.processDescr = (ProcessDescr) processDescr;
        init( cfg,
              pkg,
              processDescr,
              dialectRegistry,
              defaultDialect,
              null );
    }
    public ProcessDescr getProcessDescr() {
        return processDescr;
    }
    public void setProcessDescr(ProcessDescr processDescr) {
        this.processDescr = processDescr;
    }
    public Process getProcess() {
        return proc
@Singleton
public class Handlers {
	private final ImmutableMap<String, IRequestHandler> handlers;
	@Inject
	private Handlers(FolderSyncHandler folderSyncHandler,
			SyncHandler syncHandler,
			GetItemEstimateHandler getItemEstimateHandler,
			ProvisionHandler provisionHandler,
			PingHandler pingHandler,
			SettingsHandler settingsHandler,
			SearchHandler searchHandler,
			SendMailHandler sendMailHandler,
			MoveItemsHandler moveItemsHandler,
			SmartReplyHandler smartReplyHandler,
			SmartForwardHandler smartForwardHandler,
			MeetingResponseHandler meetingResponseHandler,
			GetAttachmentHandler getAttachmentHandler,
			ItemOperationsHandler itemOperationsHandler) {
		
		handlers = ImmutableMap.<String, IRequestHandler>builder()
				.put("FolderSync",		folderSyncHandler)
				.put("Sync", 			syncHandler)
				.put("GetItemEstimate", getItemEstimateHandler)
				.put("Provision", 		provisionHandler)
				.put("Ping", 			pingHandler)
				.put("Settings", 		settingsHandler)
				.put("Searc
/**
 * Copyright (c) 2000-2010 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
/**
 * @author Shuyang Zhou
 */
public class PortalManagerUtil {
	public static MethodHandler createManageActionMethodHandler(
		ManageAction manageAction) {
		return new MethodHandler(_manageMethod, manageAction);
	}
	public static void manage(
			ClusterGroup clusterGroup, ManageAction manageAction)
		throws ManageActionException {
		ManageAction action = new ClusterManageActionWrapper(
			clusterGroup, ma
public class Application {
    private static ApplicationContext applicationContext;
    public static ApplicationContext getApplicationContext() {
        if( applicationContext == null ) {
            applicationContext = ApplicationContextProvider.getApplicationContext();
        }
        return applicationContext;
    }
    public static <T> T getRepository(Class<T> repoClass) {
        return getApplicationContext().getBean(repoClass);
    }
    public static VeiculoRepository getVeiculoRepository() {
        return getRepository(VeiculoRepository.class);
    }
    public static CondutorRepository getCondutorRepository() {
        return getRepository(CondutorRepository.class);
    }
    
    public static InfracaoRepository getInfracaoRepository() {
        return getRepository(InfracaoRepository.class);
    }
    public static LogradouroRepository getLogradouroRepository() {
        return getRepository(LogradouroRepository.class);
    }
    
    public static MongoOperations g
public class DefaultJbpmSimulationModel extends JbpmSimulationModel {
  
  private ProcessDefinition[] processDefinitions;
  
  public DefaultJbpmSimulationModel(String processXml) {
    super();
    readFromXml( new String[] { processXml } );
  }
  
  public DefaultJbpmSimulationModel(String[] processXml) {
    super();
    readFromXml( processXml );
  }
  
  public DefaultJbpmSimulationModel(ProcessDefinition processDefinition) {
    super();
    this.processDefinitions = new ProcessDefinition[] {processDefinition};
  }
  public DefaultJbpmSimulationModel(ProcessDefinition[] processDefinitions) {
    super();
    this.processDefinitions = processDefinitions;
  }
  public ProcessDefinition[] getProcessDefinitions() {
    return processDefinitions;
  }
  
  private ProcessDefinition[] readFromXml(String[] processXml) {
    processDefinitions = new ProcessDefinition[processXml.length];
    for (int i = 0; i < processXml.length; i++) {
      SimulationJpdlXmlReader reader = new Simulatio
/**
 * 권한별 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Repository("authorRoleManageDAO")
public class AuthorRoleManageDAO extends EgovComAbstractDAO {
	/**
	 * 권한 롤 관계정보를 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return AuthorRoleManageVO
	 * @exception Exception
	 */
	public AuthorRoleManageVO selectAuthorRole(AuthorRoleManageVO authorRoleManageVO) throws Exception {
		return (AuthorRoleManageVO) selectByPk("authorRoleManageDAO.selectAuthorRole", authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보 목록 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return List<AuthorRoleManageVO>
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<AuthorRoleManageVO> selectAuthorRoleList(AuthorRoleManageVO authorRoleMana

		return list("authorRoleManageDAO.selectAuthorRoleList", authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보를 화면에서 입력하여 입력항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void insertAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		insert("authorRoleManageDAO.insertAuthorRole", authorRoleManage);
	}
	/**
	 * 수정된 권한 롤 관계정보를 데이터베이스에 반영
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void updateAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		update("authorRoleManageDAO.updateAuthorRole", authorRoleManage);
	}
	/**
	 * 권한 롤 관계정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void deleteAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		delete("authorRoleManageDAO.deleteAuthorRole", authorRoleManage);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return int
	 
/*
 * $Id: $
 * $Revision: $
 * $Author: $
 */
/**
 * Facade disposant de setter pour initialiser les implémentations des différents service<br/>
 * 
 * @author ginguene
 * 
 */
public class CustomAppServiceFacade extends AppServiceFacade {
    /**
     * Définit que la facade à utiliser est celle-ci. *
     * 
     */
    public void use() {
        AppServiceFacade.use(this);
    }
    public static void setLoggerService(ILoggerService loggerService) {
        AppServiceFacade.staticLoggerService = loggerService;
    }
    /**
     * Fonction utilisée dans le cadre de tests.<br/>
     * Permet de récupérer le CustomServiceFacade utilisée par service facade.<br/>
     * si le singleton de ServiceFacade, n'est pas de la classe CustomServiceFacade, retourne null.
     * 
     * @return
     */
    public static CustomAppServiceFacade getInstance() {
        AppServiceFacade instance = AppServiceFacade.getInstance();
        if (instance instanceof CustomAppServiceFacade) {
            r

        } else {
            return null;
        }
    }
    public void setPostalAddressService(IPostalAddressService postalAddressService) {
        provider.setPostalAddressService(postalAddressService);
    }
    public void setAuthorizationService(IAuthorizationService authorizationService) {
        provider.setAuthorizationService(authorizationService);
    }
    public void setAuthorizationRequestService(IAuthorizationRequestService authorizationRequestService) {
        provider.setAuthorizationRequestService(authorizationRequestService);
    }
    public void setAuthorizationPreliminaryExamService(IAuthorizationPreliminaryExamService authorizationPreliminaryExamService) {
        provider.setAuthorizationPreliminaryExamService(authorizationPreliminaryExamService);
    }
    public void setWhoisContactService(IWhoisContactService whoisContactService) {
        provider.setWhoisContactService(whoisContactService);
    }
    public void setDictionaryService(IDictionaryService 

        provider.setDictionaryService(dictionaryService);
    }
    public void setBillingService(IBillingService billingService) {
        provider.setBillingService(billingService);
    }
    public void setOldDocumentService(IOldDocumentService oldDocumentService) {
        provider.setOldDocumentService(oldDocumentService);
    }
    public void setDocumentService(IDocumentService documentService) {
        provider.setDocumentService(documentService);
    }
    public void setDomainService(IDomainService domainService) {
        provider.setDomainService(domainService);
    }
    public void setFaxService(IFaxService faxService) {
        provider.setFaxService(faxService);
    }
    public void setEmailService(IEmailService mailService) {
        provider.setEmailService(mailService);
    }
    public void setOperationFormService(IOperationFormService operationFormService) {
        provider.setOperationFormService(operationFormService);
    }
    public void setEppService(IEppS

        provider.setEppService(eppService);
    }
    public void setPublicLegalStructureService(IPublicLegalStructureService publicLegalStructureService) {
        provider.setPublicLegalStructureService(publicLegalStructureService);
    }
    public void setQualityService(IQualityService qualityService) {
        provider.setQualityService(qualityService);
    }
    public void setRequestService(IRequestService requestService) {
        provider.setRequestService(requestService);
    }
    public void setStatisticService(IStatisticService statisticService) {
        provider.setStatisticService(statisticService);
    }
    public void setTicketService(ITicketService ticketService) {
        provider.setTicketService(ticketService);
    }
    public void setTradeService(ITradeService tradeService) {
        provider.setTradeService(tradeService);
    }
    public void setUserService(IUserService userService) {
        provider.setUserService(userService);
    }
    public void setPro

        provider.setProfileService(profileService);
    }
    public void setApplicationService(IApplicationService applicationService) {
        provider.setApplicationService(applicationService);
    }
    public void setCustomerService(ICustomerService customerService) {
        provider.setCustomerService(customerService);
    }
    public void setCustomerContactService(ICustomerContactService customerContactService) {
        provider.setCustomerContactService(customerContactService);
    }
    public void setDomainPortfolioService(IDomainPortfolioService domainPortfolioService) {
        provider.setDomainPortfolioService(domainPortfolioService);
    }
    public void setAccountService(IAccountService accountService) {
        provider.setAccountService(accountService);
    }
    public void setOperationService(IOperationService operationService) {
        provider.setOperationService(operationService);
    }
    public void setQualificationService(IQualificationService qualific
/**
 * 
 * @author Fren
 *
 */
public class WordMaker {
	/**
	 * [责任链模式]玩FizzBuzzWhizz游戏
	 * @param roll
	 * @param number
	 * @return
	 */
	public static Word translate(int roll , Param number) {
		WordHandler commonNumberHandler = new CommonNumberHandler();
		WordHandler whizzHandler = new WhizzHandler(commonNumberHandler);
		WordHandler buzzHandler = new BuzzHandler(whizzHandler);
		WordHandler fizzHandler = new FizzHandler(buzzHandler);
		WordHandler fizzBuzzHandler = new FizzBuzzHandler(fizzHandler);
		WordHandler fizzWhizzHandler = new FizzWhizzHandler(fizzBuzzHandler);
		WordHandler buzzWhizzHandler = new BuzzWhizzHandler(fizzWhizzHandler);
		WordHandler fizzBuzzWhizzHandler = new FizzBuzzWhizzHandler(buzzWhizzHandler);
		WordHandler specialFizzHandler = new SpecialFizzHandler(fizzBuzzWhizzHandler);
		
		return specialFizzHandler.hander(roll, number);
	}
	/**
	 * 输出处理后的数组
	 * @param number
	 * @return
	 */
	public static List<String> getItemList(Param number){
		List<String> res
/*
 * JBoss, Home of Professional Open Source
 * Copyright 2005, JBoss Inc., and individual contributors as indicated
 * by the @authors tag. See the copyright.txt in the distribution for a
 * full listing of individual contributors.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 */
public class ProcessInstanceDbTest extends Abs

  public void testProcessInstanceProcessDefinition() {
    ProcessDefinition processDefinition = new ProcessDefinition("definition");
    graphSession.saveProcessDefinition(processDefinition);
    ProcessInstance processInstance = new ProcessInstance(processDefinition);
    processInstance = saveAndReload(processInstance);
    assertNotNull(processInstance);
    processDefinition = processInstance.getProcessDefinition();
    assertEquals("definition", processDefinition.getName());
  }
  public void testProcessInstanceDates() {
    ProcessDefinition processDefinition = ProcessDefinition.parseXmlString(
      "<process-definition>" +
      "  <start-state>" +
      "    <transition to='end' />" +
      "  </start-state>" +
      "  <end-state name='end'/>" +
      "</process-definition>" );
    graphSession.saveProcessDefinition(processDefinition);
    ProcessInstance processInstance = new ProcessInstance(processDefinition);
    processInstance.signal();
    processInstance = saveAndRel

    
    assertNotNull(processInstance.getStart());
    assertNotNull(processInstance.getEnd());
  }
  public void testProcessInstanceRootToken() {
    ProcessDefinition processDefinition = new ProcessDefinition();
    graphSession.saveProcessDefinition(processDefinition);
    ProcessInstance processInstance = new ProcessInstance(processDefinition);
    processInstance = saveAndReload(processInstance);
    
    assertNotNull(processInstance.getRootToken());
  }
  public void testProcessInstanceSuperProcessToken() {
    ProcessDefinition superProcessDefinition = new ProcessDefinition("super");
    jbpmContext.deployProcessDefinition(superProcessDefinition);
    
    ProcessInstance superProcessInstance = new ProcessInstance(superProcessDefinition);
    Token superProcessToken = superProcessInstance.getRootToken();
    jbpmContext.deployProcessDefinition(superProcessDefinition);
    jbpmContext.save(superProcessInstance);
    
    ProcessInstance processInstance = new ProcessInstance();

    processInstance.setSuperProcessToken(superProcessToken);
    processInstance = saveAndReload(processInstance);
    superProcessToken = processInstance.getSuperProcessToken();
    assertNotNull(superProcessToken);
    superProcessInstance = superProcessToken.getProcessInstance();
    assertNotNull(superProcessInstance);
    superProcessDefinition = superProcessInstance.getProcessDefinition();
    assertEquals("super", superProcessDefinition.getName());
  }
  
  public void testProcessInstanceModuleInstances() {
    ProcessInstance processInstance = new ProcessInstance();
    processInstance.addInstance(new ContextInstance());
    processInstance.addInstance(new TaskMgmtInstance());
   
    processInstance = saveAndReload(processInstance);
    assertNotNull(processInstance.getInstances());
    assertEquals(2, processInstance.getInstances().size());
    assertNotNull(processInstance.getContextInstance());
    assertNotNull(processInstance.getTaskMgmtInstance());
  }
  
  public void 
/**
 * The Interface ServiceLocator.
 */
public interface ServiceLocator 
extends 
de.alpharogroup.address.book.business.service.locator.ServiceLocator, 
de.alpharogroup.db.resource.bundles.service.locator.ServiceLocator,
message.system.service.locator.ServiceLocator,
resource.system.service.locator.ServiceLocator,
user.management.service.locator.ServiceLocator
	/**
	 * Gets the favorite members service.
	 *
	 * @return the favorite members service
	 */
	FavoriteMembersService getFavoriteMembersService();
	/**
	 * Gets the friendship requests service.
	 *
	 * @return the friendship requests service
	 */
	FriendshipRequestsService getFriendshipRequestsService();
	/**
	 * Gets the profile notice service.
	 *
	 * @return the profile notice service
	 */
	ProfileNoticeService getProfileNoticeService();
	/**
	 * Gets the profile ratings service.
	 *
	 * @return the profile ratings service
	 */
	ProfileRatingsService getProfileRatingsService();
	/**
	 * Gets the profile visitors service.
	 *


	 */
	ProfileVisitorsService getProfileVisitorsService();
	/**
	 * Gets the search criteria service.
	 *
	 * @return the search criteria service
	 */
	SearchCriteriaService getSearchCriteriaService();
	/**
	 * Gets the user profile service.
	 *
	 * @return the user profile service
	 */
	UserProfileService getUserProfileService();
	/**
	 * Sets the favorite members service.
	 *
	 * @param favoriteMembersService the favorite members service
	 */
	void setFavoriteMembersService(FavoriteMembersService favoriteMembersService);
	/**
	 * Sets the friendship requests service.
	 *
	 * @param friendshipRequestsService the friendship requests service
	 */
	void setFriendshipRequestsService(FriendshipRequestsService friendshipRequestsService);
	/**
	 * Sets the profile notice service.
	 *
	 * @param profileNoticeService the profile notice service
	 */
	void setProfileNoticeService(ProfileNoticeService profileNoticeService);
	/**
	 * Sets the profile ratings service.
	 *
	 * @param profileRatingsS
/*
 * Copyright 2010-2011 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 流程定义数据缓存，要注意流程分水岭模式的处理。
 * 
 * @author libinsong1204@gmail.com
 * @version 1.0
 */
public class ProcessDefineRepositoryImpl extends JdbcDaoSupport implements IProcessDefineRepository {
	private Cache cache; 
	public ProcessDefineRepositoryImpl(Cache cache) {
		this.cache = cache;
	}
	private static String inertProcessDefineSQL = "insert into WF_PROCESSDEFINE (processDefId, " +
			"processDefName, processCHName, descript

			"createTime, creator, limitTime) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	private static String updateProcessDefineSQL = "update WF_PROCESSDEFINE set processDefName=?, processCHName=?, " +
			"description=?, versionSign=?, processDefContent=?, updateTime=?, updator=? where processDefId=?";
	private static String deleteProcessDefineSQL = "delete from WF_PROCESSDEFINE where processDefId=?";
	private static String findProcessDefineSQL = "select * from WF_PROCESSDEFINE where processDefId = ?";
	private static String findPublishProcessDefineSQL = "select * from WF_PROCESSDEFINE " +
			"where processDefName = ? and currentState = 3";
	private static String updateProcessDefineUnPublishStatusSQL = "update WF_PROCESSDEFINE " +
			"set currentState = 1 where processDefName = ?";
	private static String updateProcessDefinePublishStatusSQL = "update WF_PROCESSDEFINE " +
			"set currentState = 3 where processDefId = ?";
	private static String findProcessDefinesSQL = "select processDefId, process

			"currentState, versionSign  from WF_PROCESSDEFINE where processDefName = ?";
	public void inertProcessDefine(ProcessDefine processDefine) {
		this.getJdbcTemplate().update(inertProcessDefineSQL, processDefine.getProcessDefId(), processDefine.getProcessDefName(), processDefine.getProcessCHName(),
				processDefine.getDescription(), processDefine.getCurrentState(), processDefine.getVersionSign(), processDefine.getProcessDefContent(),
				processDefine.getCreateTime(), processDefine.getCreator(), processDefine.getLimitTime());
	}
	public void updateProcessDefine(ProcessDefine processDefine) {
		this.getJdbcTemplate().update(updateProcessDefineSQL, processDefine.getProcessDefName(), processDefine.getProcessCHName(),
				processDefine.getDescription(), processDefine.getVersionSign(), processDefine.getProcessDefContent(),
				processDefine.getUpdateTime(), processDefine.getUpdator(), processDefine.getProcessDefId());
		
		cache.evict("prodef-" + processDefine.getProcessDefId());
		cache.

	}
	public void deleteProcessDefine(long processDefId) {
		this.getJdbcTemplate().update(deleteProcessDefineSQL, processDefId);
		
		ProcessDefine processDefine = getCacheValue("prodef-" + processDefId);
		if(processDefine != null) {
			cache.evict("prodef-" + processDefine.getProcessDefId());
			cache.evict("prodef-" + processDefine.getProcessDefName());
		}
	}
	public ProcessDefine findProcessDefine(long processDefId) {
		ProcessDefine processDefine = getCacheValue("prodef-" + processDefId);
		if(processDefine == null || processDefine.getProcessElement() == null) {
			processDefine = this.getJdbcTemplate().queryForObject(findProcessDefineSQL, new ProcessDefineRowMapper(), processDefId);
			
			ProcessElement processElement = ProcessDefineParser.createProcessXml(processDefine.getProcessDefContent());
			processDefine.setProcessElement(processElement);
			cache.put("prodef-" + processDefine.getProcessDefId(), processDefine);
		}
		return processDefine;
	}
	public ProcessDefine findPub

		ProcessDefine processDefine = getCacheValue("prodef-" + processDefName);
		if(processDefine == null) {
			processDefine = this.getJdbcTemplate().queryForObject(findPublishProcessDefineSQL, new ProcessDefineRowMapper(), processDefName);
			
			ProcessElement processXml = ProcessDefineParser.createProcessXml(processDefine.getProcessDefContent());
			processDefine.setProcessElement(processXml);
			cache.put("prodef-" + processDefine.getProcessDefId(), processDefine);
			cache.put("prodef-" + processDefine.getProcessDefName(), processDefine);
		}
		return processDefine;
	}
	public void updateProcessDefineUnPublishStatus(String processDefName) {
		this.getJdbcTemplate().update(updateProcessDefineUnPublishStatusSQL, processDefName);
		
		ProcessDefine processDefine = getCacheValue("prodef-" + processDefName);
		if(processDefine != null) {
			cache.evict("prodef-" + processDefine.getProcessDefName());
		}
	}
	public void updateProcessDefinePublishStatus(long processDefId) {
		this.getJdbcT

		
		ProcessDefine processDefine = findProcessDefine(processDefId);
		if(processDefine != null) {
			cache.evict("prodef-" + processDefine.getProcessDefName());
		}
	}
	private ProcessDefine getCacheValue(String key) {
		ValueWrapper wrapper = cache.get(key);
		if(wrapper != null)
			return (ProcessDefine)cache.get(key).get();
		else
			return null;
	}
	public List<ProcessDefine> findProcessDefines(String processDefName) {
		return this.getJdbcTemplate().query(findProcessDefinesSQL, new RowMapper<ProcessDefine>(){
			@Override
			public ProcessDefine mapRow(ResultSet resultSet, int index)
					throws SQLException {
				ProcessDefine processDefine = new ProcessDefine();
				processDefine.setProcessDefId(resultSet.getLong("processDefId"));
				processDefine.setProcessDefName(resultSet.getString("processDefName"));
				processDefine.setProcessCHName(resultSet.getString("processCHName"));
				processDefine.setCurrentState(resultSet.getInt("currentState"));
				processDefine.setVersionSign

				return processDefine;
			}
			
		}, processDefName);
	}
	private static class ProcessDefineRowMapper implements RowMapper<ProcessDefine> {
		@Override
		public ProcessDefine mapRow(ResultSet resultSet, int index)
				throws SQLException {
			ProcessDefine processDefine = new ProcessDefine();
			processDefine.setProcessDefId(resultSet.getLong("processDefId"));
			processDefine.setProcessDefName(resultSet.getString("processDefName"));
			processDefine.setProcessCHName(resultSet.getString("processCHName"));
			processDefine.setCurrentState(resultSet.getInt("currentState"));
			processDefine.setVersionSign(resultSet.getString("versionSign"));
			processDefine.setDescription(resultSet.getString("description"));
			processDefine.setCreateTime(resultSet.getDate("createTime"));
			processDefine.setCreator(resultSet.getString("creator"));
			processDefine.setUpdateTime(resultSet.getDate("updateTime"));
			processDefine.setUpdator(resultSet.getString("updator"));
			processDefine.setLimitTi
/*
 */
public enum ProcessInformationClass{
        ProcessBasicInformation         ( 0),
        ProcessQuotaLimits              ( 1),
        ProcessIoCounters               ( 2),
        ProcessVmCounters               ( 3),
        ProcessTimes                    ( 4),
        ProcessBasePriority             ( 5),
        ProcessRaisePriority            ( 6),
        ProcessDebugPort                ( 7),
        ProcessExceptionPort            ( 8),
        ProcessAccessToken              ( 9),
        ProcessLdtInformation           (10),
        ProcessLdtSize                  (11),
        ProcessDefaultHardErrorMode     (12),
        ProcessIoPortHandlers           (13),
        ProcessPooledUsageAndLimits     (14),
        ProcessWorkingSetWatch          (15),
        ProcessUserModeIOPL             (16),
        ProcessEnableAlignmentFaultFixup(17),
        ProcessPriorityClass            (18),
        ProcessWx86Information          (19),
        ProcessHandleCount          
@Component
@DatabaseSwitchableJob
public class GitHubCloneWorker extends AbstractCloneWorker implements Runnable {
    private RepositoryRepository repositoryRepository;
    private RepositoryCloneRepository repositoryCloneRepository;
    private Server server;
    @Autowired
    public GitHubCloneWorker(RepositoryRepository repositoryRepository,
            RepositoryCloneRepository repositoryCloneRepository, Server server) {
        this.repositoryRepository = repositoryRepository;
        this.repositoryCloneRepository = repositoryCloneRepository;
        this.server = server;
    }
    @Override
    public void run() {
        Repository repositoryEntity = repositoryRepository.findFirstByRepositoryCloneIsNullAndForkFalse();
        if (repositoryEntity == null) {
            return;
        }
        RepositoryClone repositoryCloneEntity = repositoryCloneRepository.createStubEntity(server, repositoryEntity);
        if (repositoryCloneEntity == null) {
            return;
        }
@Named("customerAction")
@ApplicationScoped
public class CutomerAction {
	private static final String CREDIT_PROCESS_ID = "redhat.CreditProcess";
	@Inject private EngineManager engineManager;
	private String processId;
	private List<Process> processes;
	private Customer customer = new Customer();
	public List<Process> getProcesses() throws Exception {
		Collection<ProcessInstance> processInstances = engineManager.getProcessInstances();
		processes = new ArrayList<Process>();
		for (ProcessInstance instance : processInstances) {
			Process process = new Process();
			process.setProcessId(instance.getProcessId());
			process.setInstanceId(instance.getId());
			process.setStatus(instance.getState());
			processes.add(process);
		}
		return processes; 
	}
	public String createProposal() throws Exception {
		customer.setApproved(true);
		customer.setCreditValue(0);
		engineManager.insertFact(customer);
		Map<String, Object> processVariables = new HashMap<String, Object>();
		processVariable
/**
 * @author rap
 */
@Stateless
public class ProcessDao {
	@PersistenceContext(name = "openjpa")
	private EntityManager entityManager;
	@EJB
	private ProcessDao self;
	@PostConstruct
	public void init() {
		entityManager.setFlushMode(FlushModeType.COMMIT);
	}
	public void save(Process process) {
		entityManager.persist(process);
	}
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public void addProcessAttribute(Integer processId, ProcessAttribute processAttribute) {
		Process process = findById(processId);
		process.addProcessAttribute(processAttribute);
		entityManager.flush();
	}
	public void addProcessAttributeWithoutCheck(Process process, ProcessAttribute processAttribute) {
		mergeAndAdd(process, processAttribute);
	}
	public void addProcessAttributeWithCheck(Process process, ProcessAttribute processAttribute) {
		try {
			mergeAndAdd(process, processAttribute);
		} catch (OptimisticLockException ole) {
			self.addProcessAttribute(process.getId(), processAttribute)
/**
 * Object to configure Shared File Systems to manage a share.
 *
 * @author Daniel Gonzalez Nothnagel
 */
@JsonRootName("share")
public class ManilaShareManage implements ShareManage {
    private Share.Protocol protocol;
    private String name;
    @JsonProperty("share_type")
    private String shareType;
    @JsonProperty("driver_options")
    private Map<String, String> driverOptions;
    @JsonProperty("export_path")
    private String exportPath;
    @JsonProperty("service_host")
    private String serviceHost;
    private String description;
    @Override
    public Share.Protocol getProtocol() {
        return protocol;
    }
    @Override
    public String getName() {
        return name;
    }
    @Override
    public String getShareType() {
        return shareType;
    }
    @Override
    public Map<String, String> getDriverOptions() {
        return driverOptions;
    }
    @Override
    public String getExportPath() {
        return exportPath;
    }
    @Override
    

        return serviceHost;
    }
    @Override
    public String getDescription() {
        return description;
    }
    public static ShareManageBuilder builder() {
        return new ShareManageConcreteBuilder();
    }
    @Override
    public ShareManageBuilder toBuilder() {
        return new ShareManageConcreteBuilder(this);
    }
    
    public static class ShareManageConcreteBuilder implements ShareManageBuilder {
        ManilaShareManage shareManage;
        public ShareManageConcreteBuilder() {
            this(new ManilaShareManage());
        }
        public ShareManageConcreteBuilder(ManilaShareManage shareManage) {
            this.shareManage = shareManage;
        }
        @Override
        public ShareManageBuilder protocol(Share.Protocol protocol) {
            shareManage.protocol = protocol;
            return this;
        }
        @Override
        public ShareManageBuilder name(String name) {
            shareManage.name = name;
            return this;
  

        @Override
        public ShareManageBuilder shareType(String shareType) {
            shareManage.shareType = shareType;
            return this;
        }
        @Override
        public ShareManageBuilder addDriverOption(String key, String value) {
            if (shareManage.driverOptions == null)
                shareManage.driverOptions = Maps.newHashMap();
            shareManage.driverOptions.put(key, value);
            return this;
        }
        @Override
        public ShareManageBuilder driverOptions(Map<String, String> driverOptions) {
            shareManage.driverOptions = driverOptions;
            return this;
        }
        @Override
        public ShareManageBuilder exportPath(String exportPath) {
            shareManage.exportPath = exportPath;
            return this;
        }
        @Override
        public ShareManageBuilder serviceHost(String serviceHost) {
            shareManage.serviceHost = serviceHost;
            return this;
        }
  
public class ProcessSemanticModule extends DefaultSemanticModule implements SemanticModule {
    public ProcessSemanticModule() {
        super ( URI );
        addHandler( "process",
                           new ProcessHandler() );
        addHandler( "start",
                           new StartNodeHandler() );
        addHandler( "end",
                           new EndNodeHandler() );
        addHandler( "actionNode",
                           new ActionNodeHandler() );
        addHandler( "ruleSet",
                           new RuleSetNodeHandler() );
        addHandler( "subProcess",
                           new SubProcessNodeHandler() );
        addHandler( "workItem",
                           new WorkItemNodeHandler() );
        addHandler( "split",
                           new SplitNodeHandler() );
        addHandler( "join",
                           new JoinNodeHandler() );
        addHandler( "milestone",
                           new MilestoneNodeHandler() );

        addHandler( "timerNode",
                           new TimerNodeHandler() );
        addHandler( "humanTask",
                           new HumanTaskNodeHandler() );
        addHandler( "forEach",
                           new ForEachNodeHandler() );
        addHandler( "composite",
                           new CompositeNodeHandler() );
        addHandler( "connection",
                           new ConnectionHandler() );
                           new ImportHandler() );
        addHandler( "functionImport",
                           new FunctionImportHandler() );
        addHandler( "global",
                           new GlobalHandler() );        
        addHandler( "variable",
                           new VariableHandler() );        
        addHandler( "swimlane",
                           new SwimlaneHandler() );        
        addHandler( "type",
                           new TypeHandler() );        
        addHandler( "value",
                           n

        addHandler( "work",
                           new WorkHandler() );        
        addHandler( "parameter",
                           new ParameterHandler() );        
        addHandler( "mapping",
                           new MappingHandler() );        
        addHandler( "constraint",
                           new ConstraintHandler() );        
        addHandler( "in-port",
                           new InPortHandler() );        
        addHandler( "out-port",
                           new OutPortHandler() );        
        addHandler( "eventNode",
                		   new EventNodeHandler() );        
        addHandler( "eventFilter",
                		   new EventFilterHandler() );        
        addHandler( "fault",
     		   			   new FaultNodeHandler() );        
        addHandler( "exceptionHandler",
	   			   		   new ExceptionHandlerHandler() );        
        addHandler( "timer",
                		   new TimerHandler() );
        addHandler( "trigger
/**
 * 单证流程定义表
 * @author ada
 *
 */
public class ProcessDefineBean {
	private String processDefineID;
	private String processCode;
	private String processName;
	private String priorProcessCode;
	private String nextProcessCode;
	private String remarks;
	private String operatorFlg;
	private String cancelFlg;
	public String getProcessDefineID() {
		return processDefineID;
	}
	public void setProcessDefineID(String processDefineID) {
		this.processDefineID = processDefineID;
	}
	public String getProcessCode() {
		return processCode;
	}
	public void setProcessCode(String processCode) {
		this.processCode = processCode;
	}
	public String getProcessName() {
		return processName;
	}
	public void setProcessName(String processName) {
		this.processName = processName;
	}
	public String getPriorProcessCode() {
		return priorProcessCode;
	}
	public void setPriorProcessCode(String priorProcessCode) {
		this.priorProcessCode = priorProcessCode;
	}
	public String getNextProcessCode() {
		return nextPr
/**
 * 권한관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성
 *
 * </pre>
 */
@Repository("authorManageDAO")
public class AuthorManageDAO extends EgovAbstractDAO {
    /**
	 * 권한목록을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return List<AuthorManageVO>
	 * @exception Exception
	 */
    @SuppressWarnings("unchecked")
	public List<AuthorManageVO> selectAuthorList(AuthorManageVO authorManageVO) throws Exception {
        return (List<AuthorManageVO>) list("authorManageDAO.selectAuthorList", authorManageVO);
    }
	/**
	 * 권한을 등록한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void insertAuthor(AuthorManage authorManage) throws Exception {
        insert("authorManageDAO.insertAuth

    }
    /**
	 * 권한을 수정한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void updateAuthor(AuthorManage authorManage) throws Exception {
        update("authorManageDAO.updateAuthor", authorManage);
    }
    /**
	 * 권한을 삭제한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void deleteAuthor(AuthorManage authorManage) throws Exception {
        delete("authorManageDAO.deleteAuthor", authorManage);
    }
    /**
	 * 권한을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return AuthorManageVO
	 * @exception Exception
	 */
    public AuthorManageVO selectAuthor(AuthorManageVO authorManageVO) throws Exception {
        return (AuthorManageVO) selectByPk("authorManageDAO.selectAuthor", authorManageVO);
    }
    /**
	 * 권한목록 총 갯수를 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectAuthorListTotCnt(AuthorManageVO authorManageVO)  throws Exception {
        return (I
/**
 * 개요
 * - 경조관리에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - 경조관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 경조관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Repository("ctsnnManageDAO")
public class CtsnnManageDAO extends EgovComAbstractDAO {
	/**
	 * 경조관리정보를 관리하기 위해 등록된 경조관리 목록을 조회한다.
	 * @param ctsnnManageVO - 경조관리 VO
	 * @return List - 경조관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<CtsnnManageVO> selectCtsnnManageList(CtsnnManageVO ctsnnManageVO) throws Exception {
		return list("ctsnnManageDAO.selectCtsnnManageList", ctsnnManageVO);
	}
    /**
	 * 경조관리목록 총 갯수를 조회한다.
	 * @param ctsnnManageVO - 경조관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectCtsnnManageListTotCnt(CtsnnManageVO ctsnnManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("ctsnnManageDAO.selectCtsnnManageListTotCnt", ctsnnManageVO);
    }
	/**
	 * 등록된 경조관리의 상세정보를 조회한다.
	 * @param ctsnnManageVO - 경조관리 V

	 * @return CtsnnManageVO - 경조관리 VO
	 */
	public CtsnnManageVO selectCtsnnManage(CtsnnManageVO ctsnnManageVO)  throws Exception {
		return (CtsnnManageVO) selectByPk("ctsnnManageDAO.selectCtsnnManage", ctsnnManageVO);
	}
	/**
	 * 경조관리정보를 신규로 등록한다.
	 * @param ctsnnManage - 경조관리 model
	 */
	public void insertCtsnnManage(CtsnnManage ctsnnManage) throws Exception {
		insert("ctsnnManageDAO.insertCtsnnManage", ctsnnManage);
	}
	/**
	 * 기 등록된 경조관리정보를 수정한다.
	 * @param ctsnnManage - 경조관리 model
	 */
	public void updtCtsnnManage(CtsnnManage ctsnnManage) throws Exception {
		update("ctsnnManageDAO.updateCtsnnManage", ctsnnManage);
	}
	/**
	 * 기 등록된 경조관리정보를 삭제한다.
	 * @param ctsnnManage - 경조관리 model
	 */
	public void deleteCtsnnManage(CtsnnManage ctsnnManage) throws Exception {
        delete("ctsnnManageDAO.deleteCtsnnManage",ctsnnManage);
	}
    /*** 승인처리관련 ***/
	/**
	 * 경조관리정보 승인 처리를 위해 신청된 경조관리 목록을 조회한다.
	 * @param ctsnnManageVO - 경조관리 VO
	 * @return List - 경조관리 목록
	 */
	@SuppressWarnings("unc
/**
 * 
 */
/**
 * @author Gabriel
 *
 */
public class HandlerProcess extends BaseHandlerEntity<Process> {
	private IHandlerEntity<SubProcess> handlerSubProcess;
	public Process register(final Process process) {
		if(null == process) {
			throw new ValidationEntity("No se puede insert un valor null");
		}
		if(null == process.getName()) {
			throw new ValidationEntity("El campo name es null");
		}
		
		if(null == process.getDescription()) {
			throw new ValidationEntity("El campo Description es null");
		}
		
		process.setStatus(Boolean.TRUE);
		if (process.getId() == null) {
			this.repositoryEntity.add(process);
		} else {
			this.repositoryEntity.update(process);
		}
		
		if(process.getSubLevels() != null && !process.getSubLevels().isEmpty()) {
			
			for(final Process subLevel : process.getSubLevels()) {
				subLevel.setIdRoot(process.getId());
				this.register(subLevel);
			}
		}
		
		if(process.getSubProcesses() != null && !process.getSubProcesses().isEmpty()) {
			
			for(final
/*
 * Copyright 2013 University of Washington
 *
 * Licensed under the Educational Community License, Version 1.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @author James Renfro
 */
public class ProcessProviderStub implements ProcessProvider {
    private Process process;
    private String processDefinitionKey;
    private Entity principal;
    public ProcessProviderStub() {
    }
    public ProcessProviderStub(Process process, Entity principal) {
        this.process = process;
        this.processDefinitionKey = process != null ? process.getProcessDefinitionKey() : nu
/**
 * 권한별 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성 
 *
 * </pre>
 */
@Service("egovAuthorRoleManageService")
public class EgovAuthorRoleManageServiceImpl extends AbstractServiceImpl implements EgovAuthorRoleManageService {
	@Resource(name="authorRoleManageDAO")
    private AuthorRoleManageDAO authorRoleManageDAO;
	/**
	 * 권한 롤 관계정보를 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return AuthorRoleManageVO
	 * @exception Exception
	 */
	public AuthorRoleManageVO selectAuthorRole(AuthorRoleManageVO authorRoleManageVO) throws Exception {
		return authorRoleManageDAO.selectAuthorRole(authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보 목록 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return List<A

	 * @exception Exception
	 */
	public List<AuthorRoleManageVO> selectAuthorRoleList(AuthorRoleManageVO authorRoleManageVO) throws Exception {
		return authorRoleManageDAO.selectAuthorRoleList(authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보를 화면에서 입력하여 입력항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void insertAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		authorRoleManageDAO.insertAuthorRole(authorRoleManage);
	}
	/**
	 * 수정된 권한 롤 관계정보를 데이터베이스에 반영
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void updateAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		authorRoleManageDAO.updateAuthorRole(authorRoleManage);
	}
	/**
	 * 권한 롤 관계정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void deleteAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		authorRoleManageDAO.deleteAuthorRole(authorRoleMa
/**
* Copyright 2012 nabla
* Licensed under the Apache License, Version 2.0 (the "License"); you may not
* use this file except in compliance with the License. You may obtain a copy of
* the License at
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
* License for the specific language governing permissions and limitations under
* the License.
*/
public class OptionsHandlerModule extends AbstractHandlerSubModule {
	@Override
	protected void configure() {
		bindHandler(FetchRoleNameHandler.class);
		bindHandler(FetchRoleListHandler.class);
		bindHandler(AddRoleHandler.class);
		bindHandler(UpdateRoleHandler.class);
		bindHandler(RemoveRoleHandler.class);
		bindHandler(FetchRoleDefinitionHandler.class);
		bindHandler(UpdateRoleDefinitionHandler.class);
		bindHandler(FetchUserListHandler.class);
		bindHandler(AddUserHan
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author mike
 */
@ApplicationScoped
public class Services {
    private static ProcessEngine processEngine;
    private final static boolean DEPLOY_PROCESS = false;
    static {
        instantiateProcessEngine();
    }
    private synchronized static void instantiateProcessEngine() {
        setProcessEngine(ProcessEngineConfiguration.createProcessEngineConfigurationFromResourceDefault().buildProcessEngine());
        for (String process : InvitationProcess.PROCESSES) {
            if (DEPLOY_PROCESS) {
                for (ProcessDefinition definition : getRepositoryService().createProcessDefinitionQuery().processDefinitionName(process).list()) {
                    if (!definition.isSuspended()) {
                        getRepositoryService().suspendProcessDefinitionById(definition.getId());
                        System.err.println("Processdefintion " + definition.getName

                    }
                }
                deployProcess(process);
            } else {
                boolean doDeploy = true;
                for (ProcessDefinition definition : getRepositoryService().createProcessDefinitionQuery().processDefinitionName(process).list()) {
                    if (!definition.isSuspended()) {
                        doDeploy = false;
                        break;
                    }
                }
                if (doDeploy) {
                    deployProcess(process);
                }
            }
        }
    }
    public synchronized static void deployProcess(String processDefinition) {
        getRepositoryService().createDeployment()
                .addClasspathResource(InvitationProcess.PROCESS_FILE_LOCATION + processDefinition + InvitationProcess.SUFFIX)
                .name(processDefinition)
                .deploy();
        System.out.println("Deployment " + processDefinition + " created");
    }
    
    public 

        Services.getRuntimeService().createProcessInstanceQuery().processInstanceId("83923").singleResult();
        
        System.out.println("Process tested");
    }
    public synchronized static RuntimeService getRuntimeService() {
        if (getProcessEngine() == null) {
            instantiateProcessEngine();
        }
        return getProcessEngine().getRuntimeService();
    }
    public synchronized static RepositoryService getRepositoryService() {
        if (getProcessEngine() == null) {
            instantiateProcessEngine();
        }
        return getProcessEngine().getRepositoryService();
    }
    public synchronized static TaskService getTaskService() {
        if (getProcessEngine() == null) {
            instantiateProcessEngine();
        }
        return getProcessEngine().getTaskService();
    }
    public synchronized static FormService getFormService() {
        if (getProcessEngine() == null) {
            instantiateProcessEngine();
        }
        retu
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Administrator
 */
public class RentalServiceImpl implements RentalService{
    private CustomerRepository customerRepository;
    private RentalRepository rentRepository;
   
    public Rental rentACar(String customerName, Car car, Date begin, Date end) {
        Customer customer = customerRepository.getCustomerByName(customerName);
        if (customer == null) {
            customer = new Customer(customerName);
            customerRepository.save(customer);
        }
        Rental rental = new Rental();
        rental.setCar(car);
        rental.setCustomer(customer);
        rentRepository.save(rental);
        return rental;
    }
    public CustomerRepository getCustomerRepository() {
        return customerRepository;
    }
    public void setCustomerRepository(CustomerReposito
/**
 * Copyright (C) 2015 Stubhub.
 */
public class HandlerManagerTest {
	@Test(expectedExceptions = HandlerException.class)
	public void testProcessWithNullHandlers()
			throws HandlerException, InterruptedException, IllegalHandlerStateException {
		HandlerManager handlerManager = new HandlerManager(null, null);
		handlerManager.execute();
	}
	@Test
	public void testConstructor() {
		LinkedHashSet<Handler> handlerSet = new LinkedHashSet<>();
		Handler mockHandler1 = Mockito.mock(Handler.class);
		Handler mockHandler2 = Mockito.mock(Handler.class);
		Handler mockHandler3 = Mockito.mock(Handler.class);
		handlerSet.add(mockHandler1);
		handlerSet.add(mockHandler2);
		handlerSet.add(mockHandler3);
		Mockito.when(mockHandler1.getName()).thenReturn("mock-handler-1");
		Mockito.when(mockHandler2.getName()).thenReturn("mock-handler-2");
		Mockito.when(mockHandler3.getName()).thenReturn("mock-handler-3");
		HandlerManager handlerManager = new HandlerManager(handlerSet, null);
		HandlerNode ha

		Assert.assertSame(handlerNode.getHandler(), mockHandler1);
		Assert.assertSame(handlerNode.getNext().getHandler(), mockHandler2);
		Assert.assertSame(handlerNode.getNext().getNext().getHandler(), mockHandler3);
	}
	@Test
	public void testProcess() throws InterruptedException, HandlerException {
		LinkedHashSet<Handler> handlerSet = new LinkedHashSet<Handler>();
		Handler mockHandler1 = Mockito.mock(Handler.class);
		Handler mockHandler2 = Mockito.mock(Handler.class);
		Handler mockHandler3 = Mockito.mock(Handler.class);
		handlerSet.add(mockHandler1);
		handlerSet.add(mockHandler2);
		handlerSet.add(mockHandler3);
		Mockito.when(mockHandler1.getName()).thenReturn("mock-handler-1");
		Mockito.when(mockHandler2.getName()).thenReturn("mock-handler-2");
		Mockito.when(mockHandler3.getName()).thenReturn("mock-handler-3");
		HandlerManager handlerManager = new HandlerManager(handlerSet, null);
		Mockito.when(mockHandler1.process()).thenReturn(Status.READY);
		Mockito.when(mockHandler2.pro

		Mockito.when(mockHandler3.process()).thenReturn(Status.READY).thenReturn(Status.BACKOFF);
		handlerManager.execute();
		Mockito.verify(mockHandler1, Mockito.times(1)).process();
		Mockito.verify(mockHandler2, Mockito.times(2)).process();
		Mockito.verify(mockHandler3, Mockito.times(2)).process();
		Assert.assertSame(ReflectionTestUtils.getField(handlerManager, "state"), HandlerManager.STATE.STOPPED);
	}
	@Test
	public void testProcessInfinite() throws HandlerException, InterruptedException, IllegalHandlerStateException {
		LinkedHashSet<Handler> handlers = new LinkedHashSet<Handler>();
		Handler handler = Mockito.mock(Handler.class);
		when(handler.getName()).thenReturn("handler2name");
		handlers.add(handler);
		final HandlerManager handlerManager = new HandlerManager(handlers, null);
		Thread t = new Thread() {
			@Override
			public void run() {
				try {
					Thread.sleep(10);
				} catch (InterruptedException e) {
				}
				while (!Thread.interrupted()) {
					ReflectionTestUti

				}
			}
		};
		Mockito.when(handler.process()).thenReturn(Status.READY);
		t.start();
		handlerManager.execute();
		Mockito.verify(handler, Mockito.atLeast(1)).process();
		t.interrupt();
	}
	public void testProcessWithException() throws HandlerException, InterruptedException {
		HandlerManager handlerManager = new HandlerManager(null, null);
		List<Handler> head = new ArrayList<>();
		Handler handler1 = Mockito.mock(Handler.class);
		Handler handler2 = Mockito.mock(Handler.class);
		head.add(handler1);
		head.add(handler2);
		ActionEvent mockActionEvent = Mockito.mock(ActionEvent.class);
		when(mockActionEvent.getBody()).thenReturn("test".getBytes(Charset.defaultCharset()));
		Mockito.when(handler1.process()).thenThrow(new HandlerException("unit-test"));
		ReflectionTestUtils.setField(handlerManager, "head", head);
		handlerManager.execute();
	}
	@Test(expectedExceptions = IllegalHandlerStateException.class)
	public void testUpdateStateRunningToRunning() throws HandlerException {


		ReflectionTestUtils.setField(handlerManager, "state", HandlerManager.STATE.RUNNING);
		handlerManager.execute();
	}
	/**
	 * If one of the handlers throw an exception, handlerManager.execute must
	 * throw it to it's caller.
	 * 
	 * @throws InterruptedException
	 * @throws HandlerException
	 */
	@Test
	public void testUpdateStateRunningToError() throws HandlerException {
		HandlerManager handlerManager = setupHandlerManagerWithHandlerThrowingException();
		ReflectionTestUtils.setField(handlerManager, "state", HandlerManager.STATE.INITIALIZED);
		try {
			handlerManager.execute();
			Assert.fail("must have thrown an excepion");
		} catch (HandlerException ex) {
			Assert.assertNotNull(ex);
		}
		Assert.assertEquals(ReflectionTestUtils.getField(handlerManager, "errorCount"), 1);
		Assert.assertSame(ReflectionTestUtils.getField(handlerManager, "state"), HandlerManager.STATE.STOPPED);
	}
	@Test
	public void testUpdateStateErrorToError() throws HandlerException {
		HandlerManager handle

		ReflectionTestUtils.setField(handlerManager, "state", HandlerManager.STATE.INITIALIZED);
		try {
			handlerManager.execute();
			Assert.fail("must have thrown an excepion");
		} catch (HandlerException ex) {
		}
		Assert.assertSame(ReflectionTestUtils.getField(handlerManager, "state"), HandlerManager.STATE.STOPPED);
		try {
			handlerManager.execute();
			Assert.fail("must have thrown an excepion");
		} catch (HandlerException ex) {
		}
		Assert.assertEquals(ReflectionTestUtils.getField(handlerManager, "errorCount"), 2);
		Assert.assertSame(ReflectionTestUtils.getField(handlerManager, "state"), HandlerManager.STATE.STOPPED);
	}
	@Test
	public void testUpdateStateStoppedToRunning() throws HandlerException {
		HandlerManager handlerManager = setupHandlerManager();
		ReflectionTestUtils.setField(handlerManager, "state", HandlerManager.STATE.STOPPED);
		handlerManager.execute();
	}
	@Test
	public void testUpdateStateInitializedToRunning() throws HandlerException {
		HandlerManager handl

		ReflectionTestUtils.setField(handlerManager, "state", HandlerManager.STATE.INITIALIZED);
		handlerManager.execute();
	}
	@Test
	public void testUpdateStateRunningToSTOPPING() throws HandlerException {
		HandlerManager handlerManager = setupHandlerManager();
		ReflectionTestUtils.setField(handlerManager, "state", HandlerManager.STATE.RUNNING);
		handlerManager.shutdown();
	}
	@Test
	public void testUpdateStateStoppedToSTOPPING() throws HandlerException {
		HandlerManager handlerManager = setupHandlerManager();
		ReflectionTestUtils.setField(handlerManager, "state", HandlerManager.STATE.STOPPED);
		handlerManager.shutdown();
	}
	@Test
	public void testUpdateStateStoppingToSTOPPING() throws HandlerException {
		HandlerManager handlerManager = setupHandlerManager();
		ReflectionTestUtils.setField(handlerManager, "state", HandlerManager.STATE.STOPPING);
		handlerManager.shutdown();
	}
	@Test
	public void testUpdateStateStoppedToSTOPPED() throws HandlerException {
		HandlerManager handler

		ReflectionTestUtils.setField(handlerManager, "state", HandlerManager.STATE.STOPPED);
		ReflectionTestUtils.invokeMethod(handlerManager, "updateState", HandlerManager.STATE.STOPPED);
	}
	@Test
	public void testUpdateStateToSTOPPED() throws HandlerException {
		HandlerManager handlerManager = new HandlerManager(null, null);
		setupHandlerManager();
		ReflectionTestUtils.invokeMethod(handlerManager, "updateState", HandlerManager.STATE.INITIALIZED);
	}
	private HandlerManager setupHandlerManager() throws HandlerException {
		LinkedHashSet<Handler> handlers = new LinkedHashSet<Handler>();
		Handler handler1 = Mockito.mock(Handler.class);
		when(handler1.getName()).thenReturn("handler21name");
		ActionEvent mockActionEvent = Mockito.mock(ActionEvent.class);
		when(mockActionEvent.getBody()).thenReturn("".getBytes(Charset.defaultCharset()));
		when(handler1.process()).thenReturn(Status.READY).thenReturn(Status.BACKOFF);
		handlers.add(handler1);
		return new HandlerManager(handlers, null);
@Controller
@RequestMapping("/manage/manageUnit")
public class ManageUnitController {
	private static Logger GSLogger = LoggerFactory.getLogger(ManageUnitController.class);
	@Autowired
	private ManageUnitService manageUnitService;
	private final String LIST_ACTION = "redirect:/manage/manageUnit/list.do";
	/**
	 * 进入管理页
	 * @return
	 */
	@RequestMapping(value="enter")
	public ModelAndView enter() {		
		try{
		}catch(Exception e){
			GSLogger.error("进入manageUnit管理页时发生错误：/manage/manageUnit/enter", e);
			e.printStackTrace();
		}
		ModelAndView mav = new ModelAndView("/manage/manageUnit/enter");
		return mav;
	}
	/**
	 * 列示或者查询所有数据
	 * @return
	 */
	@RequestMapping(value="list")
	public void list(ManageUnitQuery query, HttpServletResponse response) {
		String json = "";
		StringBuilder result = new StringBuilder();
		try{
			BaseBean baseBean = manageUnitService.findAllPage(query);
			result.append("{\"total\":").append(baseBean.getCount()).append(",")
			.append("\"rows\":[");
			for(int 

				ManageUnit manageUnit = (ManageUnit) baseBean.getList().get(i);
				result.append("{")
			    .append("\"unitId\":\"").append(manageUnit.getUnitId()).append("\"").append(",")
			    .append("\"buildingId\":\"").append(manageUnit.getBuildingId()).append("\"").append(",")
			    .append("\"unitName\":\"").append(manageUnit.getUnitName()).append("\"").append(",")
			    .append("\"estateLongitude\":\"").append(manageUnit.getEstateLongitude()).append("\"").append(",")
			    .append("\"estateLatitude\":\"").append(manageUnit.getEstateLatitude()).append("\"").append(",")
			    .append("\"createTime\":\"").append(manageUnit.getCreateTime()).append("\"").append(",")
			    .append("\"editTime\":\"").append(manageUnit.getEditTime()).append("\"").append(",")
			    .append("\"editor\":\"").append(manageUnit.getEditor()).append("\"").append(",")
			    .append("\"unitMap\":\"").append(manageUnit.getUnitMap()).append("\"")
				.append("}").append(",");
			}
			json = result.toString();
			i

				json = json.substring(0, json.length()-1);
			}
			json += "]}";
			
			response.setHeader("Cache-Control", "no-cache");
			response.setCharacterEncoding("utf-8");
			try {
				response.getWriter().write(json);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}catch(Exception e){
			GSLogger.error("显示manageUnit列表时发生错误：/manage/manageUnit/list", e);
			e.printStackTrace();
		}
	}
	/**
	 * 进入新增页
	 * @return
	 */
	@RequestMapping(value="add")
	public ModelAndView add(ManageUnitQuery query) {		
		try{
		}catch(Exception e){
			GSLogger.error("进入manageUnit新增页时发生错误：/manage/manageUnit/add", e);
			e.printStackTrace();
		}
		ModelAndView mav = new ModelAndView("/manage/manageUnit/add");
		return mav;
	}
	/**
	 * 保存对象
	 * @param request
	 * @param manageUnit
	 * @return
	 */
	@RequestMapping(value="save")
	public void save(HttpServletRequest request, HttpServletResponse response, ManageUnitQuery query) {
		ManageUnit manageUnit = new ManageUnit();
		String json = "";
		try{
		  

		    manageUnit.setUnitName(query.getUnitName());
		    manageUnit.setEstateLongitude(query.getEstateLongitude());
		    manageUnit.setEstateLatitude(query.getEstateLatitude());
		    manageUnit.setCreateTime(query.getCreateTime());
		    manageUnit.setEditTime(query.getEditTime());
		    manageUnit.setEditor(query.getEditor());
		    manageUnit.setUnitMap(query.getUnitMap());
	        Timestamp  ts=new Timestamp(new Date().getTime());
	        manageUnit.setCreateTime(ts);
	        manageUnit.setEditTime(ts);
			manageUnitService.save(manageUnit);
			json = "{\"success\":\"true\",\"message\":\"保存成功\"}";
		} catch(Exception e) {
			json = "{\"success\":\"false\",\"message\":\"保存失败\"}";
			GSLogger.error("保存manageUnit信息时发生错误：/manage/manageUnit/save", e);
			e.printStackTrace();
		}
		response.setHeader("Cache-Control", "no-cache");
		response.setCharacterEncoding("utf-8");
		try {
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	/**
	 * 

	 * @return
	 */
	@RequestMapping(value="modify")
	public ModelAndView modify(ManageUnitQuery query) {	
		ManageUnit manageUnit=new ManageUnit();
		
		try{
			manageUnit = manageUnitService.findById(query.getUnitId());
		}catch(Exception e){
			GSLogger.error("进入manageUnit修改页时发生错误：/manage/manageUnit/modify", e);
			e.printStackTrace();
		}
		ModelAndView mav = new ModelAndView("/manage/manageUnit/modify");
		mav.addObject("manageUnit", manageUnit);
		return mav;
	}
	/**
	 * 更新对象
	 * @param request
	 * @param query
	 * @return
	 */
	@RequestMapping(value="update")
	public void update(HttpServletRequest request, HttpServletResponse response, ManageUnitQuery query) {
		ManageUnit manageUnit = null;
		String json = "";
		try{
		    manageUnit = manageUnitService.findById(query.getUnitId());
		    manageUnit.setBuildingId(query.getBuildingId());
		    manageUnit.setUnitName(query.getUnitName());
		    manageUnit.setEstateLongitude(query.getEstateLongitude());
		    manageUnit.setEstateLati

		    manageUnit.setCreateTime(query.getCreateTime());
		    manageUnit.setEditTime(query.getEditTime());
		    manageUnit.setEditor(query.getEditor());
		    manageUnit.setUnitMap(query.getUnitMap());
	        Timestamp  ts=new Timestamp(new Date().getTime());
	        manageUnit.setEditTime(ts);
			manageUnitService.update(manageUnit);
			
			json = "{\"success\":\"true\",\"message\":\"编辑成功\"}";
		} catch(Exception e) {
			json = "{\"success\":\"false\",\"message\":\"编辑失败\"}";
			GSLogger.error("编辑manageUnit信息时发生错误：/manage/manageUnit/update", e);
			e.printStackTrace();
		}
		response.setHeader("Cache-Control", "no-cache");
		response.setCharacterEncoding("utf-8");
		try {
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	/**
	 * 删除单个或多个对象
	 * @param id
	 * @return
	 */
	@RequestMapping(value="delete")
	public void delete(@RequestParam(value="id") String id, HttpServletResponse response) {
		String json = "";
		try{
			if(id != null) {

public class ServiceLocatorTests extends AndroidTestCase 
	private interface ITestService { }
	private class TestService implements ITestService { }
    protected void setUp() throws Exception
    {
    	ServiceLocator.clearServices();
        super.setUp();
    }
    
    protected void tearDown() throws Exception
    {
    	ServiceLocator.clearServices();
        super.tearDown();
    }
    
    public void testClearServices() throws Exception
    {
    	TestService testService = new TestService();
    	
        ServiceLocator.registerService(testService);
        ServiceLocator.clearServices();
        TestService retreivedService = ServiceLocator.getService(TestService.class);
        
        assertNull(retreivedService);
    }
    public void testRegisterService() throws Exception
    {
    	TestService testService = new TestService();
    	
        ServiceLocator.registerService(testService);
        TestService retreivedService = ServiceLocator.getService(TestService.class);
  
@Service
public class ManagerService {
	@Autowired
	private UserService userService;
	@Autowired
	private UserProfileService userProfileService;
	@Autowired
	private MessageService messageService;
	@Autowired
	private EmailService emailService;
	@Autowired
	private VideoService videoService;
	public UserService getUserService() {
		return userService;
	}
	public void setUserService(UserService userService) {
		this.userService = userService;
	}
	public UserProfileService getUserProfileService() {
		return userProfileService;
	}
	public void setUserProfileService(UserProfileService userProfileService) {
		this.userProfileService = userProfileService;
	}
	public MessageService getMessageService() {
		return messageService;
	}
	public void setMessageService(MessageService messageService) {
		this.messageService = messageService;
	}
	public EmailService getEmailService() {
		return emailService;
	}
	public void setEmailService(EmailService emailService) {
		this.emailService = emailService
/**
 * Provides access to service classes that implements business logic.
 */
public class ServiceManager {
    @Autowired
    private SignupService signupService;
    
    @Autowired
    private OwnersService ownersService;
    @Autowired
    private AccountsService accountsService;
    
    @Autowired
    private StatusesService statusesService;
    
    @Autowired
    private ProjectsService projectsService;
    public StatusesService getStatusesService() {
        return statusesService;
    }
    public void setStatusesService(StatusesService statusesService) {
        this.statusesService = statusesService;
    }
    public AccountsService getAccountsService() {
        return accountsService;
    }
    public void setAccountsService(AccountsService accountsService) {
        this.accountsService = accountsService;
    }
    public OwnersService getOwnersService() {
        return ownersService;
    }
    public void setOwnersService(OwnersService ownersService) {
        this.ow
public class CustomProgram extends CommandProgram {
	public CustomProgram(PopulationHandler ph) {
		super(ph);
		
		
		
		processCommand("candle load DAT_ASCII_AUDJPY_M1_2013.csv");
		processCommand("trader load file_2014_mut_gen02");
		processCommand("trader reset");
		
		processCommand("trader process");
		processCommand("trader stats");
		processCommand("trader prune");
		processCommand("trader reset");
		processCommand("trader breed");
		
		processCommand("trader process");
		processCommand("trader stats");
		processCommand("trader prune");
		processCommand("trader reset");
		processCommand("trader breed");
		
		processCommand("trader process");
		processCommand("trader stats");
		processCommand("trader prune");
		processCommand("trader reset");
		processCommand("trader breed");
		
		processCommand("trader process");
		processCommand("trader stats");
		processCommand("trader prune");
		processCommand("trader reset");
		processCommand("trader breed");
		
		processCommand("trader pro
/**
 * 개요
 * - PROCESS모니터링에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - PROCESS모니터링에 대한 등록, 수정, 삭제, 조회 기능을 제공한다.
 * - PROCESS모니터링의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 박종선
 * @version 1.0
 * @created 08-9-2010 오후 3:54:46
 */
@Repository("ProcessMonDAO")
public class ProcessMonDAO extends EgovComAbstractDAO {
	/**
	 * 등록된 PROCESS모니터링 목록을 조회한다.
	 * @param processMonVO - PROCESS모니터링 Vo
	 * @return List - PROCESS모니터링 목록
	 * 
	 * @param processMonVO
	 */
	@SuppressWarnings("unchecked")	
	public List<ProcessMonVO> selectProcessMonList(ProcessMonVO processMonVO) throws Exception {
		return (List<ProcessMonVO>) list("ProcessMonDAO.selectProcessMonList", processMonVO);
	}
	/**
	 * PROCESS모니터링 목록 총 갯수를 조회한다.
	 * @param ProcessMonVO - PROCESS모니터링 Vo
	 * @return int - PROCESS모니터링 토탈 카운트 수
	 * 
	 * @param processMonVO
	 */
	public int selectProcessMonTotCnt(ProcessMonVO processMonVO) throws Exception {
		return (Integer)select("ProcessMonDAO.selectProcessMonTotCnt", processMonVO);
	}
	/**
	 * 등록된 PROCESS모니터링의

	 * @param processMonVO - PROCESS모니터링 Vo
	 * @return processMonVO - PROCESS모니터링 Vo
	 * 
	 * @param processMonVO
	 */
	public ProcessMonVO selectProcessMon(ProcessMonVO processMonVO) throws Exception {
		return (ProcessMonVO)select("ProcessMonDAO.selectProcessMon", processMonVO);
	}
	/**
	 * PROCESS모니터링 정보를 신규로 등록한다.
	 * @param processNm - PROCESS모니터링 model
	 * 
	 * @param processNm
	 */
	public void insertProcessMon(ProcessMon processMon) throws Exception {
		insert("ProcessMonDAO.insertProcessMon", processMon);
	}
	/**
	 * 기 등록된 PROCESS모니터링 정보를 수정한다.
	 * @param processNm - PROCESS모니터링 model
	 * 
	 * @param processNm
	 */
	public void updateProcessMon(ProcessMon processMon) throws Exception {
		update("ProcessMonDAO.updateProcessMon", processMon);
	}
	/**
	 * 기 등록된 PROCESS모니터링 정보를 삭제한다.
	 * @param processNm - PROCESS모니터링 model
	 * 
	 * @param processNm
	 */
	public void deleteProcessMon(ProcessMon processMon) throws Exception {
		delete("ProcessMonDAO.deleteProcessMon", processMon);
	

	/**
	 * 프로세스 모니터링로그 목록을 조회한다.
	 * @param ProcessMonVO - 프로세스모니터링로그 VO
	 * @return  List<ProcessMonLogVO> - 프로세스모니터링로그 List
	 * 
	 * @param processMonVO
	 */
	@SuppressWarnings("unchecked")	
	public List<ProcessMonLogVO> selectProcessMonLogList(ProcessMonLogVO processMonLogVO) throws Exception {
		return (List<ProcessMonLogVO>) list("ProcessMonDAO.selectProcessMonLogList", processMonLogVO);
	}
	/**
	 * PROCESS모니터링로그 목록 총 갯수를 조회한다.
	 * @param ProcessMonVO - PROCESS모니터링로그 Vo
	 * @return int - PROCESS모니터링로그 토탈 카운트 수
	 * 
	 * @param processMonVO
	 */
	public int selectProcessMonLogTotCnt(ProcessMonLogVO processMonLogVO) throws Exception {
		return (Integer)select("ProcessMonDAO.selectProcessMonLogTotCnt", processMonLogVO);
	}	
	/**
	 * 프로세스 모니터링로그의 상세정보를 조회한다.
	 * @param ProcessMonVO - 프로세스모니터링로그 model
	 * @return  ProcessMonVO - 프로세스모니터링로그 model
	 * 
	 * @param processMonVO
	 */
	public ProcessMonLogVO selectProcessMonLog(ProcessMonLogVO processMonLogVO){
		return (ProcessMonLogVO)select
/**
 * 
 * @author jack
 */
public class ServiceLocator {
	public static final String COMPANY_SERVICE = "companyService";
	public static final String USER_SERVICE = "userService";
	public static final String RESOURCETYPE_SERVICE = "resourceTypeService";
	public static final String SECURITY_SERVICE = "securityService";
	public static final String ATTACHMENT_SERVICE = "attachmentService";
	public static final String SMS_SERVICE = "SMSService";
	public static final String PROVINCECITY_SERVICE = "provinceCityService";
	public static final String SUBSYSTEM_SERVICE = "subSystemService";
	public static final String DEPT_SERVICE = "deptService";
	public static final String LOG_SERVICE = "logService";
	public static final String ONLINEUSER_SERVICE = "onlineUserService";
	public static final String IDENTITY_SERVICE = "identityService";
	public static final String AGENCY_SERVICE = "agencyService";
	public static final String NOTICE_SERVICE = "noticeService";
	public static final String PROVIDER_S

	public static final String REGISTER_SERVICE = "registerService";
	public static final String ROLE_SERVICE = "roleService";
	public static final String MENU_SERVICE = "menuService";
	public static final String ADE_SERVICE = "AdeService";
	public static final String ADE_CLAZZES_SERVICE = "AdeClazzesService";
	public static final String ADE_WORKTIME_SERVICE = "workTimeService";
	public static final String ADE_HOLIDAY_SERVICE = "holidayService";
	public static HolidayService getHolidayService() {
		return (HolidayService) SpringHelper.getSpringBean(ADE_HOLIDAY_SERVICE);
	}
	public static WorkTimeService getWorkTimeService() {
		return (WorkTimeService) SpringHelper.getSpringBean(ADE_WORKTIME_SERVICE);
	}
	public static AdeClazzesService getAdeClazzesService() {
		return (AdeClazzesService) SpringHelper.getSpringBean(ADE_CLAZZES_SERVICE);
	}
	public static AdeService getAdeService(){
		return (AdeService) SpringHelper.getSpringBean(ADE_SERVICE);
	}
	public static RegisterService getRegist

		return (RegisterService) SpringHelper.getSpringBean(REGISTER_SERVICE);
	}
	public static AttachmentService getAttachmentService() {
		return (AttachmentService) SpringHelper
				.getSpringBean(ATTACHMENT_SERVICE);
	}
	public static SecurityService getSecurityService() {
		return (SecurityService) SpringHelper.getSpringBean(SECURITY_SERVICE);
	}
	public static UserService getUserService() {
		return (UserService) SpringHelper.getSpringBean(USER_SERVICE);
	}
	public static CompanyService getCompanyService() {
		return (CompanyService) SpringHelper.getSpringBean(COMPANY_SERVICE);
	}
	public static ResourceTypeService getResourceTypeService() {
		return (ResourceTypeService) SpringHelper
				.getSpringBean(RESOURCETYPE_SERVICE);
	}
	public static SMSService getSMSService() {
		return (SMSService) SpringHelper.getSpringBean(SMS_SERVICE);
	}
	public static ProvinceCityService getProvinceCityService() {
		return (ProvinceCityService) SpringHelper
				.getSpringBean(PROVINCECITY_SERVICE);
	

	public static SubSystemService getSubSystemService() {
		return (SubSystemService) SpringHelper.getSpringBean(SUBSYSTEM_SERVICE);
	}
	public static DeptService getDeptService() {
		return (DeptService) SpringHelper.getSpringBean(DEPT_SERVICE);
	}
	public static LogService getLogService() {
		return (LogService) SpringHelper.getSpringBean(LOG_SERVICE);
	}
	public static OnlineUserService getOnlineUserService() {
		return (OnlineUserService) SpringHelper
				.getSpringBean(ONLINEUSER_SERVICE);
	}
	public static IdentityService getIdentityService() {
		return (IdentityService) SpringHelper.getSpringBean(IDENTITY_SERVICE);
	}
	public static AgencyService getAgencyService() {
		return (AgencyService) SpringHelper.getSpringBean(AGENCY_SERVICE);
	}
	public static NoticeService getNoticeService() {
		return (NoticeService) SpringHelper.getSpringBean(NOTICE_SERVICE);
	}
	public static ProviderService getProviderService() {
		return (ProviderService) SpringHelper.getSpringBean(PROVIDER_SERVICE
/**
 * @author Arsalan
 */
public class RepositoryFactory {
    private UserRepository userRepository;
    private LaptopRepository laptopRepository;
    private ProducerRepository producerRepository;
    private CategoryRepository categoryRepository;
    private OrderRepository orderRepository;
    public RepositoryFactory(DataSource dataSource) {
        this.userRepository = new UserRepository(dataSource);
        this.laptopRepository = new LaptopRepository(dataSource);
        this.producerRepository = new ProducerRepository(dataSource);
        this.categoryRepository = new CategoryRepository(dataSource);
        this.orderRepository = new OrderRepository(dataSource);
    }
    public UserRepository getUserRepository() {
        return userRepository;
    }
    public LaptopRepository getLaptopRepository() {
        return laptopRepository;
    }
    public ProducerRepository getProducerRepository() {
        return producerRepository;
    }
    public CategoryRepository getCateg
public class SimpleProcessDemoDAOImpl extends BaseDAOHibernate implements  ISimpleProcessDemoDAO{
    protected Class getModelClass() {
        return SimpleProcessDemo.class;
    }
    public String updateSimpleProcessDemo(SimpleProcessDemo simpleProcessDemo) {
        this.doUpdateObject(simpleProcessDemo);
        return simpleProcessDemo.getSimpleId();
    }
    public String addSimpleProcessDemo(SimpleProcessDemo simpleProcessDemo) {
        this.doCreateObject(simpleProcessDemo);
        return simpleProcessDemo.getSimpleId();
    }
    public SimpleProcessDemo getSimpleProcessDemoById(String id) {
        return (SimpleProcessDemo)this.doFindObjectById(id);
    }
    @Override
    public SimpleProcessDemo1 getSimpleProcessDemo1ById(String id) {
        Session session = this.getSession();
        return (SimpleProcessDemo1)session.get(SimpleProcessDemo1.class, id);
        
    }
    @Override
    public String addSimpleProcessDemo1(SimpleProcessDemo1 simpleProcessDemo1) {
     
public class VideoManageAction extends BaseAction{
	private VideoManage videoManage;
	private VideoManagePageInfo pageInfo;
	private List<VideoManage> videoManages;
	private String orderIndexs;
	/**
	 * 保存视频管理
	 */
	public String saveVideoManage() throws Exception {
		VideoManageManager videoManageMgr = (VideoManageManager)SpringContextHolder.getBean(VideoManage.class);
		if(super.perExecute(videoManage)!= null) return returnCommand();
		videoManageMgr.saveVideoManage(videoManage);
		super.postExecute(videoManage);
		return returnCommand();
	}
	/**
	 * 删除视频管理
	 */
	public String removeVideoManage() throws Exception {
		VideoManageManager videoManageMgr = (VideoManageManager)SpringContextHolder.getBean(VideoManage.class);
		videoManageMgr.removeVideoManageById(videoManage.getId());
		return returnCommand();
	}
	/**
	 * 删除指定的某些视频管理
	 */
	public String removeAllVideoManage() throws Exception {
		VideoManageManager videoManageMgr = (VideoManageManager)SpringContextHolder.getBean(VideoManag

		if (orderIndexs != null && orderIndexs.length()> 0 )
		{
			String[] ids= orderIndexs.split(",");
			for( int i=0; i<ids.length; i++)
			{
				if (ids[i].length()>0)
				{
				videoManageMgr.removeVideoManageById(ids[i]);
				}
			}
		}
		
		return returnCommand();
	}
	/**
	 *新增/修改/查看视频管理
	 */
	public String viewVideoManage() throws Exception {
		VideoManageManager videoManageMgr = (VideoManageManager)SpringContextHolder.getBean(VideoManage.class);
		videoManage = videoManageMgr.getVideoManageById(videoManage.getId());
		return returnCommand();
	}
	/**
	 * 视频管理列表
	 */
	public String videoManageList() throws Exception {
		VideoManageManager videoManageMgr = (VideoManageManager)SpringContextHolder.getBean(VideoManage.class);
		pageInfo = pageInfo == null ? new VideoManagePageInfo() : pageInfo;
		PageInfo sarchPageInfo = PageInfoUtil.populate(pageInfo, this);
		
		videoManages = videoManageMgr.getSecurityVideoManageList(sarchPageInfo);
		
		return returnCommand();	
	}
	public VideoMana
/**
 * Contains all services which access SOLR.
 * <br/>
 * Used as a container to get needed services without the need to manually configure them
 * @author elacic
 *
 */
public class SolrServiceContainer {
	private RecommendService recommendService;
	private UserService userService;
	private ItemService itemService;
	private SocialActionService socialActionService;
	private OwnSocialActionService ownSocialActionService;
	private SocialStreamService socialStreamService;
	private ResourceService resourceService;
	private ReviewService reviewService;
	private PositionService positionService;
	private PositionNetworkService positionNetworkService;
	private SharedLocationService sharedLocationService;
	private ResourceService testResourceService;
	private ReviewService testReviewService;
	/**
	 * Initialization-on-demand holder idiom
	 * <br/>
	 * @author elacic
	 *
	 */
	private static class Holder {
        static final SolrServiceContainer INSTANCE = new SolrServiceContainer();
    }
	

        return Holder.INSTANCE;
    }
	private SolrServiceContainer() {
	    ConfigUtils.loadConfiguration();
	    boolean success = init();
	    if (! success){
	    	throw new RuntimeException("All Solr services, as defined in the configuration, could not be initialized!");
	    }
	}
	private boolean init() {
		boolean initSuccess = false;
		
		int port = 8984;
		String address = "kti-social";
		
		try {
			UserService userService = new UserService(address, port, "profiles");
			RecommendService recommenderService = new RecommendService(address, port, "collection2");
			ItemService itemService = new ItemService(address, port, "collection1");
			SocialActionService socialService = new SocialActionService(address, port, "social_action_pruned");
			OwnSocialActionService ownSocialService = new OwnSocialActionService(address, port, "own_social_action");
			SocialStreamService socialStreamService = new SocialStreamService(address, port, "social_stream");
			ResourceService resourceServic

			ReviewService reviewService = new ReviewService(address, port, "reviews");
			PositionService positionService = new PositionService(address, port, "positions");
			PositionNetworkService positionNetworkService = new PositionNetworkService(address, port, "position_network");
			SharedLocationService sharedLocationService = new SharedLocationService(address, port, "shared_locations");
			setUserService(userService);
			setRecommendService(recommenderService);
			setItemService(itemService);
			setSocialActionService(socialService);
			setOwnSocialActionService(ownSocialService);
			setSocialStreamService(socialStreamService);
			setResourceService(resourceService);
			setReviewService(reviewService);
			setPositionService(positionService);
			setPositionNetworkService(positionNetworkService);
			setSharedLocationService(sharedLocationService);
			int testPort = 8989;
			
			ResourceService testResourceService = new ResourceService(address, testPort, "resources");
			ReviewService tes

			setTestResourceService(testResourceService);
			setTestReviewService(testReviewService);
			initSuccess = true;
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		
		return initSuccess;
	}
	public RecommendService getRecommendService() {
		return recommendService;
	}
	public void setRecommendService(RecommendService recommendService) {
		this.recommendService = recommendService;
	}
	public UserService getUserService() {
		return userService;
	}
	public ItemService getItemService() {
		return itemService;
	}
	public void setItemService(ItemService searchService) {
		this.itemService = searchService;
	}
	public void setUserService(UserService userService) {
		this.userService = userService;
	}
	public SocialActionService getSocialActionService() {
		return socialActionService;
	}
	public void setSocialActionService(SocialActionService socialActionService) {
		this.socialActionService = socialActionService;
	}
	public OwnSocialActionService getOwnSocialActionService() {
		retur

	}
	public void setOwnSocialActionService(OwnSocialActionService ownSocialActionService) {
		this.ownSocialActionService = ownSocialActionService;
	}
	public SocialStreamService getSocialStreamService() {
		return socialStreamService;
	}
	public void setSocialStreamService(SocialStreamService socialStreamService) {
		this.socialStreamService = socialStreamService;
	}
	public ResourceService getResourceService() {
		return resourceService;
	}
	public void setResourceService(ResourceService resourceService) {
		this.resourceService = resourceService;
	}
	public ReviewService getReviewService() {
		return reviewService;
	}
	public void setReviewService(ReviewService reviewService) {
		this.reviewService = reviewService;
	}
	public PositionService getPositionService() {
		return positionService;
	}
	public void setPositionService(PositionService positionService) {
		this.positionService = positionService;
	}
	public PositionNetworkService getPositionNetworkService() {
		return positionNet
/**
 * Implementation of uncaught exception handler. Implements
 * JErrorHandler, it can be registered to JBrt as exception
 * handler module.
 * 
 * Beware!!!
 * You should read part about DefaultUncaughtExceptionHandler and 
 * UncaughtExceptionHandler in java.lang.Thread
 * Default handler is called if handler on thread is not set. 
 * It means beware of overriding errorhandler on thread.
 * 
 * If you want to change default error handler and not harm
 * this handler , use setOtherHandler please.
 * 
 *
 * @author Cipov Peter
 * @version 1.0
 */
public class JUncaughtExceptionHandler implements JErrorHandler {
    
    private Thread.UncaughtExceptionHandler thisHandler = null;
    private Thread.UncaughtExceptionHandler otherHandler = null;
    private boolean printStackTace = true;
    public JUncaughtExceptionHandler() {
        otherHandler = Thread.getDefaultUncaughtExceptionHandler();
        printStackTace = true;
    }
    /**
     * Create object.
     * @param printStack I

     */
    public JUncaughtExceptionHandler(boolean printStack) {
        otherHandler = Thread.getDefaultUncaughtExceptionHandler();
        this.printStackTace = printStack;
    }
    public void initialize() {
        
        this.thisHandler = new Thread.UncaughtExceptionHandler() {
            public void uncaughtException(Thread t, Throwable e) {
                try {
                    
                    JBrt.commit(e);
                    if (printStackTace) {
                        
                        e.printStackTrace();
                    }
                } finally {
                    if (otherHandler != null) {
                        if (!(otherHandler instanceof JUncaughtExceptionHandler)) {
                            otherHandler.uncaughtException(t, e);
                        }
                    }
                }
            }
        };
        Thread.setDefaultUncaughtExceptionHandler(this.thisHandler);
        
    }
    public void remove() {
 
/**
 * 개요
 * - PROCESS모니터링에 대한 ServiceImpl 클래스를 정의한다.
 * 
 * 상세내용
 * - PROCESS모니터링에 대한 등록, 수정, 삭제, 조회 기능을 제공한다.
 * - PROCESS모니터링의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 박종선
 * @version 1.0
 * @created 08-9-2010 오후 3:54:46
 */
@Service("EgovProcessMonService")
public class EgovProcessMonServiceImpl extends EgovAbstractServiceImpl implements EgovProcessMonService {
	@Resource(name = "ProcessMonDAO")
	private ProcessMonDAO processMonDAO;
	@Resource(name="egovProcessMonIdGnrService")
	private EgovIdGnrService idgenServiceProcessMon;
	@Resource(name="egovProcessMonLogIdGnrService")
	private EgovIdGnrService idgenServiceProcessMonLog;	
	/**
	 * 등록된 PROCESS모니터링 목록을 조회한다.
	 * @param processMonVO - PROCESS모니터링 Vo
	 * @return List - PROCESS모니터링 목록
	 * 
	 * @param processMonVO
	 */
	public List selectProcessMonList(ProcessMonVO processMonVO) throws Exception {
        return processMonDAO.selectProcessMonList(processMonVO);	
	}
	/**
	 * PROCESS모니터링 목록 총 갯수를 조회한다.
	 * @param processMonVO - PROCESS모니터링

	 * @return int - PROCESS모니터링 토탈 카운트 수
	 * 
	 * @param processMonVO
	 */
	public int selectProcessMonTotCnt(ProcessMonVO processMonVO) throws Exception {
        return processMonDAO.selectProcessMonTotCnt(processMonVO);
	}	
	/**
	 * 등록된 PROCESS모니터링의 상세정보를 조회한다.
	 * @param processMonVO - PROCESS모니터링 Vo
	 * @return processMonVO - PROCESS모니터링 Vo
	 * 
	 * @param processMonVO
	 */
	public ProcessMonVO selectProcessMon(ProcessMonVO processMonVO) throws Exception {
		return processMonDAO.selectProcessMon(processMonVO);
	}
	/**
	 * PROCESS모니터링 정보를 신규로 등록한다.
	 * @param processNm - PROCESS모니터링 model
	 * 
	 * @param processNm
	 */
	public void insertProcessMon(ProcessMon processMon) throws Exception {
		processMon.setProcessId(idgenServiceProcessMon.getNextStringId());
		processMonDAO.insertProcessMon(processMon);
	}
	/**
	 * 기 등록된 PROCESS모니터링 정보를 수정한다.
	 * @param processNm - PROCESS모니터링 model
	 * 
	 * @param processNm
	 */
	public void updateProcessMon(ProcessMon processMon) throws Exception {

		processMonDAO.updateProcessMon(processMon);
	}
	/**
	 * 기 등록된 PROCESS모니터링 정보를 삭제한다.
	 * @param processNm - PROCESS모니터링 model
	 * 
	 * @param processNm
	 */
	public void deleteProcessMon(ProcessMon processMon) throws Exception {
		processMonDAO.deleteProcessMon(processMon);
	}
	/**
	 * 프로세스 모니터링로그 목록을 조회한다.
	 * @param ProcessMonVO - 프로세스모니터링로그 VO
	 * @return  List<ProcessMonVO> - 프로세스모니터링로그 List
	 * 
	 * @param processMonLogVO
	 */
	public Map<String, Object> selectProcessMonLogList(ProcessMonLogVO processMonLogVO) throws Exception {
		List<ProcessMonLogVO> result = processMonDAO.selectProcessMonLogList(processMonLogVO);
		int cnt = processMonDAO.selectProcessMonLogTotCnt(processMonLogVO);
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		map.put("resultList", result);
		map.put("resultCnt", Integer.toString(cnt));
		return map;
	}
	/**
	 * 프로세스 모니터링로그의 상세정보를 조회한다.
	 * @param ProcessMonVO - 프로세스모니터링로그 model
	 * @return  ProcessMonVO - 프로세스모니터링로그 model
	 * 
	 * @param

	 */
	public ProcessMonLogVO selectProcessMonLog(ProcessMonLogVO processMonLogVO) throws Exception {
		return processMonDAO.selectProcessMonLog(processMonLogVO);
	}
	/**
	 * 프로세스 모니터링로그를 등록한다.
	 * @param processMonLog - 프로세스 모니터링로그 model
	 * 
	 * @param processMonLog
	 */
	public void insertProcessMonLog(ProcessMonLog processMonLog) throws Exception{
		processMonDAO.insertProcessMonLog(processMonLog);
	}	
	/**
	 * 프로세스 모니터링 결과를 수정한다.
	 * @param processMonLog - 프로세스 모니터링대상 model
	 * 
	 * @param processMonLog
	 */
	public void updateProcessMonSttus(ProcessMon processMon) throws Exception{
		processMonDAO.updateProcessMonSttus(processMon);
		
		ProcessMonLog processMonLog = new ProcessMonLog();
		processMonLog.setProcessId(processMon.getProcessId());
		processMonLog.setLogId(idgenServiceProcessMonLog.getNextStringId());
		processMonLog.setProcessNm(processMon.getProcessNm());
		processMonLog.setProcsSttus(processMon.getProcsSttus());
		processMonLog.setCreatDt(processMon.getCreatDt());
	
public class DekaederCharacter implements Serializable {
	private ConceptHandler      conceptHandler;
	private PointHandler        pointHandler;
        private SkillHandler        skillHandler;
        private SpecialityHandler   specialityHandler;
        private HookHandler         hookHandler;
        private AdvantageHandler    advantageHandler;
	public DekaederCharacter(ConceptHandler conceptHandler, 
            PointHandler pointHandler, SkillHandler skillHandler,
            SpecialityHandler specialityHandler, HookHandler hookHandler,
            AdvantageHandler advantageHandler) {
            this.conceptHandler = conceptHandler;
            this.pointHandler = pointHandler;
            this.skillHandler = skillHandler;
            this.specialityHandler = specialityHandler;
            this.hookHandler = hookHandler;
            this.advantageHandler = advantageHandler;
	}
	public ConceptHandler getConceptHandler() {
            return conceptHandler;
	}
	public PointHandl
/**
 * Implementation of {@link URLStreamHandlerFactory} for constructing {@link ResourceURLStreamHandler}s.
 */
public class ResourceURLStreamHandlerFactory implements URLStreamHandlerFactory {
    /**
     * URLStreamHandler instance for CodeMirror files.
     */
    private final URLStreamHandler codeMirrorHandler;
    /**
     * URLStreamHandler instance for RequireJS files.
     */
    private final URLStreamHandler requireJSHandler;
    /**
     * URLStreamHandler instance for D3.js files.
     */
    private final URLStreamHandler d3jsHandler;
    /**
     * URLStreamHandler instance for jQuery files.
     */
    private final URLStreamHandler jQueryHandler;
    /**
     * URLStreamHandler instance for jsPlumb files.
     */
    private final URLStreamHandler jsPlumbHandler;
    /**
     * Injection constructor to be used by tests.
     *
     * @param codeMirrorHandler
     */
    protected ResourceURLStreamHandlerFactory(URLStreamHandler codeMirrorHandler, URLStreamHandler req

        this.codeMirrorHandler = codeMirrorHandler;
        this.requireJSHandler = requireJSHandler;
        this.d3jsHandler = d3jsHandler;
        this.jQueryHandler = jQueryHandler;
        this.jsPlumbHandler = jsPlumbHandler;
    }
    /**
     * Constructs a new ResourceURLStreamHandlerFactory instance.
     */
    public ResourceURLStreamHandlerFactory() {
        this(
                new ResourceURLStreamHandler(CODE_MIRROR_BASEPATH),
                new ResourceURLStreamHandler(REQUIRE_JS_BASEPATH),
                new ResourceURLStreamHandler(D3_JS_BASEPATH),
                new ResourceURLStreamHandler(JQUERY_BASEPATH),
                new ResourceURLStreamHandler(JS_PLUMB_BASEPATH)
        );
    }
    @Override
    public URLStreamHandler createURLStreamHandler(String protocol) {
        if (protocol.equals(CODE_MIRROR_PROTOCOL)) {
            return codeMirrorHandler;
        } else if (protocol.equals(REQUIRE_JS_PROTOCOL)) {
            return requireJSHandler;
      
public class SimpleSecurityContainer {
	private SecurityDataManage securityDataManage;
	private SecurityFactory securityFactory;
	private ConfigurationManage configurationManage;
	private String targetSrc;
	private String workSpace;
	private String id;
	public SimpleSecurityContainer(String targetSrc, String workSpace, String id) {
		this.targetSrc = targetSrc;
		this.workSpace = workSpace;
		this.id = id;
		initialize();
	}
	public void initialize() {
		this.securityDataManage = new SecurityDataManage(targetSrc);
		this.securityFactory = SecurityFactory.getInstance(workSpace, id);
		this.configurationManage = new ConfigurationManage();
	}
	/**
	 * @return the targetSrc
	 */
	public String getTargetSrc() {
		return targetSrc;
	}
	/**
	 * @param targetSrc the targetSrc to set
	 */
	public void setTargetSrc(String targetSrc) {
		this.targetSrc = targetSrc;
	}
	/**
	 * @return the workSpace
	 */
	public String getWorkSpace() {
		return workSpace;
	}
	/**
	 * @param workSpace the workSpace

	 */
	public void setWorkSpace(String workSpace) {
		this.workSpace = workSpace;
	}
	/**
	 * @return the securityFactory
	 */
	public SecurityFactory getSecurityFactory() {
		return securityFactory;
	}
	/**
	 * @param securityFactory the securityFactory to set
	 */
	public void setSecurityFactory(SecurityFactory securityFactory) {
		this.securityFactory = securityFactory;
	}
	/**
	 * @return the securityDataManage
	 */
	public SecurityDataManage getSecurityDataManage() {
		return securityDataManage;
	}
	/**
	 * @param securityDataManage the securityDataManage to set
	 */
	public void setSecurityDataManage(SecurityDataManage securityDataManage) {
		this.securityDataManage = securityDataManage;
	}
	/**
	 * @return the configurationManage
	 */
	public ConfigurationManage getConfigurationManage() {
		return configurationManage;
	}
	/**
	 * @param configurationManage the configurationManage to set
	 */
	public void setConfigurationManage(ConfigurationManage configurationManage) {
		this.co
@RunWith(JMock.class)
public final class CompositeProcessDestroyerTest {
	private static final ProcessDestroyer IGNORED_PROCESS_DESTROYER = null;
	private final Mockery context = new JUnit4Mockery();
	private final ProcessDestroyer delegateProcessDestroyer1 = context.mock(ProcessDestroyer.class, "delegateProcessDestroyer1");
	private final ProcessDestroyer delegateProcessDestroyer2 = context.mock(ProcessDestroyer.class, "delegateProcessDestroyer2");
	private final Process process;
	public CompositeProcessDestroyerTest() throws IOException {
		 process = new ProcessBuilder("java").start();
	}
	@Test
	public void addsProcessToDelegateProcessDestroyer() {
		context.checking(new Expectations() {{
			oneOf(delegateProcessDestroyer1).add(process);
			oneOf(delegateProcessDestroyer2).add(process);
		}});
		new CompositeProcessDestroyer(delegateProcessDestroyer1, delegateProcessDestroyer2).add(process);
	}
	@Test
	public void removesProcessToDelegateProcessDestroyer() {
		context.checking(new 
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author phillipe
 */
@ManagedBean(name = "serviceHasServiceBean")
@ViewScoped
public class ServiceHasServiceBean implements Serializable{
    
    private ServiceHasService serviceHasService = new ServiceHasService();
    private List ServiceHasServiceList = new ArrayList();
    public ServiceHasServiceBean() {
        ServiceHasServiceList = new ServiceHasServiceDAO().getAll();
        serviceHasService = new ServiceHasService();
    }
    
    /**
     * record
     * @param actionEvent 
     */
    public void record(ActionEvent actionEvent) {
        new ServiceHasServiceDAO().save(getServiceHasService());
        setServiceHasServiceList(new ServiceHasServiceDAO().getAll());
    }     
    /**
     * @return the serviceHasService
     */
    public ServiceHasService getServiceHasService() 
public class AllManagementLibraryViewController implements IViewController {
	private ILibraryService libraryService;
	private IFormationCourseService formationCourseService;
	private IPersonService personService;
	private IProviderService providerService;
	private ICoinService coinService;
	private IWorkerTypeService workerTypeService;
	private IWorkerService workerService;
	private IPenaltyEquationService penaltyEquationService;
	private IPostalAddressService postalAddressService;
	private IEmailAddressService emailAddressService;
		
	public ILibraryService getLibraryService() {
		return libraryService;
	}
	public void setLibraryService(ILibraryService libraryService) {
		this.libraryService = libraryService;
	}
	public IFormationCourseService getFormationCourseService() {
		return formationCourseService;
	}
	public void setFormationCourseService(
			IFormationCourseService formationCourseService) {
		this.formationCourseService = formationCourseService;
	}
	public IPersonService get

		return personService;
	}
	public void setPersonService(IPersonService personService) {
		this.personService = personService;
	}
	public IProviderService getProviderService() {
		return providerService;
	}
	public void setProviderService(IProviderService providerService) {
		this.providerService = providerService;
	}
	public ICoinService getCoinService() {
		return coinService;
	}
	public void setCoinService(ICoinService coinService) {
		this.coinService = coinService;
	}
	public IWorkerTypeService getWorkerTypeService() {
		return workerTypeService;
	}
	public void setWorkerTypeService(IWorkerTypeService workerTypeService) {
		this.workerTypeService = workerTypeService;
	}
	public IWorkerService getWorkerService() {
		return workerService;
	}
	public void setWorkerService(IWorkerService workerService) {
		this.workerService = workerService;
	}
	public IPenaltyEquationService getPenaltyEquationService() {
		return penaltyEquationService;
	}
	public void setPenaltyEquationService(IPen

		this.penaltyEquationService = penaltyEquationService;
	}
	public IPostalAddressService getPostalAddressService() {
		return postalAddressService;
	}
	public void setPostalAddressService(IPostalAddressService postalAddressService) {
		this.postalAddressService = postalAddressService;
	}
	public IEmailAddressService getEmailAddressService() {
		return emailAddressService;
	}
	public void setEmailAddressService(IEmailAddressService emailAddressService) {
		this.emailAddressService = emailAddressService;
	}
	public void bindLibraryService(ILibraryService libraryService, Map<?, ?> properties) {
		this.setLibraryService(libraryService);
	}
	public void bindFormationCourseService(IFormationCourseService formationCourseService, Map<?, ?> properties) {
		this.setFormationCourseService(formationCourseService);
	}
	public void bindPersonService(IPersonService personService, Map<?, ?> properties) {
		this.setPersonService(personService);
	}
	public void bindProviderService(IProviderService prov
/**
 * Created by Jing on 14-2-15.
 */
public class ManageRoute extends Routes {
    @Override
    public void config() {
        add("/manage/goods", GoodsController.class);
        add("/manage/member", MemberController.class);
        add("/manage/order", OrderController.class);
        add("/manage/base/supplier", SupplierController.class);
        add("/manage/base/service", ServiceController.class);
        add("/manage/base/arg", ArgController.class);
        add("/manage/base/label", LabelController.class);
        add("/manage/base/target", TargetController.class);
        add("/manage/ad", ADController.class);
        add("/manage/system/manager", ManagerController.class);
        add("/manage/system/setting", SettingController.class);
        add("/manage/system/help", HelpController.class);
        add("/manage/custom", CustomController.class);
        add("/manage/play", PlayController.class);
        add("/manage/auth", AuthController.class);
        add("/manage", HomeCo
/*
   Copyright 2005 Simon Mieth
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
/**
 * @author <a href="mailto:simon.mieth@gmx.de>Simon Mieth</a>
 *
 *
 *
 */
public class ParserBuilder {
    public static Parser createDefaultParser() {
        DXFParser parser = new DXFParser();
        Handler handler;
        handler = new DXFHeaderSectionHandler();
        parser.addHandler(handler);
        HandlerManager handlerManager = new DXFBlocksSectionHandler();
        parser.addHandler(handlerManager);
        Handler h = new DXFLineHandler()

        handlerManager.addHandler(h);
        h = new DXFCircleHandler();
        handlerManager.addHandler(h);
        h = new DXFArcHandler();
        handlerManager.addHandler(h);
        h = new DXFPolylineHandler();
        handlerManager.addHandler(h);
        h = new DXFLWPolylineHandler();
        handlerManager.addHandler(h);
        h = new DXFMTextHandler();
        handlerManager.addHandler(h);
        h = new DXFTextHandler();
        handlerManager.addHandler(h);
        h = new DXFInsertHandler();
        handlerManager.addHandler(h);
        h = new DXFEllipseHandler();
        handlerManager.addHandler(h);
        h = new DXFSolidHandler();
        handlerManager.addHandler(h);
        h = new DXFTraceHandler();
        handlerManager.addHandler(h);
        h = new DXFDimensionHandler();
        handlerManager.addHandler(h);
        h = new DXFHatchHandler();
        handlerManager.addHandler(h);
        h = new DXFImageHandler();
        handlerManager.addHandler(h);

        h = new DXF3DFaceHandler();
        handlerManager.addHandler(h);
        h = new DXFRayHandler();
        handlerManager.addHandler(h);
        h = new DXFXLineHandler();
        handlerManager.addHandler(h);
        h = new DXFRegionHandler();
        handlerManager.addHandler(h);
        h = new DXFBodyHandler();
        handlerManager.addHandler(h);
        h = new DXF3DSolidHandler();
        handlerManager.addHandler(h);
        h = new DXFSplineHandler();
        handlerManager.addHandler(h);
        h = new DXFMLineHandler();
        handlerManager.addHandler(h);
        h = new DXFLeaderHandler();
        handlerManager.addHandler(h);
        h = new DXFToleranceHandler();
        handlerManager.addHandler(h);
        h = new DXFViewportHandler();
        handlerManager.addHandler(h);
        handlerManager = new DXFTableSectionHandler();
        parser.addHandler(handlerManager);
        handler = new DXFLayerTableHandler();
        handlerManager.addHandler(handler)

        handler = new DXFLineTypeTableHandler();
        handlerManager.addHandler(handler);
        handler = new DXFDimensionStyleTableHandler();
        handlerManager.addHandler(handler);
        handler = new DXFStyleTableHandler();
        handlerManager.addHandler(handler);
        handler = new DXFVPortTableHandler();
        handlerManager.addHandler(handler);
        handler = new DXFViewTableHandler();
        handlerManager.addHandler(handler);
        handlerManager = new DXFEntitiesSectionHandler();
        parser.addHandler(handlerManager);
        h = new DXFLineHandler();
        handlerManager.addHandler(h);
        h = new DXFCircleHandler();
        handlerManager.addHandler(h);
        h = new DXFArcHandler();
        handlerManager.addHandler(h);
        h = new DXFPolylineHandler();
        handlerManager.addHandler(h);
        h = new DXFLWPolylineHandler();
        handlerManager.addHandler(h);
        h = new DXFMTextHandler();
        handlerManager.addHandl

        h = new DXFTextHandler();
        handlerManager.addHandler(h);
        h = new DXFAttdefHandler();
        handlerManager.addHandler(h);
        h = new DXFInsertHandler();
        handlerManager.addHandler(h);
        h = new DXFEllipseHandler();
        handlerManager.addHandler(h);
        h = new DXFSolidHandler();
        handlerManager.addHandler(h);
        h = new DXFTraceHandler();
        handlerManager.addHandler(h);
        h = new DXFDimensionHandler();
        handlerManager.addHandler(h);
        h = new DXFHatchHandler();
        handlerManager.addHandler(h);
        h = new DXFImageHandler();
        handlerManager.addHandler(h);
        h = new DXF3DFaceHandler();
        handlerManager.addHandler(h);
        h = new DXFRayHandler();
        handlerManager.addHandler(h);
        h = new DXFXLineHandler();
        handlerManager.addHandler(h);
        h = new DXFRegionHandler();
        handlerManager.addHandler(h);
        h = new DXFBodyHandler();
        h

        h = new DXF3DSolidHandler();
        handlerManager.addHandler(h);
        h = new DXFSplineHandler();
        handlerManager.addHandler(h);
        h = new DXFMLineHandler();
        handlerManager.addHandler(h);
        h = new DXFLeaderHandler();
        handlerManager.addHandler(h);
        h = new DXFToleranceHandler();
        handlerManager.addHandler(h);
        h = new DXFViewportHandler();
        handlerManager.addHandler(h);
        handlerManager = new DXFObjectsSectionHandler();
        h = new DXFImageDefHandler();
        handlerManager.addHandler(h);
        h = new DXFDictionaryHandler();
        handlerManager.addHandler(h);
        h = new DXFPlotsettingsHandler();
        handlerManager.addHandler(h);
        h = new DXFLayoutHandler();
        handlerManager.addHandler(h);
        h = new DXFMLineStyleHandler();
        handlerManager.addHandler(h);
        parser.addHandler(handlerManager);
        return parser;
    }
    /**
     * @see org.kabeja.pars
public class PurviewManageDaoImpl extends BaseDao implements PurviewManageDao{
	public boolean addPurviewManage(PurviewManage purviewManage){
		String sql="insert into purviewmanage(PurviewID,EmployeManage,OrderManage,SortManage,DishManage) values('"
		+purviewManage.getPurviewId()+"','"+purviewManage.getEmployeManage()+"','"+purviewManage.getOrderManage()+"','"
		+purviewManage.getSortManage()+"','"+purviewManage.getDishManage()+"');";
		return super.executeUpdate(sql);
	}
	public boolean removePurviewManageById(int id){
		String sql="delete from purviewmanage where id = "+id+"";
		return super.executeUpdate(sql);
	}
	public boolean modifyPurviewManageById(PurviewManage purviewManage){
		String sql="update purviewmanage set PurviewID=\""+purviewManage.getPurviewId()+"\"," +
		" EmployeManage=\""+purviewManage.getEmployeManage()+"\" ,OrderManage="+purviewManage.getOrderManage()+" ,SortManage=\""+purviewManage.getSortManage()+"" +
		"\", DishManage=\""+purviewManage.getDishManage()+"\" 

		System.out.println(sql);
		return super.executeUpdate(sql);
	}
	public List<PurviewManage> queryPurviewManageAll(){
		String sql="select * from purviewmanage";
		List<PurviewManage> purviewManages=new ArrayList<PurviewManage>();
		List<HashMap<String, Object>> list=super.executeQuery(sql);
		if(list!=null&&list.size()>0){
			for (HashMap<String, Object> hashMap:list) {
				PurviewManage purviewManage=new PurviewManage((Integer)hashMap.get("id"),(Integer)hashMap.get("PurviewID"),
						(Integer)hashMap.get("EmployeManage"),(Integer)hashMap.get("OrderManage"),
						(Integer)hashMap.get("SortManage"),(Integer)hashMap.get("DishManage"));
				purviewManages.add(purviewManage);
			}
		}
		return purviewManages;
	}
	public PurviewManage queryPurviewManageById(int id){
		String sql="select * from purviewmanage where id="+id+"";
		PurviewManage purviewManage =null;
		List<HashMap<String, Object>> list=super.executeQuery(sql);
		if(list!=null&&list.size()==1){
			HashMap<String,Object> map =
/**
 * 개요
 * - 행사관리에 대한 Service Interface를 정의한다.
 * 
 * 상세내용
 * - 행사관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 행사관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
public interface EgovEventManageService {
	/**
	 * 행사관리 정보를 관리하기 위해 등록된 행사목록을 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사관리 목록
	 */
	public List<EventManageVO> selectEventManageList(EventManageVO eventManageVO) throws Exception;
	/**
	 * 행사관리 목록 총 갯수를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return int - 행사관리 카운트 수
	 */
	public int selectEventManageListTotCnt(EventManageVO eventManageVO) throws Exception ;
	/**
	 * 등록된 행사관리의 상세정보를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return EventManageVO - 행사관리 VO
	 */
	public EventManageVO selectEventManage(EventManageVO eventManageVO) throws Exception;
	/**
	 * 행사관리 정보를 신규로 등록한다.
	 * @param eventManage - 행사관리 model
	 */
	public void insertEventManage(EventManage eventManage) throws Exception;
	/**
	 * 기 등록된 행사관리 

	 * @param eventManage - 행사관리 model
	 */
	public void updtEventManage(EventManage eventManage) throws Exception;
	/**
	 * 기 등록된 행사관리 정보를 삭제한다.
	 * @param eventManage - 행사관리 model
	 */
	public void deleteEventManage(EventManage eventManage) throws Exception;
	/***  행사접수관리  ****/	
	/**
	 * 행사접수정보를 관리하기 위해 등록된 행사관리 목록을 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사접수관리 목록
	 */
	public List<EventManageVO> selectEventAtdrnList(EventManageVO eventManageVO) throws Exception;
	/**
	 * 행사관리 목록 총 갯수를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return int - 행사접수관리 카운트 수
	 */
	public int selectEventAtdrnListTotCnt(EventManageVO eventManageVO) throws Exception ;
	/**
	 * 행사접수승인/반려 처리를 위해 등록된 행사접수 목록을 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사접수승인 목록
	 */
	public List<EventManageVO> selectEventRceptConfmList(EventManageVO eventManageVO) throws Exception;
	/**
	 * 행사접수승인/반려 처리를 위해 등록된 행사접수 목록 총 갯수를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return int - 행사접수승

	 */
	public int selectEventRceptConfmListTotCnt(EventManageVO eventManageVO) throws Exception ;
	/**
	 * 행사일자, 행사구분 조건에 따른 행사명 목록을 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사명 목록
	 */
	public List<EventManageVO> selectEventNmList(EventManageVO eventManageVO) throws Exception;
	/**
	 * 등록된 행사관리의 상세정보를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return EventManageVO - 행사관리 VO
	 */
	public EventManageVO selectEventAtdrn(EventManageVO eventManageVO) throws Exception;
	/**
	 * 행사관리 정보를 신규로 등록한다.
	 * @param eventManage - 행사관리 model
	 */
	public void insertEventAtdrn(EventAtdrn eventAtdrn) throws Exception;
	/**
	 * 기 등록된 행사관리 정보를 삭제한다.
	 * @param eventManage - 행사관리 model
	 */
	public void deleteEventAtdrn(EventAtdrn eventAtdrn) throws Exception;
	/**
	 * 기 등록된 행사관리 정보를 승인/반려처리한다.
	 * @param eventManage - 행사관리 model
	 */
	public void updtEventAtdrn(EventAtdrn eventAtdrn, String checkedEventRceptForConfm) throws Exception;
	/**
	 * 행사접수자 정보를 조회한다.
	 * @param eventManageV
/**
 * @author pengming  
 * @date 2016年12月30日 下午3:06
 * @description
 */
public class Test {
    public static void main(String[] args) {
        Test1EventHandler test1EventHandler = new Test1EventHandler();
        test1EventHandler.setKey("11");
        Test2EventHandler test2EventHandler = new Test2EventHandler();
        test2EventHandler.setKey("11");
        Test3EventHandler test3EventHandler = new Test3EventHandler();
        test3EventHandler.setKey("11");
        Test4EventHandler test4EventHandler = new Test4EventHandler();
        test4EventHandler.setKey("1");
        Test5EventHandler test5EventHandler = new Test5EventHandler();
        test5EventHandler.setKey("1");
        Test6EventHandler test6EventHandler = new Test6EventHandler();
        test6EventHandler.setKey("2");
        Step step = new Step(test1EventHandler);
        Step step2 = new Step(test2EventHandler, test3EventHandler);
        Step step3 = new Step(test4EventHandler, test5EventHandler, test6EventHa
public class EJB3ProcessInstanceManager implements ProcessInstanceManager {
    private EntityManager manager;
    private WorkingMemory workingMemory;
    
    public void setEntityManager(EntityManager manager) {
        this.manager = manager;
    }
    
    public void setWorkingMemory(WorkingMemory workingMemory) {
        this.workingMemory = workingMemory;
    }
    
    public void addProcessInstance(ProcessInstance processInstance) {
        ProcessInstanceInfo processInstanceInfo = new ProcessInstanceInfo();
        processInstanceInfo.setProcessInstance(processInstance);
        manager.persist(processInstanceInfo);
        manager.flush();
        processInstance.setId(processInstanceInfo.getId());
    }
    public ProcessInstance getProcessInstance(long id) {
        ProcessInstanceInfo processInstanceInfo = manager.find(ProcessInstanceInfo.class, id);
        if (processInstanceInfo == null) {
            return null;
        }
        ProcessInstance processInstance = pr

        processInstance.setProcess(((InternalRuleBase) workingMemory.getRuleBase()).getProcess(processInstance.getProcessId()));
        if (processInstance.getWorkingMemory() == null) {
            processInstance.setWorkingMemory((InternalWorkingMemory) workingMemory);
            ((ProcessInstanceImpl) processInstance).reconnect();
        }
        return processInstance;
    }
    public Collection<ProcessInstance> getProcessInstances() {
        List<ProcessInstance> result = new ArrayList<ProcessInstance>();
        List<ProcessInstanceInfo> processInstanceInfos = 
            manager.createQuery("from ProcessInstanceInfo").getResultList();
        if (processInstanceInfos != null) {
            for (ProcessInstanceInfo processInstanceInfo: processInstanceInfos) {
                result.add(processInstanceInfo.getProcessInstance());
            }
        }
        return result;
    }
    public void removeProcessInstance(ProcessInstance processInstance) {
        ProcessInstan
public class Factory {
	private static AreaService areaService;
	private static CompCategoryService compCategoryService;
	private static SourceService sourceService;
	private static DiplomaService diplomaService;
	private static InformationService informationService;
	private static ReplyService replyService;
	private static UserService userService;
	static{
		areaService=new AreaServiceImpl();
		compCategoryService=new CompCategoryServiceImpl();
		sourceService = new SourceServiceImpl();
		diplomaService=new DiplomaServiceImpl();
		informationService=new InformationServiceImpl();
		replyService=new ReplyServiceImpl();
		userService=new UserServiceImpl();
	}
	private Factory(){
		
	}
	public static AreaService getAreaService() {
		return areaService;
	}
	public static CompCategoryService getCompCategoryService() {
		return compCategoryService;
	}
	public static SourceService getSourceService() {
		return sourceService;
	}
	public static DiplomaService getDiplomaService() {
		return dip
/**
 * Queue starting and returning Process' sequentially.
 */
public class ProcessQueue {
    private final List<ProcessBuilder> processBuilders;
    /**
     * Creates queue instance.
     */
    ProcessQueue() {
        this.processBuilders = new ArrayList<ProcessBuilder>();
    }
    /**
     * Creates queue instance.
     * 
     * @param processBuilders
     *            list of builders that will create queue
     */
    ProcessQueue(List<ProcessBuilder> processBuilders) {
        this.processBuilders = processBuilders != null ? processBuilders
                : new ArrayList<ProcessBuilder>();
    }
    /**
     * Starts and returns next Process.
     * 
     * @return next process if possible, null if none available
     * @throws IOException
     *             thrown if attempt to run of any of commands happen to fail
     *             (e.g. program doesn't exists)
     */
    public Process getNextProcess() throws IOException {
        if (processBuilders.isEmpty())
       
public class TicTacToeRecieveThread extends Thread {
	private Socket socket;
	private MoveCommandHandler moveHandler;
	private ErrorCommandHandler errorHandler;
	private EndCommandHandler endHandler;
	private StartCommandHandler startHandler;
	public TicTacToeRecieveThread(Socket socket,
			MoveCommandHandler moveHandler, ErrorCommandHandler errorHandler,
			EndCommandHandler endHandler, StartCommandHandler startHandler) {
		this.socket = socket;
		this.moveHandler = moveHandler;
		this.errorHandler = errorHandler;
		this.endHandler = endHandler;
		this.startHandler = startHandler;
	}
	public void run() {
		try {
			TicTacToeRecieveInterface recieveInterface = new TicTacToeRecieveInterface(
					this.socket);
			recieveInterface.registerMoveCommandHandler(this.moveHandler);
			recieveInterface.registerErrorCommandHandler(this.errorHandler);
			recieveInterface.registerEndCommandHandler(this.endHandler);
			recieveInterface.registerStartCommandHandler(this.startHandler);
			while (true)
/**
 * 개요
 * - PROCESS모니터링에 대한 ServiceImpl 클래스를 정의한다.
 * 
 * 상세내용
 * - PROCESS모니터링에 대한 등록, 수정, 삭제, 조회 기능을 제공한다.
 * - PROCESS모니터링의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 박종선
 * @version 1.0
 * @created 08-9-2010 오후 3:54:46
 */
@Service("EgovProcessMonService")
public class EgovProcessMonServiceImpl extends AbstractServiceImpl implements EgovProcessMonService {
	@Resource(name = "ProcessMonDAO")
	private ProcessMonDAO processMonDAO;
	@Resource(name="egovProcessMonIdGnrService")
	private EgovIdGnrService idgenServiceProcessMon;
	@Resource(name="egovProcessMonLogIdGnrService")
	private EgovIdGnrService idgenServiceProcessMonLog;	
	/**
	 * 등록된 PROCESS모니터링 목록을 조회한다.
	 * @param processMonVO - PROCESS모니터링 Vo
	 * @return List - PROCESS모니터링 목록
	 * 
	 * @param processMonVO
	 */
	public List selectProcessMonList(ProcessMonVO processMonVO) throws Exception {
        return processMonDAO.selectProcessMonList(processMonVO);	
	}
	/**
	 * PROCESS모니터링 목록 총 갯수를 조회한다.
	 * @param processMonVO - PROCESS모니터링 Vo


	 * 
	 * @param processMonVO
	 */
	public int selectProcessMonTotCnt(ProcessMonVO processMonVO) throws Exception {
        return processMonDAO.selectProcessMonTotCnt(processMonVO);
	}	
	/**
	 * 등록된 PROCESS모니터링의 상세정보를 조회한다.
	 * @param processMonVO - PROCESS모니터링 Vo
	 * @return processMonVO - PROCESS모니터링 Vo
	 * 
	 * @param processMonVO
	 */
	public ProcessMonVO selectProcessMon(ProcessMonVO processMonVO) throws Exception {
		return processMonDAO.selectProcessMon(processMonVO);
	}
	/**
	 * PROCESS모니터링 정보를 신규로 등록한다.
	 * @param processNm - PROCESS모니터링 model
	 * 
	 * @param processNm
	 */
	public void insertProcessMon(ProcessMon processMon) throws Exception {
		processMon.setProcessId(idgenServiceProcessMon.getNextStringId());
		processMonDAO.insertProcessMon(processMon);
	}
	/**
	 * 기 등록된 PROCESS모니터링 정보를 수정한다.
	 * @param processNm - PROCESS모니터링 model
	 * 
	 * @param processNm
	 */
	public void updateProcessMon(ProcessMon processMon) throws Exception {
		processMonDAO.updateProcessMon(proce

	}
	/**
	 * 기 등록된 PROCESS모니터링 정보를 삭제한다.
	 * @param processNm - PROCESS모니터링 model
	 * 
	 * @param processNm
	 */
	public void deleteProcessMon(ProcessMon processMon) throws Exception {
		processMonDAO.deleteProcessMon(processMon);
	}
	/**
	 * 프로세스 모니터링로그 목록을 조회한다.
	 * @param ProcessMonVO - 프로세스모니터링로그 VO
	 * @return  List<ProcessMonVO> - 프로세스모니터링로그 List
	 * 
	 * @param processMonLogVO
	 */
	public Map<String, Object> selectProcessMonLogList(ProcessMonLogVO processMonLogVO) throws Exception {
		List<ProcessMonLogVO> result = processMonDAO.selectProcessMonLogList(processMonLogVO);
		int cnt = processMonDAO.selectProcessMonLogTotCnt(processMonLogVO);
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		map.put("resultList", result);
		map.put("resultCnt", Integer.toString(cnt));
		return map;
	}
	/**
	 * 프로세스 모니터링로그의 상세정보를 조회한다.
	 * @param ProcessMonVO - 프로세스모니터링로그 model
	 * @return  ProcessMonVO - 프로세스모니터링로그 model
	 * 
	 * @param processMonLogVO
	 */
	public ProcessMonLogVO 

		return processMonDAO.selectProcessMonLog(processMonLogVO);
	}
	/**
	 * 프로세스 모니터링로그를 등록한다.
	 * @param processMonLog - 프로세스 모니터링로그 model
	 * 
	 * @param processMonLog
	 */
	public void insertProcessMonLog(ProcessMonLog processMonLog) throws Exception{
		processMonDAO.insertProcessMonLog(processMonLog);
	}	
	/**
	 * 프로세스 모니터링 결과를 수정한다.
	 * @param processMonLog - 프로세스 모니터링대상 model
	 * 
	 * @param processMonLog
	 */
	public void updateProcessMonSttus(ProcessMon processMon) throws Exception{
		processMonDAO.updateProcessMonSttus(processMon);
		
		ProcessMonLog processMonLog = new ProcessMonLog();
		processMonLog.setProcessId(processMon.getProcessId());
		processMonLog.setLogId(idgenServiceProcessMonLog.getNextStringId());
		processMonLog.setProcessNm(processMon.getProcessNm());
		processMonLog.setProcsSttus(processMon.getProcsSttus());
		processMonLog.setCreatDt(processMon.getCreatDt());
		processMonLog.setLogInfo(processMon.getLogInfo());
		processMonLog.setMngrNm(processMon.getMngrNm())
/**
 * 總帳日結單代傳票 Facade。
 * 
 * @author Sunkist Wang
 * @since 1.0, 2009/09/18
 */
public class SubpoenaDFacade {
    /**
     * 會計科目的 Service。
     */
    private AccTitleService accTitleService;
    
    /**
     * 組織單位的 Service。
     */
    private DepartmentService departmentService;
    /**
     * 序號表 Service
     */
    private SequenceService sequenceService;
    /**
     * 組織單位的 Service。
     * 
     * @return
     */
    public DepartmentService getDepartmentService() {
        return departmentService;
    }
    public void setDepartmentService(DepartmentService departmentService) {
        this.departmentService = departmentService;
    }
    /**
     * 會計科目的 Service。
     * 
     * @return
     */
    public AccTitleService getAccTitleService() {
        return accTitleService;
    }
    public void setAccTitleService(AccTitleService accTitleService) {
        this.accTitleService = accTitleService;
    }
    public void setSequenceService(SequenceService sequenceService) {

public class ProcessServiceRestImpl implements ProcessServiceRest {
	@EJB
	private ProcessServiceLocal processRuntimeService;
	@Override
	public JaxbProcessInstanceResponse startProcess(String processId, JaxbInitializeProcessRequest request) {
		try {
			if(request.getVariables() == null) {
				return new JaxbProcessInstanceResponse(processRuntimeService.startProcess(request.getReleaseId(), processId));
			}
			else {
				return new JaxbProcessInstanceResponse(processRuntimeService.startProcess(request.getReleaseId(), processId, request.getVariables()));
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}
	@Override
	public JaxbProcessInstanceResponse createProcessInstance(String processId, JaxbInitializeProcessRequest request) {
		try {
			return new JaxbProcessInstanceResponse(processRuntimeService.createProcessInstance(request.getReleaseId(), processId, request.getVariables()));
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	
/**
 * Created by urgoo_01 on 2016/8/24.
 */
public class CounselorServiceList {
    private double servicePrice;
    private String serviceLife;
    private String serviceName;
    private String serviceid;
    public double getServicePrice() {
        return servicePrice;
    }
    public void setServicePrice(double mServicePrice) {
        servicePrice = mServicePrice;
    }
    public String getServiceid() {
        return serviceid;
    }
    public void setServiceid(String mServiceid) {
        serviceid = mServiceid;
    }
    public String getServiceLife() {
        return serviceLife;
    }
    public void setServiceLife(String mServiceLife) {
        serviceLife = mServiceLife;
    }
    public String getServiceName() {
        return serviceName;
    }
    public void setServiceName(String mServiceName) {
        serviceName = mServiceName;
    }
    public String getServiceId() {
        return serviceid;
    }
    public void setServiceId(String mServiceId) {
        servi
/**
 * An implementation of the main class of the domain.
 * It executes the start up use case and provides the
 * handlers application use case handlers
 * 
 * @author fmartins
 *
 */
public class DCO implements IDCO {
	private CreateIndicatorHandler createIndicatorHandler;
	private ILoginHandler loginHandler;
	private IObtainCategoriesHandler obtainCategoriesHandler;
	private IObtainIndicatorsHandler obtainIndicatorsHandler;
	private ICreateCategoryHandler createCategoryHandler;
	private INewUserHandler newUserHandler;
	private IAddObservationsHandler addObservationsHandler;
	private ICreateUnitHandler createUnitHandler;
	public DCO() {
		createIndicatorHandler = new CreateIndicatorHandler(); 
		loginHandler = new LoginHandlerStub();
		obtainCategoriesHandler = new ObtainCategoriesHandlerStub();
		obtainIndicatorsHandler = new ObtainIndicatorsHandler();
		createCategoryHandler = new CreateCategoryHandler();
		newUserHandler = new NewUserHandlerStub();
		addObservationsHandler = new A
public class JPAProcessInstanceManager
    implements
    ProcessInstanceManager {
    private InternalKnowledgeRuntime kruntime;
    private transient Map<Long, ProcessInstance> processInstances;
    public void setKnowledgeRuntime(InternalKnowledgeRuntime kruntime) {
        this.kruntime = kruntime;
    }
    public void addProcessInstance(ProcessInstance processInstance) {
        ProcessInstanceInfo processInstanceInfo = new ProcessInstanceInfo( processInstance, this.kruntime.getEnvironment() );
        EntityManager em = (EntityManager) this.kruntime.getEnvironment().get( EnvironmentName.CMD_SCOPED_ENTITY_MANAGER );
        em.persist( processInstanceInfo );
        ((org.drools.process.instance.ProcessInstance) processInstance).setId( processInstanceInfo.getId() );
        processInstanceInfo.updateLastReadDate();
        internalAddProcessInstance(processInstance);
    }
    public void internalAddProcessInstance(ProcessInstance processInstance) {
    	if (this.processInstances

        	this.processInstances = new HashMap<Long, ProcessInstance>();
        }
        processInstances.put(processInstance.getId(), processInstance);
    }
    public ProcessInstance getProcessInstance(long id) {
    	org.drools.process.instance.ProcessInstance processInstance = null;
    	if (this.processInstances != null) {
	    	processInstance = (org.drools.process.instance.ProcessInstance) this.processInstances.get(id);
	    	if (processInstance != null) {
	    		return processInstance;
	    	}
    	}
    	
        EntityManager em = (EntityManager) this.kruntime.getEnvironment().get( EnvironmentName.CMD_SCOPED_ENTITY_MANAGER );
        ProcessInstanceInfo processInstanceInfo = em.find( ProcessInstanceInfo.class,
                                                           id );
        if ( processInstanceInfo == null ) {
            return null;
        }
        processInstanceInfo.updateLastReadDate();
        processInstance = (org.drools.process.instance.ProcessInstance)
 

        Process process = kruntime.getKnowledgeBase().getProcess( processInstance.getProcessId() );
        if ( process == null ) {
            throw new IllegalArgumentException( "Could not find process " + processInstance.getProcessId() );
        }
        processInstance.setProcess( process );
        if ( processInstance.getKnowledgeRuntime() == null ) {
            processInstance.setKnowledgeRuntime( kruntime );
            ((ProcessInstanceImpl) processInstance).reconnect();
        }
        return processInstance;
    }
    public Collection<ProcessInstance> getProcessInstances() {
        return new ArrayList<ProcessInstance>();
    }
    public void removeProcessInstance(ProcessInstance processInstance) {
        EntityManager em = (EntityManager) this.kruntime.getEnvironment().get( EnvironmentName.CMD_SCOPED_ENTITY_MANAGER );
        ProcessInstanceInfo processInstanceInfo = em.find( ProcessInstanceInfo.class,
                                                           pr
/**
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 */
/**
 * 基础Repostory简单实现 factory bean
 * 请参考 spring-data-jpa-reference [1.4.2. Adding custom behaviour to all repositories]
 * <p>User: Zhang Kaitao
 * <p>Date: 13-5-5 上午11:57
 * <p>Version: 1.0
 */
public class SimpleBaseRepositoryFactoryBean<R extends JpaRepository<M, ID>, M, ID extends Serializable>
        extends JpaRepositoryFactoryBean<R, M, ID> {
    public SimpleBaseRepositoryFactoryBean() {
    }
    protected RepositoryFactorySupport createRepositoryFactory(EntityManager entityManager) {
        return new SimpleBaseRepositoryFactory(entityManager);
    }
class SimpleBaseRepositoryFactory<M, ID extends Serializable> extends JpaRepositoryFactory {
    private EntityManager entityManager;
    public SimpleBaseRepositoryFactory(EntityManager entityManager) {
        super(entityManager);
        this.entityManager = entityManager;
    }
    protected Object getTargetRepository(RepositoryMetadata metadat

        Class<?> repositoryInterface = metadata.getRepositoryInterface();
        if (isBaseRepository(repositoryInterface)) {
            JpaEntityInformation<M, ID> entityInformation = getEntityInformation((Class<M>) metadata.getDomainType());
            SimpleBaseRepository repository = new SimpleBaseRepository<M, ID>(entityInformation, entityManager);
            return repository;
        }
        return super.getTargetRepository(metadata);
    }
    protected Class<?> getRepositoryBaseClass(RepositoryMetadata metadata) {
        if (isBaseRepository(metadata.getRepositoryInterface())) {
            return SimpleBaseRepository.class;
        }
        return super.getRepositoryBaseClass(metadata);
    }
    private boolean isBaseRepository(Class<?> repositoryInterface) {
        return BaseRepository.class.isAssignableFrom(repositoryInterface);
    }
    @Override
    protected QueryLookupStrategy getQueryLookupStrategy(QueryLookupStrategy.Key key) {
        return super.getQue
public class RR {
	/**@param processQ - Contains the processes in the order of their delays, and the order they were encountered.
	 * @param cycle - The current cycle of this set of process executions.**/
	LinkedList<Process> processQ = new LinkedList<Process>();
	LinkedList<Process> tempQ;
	private int cycle;
	private boolean unlocked;
	private boolean unlockNextCycle;
	int numberTerminated = 0;
	int numberOfProcesses;
	public RR(int numberOfProcesses){
		cycle = 0;
		unlocked = true;
		this.numberOfProcesses = numberOfProcesses;
	}
	public void offer(Process newProcess){
		processQ.offer(newProcess);
	}
	public void runCycle(){
		Process currentProcess;
		int state;
		tempQ = new LinkedList<Process>(processQ);
		printCycle();
		processQ.clear();
		
		
		while(!tempQ.isEmpty()){
			currentProcess = tempQ.poll();
			state = currentProcess.state;
		
			switch(state){
				case Process.UNSTARTED: checkArrivalOf(currentProcess); break;
				case Process.READY: checkReadyToRun(currentProcess

				case Process.RUNNING: checkRunningToBlock(currentProcess); break;
				case Process.BLOCKED: checkBlockedToReady(currentProcess); break;
				case Process.TERMINATED: processQ.offer(currentProcess); break;
			}
		}
		cycle++;
		if(unlockNextCycle)
			unlocked = true;
	}
	public void checkArrivalOf(Process currentProcess){
		if((currentProcess.arrivalTime - this.cycle) == 0){
			currentProcess.setState(Process.READY);
			if(unlocked){
				checkReadyToRun(currentProcess);
				return;
			}
			processQ.offer(currentProcess);
		}
		else
			processQ.offer(currentProcess);
	}
	public boolean checkReadyToRun(Process currentProcess){
		if(unlocked){
			currentProcess.setState(Process.RUNNING);
			unlocked = false;
			currentProcess.reduceBurst();
			currentProcess.reduceCPU();
			processQ.offer(currentProcess);
			if(currentProcess.remainingBurst == 0)
				unlockNextCycle = true;
			return true;
		}
		else
			processQ.offer(currentProcess);
			return false;
	}
	public void checkRunningToBloc

			currentProcess.reduceBurst();
			currentProcess.reduceCPU();
			processQ.offer(currentProcess);
		}
		else if(currentProcess.remainingCPU < 1){
			currentProcess.setState(Process.TERMINATED);
			processQ.offer(currentProcess);
			numberTerminated++;
			unlocked = true;
		}
			currentProcess.setState(Process.BLOCKED);
			currentProcess.reduceBurst();
			processQ.offer(currentProcess);
			unlocked = true;
		}
			
	}
	public void checkBlockedToReady(Process currentProcess){
		if(currentProcess.remainingBurst > 1){
			currentProcess.reduceBurst();
			processQ.offer(currentProcess);
		}
		else{
			currentProcess.reduceBurst();
			currentProcess.setState(Process.READY);
			checkReadyToRun(currentProcess);
		}		
	}
	public void printCycle(){
		Process currentProcess;
		String cycleLine = "";
		LinkedList<Process> printQ = new LinkedList<Process>(processQ);
		while((currentProcess = printQ.poll()) != null){
			cycleLine += " \t" + currentProcess.getStateString() + " " + currentProcess.rema
public class CustomSubProcessResolverTest extends TestCase {
  
  MapBasedProcessRepository mapBasedProcessRepository = new MapBasedProcessRepository();
  
  SubProcessResolver originalSubProcessResolver = ProcessState.defaultSubProcessResolver;
  
  public void setUp() {
    ProcessState.setDefaultSubProcessResolver(mapBasedProcessRepository);
    
  }
  
  public void tearDown() {
    ProcessState.setDefaultSubProcessResolver(originalSubProcessResolver);
  }
  public static class MapBasedProcessRepository implements SubProcessResolver {
    private static final long serialVersionUID = 1L;
    Map processes = new HashMap();
    public void add(ProcessDefinition processDefinition) {
      processes.put(processDefinition.getName(), processDefinition);
    }
    public ProcessDefinition findSubProcess(Element subProcessElement) {
      String processName = subProcessElement.attributeValue("name");
      return (ProcessDefinition) processes.get(processName);
    }
  }
  
  public void tes
/**
 * Created by lukasgol on 30.04.14.
 */
public class Initializer {
    RoleRepository roleRepository;
    UserRepository userRepository;
    DoorRepository doorRepository;
    HistoryEntryRepository historyEntryRepository;
    public Initializer(RoleRepository roleRepository, UserRepository useRoleRepository) {
        this.roleRepository = roleRepository;
        this.userRepository = useRoleRepository;
    }
    public Initializer(RoleRepository roleRepository,
                       UserRepository userRepository,
                       DoorRepository doorRepository,
                       HistoryEntryRepository historyEntryRepository) {
        this.roleRepository = roleRepository;
        this.userRepository = userRepository;
        this.doorRepository = doorRepository;
        this.historyEntryRepository = historyEntryRepository;
    }
    public void init(){
        User marcin = new User("Marcin", "Michalek", "m", "p");
        Set<Role> roles = new HashSet<Role>();
       
/**
 * The Class ProcessRequest.
 */
public class ProcessRequest extends LightingControlInquiryRequest
	/** The Constant FIRST_RESULT. */
	private static final int FIRST_RESULT = 0;
	/** The process list. */
	private List<Process> processList = new ArrayList<Process>();
	/** The process filter. */
	private ProcessFilter processFilter;
	/** The process item status enum. */
	private ProcessItemStatusEnum processItemStatusEnum;
	/** The process status reason enum. */
	private ProcessStatusReasonEnum processStatusReasonEnum;
	/** The insert by fetch. */
	private List<ProcessItem> processItemFailureList;
	/**
	 * Instantiates a new process request.
	 */
	public ProcessRequest()
	{
	}
	/**
	 * Create a new process request.
	 * 
	 * @param userContext the user context
	 */
	public ProcessRequest(UserContext userContext)
	{
		super(userContext);
	}
	/**
	 * Create a new process request.
	 * 
	 * @param process the process
	 * @param tenant the tenant
	 * @param userContext the user context
	 *

	public ProcessRequest(final Process process, final Tenant tenant, final UserContext userContext)
	{
		super(userContext, tenant);
		setProcess(process);
	}
	/**
	 * Sets the process list.
	 * 
	 * @param processListParam the new process list
	 */
	public void setProcessList(List<Process> processListParam)
	{
		processList = processListParam;
	}
	/**
	 * Gets the process.
	 * 
	 * @return the process
	 */
	public Process getProcess()
	{
		if ((getProcessList() == null) || getProcessList().isEmpty())
		{
			return null;
		}
		return getProcessList().get(FIRST_RESULT);
	}
	/**
	 * Sets the process.
	 * 
	 * @param processParam the new process
	 */
	public void setProcess(Process processParam)
	{
		getProcessList().add(processParam);
	}
	/**
	 * Gets the process list.
	 * 
	 * @return the process list
	 */
	public List<Process> getProcessList()
	{
		return processList;
	}
	/**
	 * Gets the process filter.
	 * 
	 * @return the process filter
	 */
	public ProcessFilter getProcessFilter()
	

		return processFilter;
	}
	/**
	 * Sets the process filter.
	 * 
	 * @param processFilter the new process filter
	 */
	public void setProcessFilter(ProcessFilter processFilter)
	{
		this.processFilter = processFilter;
	}
	/**
	 * Gets the process item status enum.
	 * 
	 * @return the process item status enum
	 */
	public ProcessItemStatusEnum getProcessItemStatusEnum()
	{
		return processItemStatusEnum;
	}
	/**
	 * Sets the process item status enum.
	 * 
	 * @param processItemStatusEnum the new process item status enum
	 */
	public void setProcessItemStatusEnum(ProcessItemStatusEnum processItemStatusEnum)
	{
		this.processItemStatusEnum = processItemStatusEnum;
	}
	/**
	 * Gets the process item status enum value.
	 * 
	 * @return the process item status enum value
	 */
	public Integer getProcessItemStatusEnumValue()
	{
		if (getProcessItemStatusEnum() == null)
		{
			return null;
		}
		return getProcessItemStatusEnum().getValue();
	}
	/**
	 * Gets the process status reason enum.
	 *

	 * @return the process status reason enum
	 */
	public ProcessStatusReasonEnum getProcessStatusReasonEnum()
	{
		return processStatusReasonEnum;
	}
	/**
	 * Sets the process status reason enum.
	 * 
	 * @param processStatusReasonEnum the new process status reason enum
	 */
	public void setProcessStatusReasonEnum(ProcessStatusReasonEnum processStatusReasonEnum)
	{
		this.processStatusReasonEnum = processStatusReasonEnum;
	}
	/**
	 * Gets the process status reason enum value.
	 * 
	 * @return the process status reason enum value
	 */
	public Integer getProcessStatusReasonEnumValue()
	{
		if (getProcessStatusReasonEnum() == null)
		{
			return null;
		}
		return getProcessStatusReasonEnum().getValue();
	}
	public List<ProcessItem> getProcessItemFailureList()
	{
		return processItemFailureList;
	}
	public void setProcessItemFailureList(List<ProcessItem> processItemFailureList)
	{
		this.processItemFailureList = processItemFailureList;
	}
	@Override
	public String toString()
	{
		return "

				+ ", getProcessFilter()=" + getProcessFilter() + ", getProcessItemStatusEnum()="
				+ getProcessItemStatusEnum() + ", getProcessItemStatusEnumValue()=" + getProcessItemStatusEnumValue()
				+ ", getProcessStatusReasonEnum()=" + getProcessStatusReasonEnum()
				+ ", getProcessStatusReasonEnumValue()=" + getProcessStatusReasonEnumValue()
				+ ", getProcessItemFailureList()=" + getProcessItemFailureList() + ", getStartRow()=" + getStartRow()
				+ ", getEndRow()=" + getEndRow() + ", getPageSize()=" + getPageSize() + ", getStartPage()="
				+ getStartPage() + ", getSortExpressions()=" + getSortExpressions() + ", getSortExpression()="
				+ getSortExpression() + ", isPreQueryCount()=" + isPreQueryCount() + ", getMaxPreQueryCount()="
				+ getMaxPreQueryCount() + ", getListColumn()=" + getListColumn() + ", isMonitored()=" + isMonitored()
				+ ", getSearchLight()=" + getSearchLight() + ", getPaginationAllSelected()="
				+ getPaginationAllSelected() + ", getSelectionPaginationIds()=" 
/**
 * 롤관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성 
 *
 * </pre>
 */
@Service("egovRoleManageService")
public class EgovRoleManageServiceImpl extends EgovAbstractServiceImpl implements EgovRoleManageService {
	@Resource(name="roleManageDAO")
	public RoleManageDAO roleManageDAO;
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception {
		return roleManageDAO.selectRole(roleManageVO);
	}
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManag

		return roleManageDAO.selectRoleList(roleManageVO);
	}
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception {
		roleManageDAO.deleteRole(roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void updateRole(RoleManage roleManage) throws Exception {
		roleManageDAO.updateRole(roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 등록
	 * @param roleManage RoleManage
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO insertRole(RoleManage roleManage, RoleManageVO roleManageVO) throws Exception {
		roleManageDAO.insertRole(roleManage);	
		roleManageVO.setRoleCode(roleManage.getRoleCode());
		return roleManageDAO.selectRole(roleManageVO);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @param roleManageVO RoleManageVO
	 * @return int
	 * 
/**
 * Vosao CMS. Simple CMS for Google App Engine.
 * 
 * Copyright (C) 2009-2010 Vosao development team.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * email: vosao.dev@gmail.com
 */
public interface BackService {
	void register(JSONRPCBridge bridge);
	void unregister(JSONRPCBridge bridge);
	Fi

	void setFileService(FileService bean);
	FolderService getFolderService();
	void setFolderService(FolderService bean);
	CommentService getCommentService();
	void setCommentService(CommentService bean);
	PageService getPageService();
	void setPageService(PageService bean);
	TemplateService getTemplateService();
	void setTemplateService(TemplateService bean);
	FormService getFormService();
	void setFormService(FormService bean);
	FieldService getFieldService();
	void setFieldService(FieldService bean);
	ConfigService getConfigService();
	void setConfigService(ConfigService bean);
	SeoUrlService getSeoUrlService();
	void setSeoUrlService(SeoUrlService bean);
	UserService getUserService();
	void setUserService(UserService bean);
	LanguageService getLanguageService();
	void setLanguageService(LanguageService bean);
	MessageService getMessageService();
	void setMessageService(MessageService bean);
	GroupService getGroupService();
	void setGroupService(GroupService bean);
	ContentPermissionS
/*
 * Created on Dec 12, 2004
 */
/**
 * @author Evren Sirin
 */
public class ExecutionException extends RuntimeException {
	private AtomicProcess atomicProcess;
	private Process process;
    public ExecutionException() {
        super();
    }
    public ExecutionException(String message) {
        super(message);
    }
    public ExecutionException(String message, Process process) {
        super(message);
        setProcess(process);
    }
    
    public ExecutionException(Exception e) {
        super(e);
    }
    /**
     * Returns the atomic process whose execution failed 
     * @return the atomic process whose execution failed or null if other failure ocurred
     */
	public AtomicProcess getAtomicProcess() {
		return atomicProcess;
	}
	/**
	 * Sets the atomic process whose execution failed
	 * @param atomicProcess the atomic process whose execution failed
	 */
	public void setAtomicProcess(AtomicProcess atomicProcess) {
		this.atomicProcess = atomicProcess;
	}
	/**
	 * Return
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author oaz
 */
public class ProcessManager
    boolean debug = true;
    int processCount;
    int max;
    /**
     * 
     * @param max 
     */
    public ProcessManager( int max )
    {
        processCount = 0;
        this.max = max;
    }
    
    /**
     * 
     * @return 
     */
    public boolean allowProcess()
    {
        if( debug ) { System.out.println( "allowProcess() processCount: " + processCount ); }
        if( processCount < max) { return true; }
        return false;
    }
    
    /**
     * 
     * @return 
     */
    public int addProcess()
    {
        if( debug ) { System.out.println( "addProcess() before: processCount: " + processCount ); }
        processCount++;
        if( debug ) { System.out.println( "addProcess() after: processCount: " + processCount ); }
        return processCount;
    }
    /**
     * 
     * @return 
     */
    public
/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
/**
 * <p>
 * This class is a wrapper for {@link ServiceEntryService}.
 * </p>
 *
 * @author    loind
 * @see       ServiceEntryService
 * @generated
 */
public class ServiceEntryServiceWrapper implements ServiceEntryService,
	ServiceWrapper<ServiceEntryService> {
	public ServiceEntryServiceWrapper(ServiceEntryService serviceEntryService) {
		_serviceEntryService = serviceEntryService;
	}
	/**
	 * @deprecate
@Controller
@SessionAttributes({"controlprocess","processname"})
public class ProcessController
	@Autowired
	ProcessDAO processDAO;
	private static final Logger logger = LoggerFactory.getLogger(MainController.class);
	@RequestMapping(value = {"/add_process"}, method = RequestMethod.GET)
		
		public String addProcess(HttpSession session,ModelMap model, Principal principal) {
			session.removeAttribute("controlprocess");
			session.removeAttribute("process");
			model.addAttribute("menu","document");
			return "add_process";
		}
	@RequestMapping(value = "/add_process", method = RequestMethod.POST)
	public String postProcess(HttpSession session,@ModelAttribute("Process") @Valid Process process,BindingResult result, ModelMap model) {
		session.setAttribute("process",process);
			if (result.hasErrors())
			{
				System.out.println("error");
				ProcessForm processForm = new ProcessForm();
				processForm.setProcesses(processDAO.getProcess());
				model.addAttribute("processForm",processForm

				model.addAttribute("success","true");
		        return "add_process";
			}
		
		String exist="";
		if(processDAO.getProcessIdExit(process.getAuto_id(),process.getProcess_id()))
		{
			ProcessForm processForm = new ProcessForm();
			processForm.setProcesses(processDAO.getProcess());
			model.addAttribute("processForm",processForm);
			model.addAttribute("success","exist");
			return "add_process";
			
		}
		if(processDAO.getProcessnameExit(process.getAuto_id(),process.getProcess_name()))
		{
			ProcessForm processForm = new ProcessForm();
			processForm.setProcesses(processDAO.getProcess());
			model.addAttribute("processForm",processForm);
			model.addAttribute("success","exists");
			return "add_process";
			
		}
		if(exist.equals("true"))
		{
			 return "add_process";
		}
		
			processDAO.insert_Process(process);
			ProcessForm processForm = new ProcessForm();
			processForm.setProcesses(processDAO.getlimitedprocessreport(1));
			model.addAttribute("noofpages",(int) Math.ceil(pr

			model.addAttribute("button","viewall");
		    model.addAttribute("success","false");
		    model.addAttribute("currentpage",1);
			model.addAttribute("processForm",processForm);
			model.addAttribute("menu","document");
			model.addAttribute("success","insert");
			session.removeAttribute("process");
		return "add_process";
	}
	@RequestMapping(value="/process_list", method=RequestMethod.GET)
	public String Processlist(HttpServletRequest request,ModelMap model, Principal principal,HttpSession session) {
		
	session.removeAttribute("processname");
		ProcessForm processForm = new ProcessForm();
		model.addAttribute("justcame","false");
	  	processForm.setProcesses(processDAO.getlimitedprocessreport(1));
		model.addAttribute("noofpages",(int) Math.ceil(processDAO.getnoofprocessreport() * 1.0 / 5));	 
		model.addAttribute("menu","document");
	  	model.addAttribute("noofrows",5);
		model.addAttribute("button","viewall");
	    model.addAttribute("success","false");
	    model.addAttribute

		model.addAttribute("processForm",processForm);
		
		return "process_list";
	}
	@RequestMapping(value="/process_list_search", method=RequestMethod.GET)
	public String Processlistsearch(HttpSession session,@RequestParam("processname")String pname, HttpServletRequest request,ModelMap model, Principal principal) {
		session.setAttribute("processname",pname);
		ProcessForm processForm = new ProcessForm();
		model.addAttribute("justcame","false");
		model.addAttribute("menu","document");
	  	processForm.setProcesses(processDAO.getProcess(pname));
	/*	model.addAttribute("noofpages",(int) Math.ceil(processDAO.getnoofprocessreport() * 1.0 / 5));	 
		model.addAttribute("menu","document");
	  	model.addAttribute("noofrows",5);
		model.addAttribute("button","viewall");
	    model.addAttribute("success","false");
	    model.addAttribute("currentpage",1);*/
		model.addAttribute("processForm",processForm);
		
		return "process_list";
	}
	@RequestMapping(value="/viewprocessreport_page", method=Requ

	public String viewprocessreport_page(HttpServletRequest request,@RequestParam("page") int page,ModelMap model) {	
		ProcessForm processForm = new ProcessForm();
		processForm.setProcesses(processDAO.getlimitedprocessreport(page));
		model.addAttribute("noofpages",(int) Math.ceil(processDAO.getnoofprocessreport() * 1.0 / 5));
		model.addAttribute("processForm",processForm);	
	  	model.addAttribute("noofrows",5);   
	    model.addAttribute("currentpage",page);
	    model.addAttribute("menu","document");
	    model.addAttribute("button","viewall");
	    
	    return "process_list";
		
	}
	@RequestMapping(value={"/viewallprocessreport"}, method = RequestMethod.GET)
	public String viewallprocessreport(HttpServletRequest request,ModelMap model, Principal principal ) {
		ProcessForm processForm = new ProcessForm();
		processForm.setProcesses(processDAO.getProcess());
		model.addAttribute("processForm",processForm);
	  	model.addAttribute("noofrows",5);    
	    model.addAttribute("menu","do

	    model.addAttribute("button","close");
	    model.addAttribute("success","false");
	    return "process_list";
	}
	@RequestMapping(value = "/edit_process", method = RequestMethod.GET)
	public String EditProcess_get(@RequestParam("process_id") String process_id,Process processes,ModelMap model) {
		ProcessForm processForm = new ProcessForm();
		processForm.setProcesses(processDAO.processes(process_id));
		model.addAttribute("processForm",processForm);
		model.addAttribute("menu","document");
	    return "edit_process";
	}
	@RequestMapping(value = "/update_process", method = RequestMethod.POST)
	public String Update_Process(ModelMap model,@ModelAttribute("Process") @Valid Process process,BindingResult result) throws IOException {
		if (result.hasErrors())
		{
			
			ProcessForm processForm = new ProcessForm();
			processForm.setProcesses(processDAO.processes(process.getProcess_id()));
			model.addAttribute("processForm",processForm);
	        return "edit_process";
		}
		if(processD

		{
			ProcessForm processForm = new ProcessForm();
			processForm.setProcesses(processDAO.getProcess());
			model.addAttribute("processForm",processForm);
			model.addAttribute("success","exist");
			 return "edit_process";
		}
		if(processDAO.getProcessnameExit(process.getAuto_id(),process.getProcess_name()))
		{
			ProcessForm processForm = new ProcessForm();
			processForm.setProcesses(processDAO.getProcess());
			model.addAttribute("processForm",processForm);
			model.addAttribute("success","exists");
			 return "edit_process";
		}
		processDAO.update_Process(process);
		ProcessForm processForm = new ProcessForm();
		processForm.setProcesses(processDAO.getlimitedprocessreport(1));
		model.addAttribute("noofpages",(int) Math.ceil(processDAO.getnoofprocessreport() * 1.0 / 5));	 
		model.addAttribute("button","viewall");
	    model.addAttribute("success","false");
	    model.addAttribute("currentpage",1);
		model.addAttribute("processForm",processForm);
		model.addAttribute("menu","
public class PermissionConstants {
	public static final String[] validateFiles = new String[] { "user", "sp", "order" };
	public static final String ADM_JUDGE_MANAGE = "adm_judge_manage";
	public static final String ADM_ADV_MANAGE = "adm_adv_manage";
	public static final String ADM_NEWS_MANAGE = "adm_news_manage";
	public static final String ADM_SITE_MSG_MANAGE = "adm_site_msg_manage";
	public static final String ADM_RULE_MANAGE = "adm_rule_manage";
	public static final String ADM_SMS_MANAGE = "adm_sms_manage";
	public static final String ADM_BILL_MANAGE = "adm_bill_manage";
	public static final String ADM_CATEGORY_MANAGE = "adm_category_manage";
	public static final String ADM_LOCATION_MANAGE = "adm_location_manage";
	public static final String ADM_SETPRICE_MANAGE = "adm_setprice_manage";
	public static final String ADM_COMPLAINT_TYPE_MANAGE = "adm_complaint_type_manage";
	public static final String ADM_COMPLAINT_MANAGE = "adm_complaint_manage";
	public static final String ADM_ORDER_N
/**
 * 권한관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성 
 *
 * </pre>
 */
@Service("egovAuthorManageService")
public class EgovAuthorManageServiceImpl extends EgovAbstractServiceImpl implements EgovAuthorManageService {
    
	@Resource(name="authorManageDAO")
    private AuthorManageDAO authorManageDAO;
    /**
	 * 권한 목록을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return List<AuthorManageVO>
	 * @exception Exception
	 */
    public List<AuthorManageVO> selectAuthorList(AuthorManageVO authorManageVO) throws Exception {
        return authorManageDAO.selectAuthorList(authorManageVO);
    }
    
	/**
	 * 권한을 등록한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void i

    	authorManageDAO.insertAuthor(authorManage);
    }
    /**
	 * 권한을 수정한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void updateAuthor(AuthorManage authorManage) throws Exception {
    	authorManageDAO.updateAuthor(authorManage);
    }
    /**
	 * 권한을 삭제한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void deleteAuthor(AuthorManage authorManage) throws Exception {
    	authorManageDAO.deleteAuthor(authorManage);
    }
    /**
	 * 권한을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return AuthorManageVO
	 * @exception Exception
	 */
    public AuthorManageVO selectAuthor(AuthorManageVO authorManageVO) throws Exception {
    	AuthorManageVO resultVO = authorManageDAO.selectAuthor(authorManageVO);
        if (resultVO == null)
            throw processException("info.nodata.msg");
        return resultVO;
    }
    /**
	 * 권한 목록 카운트를 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return int
	 * @exception Exc
public class ManageLayoutAction extends ModuleAction {
	private ManageLayoutService manageLayoutService;
	private List<ManageCatalog> manageCatalogs;
	private List<ManageMenu> manageMenus;
	private String catalogId;
	@JSON(serialize = false, deserialize = false)
	public ManageLayoutService getManageLayoutService() {
		return manageLayoutService;
	}
	public void setManageLayoutService(ManageLayoutService manageLayoutService) {
		this.manageLayoutService = manageLayoutService;
	}
	public List<ManageCatalog> getManageCatalogs() {
		return manageCatalogs;
	}
	public void setManageCatalogs(List<ManageCatalog> manageCatalogs) {
		this.manageCatalogs = manageCatalogs;
	}
	public List<ManageMenu> getManageMenus() {
		return manageMenus;
	}
	public void setManageMenus(List<ManageMenu> manageMenus) {
		this.manageMenus = manageMenus;
	}
	public String getCatalogId() {
		return catalogId;
	}
	public void setCatalogId(String catalogId) {
		this.catalogId = catalogId;
	}
	@Override
	public void pre

	}
	public String execute() throws Exception {
		String result = ModuleAction.SUCCESS;
		return result;
	}
	public String executeQueryCatalogs() throws Exception {
		String result = ModuleAction.JSON;
		Object sessionUserId = this.strutsSession.get(InitializeListener.SESSION_USER_ID);
		if (sessionUserId != null) {
			if (sessionUserId instanceof String) {
				String userId = (String) sessionUserId;
				this.manageCatalogs = this.manageLayoutService.queryManageCatalogs(userId);
			}
		}
		return result;
	}
	public String executeQueryMenus() throws Exception {
		String result = ModuleAction.JSON;
		Object sessionUserId = this.strutsSession.get(InitializeListener.SESSION_USER_ID);
		if (sessionUserId != null) {
			if (sessionUserId instanceof String) {
				String userId = (String) sessionUserId;
				if (this.catalogId != null) {
					if (!this.catalogId.isEmpty()) {
						this.manageMenus = this.manageLayoutService.queryManageMenus(userId, this.catalogId);
					}
				}
			}
		}
		return
public class ServiceLogAction extends BaseAction {
	private static final long serialVersionUID = -8700719102424555819L;
	private List<ServiceLogTBean> serviceLogTList;
	private List<ServiceLogBean> serviceLogList;
	private ServiceService serviceService;
	private ServiceLogService serviceLogService;
	public String getServiceLog() throws Exception {
		String userName = null;
		ServiceLogBean serviceLogBean;
		ActionContext ctx = ActionContext.getContext();
		userName = (String) ctx.getSession().get("userName");
		serviceLogTList = serviceLogService.get(userName);
		serviceLogList = new LinkedList<ServiceLogBean>();
		for (int i = 0; i < serviceLogTList.size(); i++) {
			serviceLogBean = new ServiceLogBean();
			serviceLogBean.setServiceId(serviceLogTList.get(i).getServiceId());
			serviceLogBean.setServiceName(serviceService.getById(new Long(1),
					serviceLogTList.get(i).getServiceId()).getName());
			serviceLogBean.setUserName(serviceLogTList.get(i).getUserName());
			serviceLogBean.s
/**
 * Cette classe permet de construire rapidement diverses {@link UmlProcess}.
 * 
 * @author Vincent
 * 
 */
public class UmlBuilder {
	public static UmlBuilder instance = new UmlBuilder();
	private UmlBuilder() {}
	/**
	 * Construit un process simple : InitialNode -> FlowFinalNode.
	 * 
	 * @return
	 */
	public UmlProcess initialFinal() {
		UmlProcess process = new UmlProcess();
		InitialNode init = process.buildInitialNode();
		FlowFinalNode finalNode = process.buildFlowFinalNode();
		process.buildControlFlow(init, finalNode);
		return process;
	}
	/**
	 * Construit un process : initial -> A -> B -> final.
	 * 
	 * @return
	 */
	public UmlProcess initialABFinal() {
		UmlProcess process = new UmlProcess();
		
		InitialNode init = process.buildInitialNode();
		Action a = process.buildAction();
		Action b = process.buildAction();
		FlowFinalNode finalNode = process.buildFlowFinalNode();
		
		process.buildControlFlow(init, a);
		process.buildControlFlow(a, b);
		process.buildControlFl

		
		return process;
	}
	/**
	 * Construit un process : initial -> A -> B -> C -> final.
	 * 
	 * @return
	 */
	public UmlProcess initialABCFinal() {
		UmlProcess process = new UmlProcess();
		
		InitialNode init = process.buildInitialNode();
		Action a = process.buildAction();
		Action b = process.buildAction();
		Action c = process.buildAction();
		FlowFinalNode finalNode = process.buildFlowFinalNode();
		
		process.buildControlFlow(init, a);
		process.buildControlFlow(a, b);
		process.buildControlFlow(b, c);
		process.buildControlFlow(c, finalNode);
		
		return process;
	}
	/**
	 * Construit un process contenant un fork.
	 * 
	 * @return
	 */
	public UmlProcess buildForkExample() {
		UmlProcess process = new UmlProcess();
		
		InitialNode initial = process.buildInitialNode();
		ForkNode fork = process.buildForkNode();
		Action a = process.buildAction();
		Action b = process.buildAction();
		JoinNode join = process.buildJoinNode();
		FlowFinalNode finalNode = process.buildFlowFinalN

		
		process.buildControlFlow(initial, fork);
		process.buildControlFlow(fork, a);
		process.buildControlFlow(fork, b);
		process.buildControlFlow(a, join);
		process.buildControlFlow(b, join);
		process.buildControlFlow(join, finalNode);
		
		return process;
	}
	/**
	 * Créé un process avec un exemple de décision.
	 * 
	 * @return
	 */
	public UmlProcess buildDecisionExample() {
		UmlProcess process = new UmlProcess();
		
		InitialNode initial = process.buildInitialNode();
		DecisionNode decision = process.buildDecisionNode();
		Action a = process.buildAction();
		Action b = process.buildAction();
		MergeNode merge = process.buildMergeNode();
		FlowFinalNode finalNode = process.buildFlowFinalNode();
		
		process.buildControlFlow(initial, decision);
		process.buildControlFlow(decision, a);
		process.buildControlFlow(decision, b);
		process.buildControlFlow(a, merge);
		process.buildControlFlow(b, merge);
		process.buildControlFlow(merge, finalNode);
		
		return process;
	}
	/**
	 * Cr

	 * 
	 * @return
	 */
	public UmlProcess buildLoopExample() {
		UmlProcess process = new UmlProcess();
		
		InitialNode initial = process.buildInitialNode();
		MergeNode merge = process.buildMergeNode();
		Action a = process.buildAction();
		DecisionNode decision = process.buildDecisionNode();
		FlowFinalNode finalNode = process.buildFlowFinalNode();
		
		process.buildControlFlow(initial, merge);
		process.buildControlFlow(merge, a);
		process.buildControlFlow(a, decision);
		process.buildControlFlow(decision, merge);
		process.buildControlFlow(decision, finalNode);
		
		return process;
	}
	/**
	 * Créé un process avec un exemple de boucle (2 boucles).
	 * 
	 * @return
	 */
	public UmlProcess buildDoubleLoopExample() {
		UmlProcess process = new UmlProcess();
		
		InitialNode initial = process.buildInitialNode();
		MergeNode merge1 = process.buildMergeNode();
		Action a = process.buildAction();
		DecisionNode decision1 = process.buildDecisionNode();
		MergeNode merge2 = process.buildM

		Action b = process.buildAction();
		DecisionNode decision2 = process.buildDecisionNode();
		FlowFinalNode finalNode = process.buildFlowFinalNode();
		
		process.buildControlFlow(initial, merge1);
		
		process.buildControlFlow(merge1, a);
		process.buildControlFlow(a, decision1);
		process.buildControlFlow(decision1, merge1);
		
		process.buildControlFlow(decision1, merge2);
		process.buildControlFlow(merge2, b);
		process.buildControlFlow(b, decision2);
		process.buildControlFlow(decision2, merge2);
		
		process.buildControlFlow(decision2, finalNode);
		
		return process;
	}
	/**
	 * Créé un process avec une terminaison explicite.
	 * 
	 * @return
	 */
	public UmlProcess buildExpliciteTermination() {
		UmlProcess process = new UmlProcess();
		
		InitialNode initial = process.buildInitialNode();
		ForkNode fork = process.buildForkNode();
		Action a = process.buildAction();
		ActivityFinalNode finalExplicitNode = process.buildActivityFinalNode();
		FlowFinalNode finalNode = process.bu
/*******************************************************************************
 * Copyright (c) 2014 Salesforce.com, inc..
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * 
 * Contributors:
 *     Salesforce.com, inc. - initial API and implementation
 ******************************************************************************/
public class ServiceLocator {
    protected MetadataService metadataService = null;
    protected ProjectService projectService = null;
    protected RunTestsService runTestsService = null;
    protected LoggingService loggingService = null;
    protected ApexService apexService = null;
    protected ToolingDeployService toolingDeployService = null;
    protected ToolingService toolingService = null;
    protected FactoryLocator factoryLocator = null;
    public ServiceLocator() {
        super();
    }
  

        return metadataService;
    }
    public void setMetadataService(MetadataService metadataService) {
        this.metadataService = metadataService;
    }
    public PackageDeployService getPackageDeployService() {
    }
    }
    public PackageRetrieveService getPackageRetrieveService() {
    }
    }
    public ProjectService getProjectService() {
        return projectService;
    }
    public void setProjectService(ProjectService projectService) {
        this.projectService = projectService;
    }
    public RunTestsService getRunTestsService() {
        return runTestsService;
    }
    public void setRunTestsService(RunTestsService runTestsService) {
        this.runTestsService = runTestsService;
    }
    public LoggingService getLoggingService() {
        return loggingService ;
    }
    public void setLoggingService(LoggingService loggingService) {
        this.loggingService = loggingService;
    }
    public ApexService getApexService() {
        return apexService
/**
 * Created by rishav on 12/3/2015.
 */
public class HandlerInjector {
    private static HandlerInjector ourInstance = new HandlerInjector();
    public static HandlerInjector getInstance() {
        return ourInstance;
    }
    private EmptyHandler emptyHandler;
    private GameStartHandler gameStartHandler;
    private LandGrantHandler landGrantHandler;
    private LandPurchaseHandler landPurchaseHandler;
    private PlaceMuleHandler placeMuleHandler;
    private SelectionOverHandler selectionOverHandler;
    private TurnOverHandler turnOverHandler;
    private HandlerInjector() {
        BoardController boardController = ControllerInjector.getInstance().getBoardController();
        emptyHandler = new EmptyHandler(boardController);
        gameStartHandler = new GameStartHandler(boardController);
        landGrantHandler = new LandGrantHandler(boardController);
        landPurchaseHandler = new LandPurchaseHandler(boardController);
        placeMuleHandler = new PlaceMuleHandle
/**
 * 模块配置类
 * @author fWX183786
 * @version V100R001C10
 */
public class HandlerMaps
    private static HandlerMaps handlerMapsInstanceHandlerMaps = null;
    private static Map<String, Class<? extends DefaultCommHandler>> handlerMap = null;
    static
    {
        initHandlerMap();
    }
    /**
     * 获取HandlerMaps单例
     * @return HandlerMaps单例
     */
    public static HandlerMaps getHandlerMapsInstance()
    {
        if (null == handlerMapsInstanceHandlerMaps)
        {
            handlerMapsInstanceHandlerMaps = new HandlerMaps();
        }
        return handlerMapsInstanceHandlerMaps;
    }
    /**
     * 获取具体实现类实例
     * @param key handler名称
     * @return 具体实现类实例
     */
    public Class<? extends DefaultCommHandler> getValue(String key)
    {
        if (handlerMap.containsKey(key))
        {
            return handlerMap.get(key);
        }
        else
        {
            return null;
        }
    }
    /**
     * 模块配置初始化
     */
    private static void initHandler

    {
        handlerMap = new HashMap<String, Class<? extends DefaultCommHandler>>();
        if (null != handlerMap)
        {
            handlerMap.put(HandlerConstant.LUN_HANDLER, LunHandlerImp.class);
            handlerMap.put(HandlerConstant.STORAGEPOOL_HANDLER, StoragePoolHandlerImp.class);
            handlerMap.put(HandlerConstant.HOSTGROUP_HANDLER, HostGroupHandlerImp.class);
            handlerMap.put(HandlerConstant.PORTGROUP_HANDLER, PortGroupHandlerImp.class);
            handlerMap.put(HandlerConstant.MAPPINGVIEW_HANDLER, MappingViewHandlerImp.class);
            handlerMap.put(HandlerConstant.ISCSIINITIATOR_HANDLER, ISCSIInitiatorHandlerImp.class);
            handlerMap.put(HandlerConstant.FCINITIATOR_HANDLER, FcInitiatorHandlerImp.class);
            handlerMap.put(HandlerConstant.LUNGROUP_HANDLER, LunGroupHandlerImp.class);
            handlerMap.put(HandlerConstant.HOST_HANDLER, HostHandlerImpl.class);
            handlerMap.put(HandlerConstant.SYSINFO_HANDLER, S

            handlerMap.put(HandlerConstant.ALARM_HANDLER, AlarmHandlerImp.class);
            handlerMap.put(HandlerConstant.PERFSTATISTIC_HANDLER, PerfStatisticHandlerImp.class);
            handlerMap.put(HandlerConstant.DISKPOOL_HANDLER, DiskPoolHandlerImp.class);
            handlerMap.put(HandlerConstant.CACHEPARTITION_HANDLER, CachePartitionHandlerImp.class);
            handlerMap.put(HandlerConstant.PERFORMANCE_STATISTIC_SWITCH, PerformanceStatisticSwitchHandlerImpl.class);
            handlerMap.put(HandlerConstant.SYSTEM_TIMEZONE, SystemTimeHandlerImpl.class);
            handlerMap.put(HandlerConstant.FCOE_PORT, FCoEPortHandlerImp.class);
            handlerMap.put(HandlerConstant.CONTROLLER, ControllerHandlerImpl.class);
            handlerMap.put(HandlerConstant.ETH_PORT, ETHPortHandlerImp.class);
            handlerMap.put(HandlerConstant.DISK_HANDLER, DiskHandlerImp.class);
            handlerMap.put(HandlerConstant.FCPORT_HANDLER, FCPortHandlerImp.class);
            h

            handlerMap.put(HandlerConstant.FCLINK_HANDLER, FCLinkHandlerImp.class);
            handlerMap.put(HandlerConstant.ISCSILINK_HANDLER, ISCSILinkHandlerImp.class);
            handlerMap.put(HandlerConstant.REMOTEDEVICE_HANDLER, RemoteDeviceHandlerImp.class);
            handlerMap.put(HandlerConstant.REMOTELUN_HANDLER, RemoteLunHandlerImp.class);
            handlerMap.put(HandlerConstant.REPLICATIONPAIR_HANDLER, ReplicationPairHandlerImp.class);
            handlerMap.put(HandlerConstant.CONSISTENTGROUP_HANDLER, ConsistentGroupHandlerImp.class);
            handlerMap.put(HandlerConstant.NISFIELD_HANDLER, NISFieldHandlerImpl.class);
            handlerMap.put(HandlerConstant.ADFIELD_HANDLER, ADFieldHandlerImpl.class);
            handlerMap.put(HandlerConstant.LDAPFIELD_HANDLER, LDAPFieldHandlerImpl.class);
            handlerMap.put(HandlerConstant.CIFSSHARE_HANDLER, CIFSShareHandlerImpl.class);
            handlerMap.put(HandlerConstant.CIFSSHARE_AUTH_CLIENT_HANDLER, CIF

            handlerMap.put(HandlerConstant.NFSSHARE_HANDLER, NFSShareHandlerImpl.class);
            handlerMap.put(HandlerConstant.NFSSHARE_AUTH_CLIENT_HANDLER, NFSShareAuthClientHandlerImp.class);
            handlerMap.put(HandlerConstant.FILESYSTEM_HANDLER, FileSystemHandlerImpl.class);
            handlerMap.put(HandlerConstant.HOMEDIR_HANDLER, HomeDirHandlerImpl.class);
            handlerMap.put(HandlerConstant.CIFSSERVICE_HANDLER, CIFSServiceHandlerImpl.class);
            handlerMap.put(HandlerConstant.NFSSERVICE_HANDLER, NFSServiceHandlerImpl.class);
            handlerMap.put(HandlerConstant.LOCAL_RESGROUP_HANDLER, LocalResGroupHandlerImpl.class);
            handlerMap.put(HandlerConstant.LOCAL_RESUSER_HANDLER, LocalResuserHandlerImpl.class);
            handlerMap.put(HandlerConstant.QUOTA_HANDLER, QuotaHandlerImp.class);
            handlerMap.put(HandlerConstant.QUOTATREE_HANDLER, QuotaTreeHandlerImp.class);
            handlerMap.put(HandlerConstant.VSTORE_HANDLER, VSt
/**
 * @author Andy - 14/11/2014.
 */
public interface ClusterServicesController {
    /**
     * Instantiate an instance of the supplied serviceType on the local node and register it using the supplied
     * serviceId. The provided serviceData will be made available to the service instance via the ClusterServiceContext
     * provided to the instance in its constructor.
     *
     * @param serviceType   the type of the service.
     * @param serviceId     the unique id of this service. The key is unique across the cluster.
     * @param serviceData   the instance data of the service. This is managed by the controller for the service.
     * @param <Service>     the type of the service
     * @param <ServiceData> the type of the data the service uses.
     */
    <Service extends ClusterService<ServiceData>, ServiceData>
    void registerService(Class<Service> serviceType, ServiceId serviceId, ServiceData serviceData);
    /**
     * Start the service identified by the supplied detai

     *
     * @param serviceType   the type of the service.
     * @param serviceId     the unique id of this service. The key is unique across the cluster.
     * @param <Service>     the type of the service
     */
    <Service extends ClusterService<?>> void startService(Class<Service> serviceType, ServiceId serviceId);
    /**
     * Stop the service identified by the supplied details. The call does not wait for the service to stop.
     *
     * @param serviceType   the type of the service.
     * @param serviceId     the unique id of this service. The key is unique across the cluster.
     * @param <Service>     the type of the service
     */
    <Service extends ClusterService<?>> void stopService(Class<Service> serviceType, ServiceId serviceId);
    /**
     * Unregister the service identified by the supplied serviceId. If the service is running the controller will wait
     * for the service to stop.
     *
     * @param serviceId the id of the service to stop & unregister.

/**
 * The Class ProcessTypeBCLImpl.
 * 
 * @author QAT Global
 */
public class ProcessTypeBCLImpl implements IProcessTypeBCL
	/** The process dac. */
	private IProcessTypeDAC processTypeDAC;
	/**
	 * Gets the process type dac.
	 * 
	 * @return the process type dac
	 */
	public IProcessTypeDAC getProcessTypeDAC()
	{
		return processTypeDAC;
	}
	/**
	 * Sets the process type dac.
	 * 
	 * @param processTypeDAC the new process type dac
	 */
	public void setProcessTypeDAC(IProcessTypeDAC processTypeDAC)
	{
		this.processTypeDAC = processTypeDAC;
	}
	/**
	 * Fetch process type by description.
	 * 
	 * @param processRequest the process request
	 * @return the internal results response
	 */
	@Override
	public InternalResultsResponse<ProcessType> fetchProcessTypeByDescription(ProcessRequest processRequest)
	{
		return getProcessTypeDAC().fetchProcessTypeByDescription(processRequest);
	}
	/*
	 * (non-Javadoc)
	 * @see
	 * com.sensus.dm.common.process.bcl.IProcessTypeBCL#fetchAllProcessCategory
/**
 * 회의관리를 처리하기 위한 Dao 구현 Class
 * @author 공통서비스 장동한
 * @since 2009.03.20
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  장동한          최초 생성
 *
 * </pre>
 */
@Repository("meetingManageDao")
public class MeetingManageDao extends EgovComAbstractDAO {
    /**
	 * 부서 목록을 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	public List<?> egovMeetingManageLisAuthorGroupPopup(ComDefaultVO searchVO){
		return list("MeetingManage.EgovMeetingManageLisAuthorGroupPopup", searchVO);
	}
    /**
	 * 아이디 목록을 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	public List<?> egovMeetingManageLisEmpLyrPopup(ComDefaultVO searchVO){
		return list("MeetingManage.EgovMeetingManageLisEmpLyrPopup", searchVO);
	}
    /**
	 * 회의정보 목록을 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Ex

	 */
	public List<?> selectMeetingManageList(ComDefaultVO searchVO){
		return list("MeetingManage.selectMeetingManage", searchVO);
	}
    /**
	 * 회의정보를 상세조회 한다.
	 * @param MeetingManageVO - 회정정보가 담김 VO
	 * @return List
	 * @throws Exception
	 */
	public List<?> selectMeetingManageDetail(MeetingManageVO meetingManageVO){
		return list("MeetingManage.selectMeetingManageDetail", meetingManageVO);
	}
    /**
	 * 회의정보를 목록 전체 건수를 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return int
	 * @throws Exception
	 */
	public int selectMeetingManageListCnt(ComDefaultVO searchVO){
		return (Integer)select("MeetingManage.selectMeetingManageCnt", searchVO);
	}
    /**
	 * 회의정보를 등록한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @throws Exception
	 */
	public void insertMeetingManage(MeetingManageVO meetingManageVO){
		insert("MeetingManage.insertMeetingManage", meetingManageVO);
	}
    /**
	 * 회의정보를 수정한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @throws Exception
	 */
	public void updateMeetingManage(Mee
/**
* @Author: KingZhao
*/
@Service("AutoManageManager")
public class AutoManageManagerImpl extends ManagerImpl implements AutoManageManager {
    private static Log log = LogFactory.getLog(AutoManageManagerImpl.class);
    
    @Autowired
    private AutoManageDAO dao;
    public void setAutoManageDAO(AutoManageDAO dao) {
        this.dao = dao;
        super.setDao(dao);
    }
    public AutoManage initialize(AutoManage obj) {
        if (obj != null && !Hibernate.isInitialized(obj)) {
            obj = dao.getAutoManage(obj.getId());
        }
        return obj;
    }
    public List<AutoManage> getAutoManageList(int firstRow, int maxRow) {
        List list = getList(firstRow, maxRow);
        return (List<AutoManage>)list;
    }
    public int getAutoManageCount(Criteria criteria) {
        return getCount(criteria);
    }
    public List<AutoManage> getAutoManageList(Criteria criteria) {
        List list = getList(criteria);
        return (List<AutoManage>)list;
    }
    publ
public class HandlerControl
	public static HandlerControl handlerControl = null;
	private Handler handler = null;
	private ArrayList<HandlerListener> arrayList = new ArrayList<HandlerListener>();
	public static HandlerControl getHandlerControl()
	{
		return handlerControl;
	}
	public static HandlerControl getInstance()
	{
		if( handlerControl == null )
		{
			handlerControl = new HandlerControl();
		}
		return handlerControl;
	}
	private HandlerControl()
	{
		handler = new Handler() {
			
			@Override
			public void handleMessage(
					Message msg )
			{
				for( HandlerListener handlerListener : arrayList )
				{
					handlerListener.onTrigger( (TriggerInfo)msg.obj );
				}
				super.handleMessage( msg );
			}
		};
	}
	public void addHandlerListener(
			HandlerListener handlerListener )
	{
		arrayList.add( handlerListener );
	}
	public static interface HandlerListener
	{
		
		void onTrigger(
				TriggerInfo triggerInfo );
	}
	public void sendTrigger(TriggerInfo triggerInfo){
		Message
public interface LoginBarView extends View {
    void setUser(final UserDTO user, final String logoutUrl);
    void setLogin(final String url);
    void addCommunicationsButtonClickHandler(ClickHandler handler);
    void setCommunicationsButtonDisabled(boolean disabled);
    void addFleetSummaryButtonClickHandler(ClickHandler handler);
    void setFleetSummaryButtonDisabled(boolean disabled);
    void addLogoutButtonClickHandler(ClickHandler handler);
    void setLogoutButtonDisabled(boolean disabled);
    void addOpportunitiesButtonClickHandler(ClickHandler handler);
    void setOpportunitiesButtonDisabled(boolean disabled);
    void addProfileButtonClickHandler(ClickHandler handler);
    void setProfileButtonDisabled(boolean disabled);
    void addAboutButtonClickHandler(ClickHandler handler);
    void addNewCaptainWizardButtonClickHandler(com.smartgwt.client.widgets.menu.events.ClickHandler handler);
    void addAddSuperCaptainButtonClickHandler(com.smartgwt.client.widgets.menu.even

    void addPrimerButtonClickHandler(ClickHandler handler);
    void addSetUserAsNewMenuClickHandler(com.smartgwt.client.widgets.menu.events.ClickHandler handler);
    void addViewSolarSystem1049MenuClickHandler(com.smartgwt.client.widgets.menu.events.ClickHandler handler);
    void addRemoveAllUsersMenuClickHandler(com.smartgwt.client.widgets.menu.events.ClickHandler handler);
    void addRemoveAllSunsMenuClickHandler(com.smartgwt.client.widgets.menu.events.ClickHandler handler);
    void addRemoveAllSolarSystemsMenuClickHandler(com.smartgwt.client.widgets.menu.events.ClickHandler handler);
    void addRemoveAllShipTypesMenuClickHandler(com.smartgwt.client.widgets.menu.events.ClickHandler handler);
    void addRemoveAllShipsMenuClickHandler(com.smartgwt.client.widgets.menu.events.ClickHandler handler);
    void addRemoveAllPlanetsMenuClickHandler(com.smartgwt.client.widgets.menu.events.ClickHandler handler);
    void addRemoveAllMarketsMenuClickHandler(com.smartgwt.client.widgets.men

    void addRemoveAllJumpGatesMenuClickHandler(com.smartgwt.client.widgets.menu.events.ClickHandler handler);
    void addRemoveAllJobsMenuClickHandler(com.smartgwt.client.widgets.menu.events.ClickHandler handler);
    void addRemoveAllGameEventsMenuClickHandler(com.smartgwt.client.widgets.menu.events.ClickHandler handler);
    void addRemoveAllClosestMenuClickHandler(com.smartgwt.client.widgets.menu.events.ClickHandler handler);
    void addRemoveAllCaptainsMenuClickHandler(com.smartgwt.client.widgets.menu.events.ClickHandler handler);
    void addManageUsersMenuClickHandler(com.smartgwt.client.widgets.menu.events.ClickHandler handler);
    void addManageSunsMenuClickHandler(com.smartgwt.client.widgets.menu.events.ClickHandler handler);
    void addManageSolarSystemsMenuClickHandler(com.smartgwt.client.widgets.menu.events.ClickHandler handler);
    void addManageShipTypesMenuClickHandler(com.smartgwt.client.widgets.menu.events.ClickHandler handler);
    void addManageShipsMenuClickHa
/**
 * 권한별 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성
 *
 * </pre>
 */
@Repository("authorRoleManageDAO")
public class AuthorRoleManageDAO extends EgovAbstractDAO {
	/**
	 * 권한 롤 관계정보를 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return AuthorRoleManageVO
	 * @exception Exception
	 */
	public AuthorRoleManageVO selectAuthorRole(AuthorRoleManageVO authorRoleManageVO) throws Exception {
		return (AuthorRoleManageVO) select("authorRoleManageDAO.selectAuthorRole", authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보 목록 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return List<AuthorRoleManageVO>
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<AuthorRoleManageVO> selectAutho

		return (List<AuthorRoleManageVO>) list("authorRoleManageDAO.selectAuthorRoleList", authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보를 화면에서 입력하여 입력항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void insertAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		insert("authorRoleManageDAO.insertAuthorRole", authorRoleManage);
	}
	/**
	 * 수정된 권한 롤 관계정보를 데이터베이스에 반영
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void updateAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		update("authorRoleManageDAO.updateAuthorRole", authorRoleManage);
	}
	/**
	 * 권한 롤 관계정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void deleteAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		delete("authorRoleManageDAO.deleteAuthorRole", authorRoleManage);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @param authorRoleManageVO AuthorRole
/*
 * Created on Dec 23, 2004
 */
/**
 * @author evren
 *
 */
public class SimpleProcessImpl extends ProcessImpl implements SimpleProcess {
    public SimpleProcessImpl(OWLIndividual ind) {
        super(ind);
    }
    /* (non-Javadoc)
     * @see org.mindswap.owls.process.SimpleProcess#getAtomicProcess()
     */
    public AtomicProcess getAtomicProcess() {
        return (AtomicProcess) getPropertyAs(OWLS.Process.realizedBy, AtomicProcess.class);
    }
    /* (non-Javadoc)
     * @see org.mindswap.owls.process.SimpleProcess#getCompositeProcess()
     */
    public CompositeProcess getCompositeProcess() {
        return (CompositeProcess) getPropertyAs(OWLS.Process.expandsTo, CompositeProcess.class);
    }
    /* (non-Javadoc)
     * @see org.mindswap.owls.process.SimpleProcess#setAtomicProcess(org.mindswap.owls.process.AtomicProcess)
     */
    public void setAtomicProcess(AtomicProcess process) {
        setProperty(OWLS.Process.realizedBy, process);
    }
    /* (non-Javadoc)
   
/** 
 * 약관관리에 대한 서비스 구현클래스를 정의한다
 * <p><b>NOTE:</b> 서비스에 선언 되어있는 메소드들의 구현 클래스로 데이터 접근 클래스의 메소드를 호출한다
 * 메소드들 중에는 parameter를 넘기는 메소드도 있고 넘기지 않는 메소드도 존재한다
 * @author 범정부통계포털 이관형 
 * @since 2011.06.27 
 * @version 1.0 
 * @see 
 * 
 * <pre> 
 *  == Modification Information) == 
 *   
 *     date         author                note 
 *  -----------    --------    --------------------------- 
 *   2011.06.27     이관형      최초 생성 
 * 
 * </pre> 
 */
@Service("stplatManageService")
public class StplatManageServiceImpl extends AbstractServiceImpl implements StplatManageService {
	/** stplatManageDAO 서비스 호출 */ 
	@Resource(name="stplatManageDAO")
    private StplatManageDAO stplatManageDAO;
    
	/**
     * 약관목록조회(stplatManageVO 검색조건에따라 약관목록을 조회)  
     * @param stplatManageVO
     * @return List 조회한 약관목록의 리스트
     * @throws Exception
     * @see stplatSe,stplatSeNm,stplatId,sysId,sysNm,stplatNm,stplatCn,stplatUseSe
     * @see TABLE NAME : TN_STPLAT
     */
	@SuppressWarnings("unchecked")
	public 

        return stplatManageDAO.selectStplatList(stplatManageVO);
	}
	/**
     * 약관목록의 총 갯수
     * @param stplatManageVO
     * @return int 조회한 목록의 리스트
     * @throws Exception
     * @see COUNT(*) totcnt 약관목록 총 갯수
     * @see TABLE NAME : TN_STPLAT
     */
	public int selectStplatListTotCnt(StplatManageVO stplatManageVO) throws Exception {
        return stplatManageDAO.selectStplatListTotCnt(stplatManageVO);
	}
	/**
	 * 약관등록 처리(stplatManageVO에 담겨있는 항목을 DB에 등록) 
	 * @param stplatManageVO
	 * @throws Exception
	 * @see TABLE NAME : TN_STPLAT
	 */
	public void insertStplat(StplatManageVO stplatManageVO) throws Exception {
		stplatManageDAO.insertStplat(stplatManageVO);    	
	}
	/**
	 * 약관목록수정처리
	 * @param stplatManageVO
	 * @throws Exception
	 * @see TABLE NAME : TN_STPLAT
	 */
	public void updateStplat(StplatManageVO stplatManageVO) throws Exception {
    	stplatManageDAO.updateStplat(stplatManageVO);    	
	}
	/**
	 * 약관목록 상세
	 * @param stplatManageVO
	 * @return StplatManageVO
	 * @th
@SuppressWarnings("unchecked")
public class ServiceDAOImpl {
	@Autowired
	private HibernateTemplate template;
	public void setTemplate(HibernateTemplate template) {
		this.template = template;
	}
	public long addService(Service service) {
		
		service.setCreatedBy(String.valueOf(service.getReqUserId()));
		service.setUpdatedBy(String.valueOf(service.getReqUserId()));
		service.setCreatedOn(new Timestamp(new java.util.Date().getTime()));
		service.setUpdatedOn(new Timestamp(new java.util.Date().getTime()));
		
		
		template.save(service);
		return service.getServiceId();
	}
	public List<Service> getAllServices(Service service) {
		List<Service> serviceList = (List<Service>) template.find("from Service");
		return serviceList;
	}
	public List<Service> findServiceById(int serviceId) {
		List<Service> serviceList = (List<Service>) template.find("from Service where serviceId = ?",serviceId);
		return serviceList;
	}
	public List<Service> findServiceByRequestedUserId(int reqUserId) {
		List<
/**
 * 
 */
/**
 * Fábrica de serviços de negocio.
 * 
 * @author eduardo
 * 
 */
@Local
public interface ServiceFactory extends GenericServiceFactory {
	/**
	 * Cria uma nova instancia de {@link ClienteService}.
	 * 
	 * @return
	 */
	ClienteService getClienteService();
	/**
	 * Cria uma nova instancia de {@link TipoTagService}.
	 * 
	 * @return
	 */
	TipoTagService getTipoTagService();
	/**
	 * Cria uma nova instancia de {@link IdiomaService}.
	 * 
	 * @return
	 */
	IdiomaService getIdiomaService();
	/**
	 * Cria uma nova instancia de {@link PacoteService}.
	 * 
	 * @return
	 */
	PacoteService getPacoteService();
	/**
	 * Cria uma nova instancia de {@link TagService}.
	 * 
	 * @return
	 */
	TagService getTagService();
	/**
	 * Cria uma nova instancia de {@link TermoAdesaoService}.
	 * 
	 * @return
	 */
	TermoAdesaoService getTermoAdesaoService();
	/**
	 * Cria uma nova instancia de {@link CapituloService}.
	 * 
	 * @return
	 */
	CapituloService getCapituloService();
	/**
	 * Cria uma

	 * 
	 * @return
	 */
	ConteudoService getConteudoService();
	/**
	 * Cria uma nova instancia de {@link TagViewService}.
	 * 
	 * @return
	 */
	TagViewService getTagViewService();
	/**
	 * Cria uma nova instancia de {@link PedidoService}.
	 * 
	 * @return
	 */
	PedidoService getPedidoService();
	/**
	 * Cria uma nova instancia de {@link PagamentoService}.
	 * 
	 * @return
	 */
	PagamentoService getPagamentoService();
	/**
	 * Cria uma nova instancia de {@link FornecedorService}.
	 * 
	 * @return
	 */
	FornecedorService getFornecedorService();
	/**
	 * Cria uma nova instancia de {@link EncomendaService}.
	 * 
	 * @return
	 */
	EncomendaService getEncomendaService();
	/**
	 * Cria uma nova instancia de {@link EntregaService}.
	 * 
	 * @return
	 */
	EntregaService getEntregaService();
	/**
	 * Cria uma nova instancia de {@link VendaService}.
	 * 
	 * @return
	 */
	VendaService getVendaService();
	/**
	 * Cria uma nova instancia de {@link FreteService}.
	 * 
	 * @return
	 */
	FreteService
/**********************************************************************************
 * $Id: RepositoryManager.java 59673 2009-04-03 23:02:03Z arwhyte@umich.edu $
 **********************************************************************************
 *
 * Copyright (c) 2003, 2004, 2005, 2007, 2008 The Sakai Foundation
 *
 * Licensed under the Educational Community License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 **********************************************************************************/
public abstract class RepositoryManager
implements org.osid.repository.Re

    public org.osid.OsidContext getOsidContext()
    throws org.osid.repository.RepositoryException
    {
	 		throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
   }
    public void assignOsidContext(org.osid.OsidContext context)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void assignConfiguration(java.util.Properties configuration)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Repository createRepository(String displayName
                                                         , String description
                                                         , org.osid.shared.Type repositoryType)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.Reposit

    }
    public void deleteRepository(org.osid.shared.Id repositoryId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RepositoryIterator getRepositories()
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RepositoryIterator getRepositoriesByType(org.osid.shared.Type repositoryType)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Repository getRepository(org.osid.shared.Id repositoryId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset getA

    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset getAssetByDate(org.osid.shared.Id assetId
                                                  , long date)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.LongValueIterator getAssetDates(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.AssetIterator getAssetsBySearch(org.osid.repository.Repository[] repositories
                                                             , java.io.Serializable searchCriteria
                                                             , org.osid.shared.Type searchType
  
/**
 * 処理手順項目 composite-id クラス.
 * 
 * @author generated by ERMaster
 * @version $Id$
 */
public class ProcessStepItemId implements Serializable {
	/** serialVersionUID. */
	private static final long serialVersionUID = 1L;
	/** 画面. */
	private Screen screen;
	/** 処理. */
	private Process process;
	/** 処理手順. */
	private ProcessStep processStep;
	/** 処理手順項目編集. */
	private ProcessStepItemEdit processStepItemEdit;
	/** 処理項目種別. */
	private ProcessItemType processItemType;
	/** 処理項目. */
	private ProcessItem processItem;
	/**
	 * コンストラクタ.
	 */
	public ProcessStepItemId() {
	}
	/**
	 * 画面 を設定します.
	 * 
	 * @param screen
	 *            画面
	 */
	public void setScreen(Screen screen) {
		this.screen = screen;
	}
	/**
	 * 画面 を取得します.
	 * 
	 * @return 画面
	 */
	public Screen getScreen() {
		return this.screen;
	}
	/**
	 * 処理 を設定します.
	 * 
	 * @param process
	 *            処理
	 */
	public void setProcess(Process process) {
		this.process = process;
	}
	/**
	 * 処理 を取得します.
	 * 
	 * @return 処理
	 */
	public P

		return this.process;
	}
	/**
	 * 処理手順 を設定します.
	 * 
	 * @param processStep
	 *            処理手順
	 */
	public void setProcessStep(ProcessStep processStep) {
		this.processStep = processStep;
	}
	/**
	 * 処理手順 を取得します.
	 * 
	 * @return 処理手順
	 */
	public ProcessStep getProcessStep() {
		return this.processStep;
	}
	/**
	 * 処理手順項目編集 を設定します.
	 * 
	 * @param processStepItemEdit
	 *            処理手順項目編集
	 */
	public void setProcessStepItemEdit(ProcessStepItemEdit processStepItemEdit) {
		this.processStepItemEdit = processStepItemEdit;
	}
	/**
	 * 処理手順項目編集 を取得します.
	 * 
	 * @return 処理手順項目編集
	 */
	public ProcessStepItemEdit getProcessStepItemEdit() {
		return this.processStepItemEdit;
	}
	/**
	 * 処理項目種別 を設定します.
	 * 
	 * @param processItemType
	 *            処理項目種別
	 */
	public void setProcessItemType(ProcessItemType processItemType) {
		this.processItemType = processItemType;
	}
	/**
	 * 処理項目種別 を取得します.
	 * 
	 * @return 処理項目種別
	 */
	public ProcessItemType getProcessItemType() {
		return this.proces

	}
	/**
	 * 処理項目 を設定します.
	 * 
	 * @param processItem
	 *            処理項目
	 */
	public void setProcessItem(ProcessItem processItem) {
		this.processItem = processItem;
	}
	/**
	 * 処理項目 を取得します.
	 * 
	 * @return 処理項目
	 */
	public ProcessItem getProcessItem() {
		return this.processItem;
	}
	/**
	 * {@inheritDoc}
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((screen == null) ? 0 : screen.hashCode());
		result = prime * result + ((process == null) ? 0 : process.hashCode());
		result = prime * result + ((processStep == null) ? 0 : processStep.hashCode());
		result = prime * result + ((processStepItemEdit == null) ? 0 : processStepItemEdit.hashCode());
		result = prime * result + ((processItemType == null) ? 0 : processItemType.hashCode());
		result = prime * result + ((processItem == null) ? 0 : processItem.hashCode());
		return result;
	}
	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean equals(Object obj) {
		if (this 

			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		ProcessStepItemId other = (ProcessStepItemId) obj;
		if (screen == null) {
			if (other.screen != null) {
				return false;
			}
		} else if (!screen.equals(other.screen)) {
			return false;
		}
		if (process == null) {
			if (other.process != null) {
				return false;
			}
		} else if (!process.equals(other.process)) {
			return false;
		}
		if (processStep == null) {
			if (other.processStep != null) {
				return false;
			}
		} else if (!processStep.equals(other.processStep)) {
			return false;
		}
		if (processStepItemEdit == null) {
			if (other.processStepItemEdit != null) {
				return false;
			}
		} else if (!processStepItemEdit.equals(other.processStepItemEdit)) {
			return false;
		}
		if (processItemType == null) {
			if (other.processItemType != null) {
				return false;
			}
		} else if (!processItemType.equals(other.processItemType)) {
			return fals
@Service("egovDeptManageService")
public class EgovDeptManageServiceImpl extends AbstractServiceImpl implements EgovDeptManageService {
	@Resource(name="deptManageDAO")
    private DeptManageDAO deptManageDAO;
	/**
	 * 부서를 관리하기 위해 등록된 부서목록을 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return List - 부서 목록
	 * 
	 * @param deptManageVO
	 */
	public List<DeptManageVO> selectDeptManageList(DeptManageVO deptManageVO) throws Exception {
		return deptManageDAO.selectDeptManageList(deptManageVO);
	}
	/**
	 * 부서목록 총 갯수를 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return int - 부서 카운트 수
	 * 
	 * @param deptManageVO
	 */
	public int selectDeptManageListTotCnt(DeptManageVO deptManageVO) throws Exception {
		return deptManageDAO.selectDeptManageListTotCnt(deptManageVO);
	}
	/**
	 * 등록된 부서의 상세정보를 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return deptManageVO - 부서 Vo
	 * 
	 * @param deptManageVO
	 */
	public DeptManageVO selectDeptManage(DeptManageVO deptManageVO) throws Exception {
		return deptManageDAO
public class PushHandlerImpl implements PushHandler
	private Map<String, PushHandler> handlers = new HashMap<String, PushHandler>();
	private boolean isClosed = false;
	public PushHandlerImpl()
	{
		handlers.put(Actions.StatusChangedHandler, new StatusChangedHandler());
		handlers.put(Actions.DeleteFriendHandler, new DeleteFriendHandler());
		handlers.put(Actions.ReceiveMsgHandler, new ReceiveMsgHandler());
		handlers.put(Actions.ReceiveWarnMsgHandler, new ReceiveWarnMsgHandler());
		handlers.put(Actions.RequestFriendHandler, new RequestFriendHandler());
		handlers.put(Actions.RequestFriendResultHandler, new RequestFriendResultHandler());
		handlers.put(Actions.ExitHandler, new ExitHandler());
		handlers.put(Actions.ReceiveFileHandler, new ReceiveFileHandler());
		handlers.put(Actions.TrembleHandler, new TrembleHandler());
		
		handlers.put(Actions.ReceiveFlockMsgHandler, new ReceiveFlockMsgHandler());
		handlers.put(Actions.ReceiveFlockFileHandler, new ReceiveFlockFileHandler());
		ha
@Service
@Transactional(readOnly = true)
public class BbsManageService {
  
  @Autowired
  private BbsManageMapper bbsManageMapper;
  
  @Autowired
  private CommonService commsonService;
  /*
  @Autowired
  private QueryDao queryDao;
  public List<BbsManageVO> selectBbsManageList() {
    return queryDao.selectList("BbsManageMapper.selectBbsManageList");
  }
  public int insertBbsManage(BbsManage bbsManage) {
    Long bbsId = (Long) commsonService.selectNextId("BBS_ID");
    bbsManage.setBbsId(bbsId);
    return queryDao.insert("BbsManageMapper.insertBbsManage", bbsManage);
  }
  public BbsManage selectBbsManage(String bbsId) {
    return queryDao.selectOne("BbsManageMapper.selectBbsManage", bbsId);
  }
  
  public int updateBbsManage(BbsManage bbsManage) {
    return queryDao.update("BbsManageMapper.updateBbsManage", bbsManage);
  }
   */
  public List<BbsManageVO> selectBbsManageList() {
    return bbsManageMapper.selectBbsManageList();
  }
  public int insertBbsManage(BbsManage bbsM
/*
 *
 *
 * The program is available in open source according to the GNU Affero
 * General Public License. All contributions in this program are covered
 * by the Geomajas Contributors License Agreement. For full licensing
 * details, see LICENSE.txt in the project root.
 */
/**
 * Event bus with convenience methods for registering handlers to a specific map.
 * 
 * @author Jan De Moerloose
 * @since 2.0.0
 */
@Api(allMethods = true)
public interface MapEventBus {
	/**
	 * Add a feature selection handler.
	 * 
	 * @param handler the handler
	 * @return the handler registration
	 */
	HandlerRegistration addFeatureSelectionHandler(FeatureSelectionHandler handler);
	/**
	 * Add a feature selection handler for a specific layer.
	 * 
	 * @param handler the handler
	 * @param layer the layer
	 * @return the handler registration
	 */
	HandlerRegistration addFeatureSelectionHandler(FeatureSelectionHandler handler, Layer layer);
	/**
	 * Add a layer labeling handler.
	 * 
	 * @param handler the

	 * @return the handler registration
	 */
	HandlerRegistration addLayerLabeledHandler(LayerLabeledHandler handler);
	/**
	 * Add a layer labeling handler for a specific layer.
	 * 
	 * @param handler the handler
	 * @param layer the layer
	 * @return the handler registration
	 */
	HandlerRegistration addLayerLabeledHandler(LayerLabeledHandler handler, Layer layer);
	/**
	 * Add a layer order handler.
	 * 
	 * @param handler the handler
	 * @return the handler registration
	 */
	HandlerRegistration addLayerOrderChangedHandler(LayerOrderChangedHandler handler);
	/**
	 * Add a layer refresh handler.
	 * 
	 * @param handler the handler
	 * @return the handler registration
	 */
	HandlerRegistration addLayerRefreshedHandler(LayerRefreshedHandler handler);
	/**
	 * Add a layer refresh handler for a specific layer.
	 * 
	 * @param handler the handler
	 * @param layer the layer
	 * @return the handler registration
	 */
	HandlerRegistration addLayerRefreshedHandler(LayerRefreshedHandler handler

	/**
	 * Add a layer selection handler.
	 * 
	 * @param handler the handler
	 * @return the handler registration
	 */
	HandlerRegistration addLayerSelectionHandler(LayerSelectionHandler handler);
	/**
	 * Add a layer selection handler for a specific layer.
	 * 
	 * @param handler the handler
	 * @param layer the layer
	 * @return the handler registration
	 */
	HandlerRegistration addLayerSelectionHandler(LayerSelectionHandler handler, Layer layer);
	/**
	 * Add a layer style change handler.
	 * 
	 * @param handler the handler
	 * @return the handler registration
	 */
	HandlerRegistration addLayerStyleChangedHandler(LayerStyleChangedHandler handler);
	/**
	 * Add a layer style change handler for a specific layer.
	 * 
	 * @param handler the handler
	 * @param layer the layer
	 * @return the handler registration
	 */
	HandlerRegistration addLayerStyleChangedHandler(LayerStyleChangedHandler handler, Layer layer);
	/**
	 * Add a layer visibility handler.
	 * 
	 * @param handler the handle

	 * @return the handler registration
	 */
	HandlerRegistration addLayerVisibilityHandler(LayerVisibilityHandler handler);
	/**
	 * Add a layer visibility handler for a specific layer.
	 * 
	 * @param handler the handler
	 * @param layer the layer
	 * @return the handler registration
	 */
	HandlerRegistration addLayerVisibilityHandler(LayerVisibilityHandler handler, Layer layer);
	/**
	 * Add a map composition selection handler.
	 * 
	 * @param handler the handler
	 * @return the handler registration
	 */
	HandlerRegistration addMapCompositionHandler(MapCompositionHandler handler);
	/**
	 * Add a map initialization handler.
	 * 
	 * @param handler the handler
	 * @return the handler registration
	 */
	HandlerRegistration addMapInitializationHandler(MapInitializationHandler handler);
	/**
	 * Add a map resize handler.
	 * 
	 * @param handler the handler
	 * @return the handler registration
	 */
	HandlerRegistration addMapResizedHandler(MapResizedHandler handler);
	/**
	 * Add a viewport

	 * 
	 * @param handler the handler
	 * @return the handler registration
	 */
	HandlerRegistration addViewPortChangedHandler(ViewPortChangedHandler handler);
	/**
	 * Add a handler that listens to navigation start events.
	 * 
	 * @param handler The handler.
	 * @return The handler registration.
	 */
	HandlerRegistration addNavigationStartHandler(NavigationStartHandler handler);
	/**
	 * Add a handler that listens to navigation start events.
	 * 
	 * @param handler The handler.
	 * @return The handler registration.
	 */
	HandlerRegistration addNavigationUpdateHandler(NavigationUpdateHandler handler);
	/**
	 * Add a handler that listens to navigation start events.
	 * 
	 * @param handler The handler.
	 * @return The handler registration.
	 */
	HandlerRegistration addNavigationStopHandler(NavigationStopHandler handler);
	/**
	 * Add a handler of this type to the map.
	 *
	 * @param type type of handler
	 * @param handler handler
	 * @return the handler registration
	 */
	<H> HandlerRegi
public class ServicePanel extends JPanel {
	private EditHandler editHandler;
	private CutHandler cutHandler;
	private InvoiceHandler invoiceHandler;
	private GoldmarkHandler goldmarkHandler;
	private ESupplyHandler eSupplyHandler;
	private NightlyReportEmailer nightlyReportEmailer;
	private ItemHistoryHandler itemHistoryHandler;
	/**
	 * Create the panel.
	 */
	public ServicePanel() {
		setPreferredSize(new Dimension(600, 550));
		setBorder(new MatteBorder(1, 1, 1, 1, new Color(0, 0, 0)));
		ServicePanelTitle titlePanel = new ServicePanelTitle();
		add(titlePanel);
		editHandler = new EditHandler();
		add(editHandler);
		cutHandler = new CutHandler();
		add(cutHandler);
		invoiceHandler = new InvoiceHandler();
		add(invoiceHandler);
		
		goldmarkHandler = new GoldmarkHandler();
		add(goldmarkHandler);
		
		eSupplyHandler = new ESupplyHandler();
		add(eSupplyHandler);
		nightlyReportEmailer = new NightlyReportEmailer();
		add(nightlyReportEmailer);
		itemHistoryHandler = new ItemHistory
/**
 * 권한별 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Service("authorRoleManageService")
public class AuthorRoleManageServiceImpl extends AbstractServiceImpl implements AuthorRoleManageService {
	@Resource(name="authorRoleManageDAO")
    private AuthorRoleManageDAO authorRoleManageDAO;
	/**
	 * 권한 롤 관계정보를 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return AuthorRoleManageVO
	 * @exception Exception
	 */
	public AuthorRoleManageVO selectAuthorRole(AuthorRoleManageVO authorRoleManageVO) throws Exception {
		return authorRoleManageDAO.selectAuthorRole(authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보 목록 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return List<AuthorRoleManageVO>
	 * @exception Exception
	 */
	public List<Auth

		return authorRoleManageDAO.selectAuthorRoleList(authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보를 화면에서 입력하여 입력항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void insertAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		authorRoleManageDAO.insertAuthorRole(authorRoleManage);
	}
	/**
	 * 수정된 권한 롤 관계정보를 데이터베이스에 반영
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void updateAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		authorRoleManageDAO.updateAuthorRole(authorRoleManage);
	}
	/**
	 * 권한 롤 관계정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void deleteAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		authorRoleManageDAO.deleteAuthorRole(authorRoleManage);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return int
	 * @exception Exception
	 */
	public in
public class ProcessTreeWatchDog extends ExecuteWatchdog {
	public ProcessTreeWatchDog(long timeout) {
		super(timeout);
	}
	public ProcessTreeWatchDog(long timeout, Logger log) {
		super(timeout);
		this.log = log;
	}
	private Logger log;
	private Process rootProcess;
	public Process getRootProcess() {
		return rootProcess;
	}
	private int pid;
	@Override
	public synchronized void start(final Process processToMonitor) {
		rootProcess = processToMonitor;
		pid = CommonUtils.getPid(processToMonitor);
		super.start(processToMonitor);
		if(log != null) {
			log.info("start monitor process:"+ pid);
		}
	}
	@Override
	public void destroyProcess() {
		if(log != null) {
			log.info("begin to destroy process:"+ pid);
		}
		try {
			if (rootProcess != null) {
				CommonUtils.killProcess(pid, true, log);
			}
		} catch (Throwable e) {
			e.printStackTrace();
			log.error("kill process failed.pid:" + pid, e);
		}
		try {
			super.destroyProcess();
		} catch (Throwable e) {
			e.printStackTrace();
/**********************************************************************************
 * $Id: Repository.java 59673 2009-04-03 23:02:03Z arwhyte@umich.edu $
 **********************************************************************************
 *
 * Copyright (c) 2003, 2004, 2005, 2007, 2008 The Sakai Foundation
 *
 * Licensed under the Educational Community License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 **********************************************************************************/
public abstract class Repository
implements org.osid.repository.Repository
    p

    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void updateDisplayName(String displayName)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public String getDescription()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void updateDescription(String description)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Id getId()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Type getType(

    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset createAsset(String displayName
                                               , String description
                                               , org.osid.shared.Type assetType)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void deleteAsset(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.AssetIterator getAssets()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.AssetIterator 

    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.TypeIterator getAssetTypes()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RecordStructureIterator getRecordStructures()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RecordStructureIterator getMandatoryRecordStructures(org.osid.shared.Type assetType)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.TypeIterator getSearchTypes()
    throws org.osid.repository.RepositoryException
    {
		  throw ne

    }
    public org.osid.shared.TypeIterator getStatusTypes()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Type getStatus(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public boolean validateAsset(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void invalidateAsset(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset getAsset(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryExcept

    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset getAssetByDate(org.osid.shared.Id assetId
                                                  , long date)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.LongValueIterator getAssetDates(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.AssetIterator getAssetsBySearch(java.io.Serializable searchCriteria
                                                             , org.osid.shared.Type searchType
                                                             , org.osid.shared.Properties searchProperties)
    throws org.osid.repository.RepositoryException


		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Id copyAsset(org.osid.repository.Asset asset)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RecordStructureIterator getRecordStructuresByType(org.osid.shared.Type recordStructureType)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.PropertiesIterator getProperties()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Properties getPropertiesByType(org.osid.shared.Type propertiesType)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid
/**
 * 권한별 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성 
 *
 * </pre>
 */
@Service("egovAuthorRoleManageService")
public class EgovAuthorRoleManageServiceImpl extends EgovAbstractServiceImpl implements EgovAuthorRoleManageService {
	@Resource(name="authorRoleManageDAO")
    private AuthorRoleManageDAO authorRoleManageDAO;
	/**
	 * 권한 롤 관계정보를 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return AuthorRoleManageVO
	 * @exception Exception
	 */
	public AuthorRoleManageVO selectAuthorRole(AuthorRoleManageVO authorRoleManageVO) throws Exception {
		return authorRoleManageDAO.selectAuthorRole(authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보 목록 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return Li

	 * @exception Exception
	 */
	public List<AuthorRoleManageVO> selectAuthorRoleList(AuthorRoleManageVO authorRoleManageVO) throws Exception {
		return authorRoleManageDAO.selectAuthorRoleList(authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보를 화면에서 입력하여 입력항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void insertAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		authorRoleManageDAO.insertAuthorRole(authorRoleManage);
	}
	/**
	 * 수정된 권한 롤 관계정보를 데이터베이스에 반영
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void updateAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		authorRoleManageDAO.updateAuthorRole(authorRoleManage);
	}
	/**
	 * 권한 롤 관계정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void deleteAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		authorRoleManageDAO.deleteAuthorRole(authorRoleMa
/**
 * 권한관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Repository("authorManageDAO")
public class AuthorManageDAO extends EgovComAbstractDAO {
    /**
	 * 권한목록을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return List<AuthorManageVO>
	 * @exception Exception
	 */
    @SuppressWarnings("unchecked")
	public List<AuthorManageVO> selectAuthorList(AuthorManageVO authorManageVO) throws Exception {
        return (List<AuthorManageVO>) list("authorManageDAO.selectAuthorList", authorManageVO);
    }
	/**
	 * 권한을 등록한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void insertAuthor(AuthorManage authorManage) throws Exception {
        insert("authorManageDAO.insertAuthor", authorManage);
    }
    /**
	 * 권한을 수정한다.
	 

	 * @exception Exception
	 */
    public void updateAuthor(AuthorManage authorManage) throws Exception {
        update("authorManageDAO.updateAuthor", authorManage);
    }
    /**
	 * 권한을 삭제한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void deleteAuthor(AuthorManage authorManage) throws Exception {
        delete("authorManageDAO.deleteAuthor", authorManage);
    }
    /**
	 * 권한을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return AuthorManageVO
	 * @exception Exception
	 */
    public AuthorManageVO selectAuthor(AuthorManageVO authorManageVO) throws Exception {
        return (AuthorManageVO) select("authorManageDAO.selectAuthor", authorManageVO);
    }
    /**
	 * 권한목록 총 갯수를 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectAuthorListTotCnt(AuthorManageVO authorManageVO)  throws Exception {
        return (Integer)select("authorManageDAO.selectAuthorListTotCnt", authorManageV
public class ProcessPersisterNutzImpl extends AbsPersisterNutzImpl implements
		ProcessPersister {
	private static final Log log = LogFactory.getLog(ProcessPersisterNutzImpl.class);
		
	Map<ProcessKey,ProcessRepository> cache = new HashMap<ProcessKey,ProcessRepository>();
	private boolean useProcessCache = false;
	public boolean isUseProcessCache(){
		return useProcessCache;
	}
	public void setUseProcessCache(boolean b){
		this.useProcessCache = b;
	}
	public void deleteAllProcesses() {
		dao().clear(ProcessDescriptorImpl.class);
	}
	public ProcessRepository persistProcessToRepository(String processXml,
			ProcessDescriptor descriptor) {
		ProcessRepositoryImpl repository = (ProcessRepositoryImpl)descriptor.toProcessRepository();
		repository.setProcessContent(processXml);
		
		if (repository.getVersion()==null || repository.getVersion()<=0){
			int v = this.findTheLatestVersion(repository.getProcessId(), repository.getProcessType());
			repository.setVersion(v+1);
		}
		
		this.saveOr

		if (useProcessCache){
			this.cache(repository);
		}
		return repository;
	}
	public ProcessRepository findProcessRepositoryByProcessKey(
			ProcessKey processKey) throws InvalidModelException {
		Cnd cnd = Cnd
				.where(ProcessDescriptorProperty.PROCESS_ID.getPropertyName(),
						"=", processKey.getProcessId())
				.and(ProcessDescriptorProperty.PROCESS_TYPE.getPropertyName(),
						"=", processKey.getProcessType())
				.and(ProcessDescriptorProperty.VERSION.getPropertyName(), "=",
						processKey.getVersion());
		ProcessRepository repository = this.getFromCache(processKey);
		if (repository != null) {
			return repository;
		}
		repository = dao()
				.fetch(ProcessRepositoryImpl.class, cnd);
		if (repository != null) {
			try{
				RuntimeContext ctx = this.getPersistenceService().getRuntimeContext();				
				ProcessLanguageManager processUtil = ctx.getEngineModule(ProcessLanguageManager.class, processKey.getProcessType());
				String xml = repository.getProcessContent();
				S

				ByteArrayInputStream inStream = new ByteArrayInputStream(xml.getBytes(encoding));
				Object obj = processUtil.deserializeXml2Process(inStream);
				((ProcessRepositoryImpl)repository).setProcessObject(obj);
				
			}catch(UnsupportedEncodingException e){
				log.error(e);
			}
		}		
		return (ProcessRepository) repository;
	}
	public ProcessRepository findTheLatestVersionOfProcessRepository(
			String processId, String processType) throws InvalidModelException {
		int v = this.findTheLatestVersion(processId,processType) ;
		if (v==0){
			return null;
		}else{
			ProcessKey processKey = new ProcessKey(processId,v,processType);
			ProcessRepository repository = this.getFromCache(processKey);
			if (repository!=null) {
				return repository;
			}else{
				return this.findProcessRepositoryByProcessKey(new ProcessKey(processId,v,processType));
			}
		}
	}
	public String findProcessXml(ProcessKey processKey) {
		ProcessRepository repository;
		try {
			repository = this.findProcessRepo

			if (repository==null)return "";
			return repository.getProcessContent();
		} catch (InvalidModelException e) {
			e.printStackTrace();
		}
		return "";
	}
	public ProcessDescriptor findProcessDescriptorByProcessKey(
			ProcessKey processKey) {
		Cnd cnd = Cnd.where(ProcessDescriptorProperty.PROCESS_ID.getPropertyName(), "=", processKey.getProcessId())
					.and(ProcessDescriptorProperty.PROCESS_TYPE.getPropertyName(),"=",processKey.getProcessType())
					.and(ProcessDescriptorProperty.VERSION.getPropertyName(),"=",processKey.getVersion());
		
		ProcessRepository repository = this.getFromCache(processKey);
		if (repository!=null) {
			return repository;
		}
		ProcessDescriptor result = dao().fetch(ProcessDescriptorImpl.class, cnd);
		return (ProcessDescriptor)result;
	}
	public ProcessDescriptor findTheLatestVersionOfProcessDescriptor(
			String processId, String processType) {
		int v = this.findTheLatestVersion(processId,processType) ;
		if (v==0){
			return null;
		}else{
			Pro

			ProcessRepository repository = this.getFromCache(processKey);
			if (repository!=null) {
				return repository;
			}else{
				return this.findProcessDescriptorByProcessKey(new ProcessKey(processId,v,processType));
			}
		}
	}
	public int findTheLatestVersion(String processId, String processType) {
		Sql sql = Sqls.create("SELECT max(VERSION) FROM T_FF_DF_PROCESS_REPOSITORY WHERE PROCESS_ID=@processId and PROCESS_TYPE=@processType");
		sql.params().set("processId", processId);
		sql.params().set("processType", processType);
		
		sql.setCallback(Sqls.callback.integer());
		dao().execute(sql);
		try{
			int result = sql.getInt();
			return result;
		}catch(NullPointerException e){
			return 0;
		}
	}
	public int findTheLatestPublishedVersion(String processId,
			String processType) {
		Sql sql = Sqls.create("SELECT max(VERSION) FROM T_FF_DF_PROCESS_REPOSITORY WHERE PROCESS_ID=@processId and PROCESS_TYPE=@processType and PUBLISH_STATE=@publishState");
		sql.params().set("processId", pr

		sql.params().set("processType", processType);
		sql.params().set("publishState",  Boolean.TRUE);
		
		sql.setCallback(Sqls.callback.integer());
		dao().execute(sql);
		try{
			int result = sql.getInt();
			return result;
		}catch(NullPointerException e){
			return 0;
		}
		
	}
	@SuppressWarnings("unchecked")
	public Class getEntityClass4Runtime(Class interfaceClz){
		if (interfaceClz.isAssignableFrom(ProcessDescriptor.class)){
			return ProcessDescriptorImpl.class;
		}else if (interfaceClz.isAssignableFrom(ProcessRepository.class)){
			return ProcessRepositoryImpl.class;
		}
		return null;		
	}
	protected ProcessRepository getFromCache(ProcessKey key){
		if (this.isUseProcessCache()){
			return this.cache.get(key);
		}
		return null;
	}
	protected void cache(ProcessRepository processRepository){
		if (this.isUseProcessCache()) {
			ProcessKey pk = new ProcessKey(processRepository.getProcessId(),
					processRepository.getVersion(), processRepository
							.getProcessType());
			thi
public class ServiceDefinition {
	private String serviceName;
	private String serviceType;
	private String serviceProvider;
	private String serviceAction;
	private String serviceText;
	private String serviceInputMappings;
	private String serviceOutputMappings;
	private String serviceRoles;
	public String getServiceName() {
		return serviceName;
	}
	public void setServiceName(String serviceName) {
		this.serviceName = serviceName;
	}
	public String getServiceType() {
		return serviceType;
	}
	public void setServiceType(String serviceType) {
		this.serviceType = serviceType;
	}
	public String getServiceProvider() {
		return serviceProvider;
	}
	public void setServiceProvider(String serviceProvider) {
		this.serviceProvider = serviceProvider;
	}
	public String getServiceAction() {
		return serviceAction;
	}
	public void setServiceAction(String serviceAction) {
		this.serviceAction = serviceAction;
	}
	public String getServiceText() {
		return serviceText;
	}
	public void setServiceText(St
public class SchedulingAlgorithm {
  public static Results Run(int runtime, Vector <sProcess> processVector, Results result) {
    int i = 0;
    int comptime = 0;
    int currentProcess = 0;
    int previousProcess = 0;
    int size = processVector.size();
    int completed = 0;
    String resultsFile = "/Users/flystyle/Documents/Java Projects/L3.SPOS.Guaranteed Scheduler/src/Summary-Results";
    result.schedulingType = "Batch (Nonpreemptive)";
    result.schedulingName = "Guaranteed";
    try {
      PrintStream out = new PrintStream(new FileOutputStream(resultsFile));
      sProcess process = (sProcess) processVector.elementAt(currentProcess);
      out.println("Process: " + currentProcess + " registered... (" + process.cputime + " " + process.ioblocking + " " + process.cpudone + " " + process.cpudone + ")");
      while (comptime < runtime) {
        if (process.cpudone == process.cputime) {
          completed++;
          out.println("Process: " + currentProcess + " completed...

          if (completed == size) {
            result.compuTime = comptime;
            out.close();
            return result;
          }
          float val = Float.MAX_VALUE;
          int ratio = Integer.MAX_VALUE;
          float allRatio = runtime/processVector.size();
          for (int j = 0; j < processVector.size(); j++) {
            if (processVector.get(j).cputime - processVector.get(j).cpudone != 0)
              if(processVector.get(j).rating < ratio) {
                if (allRatio / (processVector.get(j).cputime - processVector.get(j).cpudone) < val) {
                    ratio = processVector.get(j).rating;
                    currentProcess = j;
                  }
                }
          }
          process = (sProcess) processVector.elementAt(currentProcess);
          out.println("Process: " + currentProcess + " registered... (" + process.cputime + " " + process.ioblocking + " " + process.cpudone + " " + process.cpudone + ")");
        }
        if (process.i

          out.println("Process: " + currentProcess + " I/O blocked... (" + process.cputime + " " + process.ioblocking + " " + process.cpudone + " " + process.cpudone + ")");
          process.numblocked++;
          process.ionext = 0;
          previousProcess = currentProcess;
          float val = Integer.MAX_VALUE;
          int ratio = Integer.MAX_VALUE;
          float allRatio = runtime/processVector.size();
          for (int j = 0; j < processVector.size(); j++) {
            if (processVector.get(j).cputime - processVector.get(j).cpudone != 0)
            if (allRatio/(processVector.get(j).cputime - processVector.get(j).cpudone) < val && previousProcess != j) {
              if(processVector.get(j).rating < ratio) {
                val = allRatio / (processVector.get(j).cputime - processVector.get(j).cpudone);
                  ratio = processVector.get(j).rating;
                  currentProcess = j;
                }
              }
            }
          process = (sProc
/**
 * Job지식관리에 관한 ServiceImpl 클래스
 * @jobKnwldg 배치운영환경 김지완
 * @since 2012.07.16
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2012.07.16  김지완          최초 생성
 *
 * </pre>
 */
@Service("egovJobKnwldgManageService")
public class EgovJobKnwldgManageServiceImpl extends EgovAbstractServiceImpl implements EgovJobKnwldgManageService {
    
	@Resource(name="jobKnwldgManageDAO")
    private JobKnwldgManageDAO jobKnwldgManageDAO;
	    
    /**
	 *JobKnwldg 목록 조회
	 * @param jobKnwldgManageVO JobKnwldgManageVO
	 * @return List<JobKnwldgManageVO>
	 * @exception Exception
	 */
    public List<JobKnwldgManageVO> selectJobKnwldgList(JobKnwldgManageVO jobKnwldgManageVO) throws Exception {
        return jobKnwldgManageDAO.selectJobKnwldgList(jobKnwldgManageVO);
    }
    
	/**
	 * JobKnwldg 등록
	 * @param jobKnwldgManage JobKnwldgManage
	 * @exception Exception
	 */
    public

    	jobKnwldgManageDAO.insertJobKnwldg(jobKnwldgManage);
    }
    /**
	 * JobKnwldg 수정
	 * @param jobKnwldgManage JobKnwldgManage
	 * @exception Exception
	 */
    public void updateJobKnwldg(JobKnwldgManage jobKnwldgManage) throws Exception {
    	jobKnwldgManageDAO.updateJobKnwldg(jobKnwldgManage);
    }
    /**
	 * JobKnwldg 삭제
	 * @param jobKnwldgManage JobKnwldgManage
	 * @exception Exception
	 */
    public void deleteJobKnwldg(JobKnwldgManage jobKnwldgManage) throws Exception {
    	jobKnwldgManageDAO.deleteJobKnwldg(jobKnwldgManage);
    	
    }
    /**
	 * JobKnwldg 조회
	 * @param jobKnwldgManageVO JobKnwldgManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectJobKnwldgListTotCnt(JobKnwldgManageVO jobKnwldgManageVO) throws Exception {
        return jobKnwldgManageDAO.selectJobKnwldgListTotCnt(jobKnwldgManageVO);
    }
    /**
	 * JobKnwldg 조회
	 * @param jobKnwldgManageVO JobKnwldgManageVO
	 * @return JobKnwldgManageVO
	 * @exception Exception
	 */
    
/*
 * This class was automatically generated with 
 * XML Schema.
 * $Id$
 */
/**
 * 
 * 
 * @version $Revision$ $Date$
**/
public class ManageInfos extends IBody implements java.io.Serializable {
    private java.util.Vector _manageInfoList;
    public ManageInfos() {
        super();
        _manageInfoList = new Vector();
    /**
     * 
     * 
     * @param vManageInfo
    **/
    public void addManageInfo(ManageInfo vManageInfo)
        throws java.lang.IndexOutOfBoundsException
    {
        _manageInfoList.addElement(vManageInfo);
    /**
     * 
     * 
     * @param index
     * @param vManageInfo
    **/
    public void addManageInfo(int index, ManageInfo vManageInfo)
        throws java.lang.IndexOutOfBoundsException
    {
        _manageInfoList.insertElementAt(vManageInfo, index);
    /**
    **/
    public java.util.Enumeration enumerateManageInfo()
    {
        return _manageInfoList.elements();
    /**
     * 
     * 
     * @param index
    **/
    public ManageInfo 

        throws java.lang.IndexOutOfBoundsException
    {
        if ((index < 0) || (index > _manageInfoList.size())) {
            throw new IndexOutOfBoundsException();
        }
        
        return (ManageInfo) _manageInfoList.elementAt(index);
    /**
    **/
    public ManageInfo[] getManageInfo()
    {
        int size = _manageInfoList.size();
        ManageInfo[] mArray = new ManageInfo[size];
        for (int index = 0; index < size; index++) {
            mArray[index] = (ManageInfo) _manageInfoList.elementAt(index);
        }
        return mArray;
    /**
    **/
    public int getManageInfoCount()
    {
        return _manageInfoList.size();
    /**
    **/
    public void removeAllManageInfo()
    {
        _manageInfoList.removeAllElements();
    /**
     * 
     * 
     * @param index
    **/
    public ManageInfo removeManageInfo(int index)
    {
        java.lang.Object obj = _manageInfoList.elementAt(index);
        _manageInfoList.removeElementAt(index);
      
public class ProcessHandlerService {
	private BuildEnv buildEnv;
	private BuildLogger buildLogger;
	private ProcessService processService;
	public BuildEnv getBuildEnv() {
		return buildEnv;
	}
	public void setBuildEnv(BuildEnv buildEnv) {
		this.buildEnv = buildEnv;
	}
	public BuildLogger getBuildLogger() {
		return buildLogger;
	}
	public void setBuildLogger(BuildLogger buildLogger) {
		this.buildLogger = buildLogger;
	}
	public ProcessHandler applicationGetDetails(String applicationId) {
		ApplicationGetDetailsProcess applicationGetDetailsProcess = processService.applicationGetDetails();
		applicationGetDetailsProcess.incTestIteration();
		applicationGetDetailsProcess.setApplicationId(applicationId);
		
		ProcessHandler applicationGetDetailsProcessHandler = new ProcessHandler(applicationGetDetailsProcess, buildLogger);
		applicationGetDetailsProcessHandler.setBuildEnv(buildEnv);
		
		return applicationGetDetailsProcessHandler;
	}
	public Process deploymentProcess() {
		Process deplo

		return deploymentProcess;
	}
	public ProcessHandler deployment() {
		Process deploymentProcess = processService.deployment();
		
		ProcessHandler deployProcessHandler = new ProcessHandler(deploymentProcess, buildLogger);
		deployProcessHandler.setBuildEnv(buildEnv);
		
		return deployProcessHandler;
	}
	public ProcessHandler packaging() {
		PackagingProcess packagingProcess = processService.packaging();
		ProcessHandler processHandler = new ProcessHandler(packagingProcess, buildLogger);
		processHandler.setBuildEnv(buildEnv);
		
		return processHandler;
	}
	public ProcessService getProcessService() {
		return processService;
	}
	public void setProcessService(ProcessService processService) {
		this.processService = processService;
	}
	public ProcessHandler applicationGetStatus() {
		ApplicationGetStatusProcess applicationGetStatusProcess = processService.applicationGetStatus();
		applicationGetStatusProcess.incTestIteration();
		
		ProcessHandler applicationGetStatusProcessHandler = 

		applicationGetStatusProcessHandler.setBuildEnv(buildEnv);
		
		return applicationGetStatusProcessHandler;
	}
	public ProcessHandler rollback(String applicationId) {
		RollbackProcess rollbackProcess = processService.rollback();
		rollbackProcess.setApplicationId(applicationId);
		
		ProcessHandler rollbackProcessHandler = new ProcessHandler(rollbackProcess, buildLogger);
		rollbackProcessHandler.setBuildEnv(buildEnv);
		
		return rollbackProcessHandler;
	}
	public ProcessHandler monitorGetIssuesListPredefinedFilter(long from, long to, boolean periodBeforeDeployment) {
		MonitorGetIssuesListPredefinedFilterProcess process = processService.monitorGetIssuesListPredefinedFilterProcess();
		process.setFilterId("All Issues");
		process.setFrom(Long.toString(from));
		process.setTo(Long.toString(to));
		process.setPeriodBeforeDeployment(periodBeforeDeployment);
		
		ProcessHandler issuesListProcessHandler = new ProcessHandler(process, buildLogger);
		issuesListProcessHandler.setBuildEnv(bu
/**
 * 권한별 롤 관리에 관한 서비스 인터페이스 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성 
 *
 * </pre>
 */
public interface EgovAuthorRoleManageService {
	/**
	 * 권한 롤 관계정보를 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @exception Exception
	 */
	public AuthorRoleManageVO selectAuthorRole(AuthorRoleManageVO authorRoleManageVO) throws Exception;
	/**
	 * 권한 롤 관계정보 목록 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return List<AuthorRoleManageVO>
	 * @exception Exception
	 */
	public List<AuthorRoleManageVO> selectAuthorRoleList(AuthorRoleManageVO authorRoleManageVO) throws Exception;
	/**
	 * 권한 롤 관계정보를 화면에서 입력하여 입력항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	p
/*
 * Created on Dec 23, 2004
 */
/**
 * @author evren
 *
 */
public class SimpleProcessImpl extends ProcessImpl implements SimpleProcess {
    public SimpleProcessImpl(OWLIndividual ind) {
        super(ind);
    }
    /* (non-Javadoc)
     * @see org.mindswap.owls.process.SimpleProcess#getAtomicProcess()
     */
    public AtomicProcess getAtomicProcess() {
        return (AtomicProcess) getPropertyAs(OWLS.Process.realizedBy, AtomicProcess.class);
    }
    /* (non-Javadoc)
     * @see org.mindswap.owls.process.SimpleProcess#getCompositeProcess()
     */
    public CompositeProcess getCompositeProcess() {
        return (CompositeProcess) getPropertyAs(OWLS.Process.expandsTo, CompositeProcess.class);
    }
    /* (non-Javadoc)
     * @see org.mindswap.owls.process.SimpleProcess#setAtomicProcess(org.mindswap.owls.process.AtomicProcess)
     */
    public void setAtomicProcess(AtomicProcess process) {
        setProperty(OWLS.Process.realizedBy, process);
    }
    /* (non-Javadoc)
   
/**
 * 개요
 * - 회의실관리에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - 회의실관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 회의실관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Repository("mtgPlaceManageDAO")
public class MtgPlaceManageDAO extends EgovComAbstractDAO {
	/**
	 * 회의실관리정보를 관리하기 위해 등록된 회의실관리 목록을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return List - 회의실관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<MtgPlaceManageVO> selectMtgPlaceManageList(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
		return (List<MtgPlaceManageVO>) list("mtgPlaceManageDAO.selectMtgPlaceManageList", mtgPlaceManageVO);
	}
    /**
	 * 회의실관리목록 총 갯수를 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectMtgPlaceManageListTotCnt(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("mtgPlaceManageDAO.selectMtgPlaceManageListTotCnt", mtgP

    }
	/**
	 * 등록된 회의실관리의 상세정보를 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	public MtgPlaceManage selectMtgPlaceManage(MtgPlaceManageVO mtgPlaceManageVO)  throws Exception {
		return (MtgPlaceManage) selectByPk("mtgPlaceManageDAO.selectMtgPlaceManage", mtgPlaceManageVO);
	}
	/**
	 * 회의실관리정보를 신규로 등록한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void insertMtgPlaceManage(MtgPlaceManage mtgPlaceManage) throws Exception {
		insert("mtgPlaceManageDAO.insertMtgPlaceManage", mtgPlaceManage);
	}
	/**
	 * 기 등록된 회의실관리정보를 수정한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void updtMtgPlaceManage(MtgPlaceManage mtgPlaceManage) throws Exception {
		update("mtgPlaceManageDAO.updtMtgPlaceManage", mtgPlaceManage);
	}
	/**
	 * 기 등록된 회의실관리정보를 삭제한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void deleteMtgPlaceManage(MtgPlaceManage mtgPlaceManage) throws Exception {
        delete("mtgPlaceManageDAO.deleteMtgPlaceManage",mtgPlace

	}
	/******** 회의실 예약 관리 *************/
	/** 
	 * 회의실 ID 정보 목록을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return List - 회의실관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<MtgPlaceManageVO> selectMtgPlaceIDList(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
		return (List<MtgPlaceManageVO>) list("mtgPlaceManageDAO.selectMtgPlaceIDList", mtgPlaceManageVO);
	}
	/** 
	 * 회의실 예약정보를 관리하기 위해 등록된 회의실예약을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 목록
	 */
	public MtgPlaceManageVO selectMtgPlaceResveManageList(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
		return (MtgPlaceManageVO) selectByPk("mtgPlaceManageDAO.selectMtgPlaceResveManageList", mtgPlaceManageVO);
	}
	/**
	 * 회의실예약 신청화면을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	public MtgPlaceManageVO selectMtgPlaceResve(MtgPlaceManageVO mtgPlaceManageVO)  throws Exception {
		return (MtgPlaceManageVO) selectByPk("mtgPlaceManageDA

	}
	/**
	 * 등록된 회의실예약 상세정보를 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	public MtgPlaceManageVO selectMtgPlaceResveDetail(MtgPlaceManageVO mtgPlaceManageVO)  throws Exception {
		return (MtgPlaceManageVO) selectByPk("mtgPlaceManageDAO.selectMtgPlaceResveDetail", mtgPlaceManageVO);
	}
	/**
	 * 회의실예약 정보를 신규로 등록한다.
	 * @param mtgPlaceResve - 회의실예약 model
	 */
	public void insertMtgPlaceResve(MtgPlaceResve mtgPlaceResve) throws Exception {
		insert("mtgPlaceManageDAO.insertMtgPlaceResve", mtgPlaceResve);
	}
	/**
	 * 기 등록된 회의실예약 정보를 수정한다.
	 * @param mtgPlaceResve - 회의실예약 model
	 */
	public void updtMtgPlaceResve(MtgPlaceResve mtgPlaceResve) throws Exception {
		update("mtgPlaceManageDAO.updtMtgPlaceResve", mtgPlaceResve);
	}
	/**
	 * 기 등록된 회의실예약 정보를 삭제한다.
	 * @param mtgPlaceResve - 회의실예약 model
	 */
	public void deleteMtgPlaceResve(MtgPlaceResve mtgPlaceResve) throws Exception {
        delete("mtgPlaceManageDAO.deleteMtgPlaceResve",mtgPlaceResv

	}	
	/**
	 * 회의실 중복여부 체크.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return int - 중복건수
	 */
	public int mtgPlaceResveDplactCeck(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
		return (Integer)getSqlMapClientTemplate().queryForObject("mtgPlaceManageDAO.mtgPlaceResveDplactCeck", mtgPlaceManageVO);
	}
	/******** 회의실 비품 관리 *************/
	/**
	 * 비품정보 목록을 조회한다
	 * @param fxtrsManageVO - 비품관리 VO
	 * @return List - 비품관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<MtgPlaceFxtrsVO> selectFxtrsManageList(MtgPlaceFxtrsVO mtgPlaceFxtrsVO) throws Exception {
		return (List<MtgPlaceFxtrsVO>) list("mtgPlaceManageDAO.selectFxtrsManageList", mtgPlaceFxtrsVO);
	}
	/**
	 * 회의실관리 비품정보를 신규로 등록한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void insertMtgPlaceFxtrs(MtgPlaceFxtrs mtgPlaceFxtrs) throws Exception {
		insert("mtgPlaceManageDAO.insertMtgPlaceFxtrs", mtgPlaceFxtrs);
	}
	/**
	 * 회의실관리 비품정보를 삭제한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void deleteMtgPlaceF
/**********************************************************************************
 * $Id: RepositoryManager.java 105079 2012-02-24 23:08:11Z ottenhoff@longsight.com $
 **********************************************************************************
 *
 * Copyright (c) 2003, 2004, 2005, 2007, 2008 The Sakai Foundation
 *
 * Licensed under the Educational Community License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 **********************************************************************************/
public abstract class RepositoryManager
implements org.osid.reposi

    public org.osid.OsidContext getOsidContext()
    throws org.osid.repository.RepositoryException
    {
	 		throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
   }
    public void assignOsidContext(org.osid.OsidContext context)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void assignConfiguration(java.util.Properties configuration)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Repository createRepository(String displayName
                                                         , String description
                                                         , org.osid.shared.Type repositoryType)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.Reposit

    }
    public void deleteRepository(org.osid.shared.Id repositoryId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RepositoryIterator getRepositories()
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RepositoryIterator getRepositoriesByType(org.osid.shared.Type repositoryType)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Repository getRepository(org.osid.shared.Id repositoryId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset getA

    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset getAssetByDate(org.osid.shared.Id assetId
                                                  , long date)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.LongValueIterator getAssetDates(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.AssetIterator getAssetsBySearch(org.osid.repository.Repository[] repositories
                                                             , java.io.Serializable searchCriteria
                                                             , org.osid.shared.Type searchType
  
/**
 * @author phn
 * @date 2015-5-27
 * @email 1016593477@qq.com
 * @TODO
 */
public class AuthorityInfo {
	/**
	 * 是否能够发布新闻
	 */
	private String publishNews;
	/**
	 * 能否管理新闻
	 */
	private String manageNews;
	/**
	 * 能否回复留言
	 */
	private String replyMessage;
	/**
	 * 能否管理留言
	 */
	private String manageMessage;
	/**
	 * 能否发布项目
	 */
	private String publishProject;
	/**
	 * 能否管理项目
	 */
	private String manageProject;
	/**
	 * 能够登录
	 */
	private String allowLogin;
	/**
	 * 能否管理成员
	 */
	private String manageMember;
	/**
	 * 能否管理管理员
	 */
	private String manageAdmin;
	public AuthorityInfo() {
		super();
	}
	public AuthorityInfo(Authority authority) {
		super();
		this.setAllowLogin(authority.isaAllowLogin());
		this.setManageAdmin(authority.isaManageAdmin());
		this.setManageMember(authority.isaManageMember());
		this.setManageMessage(authority.isaManageMessage());
		this.setManageNews(authority.isaManageNews());
		this.setManageProject(authority.isaManageProject());
		this.setPublishNews(auth

		this.setPublishProject(authority.isaPublishProject());
		this.setReplyMessage(authority.isaReplyMessage());
	}
	public String getPublishNews() {
		return publishNews;
	}
	public void setPublishNews(boolean publishNews) {
		if(publishNews){
			this.publishNews = "可以添加新闻动态";
		}else{
			this.publishNews = "不可以添加新闻动态";
		}
		
	}
	public String getManageNews() {
		return manageNews;
	}
	public void setManageNews(boolean manageNews) {
		if(manageNews){
			this.manageNews = "具备管理新闻权限";
		}else{
			this.manageNews = "不具备管理新闻权限";
		}
	}
	public String getReplyMessage() {
		return replyMessage;
	}
	public void setReplyMessage(boolean replyMessage) {
		if(replyMessage){
			this.replyMessage = "可以回复留言";
		}else{
			this.replyMessage = "不可以回复留言";
		}
		
	}
	public String getManageMessage() {
		return manageMessage;
	}
	public void setManageMessage(boolean manageMessage) {
		if(manageMessage){
			this.manageMessage = "具备管理留言权限";
		}else{
			this.manageMessage = "不具备管理留言权限";
		}
	}
	public String

		return publishProject;
	}
	public void setPublishProject(boolean publishProject) {
		if(publishProject){
			this.publishProject = "可以发布项目";
		}else{
			this.publishProject = "不可以发布项目";
		}
		
	}
	public String getManageProject() {
		return manageProject;
	}
	public void setManageProject(boolean manageProject) {
		if(manageProject){
			this.manageProject="具备管理项目权限";
		}else{
			this.manageProject="不具备管理项目权限";
		}
	}
	public String getAllowLogin() {
		return allowLogin;
	}
	public void setAllowLogin(boolean allowLogin) {
		if(allowLogin){
			this.allowLogin = "可以登录";
		}else{
			this.allowLogin = "禁止登录";
		}
	}
	public String getManageMember() {
		return manageMember;
	}
	public void setManageMember(boolean manageMember) {
		if(manageMember){
			this.manageMember = "普通管理员：可以管理普通用户";
		}else{
			this.manageMember = "无管理普通用户权限";
		}
	}
	public String getManageAdmin() {
		return manageAdmin;
	}
	public void setManageAdmin(boolean manageAdmin) {
		if(manageAdmin){
			this.manageAdmin = "高
public class WOProcess{
    
    long rowNumber;
    String processSequence;
    String processCode;
    String processName;
    String processDueDate;
    public WOProcess() {
    }
    /**
     * @return Returns the rowNumber.
     */
    public long getRowNumber() {
        return rowNumber;
    }
    /**
     * @param rowNumber The rowNumber to set.
     */
    public void setRowNumber(long rowNumber) {
        this.rowNumber = rowNumber;
    }
    /**
     * @return Returns the processCode.
     */
    public String getProcessCode() {
        return processCode;
    }
    /**
     * @param processCode The processCode to set.
     */
    public void setProcessCode(String processCode) {
        this.processCode = processCode;
    }
    /**
     * @return Returns the processName.
     */
    public String getProcessName() {
        return processName;
    }
    /**
     * @param processName The processName to set.
     */
    public void setProcessName(String processName) {
        t
@Component( role = RepositoryRegistry.class, hint = "protected" )
public class ProtectedRepositoryRegistry
    extends AbstractLogEnabled
    implements RepositoryRegistry
    @Requirement
    private RepositoryRegistry defaultRepositoryRegistry;
    @Requirement
    private NexusItemAuthorizer nexusItemAuthorizer;
    public void addRepository( Repository repository )
    {
        this.defaultRepositoryRegistry.addRepository( repository );
    }
    public List<String> getGroupsOfRepository( String repositoryId )
    {
        return this.defaultRepositoryRegistry.getGroupsOfRepository( repositoryId );
    }
    public List<GroupRepository> getGroupsOfRepository( Repository repository )
    {
        return this.defaultRepositoryRegistry.getGroupsOfRepository( repository );
    }
    public List<Repository> getRepositories()
    {
        return this.filterRepositoriesList( this.defaultRepositoryRegistry.getRepositories() );
    }
    public <T> List<T> getRepositoriesWithFacet( Clas

    {
        return this.filterRepositoriesList( this.defaultRepositoryRegistry.getRepositoriesWithFacet( f ), f );
    }
    public Repository getRepository( String repoId )
        throws NoSuchRepositoryException
    {
        Repository repository = this.defaultRepositoryRegistry.getRepository( repoId );
        this.checkAccessToRepository( repository.getId() );
        return repository;
    }
    public <T> T getRepositoryWithFacet( String repoId, Class<T> f )
        throws NoSuchRepositoryException
    {
        T repository = this.defaultRepositoryRegistry.getRepositoryWithFacet( repoId, f );
        this.checkAccessToRepository( repository, f );
        return repository;
    }
    public void removeRepository( String repoId )
        throws NoSuchRepositoryException
    {
        this.checkAccessToRepository( repoId );
        this.defaultRepositoryRegistry.removeRepository( repoId );
    }
    public void removeRepositorySilently( String repoId )
        throws NoSuchRep

    {
        this.checkAccessToRepository( repoId );
        this.defaultRepositoryRegistry.removeRepositorySilently( repoId );
    }
    public boolean repositoryIdExists( String repositoryId )
    {
        return this.defaultRepositoryRegistry.repositoryIdExists( repositoryId );
    }
    @SuppressWarnings( "unchecked" )
    private <T> List<T> filterRepositoriesList( List<T> repositories, Class<T> facetClass )
    {
        if ( this.isRepository( facetClass ) )
        {
            return (List<T>) this.filterRepositoriesList( (List<Repository>) repositories );
        }
        else
        {
            this.getLogger().debug(
                "Failed to cast Repository facet class: " + facetClass
                    + " to repository, this list will not be filtered based on the users permissions." );
            return repositories;
        }
    }
    private List<Repository> filterRepositoriesList( List<Repository> repositories )
    {
        if ( repositories == null )
  

            return null;
        }
        List<Repository> filteredRepositories = new ArrayList<Repository>();
        for ( Repository repository : repositories )
        {
            if ( this.nexusItemAuthorizer.isViewable( NexusItemAuthorizer.VIEW_REPOSITORY_KEY, repository.getId() ) )
            {
                filteredRepositories.add( repository );
            }
        }
        return filteredRepositories;
    }
    private void checkAccessToRepository( String repositoryId )
        throws NoSuchRepositoryAccessException
    {
        if ( !this.nexusItemAuthorizer.isViewable( NexusItemAuthorizer.VIEW_REPOSITORY_KEY, repositoryId ) )
        {
            throw new NoSuchRepositoryAccessException( repositoryId );
        }
    }
    private <T> void checkAccessToRepository( T repository, Class facetClass )
        throws NoSuchRepositoryAccessException
    {
        if ( this.isRepository( facetClass ) )
        {
            this.checkAccessToRepository( ((Repository) r
public class HandlerTest
    @Test
    public void testGenerateKey()
            throws Exception
    {
        Handler handler = new HandlerImpl();
        Assert.assertEquals(16, handler.generateKey(16).length());
    }
    @Test(expected = IllegalArgumentException.class)
    public void testGenerateKeyZero()
    {
        Handler handler = new HandlerImpl();
        handler.generateKey(0);
    }
    @Test(expected = IllegalArgumentException.class)
    public void testGenerateKeyNegative()
    {
        Handler handler = new HandlerImpl();
        handler.generateKey(-5);
    }
    @Test(expected = IllegalArgumentException.class)
    public void testGenerateKeyLarge()
    {
        Handler handler = new HandlerImpl();
        handler.generateKey(257);
    }
    @Test
    public void parseUrlParts1()
    {
        Handler handler = new HandlerImpl();
        String[] urlParts = handler.parseUrlParts("/this/is/an/url/");
        Assert.assertEquals("an", urlParts[2]);
    }
    @Test
 
/**
 * 流程定义Action负责处理流程定义相关的操作，包括：部署流程、查询部署的流程、删除流程等。
 * 
 * @author lwq
 */
public class ProcessDefinitionAction extends ActionSupport {
    /**
	 * 
	 */
    private static final long serialVersionUID = 1L;
    @Resource
    private ProcessService processService;
    private File uploadProcessDefinition;
    private String processDefinitionId;
    public String deploy() {
        processService.deploy(uploadProcessDefinition);
        return SUCCESS;
    }
    /**
     * 查询所有已经部署的流程列表
     * 
     * @return
     */
    public String list() {
        List<ProcessDefinition> processDefinitionList = processService
                .getProcessDefinitionList();
        ActionContext.getContext().put("processDefinitionList",
                processDefinitionList);
        return SUCCESS;
    }
    public String view() {
        ProcessDefinition processDefinition = processService
                .getProcessDefinition(processDefinitionId);
        ActionContext.getContext().put("processDefin

        return SUCCESS;
    }
    /**
     * 禁用流程定义
     * 
     * @return
     */
    public String disable() {
        processService.disableProcessDefinition(processDefinitionId);
        return SUCCESS;
    }
    /**
     * 激活流程定义
     * 
     * @return
     */
    public String activity() {
        processService.activityProcessDefinition(processDefinitionId);
        return SUCCESS;
    }
    /**
     * 获取流程定义图片
     * 
     * @return
     * @throws Exception
     */
    public InputStream getProcessDefinitionImage() {
        InputStream inputStream = processService.getProcessDefinitionImage(
                processDefinitionId).getImage();
        return inputStream;
    }
    /**
     * @return the processDefinitionId
     */
    public String getProcessDefinitionId() {
        return processDefinitionId;
    }
    /**
     * @param processDefinitionId
     *            the processDefinitionId to set
     */
    public void setProcessDefinitionId(String processDefinitionId) {
public class ManageTest {
	private Integer level;
	private Integer off;
	private Integer cha;
	private Integer salary;
	private ManageSalaryChange manageSalaryChange;
	private ManagePositionSalary managePositionSalary;
	private ManagePaylevelSalary managePaylevelSalary;
	@Resource
	private IManageSalaryManage iManageSalaryManage;
	public ManageSalaryChange getManageSalaryChange() {
		return manageSalaryChange;
	}
	public void setManageSalaryChange(ManageSalaryChange manageSalaryChange) {
		this.manageSalaryChange = manageSalaryChange;
	}
	public ManagePositionSalary getManagePositionSalary() {
		return managePositionSalary;
	}
	public void setManagePositionSalary(ManagePositionSalary managePositionSalary) {
		this.managePositionSalary = managePositionSalary;
	}
	public ManagePaylevelSalary getManagePaylevelSalary() {
		return managePaylevelSalary;
	}
	public void setManagePaylevelSalary(ManagePaylevelSalary managePaylevelSalary) {
		this.managePaylevelSalary = managePaylevelSalary;
	}


		return iManageSalaryManage;
	}
	public void setManageSalaryManage(IManageSalaryManage manageSalaryManage) {
		this.iManageSalaryManage = manageSalaryManage;
	}
	public Integer getLevel() {
		return level;
	}
	public void setLevel(Integer level) {
		this.level = level;
	}
	public Integer getOff() {
		return off;
	}
	public void setOff(Integer off) {
		this.off = off;
	}
	public Integer getCha() {
		return cha;
	}
	public void setCha(Integer cha) {
		this.cha = cha;
	}
	public Integer getSalary() {
		return salary;
	}
	public void setSalary(Integer salary) {
		this.salary = salary;
	}
	public String computeSalary(){
		System.out.println(level);
		iManageSalaryManage.setAllManage(level, off, cha);
		salary=iManageSalaryManage.getSalary();
		
		System.out.println(salary);
		return Action.SUCCESS;
	}
	public String addCha(){
		iManageSalaryManage.addManSalCha(manageSalaryChange);
		
		return Action.SUCCESS;
	}
	public String addPay(){
		iManageSalaryManage.addManPaySal(managePaylevelSala
public interface ServiceManager extends Service
    Map<String, Map<String, Object>> getServicesConfiguration();
    
    void addService(Service p0);
    
    Service getService(String p0);
    
    ExtensionService getExtensionService();
    
    ProfilerService getProfilerService();
    
    TracerService getTracerService();
    
    TransactionTraceService getTransactionTraceService();
    
    ThreadService getThreadService();
    
    HarvestService getHarvestService();
    
    SqlTraceService getSqlTraceService();
    
    BrowserService getBrowserService();
    
    CacheService getCacheService();
    
    DatabaseService getDatabaseService();
    
    TransactionService getTransactionService();
    
    JarCollectorService getJarCollectorService();
    
    JmxService getJmxService();
    
    TransactionEventsService getTransactionEventsService();
    
    CommandParser getCommandParser();
    
    RPMServiceManager getRPMServiceManager();
    
    SamplerService getSamplerS
/**
 * The Class BindingProcess.
 */
@Entity(name="BindingProcess")
public class BindingProcess {
	/** The process real id. */
	@Id
	@GeneratedValue
	private int processRealId;
	/** The process instance. */
	@OneToOne
	@JoinColumn(name="process_instance", nullable=false)
	private ProcessInstance processInstance;
	/** The role. */
	@OneToOne
	@JoinColumn(name="bond_role", nullable=false)
	private Role role;
	/** The user. */
	@OneToOne
	@JoinColumn(name="bond_user", nullable=false)
	private User user;
	/** The registred process. */
	@OneToOne
	@JoinColumn(name="registred_process", nullable=false)
	private RegistredProcess registredProcess;
	/**
	 * Gets the process instance.
	 *
	 * @return the process instance
	 */
	public ProcessInstance getProcessInstance() {
		return processInstance;
	}
	/**
	 * Sets the process instance.
	 *
	 * @param process the new process instance
	 */
	public void setProcessInstance(ProcessInstance process) {
		this.processInstance = process;
	}
	/**
	 * Gets 

	 *
	 * @return the role
	 */
	public Role getRole() {
		return role;
	}
	/**
	 * Sets the role.
	 *
	 * @param role the new role
	 */
	public void setRole(Role role) {
		this.role = role;
	}
	/**
	 * Gets the user.
	 *
	 * @return the user
	 */
	public User getUser() {
		return user;
	}
	/**
	 * Sets the user.
	 *
	 * @param user the new user
	 */
	public void setUser(User user) {
		this.user = user;
	}
	/**
	 * Gets the process real id.
	 *
	 * @return the process real id
	 */
	public int getProcessRealId() {
		return processRealId;
	}
	/**
	 * Sets the process real id.
	 *
	 * @param processRealId the new process real id
	 */
	public void setProcessRealId(int processRealId) {
		this.processRealId = processRealId;
	}
	/**
	 * Gets the registred process.
	 *
	 * @return the registred process
	 */
	public RegistredProcess getRegistredProcess() {
		return registredProcess;
	}
	/**
	 * Sets the registred process.
	 *
	 * @param registredProcess the new registred process
	 */
	public voi
/**
 * 그룹관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Repository("groupManageDAO")
public class GroupManageDAO extends EgovComAbstractDAO {
	/**
	 * 검색조건에 따른 그룹정보를 조회
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO selectGroup(GroupManageVO groupManageVO) throws Exception {
		return (GroupManageVO) select("groupManageDAO.selectGroup", groupManageVO);
	}
	/**
	 * 시스템사용 목적별 그룹 목록 조회
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<GroupManageVO> selectGroupList(GroupManageVO groupManageVO) throws Exception {
		return (List<GroupManageVO>) list("groupManageDAO.selectGroupList", groupManage

	}
	/**
	 * 그룹 기본정보를 화면에서 입력하여 항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void insertGroup(GroupManage groupManage) throws Exception {
		insert("groupManageDAO.insertGroup", groupManage);
	}
	/**
	 * 화면에 조회된 그룹의 기본정보를 수정하여 항목의 정합성을 체크하고 수정된 데이터를 데이터베이스에 반영
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void updateGroup(GroupManage groupManage) throws Exception {
		update("groupManageDAO.updateGroup", groupManage);
	}
	/**
	 * 불필요한 그룹정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void deleteGroup(GroupManage groupManage) throws Exception {
		delete("groupManageDAO.deleteGroup", groupManage);
	}
    /**
	 * 롤목록 총 갯수를 조회한다.
	 * @param groupManageVO GroupManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectGroupListTotCnt(GroupManageVO groupManageVO) throws Exception {
        return (Integer)select("groupManageDAO.selectGroupListTotCnt
public class ServiceFactory {
	public static final void clear()	{
	}
	public static final SecurityService getSecurityService() throws ServiceException	{
		throw missingService("SecurityService");
	}
	public static final LoggingService getLoggingService() throws ServiceException	{
		throw missingService("LoggingService");
	}
	public static final SchedulerService getSchedulerService() throws ServiceException	{
		throw missingService("SchedulerService");
	}
	public static final DataSourceService getDataSourceService() 	{
		return new DataSourceServiceImpl();
	}
	public static final MailSpoolService getMailSpoolService() throws ServiceException	{
		throw missingService("MailSpoolService");
	}
	public static final VerityService getVerityService() throws ServiceException	{
		throw missingService("VerityService");
	}
	public static final DebuggingService getDebuggingService() throws ServiceException	{
		throw missingService("DebuggingService");
	}
	public static final RuntimeService getRuntim

		throw missingService("RuntimeService");
	}
	public static final CronService getCronService() throws ServiceException	{
		throw missingService("CronService");
	}
	public static final ClientScopeService getClientScopeService() throws ServiceException	{
		throw missingService("ClientScopeService");
	}
	public static final MetricsService getMetricsService() throws ServiceException	{
		throw missingService("MetricsService");
	}
	public static final XmlRpcService getXmlRpcService() throws ServiceException	{
		throw missingService("XmlRpcService");
	}
	public static final GraphingService getGraphingService() throws ServiceException	{
		throw missingService("GraphingService");
	}
	public static final ArchiveDeployService getArchiveDeployService() throws ServiceException	{
		throw missingService("ArchiveDeployService");
	}
	public static final RegistryService getRegistryService() throws ServiceException	{
		throw missingService("RegistryService");
	}
	public static final LicenseService getLi

		throw missingService("LicenseService");
	}
	public static final DocumentService getDocumentService() throws ServiceException	{
		throw missingService("DocumentService");
	}
	public static final EventGatewayService getEventProcessorService() throws ServiceException	{
		throw missingService("DocumentService");
	}
	public static final WatchService getWatchService() throws ServiceException	{
		throw missingService("WatchService");
	}
	private static ServiceException missingService(String service) {
		return new ServiceException("the service ["+service+"] is currently missing. At the moment you can use cfadmin tag instead");
	}
	public static final void setSecurityService(SecurityService service)	{
	}
	public static final void setSchedulerService(SchedulerService service)	{
	}
	public static final void setLoggingService(LoggingService service)	{
	}
	public static final void setDataSourceService(DataSourceService service)	{
	}
	public static final void setMailSpoolService(MailSpoolService

	}
	public static final void setVerityService(VerityService service)	{
	}
	public static final void setDebuggingService(DebuggingService service)	{
	}
	public static final void setRuntimeService(RuntimeService service)	{
	}
	public static final void setCronService(CronService service)	{
	}
	public static final void setClientScopeService(ClientScopeService service)	{
	}
	public static final void setMetricsService(MetricsService service)	{
	}
	public static final void setXmlRpcService(XmlRpcService service)	{
	}
	public static final void setGraphingService(GraphingService service)	{
	}
	public static final void setArchiveDeployService(ArchiveDeployService service)	{
	}
	public static final void setRegistryService(RegistryService service)	{
	}
	public static final void setLicenseService(LicenseService service)	{
	}
	public static final void setDocumentService(DocumentService service)	{
	}
	public static final void setEventProcessorService(EventGatewayService service)	{
	}
	public static 
public class ProcessData implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = -4755789010564187240L;
	private String processName;
	private String processId;
	private String createTime;
	private String processFileName;
	public String getProcessName() {
		return processName;
	}
	public void setProcessName(String processName) {
		this.processName = processName;
	}
	public String getProcessId() {
		return processId;
	}
	public void setProcessId(String processId) {
		this.processId = processId;
	}
	public String getCreateTime() {
		return createTime;
	}
	public void setCreateTime(String createTime) {
		this.createTime = createTime;
	}
	public String getProcessFileName() {
		return processFileName;
	}
	public void setProcessFileName(String processFileName) {
		this.processFileName = processFileName;
	}
	@Override
	public String toString() {
		return "ProcessData [processName=" + processName + ", processId="
				+ processId + ", createTime=" + createTime
				
/**
 * 
 * @author WilliamRodrigues <br>
 *         {@link william.rodrigues@live.fae.edu}
 * 
 */
@Service("gradeService")
public class GradeServeiceImpl extends AbstractService<Grade, GradeDao> implements GradeService {
	/*
	 * *******************************************************************************************************************
	 * ***************************************************** Atributos****************************************************
	 * *******************************************************************************************************************
	 */
	private DisciplinaService disciplinaService;
	private DocenteService docenteService;
	/*
	 * *******************************************************************************************************************
	 * ***************************************************** GETS E SETS *************************************************
	 * ***************************************************************************
/**
 * Logspace
 * Copyright (c) 2015 Indoqa Software Design und Beratung GmbH. All rights reserved.
 * This program and the accompanying materials are made available under the terms of
 * the Eclipse Public License Version 1.0, which accompanies this distribution and
 */
public final class EventPropertyJsonHandlers {
    public static final EventPropertyJsonHandlers INSTANCE = new EventPropertyJsonHandlers();
    private final Map<String, EventPropertyJsonHandler<?>> handlers = new HashMap<String, EventPropertyJsonHandler<?>>();
    private final DoubleEventPropertyJsonHandler doubleHandler;
    private final BooleanEventPropertyJsonHandler booleanHandler;
    private final DateEventPropertyJsonHandler dateHandler;
    private final FloatEventPropertyJsonHandler floatHandler;
    private final IntegerEventPropertyJsonHandler integerHandler;
    private final LongEventPropertyJsonHandler longHandler;
    private final StringEventPropertyJsonHandler stringHandler;
    private EventPrope

        super();
        this.booleanHandler = new BooleanEventPropertyJsonHandler();
        this.addHandler(this.booleanHandler);
        this.dateHandler = new DateEventPropertyJsonHandler();
        this.addHandler(this.dateHandler);
        this.doubleHandler = new DoubleEventPropertyJsonHandler();
        this.addHandler(this.doubleHandler);
        this.floatHandler = new FloatEventPropertyJsonHandler();
        this.addHandler(this.floatHandler);
        this.integerHandler = new IntegerEventPropertyJsonHandler();
        this.addHandler(this.integerHandler);
        this.longHandler = new LongEventPropertyJsonHandler();
        this.addHandler(this.longHandler);
        this.stringHandler = new StringEventPropertyJsonHandler();
        this.addHandler(this.stringHandler);
    }
    public static BooleanEventPropertyJsonHandler getBooleanHandler() {
        return INSTANCE.booleanHandler;
    }
    public static DateEventPropertyJsonHandler getDateHandler() {
        return IN
public class HtmlCssInterpreter extends CssInterpreter{
	ArrayList attributeHandler;
	public HtmlCssInterpreter(Reader reader) {
		super(reader);
		this.attributeHandler = new ArrayList();
		
		load();
	}
	void load() {
		addAttributeHandler(new DisplayHandler());
		addAttributeHandler(new FloatHandler());
                addAttributeHandler(new ClearHandler());
		addAttributeHandler(new PositionHandler());
		
		addAttributeHandler(new MinHeightHandler());
		addAttributeHandler(new MaxHeightHandler());
		addAttributeHandler(new MinWidthHandler());
		addAttributeHandler(new MaxWidthHandler());
		addAttributeHandler(new WidthHandler());
		addAttributeHandler(new HeightHandler());
		
		addAttributeHandler(new VisibleHandler());
		
		addAttributeHandler(new VerticalAlignHandler());
		addAttributeHandler(new TextAlignHandler());
		
		addAttributeHandler(new MarginHandler());
		addAttributeHandler(new MarginLeftHandler());
		addAttributeHandler(new MarginRightHandler());
		addAttributeHandle
public class FormSubmissionRouter {
    private final Map<String, FormSubmissionHandler> handlerMap;
    private FormDataRepository formDataRepository;
    public FormSubmissionRouter(FormDataRepository formDataRepository,
                                ECRegistrationHandler ecRegistrationHandler,
                                FPComplicationsHandler fpComplicationsHandler,
                                FPChangeHandler fpChangeHandler,
                                RenewFPProductHandler renewFPProductHandler,
                                ECCloseHandler ecCloseHandler,
                                ANCRegistrationHandler ancRegistrationHandler,
                                ANCRegistrationOAHandler ancRegistrationOAHandler,
                                ANCVisitHandler ancVisitHandler,
                                ANCCloseHandler ancCloseHandler,
                                TTHandler ttHandler,
                                IFAHandler ifaHandler,
                

                                DeliveryOutcomeHandler deliveryOutcomeHandler,
                                PNCRegistrationOAHandler pncRegistrationOAHandler,
                                PNCCloseHandler pncCloseHandler,
                                PNCVisitHandler pncVisitHandler,
                                ChildImmunizationsHandler childImmunizationsHandler,
                                ChildRegistrationECHandler childRegistrationECHandler,
                                ChildRegistrationOAHandler childRegistrationOAHandler,
                                ChildCloseHandler childCloseHandler, ChildIllnessHandler childIllnessHandler,
                                VitaminAHandler vitaminAHandler, DeliveryPlanHandler deliveryPlanHandler,
                                ECEditHandler ecEditHandler, ANCInvestigationsHandler ancInvestigationsHandler) {
        this.formDataRepository = formDataRepository;
        handlerMap = new HashMap<String, FormSubmissionHandler>(

        handlerMap.put(EC_REGISTRATION, ecRegistrationHandler);
        handlerMap.put(FP_COMPLICATIONS, fpComplicationsHandler);
        handlerMap.put(FP_CHANGE, fpChangeHandler);
        handlerMap.put(RENEW_FP_PRODUCT, renewFPProductHandler);
        handlerMap.put(EC_CLOSE, ecCloseHandler);
        handlerMap.put(ANC_REGISTRATION, ancRegistrationHandler);
        handlerMap.put(ANC_REGISTRATION_OA, ancRegistrationOAHandler);
        handlerMap.put(ANC_VISIT, ancVisitHandler);
        handlerMap.put(ANC_CLOSE, ancCloseHandler);
        handlerMap.put(TT, ttHandler);
        handlerMap.put(TT_BOOSTER, ttHandler);
        handlerMap.put(TT_1, ttHandler);
        handlerMap.put(TT_2, ttHandler);
        handlerMap.put(IFA, ifaHandler);
        handlerMap.put(HB_TEST, hbTestHandler);
        handlerMap.put(DELIVERY_OUTCOME, deliveryOutcomeHandler);
        handlerMap.put(PNC_REGISTRATION_OA, pncRegistrationOAHandler);
        handlerMap.put(PNC_CLOSE, pncCloseHandler);
        handler

        handlerMap.put(CHILD_IMMUNIZATIONS, childImmunizationsHandler);
        handlerMap.put(CHILD_REGISTRATION_EC, childRegistrationECHandler);
        handlerMap.put(CHILD_REGISTRATION_OA, childRegistrationOAHandler);
        handlerMap.put(CHILD_CLOSE, childCloseHandler);
        handlerMap.put(CHILD_ILLNESS, childIllnessHandler);
        handlerMap.put(VITAMIN_A, vitaminAHandler);
        handlerMap.put(DELIVERY_PLAN, deliveryPlanHandler);
        handlerMap.put(EC_EDIT, ecEditHandler);
        handlerMap.put(ANC_INVESTIGATIONS, ancInvestigationsHandler);
    }
    @JavascriptInterface
    public void route(String instanceId) throws Exception {
        FormSubmission submission = formDataRepository.fetchFromSubmission(instanceId);
        FormSubmissionHandler handler = handlerMap.get(submission.formName());
        if (handler == null) {
            logWarn("Could not find a handler due to unknown form submission: " + submission);
        } else {
            try {
            
@Controller
@Scope("request")
public class ManageRoleController {
	public static final String MODULE_PATH = "manage/manageRole/";
	@Resource
	private ManageRoleService manageRoleServiceImpl;
	@RequestMapping(value = "/manage/manageRole/manager")
	public String manager() {
		return MODULE_PATH + "manager";
	}
	@RequestMapping(value = "/manage/manageRole/query")
	@ResponseBody
	public Map<String, Object> query(ManageRole manageRole, 
		Integer page, Integer rows, String orderBy, String sortBy) {
		Pager<ManageRole> pager = manageRoleServiceImpl.queryPage(manageRole,
				page, rows, orderBy, sortBy);
		Map<String, Object> result = new HashMap<String, Object>();
		result.put("total", pager.getTotalCount());
		result.put("rows", pager.getDataList());
		return result;
	}
	@RequestMapping(value = "/manage/manageRole/toAdd")
	public String toAdd(){
		return MODULE_PATH + "add";
	}
	@RequestMapping(value = "/manage/manageRole/add")
	@ResponseBody
	public Result add(ManageRole manageRole){
		try

			manageRoleServiceImpl.save(manageRole);
		}catch(Exception e){
			return new Result(Result.ERROR, "角色添加失败！");
		}
		return new Result(Result.SUCCESS, "角色添加成功！");
	}
	@RequestMapping(value = "/manage/manageRole/toEdit")
	public String toEdit(Model model, Integer id){
		ManageRole manageRole = manageRoleServiceImpl.fetch(id);
		model.addAttribute("manageRole", manageRole);
		return MODULE_PATH + "edit";
	}
	@RequestMapping(value = "/manage/manageRole/edit")
	@ResponseBody
	public Result edit(ManageRole manageRole){
		try{
			manageRoleServiceImpl.saveOrUpdate(manageRole);
		}catch(Exception e){
			return new Result(Result.ERROR, "角色修改失败！");
		}
		return new Result(Result.SUCCESS, "角色修改成功！");
	}
	@RequestMapping(value = "/manage/manageRole/deleteByIds")
	@ResponseBody
	public Result deleteByIds(ManageRoleArray array){
		if(null != array && null != array.getManageRoleArray()){
			try{
				for(ManageRole entity : array.getManageRoleArray()){
					manageRoleServiceImpl.delete(entity.getI
/**
 * 
 */
/**
 * @author eduardo
 * 
 */
@Stateless
public class ServiceFactoryImpl extends GenericServiceFactoryImpl implements ServiceFactory {
	/**
	 * long - serialVersionUID
	 */
	private static final long serialVersionUID = 977962662621212292L;
	/**
	 * Dao Factory.
	 */
	@EJB
	protected DAOFactory daoFactory;
	/*
	 * (non-Javadoc)
	 * 
	 * @see com.dk.utils.service.common.GenericServiceFactory#getDAOFactory()
	 */
	@Override
	public GenericDAOFactory getDAOFactory() {
		return daoFactory;
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see com.dookie.checktag.service.common.ServiceFactory#getService()
	 */
	@Override
	public TipoTagService getTipoTagService() {
		TipoTagService service = new TipoTagService();
		service.setDao(daoFactory.getTipoTagDAO());
		service.setServiceFactory(this);
		return service;
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see com.dookie.checktag.service.common.ServiceFactory#getIdiomaService()
	 */
	@Override
	public IdiomaService getIdiomaService() {
		IdiomaService ser

		service.setDao(daoFactory.getIdiomaDAO());
		service.setServiceFactory(this);
		return service;
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see com.dookie.checktag.service.common.ServiceFactory#getPacoteService()
	 */
	@Override
	public PacoteService getPacoteService() {
		PacoteService service = new PacoteService();
		service.setDao(daoFactory.getPacoteDAO());
		service.setServiceFactory(this);
		return service;
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see com.dookie.checktag.service.common.ServiceFactory#getTagService()
	 */
	@Override
	public TagService getTagService() {
		TagService service = new TagService();
		service.setDao(daoFactory.getTagDAO());
		service.setServiceFactory(this);
		return service;
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.dookie.checktag.service.common.ServiceFactory#getTermoAdesaoService()
	 */
	@Override
	public TermoAdesaoService getTermoAdesaoService() {
		TermoAdesaoService service = new TermoAdesaoService();
		service.setDao(daoFactory.getTermoAdesaoDAO());
		

		return service;
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.dookie.checktag.service.common.ServiceFactory#getTipContentService()
	 */
	@Override
	public CapituloService getCapituloService() {
		CapituloService service = new CapituloService();
		service.setDao(daoFactory.getCapituloDAO());
		service.setServiceFactory(this);
		return service;
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see com.dookie.checktag.service.common.ServiceFactory#getTipService()
	 */
	@Override
	public ConteudoService getConteudoService() {
		ConteudoService service = new ConteudoService();
		service.setDao(daoFactory.getConteudoDAO());
		service.setServiceFactory(this);
		return service;
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see com.dookie.checktag.service.common.ServiceFactory#getClienteService()
	 */
	@Override
	public ClienteService getClienteService() {
		ClienteService service = new ClienteService();
		service.setDao(daoFactory.getClienteDAO());
		service.setServiceFactory(this);
		return service;
	}
	/*
	 * (no

	 * 
	 * @see com.dookie.checktag.service.common.ServiceFactory#getTagViewService()
	 */
	@Override
	public TagViewService getTagViewService() {
		TagViewService service = new TagViewService();
		service.setDao(daoFactory.getTagViewDAO());
		service.setServiceFactory(this);
		return service;
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see com.dookie.checktag.service.common.ServiceFactory#getPedidoService()
	 */
	@Override
	public PedidoService getPedidoService() {
		PedidoService service = new PedidoService();
		service.setDao(daoFactory.getPedidoDAO());
		service.setServiceFactory(this);
		return service;
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.dookie.checktag.service.common.ServiceFactory#getPagamentoService()
	 */
	@Override
	public PagamentoService getPagamentoService() {
		PagamentoService service = new PagamentoService();
		service.setDao(daoFactory.getPagamentoDAO());
		service.setServiceFactory(this);
		return service;
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.dookie.checkt

	 */
	@Override
	public FornecedorService getFornecedorService() {
		FornecedorService service = new FornecedorService();
		service.setDao(daoFactory.getFornecedorDAO());
		service.setServiceFactory(this);
		return service;
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.dookie.checktag.service.common.ServiceFactory#getEncomendaService()
	 */
	@Override
	public EncomendaService getEncomendaService() {
		EncomendaService service = new EncomendaService();
		service.setDao(daoFactory.getEncomendaDAO());
		service.setServiceFactory(this);
		return service;
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see com.dookie.checktag.service.common.ServiceFactory#getEntregaService()
	 */
	@Override
	public EntregaService getEntregaService() {
		EntregaService service = new EntregaService();
		service.setDao(daoFactory.getEntregaDAO());
		service.setServiceFactory(this);
		return service;
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see com.dookie.checktag.service.common.ServiceFactory#getVendaService()
	 */
	@Override

public interface HasAllGestureHandlers {
	/**
	   * Adds a {@link DoubleTapGestureHandler} handler.
	   * 
	   * @param handler the double tap gesture handler
	   * @return {@link DoubleTapGestureHandler} used to remove this handler
	   */
	  HandlerRegistration addDoubleTapGestureHandler(DoubleTapGestureHandler handler);
	 
	  /**
	   * Adds a {@link HoldAndTapGestureHandler} handler.
	   * 
	   * @param handler the hold and tap gesture handler
	   * @return {@link HoldAndTapGestureHandler} used to remove this handler
	   */
	  HandlerRegistration addHoldAndTapGestureHandler(HoldAndTapGestureHandler handler);
	  
	  /**
	   * Adds a {@link MoveGestureHandler} handler.
	   * 
	   * @param handler the move gesture handler
	   * @return {@link MoveGestureHandler} used to remove this handler
	   */
	  HandlerRegistration addMoveGestureHandler(MoveGestureHandler handler);
	  
	  /**
	   * Adds a {@link PullOutGestureHandler} handler.
	   * 
	   * @param handler the pull gesture handler
	  

	   */
	  HandlerRegistration addPullOutGestureHandler(PullOutGestureHandler handler);
	  
	  /**
	   * Adds a {@link PushInGestureHandler} handler.
	   * 
	   * @param handler the push gesture handler
	   * @return {@link PushInGestureHandler} used to remove this handler
	   */
	  HandlerRegistration addPushInGestureHandler(PushInGestureHandler handler);
	  
	  /**
	   * Adds a {@link TapGestureHandler} handler.
	   * 
	   * @param handler the tap gesture handler
	   * @return {@link TapGestureHandler} used to remove this handler
	   */
	  HandlerRegistration addTapGestureHandler(TapGestureHandler handler);
	  
	  /**
	   * Adds a {@link ZoomInGestureHandler} handler.
	   * 
	   * @param handler the zoom in gesture handler
	   * @return {@link ZoomInGestureHandler} used to remove this handler
	   */
	  HandlerRegistration addZoomInGestureHandler(ZoomInGestureHandler handler);
	  
	  /**
	   * Adds a {@link ZoomOutGestureHandler} handler.
	   * 
	   * @param handler the zoom out gestu
public class LoggingProcessEventListener implements ProcessEventListener {
    public void beforeProcessStarted(ProcessStartedEvent processStartedEvent) {
        System.out.println("LoggingProcessEventListener :: beforeProcessStarted");
    }
    public void afterProcessStarted(ProcessStartedEvent processStartedEvent) {
        System.out.println("LoggingProcessEventListener :: afterProcessStarted");
    }
    public void beforeProcessCompleted(ProcessCompletedEvent processCompletedEvent) {
        System.out.println("LoggingProcessEventListener :: beforeProcessCompleted");
    }
    public void afterProcessCompleted(ProcessCompletedEvent processCompletedEvent) {
        System.out.println("LoggingProcessEventListener :: afterProcessCompleted");
    }
    public void beforeNodeTriggered(ProcessNodeTriggeredEvent processNodeTriggeredEvent) {
        System.out.println("LoggingProcessEventListener :: beforeNodeTriggered");
    }
    public void afterNodeTriggered(ProcessNodeTriggeredEve
/**
 * Created by Azmat on 01/04/2014.
 */
@SuppressWarnings("DefaultFileTemplate")
public class QuestionHandler {
    private final Handler handler;
    public QuestionHandler(Handler handler) {
        this.handler = handler;
    }
    public void setCorrect(int attempts) {
        if (attempts != 1) {
            handler.getDataHandler().negateCorrect();
            System.out.println("Negating attempts");
        }
        handler.getDataHandler().getAnswered().add(handler.getDataHandler().getFrame().getNumber());
        handler.getDataHandler().getAttempts().putIfAbsent(handler.getDataHandler().getFrame().getNumber(), attempts);
        final long time = System.currentTimeMillis() - handler.getDataHandler().getStartQuestionTime().longValue();
        handler.getDataHandler().setStartQuestionTime(System.currentTimeMillis());
        handler.getDataHandler().getTimeTakenMap().putIfAbsent(handler.getDataHandler().getFrame().getNumber(), time);
        if (handler.getDataHandler().ge

            handler.validateFinished();
            DrawChart chart = new DrawChart(handler.getDataHandler().getTimeTakenMap(), handler.getComputer(), handler.getDataHandler().getAttempts());
            handler.getUiHandler().checkRetry(chart);
            return;
        }
        final Integer number = generateNumber();
        if (!handler.getDataHandler().getAnswered().contains(number) && handler.getDataHandler().getGenerated().contains(number)) {
            handler.getDataHandler().getFrame().setQuestion(number);
        }
        handler.validateFinished();
    }
    public Integer generateNumber() {
        Integer number = handler.getDataHandler().getRandom().nextInt(handler.getDataHandler().getTotalNumberQuestions().intValue() + 1);
        return !handler.getDataHandler().getGenerated().contains(number) && number != 0 ? addToList(number) : generateNumber();
    }
    private Integer addToList(Integer number) {
        handler.getDataHandler().getGenerated().add(number);
  
/** 
 * 일정관리에 대한 서비스 구현클래스를 정의한다
 * <p><b>NOTE:</b> 서비스에 선언 되어있는 메소드들의 구현 클래스로 데이터 접근 클래스의 메소드를 호출한다
 * 메소드들 중에는 parameter를 넘기는 메소드도 있고 넘기지 않는 메소드도 존재한다
 * @author 범정부통계포털 이진우 
 * @since 2011.08.03 
 * @version 1.0 
 * @see 
 * 
 * <pre> 
 *  == Modification Information) == 
 *   
 *     date         author                note 
 *  -----------    --------    --------------------------- 
 *   2011.08.03     이진우      최초 생성 
 * 
 * </pre> 
 */
@Service("scheduleManageService")
public class ScheduleManageServiceImpl extends AbstractServiceImpl implements ScheduleManageService {
	/** scheduleManageDAO 서비스 호출 */ 
	@Resource(name="scheduleManageDAO")
    private ScheduleManageDAO scheduleManageDAO;
	/**
     * scheduleManageVO 일정목록 조회  
     * @param scheduleManageVO
     * @return List
     * @throws Exception
     * @see SC_TY,SC_TY_NM,SC_SN, SUBJECT,ORG_NM, SCHEDULE_CN,START_DT,END_DT,PLACE,STAT_ID,STAT_NM,PHON_CN,FAX_PHON_CN,
     * @see UPDT_DT, REGIST_DT
     * @see TABLE NAME : TN_SCHE

     */
	@SuppressWarnings("unchecked")
	public List selectScheduleList(ScheduleManageVO scheduleManageVO) throws Exception {
		return scheduleManageDAO.selectScheduleList(scheduleManageVO);
	}
	/**
     * scheduleManageVO 일정목록 총 갯수를 조회한다.
     * @param scheduleManageVO
     * @return int
     * @throws Exception
     * @see totcnt 
     * @see TABLE NAME : TN_SCHEDULE
     */
	public int selectScheduleListTotCnt(ScheduleManageVO scheduleManageVO) throws Exception {
        return scheduleManageDAO.selectScheduleListTotCnt(scheduleManageVO);
	}
	/**
	 * scheduleManageVO 선택된 일정 상세조회  
	 * @param scheduleManageVO
	 * @return ScheduleManageVO
	 * @throws Exception
	 * @see SC_TY,SC_TY_NM,SC_SN, SUBJECT,ORG_NM, SCHEDULE_CN,START_DT,END_DT,PLACE,STAT_ID,STAT_NM,PHON_CN,FAX_PHON_CN,
     * @see UPDT_DT, REGIST_DT
	 * @see TABLE NAME : TN_SCHEDULE
	 */ 
	public ScheduleManageVO selectSchedule(ScheduleManageVO scheduleManageVO) throws Exception {
    	return (ScheduleManageVO)scheduleManageDA
public interface EgovDeptManageService {
	/**
	 * 부서를 관리하기 위해 등록된 부서목록을 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return List - 부서 목록
	 * 
	 * @param deptManageVO
	 */
	public List<DeptManageVO> selectDeptManageList(DeptManageVO deptManageVO) throws Exception;
	/**
	 * 부서목록 총 갯수를 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return int - 부서 카운트 수
	 * 
	 * @param deptManageVO
	 */
	public int selectDeptManageListTotCnt(DeptManageVO deptManageVO) throws Exception;
	/**
	 * 등록된 부서의 상세정보를 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return deptManageVO - 부서 Vo
	 * 
	 * @param deptManageVO
	 */
	public DeptManageVO selectDeptManage(DeptManageVO deptManageVO) throws Exception;
	/**
	 * 부서정보를 신규로 등록한다.
	 * @param deptManageVO - 부서 model
	 * 
	 * @param deptManageVO
	 */
	public void insertDeptManage(DeptManageVO deptManageVO) throws Exception;
	/**
	 * 기 등록된 부서정보를 수정한다.
	 * @param deptManageVO - 부서 model
	 * 
	 * @param deptManageVO
	 */
	public void updateDeptManage(DeptManageVO deptManageVO) th
@Controller
public class EgovDeptManageController {
	@Resource(name = "egovMessageSource")
	EgovMessageSource egovMessageSource;
	@Resource(name = "egovDeptManageService")
	private EgovDeptManageService egovDeptManageService;
	/** Message ID Generation */
	@Resource(name = "egovDeptManageIdGnrService")
	private EgovIdGnrService egovDeptManageIdGnrService;
	@Autowired
	private DefaultBeanValidator beanValidator;
	/**
	 * 부서 목록화면 이동
	 * @return String
	 * @exception Exception
	 */
	@IncludedInfo(name = "부서관리", order = 461, gid = 50)
	@RequestMapping("/uss/umt/dpt/selectDeptManageListView.do")
	public String selectDeptManageListView() throws Exception {
		return "egovframework/com/uss/umt/EgovDeptManageList";
	}
	/**
	 * 부서를 관리하기 위해 등록된 부서목록을 조회한다.
	 * @param bannerVO - 배너 VO
	 * @return String - 리턴 URL
	 * @throws Exception
	 */
	@RequestMapping(value = "/uss/umt/dpt/selectDeptManageList.do")
	public String selectDeptManageList(@ModelAttribute("deptManageVO") DeptManageVO deptManageVO, M

		/** paging */
		PaginationInfo paginationInfo = new PaginationInfo();
		paginationInfo.setCurrentPageNo(deptManageVO.getPageIndex());
		paginationInfo.setRecordCountPerPage(deptManageVO.getPageUnit());
		paginationInfo.setPageSize(deptManageVO.getPageSize());
		deptManageVO.setFirstIndex(paginationInfo.getFirstRecordIndex());
		deptManageVO.setLastIndex(paginationInfo.getLastRecordIndex());
		deptManageVO.setRecordCountPerPage(paginationInfo.getRecordCountPerPage());
		model.addAttribute("deptManageList", egovDeptManageService.selectDeptManageList(deptManageVO));
		int totCnt = egovDeptManageService.selectDeptManageListTotCnt(deptManageVO);
		paginationInfo.setTotalRecordCount(totCnt);
		model.addAttribute("paginationInfo", paginationInfo);
		model.addAttribute("message", egovMessageSource.getMessage("success.common.select"));
		return "egovframework/com/uss/umt/EgovDeptManageList";
	}
	/**
	 * 등록된 부서의 상세정보를 조회한다.
	 * @param bannerVO - 부서 Vo
	 * @return String - 리턴 Url
	 */
	@Reques

	public String selectDeptManage(@RequestParam("orgnztId") String orgnztId, @ModelAttribute("deptManageVO") DeptManageVO deptManageVO, ModelMap model) throws Exception {
		deptManageVO.setOrgnztId(orgnztId);
		model.addAttribute("deptManage", egovDeptManageService.selectDeptManage(deptManageVO));
		model.addAttribute("message", egovMessageSource.getMessage("success.common.select"));
		return "egovframework/com/uss/umt/EgovDeptManageUpdt";
	}
	/**
	 * 부서등록 화면으로 이동한다.
	 * @param banner - 부서 model
	 * @return String - 리턴 Url
	 */
	@RequestMapping(value = "/uss/umt/dpt/addViewDeptManage.do")
	public String insertViewDeptManage(@ModelAttribute("deptManageVO") DeptManageVO deptManageVO, ModelMap model) throws Exception {
		model.addAttribute("deptManage", deptManageVO);
		return "egovframework/com/uss/umt/EgovDeptManageInsert";
	}
	/**
	 * 부서정보를 신규로 등록한다.
	 * @param banner - 부서 model
	 * @return String - 리턴 Url
	 */
	@RequestMapping(value = "/uss/umt/dpt/addDeptManage.do")
	public String ins

		deptManageVO.setOrgnztId(egovDeptManageIdGnrService.getNextStringId());
		if (bindingResult.hasErrors()) {
			return "egovframework/com/uss/umt/EgovDeptManageInsert";
		} else {
			egovDeptManageService.insertDeptManage(deptManageVO);
			status.setComplete();
			model.addAttribute("message", egovMessageSource.getMessage("success.common.insert"));
			return "forward:/uss/umt/dpt/getDeptManage.do";
		}
	}
	/**
	 * 기 등록된 부서정보를 수정한다.
	 * @param banner - 부서 model
	 * @return String - 리턴 Url
	 */
	@RequestMapping(value = "/uss/umt/dpt/updtDeptManage.do")
	public String updateDeptManage(@ModelAttribute("deptManageVO") DeptManageVO deptManageVO, BindingResult bindingResult, SessionStatus status, ModelMap model) throws Exception {
		if (bindingResult.hasErrors()) {
			return "egovframework/com/uss/umt/EgovDeptManageUpdt";
		} else {
			egovDeptManageService.updateDeptManage(deptManageVO);
			status.setComplete();
			model.addAttribute("message", egovMessageSource.getMessage("success.common.i

			return "forward:/uss/umt/dpt/getDeptManage.do";
		}
	}
	/**
	 * 기 등록된 부서정보를 삭제한다.
	 * @param banner Banner
	 * @return String
	 * @exception Exception
	 */
	@RequestMapping(value = "/uss/umt/dpt/removeDeptManage.do")
	public String deleteDeptManage(@ModelAttribute("deptManageVO") DeptManageVO deptManageVO, SessionStatus status, Model model) throws Exception {
		egovDeptManageService.deleteDeptManage(deptManageVO);
		status.setComplete();
		model.addAttribute("message", egovMessageSource.getMessage("success.common.delete"));
		return "forward:/uss/umt/dpt/selectDeptManageList.do";
	}
	/**
	 * 기 등록된 부서정보목록을 일괄 삭제한다.
	 * @param banners String
	 * @param banner Banner
	 * @return String
	 * @exception Exception
	 */
	@RequestMapping(value = "/uss/umt/dpt/removeDeptManageList.do")
	public String deleteDeptManageList(@RequestParam("deptManages") String deptManages, @ModelAttribute("deptManageVO") DeptManageVO deptManageVO, SessionStatus status,
			ModelMap model) throws Exception {
		Str
/**
 * 
 */
/**
 * @author Roman Selmeci
 *
 */
public final class ServicePair {
	private Service service_a = null;
	private Service service_b = null;
	private ServicePair() {
	}
	public static ServicePair create(){
		return new ServicePair();
	}
	public ServicePair service_a(Service service_a){
		this.service_a = service_a;
		return this;
	}
	public ServicePair service_b(Service service_b){
		this.service_b = service_b;
		return this;
	}
	public Service getService_a() {
		return service_a;
	}
	public void setService_a(Service service_a) {
		this.service_a = service_a;
	}
	public Service getService_b() {
		return service_b;
	}
	public void setService_b(Service service_b) {
		this.service_b = service_b;
	}
	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((service_a == null) ? 0 : service_a.hashCode());
		result = prime * result
				+ ((service_b == null) ? 0 : servic
public class ServiceLocator {
	public static MemberServiceDelegate memberService;
	public static AccountServiceDelegate accountService;
	public static VoucherServiceDelegate voucherService;
	public static MenuServiceDelegate menuService;
	public static AccountService accountWebService;
	public static VoucherService voucherWebService;
	public static MemberService memberWebService;
	public static BRSService brsWebService;
	public static AdditionalService additionalRoleWebService;
	public static ReportService reportWebService;
	public static ReportService getReportWebService() {
		return reportWebService;
	}
	public void setReportWebService(ReportService reportWebService) {
		ServiceLocator.reportWebService = reportWebService;
	}
	public static AdditionalService getAdditionalRoleWebService() {
		return additionalRoleWebService;
	}
	public  void setAdditionalRoleWebService(
			AdditionalService additionalRoleWebService) {
		ServiceLocator.additionalRoleWebService = additionalRoleWebService

	}
	public static BRSService getBrsWebService() {
		return brsWebService;
	}
	public  void setBrsWebService(BRSService brsWebService) {
		ServiceLocator.brsWebService = brsWebService;
	}
	public static MenuService menuWebService;
	public static CostCenterService costCenterService;
	public static ReportServiceDelegate reportService;
	public static AdditionalRoleServiceDelegate additionalRoleService;
	public static BRSServiceDelegate brsService;
	public static MenuService getMenuWebService() {
		return menuWebService;
	}
	public  void setMenuWebService(MenuService menuWebService) {
		ServiceLocator.menuWebService = menuWebService;
	}
	public static MemberService getMemberWebService() {
		return memberWebService;
	}
	public  void setMemberWebService(MemberService memberWebService) {
		ServiceLocator.memberWebService = memberWebService;
	}
	public static VoucherService getVoucherWebService() {
		return voucherWebService;
	}
	public void setVoucherWebService(VoucherService voucherWebServic

		ServiceLocator.voucherWebService = voucherWebService;
	}
	public static AccountService getAccountWebService() {
		return accountWebService;
	}
	public void setAccountWebService(AccountService accountWebService) {
		ServiceLocator.accountWebService = accountWebService;
	}
	/**
	 * @return the memberService
	 */
	public static MemberServiceDelegate getMemberService() {
		return memberService;
	}
	/**
	 * @param memberService
	 *            the memberService to set
	 */
	public void setMemberService(MemberServiceDelegate memberService) {
		ServiceLocator.memberService = memberService;
	}
	/**
	 * @return the accountService
	 */
	public static AccountServiceDelegate getAccountService() {
		return accountService;
	}
	/**
	 * @param accountService
	 *            the accountService to set
	 */
	public void setAccountService(AccountServiceDelegate accountService) {
		ServiceLocator.accountService = accountService;
	}
	/**
	 * @return the costCenterService
	 */
	public static CostCenterServi

		return costCenterService;
	}
	/**
	 * @param costCenterService
	 *            the costCenterService to set
	 */
	public void setCostCenterService(CostCenterService costCenterService) {
		ServiceLocator.costCenterService = costCenterService;
	}
	/**
	 * @return the voucherService
	 */
	public static VoucherServiceDelegate getVoucherService() {
		return voucherService;
	}
	/**
	 * @param voucherService
	 *            the voucherService to set
	 */
	public void setVoucherService(VoucherServiceDelegate voucherService) {
		ServiceLocator.voucherService = voucherService;
	}
	/**
	 * @return the menuService
	 */
	public static MenuServiceDelegate getMenuService() {
		return menuService;
	}
	/**
	 * @param menuService
	 *            the menuService to set
	 */
	public void setMenuService(MenuServiceDelegate menuService) {
		ServiceLocator.menuService = menuService;
	}
	/**
	 * @return the reportService
	 */
	public static ReportServiceDelegate getReportService() {
		return reportService;
	}
/**
 * 권한별 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Service("egovAuthorRoleManageService")
public class EgovAuthorRoleManageServiceImpl extends AbstractServiceImpl implements EgovAuthorRoleManageService {
	@Resource(name="authorRoleManageDAO")
    private AuthorRoleManageDAO authorRoleManageDAO;
	/**
	 * 권한 롤 관계정보를 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return AuthorRoleManageVO
	 * @exception Exception
	 */
	public AuthorRoleManageVO selectAuthorRole(AuthorRoleManageVO authorRoleManageVO) throws Exception {
		return authorRoleManageDAO.selectAuthorRole(authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보 목록 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return List<AuthorRoleManageVO>
	 * @exception Exception
	 */
	publ

		return authorRoleManageDAO.selectAuthorRoleList(authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보를 화면에서 입력하여 입력항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void insertAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		authorRoleManageDAO.insertAuthorRole(authorRoleManage);
	}
	/**
	 * 수정된 권한 롤 관계정보를 데이터베이스에 반영
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void updateAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		authorRoleManageDAO.updateAuthorRole(authorRoleManage);
	}
	/**
	 * 권한 롤 관계정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void deleteAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		authorRoleManageDAO.deleteAuthorRole(authorRoleManage);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return int
	 * @exception Exception
	 */
	public in
interface Service {
    void method1();
    void method2();
interface ServiceFactory {
    /**
     * 工厂对象将生成接口的某个实现对象
     */
    Service getService();
public class Factories {
    /**
     * 理论上代码将完全的与接口的实现分离
     */
    public static void service(ServiceFactory serviceFactory) {
        Service service = serviceFactory.getService();
        service.method1();
        service.method2();
    }
    public static void main(String args[]) {
        service(new ServiceFactoryImplA());
        service(new ServiceFactoryImplB());
    }
class ServiceImplA implements Service {
    @Override
    public void method1() {
        println("ServiceImplA method1");
    }
    @Override
    public void method2() {
        println("ServiceImplA method2");
    }
class ServiceFactoryImplA implements ServiceFactory {
    @Override
    public Service getService() {
        return new ServiceImplA();
    }
class ServiceImplB implements Service {
    @Override
    public void method1() {
        println("Ser
public class ExtensionDocumentHandlerFactoryTest {
	@Test
	public void testGetDocument() throws FileNotFoundException, IOException,
			DocumentHandlerException {
		ExtensionDocumentHandlerFactory handlerFactory = new ExtensionDocumentHandlerFactory(
				"document.factory.properties");
		DocumentHandler handler = handlerFactory.getHandlerForExtension("doc");
		assertEquals("com.tecacet.text.search.handler.MicrosoftTextHandler",
				handler.getClass().getName());
		handler = handlerFactory.getHandlerForExtension("docx");
		assertEquals("com.tecacet.text.search.handler.MicrosoftTextHandler",
				handler.getClass().getName());
		handler = handlerFactory.getHandlerForExtension("xls");
		assertEquals("com.tecacet.text.search.handler.MicrosoftTextHandler",
				handler.getClass().getName());
		handler = handlerFactory.getHandlerForExtension("xlsx");
		assertEquals("com.tecacet.text.search.handler.MicrosoftTextHandler",
				handler.getClass().getName());
		handler = handlerFactory.getHandlerFor
public class CollisionHandlerFactory {
    public BounceCollisionHandler bounceHandler;
    public DeathCollisionHandler deathHandler;
    public DoorTriggerCollisionHandler doorTriggerHandler;
    public WeightTriggerCollisionHandler weightTriggerHandler;
    public RepelCollisionHandler repelHandler;
    public ScareCollisionHandler scareHandler;
    public CollisionHandlerFactory() {
        bounceHandler = new BounceCollisionHandler();
        deathHandler = new DeathCollisionHandler();
        doorTriggerHandler = new DoorTriggerCollisionHandler();
        weightTriggerHandler = new WeightTriggerCollisionHandler();
        repelHandler = new RepelCollisionHandler();
        scareHandler = new ScareCollisionHandler();
    }
    public void initialize(World world) {
        bounceHandler.initialize(world);
        deathHandler.initialize(world);
        doorTriggerHandler.initialize(world);
        weightTriggerHandler.initialize(world);
        repelHandler.initialize(world);
     
public class Ample {
	private static ModTransformer modTransformer;
	private static PermissionHandler permissionHandler;
	private static ConfigHandler configHandler;
	private static EventHandler eventHandler;
	private static CommandHandler commandHandler;
	private static DatabaseHandler databaseHandler;
	private static QuestionHandler questionHandler;
	public static ModTransformer getModTransformer() {
		return modTransformer;
	}
	public static void setModTransformer(ModTransformer mt) {
		modTransformer = mt;
	}
	public static PermissionHandler getPermissionHandler() {
		return permissionHandler;
	}
	public static void setPermissionHandler(PermissionHandler ph) {
		permissionHandler = ph;
	}
	public static ConfigHandler getConfigHandler() {
		return configHandler;
	}
	public static void setConfigHandler(ConfigHandler ch) {
		configHandler = ch;
	}
	public static EventHandler getEventHandler() {
		return eventHandler;
	}
	public static void setEventHandler(EventHandler eh) {
		eventHan
public class TypeHandlerRegistry {
	private List<String> typeHandlerList=new ArrayList<String>();
	private IChainHandler ich;
	private static TypeHandlerRegistry handlerRegistry;
	private TypeHandlerRegistry(){
		try 
		{
			registerChainHandler();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	public static TypeHandlerRegistry getInstance()
	{
		if(handlerRegistry==null)
		{
			handlerRegistry=new TypeHandlerRegistry();
		}
		return handlerRegistry;
	}
	public IChainHandler getTypeHandlerChainHandler() {
		return ich;
	}
	public void addTypeHandler(String typeHandler)
	{
		typeHandlerList.add(typeHandler);
	}
	private void registerChainHandler() throws Exception
	{
	   ich=new ChainHandler(new BooleanHandler());
	   ich=new ChainHandler(new BytesHandler(),ich);
	   ich=new ChainHandler(new DoubleHandler(),ich);
	   ich=new ChainHandler(new IntegerHandler(),ich);
	   ich=new ChainHandler(new LongHandler(),ich);
	   ich=new ChainHandler(new StringHandler(),ich);
	   ich=new C
/**
 * Created by indenml on 21.06.15.
 */
public class HighestResponseRatioNext extends SchedulingAlgorithm{
    public HighestResponseRatioNext(List<Process> inputProcesses){
        super(inputProcesses);
    }
    public  Schedule generateProcessSchedule() {
        /* ---------------------- Algorithm ----------------------*/
        while(!processes.isEmpty()) {
            if(currentlyRunningProcess != null){
                if(currentlyRunningProcess.getProcessingTime() == ct-startTimeCuRuPr){
                    schedule.add(new ScheduleItem(currentlyRunningProcess.getProcessID(), startTimeCuRuPr, ct, true));
                    processes.remove(currentlyRunningProcess);
                    currentlyRunningProcess = null;
                    startTimeCuRuPr = null;
                }
            }
            if(currentlyRunningProcess != null){
                if(currentlyRunningProcess.isBlocked(ct)){
                    schedule.add(new ScheduleItem(currentlyRunningProcess.ge

                    currentlyRunningProcess.setProcessingTime(currentlyRunningProcess.getProcessingTime() - ( ct-startTimeCuRuPr));
                    currentlyRunningProcess = null;
                    startTimeCuRuPr = null;
                }
            }
            fillProcessQue();
            if (processQueue.isEmpty()){
                ct++;
                continue;
            }
            if(currentlyRunningProcess != null){
                ct++;
                continue;
            }
            Process interestingProcess = getProcessHighestResponseRatio();
            runProcess(interestingProcess);
        }
        return schedule;
    }
    public  Process getProcessHighestResponseRatio(){
        Process interestingProcess = processQueue.get(0);
        Float highestResponseRatio = getResponseRatio(ct, interestingProcess);
        for(Process process : processQueue){
            if (getResponseRatio(ct, process) > highestResponseRatio){
                interestingP
@MappedSuperclass
public class ActionTemplate<E> extends ActionSupport {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	@Resource(name="typeService")
	protected ITypeService typeService ;
	@Resource(name="userService")
	protected IUserService userService ;
	@Resource(name="informationService")
	protected IInformationService informationService ;
	@Resource(name="compressFileService")
	protected ICompressFileService compressFileService ;
	@Resource(name="documentService")
	protected IDocumentService documentService ;
	protected ICourseService courseService ;
	public ITypeService getTypeService() {
		return typeService;
	}
	public void setTypeService(ITypeService typeService) {
		this.typeService = typeService;
	}
	public void setUserService(IUserService userService) {
		this.userService = userService;
	}
	public void setInformationService(IInformationService informationService) {
		this.informationService = informationService;
	}
	public void setCompressFileService(ICo
/**
 * This is an implementation of the {@link ProcessInstanceManager} that uses MongoDB.
 */
public class MongoProcessInstanceManager implements ProcessInstanceManager {
    Logger logger = LoggerFactory.getLogger( getClass() );
	private MongoProcessStore store;
    private InternalKnowledgeRuntime kruntime;
    
    private Map<Long, MongoProcessInstanceInfo> processInstanceInfoCache = new HashMap<Long, MongoProcessInstanceInfo>(); 
    
    public void setKnowledgeRuntime(InternalKnowledgeRuntime kruntime) {
        store = (MongoProcessStore)kruntime.getEnvironment().get(MongoProcessStore.envKey);
        this.kruntime = kruntime;
    }
    public void addProcessInstance(ProcessInstance processInstance, CorrelationKey correlationKey) {
        internalAddProcessInstance(processInstance);
        MongoProcessInstanceInfo processInstanceInfo = new MongoProcessInstanceInfo(processInstance);
        if (correlationKey != null) 
        	processInstanceInfo.assignCorrelationKey(correlat

        
        long procInstId = store.getNextProcessInstanceId();
        processInstanceInfo.setProcessInstanceId(procInstId);
        ((org.jbpm.process.instance.ProcessInstance) processInstance).setId( processInstanceInfo.getProcessInstanceId() );
        processInstanceInfo.setProcessId(processInstance.getProcessId());
        try {
			MongoProcessInstanceMarshaller.serialize(processInstanceInfo);
		} catch (NotSerializableException e) {
			e.printStackTrace();
		}
        store.saveNew(processInstanceInfo);
        processInstanceInfoCache.put(processInstanceInfo.getProcessInstanceId(), processInstanceInfo);
    }
    
    public void internalAddProcessInstance(ProcessInstance processInstance) {
    	org.jbpm.process.instance.ProcessInstance pi = (org.jbpm.process.instance.ProcessInstance)processInstance;
        if (((ProcessInstanceImpl) pi).getProcessXml() == null) {
	        Process process = kruntime.getKieBase().getProcess( processInstance.getProcessId() );
	        if (

	            throw new IllegalArgumentException( "Could not find process " + processInstance.getProcessId() );
	        }
	        pi.setProcess( process );
        }
        if ( pi.getKnowledgeRuntime() == null ) {
            Long parentProcessInstanceId = (Long) ((ProcessInstanceImpl) processInstance).getMetaData().get("ParentProcessInstanceId");
            if (parentProcessInstanceId != null) {
                kruntime.getProcessInstance(parentProcessInstanceId);
            }
            pi.setKnowledgeRuntime( kruntime );
        }
    }
    public ProcessInstance getProcessInstance(long id) {
        return getProcessInstance(id, false);
    }
	public ProcessInstance getProcessInstance(long id, boolean readOnly) {
        InternalRuntimeManager manager = (InternalRuntimeManager) kruntime.getEnvironment().get("RuntimeManager");
        if (manager != null) {
            manager.validate((KieSession) kruntime, ProcessInstanceIdContext.get(id));
        }
        MongoProcessIns

        return toProcessInstance(procInstInfo);
    }
	private ProcessInstance toProcessInstance(
			MongoProcessInstanceInfo procInstInfo) {
		if (procInstInfo == null)
        	return null;
		org.jbpm.process.instance.ProcessInstance processInstance = (org.jbpm.process.instance.ProcessInstance)	procInstInfo.getProcessInstance();
		if (processInstance == null) {
    		try {
				MongoProcessInstanceMarshaller.deserialize(procInstInfo, kruntime);
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			}
		}
		processInstance = (org.jbpm.process.instance.ProcessInstance)	procInstInfo.getProcessInstance();
		if (processInstance != null) {
        	internalAddProcessInstance(processInstance);
            if (!procInstInfo.isReconnected()) {
            	((RuleFlowProcessInstance)processInstance).reconnect();
            	procInstInfo.reconnect();
            }
        }
        return processInstance;
	}
    public Collection<ProcessInstance> getProcessInstances() {
    	proce

    	List<MongoProcessInstanceInfo> procInstInfos = store.findAllProcessInstances();
    	List<ProcessInstance> processInstances = new ArrayList<ProcessInstance>();
    	for (MongoProcessInstanceInfo procInstInfo:procInstInfos) {
    		ProcessInstance instance = toProcessInstance(procInstInfo);
    		processInstances.add(instance);
    		processInstanceInfoCache.put(procInstInfo.getProcessInstanceId(), procInstInfo);
    	}
        return Collections.unmodifiableCollection(processInstances);
    }
    public void internalRemoveProcessInstance(ProcessInstance processInstance) {
    	processInstanceInfoCache.remove(processInstance.getId());
    }
    
    public void clearProcessInstances() {
    	logger.debug("clearProcessInstances called");
    	for (MongoProcessInstanceInfo procInstInfo:processInstanceInfoCache.values()) {
    		ProcessInstance processInstance = procInstInfo.getProcessInstance();
        	if (processInstance == null) continue;
    		((ProcessInstanceImpl) processInst

        }
        processInstanceInfoCache.clear();
    }
    public void clearProcessInstancesState() {
        try {
        	Collection<ProcessInstance> processInstances = getProcessInstances();
            TimerManager timerManager = ((InternalProcessRuntime)kruntime.getProcessRuntime()).getTimerManager();
            
            for (ProcessInstance processInstance: processInstances) {
                WorkflowProcessInstance pi = ((WorkflowProcessInstance) processInstance);
                
                for (org.kie.api.runtime.process.NodeInstance nodeInstance : pi.getNodeInstances()) {
                    if (nodeInstance instanceof TimerNodeInstance){
                        if (((TimerNodeInstance)nodeInstance).getTimerInstance() != null) {
                            timerManager.cancelTimer(((TimerNodeInstance)nodeInstance).getTimerInstance().getId());
                        }
                    } else if (nodeInstance instanceof StateBasedNodeInstance) {
            

                        if (timerIds != null) {
                            for (Long id: timerIds) {
                                timerManager.cancelTimer(id);
                            }
                        }
                    }
                }
                
            }
        } catch (Exception e) {
        }
    }
	public ProcessInstance findProcessInstanceByWorkItemId(long workItemId, boolean readOnly) {
		MongoProcessInstanceInfo procInst = store.findProcessInstanceByWorkItemId(workItemId);
		if (procInst != null) { 
    		processInstanceInfoCache.put(procInst.getProcessInstanceId(), procInst);
			return toProcessInstance(procInst);
		} else 
			return null;
	}
	public List<ProcessInstance> findProcessInstancesByProcessEvent(String eventType) {
		List<MongoProcessInstanceInfo> mongoInstances = store.findProcessInstancesByProcessEvent(eventType);
		List<ProcessInstance> instances = new ArrayList<ProcessInstance>();
		for (MongoProcessInstanceInfo mongoInstance:

    		processInstanceInfoCache.put(mongoInstance.getProcessInstanceId(),  mongoInstance);
			instances.add(toProcessInstance(mongoInstance));
		}
		return instances;
	}
    @Override
    public ProcessInstance getProcessInstance(CorrelationKey correlationKey) {
		MongoProcessInstanceInfo procInst = store.findProcessInstanceInfoByProcessCorrelationKey(correlationKey);
		if (procInst != null) { 
    		processInstanceInfoCache.put(procInst.getProcessInstanceId(),  procInst);
    		return toProcessInstance(procInst);
		} else 
			return null;
	}
    @Override
    public void removeProcessInstance(ProcessInstance processInstance) {
    	if (processInstance == null) return;
    	long procInstId = processInstance.getId();
		store.removeProcessInstanceInfo(procInstId);
        internalRemoveProcessInstance(processInstance);
    }
    
    public MongoProcessInstanceInfo findProcessInstanceInfo(long procInstId) {
    	MongoProcessInstanceInfo procInstInfo = processInstanceInfoCache.get(procIns
/**
 * 
 */
/**
 * @author shusanzhan
 * @date 2013-6-22
 */
public class DimensionaManageImplTest extends SpringTxTestCase{
	private DimensionaManageImpl dimensionaManageImpl;
	@Resource
	public void setDimensionaManageImpl(DimensionaManageImpl dimensionaManageImpl) {
		this.dimensionaManageImpl = dimensionaManageImpl;
	}
	private BreaderBreedManageImpl breaderBreedManageImpl;
	private ChickenBatchManageImpl chickenBatchManageImpl;
	private UserManageImpl userManageImpl;
	private BreederManageImpl breederManageImpl;
	@Resource
	public void setUserManageImpl(UserManageImpl userManageImpl) {
		this.userManageImpl = userManageImpl;
	}
	@Resource
	public void setBreederManageImpl(BreederManageImpl breederManageImpl) {
		this.breederManageImpl = breederManageImpl;
	}
	@Resource
	public void setBreaderBreedManageImpl(
			BreaderBreedManageImpl breaderBreedManageImpl) {
		this.breaderBreedManageImpl = breaderBreedManageImpl;
	}
	@Resource
	public void setChickenBatchManageImpl(
			ChickenBat

		this.chickenBatchManageImpl = chickenBatchManageImpl;
	}
	private BreedManageImpl breedManageImpl;
	@Resource
	public void setBreedManageImpl(BreedManageImpl breedManageImpl) {
		this.breedManageImpl = breedManageImpl;
	}
	private GradeManageImpl gradeManageImpl;
	@Resource
	public void setGradeManageImpl(GradeManageImpl gradeManageImpl) {
		this.gradeManageImpl = gradeManageImpl;
	}
	@Test
	public void testCRUD() throws Exception {
		
		ChickenBatch chickenBatch=new ChickenBatch();
		Breed breed=new Breed();
		breed.setName("name");
		breed.setCharacteristic("characteristic");
		breed.setNote("note");
		breed.setCharCode("charCode");
		breedManageImpl.save(breed);
		
		Grade grade=new Grade();
		grade.setName("name");
		grade.setLevel("level");
		grade.setNote("note");
		grade.setRetailPrice(Float.valueOf("1.0"));
		gradeManageImpl.save(grade);
		
		chickenBatch.setBreed(breed);
		chickenBatch.setGrade(grade);
		chickenBatch.setBatchNo("batchNo");
		chickenBatch.setName("name");
		

		chickenBatch.setAge(1);
		chickenBatch.setOutBarDate(new java.util.Date());
		chickenBatch.setIntoBarDate(new java.util.Date());
		chickenBatchManageImpl.save(chickenBatch);
				
		Dimensiona dimensiona=new Dimensiona();
		dimensiona.setChickenbatch(chickenBatch);
		dimensiona.setName("name");
		dimensiona.setCreateDate(new java.util.Date());
		dimensiona.setQuantity(1);
		dimensionaManageImpl.save(dimensiona);
		assertNotNull(dimensiona.getDbid());
		dimensiona=dimensionaManageImpl.get(dimensiona.getDbid());
		assertNotNull(dimensiona.getDbid());
		assertEquals("name",dimensiona.getName());
		assertNotNull(dimensiona.getCreateDate());
		assertEquals(new Integer(1),dimensiona.getQuantity());
		dimensiona.setName("name1");
		dimensionaManageImpl.save(dimensiona);
		dimensiona=dimensionaManageImpl.get(dimensiona.getDbid());
		assertNotNull(dimensiona.getDbid());
		assertEquals("name1",dimensiona.getName());
		assertNotNull(dimensiona.getCreateDate());
		assertEquals(new Integer(1),dim
/**
 * User: Blackrush
 * Date: 27/12/11
 * Time: 15:48
 * IDE : IntelliJ IDEA
 */
public interface IRepositoryManager {
    void start();
    void stop();
    void save() throws SQLException;
    AccountRepository getAccounts();
    CharacterRepository getCharacters();
    ItemRepository getItems();
    SpellRepository getSpells();
    FriendRepository getFriends();
    NpcRepository getNpcs();
    GuildRepository getGuilds();
    GuildMemberRepository getGuildMembers();
    BreedTemplateRepository getBreedTemplates();
    ExperienceTemplateRepository getExperienceTemplates();
    MapRepository getMaps();
    MapTriggerRepository getMapTriggers();
    SpellTemplateRepository getSpellTemplates();
    SpellBreedRepository getSpellBreeds();
    ItemTemplateRepository getItemTemplates();
    ItemSetTemplateRepository getItemSetTemplates();
    NpcTemplateRepository getNpcTemplates();
    NpcQuestionRepository getNpcQuestions();
    NpcResponseRepository getNpcResponses();
    NpcSellRepos
/**
 * Benutzer Hotelier, kann seine zugeordneten Hotels verwalten
 */
public class Hotelier extends AbstractUser {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private boolean canManageCategories;
	private boolean canManageRooms;
	private boolean canManageBookings;
	private boolean canManageServices;
	private ArrayList<String> hotels = new ArrayList<String>();
	/**
	 * Konstruktor mit expliziten Rechten
	 */
	public Hotelier(String username, String password, boolean canManageCategories, boolean canManageRooms, boolean canManageBookings, boolean canManageServices) {
		super(username, password);
		this.canManageCategories = canManageCategories;
		this.canManageRooms = canManageRooms;
		this.canManageBookings = canManageBookings;
		this.canManageServices = canManageServices;
	}
	/**
	 * Konstruktor mit allen Rechten
	 */
	public Hotelier(String username, String password) {
		super(username, password);
		this.canManageCategories = true;
		this.canManageRooms = true;
	

		this.canManageServices = true;
	}
	/**
	 * @param hotel Hotel, das dem Hotelier-Objekt hinzugefuegt wird
	 */
	public void addHotel(Hotel hotel){	
		hotels.add(hotel.getName());
	}
	/**
	 * @param hotel Hotel, das entfernt wird
	 */
	public void removeHotel(Hotel hotel){	
		hotels.remove(hotel.getName());	
	}
	/**
	 * @return Gibt ArrayList an Hotels zurueck, die dem Hotelier zugewiesen sind
	 */
	public ArrayList<String> getHotels() {
		return hotels;
	}
	/**
	 * @param hotels
	 */
	public void setHotels(ArrayList<Hotel> hotels) {
		this.hotels = new ArrayList<String>();
		
		for (Hotel h : hotels) {
			this.hotels.add(h.getName());
		}
	}
	/**
	 * @return Berechtigung, Kategorien zu verwalten
	 */
	public boolean isCanManageCategories() {
		return canManageCategories;
	}
	/**
	 * @param canCreateCategory this
	 */
	public void setCanManageCategories(boolean canManageCategories) {
		this.canManageCategories = canManageCategories;
	}
	/**
	 * @return Berechtigung, Räume zu verwalten
public class PrintLine extends Process {
	String message;
	ProcessName creatorOutID;
	int creatorInID;
	public PrintLine(int inID, ProcessName outID, LinkedList<Process> processList,
					 Process parentProcess, CPU cpu, OS os, ProcessState processState,
					 int processPriority) {
		super(inID, outID, processList, parentProcess, cpu, os, processState, processPriority);
	}
	@Override
	public void step() {
		switch (nextInstruction) {
		case 1:
			processDescriptor.os.requestResource(this, ResourceName.PRANESIMAS_PRINTLINE);
			nextInstruction++;
			break;
		case 2:
			message = (String) processDescriptor.ownedResourceList.getLast().getComponent();
			creatorOutID = processDescriptor.ownedResourceList.getLast().resourceDescriptor.getCreatorProcess().processDescriptor.outID;
			creatorInID = processDescriptor.ownedResourceList.getLast().resourceDescriptor.getCreatorProcess().processDescriptor.inID;
			processDescriptor.os.requestResource(this, ResourceName.ISVEDIMO_IRENGINYS);
			nextIn
public class LendingProcessStartupAction extends ActionSupport {
	private static final long serialVersionUID = 1L;
	private List<LendingProcess> lendingProcesses;
	private LendingProcessService lendingProcessService;
	private Long paramLendingProcess;
	private LendingProcess lendingProcessBean;
	public String execute() throws Exception {
		lendingProcesses = lendingProcessService.listLendingProcesses();
		if (!(paramLendingProcess == null)) {
			setLendingProcessBean(lendingProcessService
					.findLendingProcessById(paramLendingProcess));
		}
		System.out.println("Startup LendingProcess Ende");
		return "lendingProcessSuccess";
	}
	public Long getParamLendingProcess() {
		return paramLendingProcess;
	}
	public void setParamLendingProcess(Long paramLendingProcess) {
		this.paramLendingProcess = paramLendingProcess;
	}
	public LendingProcessService getLendingProcessService() {
		return lendingProcessService;
	}
	public void setLendingProcessService(
			LendingProcessService lendingProce
/**
 *
 * Copyright (c) 2011 Application Security, Inc.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 *
 * Contributors:
 *     Application Security, Inc.
 */
public final class Callback
    /**
     * Optional - Specify an xwss callback handler.
     *
     * @parameter
     */
    private String xwssCallbackHandler;
    /**
     * Optional - Specify a jmac Callback Handler.
     *
     * @parameter
     */
    private String jmacCallbackHandler;
    /**
     * Optional - The username handler to be included in the autogenerated policy.
     *
     * @parameter
     */
    private String usernameHandler;
    /**
     * Optional - The password handler to be included in the autogenerated policy.
     *
     * @parameter
     */
    private String passwordHandler;
    /**
     * Optional - The SAML handler to be included in the auto

     *
     * @parameter samlhandler
     */
    private String samlHandler;
    public String getXwssCallbackHandler()
    {
        return xwssCallbackHandler;
    }
    public String getJmacCallbackHandler()
    {
        return jmacCallbackHandler;
    }
    public String getUsernameHandler()
    {
        return usernameHandler;
    }
    public String getPasswordHandler()
    {
        return passwordHandler;
    }
    public String getSamlHandler()
    {
        return samlHandler;
    }
    public void setXwssCallbackHandler(String xwssCallbackHandler)
    {
        this.xwssCallbackHandler = xwssCallbackHandler;
    }
    public void setJmacCallbackHandler(String jmacCallbackHandler)
    {
        this.jmacCallbackHandler = jmacCallbackHandler;
    }
    public void setUsernameHandler(String usernameHandler)
    {
        this.usernameHandler = usernameHandler;
    }
    public void setPasswordHandler(String passwordHandler)
    {
        this.passwordHandler = passwordHandle
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Son
 */
public class ServiceManager {
    private AdminManagerService adminManagerService;
    private CentreManagerService centreManagerService;
    private EmployeeManagerService empManagerService;
    private ZoneManagerService zoneManagerService;
    private CustomerManagerService custManagerService;
    public ServiceManager() {
        adminManagerService = new AdminManagerService();
        centreManagerService = new CentreManagerService();
        empManagerService = new EmployeeManagerService();
        zoneManagerService = new ZoneManagerService();
        custManagerService = new CustomerManagerService();
    }
    
    public AdminManagerService getAdminManagerService() {
        return adminManagerService;
    }
    public CentreManagerService getCentreManagerService() {
        return centreManagerService;
    }
    public EmployeeManagerService getEmpMana
@Service("egovDeptManageService")
public class EgovDeptManageServiceImpl extends AbstractServiceImpl implements EgovDeptManageService {
	@Resource(name="deptManageDAO")
    private DeptManageDAO deptManageDAO;
	/**
	 * 부서를 관리하기 위해 등록된 부서목록을 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return List - 부서 목록
	 * 
	 * @param deptManageVO
	 */
	public List<DeptManageVO> selectDeptManageList(DeptManageVO deptManageVO) throws Exception {
		return deptManageDAO.selectDeptManageList(deptManageVO);
	}
	/**
	 * 부서목록 총 갯수를 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return int - 부서 카운트 수
	 * 
	 * @param deptManageVO
	 */
	public int selectDeptManageListTotCnt(DeptManageVO deptManageVO) throws Exception {
		return deptManageDAO.selectDeptManageListTotCnt(deptManageVO);
	}
	/**
	 * 등록된 부서의 상세정보를 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return deptManageVO - 부서 Vo
	 * 
	 * @param deptManageVO
	 */
	public DeptManageVO selectDeptManage(DeptManageVO deptManageVO) throws Exception {
		return deptManageDAO
public class ServiceLocator {
    private static final Logger logger = Logger.getLogger(ServiceLocator.class);
    private static StoreMessageService storeMessageService;
    private static AccountService accountService;
    private static SiteService siteService;
    private static PropertyService propertyService;
    private static TemplateService templateService;
    private static AllUserService allUserService;
    private static UserService userService;
    private static SiteHierarchyService siteHierarchyService;
    private static ServiceTypeService serviceTypeService;
    private static WorkflowService workflowService;
    private static CatalogService catalogService;
    private static ManufacturerService manufacturerService;
    private static ItemService itemService;
    private static DistributorService distributorService;
    private static GroupService groupService;
    private static CostCenterService costCenterService;
    private static TradingPartnerService tradingPar

    private static ScheduleService scheduleService;
    private static EventService eventService;
    private static OrderService orderService;
    private static BusEntityService busEntityService;
    private static StoreService storeService;
    public static StoreMessageService getStoreMessageService() {
        return storeMessageService;
    }
	public static AllUserService getAllUserService() {
        return allUserService;
    }
	public static UserService getUserService() {
        return userService;
    }
    public static AccountService getAccountService() {
        return accountService;
    }
    public static SiteService getSiteService() {
        return siteService;
    }
    public static PropertyService getPropertyService() {
        return propertyService;
    }
    public static TemplateService getTemplateService() {
        return templateService;
    }
    public static SiteHierarchyService getSiteHierarchyService() {
        return siteHierarchyService;
    }
    

		return serviceTypeService;
	}
    public static WorkflowService getWorkflowService() {
		return workflowService;
	}
    public static CatalogService getCatalogService() {
		return catalogService;
	}
    public static GroupService getGroupService() {
		return groupService;
	}
    
	public static ManufacturerService getManufacturerService() {
        return manufacturerService;
    }
    
	public static DistributorService getDistributorService() {
        return distributorService;
    }
	public static CostCenterService getCostCenterService() {
        return costCenterService;
    }
    
	public static TradingPartnerService getTradingPartnerService() {
        return tradingPartnerService;
    }
    
	public static ScheduleService getScheduleService() {
        return scheduleService;
    }
	public static EventService getEventService() {
        return eventService;
    }
    public static ItemService getItemService() {
        return itemService;
    }
    
    public static OrderSe

        return orderService;
    }
    
    public static BusEntityService getBusEntityService() {
        return busEntityService;
    }
    public static StoreService getStoreService() {
        return storeService;
    }
    @Autowired
	public void setServiceTypeService(ServiceTypeService serviceTypeService) {
		ServiceLocator.serviceTypeService = serviceTypeService;
	}
    @Autowired
    public void setAllUserService(AllUserService allUserService) {
        ServiceLocator.allUserService = allUserService;
    }
    @Autowired
    public void setUserService(UserService userService) {
        ServiceLocator.userService = userService;
    }
    @Autowired
    public void setSiteHierarchyService(SiteHierarchyService siteHierarchyService) {
        ServiceLocator.siteHierarchyService = siteHierarchyService;
    }
    @Autowired
    public void setTemplateService(TemplateService templateService) {
        ServiceLocator.templateService = templateService;
    }
    @Autowired
    public v

        ServiceLocator.accountService = accountService;
    }
    @Autowired
    public void setSiteService(SiteService siteService) {
        ServiceLocator.siteService = siteService;
    }
    @Autowired
    public void setPropertyService(PropertyService propertyService) {
        ServiceLocator.propertyService = propertyService;
    }
    @Autowired
    public void setStoreMessageService(StoreMessageService storeMessageService) {
        ServiceLocator.storeMessageService = storeMessageService;
    }
    
    @Autowired
	public void setWorkflowService(WorkflowService workflowService) {
		ServiceLocator.workflowService = workflowService;
	}
    @Autowired
	public void setCatalogService(CatalogService catalogService) {
		ServiceLocator.catalogService = catalogService;
	}
    @Autowired
	public void setGroupService(GroupService groupService) {
		ServiceLocator.groupService = groupService;
	}
    @Autowired
	public void setManufacturerService(ManufacturerService manufacturerService) {


	}
    @Autowired
	public void setDistributorService(DistributorService distributorService) {
		ServiceLocator.distributorService = distributorService;
	}
    @Autowired
	public void setTradingPartnerService(TradingPartnerService tradingPartnerService) {
		ServiceLocator.tradingPartnerService = tradingPartnerService;
	}
    @Autowired
	public void setScheduleService(ScheduleService scheduleService) {
		ServiceLocator.scheduleService = scheduleService;
	}
    @Autowired
	public void setCostCenterService(CostCenterService costCenterService) {
		ServiceLocator.costCenterService = costCenterService;
	}
    
    @Autowired
	public void setEventService(EventService eventService) {
		ServiceLocator.eventService = eventService;
	}
	@Autowired
	public void setItemService(ItemService itemService) {
        ServiceLocator.itemService = itemService;
    }
    
    @Autowired
    public void setOrderService(OrderService orderService) {
        ServiceLocator.orderService = orderService;
    }
    
public class MavenRepositoryFactory {
	public static RepositorySystem createRepositorySystem() {
		DefaultServiceLocator locator = new DefaultServiceLocator();
		locator.addService(RepositoryConnectorFactory.class,
				FileRepositoryConnectorFactory.class);
		locator.addService(RepositoryConnectorFactory.class,
				WagonRepositoryConnectorFactory.class);
		locator.setServices(WagonProvider.class, new MavenImporterWagonProvider());
		return locator.getService(RepositorySystem.class);
	}
	public static RepositorySystemSession createRepositorySystemSession(
			RepositorySystem system) {
		MavenRepositorySystemSession session = new MavenRepositorySystemSession();
		LocalRepository localRepo = new LocalRepository("target/local-repo");
		session.setLocalRepositoryManager(system
				.newLocalRepositoryManager(localRepo));
		session.setTransferListener(new ConsoleTransferListener());
		session.setRepositoryListener(new ConsoleRepositoryListener());
		return session;
	}
	public static RemoteRep
/**
 * <pre>
 * 业务名:
 * 功能说明: 
 * 编写日期:	2011-8-26
 * 作者:	xiaoqi
 * 
 * 历史记录
 * 1、修改日期：
 *    修改人：
 *    修改内容：
 * </pre>
 */
public interface AppManageService
	/**
	 * 方法说明： 
	 * 
	 * @param e 
	 */
	public void delete(AppManage e);
	/**
	 * 方法说明： 
	 * 
	 * @param id 
	 */
	public void deleteById(Serializable id);
	/**
	 * 方法说明：  
	 * 
	 * @param id 
	 * @return AppManage
	 */
	public AppManage findById(Serializable id);
	/**
	 * 方法说明： 
	 * 
	 * @param property 
	 * @param value 
	 * @return List<AppManage>
	 */
	public List<AppManage> findByProperty(String property, Object value);
	/**
	 * 方法说明： 
	 * 
	 * @param pageModel 
	 * @return Page<AppManage>
	 */
	public Page<AppManage> loadPage(Page<AppManage> pageModel);
	/**
	 * 方法说明： 
	 * 
	 * @param e 
	 */
	public void save(AppManage e);
	/**
	 * 方法说明： 
	 * 
	 * @param e 
	 * @return AppManage
	 */
	public AppManage update(AppManage e);
	/**
	 * 方法说明：模糊查询appManage对象中属性值不为NULL的appManage信息
	 * 
	 * @param obj
	 *            appManage对象
	 *
/**
 * 권한관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Service("egovAuthorManageService")
public class EgovAuthorManageServiceImpl extends EgovAbstractServiceImpl implements EgovAuthorManageService {
    
	@Resource(name="authorManageDAO")
    private AuthorManageDAO authorManageDAO;
    /**
	 * 권한 목록을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return List<AuthorManageVO>
	 * @exception Exception
	 */
    public List<AuthorManageVO> selectAuthorList(AuthorManageVO authorManageVO) throws Exception {
        return authorManageDAO.selectAuthorList(authorManageVO);
    }
    
	/**
	 * 권한을 등록한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void insertAuthor(AuthorManage authorManage) throws Exceptio

    	authorManageDAO.insertAuthor(authorManage);
    }
    /**
	 * 권한을 수정한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void updateAuthor(AuthorManage authorManage) throws Exception {
    	authorManageDAO.updateAuthor(authorManage);
    }
    /**
	 * 권한을 삭제한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void deleteAuthor(AuthorManage authorManage) throws Exception {
    	authorManageDAO.deleteAuthor(authorManage);
    }
    /**
	 * 권한을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return AuthorManageVO
	 * @exception Exception
	 */
    public AuthorManageVO selectAuthor(AuthorManageVO authorManageVO) throws Exception {
    	AuthorManageVO resultVO = authorManageDAO.selectAuthor(authorManageVO);
        if (resultVO == null)
            throw processException("info.nodata.msg");
        return resultVO;
    }
    /**
	 * 권한 목록 카운트를 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return int
	 * @exception Exc
/**
 * 
 */
/**
 * @作者:彭乐
 * @功能: 
 * @时间:2015-11-27 上午10:55:54
 * @邮箱:pengle@hztianque.com
 */
public interface UnlicensedManageService {
	/**
	 * 保存
	 */
	public UnlicensedManage addUnlicensedManage(UnlicensedManage info);
	/**
	 * 查询列表
	 */
	public PageInfo<UnlicensedManage> getUnlicensedManageListByQuery(UnlicensedManage unlicensedManage,
			Integer page, Integer rows, String sidx, String sord);
	/**
	 * 更新信息
	 * 
	 * @param companyBaseInfo
	 * @return
	 * @throws Exception
	 */
	public UnlicensedManage updateUnlicensedManage(UnlicensedManage unlicensedManage);
	/**
	 * 批量删除信息
	 * 
	 * @param ids
	 */
	public void deleteUnlicensedManageByIds(String ids);
	/**
	 * 获取主表信息
	 * 
	 * @param id
	 * @return
	 */
	public UnlicensedManage getUnlicensedManageById(Long id);
	/**
	 * 签收
	 */
	public UnlicensedManage signUnlicensedManage(UnlicensedManage unlicensedManage);
	/**
	 * 回复
	 */
	public UnlicensedManage replyUnlicensedManage(UnlicensedManage unlicensedManage);
/**
 * 手机新增
 * @param i
public interface ProductModuleService {
    public BrandService getBrandService();
    public TotalBrandService getTotalBrandService();
    public CatalogService getCatalogService();
    public TotalCatalogService getTotalCatalogService();
    public CatalogPropertyService getCatalogPropertyService();
    public TotalCatalogPropertyService getTotalCatalogPropertyService();
    public CatalogPropertyValueService getCatalogPropertyValueService();
    public TotalCatalogPropertyValueService getTotalCatalogPropertyValueService();
    public ImpressionService getImpressionService();
    public TotalImpressionService getTotalImpressionService();
    public ProductService getProductService();
    public TotalProductService getTotalProductService();
    public ProductDescriptionService getProductDescriptionService();
    public TotalProductDescriptionService getTotalProductDescriptionService();
    public ProductImageService getProductImageService();
    public TotalProductImageService getTota

    public ProductImpressionService getProductImpressionService();
    public TotalProductImpressionService getTotalProductImpressionService();
    public ProductFreightService getProductFreightService();
    public TotalProductFreightService getTotalProductFreightService();
    public ProductAuditService getProductAuditService();
    public TotalProductAuditService getTotalProductAuditService();
    public ProductCatalogPropertyValueService getProductCatalogPropertyValueService();
    public TotalProductCatalogPropertyValueService getTotalProductCatalogPropertyValueService();
    public SkuService getSkuService();
    public TotalSkuService getTotalSkuService();
    public SkuPropertyService getSkuPropertyService();
    public TotalSkuPropertyService getTotalSkuPropertyService();
    public SkuPropertyRelationshipValueService getSkuPropertyRelationshipValueService();
    public TotalSkuPropertyRelationshipValueService getTotalSkuPropertyRelationshipValueService();
    public ProductS
/**
 * 설문관리를 처리하는 Dao Class 구현
 * @author 공통서비스 장동한
 * @since 2009.03.20
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  장동한          최초 생성
 *
 * </pre>
 */ 
@Repository("qustnrManageDao")
public class QustnrManageDao extends EgovComAbstractDAO {
    /**
	 * 설문템플릿 목록을 조회한다. 
	 * @param qustnrManageVO - 설문관리 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
	public List selectQustnrTmplatManageList(QustnrManageVO qustnrManageVO) throws Exception{
		return (List)list("QustnrManage.selectQustnrTmplatManage", qustnrManageVO);
	}
    /**
	 * 설문관리 목록을 조회한다. 
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	public List selectQustnrManageList(ComDefaultVO searchVO) throws Exception{
		return (List)list("QustnrManage.selectQustnrManage", searchVO);
	}
    /**
	 * 설문관리를 상세조회(Model) 한다. 
	 * @param qustnrManageVO - 설문관리 정보 담김

	 * @return List
	 * @throws Exception
	 */
    public QustnrManageVO selectQustnrManageDetailModel(QustnrManageVO qustnrManageVO) throws Exception {    	
        return (QustnrManageVO) selectByPk("QustnrManage.selectQustnrManageDetailModel", qustnrManageVO);
    }
    
    /**
	 * 설문관리를(을) 상세조회 한다.
	 * @param qustnrManageVO - 설문관리 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
	public List selectQustnrManageDetail(QustnrManageVO qustnrManageVO) throws Exception{
		return (List)list("QustnrManage.selectQustnrManageDetail", qustnrManageVO);
	}
    /**
	 * 설문관리를(을) 목록 전체 건수를(을) 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return int
	 * @throws Exception
	 */
	public int selectQustnrManageListCnt(ComDefaultVO searchVO) throws Exception{
		return (Integer)getSqlMapClientTemplate().queryForObject("QustnrManage.selectQustnrManageCnt", searchVO);
	}
    /**
	 * 설문관리를(을) 등록한다.
	 * @param qqustnrManageVO - 설문관리 정보 담김 VO
	 * @throws Exception
	 */
	public void insertQustnrManage(Qustn
public class DefaultObjectProcessManager implements ObjectProcessManager {
    ProcessManager processManager;
    SchemaFactory schemaFactory;
    ObjectManager objectManager;
    @Override
    public ExitReason executeStandardProcess(StandardProcess process, Object resource, Map<String, Object> data) {
        String processName = getProcessName(resource, process);
        ProcessInstance pi = createProcessInstance(processName, resource, data);
        return pi.execute();
    }
    @Override
    public void scheduleStandardProcess(StandardProcess process, Object resource, Map<String, Object> data) {
        scheduleStandardProcess(process, resource, data, null);
    }
    @Override
    public void scheduleStandardProcess(StandardProcess process, Object resource, Map<String, Object> data, Predicate predicate) {
        String processName = getProcessName(resource, process);
        scheduleProcessInstance(processName, resource, data, predicate);
    }
    @Override
    public void sch

        LaunchConfiguration config = ObjectLaunchConfigurationUtils.createConfig(schemaFactory, processName, resource, data);
        config.setPredicate(predicate);
        processManager.scheduleProcessInstance(config);
    }
    @Override
    public void scheduleProcessInstance(String processName, Object resource, Map<String, Object> data) {
        scheduleProcessInstance(processName, resource, data, null);
    }
    protected String getProcessName(Object resource, StandardProcess process) {
        String type = objectManager.getType(resource);
        return getStandardProcessName(process, type);
    }
    @Override
    public String getStandardProcessName(StandardProcess process, String type) {
        return type.toLowerCase() + "." + process.toString().toLowerCase();
    }
    @Override
    public String getStandardProcessName(StandardProcess process, Object obj) {
        return getProcessName(obj, process);
    }
    @Override
    public ProcessInstance createProcessInstanc
/**********************************************************************************
 * $Id: Repository.java 59673 2009-04-03 23:02:03Z arwhyte@umich.edu $
 **********************************************************************************
 *
 * Copyright (c) 2003, 2004, 2005, 2007, 2008 The Sakai Foundation
 *
 * Licensed under the Educational Community License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 **********************************************************************************/
public abstract class Repository
implements org.osid.repository.Repository
    p

    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void updateDisplayName(String displayName)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public String getDescription()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void updateDescription(String description)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Id getId()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Type getType(

    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset createAsset(String displayName
                                               , String description
                                               , org.osid.shared.Type assetType)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void deleteAsset(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.AssetIterator getAssets()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.AssetIterator 

    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.TypeIterator getAssetTypes()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RecordStructureIterator getRecordStructures()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RecordStructureIterator getMandatoryRecordStructures(org.osid.shared.Type assetType)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.TypeIterator getSearchTypes()
    throws org.osid.repository.RepositoryException
    {
		  throw ne

    }
    public org.osid.shared.TypeIterator getStatusTypes()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Type getStatus(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public boolean validateAsset(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void invalidateAsset(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset getAsset(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryExcept

    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset getAssetByDate(org.osid.shared.Id assetId
                                                  , long date)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.LongValueIterator getAssetDates(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.AssetIterator getAssetsBySearch(java.io.Serializable searchCriteria
                                                             , org.osid.shared.Type searchType
                                                             , org.osid.shared.Properties searchProperties)
    throws org.osid.repository.RepositoryException


		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Id copyAsset(org.osid.repository.Asset asset)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RecordStructureIterator getRecordStructuresByType(org.osid.shared.Type recordStructureType)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.PropertiesIterator getProperties()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Properties getPropertiesByType(org.osid.shared.Type propertiesType)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid
public class Dependencies {
    private UserRepository userRepository;
    private ProductRepository productRepository;
    private Encryptor encryptor;
    private SalesOrderRepository salesOrderRepository;
    public UserRepository getUserRepository() {
        return userRepository;
    }
    public void setUserRepository(UserRepository userRepository) {
        this.userRepository = userRepository;
    }
    public ProductRepository getProductRepository() {
        return productRepository;
    }
    public void setProductRepository(ProductRepository productRepository) {
        this.productRepository = productRepository;
    }
    public Encryptor getEncryptor() {
        return encryptor;
    }
    public void setEncryptor(Encryptor encryptor) {
        this.encryptor = encryptor;
    }
    public SalesOrderRepository getSalesOrderRepository() {  return salesOrderRepository; }
    public void setSalesOrderRepository(SalesOrderRepository salesOrderRepository){ this.salesOrderRepos
interface Service {
	public void f();
	public void g();
interface ServiceFactory {
	public Service getService();
class ServiceIml1 implements Service {
	private ServiceIml1() {
	}
	@Override
	public void f() {
		System.out.println(this + " g()");
	}
	@Override
	public void g() {
		System.out.println(this + " g()");
	};
	public static ServiceFactory factory = new ServiceFactory() {
		@Override
		public Service getService() {
			return new ServiceIml1();
		}
	};
class ServiceIml2 implements Service {
	private ServiceIml2() {
	}
	@Override
	public void f() {
		System.out.println(this + " g()");
	}
	@Override
	public void g() {
		System.out.println(this + " g()");
	};
	/* use anonymous inner class to implement "Service Factory Pattern" */
	public static ServiceFactory factory = new ServiceFactory() {
		@Override
		public Service getService() {
			return new ServiceIml2();
		}
	};
public class Factorys {
	public static void serviceConsumer(ServiceFactory fact) {
		Service service = fact.get
/**
 * 일지관리를 처리하는 Dao Class 구현
 * @author 공통서비스 장동한
 * @since 2009.04.10
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.04.10  장동한          최초 생성
 *
 * </pre>
 */
@Repository("diaryManageDao")
public class DiaryManageDao extends EgovComAbstractDAO {
    /**
	 * 일지관리 목록을 조회한다. 
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	public List selectDiaryManageList(ComDefaultVO searchVO) throws Exception{
		return (List)list("DiaryManage.selectDiaryManage", searchVO);
	}
    /**
	 * 일지관리를(을) 상세조회 한다.
	 * @param diaryManageVO - 일지관리 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
	public DiaryManageVO selectDiaryManageDetail(DiaryManageVO diaryManageVO) throws Exception{
		return (DiaryManageVO)getSqlMapClientTemplate().queryForObject("DiaryManage.selectDiaryManageDetail", diaryManageVO);
	}
    /**
	 * 일지관리를(을) 목록 전체 건수를(을) 조
/**
 * Identity v3 Service Operations API
 *
 */
public interface IdentityService extends RestService {
    /**
     * Credential Service API
     *
     * @return the credential service
     */
    CredentialService credentials();
    /**
     * Domain Service API
     *
     * @return the domain service
     */
    DomainService domains();
    /**
     * Projects Service API
     *
     * @return the project service
     */
    ProjectService projects();
    /**
     * Users Service API
     *
     * @return the user service
     */
    UserService users();
    /**
     * Role Service API
     *
     * @return the role service
     */
    RoleService roles();
    /**
     * Group Service API
     *
     * @return the group service
     */
    GroupService groups();
    
    /**
     * Token Service API
     * 
     * @return the token service
     */
    TokenService tokens();
    /**
     * Policy Service API
     *
     * @return the policy service
     */
    PolicyService policie
/**********************************************************************************
 * $URL$
 * $Id$
 **********************************************************************************
 *
 * Copyright (c) 2003, 2004, 2005, 2007, 2008 The Sakai Foundation
 *
 * Licensed under the Educational Community License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 **********************************************************************************/
public abstract class Repository
implements org.osid.repository.Repository
    public String getDisplayName()
    throws org.osid.repo

    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void updateDisplayName(String displayName)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public String getDescription()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void updateDescription(String description)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Id getId()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Type getType()
    throws org.osid.repository.RepositoryExceptio

    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset createAsset(String displayName
                                               , String description
                                               , org.osid.shared.Type assetType)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void deleteAsset(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.AssetIterator getAssets()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.AssetIterator getAssetsByType(org.osid.shared.Type assetType)
   

    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.TypeIterator getAssetTypes()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RecordStructureIterator getRecordStructures()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RecordStructureIterator getMandatoryRecordStructures(org.osid.shared.Type assetType)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.TypeIterator getSearchTypes()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.

    }
    public org.osid.shared.TypeIterator getStatusTypes()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Type getStatus(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public boolean validateAsset(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void invalidateAsset(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset getAsset(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryExcept

    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset getAssetByDate(org.osid.shared.Id assetId
                                                  , long date)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.LongValueIterator getAssetDates(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.AssetIterator getAssetsBySearch(java.io.Serializable searchCriteria
                                                             , org.osid.shared.Type searchType
                                                             , org.osid.shared.Properties searchProperties)
    throws org.osid.repository.RepositoryException


		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Id copyAsset(org.osid.repository.Asset asset)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RecordStructureIterator getRecordStructuresByType(org.osid.shared.Type recordStructureType)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.PropertiesIterator getProperties()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Properties getPropertiesByType(org.osid.shared.Type propertiesType)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid
public enum ManageOfferResultCode  {
  MANAGE_OFFER_SUCCESS(0),
  MANAGE_OFFER_MALFORMED(-1),
  MANAGE_OFFER_SELL_NO_TRUST(-2),
  MANAGE_OFFER_BUY_NO_TRUST(-3),
  MANAGE_OFFER_SELL_NOT_AUTHORIZED(-4),
  MANAGE_OFFER_BUY_NOT_AUTHORIZED(-5),
  MANAGE_OFFER_LINE_FULL(-6),
  MANAGE_OFFER_UNDERFUNDED(-7),
  MANAGE_OFFER_CROSS_SELF(-8),
  MANAGE_OFFER_SELL_NO_ISSUER(-9),
  MANAGE_OFFER_BUY_NO_ISSUER(-10),
  MANAGE_OFFER_NOT_FOUND(-11),
  MANAGE_OFFER_LOW_RESERVE(-12),
  ;
  private int mValue;
  ManageOfferResultCode(int value) {
      mValue = value;
  }
  public int getValue() {
      return mValue;
  }
  static ManageOfferResultCode decode(XdrDataInputStream stream) throws IOException {
    int value = stream.readInt();
    switch (value) {
      case 0: return MANAGE_OFFER_SUCCESS;
      case -1: return MANAGE_OFFER_MALFORMED;
      case -2: return MANAGE_OFFER_SELL_NO_TRUST;
      case -3: return MANAGE_OFFER_BUY_NO_TRUST;
      case -4: return MANAGE_OFFER_SELL_NOT_AUTHORIZED;
      ca
public class TenantRepositoryFactoryBean<R extends JpaRepository<T, I>, T, I extends Serializable>
extends JpaRepositoryFactoryBean<R, T, I> {
	protected RepositoryFactorySupport  createRepositoryFactory(EntityManager entityManager) {
		final MyRepositoryFactory fac=new MyRepositoryFactory(entityManager);
		
		fac.addQueryCreationListener(new QueryCreationListener<RepositoryQuery>() {
			public void onCreation(RepositoryQuery query) {
				
			}
		});
		
		fac.addRepositoryProxyPostProcessor(new RepositoryProxyPostProcessor() {
			
			public void postProcess(ProxyFactory factory,
					RepositoryInformation repositoryInformation) {
				
			}
		});
		
	    return fac;
	  }
	  private static class MyRepositoryFactory<T, I extends Serializable> extends JpaRepositoryFactory {
	    private EntityManager entityManager;
	    public MyRepositoryFactory(EntityManager entityManager) {
	      super(entityManager);
	      this.entityManager = entityManager;
	    }
	    protected Object getTargetRepo
public class CoreServiceContainer implements ServiceContainer {
    private final Set<ServiceModule> serviceModules = new HashSet<ServiceModule>();
    private final Map<ServiceDefinition<?>, ServiceFactory<?>> serviceFactoryMap = new HashMap<ServiceDefinition<?>, ServiceFactory<?>>();
    public CoreServiceContainer(ServiceModule... modules) {
        serviceModules.addAll(Arrays.asList(modules));
        for (ServiceModule module : modules) {
            module.initialize();
        }
    }
    @Override
    public <T> T getService(Class<T> serviceType) {
        return getService(serviceType, null);
    }
    @Override
    public <T> T getService(Class<T> serviceType, Enum key) {
        ServiceDefinition<T> foundDefinition = findService(serviceType, key);
        if (foundDefinition != null) {
            ServiceFactory<T> serviceFactory = getServiceFactory(foundDefinition);
            return serviceFactory.createService(this, foundDefinition);
        }
        return null;
    }
/**
 * 그룹관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성
 *
 * </pre>
 */
@Repository("groupManageDAO")
public class GroupManageDAO extends EgovAbstractDAO {
	/**
	 * 검색조건에 따른 그룹정보를 조회
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO selectGroup(GroupManageVO groupManageVO) throws Exception {
		return (GroupManageVO) select("groupManageDAO.selectGroup", groupManageVO);
	}
	/**
	 * 시스템사용 목적별 그룹 목록 조회
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<GroupManageVO> selectGroupList(GroupManageVO groupManageVO) throws Exception {
		return (List<GroupManageVO>) lis

	}
	/**
	 * 그룹 기본정보를 화면에서 입력하여 항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void insertGroup(GroupManage groupManage) throws Exception {
		insert("groupManageDAO.insertGroup", groupManage);
	}
	/**
	 * 화면에 조회된 그룹의 기본정보를 수정하여 항목의 정합성을 체크하고 수정된 데이터를 데이터베이스에 반영
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void updateGroup(GroupManage groupManage) throws Exception {
		update("groupManageDAO.updateGroup", groupManage);
	}
	/**
	 * 불필요한 그룹정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void deleteGroup(GroupManage groupManage) throws Exception {
		delete("groupManageDAO.deleteGroup", groupManage);
	}
    /**
	 * 롤목록 총 갯수를 조회한다.
	 * @param groupManageVO GroupManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectGroupListTotCnt(GroupManageVO groupManageVO) throws Exception {
        return (Integer)select("groupManageDAO.selectGroupListTotCnt
public class ArchitectureVersion {
	private String name;
	private Repository repository;
	private de.uka.ipd.sdq.pcm.system.System system;
	private FieldOfActivityAnnotationRepository fieldOfActivityRepository;
	private ModificationRepository modificationMarkRepository;
	private ComponentInternalDependencyRepository componentInternalDependencyRepository;
	private List<Activity> activityList;
	public ArchitectureVersion(
			String name,
			Repository repository,
			System system,
			FieldOfActivityAnnotationRepository fieldOfActivityRepository,
			ModificationRepository internalModificationMarkRepository,
			ComponentInternalDependencyRepository componentInternalDependencyRepository) {
		super();
		this.name = name;
		this.repository = repository;
		this.system = system;
		this.fieldOfActivityRepository = fieldOfActivityRepository;
		this.modificationMarkRepository = internalModificationMarkRepository;
		this.componentInternalDependencyRepository = componentInternalDependencyRepository;

	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public Repository getRepository() {
		return repository;
	}
	public void setRepository(Repository repository) {
		this.repository = repository;
	}
	public de.uka.ipd.sdq.pcm.system.System getSystem() {
		return system;
	}
	public void setSystem(de.uka.ipd.sdq.pcm.system.System system) {
		this.system = system;
	}
	public FieldOfActivityAnnotationRepository getFieldOfActivityRepository() {
		return fieldOfActivityRepository;
	}
	public void setFieldOfActivityRepository(
			FieldOfActivityAnnotationRepository fieldOfActivityRepository) {
		this.fieldOfActivityRepository = fieldOfActivityRepository;
	}
	public ModificationRepository getModificationMarkRepository() {
		return modificationMarkRepository;
	}
	public void setInternalModificationMarkRepository(
			ModificationRepository internalModificationMarkRepository) {
		this.modificationMarkRepository = internalModificationMarkRep
public class ItRepositoryFactoryBean<T extends Repository<S, ID>, S, ID extends Serializable>
        extends JpaRepositoryFactoryBean<T, S, ID> {
    @Override
    protected RepositoryFactorySupport createRepositoryFactory(
            EntityManager entityManager) {
        return new ItCommonRepositoryFactory(entityManager);
    }
    protected static class ItCommonRepositoryFactory extends
            JpaRepositoryFactory {
        public ItCommonRepositoryFactory(EntityManager entityManager) {
            super(entityManager);
        }
        @Override
        @SuppressWarnings({ "unchecked", "rawtypes" })
        protected <T, ID extends Serializable> JpaRepository<?, ?> getTargetRepository(
                RepositoryMetadata metadata, EntityManager entityManager) {
            Class<?> repositoryInterface = metadata.getRepositoryInterface();
            if (!isItCommonRepository(repositoryInterface)) {
                return super.getTargetRepository(metadata, entityManager);
 
/*******************************************************************************
 * Copyright (c) 2002, 2012 Innoopract Informationssysteme GmbH and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 *
 * Contributors:
 *    Innoopract Informationssysteme GmbH - initial API and implementation
 *    EclipseSource - ongoing implementation
 *    Frank Appel - replaced singletons and static fields (Bug 337787)
 ******************************************************************************/
public class ServiceManager_Test extends TestCase {
  private static final String SERVICE_HANDLER_ID = "serviceHandlerId";
  private IServiceHandler lifeCycleServiceHandler;
  private ServiceManager serviceManager;
  @Override
  protected void setUp() {
    Fixture.setUp();
    lifeCycleServiceHandler = mock( IServiceHandler.class );
    serviceMan

  }
  @Override
  protected void tearDown() {
    Fixture.tearDown();
  }
  public void testRegisterServiceHandler() throws Exception {
    IServiceHandler serviceHandler = mock( IServiceHandler.class );
    serviceManager.registerServiceHandler( SERVICE_HANDLER_ID, serviceHandler );
    assertSame( serviceHandler, serviceManager.getServiceHandler( SERVICE_HANDLER_ID ) );
  }
  public void testRegisterServiceHandlerTwice() throws Exception {
    IServiceHandler firstHandler = mock( IServiceHandler.class );
    IServiceHandler secondHandler = mock( IServiceHandler.class );
    serviceManager.registerServiceHandler( SERVICE_HANDLER_ID, firstHandler );
    serviceManager.registerServiceHandler( SERVICE_HANDLER_ID, secondHandler );
    assertSame( secondHandler, serviceManager.getServiceHandler( SERVICE_HANDLER_ID ) );
  }
  public void testUnregisterServiceHandler() throws Exception {
    IServiceHandler serviceHandler = mock( IServiceHandler.class );
    serviceManager.registerServiceHa

    serviceManager.unregisterServiceHandler( SERVICE_HANDLER_ID );
    assertNull( serviceManager.getServiceHandler( SERVICE_HANDLER_ID ) );
  }
  public void testClear() throws Exception {
    IServiceHandler serviceHandler = mock( IServiceHandler.class );
    serviceManager.registerServiceHandler( SERVICE_HANDLER_ID, serviceHandler );
    serviceManager.clear();
    assertNull( serviceManager.getServiceHandler( SERVICE_HANDLER_ID ) );
  }
  public void testGetHandler_default() throws Exception {
    assertSame( lifeCycleServiceHandler, serviceManager.getHandler() );
  }
  public void testGetHandler_custom() throws Exception {
    IServiceHandler serviceHandler = mock( IServiceHandler.class );
    serviceManager.registerServiceHandler( SERVICE_HANDLER_ID, serviceHandler );
    Fixture.fakeRequestParam( IServiceHandler.REQUEST_PARAM, SERVICE_HANDLER_ID );
    IServiceHandler handler = serviceManager.getHandler();
    assertSame( serviceHandler, handler );
  }
  public void testGetHand
@Service("manageFinancesService")
public class ManageFinancesService {
	@Resource
	private HibernateDao<ManageFinances,String> manageFinancesDao;
	public ManageFinancesForm search(ManageFinancesForm manageFinancesForm) {
		DetachedCriteria detachedCriteria = DetachedCriteria
				.forClass(ManageFinances.class);
		String name= manageFinancesForm.getName();
		String startDate = manageFinancesForm.getStart_date();
		String endDate = manageFinancesForm.getEnd_date();
		
		if (StringUtils.isNotEmpty(name)) {
			detachedCriteria.add(Restrictions.like("name", name,MatchMode.ANYWHERE));
		}
		if (StringUtils.isNotEmpty(startDate)) {
			detachedCriteria.add(Restrictions.ge("record_date", startDate));
		}
		if (StringUtils.isNotEmpty(endDate)) {
			detachedCriteria.add(Restrictions.le("record_date", endDate));
		}
		manageFinancesDao.findPageByDetachedCriteria(detachedCriteria,manageFinancesForm);
		return manageFinancesForm;
	}
	public void save(ManageFinances manageFinances){
		manageFinances.
public class ProcessMainImpl implements ProcessMain {
	private static final long serialVersionUID = -1L;
	public ProcessMainImpl()
	{}
	public void ProcessPublishEntry(String service_url) {
		
		ProcessParser parser = new ProcessParserImpl();
		
		Process process = ProcessResource.GetOWLSProcess(service_url);
		
		long t1 = System.currentTimeMillis();
		
		for(int i = 0; i < 1000; i++)
		{
			parser.ProcessParserEntry(process, i);
		}
		
		long t2 = System.currentTimeMillis();
		
		System.out.println("time:" + (t2 - t1));
	}
	public void ProcessPublishEntry(Process process, int service_id) {
		
		ProcessParser parser = new ProcessParserImpl();
		parser.ProcessParserEntry(process, service_id);
	}
	public Process ProcessInquiryEntry(int service_id)
	{
		ProcessInquiry inquiry = new ProcessInquiryImpl();
		return inquiry.ProcessInquiryEntry(service_id);
	}
	public int ProcessDeleteEntry(int service_id) {
		
		ProcessDelete delete = new ProcessDeleteImpl();
		return delete.ProcessDeleteEnt
/**
 * This class is the provider for {@link ProcessMonitor}s.
 * A filter can be specified to return only some ProcessMonitors.
 * @author micha
 */
public class ProcessMonitoringProvider extends AbstractDataProvider implements ISortableDataProvider<ProcessMonitor, String>, IFilterStateLocator {
	private static final long serialVersionUID = 1L;
	private static List<ProcessMonitor> processMonitors;
	private static List<ProcessMonitor> selectedProcessMonitors;
	private ISortState sortState = new SingleSortState();
	private ProcessMonitoringFilter processMonitorFilter = new ProcessMonitoringFilter();
	/**
	 * Constructor for providing {@link ProcessMonitor}s.
	 */
	public ProcessMonitoringProvider() {
		processMonitors = BPMNQueryMonitor.getInstance().getProcessMonitors();
		selectedProcessMonitors = new ArrayList<ProcessMonitor>();
	}
	@Override
	public void detach() {
	}
	@Override
	public Iterator<? extends ProcessMonitor> iterator(long first, long count) {
		return processMonitors.su

	}
	private List<ProcessMonitor> filterProcessMonitors(List<ProcessMonitor> processMonitorsToFilter, ProcessMonitoringFilter processMonitorFilter) {
		List<ProcessMonitor> returnedProcessMonitors = new ArrayList<ProcessMonitor>();
		for(ProcessMonitor processMonitor: processMonitorsToFilter){
			if(processMonitorFilter.match(processMonitor)){
				returnedProcessMonitors.add(processMonitor);
			}
		}
		return returnedProcessMonitors;
	}
	@Override
	public IModel<ProcessMonitor> model(ProcessMonitor processMonitor) {
		return Model.of(processMonitor);
	}
	@Override
	public long size() {
		return processMonitors.size();
	}
	public List<ProcessMonitor> getProcessMonitors() {
		return processMonitors;
	}
	public List<ProcessMonitor> getSelectedProcessMonitors(){
		return selectedProcessMonitors;
	}
	public static void setProcessMonitors(List<ProcessMonitor> processMonitorList) {
		processMonitors = processMonitorList;
	}
	@Override
	public ISortState<String> getSortState() {
		return sortS

	}
	@Override
	public Object getFilterState() {
		return processMonitorFilter;
	}
	@Override
	public void setFilterState(Object state) {
		this.processMonitorFilter = (ProcessMonitoringFilter) state;
	}
	public ProcessMonitoringFilter getProcessMonitorFilter() {
		return processMonitorFilter;
	}
	public void setProcessMonitorFilter(ProcessMonitoringFilter processMonitorFilter) {
		this.processMonitorFilter = processMonitorFilter;
		processMonitors = filterProcessMonitors(processMonitors, processMonitorFilter);
	}
	@Override
	public void selectEntry(int entryId) {
		for (Iterator iter = processMonitors.iterator(); iter.hasNext();) {
			ProcessMonitor processMonitor = (ProcessMonitor) iter.next();
			if(processMonitor.getID() == entryId) {
				selectedProcessMonitors.add(processMonitor);
				return;
			}
		}
	}
	@Override
	public void deselectEntry(int entryId) {
		for (Iterator<ProcessMonitor> iter = processMonitors.iterator(); iter.hasNext();) {
			ProcessMonitor processMonitor = (Pro
@Configuration
public class ItemRmiContext {
	@Inject
	private ItemService itemService;
	@Inject
	private ProductService productService;
	@Inject
	private CategoryService categoryService;
	@Inject
	private BrandService brandService;
	@Inject
	private ManufacturerService manufacturerService;
	@Bean
	public RmiServiceExporter rmiItemServiceExporter() {
		RmiServiceExporter rmiServiceExporter = new RmiServiceExporter();
		rmiServiceExporter.setServiceName("ItemService");
		rmiServiceExporter.setServiceInterface(ItemService.class);
		rmiServiceExporter.setService(itemService);
		return rmiServiceExporter;
	}
	@Bean
	public RmiServiceExporter rmiProductServiceExporter() {
		RmiServiceExporter rmiServiceExporter = new RmiServiceExporter();
		rmiServiceExporter.setServiceName("ProductService");
		rmiServiceExporter.setServiceInterface(ProductService.class);
		rmiServiceExporter.setService(productService);
		rmiServiceExporter.setRegistryPort(1099);
		return rmiServiceExporter;
	}
	@Bean
	publ

		RmiServiceExporter rmiServiceExporter = new RmiServiceExporter();
		rmiServiceExporter.setServiceName("BrandService");
		rmiServiceExporter.setServiceInterface(BrandService.class);
		rmiServiceExporter.setService(brandService);
		rmiServiceExporter.setRegistryPort(1099);
		return rmiServiceExporter;
	}
	@Bean
	public RmiServiceExporter rmiCategoryServiceExporter() {
		RmiServiceExporter rmiServiceExporter = new RmiServiceExporter();
		rmiServiceExporter.setServiceName("CategoryService");
		rmiServiceExporter.setServiceInterface(CategoryService.class);
		rmiServiceExporter.setService(categoryService);
		rmiServiceExporter.setRegistryPort(1099);
		return rmiServiceExporter;
	}
	@Bean
	public RmiServiceExporter rmiManufacturerServiceExporter() {
		RmiServiceExporter rmiServiceExporter = new RmiServiceExporter();
		rmiServiceExporter.setServiceName("ManufacturerService");
		rmiServiceExporter.setServiceInterface(ManufacturerService.class);
		rmiServiceExporter.setService(manufacturerSer
/**
 * Created by Administrator on 29.07.2014.
 */
@Component
public class EntityServiceChooser {
    @Autowired
    AdminServiceImpl adminService;
    @Autowired
    CertificateServiceImpl certificateService;
    @Autowired
    CourseServiceImpl courseService;
    @Autowired
    CuratorServiceImpl curatorService;
    @Autowired
    CustomFieldServiceImpl customFieldService;
    @Autowired
    FacultyServiceImpl facultyService;
    @Autowired
    FeedbackServiceImpl feedbackService;
    @Autowired
    FieldsGroupServiceImpl fieldsGroupService;
    @Autowired
    GroupServiceImpl groupService;
    @Autowired
    HRServiceImpl hrService;
    @Autowired
    InterviewServiceImpl interviewService;
    @Autowired
    InterviewerServiceImpl interviewerService;
    @Autowired
    MarksServiceImpl marksService;
    @Autowired
    PMServiceImpl pmService;
    @Autowired
    ProjectServiceImpl projectService;
    @Autowired
    SettingServiceImpl settingService;
    @Autowired
    StudentServiceI

    @Autowired
    StudentCertificateServiceImpl studentCertificateService;
    @Autowired
    StudentCuratorServiceImpl studentCuratorService;
    @Autowired
    StudentCustomFieldServiceImpl studentCustomFieldService;
    @Autowired
    StudentGroupServiceImpl studentGroupService;
    @Autowired
    StudentProjectServiceImpl studentProjectService;
    @Autowired
    TeamLeaderServiceImpl teamLeaderService;
    @Autowired
    TechnologyServiceImpl technologyService;
    @Autowired
    TechnologyStudentFutureServiceImpl technologyStudentFutureService;
    @Autowired
    TechnologyStudentNowServiceImpl technologyStudentNowService;
    @Autowired
    UniversityServiceImpl universityService;
    @Autowired
    UserServiceImpl userService;
    public BaseService serviceChooser(String entity){
        if(entity.equalsIgnoreCase("admin"))
            return adminService;
        if(entity.equalsIgnoreCase("certificate"))
            return certificateService;
        if(entity.equalsIgnoreC

            return courseService;
        if(entity.equalsIgnoreCase("curator"))
            return curatorService;
        if(entity.equalsIgnoreCase("customfield"))
            return customFieldService;
        if(entity.equalsIgnoreCase("faculty"))
            return facultyService;
        if(entity.equalsIgnoreCase("feedback"))
            return feedbackService;
        if(entity.equalsIgnoreCase("fieldsgroup"))
            return fieldsGroupService;
        if(entity.equalsIgnoreCase("group"))
            return groupService;
        if(entity.equalsIgnoreCase("hr"))
            return hrService;
        if(entity.equalsIgnoreCase("interview"))
            return interviewService;
        if(entity.equalsIgnoreCase("interviewer"))
            return interviewerService;
        if(entity.equalsIgnoreCase("marks"))
            return marksService;
        if (entity.equalsIgnoreCase("pm"))
            return pmService;
        if(entity.equalsIgnoreCase("project"))
            r

        if(entity.equalsIgnoreCase("setting"))
            return settingService;
        if (entity.equalsIgnoreCase("student"))
            return studentService;
        if(entity.equalsIgnoreCase("studentcertificate"))
            return studentCertificateService;
        if (entity.equalsIgnoreCase("studentcurator"))
            return studentCuratorService;
        if (entity.equalsIgnoreCase("studentcustomfield"))
            return studentCustomFieldService;
        if (entity.equalsIgnoreCase("studentgroup"))
            return studentGroupService;
        if (entity.equalsIgnoreCase("studentproject"))
            return studentProjectService;
        if (entity.equalsIgnoreCase("teamleader"))
            return teamLeaderService;
        if (entity.equalsIgnoreCase("technology"))
            return technologyService;
        if (entity.equalsIgnoreCase("technologystudentfuture"))
            return technologyStudentFutureService;
        if (entity.equalsIgnoreCase("technolo

            return technologyStudentNowService;
        if (entity.equalsIgnoreCase("university"))
            return universityService;
        if (entity.equalsIgnoreCase("user"))
            return userService;
        return null;
    }
    public void setAdminService(AdminServiceImpl adminService) {
        this.adminService = adminService;
    }
    public void setCertificateService(CertificateServiceImpl certificateService) {
        this.certificateService = certificateService;
    }
    public void setCourseService(CourseServiceImpl courseService) {
        this.courseService = courseService;
    }
    public void setCuratorService(CuratorServiceImpl curatorService) {
        this.curatorService = curatorService;
    }
    public void setCustomFieldService(CustomFieldServiceImpl customFieldService) {
        this.customFieldService = customFieldService;
    }
    public void setFacultyService(FacultyServiceImpl facultyService) {
        this.facultyService = facultyService;
 

    public void setFeedbackService(FeedbackServiceImpl feedbackService) {
        this.feedbackService = feedbackService;
    }
    public void setFieldsGroupService(FieldsGroupServiceImpl fieldsGroupService) {
        this.fieldsGroupService = fieldsGroupService;
    }
    public void setGroupService(GroupServiceImpl groupService) {
        this.groupService = groupService;
    }
    public void setHrService(HRServiceImpl hrService) {
        this.hrService = hrService;
    }
    public void setInterviewService(InterviewServiceImpl interviewService) {
        this.interviewService = interviewService;
    }
    public void setInterviewerService(InterviewerServiceImpl interviewerService) {
        this.interviewerService = interviewerService;
    }
    public void setMarksService(MarksServiceImpl marksService) {
        this.marksService = marksService;
    }
    public void setPmService(PMServiceImpl pmService) {
        this.pmService = pmService;
    }
    public void setProjectServ

        this.projectService = projectService;
    }
    public void setSettingService(SettingServiceImpl settingService) {
        this.settingService = settingService;
    }
    public void setStudentService(StudentServiceImpl studentService) {
        this.studentService = studentService;
    }
    public void setStudentCertificateService(StudentCertificateServiceImpl studentCertificateService) {
        this.studentCertificateService = studentCertificateService;
    }
    public void setStudentCuratorService(StudentCuratorServiceImpl studentCuratorService) {
        this.studentCuratorService = studentCuratorService;
    }
    public void setStudentCustomFieldService(StudentCustomFieldServiceImpl studentCustomFieldService) {
        this.studentCustomFieldService = studentCustomFieldService;
    }
    public void setStudentGroupService(StudentGroupServiceImpl studentGroupService) {
        this.studentGroupService = studentGroupService;
    }
    public void setStudentProjectServic
/**
 * 그룹관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성 
 *
 * </pre>
 */
@Service("egovGroupManageService")
public class EgovGroupManageServiceImpl extends EgovAbstractServiceImpl implements EgovGroupManageService {
	@Resource(name="groupManageDAO")
    private GroupManageDAO groupManageDAO;
	/**
	 * 시스템사용 목적별 그룹 목록 조회
	 * @param groupManageVO GroupManageVO
	 * @return List<GroupManageVO>
	 * @exception Exception
	 */
	public List<GroupManageVO> selectGroupList(GroupManageVO groupManageVO) throws Exception {
		return groupManageDAO.selectGroupList(groupManageVO);
	}
	/**
	 * 검색조건에 따른 그룹정보를 조회
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupMan

		return groupManageDAO.selectGroup(groupManageVO);
	}
	/**
	 * 그룹 기본정보를 화면에서 입력하여 항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param groupManage GroupManage
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO insertGroup(GroupManage groupManage, GroupManageVO groupManageVO) throws Exception {
		groupManageDAO.insertGroup(groupManage);
		groupManageVO.setGroupId(groupManage.getGroupId());
		return groupManageDAO.selectGroup(groupManageVO);
	}
	/**
	 * 화면에 조회된 그룹의 기본정보를 수정하여 항목의 정합성을 체크하고 수정된 데이터를 데이터베이스에 반영
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void updateGroup(GroupManage groupManage) throws Exception {
		groupManageDAO.updateGroup(groupManage);
	}
	/**
	 * 불필요한 그룹정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void deleteGroup(GroupManage groupManage) throws Exception {
		groupManageDAO.deleteGroup(groupManage);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @par
/**
 * FTP연동관리에 대한 DAO 클래스
 * @ftpIntrl 배치운영환경 김지완
 * @since 2012.07.16
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2012.07.16  김지완          최초 생성
 *
 * </pre>
 */
@Repository("ftpIntrlManageDAO")
public class FtpIntrlManageDAO extends AbstractDAO {
	 /**
	 * 모든 FtpIntrl 조회
	 * @param ftpIntrlManageVO FtpIntrlManageVO
	 * @return List<FtpIntrlManageVO>
	 * @exception Exception
	 */
    @SuppressWarnings("unchecked")
	public List<FtpIntrlManageVO> selectFtpIntrlList(FtpIntrlManageVO ftpIntrlManageVO) throws Exception {
        return list("ftpIntrlManageDAO.selectFtpIntrlList", ftpIntrlManageVO);
    }    
	/**
	 * FtpIntrl 등록
	 * @param ftpIntrlManage FtpIntrlManage
	 * @exception Exception
	 */
    public void insertFtpIntrl(FtpIntrlManage ftpIntrlManage) throws Exception {
        insert("ftpIntrlManageDAO.insertFtpIntrl", ftpIntrlManage);
    }
    /**
	

	 * @param ftpIntrlManage FtpIntrlManage
	 * @exception Exception
	 */
    public void updateFtpIntrl(FtpIntrlManage ftpIntrlManage) throws Exception {
        update("ftpIntrlManageDAO.updateFtpIntrl", ftpIntrlManage);
    }
    /**
	 * FtpIntrl 삭제
	 * @param ftpIntrlManage FtpIntrlManage
	 * @exception Exception
	 */
    public void deleteFtpIntrl(FtpIntrlManage ftpIntrlManage) throws Exception {
        delete("ftpIntrlManageDAO.deleteFtpIntrl", ftpIntrlManage);
    }
    
    /**
	 * FtpIntrl 총 갯수 조회
	 * @param ftpIntrlManageVO FtpIntrlManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectFtpIntrlListTotCnt(FtpIntrlManageVO ftpIntrlManageVO)  throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("ftpIntrlManageDAO.selectFtpIntrlListTotCnt", ftpIntrlManageVO);
    }
    
    /**
	 * FtpIntrl 조회
	 * @param ftpIntrlManageVO FtpIntrlManageVO
	 * @return FtpIntrlManageVO
	 * @exception Exception
	 */
    public FtpIntrlManageVO select
/**
 * A DTO representing a Study, with all its details.
 */
public class StudyDTO {
    private Long id;
    @NotNull
    private String title;
    private String description;
    private String author;
    DeveloperRepository developerRepository;
    List<Developer> developers;
    DeveloperDTO developerDTO;
    Set<DeveloperDTO> developerDTOS = new HashSet<DeveloperDTO>();
    SoftwareSystemRepository softwareSystemRepository;
    List<SoftwareSystem> softwareSystems;
    SoftwareSystemDTO softwareSystemDTO;
    Set<SoftwareSystemDTO> softwareSystemDTOS = new HashSet<SoftwareSystemDTO>();
    TaskRepository taskRepository;
    List<Task> tasks;
    TaskDTO taskDTO;
    Set<TaskDTO> taskDTOS = new HashSet<TaskDTO>();
    ScriptRepository scriptRepository;
    List<Script> scripts;
    ScriptDTO scriptDTO;
    Set<ScriptDTO> scriptDTOS = new HashSet<ScriptDTO>();
    InterviewRepository interviewRepository;
    ThinkAloudRepository thinkAloudRepository;
    DiaryRepository diaryReposi

    DefectRepository defectRepository;
    TestCaseRepository testCaseRepository;
    InteractiveLogRepository interactiveLogRepository;
    SourceCodeRepository sourceCodeRepository;
    DesignPatternRepository designPatternRepository;
    NoteRepository noteRepository;
    AudioRepository audioRepository;
    VideoRepository videoRepository;
    public StudyDTO() {
    }
    public StudyDTO(Study study, DeveloperRepository developerRepository, SoftwareSystemRepository softwareSystemRepository, InterviewRepository interviewRepository, ThinkAloudRepository thinkAloudRepository, DiaryRepository diaryRepository, DefectRepository defectRepository, TestCaseRepository testCaseRepository, InteractiveLogRepository interactiveLogRepository, SourceCodeRepository sourceCodeRepository, DesignPatternRepository designPatternRepository, TaskRepository taskRepository, NoteRepository noteRepository, ScriptRepository scriptRepository, AudioRepository audioRepository, VideoRepository videoRepository) {

        this.id= study.getId();
        this.title = study.getTitle();
        this.author = study.getAuthor();
        this.description = study.getDescription();
        this.developerRepository = developerRepository;
        this.softwareSystemRepository = softwareSystemRepository;
        this.interviewRepository = interviewRepository;
        this.thinkAloudRepository = thinkAloudRepository;
        this.diaryRepository = diaryRepository;
        this.defectRepository = defectRepository;
        this.testCaseRepository = testCaseRepository;
        this.interactiveLogRepository = interactiveLogRepository;
        this.sourceCodeRepository = sourceCodeRepository;
        this.designPatternRepository = designPatternRepository;
        this.taskRepository = taskRepository;
        this.noteRepository = noteRepository;
        this.scriptRepository = scriptRepository;
        this.audioRepository = audioRepository;
        this.videoRepository = videoRepository;
    }
    public Long 

        return id;
    }
    public String getAuthor() {
        return author;
    }
    public String getTitle() {
        return title;
    }
    public String getDescription() {
        return description;
    }
    public Set<DeveloperDTO> getDevelopers() {
        developers = developerRepository.findAllByStudyTitle(title);
        for (Developer developer:developers){
            developerDTO = new DeveloperDTO(developer, interviewRepository, thinkAloudRepository, diaryRepository, defectRepository, testCaseRepository, interactiveLogRepository, audioRepository, videoRepository, noteRepository);
            developerDTOS.add(developerDTO);
        }
        return developerDTOS;
    }
    public Set<SoftwareSystemDTO> getSoftwareSystems() {
        softwareSystems = softwareSystemRepository.findAllByStudyTitle(title);
        for (SoftwareSystem softwareSystem:softwareSystems){
            softwareSystemDTO = new SoftwareSystemDTO(softwareSystem, sourceCodeRepository, designPatte
/**
 * Default implementation of {@link com.englishtown.vertx.cassandra.binarystore.FileReader}
 */
public class FileReader implements ReadStream<Buffer> {
    public enum Result {
        OK,
        NOT_FOUND,
        ERROR
    }
    private Handler<FileReadInfo> fileHandler;
    private Handler<Buffer> dataHandler;
    private Handler<Void> endHandler;
    private Handler<Result> resultHandler;
    private Handler<Throwable> exceptionHandler;
    private boolean paused;
    private Handler<Void> resumeHandler;
    public FileReader fileHandler(Handler<FileReadInfo> handler) {
        fileHandler = handler;
        return this;
    }
    /**
     * Set a data handler. As data is read, the handler will be called with the data.
     *
     * @param handler
     */
    @Override
    public FileReader handler(Handler<Buffer> handler) {
        this.dataHandler = handler;
        return this;
    }
    /**
     * Pause the {@code ReadSupport}. While it's paused, no data will be sent to th

     */
    @Override
    public FileReader pause() {
        paused = true;
        return this;
    }
    /**
     * Resume reading. If the {@code ReadSupport} has been paused, reading will recommence on it.
     */
    @Override
    public FileReader resume() {
        paused = false;
        if (resumeHandler != null) {
            Handler<Void> handler = resumeHandler;
            resumeHandler = null;
            handler.handle(null);
        }
        return this;
    }
    @Override
    public FileReader endHandler(Handler<Void> handler) {
        endHandler = handler;
        return this;
    }
    public FileReader resultHandler(Handler<Result> handler) {
        resultHandler = handler;
        return this;
    }
    @Override
    public FileReader exceptionHandler(Handler<Throwable> handler) {
        exceptionHandler = handler;
        return this;
    }
    public void handleFile(FileReadInfo fileInfo) {
        if (fileHandler != null) {
            fileHandler.handle(f
public class HandlerFactory 
	private static HandlerFactory handleFactory = new HandlerFactory();
	@Autowired
	private static HtmlHandler htmlHandler;
	@Autowired
	private static TextHandler textHandler;
	@Autowired
	private static PdfHandler  pdfHandler;
	public static HandlerFactory createFactory(){
		return handleFactory;
	}
		
	public Handler getHandler(ContentType contenttype)
	{
		if (contenttype == ContentType.HTML)
			return htmlHandler;
		else if (contenttype == ContentType.TEXT)
			return textHandler;
		else
			return pdfHandler;
	}
	/**
	 * @return the htmlHandler
	 */
	public HtmlHandler getHtmlHandler() {
		return htmlHandler;
	}
	/**
	 * @param htmlHandler the htmlHandler to set
	 */
	public void setHtmlHandler(HtmlHandler htmlHandler) {
		this.htmlHandler = htmlHandler;
	}
	/**
	 * @return the textHandler
	 */
	public TextHandler getTextHandler() {
		return textHandler;
	}
	/**
	 * @param textHandler the textHandler to set
	 */
	public void setTextHandler(TextHandler tex
public class RestServer {
	public static void start(String[] args) {
		Server restServer = new Server(10000);
		ContextHandler vmCreateHandler= new ContextHandler();
		vmCreateHandler.setContextPath("/vm/create");
		vmCreateHandler.setHandler(new CreateHandler());
		ContextHandler vmQueryHandler = new ContextHandler();
		vmQueryHandler.setContextPath("/vm/query");
		vmQueryHandler.setHandler(new QueryHandler());
		ContextHandler vmDestroyHandler = new ContextHandler();
		vmDestroyHandler.setContextPath("/vm/destroy");
		vmDestroyHandler.setHandler(new DestroyHandler());
		ContextHandler vmTypeHandler = new ContextHandler();
		vmTypeHandler.setContextPath("/vm/types");
		vmTypeHandler.setHandler(new VMTypeHandler());
		ContextHandler imageListHandler = new ContextHandler();
		imageListHandler.setContextPath("/image/list");
		imageListHandler.setHandler(new ImageTypeHandler());
		
		
		ContextHandler volumeCreateHandler = new ContextHandler();
		volumeCreateHandler.setContextPath("/volum

		volumeCreateHandler.setHandler(new VolumeCreateHandler());
		
		ContextHandler volumeAttachHandler = new ContextHandler();
		volumeAttachHandler.setContextPath("/volume/attach");
		volumeAttachHandler.setHandler(new VolumeAttachHandler());
		
		ContextHandler volumeDestroyHandler = new ContextHandler();
		volumeDestroyHandler.setContextPath("/volume/destroy");
		volumeDestroyHandler.setHandler(new VolumeDestroyHandler());
		ContextHandler volumeDetachHandler = new ContextHandler();
		volumeDetachHandler.setContextPath("/volume/detach");
		volumeDetachHandler.setHandler(new VolumeDetachHandler());
		
		ContextHandler volumeQueryHandler = new ContextHandler();
		volumeQueryHandler.setContextPath("/volume/query");
		volumeQueryHandler.setHandler(new VolumeQueryHandler());
		
		ContextHandlerCollection collection = new ContextHandlerCollection();
		ContextHandler [] contextualHandles = {vmCreateHandler, 
																		vmDestroyHandler,
																		   vmQueryHandler,
										
/**
 * 사용자관리에 관한 ServiceImpl 클래스
 * @user 배치운영환경 김지완
 * @since 2012.07.12
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2012.07.12  김지완          최초 생성
 *
 * </pre>
 */
@Service("userManageService")
public class UserManageServiceImpl extends AbstractServiceImpl implements UserManageService {
    
	@Resource(name="userManageDAO")
    private UserManageDAO userManageDAO;
    /**
	 * 사용자 목록을 조회한다.
	 * @param userManageVO UserManageVO
	 * @return List<UserManageVO>
	 * @exception Exception
	 */
    public List<UserManageVO> selectUserList(UserManageVO userManageVO) throws Exception {
        return userManageDAO.selectUserList(userManageVO);
    }
    
	/**
	 * 사용자를 등록한다.
	 * @param userManage UserManage
	 * @exception Exception
	 */
    public void insertUser(UserManage userManage) throws Exception {
    	userManageDAO.insertUser(userManage);
    }
    /**
	 * 사용

	 * @param userManage UserManage
	 * @exception Exception
	 */
    public void updateUser(UserManage userManage) throws Exception {
    	userManageDAO.updateUser(userManage);
    }
    /**
	 * 사용자를 삭제한다.
	 * @param userManage UserManage
	 * @exception Exception
	 */
    public void deleteUser(UserManage userManage) throws Exception {
    	userManageDAO.deleteUser(userManage);
    }
    /**
	 * 사용자 목록 카운트를 조회한다.
	 * @param userManageVO UserManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectUserListTotCnt(UserManageVO userManageVO) throws Exception {
        return userManageDAO.selectUserListTotCnt(userManageVO);
    }
    /**
	 * 권한을 조회한다.
	 * @param userManageVO UserManageVO
	 * @return UserManageVO
	 * @exception Exception
	 */
    public UserManageVO selectUser(UserManageVO userManageVO) throws Exception {
    	UserManageVO resultVO = userManageDAO.selectUser(userManageVO);
        if (resultVO == null){
        	throw processException("info.nodata.msg");
 
@Service("serviceManager")
public class ServiceManager{
	@Autowired
	private RollService rollService;
	@Autowired
	private UserService userService;
    @Autowired
    private RoleService roleService;
    @Autowired
    private UserRoleOrgRelationService userRoleOrgRelationService;
    @Autowired
    private OrganizationService organizationService;
    @Autowired
    private PermissionService permissionService;
	public RollService getRollService() {
		return rollService;
	}
	public void setRollService(RollService rollService) {
		this.rollService = rollService;
	}
	public UserService getUserService() {
		return userService;
	}
	public void setUserService(UserService userService) {
		this.userService = userService;
	}
    public RoleService getRoleService() {
        return roleService;
    }
    public void setRoleService(RoleService roleService) {
        this.roleService = roleService;
    }
    public UserRoleOrgRelationService getUserRoleOrgRelationService() {
        return userRol
class TypeManager {
  private IntHandler intHandler =
    new DefaultPrimitiveHandlers.DefaultIntHandler();
  private DoubleHandler doubleHandler =
    new DefaultPrimitiveHandlers.DefaultDoubleHandler();
  private BooleanHandler booleanHandler =
    new DefaultPrimitiveHandlers.DefaultBooleanHandler();
  private ByteHandler byteHandler =
    new DefaultPrimitiveHandlers.DefaultByteHandler();
  private FloatHandler floatHandler =
    new DefaultPrimitiveHandlers.DefaultFloatHandler();
  private LongHandler longHandler =
    new DefaultPrimitiveHandlers.DefaultLongHandler();
  private ShortHandler shortHandler =
    new DefaultPrimitiveHandlers.DefaultShortHandler();
  private CharHandler charHandler =
    new DefaultPrimitiveHandlers.DefaultCharHandler();
  private Map<Class, FieldHandler> fieldHandlers =
    new HashMap<Class, FieldHandler>();
  private Map<Class, ObjectHandler> objectHandlers =
    new HashMap<Class, ObjectHandler>();
  public TypeManager() {
    createObjectHandlers

  }
  private void createObjectHandlers() {
    objectHandlers.put(String.class,
        new DefaultObjectHandlers.StringHandler());
    objectHandlers.put(Integer.class,
        new DefaultObjectHandlers.IntHandler());
    objectHandlers.put(Double.class,
        new DefaultObjectHandlers.DoubleHandler());
    objectHandlers.put(Boolean.class,
        new DefaultObjectHandlers.BooleanHandler());
    objectHandlers.put(Byte.class,
        new DefaultObjectHandlers.ByteHandler());
    objectHandlers.put(Float.class,
        new DefaultObjectHandlers.FloatHandler());
    objectHandlers.put(Long.class,
        new DefaultObjectHandlers.LongHandler());
    objectHandlers.put(Short.class,
        new DefaultObjectHandlers.ShortHandler());
    objectHandlers.put(Character.class,
        new DefaultObjectHandlers.CharHandler());
  }
  public void setIntHandler(IntHandler intHandler) {
    this.intHandler = intHandler;
  }
  public void setDoubleHandler(DoubleHandler doubleHandler) {
    this

  }
  public void setBooleanHandler(BooleanHandler booleanHandler) {
    this.booleanHandler = booleanHandler;
  }
  public void setByteHandler(ByteHandler byteHandler) {
    this.byteHandler = byteHandler;
  }
  public void setFloatHandler(FloatHandler floatHandler) {
    this.floatHandler = floatHandler;
  }
  public void setLongHandler(LongHandler longHandler) {
    this.longHandler = longHandler;
  }
  public void setShortHandler(ShortHandler shortHandler) {
    this.shortHandler = shortHandler;
  }
  public void setCharHandler(CharHandler charHandler) {
    this.charHandler = charHandler;
  }
  public void setObjectHandler(Class cls, ObjectHandler objectHandler) {
    objectHandlers.put(cls, objectHandler);
  }
  public void createFieldHandlers() {
    createPrimitiveFieldHandlers();
    createObjectFieldHandlers();
  }
  private void createPrimitiveFieldHandlers() {
    fieldHandlers.put(Integer.TYPE,
        new PrimitiveHandlers.IntFieldHandler(intHandler));
    fieldHandlers.

        new PrimitiveHandlers.DoubleFieldHandler(doubleHandler));
    fieldHandlers.put(Boolean.TYPE,
        new PrimitiveHandlers.BooleanFieldHandler(booleanHandler));
    fieldHandlers.put(Byte.TYPE,
        new PrimitiveHandlers.ByteFieldHandler(byteHandler));
    fieldHandlers.put(Float.TYPE,
        new PrimitiveHandlers.FloatFieldHandler(floatHandler));
    fieldHandlers.put(Long.TYPE,
        new PrimitiveHandlers.LongFieldHandler(longHandler));
    fieldHandlers.put(Short.TYPE,
        new PrimitiveHandlers.ShortFieldHandler(shortHandler));
    fieldHandlers.put(Character.TYPE,
        new PrimitiveHandlers.CharFieldHandler(charHandler));
  }
  private void createObjectFieldHandlers() {
    for (Map.Entry<Class, ObjectHandler> entry : objectHandlers.entrySet()) {
      Class cls = entry.getKey();
      ObjectHandler objectHandler = entry.getValue();
      fieldHandlers.put(cls, new ObjectFieldHandler(objectHandler));
    }
  }
  public FieldHandler createFieldHandler(Class cl
/**
 * 商務卡消費明細Facade
 * 
 * @author jackson
 *
 * @version 1.0, 2009/9/25
 */
public class BizCardExpDetailFacade{
    /**檔案匯入Service基礎介面*/
    private FileImportService fileImportService;
    /**商務卡 Service*/
    private BizCardService bizCardService;
    /**使用者的 Service*/
    private UserService userService;
    /**轉檔記錄 Service*/
    private TranLogService tranLogService;
    /**
     * @return 檔案匯入Service基礎介面
     */
    public FileImportService getFileImportService() {
        return fileImportService;
    }
    /**
     * @param 檔案匯入Service基礎介面
     */
    public void setFileImportService(FileImportService fileImportService) {
        this.fileImportService = fileImportService;
    }
    /**
     * @param 商務卡 Service
     */
    public void setBizCardService(BizCardService bizCardService) {
        this.bizCardService = bizCardService;
    }
    /**
     * @return 商務卡 Service
     */
    public BizCardService getBizCardService() {
        return bizCardService;
    }
    /**
     
public class MonitProcess implements Serializable{
	private static final long serialVersionUID = 5101655423169538989L;
	/*process id*/
	private int process_id;
	/*muti process to one monitbean*/
	private MonitHost monithost;
	/*process collected_sec*/
	private String collected_sec;
	/*collected_usec*/
	private String collected_usec;
	/*process name muti one monit to mult processes*/
	private String processName;
	/*process status 0 stand alive*/
	private int processStatus;
	/*process status_message*/
	private String processStatusMessage;
	/*process pid*/
	private String processPid;
	/*process Uptime*/
	private String processUptime;
	/*process children*/
	private int processChildren;
	/*process memPercenttotal*/
	private float processMemPercenttotal;
	/*process memKilobytetotal*/
	private int processMemKilobytetotal;
	/*process cpuPercenttotal*/
	private float processCpuPercenttotal;
	/*process monitId*/
	private String monitId;
	public MonitProcess(){
		
	}
	public MonitProcess(int proc

			String collected_sec, String collected_usec, String processName,
			int processStatus, String processStatusMessage, String processPid,
			String processUptime, int processChildren,
			float processMemPercenttotal, int processMemKilobytetotal,
			float processCpuPercenttotal, String monitId) {
		super();
		this.process_id = process_id;
		this.monithost = monithost;
		this.collected_sec = collected_sec;
		this.collected_usec = collected_usec;
		this.processName = processName;
		this.processStatus = processStatus;
		this.processStatusMessage = processStatusMessage;
		this.processPid = processPid;
		this.processUptime = processUptime;
		this.processChildren = processChildren;
		this.processMemPercenttotal = processMemPercenttotal;
		this.processMemKilobytetotal = processMemKilobytetotal;
		this.processCpuPercenttotal = processCpuPercenttotal;
		this.monitId = monitId;
	}
	public int getProcess_id() {
		return process_id;
	}
	public void setProcess_id(int process_id) {
		this.process_id

	}
	public MonitHost getMonithost() {
		return monithost;
	}
	public void setMonithost(MonitHost monithost) {
		this.monithost = monithost;
	}
	public String getCollected_sec() {
		return collected_sec;
	}
	public void setCollected_sec(String collected_sec) {
		this.collected_sec = collected_sec;
	}
	public String getCollected_usec() {
		return collected_usec;
	}
	public void setCollected_usec(String collected_usec) {
		this.collected_usec = collected_usec;
	}
	public String getProcessName() {
		return processName;
	}
	public void setProcessName(String processName) {
		this.processName = processName;
	}
	public int getProcessStatus() {
		return processStatus;
	}
	public void setProcessStatus(int processStatus) {
		this.processStatus = processStatus;
	}
	public String getProcessStatusMessage() {
		return processStatusMessage;
	}
	public void setProcessStatusMessage(String processStatusMessage) {
		this.processStatusMessage = processStatusMessage;
	}
	public String getProcessPid() {
		r

	}
	public void setProcessPid(String processPid) {
		this.processPid = processPid;
	}
	public String getProcessUptime() {
		return processUptime;
	}
	public void setProcessUptime(String processUptime) {
		this.processUptime = processUptime;
	}
	public int getProcessChildren() {
		return processChildren;
	}
	public void setProcessChildren(int processChildren) {
		this.processChildren = processChildren;
	}
	public float getProcessMemPercenttotal() {
		return processMemPercenttotal;
	}
	public void setProcessMemPercenttotal(float processMemPercenttotal) {
		this.processMemPercenttotal = processMemPercenttotal;
	}
	public int getProcessMemKilobytetotal() {
		return processMemKilobytetotal;
	}
	public void setProcessMemKilobytetotal(int processMemKilobytetotal) {
		this.processMemKilobytetotal = processMemKilobytetotal;
	}
	public float getProcessCpuPercenttotal() {
		return processCpuPercenttotal;
	}
	public void setProcessCpuPercenttotal(float processCpuPercenttotal) {
		this.processCpuP
public class Configuration {
    private static Configuration configuration = new Configuration();
    private AtomicLong sequence = new AtomicLong(1);
    private Environment environment;
    private ServiceCheckService serviceCheckService;
    private RecommendService recommendService;
    private Configuration(){
    }
    public static Configuration getInstance(){
        return configuration;
    }
    public Environment getEnvironment() {
        return environment;
    }
    public void setEnvironment(Environment environment) {
        this.environment = environment;
    }
    public long next(){
        return sequence.getAndIncrement();
    }
    public long total(){
        return sequence.get();
    }
    public ServiceCheckService getServiceCheckService() {
        return serviceCheckService;
    }
    public void setServiceCheckService(ServiceCheckService serviceCheckService) {
        this.serviceCheckService = serviceCheckService;
    }
    public RecommendService getRec
public abstract class AbstractHandlerWrapper implements ChannelHandler ,ChannelHandlerWrapper{
    
    protected ChannelHandler handler ;
    
    public AbstractHandlerWrapper(URL url, ChannelHandler handler) {
        super();
        this.handler = handler;
    }
    @Override
    public void connected(Channel channel) throws ChannelException {
        handler.connected(channel);
    }
    @Override
    public void disconnected(Channel channel) throws ChannelException {
        handler.disconnected(channel);
    }
    @Override
    public void sent(Channel channel, Object message) throws ChannelException {
        handler.sent(channel, message);
    }
    @Override
    public void received(Channel channel, Object message) throws ChannelException {
        handler.received(channel, message);
    }
    @Override
    public void caught(Channel channel, Throwable exception) throws ChannelException {
        handler.caught(channel, exception);
    }
    @Override
    public ChannelHandl
public class LoggerTest{
	private static LogHandler errorHandler;
	private static LogHandler infoHandler;
	private static LogHandler debugHandler;
	private static LogHandler warningHandler;
	@BeforeClass
	public static void setUp() 
	{
		errorHandler = createMock(LogHandler.class);
		warningHandler = createMock(LogHandler.class);
		infoHandler = createMock(LogHandler.class);
		debugHandler = createMock(LogHandler.class);
		Log.addHandler(errorHandler);
		Log.addHandler(warningHandler);
	}
	@After
	public void tearDown() 
	{
		reset(errorHandler);
		reset(warningHandler);
		reset(infoHandler);
		reset(debugHandler);
	}
	@Test
	public void testAllHandlersNeedToBeCalled()
	{
		Log.setLevel(Log.DEBUG);
		expect(errorHandler.getLevel()).andReturn(Log.ERROR);
		errorHandler.write("Error", Log.ERROR);
		expect(warningHandler.getLevel()).andReturn(Log.WARNING);
		warningHandler.write("Error", Log.ERROR);
		replay(errorHandler);
		replay(warningHandler);
		Log.error("Error");
	}
	@Test
	public 

	{
		Log.setLevel(Log.WARNING);
		expect(errorHandler.getLevel()).andReturn(Log.ERROR);
		errorHandler.write("Error", Log.ERROR);
		expect(warningHandler.getLevel()).andReturn(Log.WARNING);
		warningHandler.write("Error", Log.ERROR);
		expect(infoHandler.getLevel()).andReturn(Log.INFO);
		infoHandler.write("Error", Log.ERROR);
		expect(debugHandler.getLevel()).andReturn(Log.DEBUG);
		debugHandler.write("Error", Log.ERROR);
		replay(errorHandler);
		replay(warningHandler);
		replay(infoHandler);
		replay(debugHandler);
		Log.error("Error");
	}
	@Test
	public void testLoggerFiltering2()
	{
		Log.setLevel(Log.DEBUG);
		expect(errorHandler.getLevel()).andReturn(Log.ERROR);
		expect(warningHandler.getLevel()).andReturn(Log.WARNING);
		expect(infoHandler.getLevel()).andReturn(Log.INFO);
		infoHandler.write("Error", Log.INFO);
		expect(debugHandler.getLevel()).andReturn(Log.DEBUG);
		debugHandler.write("Error", Log.INFO);
		replay(errorHandler);
		replay(warningHandler);
		replay(infoHandler
/**
 * 개요
 * - 포상관리에 대한 Service Interface를 정의한다.
 * 
 * 상세내용
 * - 포상관리에 대한 등록, 수정, 삭제, 조회, 승인처리 기능을 제공한다.
 * - 포상관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
public interface EgovRwardManageService {
	/**
	 * 포상관리 정보를 관리하기 위해 등록된 로그인화면이미지 목록을 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return List - 포상관리 목록
	 */
	public List<RwardManageVO> selectRwardManageList(RwardManageVO rwardManageVO) throws Exception;
	/**
	 * 포상관리 목록 총 갯수를 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return int - 포상관리 카운트 수
	 */
	public int selectRwardManageListTotCnt(RwardManageVO rwardManageVO) throws Exception ;
	/**
	 * 등록된 포상관리의 상세정보를 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return RwardManageVO - 포상관리 VO
	 */
	public RwardManageVO selectRwardManage(RwardManageVO rwardManageVO) throws Exception;
	/**
	 * 포상관리 정보를 신규로 등록한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void insertRwardManage(RwardManage rwardManage) throws Exception;
	/**
	 * 기 등록
/**
 * Created by yongzhi.zhang on 14-1-1.
 */
public class HeheRepositoryFactory extends JpaRepositoryFactory {
    /**
     * @param entityManager
     */
    public HeheRepositoryFactory(EntityManager entityManager) {
        super(entityManager);
    }
    /**
     * @see org.springframework.data.jpa.repository.support.JpaRepositoryFactory#getTargetRepository(org.springframework.data.repository.core.RepositoryMetadata, javax.persistence.EntityManager)
     */
    @Override
    protected <T, ID extends Serializable> SimpleJpaRepository<?, ?> getTargetRepository(RepositoryMetadata metadata,
                                                                                         EntityManager entityManager) {
        Class<?> repositoryInterface = metadata.getRepositoryInterface();
        JpaEntityInformation<?, Serializable> entityInformation = getEntityInformation(metadata.getDomainType());
        if (JpaRepository.class.isAssignableFrom(repositoryInterface)) {
            SimpleJ
/**
 * 그룹관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성 
 *
 * </pre>
 */
@Service("egovGroupManageService")
public class EgovGroupManageServiceImpl extends EgovAbstractServiceImpl implements EgovGroupManageService {
	@Resource(name="groupManageDAO")
    private GroupManageDAO groupManageDAO;
	/**
	 * 시스템사용 목적별 그룹 목록 조회
	 * @param groupManageVO GroupManageVO
	 * @return List<GroupManageVO>
	 * @exception Exception
	 */
	public List<GroupManageVO> selectGroupList(GroupManageVO groupManageVO) throws Exception {
		return groupManageDAO.selectGroupList(groupManageVO);
	}
	/**
	 * 검색조건에 따른 그룹정보를 조회
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupMan

		return groupManageDAO.selectGroup(groupManageVO);
	}
	/**
	 * 그룹 기본정보를 화면에서 입력하여 항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param groupManage GroupManage
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO insertGroup(GroupManage groupManage, GroupManageVO groupManageVO) throws Exception {
		groupManageDAO.insertGroup(groupManage);
		groupManageVO.setGroupId(groupManage.getGroupId());
		return groupManageDAO.selectGroup(groupManageVO);
	}
	/**
	 * 화면에 조회된 그룹의 기본정보를 수정하여 항목의 정합성을 체크하고 수정된 데이터를 데이터베이스에 반영
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void updateGroup(GroupManage groupManage) throws Exception {
		groupManageDAO.updateGroup(groupManage);
	}
	/**
	 * 불필요한 그룹정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void deleteGroup(GroupManage groupManage) throws Exception {
		groupManageDAO.deleteGroup(groupManage);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @par
public class ProcessObjectDetail extends VerticalLayout implements ProcessObjectQueryListener{
	private static final long serialVersionUID = -6839145423602902026L;
	private UserClientInfo userClientInfo;
	private ProcessManagementPanel processManagementPanel;
	public VerticalLayout processObjectContainer;
	public ProcessObjectDetail(UserClientInfo userClientInfo){
		this.userClientInfo=userClientInfo;
		userClientInfo.getEventBlackboard().addListener(this);
		processObjectContainer=new VerticalLayout();
		MainTitleBar mainTitleBar=new MainTitleBar(this.userClientInfo.getI18NProperties().getProperty("ProcessManage_ProcessObjectDetail_processspaceNameLabel"),
				this.userClientInfo.getI18NProperties().getProperty("ProcessManage_ProcessObjectDetail_currentProcessTypeLabel"));	
		processObjectContainer.addComponent(mainTitleBar);		
		this.addComponent(processObjectContainer);
	}
	public ProcessManagementPanel getProcessManagementPanel() {
		return processManagementPanel;
	}
	public void s

		this.processManagementPanel = processManagementPanel;
	}
	public void receiveProcessObjectQuery(ProcessObjectQueryEvent event) {		
		processObjectContainer.removeAllComponents();		
		MainTitleBar mainTitleBar=new MainTitleBar(event.getProcessSpaceName(),event.getProcessType());	
		processObjectContainer.addComponent(mainTitleBar);	
		
		Panel containerPanel=new Panel();
		containerPanel.setStyleName(Reindeer.PANEL_LIGHT);
		containerPanel.setScrollable(true);
		containerPanel.setSizeFull();		
		processObjectContainer.addComponent(containerPanel);			
		
		int processStatus=event.getProcessStatus();		
		SectionTitleBar sectionTitleBar=null;		
		if(processStatus==ProcessSpace.PROCESS_STATUS_UNFINISHED){
			sectionTitleBar=new SectionTitleBar(new Embedded(null, UICommonElementDefination.ICON_processManagement_runningProcessIcon_big),
					this.userClientInfo.getI18NProperties().getProperty("ProcessManage_ProcessObjectDetail_processType_runningLabel"),SectionTitleBar.MIDDLEFONT,null);			

		}
		if(processStatus==ProcessSpace.PROCESS_STATUS_FINISHED){
			sectionTitleBar=new SectionTitleBar(new Embedded(null, UICommonElementDefination.ICON_processManagement_finishedProcessIcon_big),
					this.userClientInfo.getI18NProperties().getProperty("ProcessManage_ProcessObjectDetail_processType_finishedLabel"),SectionTitleBar.MIDDLEFONT,null);	
		}
		if(processStatus==ProcessSpace.PROCESS_STATUS_ALL){
			sectionTitleBar=new SectionTitleBar(new Embedded(null, UICommonElementDefination.ICON_processManagement_allProcessIcon_big),
					this.userClientInfo.getI18NProperties().getProperty("ProcessManage_ProcessObjectDetail_processType_allLabel"),SectionTitleBar.MIDDLEFONT,null);	
		}		
		containerPanel.addComponent(sectionTitleBar);	
		
		VerticalLayout processObjectTableContainer=new VerticalLayout();
		containerPanel.addComponent(processObjectTableContainer);
		
		try {
			ProcessSpace targetProcessSpace=ProcessComponentFactory.connectProcessSpace(event.getProcessSpaceName());			
			L
/**
 * 그룹관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Service("egovGroupManageService")
public class EgovGroupManageServiceImpl extends AbstractServiceImpl implements EgovGroupManageService {
	@Resource(name="groupManageDAO")
    private GroupManageDAO groupManageDAO;
	/**
	 * 시스템사용 목적별 그룹 목록 조회
	 * @param groupManageVO GroupManageVO
	 * @return List<GroupManageVO>
	 * @exception Exception
	 */
	public List<GroupManageVO> selectGroupList(GroupManageVO groupManageVO) throws Exception {
		return groupManageDAO.selectGroupList(groupManageVO);
	}
	/**
	 * 검색조건에 따른 그룹정보를 조회
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO selectGroup(GroupManageVO groupManageVO) throws Exce

		return groupManageDAO.selectGroup(groupManageVO);
	}
	/**
	 * 그룹 기본정보를 화면에서 입력하여 항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param groupManage GroupManage
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO insertGroup(GroupManage groupManage, GroupManageVO groupManageVO) throws Exception {
		groupManageDAO.insertGroup(groupManage);
		groupManageVO.setGroupId(groupManage.getGroupId());
		return groupManageDAO.selectGroup(groupManageVO);
	}
	/**
	 * 화면에 조회된 그룹의 기본정보를 수정하여 항목의 정합성을 체크하고 수정된 데이터를 데이터베이스에 반영
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void updateGroup(GroupManage groupManage) throws Exception {
		groupManageDAO.updateGroup(groupManage);
	}
	/**
	 * 불필요한 그룹정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void deleteGroup(GroupManage groupManage) throws Exception {
		groupManageDAO.deleteGroup(groupManage);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @par
/**
 * 
 * @author bdavis, abaxter 
 * 
 * For starting, creating, and aborting processes and signaling events to a process
 */
public interface ProcessService {
	/**
	 * Starts a process with no variables
	 * 
	 * @param releaseId Deployment information for the process's kjar
	 * @param processId The process's name 
	 * @return Process instance information
	 */
	ProcessInstance startProcess(@ReleaseId KieReleaseId releaseId, String processId);
	/**
	 * Starts a process with provided variables
	 * 
	 * @param releaseId Deployment information for the process's kjar
	 * @param processId The process's name 
	 * @param parameters Process variables to start with
	 * @return Process instance information
	 */
	@PreprocessClassloader
	ProcessInstance startProcess(@ReleaseId KieReleaseId releaseId, String processId, @LazilyDeserialized Map<String, Object> parameters);
	/**
	 * Signal an event to a single process
	 * 
	 * @param type The event's ID in the process
	 * @param event The event objec

	 * @param processInstanceId The process instance's unique identifier
	 */
	void signalEvent(@ProcessInstanceId long processInstanceId, String type, Object event);
	/**
	 * Returns process instance information. Will return null if no
	 * active process with that id is found
	 * 
	 * @param processInstanceId The process instance's unique identifier
	 * @return Process instance information
	 */
	ProcessInstance getProcessInstance(@ProcessInstanceId long processInstanceId);
	/**
	 * Aborts the specified process
	 * 
	 * @param processInstanceId The process instance's unique identifier
	 */
	void abortProcessInstance(@ProcessInstanceId long processInstanceId);
	/**
	 * Sets a process variable.
	 * @param processInstanceId The process instance's unique identifier.
	 * @param variableName The variable name to set.
	 * @param variable The variable value.
	 */
	@PreprocessClassloader
	void setProcessInstanceVariable(@ProcessInstanceId long processInstanceId, String variableName, @LazilyDeseri
/**
 * 개요
 * - 팝업창에 대한 DAO를 정의한다.
 * 
 * 상세내용
 * - 팝업창에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 팝업창의 조회기능은 목록조회, 상세조회로, 사용자화면 보기로 구분된다.
 * @author 이창원
 * @version 1.0
 * @created 05-8-2009 오후 2:21:04
 */
@Repository("popupManageDAO")
public class PopupManageDAO extends EgovComAbstractDAO {
	public PopupManageDAO(){}
	/**
	 * 기 등록된 팝업창정보를 삭제한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 * 
	 * @param popupManage
	 */
	public void deletePopup(PopupManageVO popupManageVO) throws Exception {
	    delete("PopupManage.deletePopupManage", popupManageVO);
	}
	/**
	 * 팝업창정보를 신규로 등록한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 * 
	 * @param popupManage
	 */
	public void insertPopup(PopupManageVO popupManageVO) throws Exception {
	    insert("PopupManage.insertPopupManage", popupManageVO);
	}
        /**
         * 기 등록된 팝업창정보를 수정한다.
         * @param popupManage - 팝업창 model
         * @return boolean - 반영성공 여부
         * 
         * @param popupMan

         */
        public void updatePopup(PopupManageVO popupManageVO) throws Exception {
            update("PopupManage.updatePopupManage", popupManageVO);
        }
	/**
	 * 팝업창을 사용자 화면에서 볼수 있는 정보들을 조회한다.
	 * @param popupManageVO - 팝업창 Vo
	 * @return popupManageVO - 팝업창 Vo
	 * 
	 * @param popupManageVO
	 */
	public PopupManageVO selectPopup(PopupManageVO popupManageVO) throws Exception {
	    return (PopupManageVO)getSqlMapClientTemplate().queryForObject("PopupManage.selectPopupManageDetail", popupManageVO);
	}
	/**
	 * 팝업창를 관리하기 위해 등록된 팝업창목록을 조회한다.
	 * @param popupManageVO - 팝업창 Vo
	 * @return List - 팝업창 목록
	 * 
	 * @param popupManageVO
	 */
	public List selectPopupList(PopupManageVO popupManageVO) throws Exception {
	    return (List)list("PopupManage.selectPopupManage", popupManageVO);
	}
        /**
         * 팝업창를 관리하기 위해 등록된 팝업창목록 총갯수를 조회한다.
         * @param popupManageVO - 팝업창 Vo
         * @return List - 팝업창 목록
         * 
         * @param popupManageVO
         */
    
/**
 * 롤 상하관계 관리에 대한 Vo 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  이문준          최초 생성
 *
 * </pre>
 */
public class RoleHierarchyManageVO extends RoleHierarchyManage {
	/**
	 * serialVersionUID
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * 롤 목록
	 */	
	List <RoleHierarchyManageVO> roleHierarchyManageList;
	/**
	 * roleManageList attribute 를 리턴한다.
	 * @return List<RoleManageVO>
	 */
	public List<RoleHierarchyManageVO> getRoleHierarchyManageList() {
		return roleHierarchyManageList;
	}
	/**
	 * roleManageList attribute 값을 설정한다.
	 * @param roleManageList List<RoleManageVO> 
	 */
	public void setRoleHierarchyManageList(List<RoleHierarchyManageVO> roleHierarchyManageList) {
		this.roleHierarchyManageList = roleHierarchyManageList;
	}
	/**
	 * RoleManage 를 리턴한다.
	 * @return Rol
/*
 * Copyright (c) 2014 Red Hat, Inc. and/or its affiliates.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 */
/**
 * Determines the {@link org.jberet.repository.JobRepository job repistory} to use.
 *
 * @author <a href="mailto:jperkins@redhat.com">James R. Perkins</a>
 */
class JobRepositoryFactory {
    private static final JobRepositoryFactory INSTANCE = new JobRepositoryFactory();
    private JobRepository jobRepository;
    private JobRepositoryFactory() {
    }
    public static JobRepository getJobRepository(final Properties configProperties) {
        String repositoryType = null;
        if (configProperties != null) {
            repositoryType = configProperties.getProperty(BatchSEEnvironment.JOB_REPOSITORY_TYPE_KEY);
            if (repositoryType != null) {
                repositoryType = repositoryType.trim();
   

        }
        JobRepository jobRepository;
        synchronized (INSTANCE) {
            jobRepository = INSTANCE.jobRepository;
            if (repositoryType == null || repositoryType.equalsIgnoreCase(BatchSEEnvironment.REPOSITORY_TYPE_IN_MEMORY)) {
                if (!(jobRepository instanceof InMemoryRepository)) {
                    jobRepository = INSTANCE.jobRepository = InMemoryRepository.getInstance();
                }
            } else if (repositoryType.isEmpty() || repositoryType.equalsIgnoreCase(BatchSEEnvironment.REPOSITORY_TYPE_JDBC)) {
                if (!(jobRepository instanceof JdbcRepository)) {
                    jobRepository = INSTANCE.jobRepository = JdbcRepository.create(configProperties);
                }
            } else if (repositoryType.equalsIgnoreCase(BatchSEEnvironment.REPOSITORY_TYPE_MONGODB)) {
                if (!(jobRepository instanceof MongoRepository)) {
                    jobRepository = INSTANCE.jobRepository = MongoRepository.c
/*
 * Created On:  16-Aug-07 8:55:15 AM
 */
/**
 * <b>Title:</b>thinkParity Ophelia Model Service Client<br>
 * <b>Description:</b>A service client for the ophelia model. Uses a facade
 * pattern to hide retry complexity from the client.<br>
 * 
 * @author raymond@thinkparity.com
 * @version 1.1.2.1
 */
public final class ServiceFactory implements
        com.thinkparity.service.ServiceFactory {
    /** A service factory. */
    private final com.thinkparity.service.ServiceFactory factory;
    /** A service client retry handler. */
    private ServiceRetryHandler retryHandler;
    /**
     * Create ServiceFactory.
     *
     */
    public ServiceFactory() {
        super();
        this.factory = ClientServiceFactory.getInstance();
    }
    /**
     * @see com.thinkparity.service.ServiceFactory#getArtifactService()
     *
     */
    @Override
    public ArtifactService getArtifactService() {
        return (ArtifactService) newProxyInstance(ArtifactService.class,
                fac

    }
    /**
     * @see com.thinkparity.service.ServiceFactory#getBackupService()
     *
     */
    @Override
    public BackupService getBackupService() {
        return (BackupService) newProxyInstance(BackupService.class,
                factory.getBackupService());
    }
    /**
     * @see com.thinkparity.service.ServiceFactory#getContactService()
     *
     */
    @Override
    public ContactService getContactService() {
        return (ContactService) newProxyInstance(ContactService.class,
                factory.getContactService());
    }
    /**
     * @see com.thinkparity.service.ServiceFactory#getContainerService()
     *
     */
    @Override
    public ContainerService getContainerService() {
        return (ContainerService) newProxyInstance(ContainerService.class,
                factory.getContainerService());
    }
    /**
     * @see com.thinkparity.service.ServiceFactory#getCryptoService()
     *
     */
    @Override
    public CryptoService getCryptoService()

        return (CryptoService) newProxyInstance(CryptoService.class,
                factory.getCryptoService());
    }
    /**
     * @see com.thinkparity.service.ServiceFactory#getMigratorService()
     *
     */
    @Override
    public MigratorService getMigratorService() {
        return (MigratorService) newProxyInstance(MigratorService.class,
                factory.getMigratorService());
    }
    /**
     * @see com.thinkparity.service.ServiceFactory#getProfileService()
     *
     */
    @Override
    public ProfileService getProfileService() {
        return (ProfileService) newProxyInstance(ProfileService.class,
                factory.getProfileService());
    }
    /**
     * @see com.thinkparity.service.ServiceFactory#getQueueService()
     *
     */
    @Override
    public QueueService getQueueService() {
        return (QueueService) newProxyInstance(QueueService.class,
                factory.getQueueService());
    }
    /**
     * Obtain retryHandler.
     *
     

     */
    public ServiceRetryHandler getRetryHandler() {
        return retryHandler;
    }
    /**
     * @see com.thinkparity.service.ServiceFactory#getRuleService()
     *
     */
    @Override
    public RuleService getRuleService() {
        return (RuleService) newProxyInstance(RuleService.class,
                factory.getRuleService());
    }
    /**
     * Obtain a session service.
     * 
     * @return An instance of <code>SessionService</code>.
     */
    public SessionService getSessionService() {
        return (SessionService) newProxyInstance(SessionService.class,
                factory.getSessionService());
    }
    /**
     * @see com.thinkparity.service.ServiceFactory#getStreamService()
     *
     */
    @Override
    public StreamService getStreamService() {
        return (StreamService) newProxyInstance(StreamService.class,
                factory.getStreamService());
    }
    /**
     * @see com.thinkparity.service.ServiceFactory#getSystemService()
     *

     */
    @Override
    public SystemService getSystemService() {
        return (SystemService) newProxyInstance(SystemService.class,
                factory.getSystemService());
    }
    /**
     * @see com.thinkparity.service.ServiceFactory#getUserService()
     *
     */
    @Override
    public UserService getUserService() {
        return (UserService) newProxyInstance(UserService.class,
                factory.getUserService());
    }
    /**
     * Set retryHandler.
     *
     * @param retryHandler
     *		A <code>ServiceRetryHandler</code>.
     */
    public void setRetryHandler(final ServiceRetryHandler retryHandler) {
        this.retryHandler = retryHandler;
    }
    /**
     * Obtain the current thread's context class loader.
     * 
     * @return A <code>ClassLoader</code>.
     */
    private ClassLoader getLoader() {
        return Thread.currentThread().getContextClassLoader();
    }
    /**
     * Create the service client proxy implementation.
     * 
     * 
public class UserGroup {
	public int getGroupId() {
		return groupId;
	}
	public void setGroupId(int groupId) {
		this.groupId = groupId;
	}
	public String getGroupName() {
		return groupName;
	}
	public void setGroupName(String groupName) {
		this.groupName = groupName;
	}
	public String getGroupInfo() {
		return groupInfo;
	}
	public void setGroupInfo(String groupInfo) {
		this.groupInfo = groupInfo;
	}
	public boolean isManageArticle() {
		return manageArticle;
	}
	public void setManageArticle(boolean manageArticle) {
		this.manageArticle = manageArticle;
	}
	public boolean isManageComment() {
		return manageComment;
	}
	public void setManageComment(boolean manageComment) {
		this.manageComment = manageComment;
	}
	public boolean isManageGroup() {
		return manageGroup;
	}
	public void setManageGroup(boolean manageGroup) {
		this.manageGroup = manageGroup;
	}
	public boolean isManageUser() {
		return manageUser;
	}
	public void setManageUser(boolean manageUser) {
		this.manageUser = 
/**
 * @author : igu
 */
public enum GaeRepositories {
    INSTANCE;
    private final FeedUpdateTaskSchedulerContextRepository feedUpdateTaskSchedulerContextRepository = new CachedFeedUpdateTaskSchedulerContextRepository(MemCache.INSTANCE);
    private final FeedItemsRepository feedItemsRepository = new CachedFeedItemsRepository(GaeFeedItemsRepository.INSTANCE, MemCache.INSTANCE);
    private final FeedUpdateTaskRepository feedUpdateTaskRepository = new CachedFeedUpdateTaskRepository(GaeFeedUpdateTaskRepository.INSTANCE, MemCache.INSTANCE);
    private final FeedHeadersRepository feedHeadersRepository = new CachedFeedHeadersRepository(GaeFeedHeadersRepository.INSTANCE, MemCache.INSTANCE);
    private final ReadFeedItemsRepository readFeedItemsRepository = GaeReadFeedItemsRepository.INSTANCE;
    private final CategoriesRepository categoriesRepository = new CachedCategoriesRepository(GaeCategoriesRepository.INSTANCE, MemCache.INSTANCE);
    private final UpdateErrorsRepository updateEr
public class TestChainofResponsibility {
	public static void main(String[] args) {
		File file = null;
		Handler textHandler = new TextFileHandler("Text Handler");
		Handler docHandler = new DocFileHandler("Doc Handler");
		Handler excelHandler = new ExcelFileHandler("Excel Handler");
		Handler audioHandler = new AudioFileHandler("Audio Handler");
		Handler videoHandler = new VideoFileHandler("Video Handler");
		Handler imageHandler = new ImageFileHandler("Image Handler");
		
		textHandler.setHandler(docHandler);
		docHandler.setHandler(excelHandler);
		excelHandler.setHandler(audioHandler);
		audioHandler.setHandler(videoHandler);
		videoHandler.setHandler(imageHandler);
		
		
		
		file = new File("Abc.mp3", "audio", "C:");
		textHandler.process(file);
		
		System.out.println("---------------------------------");
		
		file = new File("Abc.jpg", "video", "C:");
		textHandler.process(file);
		
		System.out.println("---------------------------------");
		
		file = new File("Abc.doc", "do
/**
 * This object represents a node in the process tree. It knows
 * information about the process it represents, and also
 * what its children are.
 */
public class OsProcess {
    private final ArrayList children = new ArrayList();
    private final ProcessInfo processInfo;
    private OsProcess(ProcessInfo processInfo) {
        this.processInfo = processInfo;
    }
    /**
     * This method is the only way to create an OsProcess object.
     * It creates a graph of OsProcess objects from an array of
     * ProcessInfo objects representing the processes in the system.
     *
     * @param processTable An array of objects representing the processes in the system.
     * @return A graph of OsProcess objects.
     */
    public static OsProcess createTree(ProcessInfo[] processTable) {
        HashMap processes = new HashMap();
        OsProcess topLevelProcess = new OsProcess(null);
        for (int i = 0; i < processTable.length; i++) {
            OsProcess process = new OsProcess(

            processes.put(new Integer(processTable[i].getPid()), process);
        }
        for (int i = 0; i < processTable.length; i++) {
            int pid = processTable[i].getPid();
            int ppid = processTable[i].getParentPid();
            OsProcess process = (OsProcess) processes.get(new Integer(pid));
            if (ppid == pid || !processes.containsKey(new Integer(ppid))) {
                topLevelProcess.children.add(process);
            } else {
                ((OsProcess) processes.get(new Integer(ppid))).children.add(process);
            }
        }
        return topLevelProcess;
    }
    /**
     * Gets the list of child processes of this object.
     *
     * @return The list of child processes of this object.
     */
    public List children() {
        return children;
    }
    /**
     * Information about this process.
     *
     * @return Information about this process.
     */
    public ProcessInfo processInfo() {
        return processInfo;
    

    /**
     * Finds and returns a particular node in the process tree
     * by its id.
     *
     * @param pid the id of the process to find.
     * @return The process node in the tree.
     */
    public OsProcess find(int pid) {
        if (this.processInfo != null && this.processInfo.getPid() == pid) {
            return this;
        }
        for (Iterator it = children.iterator(); it.hasNext();) {
            final OsProcess found = ((OsProcess) it.next()).find(pid);
            if (found != null) {
                return found;
            }
        }
        return null;
    }
    /**
     * Method to allow visiting the process tree. Use the convenience method
     * {@link JavaSysMon#visitProcessTree}
     *
     * @param processVisitor An instance of {@link ProcessVisitor}
     * @param level          The level currently being visited
     */
    public void accept(ProcessVisitor processVisitor, int level) {
        for (Iterator it = children.iterator(); it.hasNext();) 
public class ServiceSubscriptionAction extends BaseAction {
	private static final long serialVersionUID = -8612864488933336792L;
	private long serviceId;
	private String msg;
	private ServiceService serviceService;
	private ServiceSubscriptionService serviceSubscriptionService;
	public String execute() throws Exception {
		String userName = (String) getSession().getAttribute("userName");
		ServiceSubscriptionTBean serviceSubscriptionBean = (ServiceSubscriptionTBean) serviceSubscriptionService
				.get(userName, serviceId);
			msg = "You have subscript this service before.";
			return ERROR;
		} else {
			ServiceTBean bean = serviceService.getById(new Long(1), serviceId);
			if (bean == null) {
				msg = "The service not exist.";
				return ERROR;
			} else {
				msg = "Subscript the service successfully.";
				return SUCCESS;
			}
		}
	}
	public long getServiceId() {
		return serviceId;
	}
	public void setServiceId(long serviceId) {
		this.serviceId = serviceId;
	}
	public String getMs
/**
 * 개요
 * - 개인연차관리에 대한 Service Interface를 정의한다.
 *
 * 상세내용
 * - 개인연차관리에 대한 등록, 수정, 삭제, 조회 기능을 제공한다.
 * @author 이기하
 * @version 1.0
 * @created 2014.11.14
 */
public interface EgovIndvdlYrycManageService {
	/**
	 * 개인연차를 조회처리한다.
	 * @param indvdlYrycManage - 개인연차관리 model
	 */
	public List<IndvdlYrycManage> selectIndvdlYrycManageList(IndvdlYrycManage indvdlYrycManage) throws Exception;
	/**
	 * 연차목록 총 갯수를 조회한다.
	 * @param indvdlYrycManage - 개인연차관리 model
	 */
	public int selectIndvdlYrycManageListTotCnt(IndvdlYrycManage indvdlYrycManage) throws Exception;
	/**
	 * 개인연차를 입력처리한다.
	 * @param indvdlYrycManage - 개인연차관리 model
	 */
	public void insertIndvdlYrycManage(IndvdlYrycManage indvdlYrycManage) throws Exception;
	/**
	 * 개인연차를 수정한다.
	 * @param indvdlYrycManage - 개인연차관리 model
	 */
	public void updtIndvdlYrycManage(IndvdlYrycManage indvdlYrycManage) throws Exception;
	/**
	 * 개인연차를 삭제한다.
	 * @param indvdlYrycManage - 개인연차관리 model
	 */
	public void deleteIndvdlYrycManage(IndvdlYrycManage 
public class ProcessStepService {
	static Logger log = Logger.getLogger(ProcessStepService.class.getName());
	public List<ProcessStepTo> getProcessStepByProductionProcessId(int productionProcessId) throws Exception{
		return processStepDao.getProcessStepByProductionProcessId(productionProcessId);
	}
	@Transactional
	public void saveOrUpdateProcessStepList(List<ProcessStepTo> listProcessStep)throws Exception{
		ProcessStepTo processStepTo;
		
		for(int i = 0; i < listProcessStep.size(); i++){
			processStepTo = listProcessStep.get(i);
			processStepDao.saveOrUpdateProcessStep(processStepTo);
		}
	}
	@Transactional
	public void deleteProcessSteps(List<ProcessStepTo> listProcessStep)throws Exception{
		ProcessStepTo processStepTo = null;
		int len = listProcessStep.size();
		for(int i = 0; i < len; i++){
			processStepTo = listProcessStep.get(i);
			if(processStepTo.getId() > 0){
				processStepDao.delete(processStepTo.getId());
			}
		}
	}
	private ProcessStepDao processStepDao;
	public 
/**
 * Copyright 2012-2013 Mateusz Kubuszok
 *
 * <p>Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at</p> 
 * 
 *
 * <p>Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.</p>
 */
/**
 * Class responsible for building process queue that can be run as a single
 * process and elevated.
 */
public class ProcessQueueBuilder {
    private final ArrayList<ProcessBuilder> processBuilders;
    private final Map<ElevatedProcessBuilder, ProcessBuilder> elevatedProcessBuilders;
    /**
     * Creates builder that allows running several processes as one.
     */
    public ProcessQueueBuilder() {
        processB

        elevatedProcessBuilders = new HashMap<ElevatedProcessBuilder, ProcessBuilder>();
    }
    /**
     * Enqueues ProcessBuilders for queue.
     * 
     * @param processBuilders
     *            builders to be enqueued
     * @return this builder allowing chaining
     */
    public ProcessQueueBuilder enqueue(ProcessBuilder... processBuilders) {
        this.processBuilders.addAll(asList(processBuilders));
        return this;
    }
    /**
     * Enqueues ElevatedProcessBuilders for queue.
     * 
     * @param elevatedProcessBuilders
     *            builders to be enqueued
     * @return this builder allowing chaining
     */
    public ProcessQueueBuilder enqueue(ElevatedProcessBuilder... elevatedProcessBuilders) {
        for (ElevatedProcessBuilder elevatedProcessBuilder : elevatedProcessBuilders) {
            ProcessBuilder processBuilder = elevatedProcessBuilder.getProcessBuilder();
            this.elevatedProcessBuilders.put(elevatedProcessBuilder, processBuilder);

            processBuilders.add(processBuilder);
        }
        return this;
    }
    /**
     * Dequeues ProcessBuilders for queue.
     * 
     * @param processBuilders
     *            builders to be dequeued
     * @return this builder allowing chaining
     */
    public ProcessQueueBuilder dequeue(ProcessBuilder... processBuilders) {
        this.processBuilders.removeAll(asList(processBuilders));
        return this;
    }
    /**
     * Dequeues ElevatedProcessBuilders for queue.
     * 
     * @param elevatedProcessBuilders
     *            builders to be dequeued
     * @return this builder allowing chaining
     */
    public ProcessQueueBuilder dequeue(ElevatedProcessBuilder... elevatedProcessBuilders) {
        for (ElevatedProcessBuilder elevatedProcessBuilder : elevatedProcessBuilders)
            if (this.elevatedProcessBuilders.containsKey(elevatedProcessBuilder)) {
                ProcessBuilder processBuilder = this.elevatedProcessBuilders
                    
public class ManageTaskDelegate
		private ManageTaskService manageTaskService;
		public ManageTaskService getManageTaskService()
		{
				return this.manageTaskService;
		}
		public void setManageTaskService(ManageTaskService manageTaskService)
		{
				this.manageTaskService = manageTaskService;
		}
		public ArrayList<ManageTaskBean> getTaskDetails(ManageTaskBean manageTaskBean)
		{
		    return manageTaskService.getTaskDetails(manageTaskBean);
		}
		
		public boolean editTaskList(ManageTaskBean manageTaskBean)
		{
		    return manageTaskService.editTaskList(manageTaskBean);
		}
		
		public boolean insertTask(ManageTaskBean objManageTaskBean)
		{
		    return manageTaskService.insertTask(objManageTaskBean);
		}
		
		public ArrayList<ManageTaskBean> getTaskList(ManageTaskBean manageTaskBean)
		{
		    return manageTaskService.getTaskList();
		}
		
		public boolean deleteTask(ManageTaskBean objManageTaskBean) throws SQLException {
			return manageTaskService.deleteTask(objManageTaskBean);
/**
 * 그룹관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성 
 *
 * </pre>
 */
@Service("egovGroupManageService")
public class EgovGroupManageServiceImpl extends AbstractServiceImpl implements EgovGroupManageService {
	@Resource(name="groupManageDAO")
    private GroupManageDAO groupManageDAO;
	/**
	 * 시스템사용 목적별 그룹 목록 조회
	 * @param groupManageVO GroupManageVO
	 * @return List<GroupManageVO>
	 * @exception Exception
	 */
	public List<GroupManageVO> selectGroupList(GroupManageVO groupManageVO) throws Exception {
		return groupManageDAO.selectGroupList(groupManageVO);
	}
	/**
	 * 검색조건에 따른 그룹정보를 조회
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageV

		return groupManageDAO.selectGroup(groupManageVO);
	}
	/**
	 * 그룹 기본정보를 화면에서 입력하여 항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param groupManage GroupManage
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO insertGroup(GroupManage groupManage, GroupManageVO groupManageVO) throws Exception {
		groupManageDAO.insertGroup(groupManage);
		groupManageVO.setGroupId(groupManage.getGroupId());
		return groupManageDAO.selectGroup(groupManageVO);
	}
	/**
	 * 화면에 조회된 그룹의 기본정보를 수정하여 항목의 정합성을 체크하고 수정된 데이터를 데이터베이스에 반영
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void updateGroup(GroupManage groupManage) throws Exception {
		groupManageDAO.updateGroup(groupManage);
	}
	/**
	 * 불필요한 그룹정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void deleteGroup(GroupManage groupManage) throws Exception {
		groupManageDAO.deleteGroup(groupManage);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @par
/**
 * 회의관리를 처리하기 위한 Dao 구현 Class
 * @author 공통서비스 장동한
 * @since 2009.03.20
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  장동한          최초 생성
 *
 * </pre>
 */
@Repository("meetingManageDao")
public class MeetingManageDao extends EgovComAbstractDAO {
    /**
	 * 부서 목록을 조회한다. 
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	public List egovMeetingManageLisAuthorGroupPopup(ComDefaultVO searchVO){
		return (List)list("MeetingManage.EgovMeetingManageLisAuthorGroupPopup", searchVO);
	}
    /**
	 * 아이디 목록을 조회한다. 
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	public List egovMeetingManageLisEmpLyrPopup(ComDefaultVO searchVO){
		return (List)list("MeetingManage.EgovMeetingManageLisEmpLyrPopup", searchVO);
	}
    /**
	 * 회의정보 목록을 조회한다. 
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 

	 */
	public List selectMeetingManageList(ComDefaultVO searchVO){
		return (List)list("MeetingManage.selectMeetingManage", searchVO);
	}
    /**
	 * 회의정보를 상세조회 한다.
	 * @param MeetingManageVO - 회정정보가 담김 VO
	 * @return List
	 * @throws Exception
	 */
	public List selectMeetingManageDetail(MeetingManageVO meetingManageVO){
		return (List)list("MeetingManage.selectMeetingManageDetail", meetingManageVO);
	}
    /**
	 * 회의정보를 목록 전체 건수를 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return int
	 * @throws Exception
	 */
	public int selectMeetingManageListCnt(ComDefaultVO searchVO){
		return (Integer)getSqlMapClientTemplate().queryForObject("MeetingManage.selectMeetingManageCnt", searchVO);
	}
    /**
	 * 회의정보를 등록한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @throws Exception
	 */
	public void insertMeetingManage(MeetingManageVO meetingManageVO){
		insert("MeetingManage.insertMeetingManage", meetingManageVO);
	}
    /**
	 * 회의정보를 수정한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @throws Exception
	
/*******************************************************************************
 * Copyright (c) 2010-2011 Sonatype, Inc.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 *******************************************************************************/
/**
 * @author Benjamin Bentmann
 */
public interface RemoteRepositoryManager
    List<RemoteRepository> aggregateRepositories( RepositorySystemSession session,
                                                  List<RemoteRepository> dominantRepositories,
                                                  List<RemoteRepository> recessiveRepositories, boolean recessiveIsRaw );
    RepositoryPolicy getPolicy( RepositorySystemSession session, RemoteRepository repository, boolean releases,
                                boolean snapshots );
    RepositoryConnector getRepositoryConnector( Rep
public class InitialNodeTest extends AbstractJbpmTestCase {
  public void testInitialNode() {
    ProcessDefinition processDefinition = ProcessDefinition.parseXmlString(
      "<process-definition initial='first'>" +
      "  <state name='first'/>" +
      "</process-definition>"
    );
    
    assertEquals("first", processDefinition.getStartState().getName());
    ProcessInstance processInstance = new ProcessInstance(processDefinition);
    assertEquals("first", processInstance.getRootToken().getNode().getName());
  }
  
  public void testInitialNodeExecution() {
    ProcessDefinition processDefinition = ProcessDefinition.parseXmlString(
      "<process-definition initial='first'>" +
      "  <node name='first'>" +
      "    <transition to='next'/>" +
      "  </node>" +
      "  <state name='next'>" +
      "  </state>" +
      "</process-definition>"
    );
    
    assertEquals("first", processDefinition.getStartState().getName());
    ProcessInstance processInstance = new Proces
/**
 * 
 * Demarcation of the business process in pages.xml
 *
 */
public class ProcessControl
   private boolean isCreateProcess;
   private boolean isResumeProcess;
   private String definition;
   private ValueExpression<Long> processId;
   public void createOrResumeProcess()
   {
      if ( createProcess() )
      {
         BusinessProcess.instance().createProcess(definition);
      }
      if ( resumeProcess() )
      {
         BusinessProcess.instance().resumeProcess( processId.getValue() );
      }
   }
   private boolean createProcess()
   {
      return isCreateProcess;
   }
   private boolean resumeProcess()
   {
      return isResumeProcess;
   }
   public boolean isCreateProcess()
   {
      return isCreateProcess;
   }
   
   public void setCreateProcess(boolean isCreateProcess)
   {
      this.isCreateProcess = isCreateProcess;
   }
   
   public boolean isResumeProcess()
   {
      return isResumeProcess;
   }
   
   public void setResumeProcess(boolean isResumeProcess
public class CompositeServiceLogger implements ServiceLogger {
	private Collection<ServiceLogger> serviceLoggers;
	public boolean isEmpty() {
		return serviceLoggers == null || serviceLoggers.isEmpty();
	}
	@Reference(
		cardinality = ReferenceCardinality.MULTIPLE,
		unbind="removeServiceLogger"
	)
	public synchronized void addServiceLogger(ServiceLogger serviceLogger) {
		if (serviceLoggers == null) {
			serviceLoggers = new ArrayList<ServiceLogger>();
		}
		serviceLoggers.add(serviceLogger);
	}
	public synchronized void removeServiceLogger(ServiceLogger serviceLogger) {
		if (serviceLoggers != null) {
			serviceLoggers.remove(serviceLogger);
		}
	}
	@Override
	public void setServiceUri(String serviceUri) {
		if (serviceLoggers != null) {
			for (ServiceLogger serviceLogger : serviceLoggers) {
				serviceLogger.setServiceUri(serviceUri);
			}
		}
	}
	@Override
	public void serviceRequested(Object requestKey, String logKey, long timestamp) {
		if (serviceLoggers != null) {
			for (Serv
public class ManageEveryoneAction extends EveryoneAction {
	private ManageEveryoneService manageEveryoneService;
	private ManageUser manageUser;
	public ManageEveryoneService getManageEveryoneService() {
		return manageEveryoneService;
	}
	public void setManageEveryoneService(ManageEveryoneService manageEveryoneService) {
		this.manageEveryoneService = manageEveryoneService;
	}
	public ManageUser getManageUser() {
		return manageUser;
	}
	public void setManageUser(ManageUser manageUser) {
		this.manageUser = manageUser;
	}
	@Override
	public void prepare() throws Exception {
	}
	public String executeLogin() throws Exception {
		String result = ModuleAction.LOGIN;
		return result;
	}
	public String executeLogout() throws Exception {
		String result = ModuleAction.LOGOUT;
		this.strutsSession.put(InitializeListener.SESSION_USER_ID, null);
		return result;
	}
	public String executeVerity() throws Exception {
		String result = ActionSupport.SUCCESS;
		if (manageUser != null) {
			String us
/**
 * @Class Name : EgovBkmkMenuManageServiceImpl.java
 * @Description : 바로가기메뉴를 관리하는 서비스 구현 클래스
 * @Modification Information
 *
 *    수정일       수정자         수정내용
 *    -------        -------     -------------------
 *    2009. 9. 25.     윤성록
 *
 * @author 공통 컴포넌트 개발팀 윤성록
 * @since 2009. 9. 25.
 * @version
 * @see
 *
 */
@Service("bkmkMenuManageservice")
public class EgovBkmkMenuManageServiceImpl extends EgovAbstractServiceImpl implements EgovBkmkMenuManageservice{
    
    @Resource(name = "bkmkMenuManageDAO")
    private BkmkMenuManageDAO bkmkMenuManageDAO;
       
    /**
     * 바로가기메뉴관리 정보를 삭제한다.
     * @param BkmkMenuManage
     * @return  
     * @exception Exception
     */
    public void deleteBkmkMenuManage(BkmkMenuManage bkmkMenuManage) throws Exception  {
        bkmkMenuManageDAO.deleteBkmkMenuManage(bkmkMenuManage);        
    }
    /**
     * 바로가기메뉴관리 정보를 등록한다.
     * @param BkmkMenuManage
     * @return  
     * @exception Exception
     */
    public void insertBkmkMe

        bkmkMenuManageDAO.insertBkmkMenuManage(bkmkMenuManage);        
    }
    /**
     * 바로가기메뉴관리 정보의 전체목록을 조회한다.
     * @param BkmkMenuManage
     * @return  Map<String, Object>
     * @exception Exception
     */
    public Map<String, Object> selectBkmkMenuManageList(
            BkmkMenuManageVO bkmkMenuManageVO)  throws Exception{
        
        List<BkmkMenuManageVO> result = bkmkMenuManageDAO.selectBkmkMenuManageList(bkmkMenuManageVO);
        
        int cnt = bkmkMenuManageDAO.selectBkmkMenuManageListCnt(bkmkMenuManageVO);
        Map<String, Object> map = new HashMap<String, Object>();
        
        map.put("resultList", result);
        map.put("resultCnt", Integer.toString(cnt));
        return map;  
    }
    /**
     * 바로가기메뉴관리 정보를 조회한다.
     * @param BkmkMenuManageVO
     * @return  BkmkMenuManageVO
     * @exception Exception
     */
    public BkmkMenuManageVO selectBkmkMenuManageResult(
            BkmkMenuManageVO bkmkMenuManageVO) throws Exception {
    

    }
    /**
     * 등록할  메뉴정보 목록을 조회한다.
     * @param BkmkMenuManageVO
     * @return  Map<String, Object>
     * @exception Exception
     */
    public  Map<String, Object> selectMenuList(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        
        List<BkmkMenuManageVO> result = bkmkMenuManageDAO.selectBkmkMenuList(bkmkMenuManageVO);
        
        int cnt = bkmkMenuManageDAO.selectBkmkMenuListCnt(bkmkMenuManageVO);
        Map<String, Object> map = new HashMap<String, Object>();
        
        map.put("resultList", result);
        map.put("resultCnt", Integer.toString(cnt));
        return map;  
        
    }
    /**
     * 미리보기를 할 바로가기메뉴관리의 목록을 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return  List<MenuManageVO> 
     * @throws Exception
     */
    public List<MenuManageVO>  selectBkmkPreviewList(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        
                
        List<MenuManageVO> result = bkmkMenuManageDA
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Shengli.Cao
 */
public final class ServiceFactory {
    private ServiceFactory() {
    }
    public static EmployeeService getEmployeeService() {
        return new EmployeeServiceImpl();
    }
    public static ProjectService getProjectService() {
        return new ProjectServiceImpl();
    }
    public static SkillService getSkillService() {
        return new SkillServiceImpl();
    }
    public static ResourceDictionaryService getResourceDictionaryService() {
        return new ResourceDictionaryServiceImpl();
    }
    public static SkillCategoryService getSkillCategoryService(){
        return new SkillCategoryServiceImpl();
    }
    public static AssignmentService getAssignmentService(){
        return new AssignmentServiceImpl();
    }
    
    public static EmailService getEmailService(){
        return new EmailServiceImpl();
    }
    
    public static Fee
public interface Facade extends BaseFacade {
	BaseAttributeService getBaseAttributeService();
	BaseAttributeSonService getBaseAttributeSonService();
	BaseBrandInfoService getBaseBrandInfoService();
	BaseClassLinkAttributeService getBaseClassLinkAttributeService();
	BaseClassService getBaseClassService();
	BaseDataService getBaseDataService();
	BasePdClazzService getBasePdClazzService();
	BasePopedomService getBasePopedomService();
	BaseProvinceService getBaseProvinceService();
	DeptInfoService getDeptInfoService();
	HelpContentService getHelpContentService();
	HelpInfoService getHelpInfoService();
	HelpModuleService getHelpModuleService();
	ModPopedomService getModPopedomService();
	NewsAttachmentService getNewsAttachmentService();
	NewsContentService getNewsContentService();
	NewsInfoService getNewsInfoService();
	PdContentService getPdContentService();
	PdImgsService getPdImgsService();
	PdInfoCustomAttrContentService getPdInfoCustomAttrContentService();
	PdInfoCustomFieldContentServ
public class ProcessInstanceLog {
    
    private long processInstanceId;
    private String processId;
    private Date start;
    private Date end;
    
    ProcessInstanceLog() {
    }
    
    public ProcessInstanceLog(long processInstanceId, String processId) {
        setProcessInstanceId(processInstanceId);
        setProcessId(processId);
        setStart(new Date());
    }
    
    public long getProcessInstanceId() {
        return processInstanceId;
    }
    
    private void setProcessInstanceId(long processInstanceId) {
        this.processInstanceId = processInstanceId;
    }
    
    public String getProcessId() {
        return processId;
    }
    
    public void setProcessId(String processId) {
        this.processId = processId;
    }
    
    public Date getStart() {
        return start;
    }
    
    public void setStart(Date start) {
        this.start = start;
    }
    
    public Date getEnd() {
        return end;
    }
    
    public void setEnd(Date en
class SaleServiceImpl implements SaleService {
	/** 
	 * @uml.property name="positionRepository"
	 * @uml.associationEnd multiplicity="(1 1)" aggregation="shared" inverse="saleServiceImpl:basar.domain.PositionRepository"
	 */
	private PositionRepository positionRepository = DomainBasarFactory.instance.createPositionRepository();
	/** 
	 * @uml.property name="sellerRepository"
	 * @uml.associationEnd multiplicity="(1 1)" aggregation="shared" inverse="saleServiceImpl:basar.domain.SellerRepository"
	 */
	private SellerRepository sellerRepository = DomainBasarFactory.instance.createSellerRepository();
	/** 
	 * Getter of the property <tt>positionRepository</tt>
	 * @return  Returns the positionRepository.
	 * @uml.property  name="positionRepository"
	 */
	public PositionRepository getPositionRepository() {
		return positionRepository;
	}
	/** 
	 * Getter of the property <tt>sellerRepository</tt>
	 * @return  Returns the sellerRepository.
	 * @uml.property  name="sellerRepository"
	 */
	pub
/**
 * Service interface towards the Pan system.
 *
 * @see PanServiceImpl
 * @author bjoek
 * @since 2012-10-03
 */
public interface PanService {
    ServiceResult updateDisplayTradeDoublerCommission(ServiceResult serviceResult) throws BillingServiceException;
    ServiceResult fetchOrderLines(ServiceResult serviceResult) throws BillingServiceException;
    ServiceResult confirmOrderLines(ServiceResult serviceResult) throws BillingServiceException;
    ServiceResult fetchPrepaymentForecastOrderLines(ServiceResult serviceResult) throws BillingServiceException;
    ServiceResult confirmForecastOrderLines(ServiceResult serviceResult) throws BillingServiceException;
    ServiceResult fetchReadyToInvoice(ServiceResult serviceResult) throws BillingServiceException;
    ServiceResult confirmInvoicingStarted(ServiceResult serviceResult) throws BillingServiceException;
    ServiceResult handleInvoiceForPan(ServiceResult serviceResult) throws BillingServiceException;
    ServiceResult fetchCrea
/**
 * 
 */
/**
 * @author Peter Ansell p_ansell@yahoo.com
 *
 */
public class ArbitraryRepositoryManager implements RepositoryManager
    
    private Repository upstreamRepository;
    /**
     * Constructs an ArbitraryRepositoryManager as a wrapper around any repository
     */
    public ArbitraryRepositoryManager(Repository upstreamRepository)
    {
        this.upstreamRepository = upstreamRepository;
    }
    
    /* (non-Javadoc)
     * @see com.github.sesameloader.RepositoryManager#getConnection()
     */
    @Override
    public RepositoryConnection getConnection() throws RepositoryException
    {
        return upstreamRepository.getConnection();
    }
    
    /* (non-Javadoc)
     * @see com.github.sesameloader.RepositoryManager#shutDown()
     */
    @Override
    public void shutDown() throws SailException, RepositoryException
    {
        this.upstreamRepository.shutDown();
    }
    
    /* (non-Javadoc)
     * @see com.github.sesameloader.RepositoryManager#getValueF
public class SupplierIntegrityManageDao extends SqlMapClientDaoSupport implements ISupplierIntegrityManageDao {
  public void delSupplierIntegrityManageList(
  SupplierIntegrityManage supplierIntegrityManage) {
    this.getSqlMapClientTemplate().delete("IntegrityManage.del", supplierIntegrityManage);
  }
  public List getSupplierIntegrityManageList(
  ElementConditionDto dto, RequestMeta requestMeta) {
    return this.getSqlMapClientTemplate().queryForList("IntegrityManage.getList", dto);
  }
  public SupplierIntegrityManage saveSupplierIntegrityManage(
  SupplierIntegrityManage supplierIntegrityManage,
  RequestMeta requestMeta) {
    this.getSqlMapClientTemplate().update("IntegrityManage.updateIntegrityManage", supplierIntegrityManage);
    return supplierIntegrityManage;
  }
  public SupplierIntegrityManage insertSupplierIntegrityManageList(
  SupplierIntegrityManage supplierIntegrityManage) {
    this.getSqlMapClientTemplate().insert("IntegrityManage.insertIntegrityManage", supplie
public class ServiceSubscriptionLog extends BaseAction {
	private static final long serialVersionUID = 3458926851613111776L;
	private List<ServiceSubscriptionTBean> ServiceSubscriptionTList;
	private List<ServiceSubscriptionBean> ServiceSubscriptionList;
	private ServiceService serviceService;
	private ServiceSubscriptionService serviceSubscriptionService;
	public String getServiceSubscriptionLog() throws Exception {
		String userName = null;
		ServiceSubscriptionBean serviceSubscriptionBean;
		ActionContext ctx = ActionContext.getContext();
		userName = (String) ctx.getSession().get("userName");
		ServiceSubscriptionTList = serviceSubscriptionService
				.getByName(userName);
		ServiceSubscriptionList = new LinkedList<ServiceSubscriptionBean>();
		for (int i = 0; i < ServiceSubscriptionTList.size(); i++) {
			serviceSubscriptionBean = new ServiceSubscriptionBean();
			serviceSubscriptionBean.setServiceId(ServiceSubscriptionTList
					.get(i).getServiceId());
			serviceSubscriptionBean

					.getUserName());
			serviceSubscriptionBean.setServiceName(serviceService
					.getById(new Long(1),
							ServiceSubscriptionTList.get(i).getServiceId())
					.getName());
			ServiceSubscriptionList.add(serviceSubscriptionBean);
		}
		return SUCCESS;
	}
	public List<ServiceSubscriptionTBean> getServiceSubscriptionTList() {
		return ServiceSubscriptionTList;
	}
	public void setServiceSubscriptionTList(
			List<ServiceSubscriptionTBean> serviceSubscriptionTList) {
		ServiceSubscriptionTList = serviceSubscriptionTList;
	}
	public List<ServiceSubscriptionBean> getServiceSubscriptionList() {
		return ServiceSubscriptionList;
	}
	public void setServiceSubscriptionList(
			List<ServiceSubscriptionBean> serviceSubscriptionList) {
		ServiceSubscriptionList = serviceSubscriptionList;
	}
	public ServiceService getServiceService() {
		return serviceService;
	}
	public void setServiceService(ServiceService serviceService) {
		this.serviceService = serviceService;
	}
	public ServiceSubscript
/**
 * RSS태그관리를 처리하는 Service Class 구현
 * @author 공통서비스 장동한
 * @since 2010.06.16
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.07.03  장동한          최초 생성
 *
 * </pre>
 */
public interface EgovRssTagManageService {
    /**
     * JDBC 테이블 목록을조회한다.
     * @return List
     * @throws Exception
     */
    public List selectRssTagManageTableList() throws Exception;
    
    /**
     * JDBC 테이블 컬럼 목록을 조회한다.
     * @param map - 컬럼조회정보
     * @return List
     * @throws Exception
     */
    public List selectRssTagManageTableColumnList(Map map) throws Exception;
    
    /**
	 * RSS태그관리 목록을 조회한다. 
	 * @param rssManage -조회할 정보가 담긴 객체
	 * @return List
	 * @throws Exception
	 */
	public List selectRssTagManageList(RssManage rssManage) throws Exception;
    /**
     * RSS태그관리를(을) 목록 전체 건수를(을) 조회한다.
     * @param rssManage  -조회할 정보가 담긴 객체
     * @return int -조회한건수가담긴
/**
 * 개요
 * - 팝업창에 대한 ServiceImpl을 정의한다.
 * 
 * 상세내용
 * - 팝업창에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 팝업창의 조회기능은 목록조회, 상세조회로, 사용자화면 보기로 구분된다.
 * @author 이창원
 * @version 1.0
 * @created 05-8-2009 오후 2:19:58
 */
@Service("egovPopupManageService")
public class EgovPopupManageServiceImpl extends EgovAbstractServiceImpl implements EgovPopupManageService {
        @Resource(name = "popupManageDAO")
	public PopupManageDAO dao;
        @Resource(name = "egovPopupManageIdGnrService")
        private EgovIdGnrService idgenService;
        
	public EgovPopupManageServiceImpl(){}
	/**
	 * 기 등록된 팝업창정보를 삭제한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 * 
	 * @param popupManage
	 */
	public void deletePopup(PopupManageVO popupManageVO) throws Exception {
	    dao.deletePopup(popupManageVO);
	}
	/**
	 * 팝업창정보를 신규로 등록한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 * 
	 * @param popupManage
	 */
	public void insertPopup(PopupManageVO popupManageVO) throws 

	    String sMakeId = idgenService.getNextStringId();
	    popupManageVO.setPopupId(sMakeId);
	    dao.insertPopup(popupManageVO);
	}
        /**
         * 기 등록된 팝업창정보를 수정한다.
         * @param popupManage - 팝업창 model
         * @return boolean - 반영성공 여부
         * 
         * @param popupManage
         */
        public void updatePopup(PopupManageVO popupManageVO) throws Exception {
                dao.updatePopup(popupManageVO);
        }
	/**
	 * 팝업창을 사용자 화면에서 볼수 있는 정보들을 조회한다.
	 * @param popupManageVO - 팝업창 Vo
	 * @return popupManageVO - 팝업창 Vo
	 * 
	 * @param popupManageVO
	 */
	public PopupManageVO selectPopup(PopupManageVO popupManageVO) throws Exception {
		return (PopupManageVO)dao.selectPopup(popupManageVO);
	}
	/**
	 * 팝업창를 관리하기 위해 등록된 팝업창목록을 조회한다.
	 * @param popupManageVO - 팝업창 Vo
	 * @return List - 팝업창 목록
	 * 
	 * @param popupManageVO
	 */
	public List selectPopupList(PopupManageVO popupManageVO) throws Exception {
		return (List)dao.selectPopupList(popupManageVO);
	}
  
public class PathDefinition {
  final String pathTemplate;
  public PathDefinition(String pathTemplate) {
    this.pathTemplate = pathTemplate;
  }
  Map<RestHttpMethod, List<HandlerDefinition>> methodHandlers = new HashMap<>();
  public PathDefinition get(RestRequestHandler handler) {
    return get(new HandlerDefinition().withRequestHandler(handler));
  }
  public PathDefinition get(HandlerDefinition handler) {
    return addHandler(handler.withHttpMethod(RestHttpMethod.GET));
  }
  public PathDefinition post(RestRequestHandler handler) {
    return post(new HandlerDefinition().withRequestHandler(handler));
  }
  public PathDefinition post(HandlerDefinition handler) {
    return addHandler(handler.withHttpMethod(RestHttpMethod.POST));
  }
  public PathDefinition put(RestRequestHandler handler) {
    return put(new HandlerDefinition().withRequestHandler(handler));
  }
  public PathDefinition put(HandlerDefinition handler) {
    return addHandler(handler.withHttpMethod(RestHttpMethod.P

  }
  public PathDefinition delete(RestRequestHandler handler) {
    return delete(new HandlerDefinition().withRequestHandler(handler));
  }
  public PathDefinition delete(HandlerDefinition handler) {
    return addHandler(handler.withHttpMethod(RestHttpMethod.DELETE));
  }
  public PathDefinition patch(RestRequestHandler handler) {
    return patch(new HandlerDefinition().withRequestHandler(handler));
  }
  public PathDefinition patch(HandlerDefinition handler) {
    return addHandler(handler.withHttpMethod(RestHttpMethod.PATCH));
  }
  public PathDefinition head(RestRequestHandler handler) {
    return head(new HandlerDefinition().withRequestHandler(handler));
  }
  public PathDefinition head(HandlerDefinition handler) {
    return addHandler(handler.withHttpMethod(RestHttpMethod.HEAD));
  }
  public PathDefinition options(RestRequestHandler handler) {
    return options(new HandlerDefinition().withRequestHandler(handler));
  }
  public PathDefinition options(HandlerDefinition handl
public class ManageUserDAO {
	EntityManagerFactory factory = Persistence.createEntityManagerFactory("GOATrip");
	EntityManager em = factory.createEntityManager();
	public ManageUser createManageUser(ManageUser manageUser) {
		em.getTransaction().begin();
		em.persist(manageUser);
		em.getTransaction().commit();
		return manageUser;
	}
	public ManageUser findManageUserById(Integer id)
	{
		return em.find(ManageUser.class, id); 
	}
	public List<ManageUser> findAllManageUsers()
	{
		Query query = em.createQuery("select manageUser from ManageUser manageUser");
		return (List<ManageUser>)query.getResultList();
	}
	public ManageUser updateManageUser(ManageUser manageUser)
	{
		em.getTransaction().begin();
		em.merge(manageUser);
		em.getTransaction().commit();
		return manageUser;
	}
	public void deleteManageUser(int id) {
		em.getTransaction().begin();
		ManageUser manageUser = em.find(ManageUser.class, id);
		em.remove(manageUser);
		em.getTransaction().commit();
	}
	public static void mai
/**
 * Created by Nirav on 28/11/2015.
 */
public class ServiceInfo {
    private String serviceId;
    private String serviceName;
    private String serviceDescription;
    private String servicePhotoUrl;
    private Boolean newService;
    private Boolean activeService;
    public ServiceInfo(String serviceId, String serviceName, String serviceDescription, String servicePhotoUrl, Boolean newService, Boolean activeService) {
        this.serviceId = serviceId;
        this.serviceName = serviceName;
        this.serviceDescription = serviceDescription;
        this.servicePhotoUrl = servicePhotoUrl;
        this.newService = newService;
        this.activeService = activeService;
    }
    public String getServiceId() {
        return serviceId;
    }
    public void setServiceId(String serviceId) {
        this.serviceId = serviceId;
    }
    public String getServiceName() {
        return serviceName;
    }
    public void setServiceName(String serviceName) {
        this.serviceN
/**
 * Label widget
 *
 * @author Andrey Paslavsky
 * @version 1.0
 */
public abstract class Label extends Widget implements MouseAdapter.MouseSupport, HasAllTouchHandlers {
    private final MouseAdapter mouseAdapter = new MouseAdapter(this);
    private final TouchAdapter touchAdapter = new TouchAdapter(this);
    private boolean hidden = false;
    protected Label() {
        super("");
    }
    @Override
    protected Element createElement(Object... args) {
        return Document.get().createLabelElement();
    }
    public boolean isHidden() {
        return hidden;
    }
    public void setHidden(boolean hidden) {
        this.hidden = hidden;
        applyStyle();
    }
    @Override
    protected void applyStyle() {
        super.applyStyle();
        if (hidden) {
            addStyleName("sr-only");
        }
    }
    public String getFor() {
        return getElement().getAttribute("for");
    }
    public void setFor(String forValue) {
        getElement().setAttribute("

    }
    @Override
    public HandlerRegistration addMouseDownHandler(MouseDownHandler handler) {
        return mouseAdapter.addMouseDownHandler(handler);
    }
    @Override
    public HandlerRegistration addMouseMoveHandler(MouseMoveHandler handler) {
        return mouseAdapter.addMouseMoveHandler(handler);
    }
    @Override
    public HandlerRegistration addMouseOutHandler(MouseOutHandler handler) {
        return mouseAdapter.addMouseOutHandler(handler);
    }
    @Override
    public HandlerRegistration addMouseOverHandler(MouseOverHandler handler) {
        return mouseAdapter.addMouseOverHandler(handler);
    }
    @Override
    public HandlerRegistration addMouseUpHandler(MouseUpHandler handler) {
        return mouseAdapter.addMouseUpHandler(handler);
    }
    @Override
    public HandlerRegistration addMouseWheelHandler(MouseWheelHandler handler) {
        return mouseAdapter.addMouseWheelHandler(handler);
    }
    @Override
    public HandlerRegistration addClickHand

        return mouseAdapter.addClickHandler(handler);
    }
    @Override
    public HandlerRegistration addDoubleClickHandler(DoubleClickHandler handler) {
        return mouseAdapter.addDoubleClickHandler(handler);
    }
    @Override
    public HandlerRegistration addContextMenuHandler(ContextMenuHandler handler) {
        return mouseAdapter.addContextMenuHandler(handler);
    }
    @Override
    public HandlerRegistration addTouchCancelHandler(TouchCancelHandler handler) {
        return touchAdapter.addTouchCancelHandler(handler);
    }
    @Override
    public HandlerRegistration addTouchEndHandler(TouchEndHandler handler) {
        return touchAdapter.addTouchEndHandler(handler);
    }
    @Override
    public HandlerRegistration addTouchMoveHandler(TouchMoveHandler handler) {
        return touchAdapter.addTouchMoveHandler(handler);
    }
    @Override
    public HandlerRegistration addTouchStartHandler(TouchStartHandler handler) {
        return touchAdapter.addTouchStartHan
public class ServiceComponent {
    private IEncryptionService encryptionService;
    private IReportService reportService;
    
    private static ServiceComponent INSTANCE;
    
    /**
     * The constructor
     */
    public ServiceComponent() {
    	INSTANCE = this; 
    }
    
    public static ServiceComponent getDefault()
    {
    	return INSTANCE;
    }
    public IEncryptionService getEncryptionService()
    {
    	return encryptionService;
    }
    
    public void bindEncryptionService(IEncryptionService encryptionService)
    {
    	this.encryptionService = encryptionService;
    }
    
    public void unbindEncryptionService(IEncryptionService encryptionService)
    {
    	if (this.encryptionService == encryptionService)
    		this.encryptionService = null;
    }
    
    public IReportService getReportService()
    {
        return reportService;
    }
    
    public void bindReportService(IReportService reportService)
    {
        this.reportService = reportService
/**
 * 권한관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성 
 *
 * </pre>
 */
@Service("egovAuthorManageService")
public class EgovAuthorManageServiceImpl extends AbstractServiceImpl implements EgovAuthorManageService {
    
	@Resource(name="authorManageDAO")
    private AuthorManageDAO authorManageDAO;
    /**
	 * 권한 목록을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return List<AuthorManageVO>
	 * @exception Exception
	 */
    public List<AuthorManageVO> selectAuthorList(AuthorManageVO authorManageVO) throws Exception {
        return authorManageDAO.selectAuthorList(authorManageVO);
    }
    
	/**
	 * 권한을 등록한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void inser

    	authorManageDAO.insertAuthor(authorManage);
    }
    /**
	 * 권한을 수정한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void updateAuthor(AuthorManage authorManage) throws Exception {
    	authorManageDAO.updateAuthor(authorManage);
    }
    /**
	 * 권한을 삭제한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void deleteAuthor(AuthorManage authorManage) throws Exception {
    	authorManageDAO.deleteAuthor(authorManage);
    }
    /**
	 * 권한을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return AuthorManageVO
	 * @exception Exception
	 */
    public AuthorManageVO selectAuthor(AuthorManageVO authorManageVO) throws Exception {
    	AuthorManageVO resultVO = authorManageDAO.selectAuthor(authorManageVO);
        if (resultVO == null)
            throw processException("info.nodata.msg");
        return resultVO;
    }
    /**
	 * 권한 목록 카운트를 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return int
	 * @exception Exc
/**
 * Purviewmanage entity. @author MyEclipse Persistence Tools
 */
public class Purviewmanage implements java.io.Serializable {
	private Integer id;
	private Integer purviewId;
	private Integer employeManage;
	private Integer orderManage;
	private Integer sortManage;
	private Integer dishManage;
	/** default constructor */
	public Purviewmanage() {
	}
	/** minimal constructor */
	public Purviewmanage(Integer purviewId) {
		this.purviewId = purviewId;
	}
	/** full constructor */
	public Purviewmanage(Integer purviewId, Integer employeManage,
			Integer orderManage, Integer sortManage, Integer dishManage) {
		this.purviewId = purviewId;
		this.employeManage = employeManage;
		this.orderManage = orderManage;
		this.sortManage = sortManage;
		this.dishManage = dishManage;
	}
	public Integer getId() {
		return this.id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public Integer getPurviewId() {
		return this.purviewId;
	}
	public void setPurviewId(Integer purviewId) {
		this.pu
@Repository
public class ManageUserDao extends BaseHibernateDao {
	@SuppressWarnings("unchecked")
	public ManageUserModel getManageUserById(int id) {
		ManageUserModel m = null;
		String hql = "from " + AppConstant.MODEL_MANAGE_USER + " where "
				+ AppConstant.TABLE_MANAGE_USER_ID + " = " + id;
		Query q = this.getSession().createQuery(hql);
		List<ManageUserModel> list = q.list();
		if (list.size() > 0)
			m = (ManageUserModel) list.get(0);
		return m;
	}
	@SuppressWarnings("unchecked")
	public List<ManageUserModel> getManageUserAll() {
		String hql = "from " + AppConstant.MODEL_MANAGE_USER;
		Query q = this.getSession().createQuery(hql);
		List<ManageUserModel> list = q.list();
		return list;
	}
	@SuppressWarnings("unchecked")
	public ManageUserModel getManageUserByUsername(String username) {
		ManageUserModel m = null;
		String hql = "from " + AppConstant.MODEL_MANAGE_USER + " where "
				+ AppConstant.TABLE_MANAGE_USER_USERNAME + " = '" + username
				+ "'";
		Query q = this.getS
/**
 * 권한별 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Service("egovAuthorRoleManageService")
public class EgovAuthorRoleManageServiceImpl extends EgovAbstractServiceImpl implements EgovAuthorRoleManageService {
	@Resource(name="authorRoleManageDAO")
    private AuthorRoleManageDAO authorRoleManageDAO;
	/**
	 * 권한 롤 관계정보를 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return AuthorRoleManageVO
	 * @exception Exception
	 */
	public AuthorRoleManageVO selectAuthorRole(AuthorRoleManageVO authorRoleManageVO) throws Exception {
		return authorRoleManageDAO.selectAuthorRole(authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보 목록 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return List<AuthorRoleManageVO>
	 * @exception Exception
	 */
	

		return authorRoleManageDAO.selectAuthorRoleList(authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보를 화면에서 입력하여 입력항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void insertAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		authorRoleManageDAO.insertAuthorRole(authorRoleManage);
	}
	/**
	 * 수정된 권한 롤 관계정보를 데이터베이스에 반영
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void updateAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		authorRoleManageDAO.updateAuthorRole(authorRoleManage);
	}
	/**
	 * 권한 롤 관계정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void deleteAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		authorRoleManageDAO.deleteAuthorRole(authorRoleManage);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return int
	 * @exception Exception
	 */
	public in
/**
 * Created by khaled on 08/04/17.
 */
public  class  CpuManger {
    private  ArrayList<Process> processes;
    private  ArrayList <ProcessResult> processResults;
    int length ;
    public CpuManger(ArrayList<Process> processes) {
         this.processes=processes;
         processResults = new ArrayList<>();
        int i = 0;
        int number;
        while (!processes.isEmpty()){
            number=findPriority(i);
            if(number !=0){
               i = addResult(deleteProcesses(number));
            }
            i++;
        }
    }
    public  ArrayList<ProcessResult> endResults (){
        return processResults;
    }
    private Process deleteProcesses (int number){
        Process process=new Process();
        length = processes.size();
        int i=0;
        do{
            if(processes.get(i).getNumber() == number){
                process = processes.get(i);
                i=length;
            }
            else {
                i++;
            }
    

        processes.remove(process);
        return  process;
    }
    private int  addResult  (Process process){
        ProcessResult processResult = new ProcessResult();
        int start =0;
        int end;
        processResult.setNumber(process.getNumber());
        if(!processResults.isEmpty()){
            start = processResults.get(processResults.size()-1).getEndTime();
        }
        processResult.setStartTime(start);
        end=start+process.getBurstTime();
        processResult.setEndTime(end);
        processResult.setWaitingTime(start-process.getArrivalTime());
        processResult.setTurnaroundTime(end-process.getArrivalTime());
        processResults.add(processResult);
        return end;
    }
    private  int  findPriority (int time) {
        length = processes.size();
        Process proces = new Process();
        int miniPriority =0 ;
        int number =0 ;
        for (int i = 0; i < length; i++) {
            if (processes.get(i).getArrivalTime() <= time
@Component
public class JpaServiceFactory implements ServiceFactory
    @Autowired
    @Qualifier("cityServiceJpaImpl")
    private CityService cityService;
    @Autowired
    @Qualifier("facultyServiceJpaImpl")
    private FacultyService facultyService;
    @Autowired
    @Qualifier("gradeServiceJpaImpl")
    private GradeService gradeService;
    @Autowired
    @Qualifier("groupServiceJpaImpl")
    private GroupService groupService;
    @Autowired
    @Qualifier("languageServiceJpaImpl")
    private LanguageService languageService;
    @Autowired
    @Qualifier("loginUserDetailsService")
    private UserDetailsService userDetailsService;
    @Autowired
    @Qualifier("newsServiceJpaImpl")
    private NewsService newsService;
    @Autowired
    @Qualifier("personServiceJpaImpl")
    private PersonService personService;
    @Autowired
    @Qualifier("pictureServiceJpaImpl")
    private PictureService pictureService;
    @Autowired
    @Qualifier("studentServiceJpaImpl")
    private Stu

    @Autowired
    @Qualifier("subjectServiceJpaImpl")
    private SubjectService subjectService;
    @Autowired
    @Qualifier("teacherServiceJpaImpl")
    private TeacherService teacherService;
    @Autowired
    @Qualifier("universityServiceJpaImpl")
    private UniversityService universityService;
    public CityService getCityService()
    {
        return cityService;
    }
    public FacultyService getFacultyService()
    {
        return facultyService;
    }
    public GradeService getGradeService()
    {
        return gradeService;
    }
    public GroupService getGroupService()
    {
        return groupService;
    }
    public LanguageService getLanguageService()
    {
        return languageService;
    }
    public UserDetailsService getUserDetailsService()
    {
        return userDetailsService;
    }
    public NewsService getNewsService()
    {
        return newsService;
    }
    public PersonService getPersonService()
    {
        return personService;
    }
  
/**
 * Created by viktor on 3/26/14.
 */
public class PersistenceFactoryImpl implements PersistenceFactory{
    private final HashMap<Class<?>, JPARepository> repositories = new HashMap<>();
    public PersistenceFactoryImpl(EntityManager entityManager) {
        FachRepositoryJPA fachRepositoryJPA=new FachRepositoryJPA();
        fachRepositoryJPA.setEntityManager(entityManager);
        repositories.put(FachRepositoryJPA.class, fachRepositoryJPA);
        KlasseRepositoryJPA klasseRepositoryJPA=new KlasseRepositoryJPA();
        klasseRepositoryJPA.setEntityManager(entityManager);
        repositories.put(KlasseRepositoryJPA.class, klasseRepositoryJPA);
        LehrerRepositoryJPA lehrerRepositoryJPA=new LehrerRepositoryJPA();
        lehrerRepositoryJPA.setEntityManager(entityManager);
        repositories.put(LehrerRepositoryJPA.class, lehrerRepositoryJPA);
        SchuelerRepositoryJPA schuelerRepositoryJPA=new SchuelerRepositoryJPA();
        schuelerRepositoryJPA.setEntityManage
public class WetodoPlugin implements Plugin {
    public void initializePlugin(PluginManager manager, File pluginDirectory) {
        IQRouter iqRouter = XMPPServer.getInstance().getIQRouter();
        iqRouter.addHandler(new IQTaskGroupAddHandler());
        iqRouter.addHandler(new IQTaskGroupListHandler());
        iqRouter.addHandler(new IQTaskGroupModifyHandler());
        iqRouter.addHandler(new IQTaskGroupDelHandler());
        iqRouter.addHandler(new IQTaskAddHandler());
        iqRouter.addHandler(new IQTaskDelHandler());
        iqRouter.addHandler(new IQTaskListHandler());
        iqRouter.addHandler(new IQTaskListAllHandler());
        iqRouter.addHandler(new IQTaskModifyHandler());
        iqRouter.addHandler(new IQCodeSendHandler());
        iqRouter.addHandler(new IQCodeValidateHandler());
        iqRouter.addHandler(new IQAccountRegisterHandler());
        iqRouter.addHandler(new IQAccountInfoHandler());
        iqRouter.addHandler(new IQRoomListHandler());
        iqRou
/**
 * 
 */
/**
 * @author sabuj.das
 *
 */
public final class DbexServiceBeanFactory {
	private static DbexServiceBeanFactory beanFactory;
	private DbexServiceBeanFactory() {
	}
	public static DbexServiceBeanFactory getBeanFactory() {
		if(beanFactory == null)
			beanFactory = new DbexServiceBeanFactory();
		return beanFactory;
	}
	private DatabaseConnectionService databaseConnectionService;
	private DatabaseMetadataService databaseMetadataService;
	private QueryExecutionService queryExecutionService;
	private DependencyService dependencyService;
	private TableDataExportService tableDataExportService;
	private SqlGeneratorService sqlGeneratorService;
	public DependencyService getDependencyService() {
		return dependencyService;
	}
	public void setDependencyService(DependencyService dependencyService) {
		this.dependencyService = dependencyService;
	}
	public QueryExecutionService getQueryExecutionService() {
		return queryExecutionService;
	}
	public void setQueryExecutionService(Quer

		this.queryExecutionService = queryExecutionService;
	}
	public DatabaseConnectionService getDatabaseConnectionService() {
		return databaseConnectionService;
	}
	public void setDatabaseConnectionService(
			DatabaseConnectionService databaseConnectionService) {
		this.databaseConnectionService = databaseConnectionService;
	}
	public DatabaseMetadataService getDatabaseMetadataService() {
		return databaseMetadataService;
	}
	public void setDatabaseMetadataService(
			DatabaseMetadataService databaseMetadataService) {
		this.databaseMetadataService = databaseMetadataService;
	}
	public TableDataExportService getTableDataExportService() {
		return tableDataExportService;
	}
	public void setTableDataExportService(
			TableDataExportService tableDataExportService) {
		this.tableDataExportService = tableDataExportService;
	}
	public SqlGeneratorService getSqlGeneratorService() {
		return sqlGeneratorService;
	}
	public void setSqlGeneratorService(SqlGeneratorService sqlGeneratorService) {
/**
 * 권한별 롤 관리에 관한 서비스 인터페이스 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성 
 *
 * </pre>
 */
public interface EgovAuthorRoleManageService {
	/**
	 * 권한 롤 관계정보를 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @exception Exception
	 */
	public AuthorRoleManageVO selectAuthorRole(AuthorRoleManageVO authorRoleManageVO) throws Exception;
	/**
	 * 권한 롤 관계정보 목록 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return List<AuthorRoleManageVO>
	 * @exception Exception
	 */
	public List<AuthorRoleManageVO> selectAuthorRoleList(AuthorRoleManageVO authorRoleManageVO) throws Exception;
	/**
	 * 권한 롤 관계정보를 화면에서 입력하여 입력항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	p
/*******************************************************************************
 * Copyright (c) 2010-2011 Sonatype, Inc.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 *******************************************************************************/
/**
 * Thrown in case of an unsupported remote repository type.
 * 
 * @author Benjamin Bentmann
 */
public class NoRepositoryConnectorException
    extends RepositoryException
    private final RemoteRepository repository;
    public NoRepositoryConnectorException( RemoteRepository repository )
    {
        this( repository, toMessage( repository ) );
    }
    public NoRepositoryConnectorException( RemoteRepository repository, String message )
    {
        super( message );
        this.repository = repository;
    }
    public NoRepositoryConnectorException( RemoteRepository reposit
public class ManageFacilityDelegate
		private ManageFacilityService manageFacilityService;
		public ManageFacilityService getManageFacilityService()
		{
				return this.manageFacilityService;
		}
		public void setManageFacilityService(ManageFacilityService manageFacilityService)
		{
				this.manageFacilityService = manageFacilityService;
		}
		public ArrayList<ManageFacilityBean> getFacilityDetails(ManageFacilityBean manageFacilityBean) {
			return manageFacilityService.getFacilityDetails(manageFacilityBean);
		}
		public boolean deleteFaciity(ManageFacilityBean manageFacilityBean) {
			return manageFacilityService.deleteFaciity(manageFacilityBean);
		}
		
		public ArrayList<ManageFacilityBean> getFacilityList() {
			return manageFacilityService.getFacilityList();
		}
		public ArrayList<ManageFacilityBean> getCheckpointList() {
			return manageFacilityService.getCheckpointList();
		}
		
		public boolean insertFacility(ManageFacilityBean objManageFacilityBean) {
			return manageFacility
/**
 * Copyright (c) 2010 Abbcc Corp.
 * No 225,Wen Yi RD, Hang Zhou, Zhe Jiang, China.
 * All rights reserved.
 *
 * "PortalBaseAction.java is the copyrighted,
 * proprietary property of Abbcc Company and its
 * subsidiaries and affiliates which retain all right, title and interest
 * therein."
 * 
 * Revision History
 *
 * Date              Programmer                   Notes
 * ---------    ---------------------  --------------------------------------------
 * 2010-3-1           baowp                      initial
 */
@SuppressWarnings("serial")
public abstract class PortalBaseAction<T> extends BaseAction<T> {
	protected SyscodeService syscodeService;
	protected UserService userService;
	protected EnterpriseService enterpriseService;
	protected ProductService productService;
	protected SupplyService supplyService;
	protected NewsService newsService;
	public PaginationSupport enterpriseItems;
	public void setProductService(ProductService productService) {
		this.productService = produc
/**
 * 개요
 * - 팝업창에 대한 DAO를 정의한다.
 * 
 * 상세내용
 * - 팝업창에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 팝업창의 조회기능은 목록조회, 상세조회로, 사용자화면 보기로 구분된다.
 * @author 이창원
 * @version 1.0
 * @created 05-8-2009 오후 2:21:04
 */
@Repository("popupManageDAO")
public class PopupManageDAO extends EgovComAbstractDAO {
	public PopupManageDAO(){}
	/**
	 * 기 등록된 팝업창정보를 삭제한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 * 
	 * @param popupManage
	 */
	public void deletePopup(PopupManageVO popupManageVO) throws Exception {
	    delete("PopupManage.deletePopupManage", popupManageVO);
	}
	/**
	 * 팝업창정보를 신규로 등록한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 * 
	 * @param popupManage
	 */
	public void insertPopup(PopupManageVO popupManageVO) throws Exception {
	    insert("PopupManage.insertPopupManage", popupManageVO);
	}
        /**
         * 기 등록된 팝업창정보를 수정한다.
         * @param popupManage - 팝업창 model
         * @return boolean - 반영성공 여부
         * 
         * @param popupMan

         */
        public void updatePopup(PopupManageVO popupManageVO) throws Exception {
            update("PopupManage.updatePopupManage", popupManageVO);
        }
	/**
	 * 팝업창을 사용자 화면에서 볼수 있는 정보들을 조회한다.
	 * @param popupManageVO - 팝업창 Vo
	 * @return popupManageVO - 팝업창 Vo
	 * 
	 * @param popupManageVO
	 */
	public PopupManageVO selectPopup(PopupManageVO popupManageVO) throws Exception {
	    return (PopupManageVO)getSqlMapClientTemplate().queryForObject("PopupManage.selectPopupManageDetail", popupManageVO);
	}
	/**
	 * 팝업창를 관리하기 위해 등록된 팝업창목록을 조회한다.
	 * @param popupManageVO - 팝업창 Vo
	 * @return List - 팝업창 목록
	 * 
	 * @param popupManageVO
	 */
	public List selectPopupList(PopupManageVO popupManageVO) throws Exception {
	    return (List)list("PopupManage.selectPopupManage", popupManageVO);
	}
        /**
         * 팝업창를 관리하기 위해 등록된 팝업창목록 총갯수를 조회한다.
         * @param popupManageVO - 팝업창 Vo
         * @return List - 팝업창 목록
         * 
         * @param popupManageVO
         */
    
public class PL {
	public static List<ProcessListElement> processList = new ArrayList<ProcessListElement>();
	public static void initialise() {
		processList.add(new ProcessListElement(Statiniai.Pstring.BeginEnd));
		processList.add(new ProcessListElement(Statiniai.Pstring.IInterrupt));
		processList.add(new ProcessListElement(Statiniai.Pstring.InputStream));
		processList.add(new ProcessListElement(Statiniai.Pstring.SyntaxCheck));
		processList.add(new ProcessListElement(Statiniai.Pstring.Loader));
		processList.add(new ProcessListElement(Statiniai.Pstring.Destroyer));
		processList.add(new ProcessListElement(Statiniai.Pstring.Interrupt));
		processList.add(new ProcessListElement(Statiniai.Pstring.Swapper));
		processList.add(new ProcessListElement(Statiniai.Pstring.Writer));
		processList.add(new ProcessListElement(Statiniai.Pstring.MainGovernor));
		processList.add(new ProcessListElement(Statiniai.Pstring.JobGovernor));
		processList.add(new ProcessListElement(Statiniai.Pstring.Virt
public class ServiceTools {
	public static void dumpInstanceState(Logger log, DelegateExecution processInstance) {
		log.info("processInstance.getCurrentActivityName: {}", processInstance.getCurrentActivityName());
		log.info("processInstance.getCurrentActivityId: {}", processInstance.getCurrentActivityId());
		log.info("processInstance.getEventName: {}", processInstance.getEventName());
		log.info("processInstance.getProcessBusinessKey: {}", processInstance.getProcessBusinessKey());
		log.info("processInstance.getProcessDefinitionId: {}", processInstance.getProcessDefinitionId());
		log.info("processInstance.getProcessInstanceId: {}", processInstance.getProcessInstanceId());
		log.info("processInstance.getId: {}", processInstance.getId());
		dumpVariables(log, processInstance);
	}
	public static void dumpVariables(Logger log, DelegateExecution processInstance) {
		for (String variableName : processInstance.getVariableNames()) {
			log.info("Variable: {} = {}", variableName, processIns
public class MsgHandler extends JedisPubSub {
	Logger logger = LoggerFactory.getLogger(MsgHandler.class);
	/**
	 * @param handler
	 *            消息处理接口
	 */
	public MsgHandler(Handler handler) {
		this.msgHandler = handler;
	}
	/**
	 * @param msgHandler
	 *            消息处理接口
	 * @param subHandler
	 *            订阅初始化接口
	 */
	public MsgHandler(Handler msgHandler, Handler subHandler) {
		this.msgHandler = msgHandler;
		this.subHandler = subHandler;
	}
	/**
	 * @param msgHandler
	 *            消息处理接口
	 * @param subHandler
	 *            订阅初始化接口
	 * @param unSubHandler
	 *            取消订阅接口
	 */
	public MsgHandler(Handler msgHandler, Handler subHandler, Handler unSubHandler) {
		this.msgHandler = msgHandler;
		this.subHandler = subHandler;
		this.unSubHandler = unSubHandler;
	}
	/**
	 * 消息处理方法
	 * 
	 * @param chanel
	 *            队列名称
	 * @param msg
	 *            消息json串
	 */
	@Override
	public void onMessage(String chanel, String msg) {
		Message message = new Message();
		message.setCh

		message.setMsg(msg);
		msgHandler.handle(message);
	}
	/**
	 * 订阅初始化方法
	 * 
	 * @param chanel
	 *            队列名称
	 * @param i
	 *            第几个队列
	 */
	@Override
	public void onSubscribe(String chanel, int i) {
		onOrUnSubHandle(subHandler, chanel, i);
	}
	/**
	 * 取消订阅方法
	 * 
	 * @param chanel
	 *            队列名称
	 * @param i
	 *            第几个队列
	 */
	@Override
	public void onUnsubscribe(String chanel, int i) {
		onOrUnSubHandle(unSubHandler, chanel, i);
	}
	/**
	 * 取得按表达式的方式订阅的消息后的处理
	 */
	@Override
	public void onPMessage(String s, String s1, String s2) {
	}
	/**
	 * 取消按表达式的方式订阅的消息后的处理
	 */
	@Override
	public void onPUnsubscribe(String s, int i) {
	}
	/**
	 * 初始化按表达式订阅时候的处理
	 */
	@Override
	public void onPSubscribe(String s, int i) {
	}
	public Handler getMsgHandler() {
		return msgHandler;
	}
	public void setMsgHandler(Handler msgHandler) {
		this.msgHandler = msgHandler;
	}
	public Handler getSubHandler() {
		return subHandler;
	}
	public void setSubHandler(Handler subHandler
@Service
@Transactional
public class DemandManageServiceImpl implements DemandManageService {
	private DemandManageDao demandManageDao;
	private DemandValueDao demandValueDao;
	public String addDemand(String demandName, String demandMemo){
		DemandManage dmExist =demandManageDao.findUniqueBy("demandName", demandName);
		if(dmExist != null){
			return "需求名已存在，请重新添加";
		}
		DemandManage dm =new DemandManage();
		dm.setDemandMemo(demandMemo);
		dm.setDemandName(demandName);
		
		demandManageDao.save(dm);
		return "添加成功！";
	}
	/**
	 * 未完善
	 * 还要考虑是否有order引用该demand
	 */
	public String deleteDemand(long id){
		demandValueDao.batchExecute("delete from DemandValue dv where dv.demandManage.id=?", id);
		demandManageDao.delete(id);
		return "删除成功！";
	}
	public String updateDemand(long id, String demandName, String demandMemo){
		List<DemandManage> dmList = demandManageDao.find("from DemandManage dm where id <> ? and demandName = ? ",id,demandName);
		if(dmList.size()!=0){
			return "需求名已存在，请重新修改
public class Container {
    private static Container instance = new Container();
    private AuthorRepository authorRepository;
    private BookRepository bookRepository;
    private MagazineRepository magazineRepository;
    private AuthorService authorService;
    private BookService bookService;
    private MagazineService magazineService;
    private Container() {
    }
    public static Container getInstance() {
        return instance;
    }
    public AuthorRepository getAuthorRepository() {
        if (authorRepository == null) {
            authorRepository = new AuthorRepository();
        }
        return authorRepository;
    }
    public void setAuthorRepository(AuthorRepository authorRepository) {
        this.authorRepository = authorRepository;
    }
    public BookRepository getBookRepository() {
        if (bookRepository == null) {
            bookRepository = new BookRepository();
        }
        return bookRepository;
    }
    public void setBookRepository(Book

        this.bookRepository = bookRepository;
    }
    public MagazineRepository getMagazineRepository() {
        if (magazineRepository == null) {
            magazineRepository = new MagazineRepository();
        }
        return magazineRepository;
    }
    public void setMagazineRepository(MagazineRepository magazineRepository) {
        this.magazineRepository = magazineRepository;
    }
    public AuthorService getAuthorService() {
        if (authorService == null) {
            this.authorService = new AuthorService(getAuthorRepository());
        }
        return authorService;
    }
    public void setAuthorService(AuthorService authorService) {
        this.authorService = authorService;
    }
    public BookService getBookService() {
        if (bookService == null) {
            this.bookService = new BookService(getBookRepository(), getAuthorService());
        }
        return bookService;
    }
    public void setBookService(BookService bookService) {
        this.b
/**
 * Core de los servicios web, de esta clase extienden todos los recursos
 * 
 * @author rospena
 * 
 */
public class JSONCore {
	@Autowired
	private LigaService ligaService;
	@Autowired
	private PartidoService partidoService;
	@Autowired
	private PeriodoService periodoService;
	private ObjectMapper mapper = new ObjectMapper();
	@Autowired
	private GruposService grupoService;
	@Autowired
	private EquipoService equipoService;
	public EquipoService getEquipoService() {
		return equipoService;
	}
	public void setEquipoService(EquipoService equipoService) {
		this.equipoService = equipoService;
	}
	public LigaService getLigaService() {
		return ligaService;
	}
	public void setLigaService(LigaService ligaService) {
		this.ligaService = ligaService;
	}
	public ObjectMapper getMapper() {
		return mapper;
	}
	public void setMapper(ObjectMapper mapper) {
		this.mapper = mapper;
	}
	public PartidoService getPartidoService() {
		return partidoService;
	}
	public void setPartidoService(PartidoS
public class ServiceFactory {
	private AccountService accountService;
	private ConsumptionService consumptionService;
	private OutletService outletService;
	private RfidService rfidService;
	private SchedulingService schedulingService;
	private StatisticService statisticService;
	private SystemService systemService;
	private UserService userService;
	public ServiceFactory(){
		accountService = new AccountService();
		consumptionService = new ConsumptionService();
		outletService = new OutletService();
		rfidService = new RfidService();
		schedulingService = new SchedulingService();
		statisticService = new StatisticService();
		systemService = new SystemService();
		userService = new UserService();
	}
	public ServiceFactory(AccountService accountService, ConsumptionService consumptionService, OutletService outletService, 
			RfidService rfidService, SchedulingService schedulingService, StatisticService statisticService, SystemService systemService,
			UserService userService){
		this.a

		this.consumptionService = consumptionService;
		this.outletService = outletService;
		this.rfidService = rfidService;
		this.schedulingService = schedulingService;
		this.statisticService = statisticService;
		this.systemService = systemService;
		this.userService = userService;
	}
	public AccountService getAccountService() {
		return accountService;
	}
	public void setAccountService(AccountService accountService) {
		this.accountService = accountService;
	}
	public ConsumptionService getConsumptionService() {
		return consumptionService;
	}
	public void setConsumptionService(ConsumptionService consumptionService) {
		this.consumptionService = consumptionService;
	}
	public OutletService getOutletService() {
		return outletService;
	}
	public void setOutletService(OutletService outletService) {
		this.outletService = outletService;
	}
	public RfidService getRfidService() {
		return rfidService;
	}
	public void setRfidService(RfidService rfidService) {
		this.rfidService = rfidServic
public class ServiceFactory {
	private AccountService accountService;
	private ConsumptionService consumptionService;
	private OutletService outletService;
	private RfidService rfidService;
	private SchedulingService schedulingService;
	private StatisticService statisticService;
	private SystemService systemService;
	private UserService userService;
	public ServiceFactory(){
		accountService = new AccountService();
		consumptionService = new ConsumptionService();
		outletService = new OutletService();
		rfidService = new RfidService();
		schedulingService = new SchedulingService();
		statisticService = new StatisticService();
		systemService = new SystemService();
		userService = new UserService();
	}
	public AccountService getAccountService() {
		return accountService;
	}
	public void setAccountService(AccountService accountService) {
		this.accountService = accountService;
	}
	public ConsumptionService getConsumptionService() {
		return consumptionService;
	}
	public void setConsumpt

		this.consumptionService = consumptionService;
	}
	public OutletService getOutletService() {
		return outletService;
	}
	public void setOutletService(OutletService outletService) {
		this.outletService = outletService;
	}
	public RfidService getRfidService() {
		return rfidService;
	}
	public void setRfidService(RfidService rfidService) {
		this.rfidService = rfidService;
	}
	public SchedulingService getSchedulingService() {
		return schedulingService;
	}
	public void setSchedulingService(SchedulingService schedulingService) {
		this.schedulingService = schedulingService;
	}
	public StatisticService getStatisticService() {
		return statisticService;
	}
	public void setStatisticService(StatisticService statisticService) {
		this.statisticService = statisticService;
	}
	public SystemService getSystemService() {
		return systemService;
	}
	public void setSystemService(SystemService systemService) {
		this.systemService = systemService;
	}
	public UserService getUserService() {
		return 
/**
 * @Class Name : BkmkMenuManageDAO.java
 * @Description : 바로가기메뉴를 관리하는 서비스를 정의하기위한 데이터 접근 클래스
 * @Modification Information
 *
 *    수정일       수정자         수정내용
 *    -------        -------     -------------------
 *    2009. 9. 25.     윤성록
 *
 * @author 공통 컴포넌트 개발팀 윤성록
 * @since 2009. 9. 25.
 * @version
 * @see
 *
 */
@Repository("bkmkMenuManageDAO")
public class BkmkMenuManageDAO extends EgovComAbstractDAO{
    /**
     * 바로가기메뉴관리 정보를 삭제한다.
     *
     * @param BkmkMenuManage
     * @return
     * @throws Exception
     */
    public void deleteBkmkMenuManage(BkmkMenuManage bkmkMenuManage) throws Exception {
        delete("BkmkMenuManageDAO.deleteBkmkMenuManage", bkmkMenuManage);
    }
    /**
     * 바로가기메뉴관리 정보를 등록한다.
     *
     * @param BkmkMenuManage
     * @return
     * @throws Exception
     */
    public void insertBkmkMenuManage(BkmkMenuManage bkmkMenuManage) throws Exception {
        insert("BkmkMenuManageDAO.insertBkmkMenuManage", bkmkMenuManage);
    }
    /**
     * 

     *
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public BkmkMenuManageVO selectBkmkMenuManageResult(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        BkmkMenuManageVO vo = new BkmkMenuManageVO();
        vo = (BkmkMenuManageVO)select("BkmkMenuManageDAO.selectBkmkMenuManage", bkmkMenuManageVO);
        return vo;
    }
    /**
     * 조건에 맞는 바로가기메뉴관리 정보 목록을 조회한다.
     *
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public List<BkmkMenuManageVO> selectBkmkMenuManageList(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        return (List<BkmkMenuManageVO>) list("BkmkMenuManageDAO.selectBkmkMenuManageList", bkmkMenuManageVO);
    }
    /**
     * 조건에 맞는 바로가기메뉴관리 정보 목록의 건수를 조회한다.
     *
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public int selectBkmkMenuManageListCnt(BkmkMenuManageVO bkmkMenuManageVO) throws Exception {
        retu

    }
    /**
     * 등록할  메뉴정보 목록을 조회한다.
     *
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public List<BkmkMenuManageVO> selectBkmkMenuList(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        return (List<BkmkMenuManageVO>) list("BkmkMenuManageDAO.selectBkmkMenuList", bkmkMenuManageVO);
    }
    /**
     * 등록할  메뉴정보 목록의 건수를 조회한다.
     *
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public int selectBkmkMenuListCnt(BkmkMenuManageVO bkmkMenuManageVO) throws Exception {
        return (Integer)select("BkmkMenuManageDAO.selectBkmkMenuListCnt", bkmkMenuManageVO);
    }
    /**
     * 미리보기를 할 바로가기메뉴관리의 목록을 조회한다.
     *
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public List<MenuManageVO> selectBkmkPreview(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        return (List<MenuManageVO>) list("BkmkMenuManageDAO.selectBkmkPreview", bkmkM
public class ManageCheckpointDelegate
		private ManageCheckpointService manageCheckpointService;
		public ManageCheckpointService getManageCheckpointService()
		{
				return this.manageCheckpointService;
		}
		public void setManageCheckpointService(ManageCheckpointService manageCheckpointService)
		{
				this.manageCheckpointService = manageCheckpointService;
		}
		
		public ArrayList<ManageCheckpointBean> getTaskDetails(ManageCheckpointBean manageCheckpointBean) {
			return manageCheckpointService.getCheckpointDetails(manageCheckpointBean);
		}
		
		public boolean deleteCheckpoint(ManageCheckpointBean manageCheckpointBean) {
			return manageCheckpointService.deleteCheckpoint(manageCheckpointBean);
		}
		
		public ArrayList<ManageCheckpointBean> getTaskList(ManageCheckpointBean manageCheckpointBean) {
			return manageCheckpointService.getTaskList(manageCheckpointBean);
		}
		
		public boolean insertCheckpoint(ManageCheckpointBean manageCheckpointBean) {
			return manageCheckpointServic
public class OrdersManage {
	private OrdersDao ordersDao;
	private GoodsManage goodsManage;
	private UserManageImp userManage;
	private SaveManage saveManage;
	public SaveManage getSaveManage() {
		return saveManage;
	}
	public void setSaveManage(SaveManage saveManage) {
		this.saveManage = saveManage;
	}
	public GoodsManage getGoodsManage() {
		return goodsManage;
	}
	public void setGoodsManage(GoodsManage goodsManage) {
		this.goodsManage = goodsManage;
	}
	public UserManageImp getUserManage() {
		return userManage;
	}
	public void setUserManage(UserManageImp userManage) {
		this.userManage = userManage;
	}
	public OrdersDao getOrdersDao() {
		return ordersDao;
	}
	public void setOrdersDao(OrdersDao ordersDao) {
		this.ordersDao = ordersDao;
	}
	public List<Orders> showAllOrders() {
		System.out.println("------show orders");
		return ordersDao.showAllOrders();
	}
	public void AddOrders(Orders goods) {
		int money = goods.getGood().getPrice();
		User user = goods.getUser();
		user.set
@Repository("deptManageDAO")
public class DeptManageDAO extends EgovComAbstractDAO {
	/**
	 * 부서를 관리하기 위해 등록된 부서목록을 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return List - 부서 목록
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<DeptManageVO> selectDeptManageList(DeptManageVO deptManageVO) throws Exception {
		return list("deptManageDAO.selectDeptManageList", deptManageVO);
	}
    /**
	 * 부서목록 총 갯수를 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return int - 부서 카운트 수
	 * @exception Exception
	 */
    public int selectDeptManageListTotCnt(DeptManageVO deptManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("deptManageDAO.selectDeptManageListTotCnt", deptManageVO);
    }
	/**
	 * 등록된 부서의 상세정보를 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return deptManageVO - 부서 Vo
	 * 
	 * @param bannerVO
	 */
	public DeptManageVO selectDeptManage(DeptManageVO deptManageVO) throws Exception {
		return (DeptManageVO) selectByPk("deptManageDAO.s
/**
 * Simple container for holding a service principal and its corresponding registered serivce.
 *
 * @author Marvin S. Addison
 * @since 4.0.0
 */
public class ServiceContext {
    /** Service principal. */
    
    private Service service;
    /** Registered service corresponding to service principal. */
    
    private RegisteredService registeredService;
    /**
     * Creates a new instance with required parameters.
     *
     * @param service Service principal.
     * @param registeredService Registered service corresponding to given service.
     */
    public ServiceContext(final Service service, final RegisteredService registeredService) {
        this.service = service;
        this.registeredService = registeredService;
        if (!registeredService.matches(service)) {
            throw new IllegalArgumentException("Registered service does not match given service.");
        }
    }
    /**
     * Gets the service principal.
     *
     * @return Non-null service princi
/**
 * 개요
 * - 포상관리에 대한 ServiceImpl 클래스를 정의한다.
 * 
 * 상세내용
 * - 포상관리에 대한 등록, 수정, 삭제, 조회, 승인처리 기능을 제공한다.
 * - 포상관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Service("egovRwardManageService")
public class EgovRwardManageServiceImpl extends AbstractServiceImpl implements EgovRwardManageService {
	@Resource(name="rwardManageDAO")
    private RwardManageDAO rwardManageDAO;
    /** ID Generation */  
	@Resource(name="egovRwardManageIdGnrService")
	private EgovIdGnrService idgenRwardManageService;
	@Resource(name="EgovInfrmlSanctnService")
    protected EgovInfrmlSanctnService infrmlSanctnService;
	/**
	 * 포상관리정보를 관리하기 위해 등록된 포상관리 목록을 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return List - 포상관리 목록
	 */
	public List<RwardManageVO> selectRwardManageList(RwardManageVO rwardManageVO) throws Exception{
		rwardManageVO.setSearchFromDate(EgovStringUtil.removeMinusChar(rwardManageVO.getSearchFromDate()));
		rwardManageVO.setSearchToDate(EgovStri

		List<RwardManageVO> result = rwardManageDAO.selectRwardManageList(rwardManageVO);
		
		int num = result.size();
	    for (int i = 0 ; i < num ; i ++ ){
	    	RwardManageVO rwardManageVO1 = result.get(i);
	    	rwardManageVO1.setRwardDe(EgovDateUtil.formatDate(rwardManageVO1.getRwardDe(), "-"));
	    	result.set(i, rwardManageVO1);
	    }	
		return result;
	}
	/**
	 * 포상관리목록 총 갯수를 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return int - 포상관리 카운트 수
	 */
	public int selectRwardManageListTotCnt(RwardManageVO rwardManageVO) throws Exception {
		return rwardManageDAO.selectRwardManageListTotCnt(rwardManageVO);
	}
	/**
	 * 등록된 포상관리의 상세정보를 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return RwardManageVO - 포상관리 VO
	 */
	public RwardManageVO selectRwardManage(RwardManageVO rwardManageVO) throws Exception {
		RwardManageVO rwardManageVOTemp = rwardManageDAO.selectRwardManage(rwardManageVO);
		rwardManageVOTemp.setRwardDe(EgovDateUtil.formatDate(rwardManageVOTemp.getRwardDe(), "-"));		
		
	

	}
	/**
	 * 포상관리정보를 신규로 등록한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void insertRwardManage(RwardManage rwardManage) throws Exception {
		/*
		 * 포상 승인처리  신청 infrmlSanctnService.insertInfrmlSanctn("000", vcatnManage);
		 */
		rwardManage.setRwardDe(EgovStringUtil.removeMinusChar(rwardManage.getRwardDe()));
		rwardManage.setInfrmlSanctnId(infrmlSanctn.getInfrmlSanctnId());
		rwardManage.setConfmAt(infrmlSanctn.getConfmAt());
		String	sRwardId = idgenRwardManageService.getNextStringId();
		rwardManage.setRwardId(sRwardId);
		
		rwardManageDAO.insertRwardManage(rwardManage);
	}
	/**
	 * 기 등록된 포상관리정보를 수정한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void updtRwardManage(RwardManage rwardManage) throws Exception {
		rwardManage.setRwardDe(EgovStringUtil.removeMinusChar(rwardManage.getRwardDe()));
		rwardManageDAO.updtRwardManage(rwardManage);
	}
	/**
	 * 기 등록된 포상관리정보를 삭제한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void deleteRwardManage(RwardManage rwardManage) thro

		/*
		 * 포상 승인처리  삭제 infrmlSanctnService.deleteInfrmlSanctn("000", vcatnManage);
		 */
		rwardManage.setRwardDe(EgovStringUtil.removeMinusChar(rwardManage.getRwardDe()));
		rwardManageDAO.deleteRwardManage(rwardManage);
	}
	/**
	 * 포상관리정보 승인 처리를 위해 신청된 포상관리 목록을 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return List - 포상관리 목록
	 */
	public List<RwardManageVO> selectRwardManageConfmList(RwardManageVO rwardManageVO) throws Exception{
		rwardManageVO.setSearchFromDate(EgovStringUtil.removeMinusChar(rwardManageVO.getSearchFromDate()));
		rwardManageVO.setSearchToDate(EgovStringUtil.removeMinusChar(rwardManageVO.getSearchToDate()));
		List<RwardManageVO> result = rwardManageDAO.selectRwardManageConfmList(rwardManageVO);
		int num = result.size();
	    for (int i = 0 ; i < num ; i ++ ){
	    	RwardManageVO rwardManageVO1 = result.get(i);
	    	rwardManageVO1.setRwardDe(EgovDateUtil.formatDate(rwardManageVO1.getRwardDe(), "-"));
	    	result.set(i, rwardManageVO1);
	    }	
		return result;

	}
	/**
	 * 포상승인목록 총 갯수를 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return int - 포상관리 카운트 수
	 */
	public int selectRwardManageConfmListTotCnt(RwardManageVO rwardManageVO) throws Exception {
		return rwardManageDAO.selectRwardManageConfmListTotCnt(rwardManageVO);
	}
	/**
	 * 포상정보를 승인/반려처리 한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void updtRwardManageConfm(RwardManage rwardManage) throws Exception {
		 InfrmlSanctn infrmlSanctn = new InfrmlSanctn();
		 rwardManage.setRwardDe(EgovStringUtil.removeMinusChar(rwardManage.getRwardDe()));
		 if(rwardManage.getConfmAt().equals("C")){
			/*
			 * 승인처리
			 */
		 }else if(rwardManage.getConfmAt().equals("R")){
			/*
			 * 반려처리
			 */
		 }
		 rwardManage.setSanctnDt(infrmlSanctn.getSanctnDt());
		 rwardManage.setConfmAt(infrmlSanctn.getConfmAt());
		 rwardManageDAO.updtRwardManageConfm(rwardManage);
	}
	/**
	 * RwardManage model을 InfrmlSanctn model로 변환한다.
	 * @param RwardManage
	 * @return InfrmlSanctn
	 * @param rwardManage
	 */
	pr
public interface IPrcManager {
	public PrcProcessInst getProcessInst(String user, String id, String level) throws PrcException;
	public PrcProcessInst getProcessInst(String user, PrcProcessInstCond cond, String level) throws PrcException;
	public void setProcessInst(String user, PrcProcessInst obj, String level) throws PrcException;
	public void removeProcessInst(String user, String id) throws PrcException;
	public long getProcessInstSize(String user, PrcProcessInstCond cond) throws PrcException;
	public PrcProcessInst[] getProcessInsts(String user, PrcProcessInstCond cond, String level) throws PrcException;
	public long getProcessInstExtendsSize(String user, PrcProcessInstCond cond) throws PrcException;
	public PrcProcessInstExtend[] getProcessInstExtends(String user, PrcProcessInstCond cond) throws PrcException;
	public PrcProcess getProcess(String user, String id, String level) throws PrcException;
	public void setProcess(String user, PrcProcess obj, String level) throws PrcExceptio

	public void removeProcess(String user, String id) throws PrcException;
	public long getProcessSize(String user, PrcProcessCond cond) throws PrcException;
	public PrcProcess[] getProcesses(String user, PrcProcessCond cond, String level) throws PrcException;
	public PrcSwProcess[] getSwProcesses(String user, PrcSwProcessCond cond) throws PrcException;
	public PrcProcessInstRel getProcessInstRel(String user, String id, String level) throws PrcException;
	public void setProcessInstRel(String user, PrcProcessInstRel obj, String level) throws PrcException;
	public void removeProcessInstRel(String user, String id) throws PrcException;
	public long getProcessInstRelSize(String user, PrcProcessInstRelCond cond) throws PrcException;
	public PrcProcessInstRel[] getProcessInstRels(String user, PrcProcessInstRelCond cond, String level) throws PrcException;
	public PrcProcessInstVariable getProcessInstVariable(String user, String id, String level) throws PrcException;
	public void setProcessInstVa
/**
 * Taicang mscz Inc.
 * Copyright (c) 2010-2013 All Rights Reserved.
 */
/**
 * 文件处理器工厂
 * 
 * @author narutoying09@gmail.com
 * @version $Id: FileHandlerFactory.java, v 0.1 2013-10-22 上午9:07:34
 *          narutoying09@gmail.com Exp $
 */
public class FileHandlerFactory {
	private final Map<String, FileHandler> handlersMap = new HashMap<String, FileHandler>();
	/**
	 * 获取指定的文件处理器
	 * 
	 * @param inputStream
	 * @param handlerName
	 * @return
	 */
	public FileHandler getFileHandler(String handlerName) {
		FileHandler fileHandler = handlersMap.get(handlerName);
		if (fileHandler == null) {
			throw new CommonException("未找到指定的文件处理器[" + handlerName + "]");
		} else {
			return fileHandler;
		}
	}
	public synchronized void registerFileHandler(FileHandler fileHandler) {
		String handlerName = fileHandler.getHandlerName();
		FileHandler handler = handlersMap.get(handlerName);
		if (handler == null) {
			handlersMap.put(handlerName, fileHandler);
		} else {
			throw new CommonException("已
/**
 * Factoria de repositorios
 * @author David Diaz Garcia
 * @date 24-04-2015
 */
public class RepositoryFactory {
	/**
	 * Atributo que almacena la instancia del provider local y MySql
	 */
	private final static DProvider PROVIDER_LOCAL_MYSQL = ProviderFactory.createMysqlProvider();
	/**
	 * Método que fabrica un UserRepository
	 * 
	 * @return UserRepository
	 */
	public static UserRepository createUserRepository() {
		return new UserRepository(PROVIDER_LOCAL_MYSQL);
	}
	/**
	 * Método que fabricca un PersonRepository
	 * 
	 * @return PersonRepository
	 */
	public static PersonRepository createPersonRepository() {
		return new PersonRepository(PROVIDER_LOCAL_MYSQL);
	}
	/**
	 * Método que fabrica un AddressRepository
	 * 
	 * @return AddressRepository
	 */
	public static AddressRepository createAddressRepository() {
		return new AddressRepository(PROVIDER_LOCAL_MYSQL);
	}
	/**
	 * Método que fabrica un RoleRepository
	 * 
	 * @return RoleRepository
	 */
	public static RoleReposito

		return new RoleRepository(PROVIDER_LOCAL_MYSQL);
	}
	/**
	 * Método que fabrica un SchoolRepository
	 * 
	 * @return SchoolRepository
	 */
	public static SchoolRepository createSchoolRepository() {
		return new SchoolRepository(PROVIDER_LOCAL_MYSQL);
	}
	/**
	 * Método que fabrica un CourseRepository
	 * 
	 * @return CourseRepository
	 */
	public static CourseRepository createCourseRepository() {
		return new CourseRepository(PROVIDER_LOCAL_MYSQL);
	}
	/**
	 * Método que fabrica un CourseSchoolRepository
	 * 
	 * @return CourseSchoolRepository
	 */
	public static CourseSchoolRepository createCourseSchoolRepository() {
		return new CourseSchoolRepository(PROVIDER_LOCAL_MYSQL);
	}
	/**
	 * Método que fabrica un CycleRepository
	 * 
	 * @return CycleRepository
	 */
	public static CycleRepository createCycleRepository() {
		return new CycleRepository(PROVIDER_LOCAL_MYSQL);
	}
	/**
	 * Método que fabrica un ModuleRepository
	 * 
	 * @return ModuleRepository
	 */
	public static ModuleRepo

		return new ModuleRepository(PROVIDER_LOCAL_MYSQL);
	}
	/**
	 * Método que fabrica un TypeRepository
	 * 
	 * @return TypeRepository
	 */
	public static TypeRepository createTypeRepository() {
		return new TypeRepository(PROVIDER_LOCAL_MYSQL);
	}
	/**
	 * Método que fabriva un SubtypeRepository
	 * 
	 * @return SubtypeRepository
	 */
	public static SubtypeRepository createSubtypeRepository() {
		return new SubtypeRepository(PROVIDER_LOCAL_MYSQL);
	}
	/**
	 * Método que fabrica un ChpaterRepository
	 * 
	 * @return ChapterRepository
	 */
	public static ChapterRepository createChapterRepository() {
		return new ChapterRepository(PROVIDER_LOCAL_MYSQL);
	}
	/**
	 * Método que fabrica un SessionRepository
	 * 
	 * @return SessionRepository
	 */
	public static SessionRepository createSessionRepository() {
		return new SessionRepository(PROVIDER_LOCAL_MYSQL);
	}
	/**
	 * Método que fabrica un UserModuleRepository
	 * 
	 * @return UserModuleRepository
	 */
	public static UserModuleRepository
/*
 * Copyright 2004-2008 the Seasar Foundation and the Others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
 * either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
/**
 * 
 * @author yosuke
 * 
 */
public class JcrRepository {
    private static final Log logger_ = LogFactory.getLog(JcrRepository.class);
    public JcrRepository() {}
    
    /** Default repository configuration file. */
    private static final String DEFAULT_CONF_FILE = "repository.xml";
    
    /** Default repository directory. */
    private static final String DEFAULT_REP_DIR = ".";
    /** configuration fil

    private String repositoryConfigFile_ = "";
    
    /** repository home directory */
    private String repositoryHomeDir_ = "";
    
    /**
     * initialize repository.
     * 
     * @param repositoryConfigFile
     * @param repositoryHomeDir
     * @param senHomeDir
     */
    public void init(String repositoryConfigFile, String repositoryHomeDir, String senHomeDir) {
        this.repositoryConfigFile_ = repositoryConfigFile;
        this.repositoryHomeDir_ = repositoryHomeDir;
        System.setProperty("sen.home", senHomeDir);
        
        logger_.debug("::: JcrRepository#init :::");
        logger_.debug("::: repositoryConfigFile:[" + repositoryConfigFile + "] :::");
        logger_.debug(":::    repositoryHomeDir:[" + repositoryHomeDir    + "] :::");
        logger_.debug(":::           senHomeDir:[" + senHomeDir           + "] :::");
        logger_.debug("---");
    }
    /**
     * destroy repository.
     */
    public void destroy() {
        logger_.debug("::: 

        if (this.repository_ instanceof JackrabbitRepository) {
            ((JackrabbitRepository) this.repository_).shutdown();
        }
    }
    /** repository */
    protected Repository repository_;
    /**
     * create repository.
     * 
     * @return
     * @throws JcrRepositoryRuntimeException
     */
    public Repository createRepository() throws JcrRepositoryRuntimeException {
        logger_.debug("::: JcrRepository#createRepository :::");
        try {
            if (this.repository_ == null) {
                if (this.repositoryConfigFile_ == null || "".equals(this.repositoryConfigFile_)) {
                    this.repositoryConfigFile_ = DEFAULT_CONF_FILE;
                }
                if (this.repositoryHomeDir_ == null || "".equals(this.repositoryHomeDir_)) {
                    this.repositoryHomeDir_ = DEFAULT_REP_DIR;
                }
                RepositoryConfig repositoryConfig = RepositoryConfig.create(this.repositoryConfigFile_,
                 
/**
 * 설문관리를 처리하는 Dao Class 구현
 * @author 공통서비스 장동한
 * @since 2009.03.20
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  장동한          최초 생성
 *
 * </pre>
 */ 
@Repository("qustnrManageDao")
public class QustnrManageDao extends EgovAbstractDAO {
    /**
	 * 설문템플릿 목록을 조회한다. 
	 * @param qustnrManageVO - 설문관리 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public List selectQustnrTmplatManageList(QustnrManageVO qustnrManageVO) throws Exception{
		return (List)list("QustnrManage.selectQustnrTmplatManage", qustnrManageVO);
	}
    /**
	 * 설문관리 목록을 조회한다. 
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public List selectQustnrManageList(ComDefaultVO searchVO) throws Exception{
		return (List)list("QustnrManage.selectQustnrManage", searchVO);
	}
    /**
	 * 

	 * @param qustnrManageVO - 설문관리 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
    public QustnrManageVO selectQustnrManageDetailModel(QustnrManageVO qustnrManageVO) throws Exception {    	
        return (QustnrManageVO) selectByPk("QustnrManage.selectQustnrManageDetailModel", qustnrManageVO);
    }
    
    /**
	 * 설문관리를(을) 상세조회 한다.
	 * @param qustnrManageVO - 설문관리 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public List selectQustnrManageDetail(QustnrManageVO qustnrManageVO) throws Exception{
		return (List)list("QustnrManage.selectQustnrManageDetail", qustnrManageVO);
	}
    /**
	 * 설문관리를(을) 목록 전체 건수를(을) 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return int
	 * @throws Exception
	 */
	public int selectQustnrManageListCnt(ComDefaultVO searchVO) throws Exception{
		return (Integer)getSqlMapClientTemplate().queryForObject("QustnrManage.selectQustnrManageCnt", searchVO);
	}
    /**
	 * 설문관리를(을) 등록한다.
	 * @param qqustnrManageVO - 설문관리
/**
 * 설문항목관리를 처리하는 Dao Class 구현
 * @author 공통서비스 장동한
 * @since 2009.03.20
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  장동한          최초 생성
 *
 * </pre>
 */
@Repository("qustnrItemManageDao")
public class QustnrItemManageDao extends EgovComAbstractDAO {
    /**
	 * 설문템플릿(을)를  목록을 조회한다.
	 * @param qustnrItemManageVO - 설문항목 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
	public List<?> selectQustnrTmplatManageList(QustnrItemManageVO qustnrItemManageVO) throws Exception{
		return list("QustnrItemManage.selectQustnrTmplatManage", qustnrItemManageVO);
	}
    /**
	 * 설문항목 목록을 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	public List<?> selectQustnrItemManageList(ComDefaultVO searchVO) throws Exception{
		return list("QustnrItemManage.selectQustnrItemManage", searchVO);
	}
    /**
	 * 설문항목를(을) 상세조회 한다.
	 * @par

	 * @return List
	 * @throws Exception
	 */
	public List<?> selectQustnrItemManageDetail(QustnrItemManageVO qustnrItemManageVO) throws Exception{
		return list("QustnrItemManage.selectQustnrItemManageDetail", qustnrItemManageVO);
	}
    /**
	 * 설문항목를(을) 목록 전체 건수를(을) 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return int
	 * @throws Exception
	 */
	public int selectQustnrItemManageListCnt(ComDefaultVO searchVO) throws Exception{
		return (Integer)select("QustnrItemManage.selectQustnrItemManageCnt", searchVO);
	}
    /**
	 * 설문항목를(을) 등록한다.
	 * @param qqustnrItemManageVO - 설문항목 정보 담김 VO
	 * @throws Exception
	 */
	public void insertQustnrItemManage(QustnrItemManageVO qustnrItemManageVO) throws Exception{
		insert("QustnrItemManage.insertQustnrItemManage", qustnrItemManageVO);
	}
    /**
	 * 설문항목를(을) 수정한다.
	 * @param qustnrItemManageVO - 설문항목 정보 담김 VO
	 * @throws Exception
	 */
	public void updateQustnrItemManage(QustnrItemManageVO qustnrItemManageVO) throws Exception{
		insert("Qustnr
public class EnumSetDemo {
	private enum ProcessType { TYPE1, TYPE2, TYPE3, TYPE4, TYPE5,
								TYPE6, TYPE7, TYPE8, TYPE9, TYPE0};
	public static void main(String[] args) {
		EnumSetDemo obj = new EnumSetDemo();
		
		 Set<ProcessType> s = new HashSet<ProcessType>();
	     s.add(ProcessType.TYPE1);
	     s.add(ProcessType.TYPE2);
	     s.add(ProcessType.TYPE3);
	     s.add(ProcessType.TYPE4);
	     s.add(ProcessType.TYPE5);
	     s.add(ProcessType.TYPE6);
	     s.add(ProcessType.TYPE7);
	     s.add(ProcessType.TYPE8);
	     s.add(ProcessType.TYPE9);
	     s.add(ProcessType.TYPE0);
	     obj.processForTypes(s,"s");
	     
	     EnumSet<ProcessType> s1 = EnumSet.allOf(ProcessType.class);
	     obj.processForTypes(s1,"s1");
	     
	     EnumSet<ProcessType> s2 = EnumSet.of(ProcessType.TYPE6, ProcessType.TYPE7, ProcessType.TYPE8, ProcessType.TYPE9, ProcessType.TYPE0,
	    		 						  ProcessType.TYPE1, ProcessType.TYPE2, ProcessType.TYPE3, ProcessType.TYPE4, ProcessType.TYPE5 );
	     obj
/**
 * J2EE clients interact with service components which provide business 
 * services and persistence capabilities.
 * This class offers a lookup interface for all services available in the system.
 *  
 * TODO:
 * JNDI lookup for remote services!  
 *
 */
public class ServiceLocator {
	public class Services {
		public static final int CONFIG_SERVICE  = 1;
		public static final int CACHE_SERVICE = 2;
		public static final int USER_SERVICE = 3;
		public static final int BRAND_SERVICE = 4;
		public static final int CATEGORY_SERVICE = 5;
		public static final int PRODUCT_SERVICE = 6;
		public static final int COMMON_SERVICE = 8;
		public static final int SEARCH_SERVICE = 9;
		public static final int IMAGE_SERVICE =10;
		public static final int ARTICLE_SERVICE =11;
		public static final int Operations_SERVICE =12;
		public static final int PO_SERVICE =13;
		public static final int ORDER_SERVICE =14;
		public static final int USER_PRIVILEGES_SERVICE =15;
	} 
	private static final Service

	/**
	 * A singleton service locator
	 * 
	 * @return
	 */
	public static ServiceLocator getInstance(){
		return INSTANCE;
	}
	private ServiceLocator(){
		if (INSTANCE != null) {
			throw new IllegalStateException(this.getClass()	+ " instance is already created");
		}
	}
	/**
	 * Looks up the configuration service.
	 * @return
	 * @throws ServiceLocatorException
	 */
	public ConfigService getConfigService() throws ServiceLocatorException{		
		return (ConfigService) lookupService(Services.CONFIG_SERVICE);
	}
	/**
	 * Looks up the cache service.
	 * @return
	 * @throws ServiceLocatorException
	 */
	public CacheService getCacheService() throws ServiceLocatorException{
		return (CacheService) lookupService(Services.CACHE_SERVICE);
	}
	/**
	 * Looks up the user service.
	 * @return
	 * @throws ServiceLocatorException
	 */
	public UserService getUserService() throws ServiceLocatorException{
		return (UserService) lookupService(Services.USER_SERVICE);
	}
	/**
	 * Looks up the user service.
	

	 * @throws ServiceLocatorException
	 */
	public BrandService getBrandService() throws ServiceLocatorException{
		return (BrandService) lookupService(Services.BRAND_SERVICE);
	}
	/**
	 * Looks up the CategoryService service.
	 * @return
	 * @throws ServiceLocatorException
	 */
	public CategoryService getCategoryService() throws ServiceLocatorException{
		return (CategoryService) lookupService(Services.CATEGORY_SERVICE);
	}
	/**
	 * Looks up the CategoryService service.
	 * @return
	 * @throws ServiceLocatorException
	 */
	public ProductService getProductService() throws ServiceLocatorException{
		return (ProductService) lookupService(Services.PRODUCT_SERVICE);
	}
	/**
	 * 
	 * @return
	 * @throws ServiceLocatorException
	 */
	public SpecificationService getSpecificationService() throws ServiceLocatorException{
		return (SpecificationService) lookupService(Services.SPECIFICATION_SERVICE);
	}
	/**
	 * Looks up the Common service.
	 * @return
	 * @throws ServiceLocatorException
	 */
	pub

		return (CommonService) lookupService(Services.COMMON_SERVICE);
	}
	/**
	 * Looks up the CategoryService service.
	 * @return
	 * @throws ServiceLocatorException
	 */
	public ImageService getImageService() throws ServiceLocatorException{
		return (ImageService) lookupService(Services.IMAGE_SERVICE);
	}
	/**
	 * Looks up the CategoryService service.
	 * @return
	 * @throws ServiceLocatorException
	 */
	public SearchService getSearchService() throws ServiceLocatorException{
		return (SearchService) lookupService(Services.SEARCH_SERVICE);
	}
	/**
	 * Looks up a service by its id.
	 * @param serviceId
	 * @return
	 * @throws ServiceLocatorException
	 */
	private Service lookupService(int serviceId)throws ServiceLocatorException{
		return lookupService(serviceId, false);
	}
	public OperationsService getOperationsService() throws ServiceLocatorException{
		return (OperationsService) lookupService(Services.Operations_SERVICE);
	}
	public OrdersService getOrderService() throws ServiceLocator

		return (OrdersService) lookupService(Services.ORDER_SERVICE);
	}
	public UsersPrivilegesService getUserPrivilegesService() throws ServiceLocatorException{
		return (UsersPrivilegesService) lookupService(Services.USER_PRIVILEGES_SERVICE);
	}
	/**
	 * Looks up a service by its id.
	 * If useJNDI is true, the service will be looked up from a 
	 * JNDI context.
	 * @param serviceId
	 * @param useJNDI
	 * @return
	 * @throws ServiceLocatorException
	 */
	private Service lookupService(int serviceId, boolean useJNDI) throws ServiceLocatorException{
		Service service = null;
		
		if(!useJNDI){
			try{
				switch (serviceId) {
				case Services.CONFIG_SERVICE:
					service = ConfigServiceImpl.getInstance(); 
					break;
				case Services.CACHE_SERVICE:
					service = CacheServiceImpl.getInstance();
					break;
				case Services.USER_SERVICE:
					service = new UserServiceImpl();
					break;
				case Services.BRAND_SERVICE:
					service = new BrandServiceImpl();
					break;
				case Services.

					service = new CommonServiceImpl();
					break;
				case Services.CATEGORY_SERVICE:
					service = new CategoryServiceImpl();
					break;
				case Services.PRODUCT_SERVICE:
					service = new ProductServiceImpl();
					break;
				case Services.IMAGE_SERVICE:
					service = new ImageServiceImpl();
					break;
				case Services.SPECIFICATION_SERVICE:
					service = new SpecificationServiceImpl();
					break;
				case Services.SEARCH_SERVICE:
					service = SearchServiceImpl.getInstance();
					break;
				case Services.Operations_SERVICE:
					service = new OperationsServiceImpl();
					break;
					
				case Services.PO_SERVICE:
					service = new ProductServiceImpl();
					break;
					
				case Services.ORDER_SERVICE:
					service = new OrdersServiceImpl();
					break;
				case Services.USER_PRIVILEGES_SERVICE:
					service = new UsersPrivilegesServiceImp();
					break;
					
				default:
					break;
				}
			}catch (Exception e) {
				throw new ServiceLocatorException(e);
			}			
	

			try{
				Hashtable<String, String> env = new Hashtable<String, String>();
				env.put(Context.INITIAL_CONTEXT_FACTORY, "com.loyauty.service.init.ConfigServiceImpl");
				
				Context initial  = new InitialContext(env);
				service = (Service) initial.lookup(getServiceName(serviceId));
			}catch (NamingException ne) {
				throw new ServiceLocatorException(ne);
			}catch (Exception e) {
				throw new ServiceLocatorException(e);
			}
		}
		
		return service;
	}
	/**
	 * Returns service's name from its id.
	 * @param serviceId
	 * @return
	 */
	private String getServiceName(int serviceId){
		return getServiceClass(serviceId).getName();
	}
	@SuppressWarnings({ "unchecked" })
	/**
	 * Returns service's class  from its id.
	 */
	private Class getServiceClass(int serviceId){
		Class clazz = null;
		
		switch (serviceId) {
		case Services.CONFIG_SERVICE:
			clazz = ConfigService.class;
			break;
		case Services.CACHE_SERVICE:
			clazz = CacheService.class;
			break;
		case Services.USER_SER
/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
/**
 * <p>
 * This class is a wrapper for {@link UserServiceEntryService}.
 * </p>
 *
 * @author    loind
 * @see       UserServiceEntryService
 * @generated
 */
public class UserServiceEntryServiceWrapper implements UserServiceEntryService,
	ServiceWrapper<UserServiceEntryService> {
	public UserServiceEntryServiceWrapper(
		UserServiceEntryService userServiceEntryService) {
		_userServiceEntryService = user
public class ServiceFactory {
    private static final ILocalPublicacaoService localPublicacaoService = new LocalPublicacaoService();
    private static final IPapelService papelService = new PapelService();
    private static final IPessoaService pessoaService = new PessoaService();
    private static final IPlanoTrabalhoService planoTrabalhoService = new PlanoTrabalhoService();
    private static final IProducaoService producaoService = new ProducaoService();
    private static final IProducaoPessoaService producaoPessoaService = new ProducaoPessoaService();
    private static final IQualisService qualisService = new QualisService();
    private static final ISituacaoProducaoService situacaoProducaoService = new SituacaoProducaoService();
    private static final ITipoPessoaService tipoPessoaService = new TipoPessoaService();
    private static final ITipoProducaoService tipoProducaoService = new TipoProducaoService();
    private static final ITurmaService turmaService = new TurmaSe

    private static final IUtilService  utilService = new UtilService();
    public static ILocalPublicacaoService getLocalPublicacaoService() {
        return localPublicacaoService;
    }
    public static IPapelService getPapelService() {
        return papelService;
    }
    public static IPessoaService getPessoaService() {
        return pessoaService;
    }
    public static IPlanoTrabalhoService getPlanoTrabalhoService() {
        return planoTrabalhoService;
    }
    public static IProducaoService getProducaoService() {
        return producaoService;
    }
    public static IProducaoPessoaService getProducaoPessoaService() {
        return producaoPessoaService;
    }
    public static IQualisService getQualisService() {
        return qualisService;
    }
    public static ISituacaoProducaoService getSituacaoProducaoService() {
        return situacaoProducaoService;
    }
    public static ITipoPessoaService getTipoPessoaService() {
        return tipoPessoaService;
    }

public class PaybackBookKeeperImpl implements PaybackBookKeeper {
    private final AccountRepository accountRepository;
    private final MerchantRepository merchantRepository;
    private final PaybackRepository paybackRepository;
    public PaybackBookKeeperImpl(AccountRepository accountRepository, MerchantRepository merchantRepository,
                                 PaybackRepository paybackRepository) {
        this.accountRepository = accountRepository;
        this.merchantRepository = merchantRepository;
        this.paybackRepository = paybackRepository;
    }
    @Override
    public PaybackConfirmation registerPaybackFor(Purchase purchase) {
        Account account = accountRepository.findByCreditCard(purchase.getCreditCardNumber());
        Merchant merchant = merchantRepository.findByNumber(purchase.getMerchantNumber());
        Money paybackAmount = merchant.calculatePaybackFor(account, purchase);
        AccountIncome income = account.addPayback(paybackAmount);
       
/**
 * Unit tests for ProcessQueue Class
 * 
 * @author Erik Wichern
 */
public class ProcessQueueTest extends TestCase {
	private String name;
	private int priority;
	ProcessQueue pq;
	Process process, anotherProcess;
	private final int DEFAULT_PRIORITY = 2;
	protected void setUp() {
		name = "processName";
		priority = 1;
		pq = new ProcessQueue(priority);
		process = new Process(priority);
		anotherProcess = new Process(priority);
	}
	/**
	 * Create the test case
	 * 
	 * @param testName
	 *            name of the test case
	 */
	public ProcessQueueTest(String testName) {
		super(testName);
	}
	/**
	 * Run the suite of tests on this class
	 * 
	 * @return the suite of tests being tested
	 */
	public static Test suite() {
		return new TestSuite(ProcessQueueTest.class);
	}
	public void testConstructor() {
		pq = new ProcessQueue(priority);
		assertFalse(pq == null);
		assertEquals(priority, pq.getPriority());
	}
	public void testAddProcess() {
		boolean result = pq.addProcess(process)

		assertTrue(result);
		assertFalse(pq.isEmpty());
		assertEquals(1, pq.size());
		Process inserted = pq.getNextProcess();
		assertEquals(process, inserted);
		assertTrue(pq.isEmpty());
	}
	public void testRemoveProcess() {
		int processCount = 0;
		assertThat(process, not(equalTo(anotherProcess)));
		pq.addProcess(process);
		processCount++;
		pq.addProcess(anotherProcess);
		processCount++;
		assertFalse(pq.isEmpty());
		assertEquals(processCount, pq.size());
		boolean results = pq.removeProcess(process);
		processCount--;
		assertTrue(results);
		assertEquals(processCount, pq.size());
		Process leftInQueue = pq.getNextProcess();
		assertThat(leftInQueue, not(equalTo(process)));
		assertEquals(anotherProcess, leftInQueue);
		assertTrue(pq.isEmpty());
	}
	public void testClearQueue() {
		int processCount = 0;
		pq.addProcess(process);
		processCount++;
		pq.addProcess(anotherProcess);
		processCount++;
		assertFalse(pq.isEmpty());
		assertEquals(processCount, pq.size());
		pq.clearQu
public class StubFocusPanel extends StubSimplePanel implements IsFocusPanel {
  private final StubDragLogic dragLogic = new StubDragLogic(this);
  public void mouseOver() {
    fireEvent(new DummyMouseOverEvent());
  }
  public void mouseOut() {
    fireEvent(new DummyMouseOutEvent());
  }
  public void click() {
    fireEvent(new StubClickEvent());
  }
  public void dragStart() {
    dragLogic.dragStart();
  }
  public void dragEnd() {
    dragLogic.dragEnd();
  }
  public void dragEnter() {
    dragLogic.dragEnter();
  }
  public void dragLeave() {
    dragLogic.dragLeave();
  }
  public void dragOver() {
    dragLogic.dragOver();
  }
  public void drop() {
    dragLogic.drop();
  }
  @Override
  public HandlerRegistration addMouseDownHandler(final MouseDownHandler handler) {
    return handlers.addHandler(MouseDownEvent.getType(), handler);
  }
  @Override
  public HandlerRegistration addMouseUpHandler(final MouseUpHandler handler) {
    return handlers.addHandler(MouseUpEvent.getTy

  }
  @Override
  public HandlerRegistration addMouseOutHandler(final MouseOutHandler handler) {
    return handlers.addHandler(MouseOutEvent.getType(), handler);
  }
  @Override
  public HandlerRegistration addMouseOverHandler(final MouseOverHandler handler) {
    return handlers.addHandler(MouseOverEvent.getType(), handler);
  }
  @Override
  public HandlerRegistration addMouseMoveHandler(final MouseMoveHandler handler) {
    return handlers.addHandler(MouseMoveEvent.getType(), handler);
  }
  @Override
  public HandlerRegistration addMouseWheelHandler(final MouseWheelHandler handler) {
    return handlers.addHandler(MouseWheelEvent.getType(), handler);
  }
  @Override
  public HandlerRegistration addClickHandler(final ClickHandler handler) {
    return handlers.addHandler(ClickEvent.getType(), handler);
  }
  @Override
  public HandlerRegistration addKeyUpHandler(final KeyUpHandler handler) {
    return handlers.addHandler(KeyUpEvent.getType(), handler);
  }
  @Override
  public Ha

    return handlers.addHandler(KeyDownEvent.getType(), handler);
  }
  @Override
  public HandlerRegistration addKeyPressHandler(final KeyPressHandler handler) {
    return handlers.addHandler(KeyPressEvent.getType(), handler);
  }
  @Override
  public HandlerRegistration addFocusHandler(final FocusHandler handler) {
    return handlers.addHandler(FocusEvent.getType(), handler);
  }
  @Override
  public HandlerRegistration addBlurHandler(final BlurHandler handler) {
    return handlers.addHandler(BlurEvent.getType(), handler);
  }
  private class DummyMouseOverEvent extends MouseOverEvent {
  }
  private class DummyMouseOutEvent extends MouseOutEvent {
  }
  @Override
  public HandlerRegistration addDragEndHandler(DragEndHandler handler) {
    return handlers.addHandler(DragEndEvent.getType(), handler);
  }
  @Override
  public HandlerRegistration addDragEnterHandler(DragEnterHandler handler) {
    return handlers.addHandler(DragEnterEvent.getType(), handler);
  }
  @Override
  public
/**
 * 개요
 * - 회의실관리에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - 회의실관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 회의실관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Repository("mtgPlaceManageDAO")
public class MtgPlaceManageDAO extends EgovComAbstractDAO {
	/**
	 * 회의실관리정보를 관리하기 위해 등록된 회의실관리 목록을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return List - 회의실관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<MtgPlaceManageVO> selectMtgPlaceManageList(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
		return (List<MtgPlaceManageVO>) list("mtgPlaceManageDAO.selectMtgPlaceManageList", mtgPlaceManageVO);
	}
    /**
	 * 회의실관리목록 총 갯수를 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectMtgPlaceManageListTotCnt(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
        return (Integer)select("mtgPlaceManageDAO.selectMtgPlaceManageListTotCnt", mtgPlaceManageVO);
    }
	/**
	 * 등록된 

	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	public MtgPlaceManage selectMtgPlaceManage(MtgPlaceManageVO mtgPlaceManageVO)  throws Exception {
		return (MtgPlaceManage) select("mtgPlaceManageDAO.selectMtgPlaceManage", mtgPlaceManageVO);
	}
	/**
	 * 회의실관리정보를 신규로 등록한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void insertMtgPlaceManage(MtgPlaceManage mtgPlaceManage) throws Exception {
		insert("mtgPlaceManageDAO.insertMtgPlaceManage", mtgPlaceManage);
	}
	/**
	 * 기 등록된 회의실관리정보를 수정한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void updtMtgPlaceManage(MtgPlaceManage mtgPlaceManage) throws Exception {
		update("mtgPlaceManageDAO.updtMtgPlaceManage", mtgPlaceManage);
	}
	/**
	 * 기 등록된 회의실관리정보를 삭제한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void deleteMtgPlaceManage(MtgPlaceManage mtgPlaceManage) throws Exception {
        delete("mtgPlaceManageDAO.deleteMtgPlaceManage",mtgPlaceManage);
	}
	/******** 회의실 예약 관리 *********

	/** 
	 * 회의실 ID 정보 목록을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return List - 회의실관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<MtgPlaceManageVO> selectMtgPlaceIDList(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
		return (List<MtgPlaceManageVO>) list("mtgPlaceManageDAO.selectMtgPlaceIDList", mtgPlaceManageVO);
	}
	/** 
	 * 회의실 예약정보를 관리하기 위해 등록된 회의실예약을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 목록
	 */
	public MtgPlaceManageVO selectMtgPlaceResveManageList(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
		return (MtgPlaceManageVO) select("mtgPlaceManageDAO.selectMtgPlaceResveManageList", mtgPlaceManageVO);
	}
	/**
	 * 회의실예약 신청화면을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	public MtgPlaceManageVO selectMtgPlaceResve(MtgPlaceManageVO mtgPlaceManageVO)  throws Exception {
		return (MtgPlaceManageVO) select("mtgPlaceManageDAO.selectMtgPlaceResve", mtgPlaceManageVO);
	}
	

	 * 등록된 회의실예약 상세정보를 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	public MtgPlaceManageVO selectMtgPlaceResveDetail(MtgPlaceManageVO mtgPlaceManageVO)  throws Exception {
		return (MtgPlaceManageVO) select("mtgPlaceManageDAO.selectMtgPlaceResveDetail", mtgPlaceManageVO);
	}
	/**
	 * 회의실예약 정보를 신규로 등록한다.
	 * @param mtgPlaceResve - 회의실예약 model
	 */
	public void insertMtgPlaceResve(MtgPlaceResve mtgPlaceResve) throws Exception {
		insert("mtgPlaceManageDAO.insertMtgPlaceResve", mtgPlaceResve);
	}
	/**
	 * 기 등록된 회의실예약 정보를 수정한다.
	 * @param mtgPlaceResve - 회의실예약 model
	 */
	public void updtMtgPlaceResve(MtgPlaceResve mtgPlaceResve) throws Exception {
		update("mtgPlaceManageDAO.updtMtgPlaceResve", mtgPlaceResve);
	}
	/**
	 * 기 등록된 회의실예약 정보를 삭제한다.
	 * @param mtgPlaceResve - 회의실예약 model
	 */
	public void deleteMtgPlaceResve(MtgPlaceResve mtgPlaceResve) throws Exception {
        delete("mtgPlaceManageDAO.deleteMtgPlaceResve",mtgPlaceResve);
	}	
	/**

	 * 회의실 중복여부 체크.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return int - 중복건수
	 */
	public int mtgPlaceResveDplactCeck(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
		return (Integer)select("mtgPlaceManageDAO.mtgPlaceResveDplactCeck", mtgPlaceManageVO);
	}
	/******** 회의실 비품 관리 *************/
	/**
	 * 비품정보 목록을 조회한다
	 * @param fxtrsManageVO - 비품관리 VO
	 * @return List - 비품관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<MtgPlaceFxtrsVO> selectFxtrsManageList(MtgPlaceFxtrsVO mtgPlaceFxtrsVO) throws Exception {
		return (List<MtgPlaceFxtrsVO>) list("mtgPlaceManageDAO.selectFxtrsManageList", mtgPlaceFxtrsVO);
	}
	/**
	 * 회의실관리 비품정보를 신규로 등록한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void insertMtgPlaceFxtrs(MtgPlaceFxtrs mtgPlaceFxtrs) throws Exception {
		insert("mtgPlaceManageDAO.insertMtgPlaceFxtrs", mtgPlaceFxtrs);
	}
	/**
	 * 회의실관리 비품정보를 삭제한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void deleteMtgPlaceFxtrs(MtgPlaceFxtrs mtgPlaceFxtrs) throws Ex
/**
 *
 * @author jep
 */
public interface ServiceProvider {
    ArticleService getArticleService();
    CrossReferenceListService getCrossReferenceListService();
    UserService getUserService();
    TagService getTagService();
    LabelingService getLabelingService();
    NumericElementService getNumericElementService();
    ArticleNotationService getArticleNotationService();
    StockQuoteService getStockQuoteService();
    ExchangeRateService getExchangeRateService();
    AllowanceAbroadService getAllowanceAbroadService();
    EventService getEventService();
    BasicDeductionService getBasicDeductionService();
    ArticleReaderStatsService getArticleReaderStatsService();
    PublicationService getPublicationService();
    KortnyttUserService getKortnyttUserService();
    AccomodationalBenefitService getAccomodationalBenefitService();
    AnimalHusbandryCostAndValueService getAnimalHusbandryCostAndValueService();
    SourceReferenceService getSourceReferenceService();
    
    TaxD
public class Process
	@NotEmpty
	private String process_id;
	@NotEmpty
	private String process_name;
	@NotEmpty
	private String process_owner;
	private String auto_id;
	public Process(String auto_id,String process_id, String process_name, String process_owner) {
		super();
		this.auto_id = auto_id;
		this.process_id = process_id;
		this.process_name = process_name;
		this.process_owner = process_owner;
	}
	public Process() {
		super();
	}
	public String getAuto_id() {
		return auto_id;
	}
	public void setAuto_id(String auto_id) {
		this.auto_id = auto_id;
	}
	public String getProcess_id() {
		return process_id;
	}
	public void setProcess_id(String process_id) {
		this.process_id = process_id;
	}
	public String getProcess_name() {
		return process_name;
	}
	public void setProcess_name(String process_name) {
		this.process_name = process_name;
	}
	public String getProcess_owner() {
		return process_owner;
	}
	public void setProcess_owner(String process_owner) {
		this.process_owner = pro
/**
 * 개요
 * - 회의실관리에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - 회의실관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 회의실관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Repository("mtgPlaceManageDAO")
public class MtgPlaceManageDAO extends EgovComAbstractDAO {
	/**
	 * 회의실관리정보를 관리하기 위해 등록된 회의실관리 목록을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return List - 회의실관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<MtgPlaceManageVO> selectMtgPlaceManageList(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
		return (List<MtgPlaceManageVO>) list("mtgPlaceManageDAO.selectMtgPlaceManageList", mtgPlaceManageVO);
	}
    /**
	 * 회의실관리목록 총 갯수를 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectMtgPlaceManageListTotCnt(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
        return (Integer)select("mtgPlaceManageDAO.selectMtgPlaceManageListTotCnt", mtgPlaceManageVO);
    }
	/**
	 * 등록된 

	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	public MtgPlaceManage selectMtgPlaceManage(MtgPlaceManageVO mtgPlaceManageVO)  throws Exception {
		return (MtgPlaceManage) select("mtgPlaceManageDAO.selectMtgPlaceManage", mtgPlaceManageVO);
	}
	/**
	 * 회의실관리정보를 신규로 등록한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void insertMtgPlaceManage(MtgPlaceManage mtgPlaceManage) throws Exception {
		insert("mtgPlaceManageDAO.insertMtgPlaceManage", mtgPlaceManage);
	}
	/**
	 * 기 등록된 회의실관리정보를 수정한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void updtMtgPlaceManage(MtgPlaceManage mtgPlaceManage) throws Exception {
		update("mtgPlaceManageDAO.updtMtgPlaceManage", mtgPlaceManage);
	}
	/**
	 * 기 등록된 회의실관리정보를 삭제한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void deleteMtgPlaceManage(MtgPlaceManage mtgPlaceManage) throws Exception {
        delete("mtgPlaceManageDAO.deleteMtgPlaceManage",mtgPlaceManage);
	}
	/******** 회의실 예약 관리 *********

	/** 
	 * 회의실 ID 정보 목록을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return List - 회의실관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<MtgPlaceManageVO> selectMtgPlaceIDList(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
		return (List<MtgPlaceManageVO>) list("mtgPlaceManageDAO.selectMtgPlaceIDList", mtgPlaceManageVO);
	}
	/** 
	 * 회의실 예약정보를 관리하기 위해 등록된 회의실예약을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 목록
	 */
	public MtgPlaceManageVO selectMtgPlaceResveManageList(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
		return (MtgPlaceManageVO) select("mtgPlaceManageDAO.selectMtgPlaceResveManageList", mtgPlaceManageVO);
	}
	/**
	 * 회의실예약 신청화면을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	public MtgPlaceManageVO selectMtgPlaceResve(MtgPlaceManageVO mtgPlaceManageVO)  throws Exception {
		return (MtgPlaceManageVO) select("mtgPlaceManageDAO.selectMtgPlaceResve", mtgPlaceManageVO);
	}
	

	 * 등록된 회의실예약 상세정보를 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	public MtgPlaceManageVO selectMtgPlaceResveDetail(MtgPlaceManageVO mtgPlaceManageVO)  throws Exception {
		return (MtgPlaceManageVO) select("mtgPlaceManageDAO.selectMtgPlaceResveDetail", mtgPlaceManageVO);
	}
	/**
	 * 회의실예약 정보를 신규로 등록한다.
	 * @param mtgPlaceResve - 회의실예약 model
	 */
	public void insertMtgPlaceResve(MtgPlaceResve mtgPlaceResve) throws Exception {
		insert("mtgPlaceManageDAO.insertMtgPlaceResve", mtgPlaceResve);
	}
	/**
	 * 기 등록된 회의실예약 정보를 수정한다.
	 * @param mtgPlaceResve - 회의실예약 model
	 */
	public void updtMtgPlaceResve(MtgPlaceResve mtgPlaceResve) throws Exception {
		update("mtgPlaceManageDAO.updtMtgPlaceResve", mtgPlaceResve);
	}
	/**
	 * 기 등록된 회의실예약 정보를 삭제한다.
	 * @param mtgPlaceResve - 회의실예약 model
	 */
	public void deleteMtgPlaceResve(MtgPlaceResve mtgPlaceResve) throws Exception {
        delete("mtgPlaceManageDAO.deleteMtgPlaceResve",mtgPlaceResve);
	}	
	/**

	 * 회의실 중복여부 체크.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return int - 중복건수
	 */
	public int mtgPlaceResveDplactCeck(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
		return (Integer)select("mtgPlaceManageDAO.mtgPlaceResveDplactCeck", mtgPlaceManageVO);
	}
	/******** 회의실 비품 관리 *************/
	/**
	 * 비품정보 목록을 조회한다
	 * @param fxtrsManageVO - 비품관리 VO
	 * @return List - 비품관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<MtgPlaceFxtrsVO> selectFxtrsManageList(MtgPlaceFxtrsVO mtgPlaceFxtrsVO) throws Exception {
		return (List<MtgPlaceFxtrsVO>) list("mtgPlaceManageDAO.selectFxtrsManageList", mtgPlaceFxtrsVO);
	}
	/**
	 * 회의실관리 비품정보를 신규로 등록한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void insertMtgPlaceFxtrs(MtgPlaceFxtrs mtgPlaceFxtrs) throws Exception {
		insert("mtgPlaceManageDAO.insertMtgPlaceFxtrs", mtgPlaceFxtrs);
	}
	/**
	 * 회의실관리 비품정보를 삭제한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void deleteMtgPlaceFxtrs(MtgPlaceFxtrs mtgPlaceFxtrs) throws Ex
/**
 * 개요
 * - 행사관리에 대한 Service Interface를 정의한다.
 * 
 * 상세내용
 * - 행사관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 행사관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
public interface EgovEventManageService {
	/**
	 * 행사관리 정보를 관리하기 위해 등록된 행사목록을 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사관리 목록
	 */
	public List<EventManageVO> selectEventManageList(EventManageVO eventManageVO) throws Exception;
	/**
	 * 행사관리 목록 총 갯수를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return int - 행사관리 카운트 수
	 */
	public int selectEventManageListTotCnt(EventManageVO eventManageVO) throws Exception ;
	/**
	 * 등록된 행사관리의 상세정보를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return EventManageVO - 행사관리 VO
	 */
	public EventManageVO selectEventManage(EventManageVO eventManageVO) throws Exception;
	/**
	 * 행사관리 정보를 신규로 등록한다.
	 * @param eventManage - 행사관리 model
	 */
	public void insertEventManage(EventManage eventManage) throws Exception;
	/**
	 * 기 등록된 행사관리 

	 * @param eventManage - 행사관리 model
	 */
	public void updtEventManage(EventManage eventManage) throws Exception;
	/**
	 * 기 등록된 행사관리 정보를 삭제한다.
	 * @param eventManage - 행사관리 model
	 */
	public void deleteEventManage(EventManage eventManage) throws Exception;
	/***  행사접수관리  ****/	
	/**
	 * 행사접수정보를 관리하기 위해 등록된 행사관리 목록을 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사접수관리 목록
	 */
	public List<EventManageVO> selectEventAtdrnList(EventManageVO eventManageVO) throws Exception;
	/**
	 * 행사관리 목록 총 갯수를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return int - 행사접수관리 카운트 수
	 */
	public int selectEventAtdrnListTotCnt(EventManageVO eventManageVO) throws Exception ;
	/**
	 * 행사접수승인/반려 처리를 위해 등록된 행사접수 목록을 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사접수승인 목록
	 */
	public List<EventManageVO> selectEventRceptConfmList(EventManageVO eventManageVO) throws Exception;
	/**
	 * 행사접수승인/반려 처리를 위해 등록된 행사접수 목록 총 갯수를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return int - 행사접수승

	 */
	public int selectEventRceptConfmListTotCnt(EventManageVO eventManageVO) throws Exception ;
	/**
	 * 행사일자, 행사구분 조건에 따른 행사명 목록을 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return List - 행사명 목록
	 */
	public List<EventManageVO> selectEventNmList(EventManageVO eventManageVO) throws Exception;
	/**
	 * 등록된 행사관리의 상세정보를 조회한다.
	 * @param eventManageVO - 행사관리 VO
	 * @return EventManageVO - 행사관리 VO
	 */
	public EventManageVO selectEventAtdrn(EventManageVO eventManageVO) throws Exception;
	/**
	 * 행사관리 정보를 신규로 등록한다.
	 * @param eventManage - 행사관리 model
	 */
	public void insertEventAtdrn(EventAtdrn eventAtdrn) throws Exception;
	/**
	 * 기 등록된 행사관리 정보를 삭제한다.
	 * @param eventManage - 행사관리 model
	 */
	public void deleteEventAtdrn(EventAtdrn eventAtdrn) throws Exception;
	/**
	 * 기 등록된 행사관리 정보를 승인/반려처리한다.
	 * @param eventManage - 행사관리 model
	 */
	public void updtEventAtdrn(EventAtdrn eventAtdrn, String checkedEventRceptForConfm) throws Exception;
	/**
	 * 행사접수자 정보를 조회한다.
	 * @param eventManageV
public interface OrderDao {
	ServiceOrder getOrderByReqyestId(String requestId);
	int saveOrUpdateOrder(ServiceOrder serviceOrder);
	void saveServiceDevice(ServiceDevice serviceDevice);
	void updateServiceOrder(ServiceOrder serviceOrder);
	void deleteServiceDevice(ServiceDevice serviceDevice);
	ServiceDevice getOrderServiceDeviceByDeviceId(Integer deviceId);
	List<ServiceDeviceStatusType> getServiceDeviceClassifiers();
	ServiceDeviceStatusType getServiceDeviceStatusTypeById(Integer status);
	void updateServiceDevice(ServiceDevice serviceDevice);
	void saveServicePart(ServicePart servicePart);
	void updateServicePart(ServicePart servicePart);
	ServicePart getServicePartById(Integer servicePartId);
	void deleteServicePart(ServicePart servicePart);
	ServiceDevice getOrderServiceDeviceByServiceDeviceId(Integer deviceId);
	ServiceType getServiceTypeById(Integer type);
	void saveServiceAction(ServiceAction serviceAction);
	ServiceAction getServiceActionById(Integer jobId);
	void updateServic
/**
 *
 */
public class RepositoryHandlerHelper {
    private RepositoryHandlerHelper() {
    }
    public static void renameRepository(Connection con, int repositoryId, String repositoryName)
          throws SQLException, HandlerException {
        RepositoryDao repositoryDao = new RepositoryDao();
        repositoryDao.renameRepository(con, repositoryId, repositoryName);
    }
    public static void reinitializeRepositoryCache() {
        Repository.reinitializeRepositoryCache();
    }
    public static String getRepositoryContent(Connection con, int repositoryId) throws SQLException {
        return Repository.getRepositoryContent(con, repositoryId);
    }
    public static void deleteRepository(Connection con, int repositoryId) throws SQLException {
        RepositoryDao repositoryDao = new RepositoryDao();
        repositoryDao.deleteRepository(con, repositoryId);
    }
    public static String newRepository(Connection con, String repositoryName) throws SQLException {
        Rep
/**
 * 
 */
/**
 * @author oded
 *
 */
public class ChainFactoryTest {
	@Test
	public void test() {
		Request request = new Request("Jack","7","8");
		
		Handler firstHandler = new OHandler();
		Handler secondHandler = new JHandler();
		Handler headHandler;
		
		ChainFactory classUnderTest = new ChainFactory();
		
		classUnderTest.registerHandler(firstHandler);
		classUnderTest.registerHandler(secondHandler);
		
		headHandler= classUnderTest.getChain();
				
				
		
		Boolean actualOutput = headHandler.handleRequest(request);
		
		assertTrue("Handler failed to grab",actualOutput);
	}
	@Test
	public void test2() {
		Request request = new Request("Oded","9","108");
		
		Handler firstHandler = new OHandler();
		Handler headHandler;
		
		ChainFactory classUnderTest = new ChainFactory();
		
		classUnderTest.registerHandler(firstHandler);
		
		headHandler= classUnderTest.getChain();
				
				
		
		Boolean actualOutput = headHandler.handleRequest(request);
		
		assertTrue("Handler failed to g
/*
 * 
 */
/**
 * The Class Service.
 *
 * @author vinodhalaharvi
 */
/**
 * @author vinodhalaharvi
 *
 */
public class Service {
    
    /**
	 * Instantiates a new service.
	 *
	 * @param serviceId
	 *            the service id
	 * @param serviceName
	 *            the service name
	 * @param serviceDescription
	 *            the service description
	 */
    public Service(String serviceId, String serviceName,
			String serviceDescription) {
		super();
		this.serviceId = serviceId;
		this.serviceName = serviceName;
		this.serviceDescription = serviceDescription;
	}
	/**
	 * Gets the service id.
	 *
	 * @return the service id
	 */
	public String getServiceId() {
		return serviceId;
	}
	/**
	 * Sets the service id.
	 *
	 * @param serviceId
	 *            the new service id
	 */
	public void setServiceId(String serviceId) {
		this.serviceId = serviceId;
	}
	/**
	 * Gets the service name.
	 *
	 * @return the service name
	 */
	public String getServiceName() {
		return serviceName;
	}
	/*

	 * Sets the service name.
	 *
	 * @param serviceName
	 *            the new service name
	 */
	public void setServiceName(String serviceName) {
		this.serviceName = serviceName;
	}
    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object obj) {
            Service t = (Service) obj;
            return (
                            (obj != null) &&
                            (obj instanceof User) &&
                            t.getServiceId().equals((getServiceId()))
                            );
    }
    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
            return getServiceId().hashCode();
    }
	/**
	 * Gets the service description.
	 *
	 * @return the service description
	 */
	public String getServiceDescription() {
		return serviceDescription;
	}
	/**
	 * Sets the service description.
	 *
	 * @param serviceDescription
	 *            the new
@Service
@Transactional
public class BussProjectProcessService {
	@Autowired
	IBaseDao<TProjectProcess> projectProcessDao;
	@Autowired
	AppSEQHelper SEQHelper;
	@Autowired
	WfProcessUtils wfUtils;
	@Autowired
	IBaseDao<TWfProccessActive> activeDao;
	@Autowired
	IBaseDao<TWfProcess> processDao;
	@Autowired
	IBaseDao<TTask> taskDao;
	/**
	 * 
	 * @Description	: 设置process历史
	 * @Author		: chunlei
	 * @Date		: 2013-04-23 17-52
	 * @param process
	 * @param typeid
	 * @param taskName
	 * @return
	 */
	public boolean  addProcess(TProjectProcess process,int typeid,String taskName){
	    int processId=wfUtils.addNewProcess(typeid);
	    wfUtils.setProcessState(processId, 5);
	    return wfUtils.setProcessTitle(processId, process.getFId(), taskName);
	}
	public Object getTaskPMById(Integer id) {
		String SQL = "select dbo.FN_getTaskPM(a.f_id) as TaskPM from dbo.T_Task a where a.f_id ="+id;
		javax.persistence.Query query = taskDao.CreateNativeSQL(SQL);
		return (Object)query.getSingleResult();


	public TWfProcess getWfProcessByID(Integer processId) {
		return processDao.GetEntity(TWfProcess.class, processId);
	}
	public TWfProccessActive getWfProccessActiveByID(Integer activeId) {
		return activeDao.GetEntity(TWfProccessActive.class, activeId);
	}
	public TProjectProcess getProjectProcessForID(Integer id){
		return projectProcessDao.GetEntity(TProjectProcess.class, id);
	}
	public TProjectProcess update(TProjectProcess projectProcess,int processId,String title){
		if(projectProcessDao.Update(projectProcess) && wfUtils.setProcessTitle(processId, projectProcess.getFId(), title)){
			return projectProcess;
		}else{
			return null;
		}
	}
	public TProjectProcess post(TProjectProcess projectProcess,int activeId){
		if(projectProcessDao.Update(projectProcess) && wfUtils.activeComplet(activeId)){
			return projectProcess;
		}else{
			return null;
		}
	}
	public TProjectProcess save(TProjectProcess projectProcess,int processId,String title){
		Integer id = SEQHelper.getCurrentVal("S
/**
 * 일반회원관리에 관한비지니스클래스를 정의한다.
 * @author 공통서비스 개발팀 조재영
 * @since 2009.04.10
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.04.10  조재영          최초 생성
 *
 * </pre>
 */
@Service("mberManageService")
public class EgovMberManageServiceImpl extends EgovAbstractServiceImpl implements EgovMberManageService {
	/** userManageDAO */
	@Resource(name="userManageDAO")
	private UserManageDAO userManageDAO;
	/** mberManageDAO */
	@Resource(name="mberManageDAO")
	private MberManageDAO mberManageDAO;
	/** entrprsManageDAO */
	@Resource(name="entrprsManageDAO")
	private EntrprsManageDAO entrprsManageDAO;
	/** egovUsrCnfrmIdGnrService */
	@Resource(name="egovUsrCnfrmIdGnrService")
	private EgovIdGnrService idgenService;
	/**
	 * 사용자의 기본정보를 화면에서 입력하여 항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param mberManageVO 일반회원 등록정보
	 * @return result 등록결과
	 * @throws Exception
	 */
	public String 

		String uniqId = idgenService.getNextStringId();
		mberManageVO.setUniqId(uniqId);
		String pass = EgovFileScrty.encryptPassword(mberManageVO.getPassword());
		mberManageVO.setPassword(pass);
		
		String result = mberManageDAO.insertMber(mberManageVO);
		return result;
	}
	/**
	 * 기 등록된 사용자 중 검색조건에 맞는 일반회원의 정보를 데이터베이스에서 읽어와 화면에 출력
	 * @param uniqId 상세조회대상 일반회원아이디
	 * @return mberManageVO 일반회원상세정보
	 * @throws Exception
	 */
	public MberManageVO selectMber(String uniqId) {
		MberManageVO mberManageVO = mberManageDAO.selectMber(uniqId);		
		return mberManageVO;
	}
	/**
	 * 기 등록된 회원 중 검색조건에 맞는 회원들의 정보를 데이터베이스에서 읽어와 화면에 출력
	 * @param userSearchVO 검색조건
	 * @return List<MberManageVO> 일반회원목록정보
	 */
	public List<MberManageVO> selectMberList(UserDefaultVO userSearchVO) {
		return mberManageDAO.selectMberList(userSearchVO);
	}
    /**
     * 일반회원 총 갯수를 조회한다.
     * @param userSearchVO 검색조건
     * @return 일반회원총갯수(int) 
     */
    public int selectMberListTotCnt(UserDefaultVO userSearchVO) {
   

    }
	/**
	 * 화면에 조회된 일반회원의 기본정보를 수정하여 항목의 정합성을 체크하고 수정된 데이터를 데이터베이스에 반영
	 * @param mberManageVO 일반회원수정정보
	 * @throws Exception
	 */
	public void updateMber(MberManageVO mberManageVO) throws Exception {
		String pass = EgovFileScrty.encryptPassword(mberManageVO.getPassword());
		mberManageVO.setPassword(pass);
		mberManageDAO.updateMber(mberManageVO);
	}
	/**
	 * 화면에 조회된 사용자의 정보를 데이터베이스에서 삭제
	 * @param checkedIdForDel 삭제대상 일반회원아이디
	 * @throws Exception
	 */
	public void deleteMber(String checkedIdForDel)  {
		String [] delId = checkedIdForDel.split(",");
		for (int i=0; i<delId.length ; i++){
			String [] id = delId[i].split(":");
			if (id[0].equals("USR03")){
				userManageDAO.deleteUser(id[1]);				
			}else if(id[0].equals("USR01")){
				mberManageDAO.deleteMber(id[1]);
			}else if(id[0].equals("USR02")){
				entrprsManageDAO.deleteEntrprsmber(id[1]);
			}
		}
	}
	/**
	 * 일반회원 약관확인
	 * @param stplatId 일반회원약관아이디
	 * @return 일반회원약관정보(List)
	 * @throws Exception
	 */
	public List sel
/**
 * User: tor
 * Date: 16.03.15
 * Time: 12:50
 */
public class DiagnosticSignalHandler implements SignalHandler {
    public static void install(String signalName, SignalHandler handler) {
        Signal signal = new Signal(signalName);
        DiagnosticSignalHandler diagnosticSignalHandler = new DiagnosticSignalHandler();
        SignalHandler oldHandler = Signal.handle(signal, diagnosticSignalHandler);
        diagnosticSignalHandler.setHandler(handler);
        diagnosticSignalHandler.setOldHandler(oldHandler);
    }
    private SignalHandler oldHandler;
    private SignalHandler handler;
    private DiagnosticSignalHandler() {
    }
    private void setOldHandler(SignalHandler oldHandler) {
        this.oldHandler = oldHandler;
    }
    private void setHandler(SignalHandler handler) {
        this.handler = handler;
    }
    @Override
    public void handle(Signal sig) {
        System.out.println("Diagnostic Signal handler called for signal " + sig);
        try {
         
public class SeqComposition implements Process {
	public Process getFirstProcess() {
		return firstProcess;
	}
	public void setFirstProcess(Process firstProcess) {
		this.firstProcess = firstProcess;
	}
	public Process getSecondProcess() {
		return secondProcess;
	}
	public void setSecondProcess(Process secondProcess) {
		this.secondProcess = secondProcess;
	}
	private Process firstProcess;
	private Process secondProcess;
	public SeqComposition(Process firstProcess, Process secondProcess) {
		this.firstProcess = firstProcess;
		this.secondProcess = secondProcess;
	}
	@Override
	public String toString() {
		return "(" + firstProcess.toString() + ")" + ";" + "(" + secondProcess.toString() + ")";
	}
	@Override
	public boolean equals(Object obj) {
		boolean result = false;
		if(obj instanceof SeqComposition){
			SeqComposition other = (SeqComposition) obj;
			result = this.getFirstProcess().equals(other.getFirstProcess()) && this.getSecondProcess().equals(other.getSecondProcess());
		}
		r
public class ServiceLocator {
    public static BaseUsuarioService getUsuarioService() {
        return new UsuarioService();
    }
    public static BaseAdministradorService getAdministradorService() {
        return new AdministradorService();
    }
    public static BaseCategoriaDespesaService getCategoriaDespesaService() {
        return new CategoriaDespesaService();
    }
    public static BaseFinanceiroService getFinanceiroService() {
        return new FinanceiroService();
    }
    public static BaseSolicitanteService getSolicitanteService() {
        return new SolicitanteService();
    }
    public static BaseTransporteService getTransporteService() {
        return new TransporteService();
    }
    public static BaseEmpresaService getEmpresaService() {
        return new EmpresaService();
    }
    public static BaseViagemService getViagemService() {
        return new ViagemService();
    }
    public static BaseParametroService getParametroService() {
        return new 
public class Manage extends ActionSupport{
		private String id;
		private String password;
		private IManageBusiness ib=null;
		public String getId() {
			return id;
		}
		public void setId(String id) {
			this.id = id;
		}
		public String getPassword() {
			return password;
		}
		public void setPassword(String password) {
			this.password = password;
		}
		
		public IManageBusiness getIb() {
			return ib;
		}
		public void setIb(IManageBusiness ib) {
			this.ib = ib;
		}
		public String toLogin() throws Exception{
			return "toLogin";
			
		}
		
		public String loginManage() throws Exception{
			if(ib.loginManage(getId(), getPassword())){
				ManageValue manage = (ManageValue) ServletActionContext.getServletContext().getAttribute("mv");
				if(manage.getPosition().equals("物业公司管理员"))
			    return "ManageA";
				if(manage.getPosition().equals("物业财务管理员"))
				return "ManageB";
				if(manage.getPosition().equals("物业公司经理"))
				return "ManageC";
				else
				return "false";
			}
			else
	
/**
 * 服务容器，所有的服务实例都注入在这里，在servlet中需要引用服务时，统一通过该类调用。
 * FIXME：这是一个折中的方式，本想通过ds的方式为所有servlet添加服务，
 * 可是通过“org.eclipse.equinox.http.registry.servlets”
 * 扩展点方式调用的servlet并不是ds中声明的组件。所以总是报NullPointerException。 
 * 等找到解决方法之后，把这个替换掉。
 * 
 * @author 金正伟
 * @since 0.0.1
 */
public class ServiceHolder {
	private static final Logger logger = LoggerFactory
			.getLogger(ServiceHolder.class);
	private static ServiceHolder singleton;
	public static ServiceHolder getDefault() {
		return singleton;
	}
	public void activate() {
		singleton = this;
	}
	public void deactivate() {
		singleton = null;
	}
	private ExerciseService exerciseService;
	public void setExerciseService(ExerciseService exerciseService) {
		logger.info("注入ExerciseService");
		this.exerciseService = exerciseService;
	}
	public void unsetExerciseService(ExerciseService exerciseService) {
		logger.info("注销ExerciseService");
		if (this.exerciseService == exerciseService) {
			this.exerciseService = null;
		}
	}
	public ExerciseService g

		return this.exerciseService;
	}
	private ActivityService activityService;
	public void setActivityService(ActivityService activityService) {
		logger.info("注入ActivityService");
		this.activityService = activityService;
	}
	public void unsetActivityService(ActivityService activityService) {
		logger.info("注销ActivityService");
		if (this.activityService == activityService) {
			this.activityService = null;
		}
	}
	public ActivityService getActivityService() {
		return this.activityService;
	}
	private AccessLogService accessLogService;
	public AccessLogService getAccessLogService() {
		return this.accessLogService;
	}
	public void setAccessLogService(AccessLogService accessLogService) {
		logger.info("注入AccessLogService");
		this.accessLogService = accessLogService;
	}
	public void unsetAccessLogService(AccessLogService accessLogService) {
		logger.info("注销AccessLogService");
		if (this.accessLogService == accessLogService) {
			this.accessLogService = null;
		}
	}
	private AnswerServ
public class GroupSpecificAssertHandler implements AssertHandler {
	private final ConcurrentHashMap<String, AssertHandler> specificHandlers = new ConcurrentHashMap<>();
	private AssertHandler defaultHandler;
	public GroupSpecificAssertHandler(AssertHandler defaultHandler) {
		this.defaultHandler = defaultHandler;
	}
	public void setDefaultHandler(AssertHandler handler) {
		this.defaultHandler = handler;
	}
	public void setSpecificHandler(String group, AssertHandler handler) {
		specificHandlers.put(group, handler);
	}
	public void clearSpecificHandler(String group) {
		specificHandlers.remove(group);
	}
	private AssertHandler getHandler(String group) {
		if (specificHandlers.containsKey(group)) {
			return specificHandlers.get(group);
		}
		return defaultHandler;
	}
	@Override
	public void fail(String message, String assertionGroup) {
		getHandler(assertionGroup).fail(message, assertionGroup);
	}
	@Override
	public void success(String message, String assertionGroup) {
		getHandler(asse
public class PersistenceFactoryImpl implements PersistenceFactory {
    private final Map<Class<?>, JpaRepository> repositories = new HashMap<>();
    
    public PersistenceFactoryImpl(EntityManager entityManager){
    	AusbildungJpaRepository ausbildungJPARepository = new AusbildungJpaRepository();
    	ausbildungJPARepository.setEntityManager(entityManager);
    	repositories.put(AusbildungJpaRepository.class, ausbildungJPARepository);
    	
    	AusruestungJpaRepository ausruestungJPARepository = new AusruestungJpaRepository();
    	ausruestungJPARepository.setEntityManager(entityManager);
    	repositories.put(AusruestungJpaRepository.class, ausruestungJPARepository);
    	
    	BerechtigungJpaRepository berechtigungRepository = new BerechtigungJpaRepository();
    	berechtigungRepository.setEntityManager(entityManager);
    	repositories.put(BerechtigungJpaRepository.class, berechtigungRepository);
    	
    	ChargeJpaRepository chargeRepository = new ChargeJpaRepository();
    	

    	repositories.put(ChargeJpaRepository.class, chargeRepository);
    	
    	FeuerwehrJpaRepository feuerwehrRepository = new FeuerwehrJpaRepository();
    	feuerwehrRepository.setEntityManager(entityManager);
    	repositories.put(FeuerwehrJpaRepository.class, feuerwehrRepository);
    	
    	FeuerwehrautoJpaRepository feuerwehrautoRepository = new FeuerwehrautoJpaRepository();
    	feuerwehrautoRepository.setEntityManager(entityManager);
    	repositories.put(FeuerwehrautoJpaRepository.class, feuerwehrautoRepository);
    	
    	GeraetJpaRepository geraeteRepository = new GeraetJpaRepository();
    	geraeteRepository.setEntityManager(entityManager);
    	repositories.put(GeraetJpaRepository.class, geraeteRepository);
    	
    	MitgliedJpaRepository mitgliedRepository = new MitgliedJpaRepository();
    	mitgliedRepository.setEntityManager(entityManager);
    	repositories.put(MitgliedJpaRepository.class, mitgliedRepository);
    	
    	UserJpaRepository userRepository = new UserJp

    	userRepository.setEntityManager(entityManager);
    	repositories.put(UserJpaRepository.class, userRepository);
    }
    
	public AusbildungJpaRepository ausbildungsRepository() {
		return (AusbildungJpaRepository)repositories.get(AusbildungJpaRepository.class);
	}
	public AusruestungJpaRepository ausruestungRepository() {
		return (AusruestungJpaRepository)repositories.get(AusruestungJpaRepository.class);
	}
	public BerechtigungJpaRepository berechtigungRepository() {
		return (BerechtigungJpaRepository)repositories.get(BerechtigungJpaRepository.class);
	}
	public ChargeJpaRepository chargeRepostitory() {
		return (ChargeJpaRepository)repositories.get(ChargeJpaRepository.class);
	}
	public FeuerwehrautoJpaRepository feuerwehrautoRepository() {
		return (FeuerwehrautoJpaRepository)repositories.get(FeuerwehrautoJpaRepository.class);
	}
	public FeuerwehrJpaRepository feuerwehrRepository() {
		return (FeuerwehrJpaRepository)repositories.get(FeuerwehrJpaRepository.class);
	}
	public
/**
 * Service Factory
 * 
 * @author Derek
 *
 */
public class ServiceFactory {
	/** Configuration Service */
	private static ConfigurationService configurationService;
	/** File Service */
	private static FileService fileService;
	/** Player Data Service */
	private static VbdService vbdService;
	/** Team Service*/
	private static TeamService teamService;
	/**
	 * Get Configuration Service
	 * 
	 * @return ConfigurationService
	 */
	public static ConfigurationService getConfigurationService() {
		if( configurationService == null ) {
			configurationService = new ConfigurationServiceImpl();
		}
		
		return configurationService;
	}
	/**
	 * Get File Service
	 * 
	 * @return FileService
	 */
	public static FileService getFileService() {
		if( fileService == null ) {
			fileService = new FileServiceImpl();
		}
		
		return fileService;
	}
	/**
	 * Get Vbd Service
	 * 
	 * @return VbdService
	 */
	public static VbdService getVbdService() {
		if( vbdService == null ) {
			vbdService = new V
/**
 * 사용자관리에 대한 DAO 클래스
 * @user 배치운영환경 김지완
 * @since 2012.07.12
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2012.07.12  김지완          최초 생성
 *
 * </pre>
 */
@Repository("userManageDAO")
public class UserManageDAO extends AbstractDAO {
	 /**
	 * 모든 사용자를 조회한다.
	 * @param userManageVO UserManageVO
	 * @return List<UserManageVO>
	 * @exception Exception
	 */
    @SuppressWarnings("unchecked")
	public List<UserManageVO> selectUserList(UserManageVO userManageVO) throws Exception {
        return list("userManageDAO.selectUserAllList", userManageVO);
    }    
	/**
	 * 사용자를 등록
	 * @param userManage UserManage
	 * @exception Exception
	 */
    public void insertUser(UserManage userManage) throws Exception {
        insert("userManageDAO.insertUser", userManage);
    }
    /**
	 * 사용자를 수정
	 * @param userManage UserManage
	 * @exception Exception
	 */
    public voi

        update("userManageDAO.updateUser", userManage);
    }
    /**
	 * 사용자를 삭제
	 * @param userManage UserManage
	 * @exception Exception
	 */
    public void deleteUser(UserManage userManage) throws Exception {
        delete("userManageDAO.deleteUser", userManage);
    }
    
    /**
	 * 사용자목록 총 갯수 조회
	 * @param userManageVO UserManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectUserListTotCnt(UserManageVO userManageVO)  throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("userManageDAO.selectUserListTotCnt", userManageVO);
    }
    
    /**
	 * 사용자를 조회한다.
	 * @param userManageVO UserManageVO
	 * @return UserManageVO
	 * @exception Exception
	 */
    public UserManageVO selectUser(UserManageVO userManageVO) throws Exception {
        return (UserManageVO) selectByPk("userManageDAO.selectUser", userManageVO);
    }
    
    /**
     * 입력한 사용자아이디의 중복여부를 체크하여 사용가능여부를 확인
     * @param checkId 중복체크대상 아이디
     * @return int 사용가능여
/**
 * 개요
 * - 팝업창에 대한 ServiceImpl을 정의한다.
 * 
 * 상세내용
 * - 팝업창에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 팝업창의 조회기능은 목록조회, 상세조회로, 사용자화면 보기로 구분된다.
 * @author 이창원
 * @version 1.0
 * @created 05-8-2009 오후 2:19:58
 */
@Service("egovPopupManageService")
public class EgovPopupManageServiceImpl extends AbstractServiceImpl implements EgovPopupManageService {
        @Resource(name = "popupManageDAO")
	public PopupManageDAO dao;
        @Resource(name = "egovPopupManageIdGnrService")
        private EgovIdGnrService idgenService;
        
	public EgovPopupManageServiceImpl(){}
	/**
	 * 기 등록된 팝업창정보를 삭제한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 * 
	 * @param popupManage
	 */
	public void deletePopup(PopupManageVO popupManageVO) throws Exception {
	    dao.deletePopup(popupManageVO);
	}
	/**
	 * 팝업창정보를 신규로 등록한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 * 
	 * @param popupManage
	 */
	public void insertPopup(PopupManageVO popupManageVO) throws Exce

	    String sMakeId = idgenService.getNextStringId();
	    popupManageVO.setPopupId(sMakeId);
	    dao.insertPopup(popupManageVO);
	}
        /**
         * 기 등록된 팝업창정보를 수정한다.
         * @param popupManage - 팝업창 model
         * @return boolean - 반영성공 여부
         * 
         * @param popupManage
         */
        public void updatePopup(PopupManageVO popupManageVO) throws Exception {
                dao.updatePopup(popupManageVO);
        }
	/**
	 * 팝업창을 사용자 화면에서 볼수 있는 정보들을 조회한다.
	 * @param popupManageVO - 팝업창 Vo
	 * @return popupManageVO - 팝업창 Vo
	 * 
	 * @param popupManageVO
	 */
	public PopupManageVO selectPopup(PopupManageVO popupManageVO) throws Exception {
		return (PopupManageVO)dao.selectPopup(popupManageVO);
	}
	/**
	 * 팝업창를 관리하기 위해 등록된 팝업창목록을 조회한다.
	 * @param popupManageVO - 팝업창 Vo
	 * @return List - 팝업창 목록
	 * 
	 * @param popupManageVO
	 */
	public List selectPopupList(PopupManageVO popupManageVO) throws Exception {
		return (List)dao.selectPopupList(popupManageVO);
	}
  
public class GodietServiceProxyImpl implements GoDietService {
	private InfrastructureService infrastructureService;
	private PlatformService platformService;
	private UserService userService;
	private XMLLoaderService xMLLoaderService;
	private ConfigurationService configurationService;
	@Override
	public void start() throws StartException {
	}
	@Override
	public PlatformService getPlatformService() {
		return platformService;
	}
	@Override
	public XMLLoaderService getXmlHelpService() {
		return xMLLoaderService;
	}
	@Override
	public InfrastructureService getInfrastructureService() {
		return infrastructureService;
	}
	@Override
	public UserService getUserService() {
		return userService;
	}
	@Override
	public ConfigurationService getConfigurationService() {
		return configurationService;
	}
	public XMLLoaderService getxMLLoaderService() {
		return xMLLoaderService;
	}
	public void setxMLLoaderService(XMLLoaderService xMLLoaderService) {
		this.xMLLoaderService = xMLLoaderService;
	}
/**
 * 그룹관리에 관한 서비스 인터페이스 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  이문준          최초 생성
 *
 * </pre>
 */
public interface EgovGroupManageService {
	/**
	 * 검색조건에 따른 그룹정보를 조회
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO selectGroup(GroupManageVO groupManageVO) throws Exception;
	/**
	 * 시스템사용 목적별 그룹 목록 조회
	 * @param groupManageVO GroupManageVO
	 * @return List<GroupManageVO>
	 * @exception Exception
	 */
	public List<GroupManageVO> selectGroupList(GroupManageVO groupManageVO) throws Exception;
	/**
	 * 그룹 기본정보를 화면에서 입력하여 항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param groupManage GroupManage
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO insertGroup(GroupManage 
/**
 * 권한별 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Repository("authorRoleManageDAO")
public class AuthorRoleManageDAO extends EgovComAbstractDAO {
	/**
	 * 권한 롤 관계정보를 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return AuthorRoleManageVO
	 * @exception Exception
	 */
	public AuthorRoleManageVO selectAuthorRole(AuthorRoleManageVO authorRoleManageVO) throws Exception {
		return (AuthorRoleManageVO) selectByPk("authorRoleManageDAO.selectAuthorRole", authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보 목록 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return List<AuthorRoleManageVO>
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<AuthorRoleManageVO> selectAuthorRoleList(AuthorRoleManageVO authorRoleMana

		return list("authorRoleManageDAO.selectAuthorRoleList", authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보를 화면에서 입력하여 입력항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void insertAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		insert("authorRoleManageDAO.insertAuthorRole", authorRoleManage);
	}
	/**
	 * 수정된 권한 롤 관계정보를 데이터베이스에 반영
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void updateAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		update("authorRoleManageDAO.updateAuthorRole", authorRoleManage);
	}
	/**
	 * 권한 롤 관계정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void deleteAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		delete("authorRoleManageDAO.deleteAuthorRole", authorRoleManage);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return int
	 
public class ManageCheckpointServiceImpl implements ManageCheckpointService
		private ManageCheckpointDao manageCheckpointDao;
		public ManageCheckpointDao getManageAgentDao()
		{
				return this.manageCheckpointDao;
		}
		public void setManageCheckpointDao(ManageCheckpointDao manageCheckpointDao)
		{
				this.manageCheckpointDao = manageCheckpointDao;
		}
		@Override
		public ArrayList<ManageCheckpointBean> getCheckpointDetails(ManageCheckpointBean manageCheckpointBean) {
			return manageCheckpointDao.getCheckpointDetails(manageCheckpointBean);
		}
		@Override
		public boolean deleteCheckpoint(ManageCheckpointBean manageCheckpointBean) {
			return manageCheckpointDao.deleteCheckpoint(manageCheckpointBean);
		}
		@Override
		public ArrayList<ManageCheckpointBean> getTaskList(ManageCheckpointBean manageCheckpointBean) {
			return manageCheckpointDao.getTaskList(manageCheckpointBean);
		}
		@Override
		public boolean insertCheckpoint(ManageCheckpointBean manageCheckpointBean) {
			return
/**
 * Provides a convenience superclass for those {@link ProcessManager}s wishing
 * to publish status messages.
 * 
 * @author Ben Alex
 * @since 1.0
 */
public abstract class AbstractProcessManagerStatusPublisher implements
        ProcessManagerStatusProvider {
    /**
     * Used so a single object instance contains the changing
     * {@link ProcessManagerStatus} enum. This is needed so there is a single
     * object instance for synchronization purposes.
     */
    private static class StatusHolder {
        private ProcessManagerStatus status;
        /**
         * Constructor
         * 
         * @param initialStatus
         */
        private StatusHolder(final ProcessManagerStatus initialStatus) {
            status = initialStatus;
        }
    }
    protected StatusHolder processManagerStatus = new StatusHolder(
            ProcessManagerStatus.STARTING);
    protected Set<ProcessManagerStatusListener> processManagerStatusListeners = new CopyOnWriteArraySet<ProcessM

    public final void addProcessManagerStatusListener(
            final ProcessManagerStatusListener processManagerStatusListener) {
        Validate.notNull(processManagerStatusListener,
                "Status listener required");
        processManagerStatusListeners.add(processManagerStatusListener);
    }
    /**
     * Obtains the process manager status without synchronization.
     */
    public final ProcessManagerStatus getProcessManagerStatus() {
        return processManagerStatus.status;
    }
    public final void removeProcessManagerStatusListener(
            final ProcessManagerStatusListener processManagerStatusListener) {
        Validate.notNull(processManagerStatusListener,
                "Status listener required");
        processManagerStatusListeners.remove(processManagerStatusListener);
    }
    /**
     * Set the process manager status without synchronization.
     */
    protected void setProcessManagerStatus(
            final ProcessManagerStatus proces
public class TestProgram {
	private static final int physicalMemorySize = 1024;
	private static ProcessManager pm;
	private static MemoryManager mmu;
	/**
	 * Test test-program does not reflect the real interaction between Processes and the memory Manager. However, it can
	 * be used to test different memory management strategies.
	 * 
	 * For simplicity, in this test-program every process receives its own continuous block of memory
	 */
	public static void main(String[] args) {
		mmu = new FirstFit(physicalMemorySize);
		pm = new ProcessManager(mmu);
		Process p1 = createProcess("p1", 100);
		Process p2 = createProcess("p2", 500);
		Process p3 = createProcess("p3", 60);
		Process p4 = createProcess("p4", 100);
		killProcess(p1);
		killProcess(p3);
		Process p5 = createProcess("p5", 50);
		Process p6 = createProcess("p6", 90);
	}
	/**
	 * This function just calls "process.kill()" and produces some nice output
	 */
	private static void killProcess(Process process) {
		String name = proc
/** 
 * 일정관리에 대한 데이터 접근 클래스를 정의한다
 * <p><b>NOTE:</b> 넘어온 요청에 대해 DB작업을 수행하는 메소드들의 집합
 * DB에 직접 접근하며 쿼리문에 적용할 parameter를 보내주거나 단순 쿼리 실행을 하도록 호출한다
 * select, update, delete 함수를 사용하며 쿼리아이디와 parameter를 넘긴다
 * @author 범정부통계포털 이관형 
 * @since 2011.06.17 
 * @version 1.0 
 * @see 
 * 
 * <pre> 
 *  == Modification Information) == 
 *   
 *     date         author                note 
 *  -----------    --------    --------------------------- 
 *   2011.08.03     이진우      최초 생성
 * 
 * </pre> 
 */
@Repository("scheduleManageDAO")
public class ScheduleManageDAO extends GpsAbstractDAO {
    /**
     * scheduleManageVO 일정목록 조회  
     * @param scheduleManageVO
     * @return List
     * @throws Exception
     * @see SC_TY,SC_TY_NM,SC_SN, SUBJECT,ORG_NM, SCHEDULE_CN,START_DT,END_DT,PLACE,STAT_ID,STAT_NM,PHON_CN,FAX_PHON_CN,
     * @see UPDT_DT, REGIST_DT
     * @see TABLE NAME : TN_SCHEDULE
     */
    @SuppressWarnings("unchecked")
	public List selectScheduleList(ScheduleManageVO scheduleManageVO) th

        return list("ScheduleManageDAO.selectScheduleList", scheduleManageVO);
    }
    /**
     * scheduleManageVO 일정목록 총 갯수를 조회한다.
     * @param scheduleManageVO
     * @return int
     * @throws Exception
     * @see totcnt 
     * @see TABLE NAME : TN_SCHEDULE
     */
    public int selectScheduleListTotCnt(ScheduleManageVO scheduleManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("ScheduleManageDAO.selectScheduleListTotCnt", scheduleManageVO);
    }
	/**
	 * scheduleManageVO 선택된 일정 상세조회  
	 * @param scheduleManageVO
	 * @return ScheduleManageVO
	 * @throws Exception
	 * @see SC_TY,SC_TY_NM,SC_SN, SUBJECT,ORG_NM, SCHEDULE_CN,START_DT,END_DT,PLACE,STAT_ID,STAT_NM,PHON_CN,FAX_PHON_CN,
     * @see UPDT_DT, REGIST_DT
	 * @see TABLE NAME : TN_SCHEDULE
	 */
	public ScheduleManageVO selectSchedule(ScheduleManageVO scheduleManageVO) throws Exception {
		return (ScheduleManageVO)selectByPk("ScheduleManageDAO.selectSchedule", scheduleManageVO);
	
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 * 服务器端过程图类。
 * 存储过程图中的三个过程集合，其实过程节点集合，终止过程节点集合，过程节点集合
 * @see Process
 * @author b1106
 */
public class ProcessGraph {
    private Set<Process> originProcessSet;
    private Set<Process> terminationProcessSet;
    private Set<Process> processSet;
    /**
     * 构建过程图实例，初始化过程图
     */
    public ProcessGraph() {
        originProcessSet = new HashSet<Process>();
        terminationProcessSet = new HashSet<Process>();
        processSet = new HashSet<Process>();
    }
    public Process getProcess(Process p) {
        return getP(p, processSet);
    }
    public Process getProcess(int pid) {
        return getP(pid, processSet);
    }
    public Process getOriginProcess(Process p) {
        return getP(p, originProcessSet);
    }
    public Process getTerminationProcess(Process p) {
        return getP(p, terminationProcessSet);
    }
    private Process getP(Process p, Set<Process> p

        Process tmp = null;
        for (Process pp : ps) {
            if (pp.getId() == p.getId()) {
                tmp = pp;
                break;
            }
        }
        return tmp;
    }
    private Process getP(int pid, Set<Process> ps) {
        Process tmp = null;
        for (Process pp : ps) {
            if (pp.getId() == pid) {
                tmp = pp;
                break;
            }
        }
        return tmp;
    }
    public Set<Process> getOriginProcessSet() {
        return originProcessSet;
    }
    public void setOriginProcessSet(Set<Process> originProcessSet) {
        this.originProcessSet = originProcessSet;
    }
    public Set<Process> getTerminationProcessSet() {
        return terminationProcessSet;
    }
    public void setTerminationProcessSet(Set<Process> terminationProcessSet) {
        this.terminationProcessSet = terminationProcessSet;
    }
    public Set<Process> getProcessSet() {
        return processSet;
    }
    public void set
/*
 * Copyright (c) 2015 huwentao (vernon.huwt@gmail.com)
 */
/**
 * Created by mokey on 2015/8/11.
 */
public abstract class AppHandler {
    private StaticHandler handler;
    public StaticHandler getHandler(BaseActivity baseActivity) {
        handler = new StaticHandler(this, baseActivity);
        return handler;
    }
    /**
     * 结束当前Handler事件处理
     */
    public void interrup() {
        if (handler != null) {
            handler.interrupt();
            handler = null;
        }
    }
    public abstract void handleMessage(Message msg);
    public static class StaticHandler extends Handler {
        WeakReference<BaseActivity> weakReference = null;
        AppHandler appHandler = null;
        boolean isInterrup = false;
        public StaticHandler(AppHandler appHandler, BaseActivity baseActivity) {
            this.weakReference = new WeakReference<>(baseActivity);
            this.appHandler = appHandler;
        }
        @Override
        public void handleMessage(Mess
public class RepositoryTest
    @Test
    public void testHashCodeNullSafe()
    {
        new Repository().hashCode();
    }
    @Test
    public void testEqualsNullSafe()
    {
        assertNotNull( new Repository() );
    }
    @Test
    public void testEqualsIdentity()
    {
        Repository repository = new Repository();
        assertTrue( repository.equals( repository ) );
    }
    @Test
    public void testToStringNullSafe()
    {
        assertNotNull( new Repository().toString() );
    }
    @Test
    public void testName()
    {
      String s = "test_repository";
      Repository repository = new Repository();
      repository.setName( s );
      assertEquals( repository.getName(), s );
    }
    @Test
    public void testLayout()
    {
      String s = "maven";
      Repository repository = new Repository();
      assertEquals( repository.getLayout(), "nut" );
      repository.setLayout( s );
      assertEquals( repository.getLayout(), s );
    }
    @Test
    public v

    {
      String s = "test_url";
      Repository repository = new Repository();
      assertNull( repository.getURL() );
      repository.setURL( s );
      assertEquals( repository.getURL(), s );
    }
    @Test(expectedExceptions = ValidationException.class)
    public void testValidationExceptionNullName() throws ValidationException
    {
      Repository repository = new Repository();
      repository.validate( );
    }
    @Test(expectedExceptions = ValidationException.class)
    public void testValidationExceptionEmptyName() throws ValidationException
    {
      Repository repository = new Repository();
      repository.setName( "" );
      repository.validate( );
    }
    @Test(expectedExceptions = ValidationException.class)
    public void testValidationExceptionNullURL() throws ValidationException
    {
      Repository repository = new Repository();
      repository.setName( "repo" );
      repository.validate( );
    }
    @Test(expectedExceptions = ValidationException
public class ServiceFactory {
	private AdminService adminService;
	private CompanyService companyService;
	private LogService logService;
	private MemberService memberService;
	private NewsService newsService;
	private OutEmployeeService outEmployeeService;
	private WorkService workService;
	private static ServiceFactory instance = null;
	public static ServiceFactory instance() {
		if(null == instance) {
			instance = new ServiceFactory();
		}
		return instance;
	}
	public AdminService getAdminService() {
		if(null == adminService) {
			adminService = new AdminServiceImpl();
		}
		return adminService;
	}
	public CompanyService getCompanyService() {
		if(null == companyService) {
			companyService = new CompanyServiceImpl();
		}
		return companyService;
	}
	public LogService getLogService() {
		if(null == logService) {
			logService = new LogServiceImpl();
		}
		return logService;
	}
	public MemberService getMemberService() {
		if(null == memberService) {
			memberService = new MemberSe
/* ***************************************************************************
 *****************************************************************************
 Package
 ****************************************************************************/
/* ***************************************************************************
 Imports
 ****************************************************************************/
/* ***************************************************************************
 Class
 ****************************************************************************/
public class ExternalProcess {
	protected ProcessBuilder processBuilder;
	protected ArrayList<String> command;
	public ExternalProcess() {
		this(new ArrayList<String>());
	}
	public ExternalProcess(String command) {
		this();
		this.command.add(command);
	}
	public ExternalProcess(ArrayList<String> command) {
		this.command = command;
		processBuilder = new ProcessBuilder(command);
	}
	public ProcessBuilder getProcess
/**
 * 
 */
/**
 * 
 * @author SnyderGP
 */
public class RepositoryDataImpl extends DataImpl implements RepositoryData
	private static final Table<RepositoryRecord> REPOSITORY = Repository.REPOSITORY;
	private static final Field<Byte> REPOSITORY_ID = Repository.REPOSITORY.REPOSITORY_ID;
	private static final Field<String> REPOSITORY_NAME = Repository.REPOSITORY.REPOSITORY_NAME;
	private static final Field<String> REPOSITORY_URL = Repository.REPOSITORY.REPOSITORY_URL;
	private static final Field<String> REPOSITORY_TYPE_CD = 
		Repository.REPOSITORY.REPOSITORY_TYPE_CD;
	private static final Field<String> REPOSITORY_USERNAME = 
		Repository.REPOSITORY.REPOSITORY_USERNAME;
	private static final Field<String> REPOSITORY_PASSWORD = 
		Repository.REPOSITORY.REPOSITORY_PASSWORD;
	/**
	 * Converts a JOOQ {@link RepositoryRecord} object to a {@link SecureRepositoryInfo} domain
	 * object
	 * 
	 * @param record
	 * @return
	 */
	private static SecureRepositoryInfo secureRepositoryInfoFromRecord(R

	{
		return new SecureRepositoryInfoImpl(record.getRepositoryId(), 
	    	record.getRepositoryName(), 
	    	record.getRepositoryUrl(), 
	    	VersionControlClientType.fromTypeCode(record.getRepositoryTypeCd()), 
	    	record.getRepositoryUsername(), 
	    	record.getRepositoryPassword());
	}
	/**
	 * @param dataSource
	 * @param dialect
	 */
    public RepositoryDataImpl(DataSource dataSource, SQLDialect dialect)
    {
	    super(dataSource, dialect);
    }
	@Override
    public SecureRepositoryInfo getRepositoryForId(byte repositoryId)
    {
		DSLContext context = this.getDSLContext();
		
		RepositoryRecord record = context.selectFrom(REPOSITORY)
			.where(REPOSITORY_ID.equal(repositoryId))
			.fetchAny();
		
		if(record == null)
		{
			return null;
		}
	    return RepositoryDataImpl.secureRepositoryInfoFromRecord(record);
    }
	@Override
    public List<SecureRepositoryInfo> getAvailableRepositories()
    {
		DSLContext context = this.getDSLContext();
		
		Result<RepositoryRecord>

		
		List<SecureRepositoryInfo> out = new ArrayList<SecureRepositoryInfo>();
		for(RepositoryRecord record: records)
		{
			out.add(RepositoryDataImpl.secureRepositoryInfoFromRecord(record));
		}
		
		return out;
    }
	@Override
    public byte createRepository(SecureRepositoryInfo repositoryInfo)
    {
		DSLContext context = this.getDSLContext();
		
		RepositoryRecord inserted = context.insertInto(REPOSITORY)
			.set(REPOSITORY_NAME, repositoryInfo.getName())
			.set(REPOSITORY_URL, repositoryInfo.getUrl())
			.set(REPOSITORY_TYPE_CD, repositoryInfo.getType().getTypeCode())
			.set(REPOSITORY_USERNAME, repositoryInfo.getUser())
			.set(REPOSITORY_PASSWORD, repositoryInfo.getPassword())
			.returning(REPOSITORY_ID)
			.fetchOne();
		
		if(inserted == null)
		{
			throw new IllegalStateException();
		}
		
	    return inserted.getRepositoryId();
    }
	@Override
    public void updateRepository(SecureRepositoryInfo repositoryInfo)
    {
		DSLContext context = this.getDSLContext();
		
	
@SuppressWarnings("serial")
public class ServiceTypeServiceImpl extends BaseServiceServlet implements ServiceTypeService {
	public List<ServiceTypeBean> getServiceTypes(ServiceTypeSearchBean serviceTypeSearchBean) {
		
		ServiceTypeDAO serviceTypeDAO = new ServiceTypeDAO();
		List<ServiceTypeBean> serviceTypes = serviceTypeDAO.getServiceTypes(serviceTypeSearchBean);
		
		return serviceTypes;
	}
	public ServiceTypeBean addServiceType(ServiceTypeBean serviceTypeBean) {
		
		ServiceTypeDAO serviceTypeDAO = new ServiceTypeDAO();
		ServiceTypeBean serviceType = serviceTypeDAO.addServiceType(serviceTypeBean);
		
		return serviceType;
	}
	public ServiceTypeBean updateServiceType(ServiceTypeBean serviceTypeBean) {
		
		ServiceTypeDAO serviceTypeDAO = new ServiceTypeDAO();
		ServiceTypeBean serviceType = serviceTypeDAO.updateServiceType(serviceTypeBean);
		
		return serviceType;
	}
	public ServiceTypeBean deleteServiceType(ServiceTypeBean serviceTypeBean) {
		
		ServiceTypeDAO serviceTypeDAO = 
/*******************************************************************************
 * PageFlow Dynamic Workflow Engine
 ******************************************************************************/
/**
 * The persistent class for the vw_processes database view.
 */
@Entity
@Table(name = "vw_processes")
@SuppressWarnings("serial")
public class Process extends BaseEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "process_id")
    private int processId;
    @Column(name = "process_name")
    private String processName;
    @Column(name = "process_description")
    private String processDescription;
    @Column(name = "process_display_name")
    private String processDisplayName;
    @Column(name = "process_ord_index")
    private Integer processOrdIndex;
    @Column(name = "process_page_override")
    private String processPageOverride;
    @Column(name = "process_start_date")
    @Temporal(TemporalType.TIMESTAMP)
    private Date processStartDate;
 

    @Temporal(TemporalType.TIMESTAMP)
    private Date processEndDate;
    @Lob
    @Column(name = "process_icon")
    private byte[] processIcon;
    @Column(name = "process_status")
    private String processStatus;
    /* Child Sequences */
    @OneToMany(mappedBy = "process", cascade = CascadeType.ALL)
    @LazyCollection(LazyCollectionOption.FALSE)
    private List<Sequence> sequences;
    public Process() {
    }
    public String getProcessDescription() {
        return this.processDescription;
    }
    public void setProcessDescription(String processDescription) {
        this.processDescription = processDescription;
    }
    public String getProcessDisplayName() {
        return this.processDisplayName;
    }
    public void setProcessDisplayName(String processDisplayName) {
        this.processDisplayName = processDisplayName;
    }
    public Date getProcessEndDate() {
        return this.processEndDate;
    }
    public void setProcessEndDate(Date processEndDate) {
     

    }
    public byte[] getProcessIcon() {
        return this.processIcon;
    }
    public void setProcessIcon(byte[] processIcon) {
        this.processIcon = processIcon;
    }
    public int getProcessId() {
        return this.processId;
    }
    public void setProcessId(int processId) {
        this.processId = processId;
    }
    public String getProcessName() {
        return this.processName;
    }
    public void setProcessName(String processName) {
        this.processName = processName;
    }
    public Integer getProcessOrdIndex() {
        if (null == this.processOrdIndex) {
            this.processOrdIndex = Integer.MAX_VALUE;
        }
        return this.processOrdIndex;
    }
    public void setProcessOrdIndex(Integer processOrdIndex) {
        this.processOrdIndex = processOrdIndex;
    }
    public String getProcessPageOverride() {
        return this.processPageOverride;
    }
    public void setProcessPageOverride(String processPageOverride) {
        this.pro

    }
    public Date getProcessStartDate() {
        return this.processStartDate;
    }
    public void setProcessStartDate(Date processStartDate) {
        this.processStartDate = processStartDate;
    }
    public String getProcessStatus() {
        return this.processStatus;
    }
    public void setProcessStatus(String processStatus) {
        this.processStatus = processStatus;
    }
    public List<Sequence> getSequences() {
        if (sequences == null) {
            this.sequences = new ArrayList<Sequence>();
        }
        return sequences;
    }
    public void setSequences(List<Sequence> sequences) {
        this.sequences = sequences;
    }
    public String toString() {
        return "Process [Id=" + processId + ", Name=" + processName + ", Status="
                + processStatus + "]";
    }
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + processId;
        result = prime * result + ((processName
/**
 * 일정관리를 처리하는 Dao Class 구현
 * @since 2009.04.10
 * @see
 * <pre>
 * << 개정이력(Modification Information) >>  수정일      수정자           수정내용 -------    ---
 * -----    --------------------------- 2009.04.10  장동한          최초 생성 2011.05.31
 * JJY           경량환경 커스터마이징버전 생성
 * </pre>
 * @author 조재영
 * @version 1.0
 * @created 09-6-2011 오전 10:08:07
 */
@Repository("indvdlSchdulManageDao")
public class IndvdlSchdulManageDao extends EgovAbstractDAO {
    /**
	 * 메인페이지/일정관리조회 목록을 Map(map)형식으로 조회한다. 
	 * @param Map(map) - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public List selectIndvdlSchdulManageMainList(Map map) throws Exception{
		 return  (List)list("IndvdlSchdulManage.selectIndvdlSchdulManageMainList", map);
	}
    /**
	 * 일정 목록을 Map(map)형식으로 조회한다. 
	 * @param Map(map) - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public List selectIndvdlSchdulManageRetrieve(Map map) throws Exception{
		 return 

	}
    /**
	 * 일정 목록을 VO(model)형식으로 조회한다. 
	 * @param indvdlSchdulManageVO - 조회할 정보가 담긴 VO
	 * @return IndvdlSchdulManageVO
	 * @throws Exception
	 */
	public IndvdlSchdulManageVO selectIndvdlSchdulManageDetailVO(IndvdlSchdulManageVO indvdlSchdulManageVO) throws Exception{
		return (IndvdlSchdulManageVO)getSqlMapClientTemplate().queryForObject("IndvdlSchdulManage.selectIndvdlSchdulManageDetailVO", indvdlSchdulManageVO);
	}
    /**
	 * 일정 목록을 조회한다. 
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public List selectIndvdlSchdulManageList(ComDefaultVO searchVO) throws Exception{
		return (List)list("IndvdlSchdulManage.selectIndvdlSchdulManage", searchVO);
	}
    /**
	 * 일정를(을) 상세조회 한다.
	 * @param indvdlSchdulManageVO - 일정 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public List selectIndvdlSchdulManageDetail(IndvdlSchdulManageVO indvdlSchdulManageVO) throws Exception{
		return (List)

	}
    /**
	 * 일정를(을) 목록 전체 건수를(을) 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return int
	 * @throws Exception
	 */
	public int selectIndvdlSchdulManageListCnt(ComDefaultVO searchVO) throws Exception{
		return (Integer)getSqlMapClientTemplate().queryForObject("IndvdlSchdulManage.selectIndvdlSchdulManageCnt", searchVO);
	}
    /**
	 * 일정를(을) 등록한다.
	 * @param qindvdlSchdulManageVO - 일정 정보 담김 VO
	 * @throws Exception
	 */
	public void insertIndvdlSchdulManage(IndvdlSchdulManageVO indvdlSchdulManageVO) throws Exception{
		insert("IndvdlSchdulManage.insertIndvdlSchdulManage", indvdlSchdulManageVO);
	}
    /**
	 * 일정를(을) 수정한다.
	 * @param indvdlSchdulManageVO - 일정 정보 담김 VO
	 * @throws Exception
	 */
	public void updateIndvdlSchdulManage(IndvdlSchdulManageVO indvdlSchdulManageVO) throws Exception{
		insert("IndvdlSchdulManage.updateIndvdlSchdulManage", indvdlSchdulManageVO);
	}
    /**
	 * 일정를(을) 삭제한다.
	 * @param indvdlSchdulManageVO - 일정 정보 담김 VO
	 * @throws Exception
	 */
	public void d
public interface Facade extends BaseFacade {
	BaseAttributeService getBaseAttributeService();
	BaseAttributeSonService getBaseAttributeSonService();
	BaseBrandInfoService getBaseBrandInfoService();
	BaseClassLinkAttributeService getBaseClassLinkAttributeService();
	BaseClassService getBaseClassService();
	BaseDataService getBaseDataService();
	BasePopedomService getBasePopedomService();
	BaseProvinceService getBaseProvinceService();
	DeptInfoService getDeptInfoService();
	HelpContentService getHelpContentService();
	HelpInfoService getHelpInfoService();
	HelpModuleService getHelpModuleService();
	ModPopedomService getModPopedomService();
	NewsAttachmentService getNewsAttachmentService();
	NewsContentService getNewsContentService();
	NewsInfoService getNewsInfoService();
	PdContentService getPdContentService();
	PdImgsService getPdImgsService();
	PdInfoCustomAttrContentService getPdInfoCustomAttrContentService();
	PdInfoCustomFieldContentService getPdInfoCustomFieldContentService();
	Pd
/**
 * 롤관리에 관한 서비스 인터페이스 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성 
 *
 * </pre>
 */
public interface EgovRoleManageService {
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception;
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception;
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception;
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력,
/**
 * The persistent class for the PROCESS_TYPE database table.
 * 
 */
@Entity
@Table(name="PROCESS_TYPE")
@NamedQuery(name="ProcessType.findAll", query="SELECT p FROM ProcessType p")
public class ProcessType implements Serializable {
	private static final long serialVersionUID = 1L;
	private long id;
	private String description;
	private String name;
	private String publishStatus;
	private BigDecimal deployed;
	private List<ProcessInstance> processInstances;
	private List<ProcessTypeData> processTypeData;
	private List<ProcessTypeState> processTypeStates;
	public ProcessType() {
	}
	@GenericGenerator(name = "generator", strategy = "org.hibernate.id.enhanced.TableGenerator",parameters={@Parameter(name="segment_value",value="ProcessType")})
	@Id
	@GeneratedValue(generator="generator")
	public long getId() {
		return this.id;
	}
	public void setId(long id) {
		this.id = id;
	}
	public String getDescription() {
		return this.description;
	}
	public void setDescription(String description

		this.description = description;
	}
	public String getName() {
		return this.name;
	}
	public void setName(String name) {
		this.name = name;
	}
	@Column(name="PUBLISH_STATUS")
	public String getPublishStatus() {
		return this.publishStatus;
	}
	public void setPublishStatus(String publishStatus) {
		this.publishStatus = publishStatus;
	}
	@OneToMany(mappedBy="processType")
	public List<ProcessInstance> getProcessInstances() {
		return this.processInstances;
	}
	public void setProcessInstances(List<ProcessInstance> processInstances) {
		this.processInstances = processInstances;
	}
	public ProcessInstance addProcessInstance(ProcessInstance processInstance) {
		getProcessInstances().add(processInstance);
		processInstance.setProcessType(this);
		return processInstance;
	}
	public ProcessInstance removeProcessInstance(ProcessInstance processInstance) {
		getProcessInstances().remove(processInstance);
		processInstance.setProcessType(null);
		return processInstance;
	}
	@OneToMany(mappedB

	public List<ProcessTypeData> getProcessTypeData() {
		return this.processTypeData;
	}
	public void setProcessTypeData(List<ProcessTypeData> processTypeData) {
		this.processTypeData = processTypeData;
	}
	public ProcessTypeData addProcessTypeData(ProcessTypeData processTypeData) {
		getProcessTypeData().add(processTypeData);
		processTypeData.setProcessType(this);
		return processTypeData;
	}
	public ProcessTypeData removeProcessTypeData(ProcessTypeData processTypeData) {
		getProcessTypeData().remove(processTypeData);
		processTypeData.setProcessType(null);
		return processTypeData;
	}
	@OneToMany(mappedBy="processType")
	public List<ProcessTypeState> getProcessTypeStates() {
		return this.processTypeStates;
	}
	public void setProcessTypeStates(List<ProcessTypeState> processTypeStates) {
		this.processTypeStates = processTypeStates;
	}
	public ProcessTypeState addProcessTypeState(ProcessTypeState processTypeState) {
		getProcessTypeStates().add(processTypeState);
		processTypeState.
/**
 * 
 * <pre>
 * 业务名:
 * 功能说明: 
 * 编写日期:	2011-9-20
 * 作者:	Mazhaohui
 * 
 * 历史记录
 * 1、修改日期：
 *    修改人：
 *    修改内容：
 * </pre>
 */
public interface SiteManageDao extends EntityDao<SiteManage>
	/**
	 * 
	 * 方法说明：
	 * 
	 * @param e
	 *            e
	 */
	public void delete(SiteManage e);
	/**
	 * 
	 * 方法说明：
	 * 
	 * @return List<SiteManage>
	 */
	public List<SiteManage> findAll();
	/**
	 * 
	 * 方法说明：
	 * 
	 * @param property
	 *            property
	 * @param isAsc
	 *            isAsc
	 * @return List<SiteManage>
	 */
	public List<SiteManage> findAll(String property, Boolean isAsc);
	/**
	 * 
	 * 方法说明：
	 * 
	 * @param property
	 *            property
	 * @param value
	 *            value
	 * @return List<SiteManage>
	 */
	public List<SiteManage> findByProperty(String property, Object value);
	/**
	 * @param e
	 *            e
	 * @return SiteManage
	 */
	public SiteManage update(SiteManage e);
	/**
	 * 跟据实体对象多个属性的值，查找对象
	 * 
	 * @param map
	 *            key为实体对象属性名，value为对应的属性值
	 * @re
public class Handlers {
  public final static Map<String, Class<? extends Handler>> LIST;
  static {
    LIST = new HashMap<String, Class<? extends Handler>>();
    LIST.put(AdminSetVerboseLog.OP, AdminSetVerboseLog.class);
    LIST.put(BanHandler.OP, BanHandler.class);
    LIST.put(ChangeGameOptionHandler.OP, ChangeGameOptionHandler.class);
    LIST.put(ChatHandler.OP, ChatHandler.class);
    LIST.put(CreateGameHandler.OP, CreateGameHandler.class);
    LIST.put(FirstLoadHandler.OP, FirstLoadHandler.class);
    LIST.put(GameChatHandler.OP, GameChatHandler.class);
    LIST.put(GameListHandler.OP, GameListHandler.class);
    LIST.put(GetCardsHandler.OP, GetCardsHandler.class);
    LIST.put(GetGameInfoHandler.OP, GetGameInfoHandler.class);
    LIST.put(JoinGameHandler.OP, JoinGameHandler.class);
    LIST.put(JudgeSelectHandler.OP, JudgeSelectHandler.class);
    LIST.put(KickHandler.OP, KickHandler.class);
    LIST.put(LeaveGameHandler.OP, LeaveGameHandler.class);
    LIST.put(LogoutHandle
/**
 * 그룹관리에 관한 서비스 인터페이스 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성 
 *
 * </pre>
 */
public interface EgovGroupManageService {
	/**
	 * 검색조건에 따른 그룹정보를 조회
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO selectGroup(GroupManageVO groupManageVO) throws Exception;
	/**
	 * 시스템사용 목적별 그룹 목록 조회
	 * @param groupManageVO GroupManageVO
	 * @return List<GroupManageVO>
	 * @exception Exception
	 */
	public List<GroupManageVO> selectGroupList(GroupManageVO groupManageVO) throws Exception;
	/**
	 * 그룹 기본정보를 화면에서 입력하여 항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param groupManage GroupManage
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Excepti
/**
 * 권한별 롤 관리에 관한 서비스 인터페이스 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  이문준          최초 생성
 *
 * </pre>
 */
public interface EgovAuthorRoleManageService {
	/**
	 * 권한 롤 관계정보를 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @exception Exception
	 */
	public AuthorRoleManageVO selectAuthorRole(AuthorRoleManageVO authorRoleManageVO) throws Exception;
	/**
	 * 권한 롤 관계정보 목록 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return List<AuthorRoleManageVO>
	 * @exception Exception
	 */
	public List<AuthorRoleManageVO> selectAuthorRoleList(AuthorRoleManageVO authorRoleManageVO) throws Exception;
	/**
	 * 권한 롤 관계정보를 화면에서 입력하여 입력항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void insertAuthorRole(AuthorRoleManage authorRol
/**
 * Mail연동관리에 대한 Vo 클래스
 * @author 배치운영환경 김지완
 * @since 2012.07.16
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2012.07.16  김지완          최초 생성
 *
 * </pre>
 */
public class MailIntrlManageVO extends MailIntrlManage {
	private static final long serialVersionUID = 1L;
	List <MailIntrlManageVO> mailIntrlManageList;
	/**
	 * MailIntrlManage 를 리턴한다.
	 * @return MailIntrlManage
	 */
	public MailIntrlManage getMailIntrlManage()
    {
    	return getMailIntrlManage();
    }
	/**
	 * MailIntrlManage 값을 설정한다.
	 * @param mailIntrlManage MailIntrlManage
	 */	
    public void setMailIntrlManage(MailIntrlManage mailIntrlManage)
    {
    	setMailIntrlManage(mailIntrlManage);
    }
	/**
	 * mailIntrlManageList attribute 를 리턴한다.
	 * @return List<MailIntrlManageVO>
	 */
	public List<MailIntrlManageVO> getMailIntrlManageList() {
		return mailIntrlManageList;
	}
	/**
	 * ma
public class CommonInfo {
	private UserServiceBeanLocal userService;
	private ProjectInfoServiceBeanLocal projectService;
	private ManagerInfoServiceBeanLocal managerService;
	private EffortsServiceBeanLocal effortService;
	public UserServiceBeanLocal getUserService() {
		try {
			userService = (UserServiceBeanLocal) EffortsServiceLocator
					.getLocalHome(EffortsServiceConstants.UserServiceConstant);
		} catch (NamingException e) {
			e.printStackTrace();
		}
		return userService;
	}
	public void setProjectService(ProjectInfoServiceBeanLocal projectService) {
		this.projectService = projectService;
	}
	public ManagerInfoServiceBeanLocal getManagerService() {
		try {
			managerService = (ManagerInfoServiceBeanLocal) EffortsServiceLocator
					.getLocalHome(EffortsServiceConstants.ManagerServiceConstant);
		} catch (NamingException e) {
			e.printStackTrace();
		}
		return managerService;
	}
	public void setManagerService(ManagerInfoServiceBeanLocal managerService) {
		this.managerServ
/**
 * @(#)ProcessChain
 * 版权声明 厦门畅享信息技术有限公司, 版权所有 违者必究
 *
 *<br> Copyright:  Copyright (c) 2014
 *<br> Company:厦门畅享信息技术有限公司
 *<br> @author ulyn
 *<br> 14-2-5 下午3:11
 *<br> @version 1.0
 *————————————————————————————————
 *修改记录
 *    修改者：
 *    修改时间：
 *    修改原因：
 *————————————————————————————————
 */
/**
 * <pre></pre>
 * <br>----------------------------------------------------------------------
 * <br> <b>功能描述:</b>
 * <br>
 * <br> 注意事项:
 * <br>
 * <br>
 * <br>----------------------------------------------------------------------
 * <br>
 */
public class ProcessChain implements Process {
    private List<Process> processList = new ArrayList<Process>();
    public void setProcessList(Process[] processes) {
        this.processList = Arrays.asList(processes);
    }
    public ProcessChain addProcess(Process process) {
        processList.add(process);
        return this;
    }
    int index = 0;
    @Override
    public void doProcess(RequestPro req, ResponsePro res, ProcessChain proces
public class CombatLog extends JavaPlugin {
    private ConfigHandler configHandler;
    private NPCHandler npcHandler;
    private TagHandler tagHandler;
    public void onEnable() {
        getConfigHandler().loadConfigs();
        getTagHandler().loadCombatLoggers();
        getServer().getPluginManager().registerEvents(new PlayerListener(this), this);
        getCommand("cl").setExecutor(new CLCommand(this));
        getLogger().info("has been enabled");
    }
    public void onDisable() {
        getTagHandler().saveCombatLoggers();
        getConfigHandler().saveConfigs();
        getLogger().info("has been disabled");
    }
    public ConfigHandler getConfigHandler() {
        if(configHandler == null) configHandler = new ConfigHandler(this);
        return configHandler;
    }
    public NPCHandler getNPCHandler() {
        if(npcHandler == null) npcHandler = new NPCHandler(this);
        return npcHandler;
    }
    public TagHandler getTagHandler() {
        if(tagHandler == 
/**
 * 개요
 * - 포상관리에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - 포상관리에 대한 등록, 수정, 삭제, 조회, 승인처리 기능을 제공한다.
 * - 포상관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Repository("rwardManageDAO")
public class RwardManageDAO extends EgovComAbstractDAO {
	/**
	 * 포상관리정보를 관리하기 위해 등록된 포상관리 목록을 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return List - 포상관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<RwardManageVO> selectRwardManageList(RwardManageVO rwardManageVO) throws Exception {
		return list("rwardManageDAO.selectRwardManageList", rwardManageVO);
	}
    /**
	 * 포상관리목록 총 갯수를 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectRwardManageListTotCnt(RwardManageVO rwardManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("rwardManageDAO.selectRwardManageListTotCnt", rwardManageVO);
    }
	/**
	 * 등록된 포상관리의 상세정보를 조회한다.
	 * @param rwardManageVO - 포상관리 V

	 * @return RwardManageVO - 포상관리 VO
	 */
	public RwardManageVO selectRwardManage(RwardManageVO rwardManageVO)  throws Exception {
		return (RwardManageVO) selectByPk("rwardManageDAO.selectRwardManage", rwardManageVO);
	}
	/**
	 * 포상관리정보를 신규로 등록한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void insertRwardManage(RwardManage rwardManage) throws Exception {
		insert("rwardManageDAO.insertRwardManage", rwardManage);
	}
	/**
	 * 기 등록된 포상관리정보를 수정한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void updtRwardManage(RwardManage rwardManage) throws Exception {
		update("rwardManageDAO.updtRwardManage", rwardManage);
	}
	/**
	 * 기 등록된 포상관리정보를 삭제한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void deleteRwardManage(RwardManage rwardManage) throws Exception {
        delete("rwardManageDAO.deleteRwardManage",rwardManage);
	}
    /*** 승인처리관련 ***/
	/**
	 * 포상관리정보 승인 처리를 위해 신청된 포상관리 목록을 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return List - 포상관리 목록
	 */
	@SuppressWarnings("unche
/**
 * Detects when a process is finished and invokes the associated listeners.
 */
public class ProcessExitDetector extends Thread {
    /**
	 * The process for which we have to detect the end.
	 * @uml.property  name="process"
	 */
    private Process process;
    /**
	 * The associated listeners to be invoked at the end of the process.
	 * @uml.property  name="listeners"
	 * @uml.associationEnd  multiplicity="(0 -1)" elementType="gov.nist.csd.pm.user.ProcessFinishedListener"
	 */
    private List<ProcessFinishedListener> listeners = new ArrayList<ProcessFinishedListener>();
    /**
     * Starts the detection for the given process
     * @param process the process for which we have to detect when it is finished
     */
    public ProcessExitDetector(Process process) {
        try {
            process.exitValue();
            throw new IllegalArgumentException("The process is already ended");
        } catch (IllegalThreadStateException exc) {
            this.process = process;
   
/**
 * @author Manuel de la Peña
 * @generated
 */
public class RepositoryApplication extends Controller {
	public static Result addRepository() {
		Form<RepositoryFormData> form = Form.form(
			RepositoryFormData.class).fill(new Repository().toFormData());
		return ok(repository.render(form));
	}
	public static Result get(Long id) {
		Repository dbRepository = Repository.find.byId(id);
		Form<RepositoryFormData> form = Form.form(
			RepositoryFormData.class).fill(dbRepository.toFormData());
		return ok(repository.render(form));
	}
	public static Result all() {
		List<Repository> repositoryList = Repository.find.all();
		return ok(repositorys.render(repositoryList));
	}
	public static Result submit() {
		Form<RepositoryFormData> formData = Form.form(
			RepositoryFormData.class).bindFromRequest();
		String[] postSubmit = request().body().asFormUrlEncoded().get("submit");
		if (postSubmit == null || postSubmit.length == 0) {
			return badRequest("You must provide a valid action");
		}
	

			String action = postSubmit[0];
			if ("edit".equals(action)) {
				return edit(formData);
			}
			else if ("delete".equals(action)) {
				return delete(formData);
			}
			else {
				return badRequest("This action is not allowed");
			}
		}
	}
	public static Result edit(Form<RepositoryFormData> formData) {
		if (formData.hasErrors()) {
			flash("error", "Please correct errors above.");
			return addRepository();
		}
		else {
			RepositoryFormData repositoryFormData = formData.get();
			String id = repositoryFormData.repositoryId;
			long repositoryId = 0;
			if (id != null) {
				repositoryId = Long.valueOf(id);
			}
			Repository repository;
			if (repositoryId > 0) {
				repository = Repository.find.byId(repositoryId);
				repository.setMvccVersion(Long.valueOf(repositoryFormData.mvccVersion));
				repository.setUuid(repositoryFormData.uuid);
				repository.setRepositoryId(Long.valueOf(repositoryFormData.repositoryId));
				repository.setGroupId(Long.valueOf(repositoryFormData.gro

				repository.setCompanyId(Long.valueOf(repositoryFormData.companyId));
				repository.setUserId(Long.valueOf(repositoryFormData.userId));
				repository.setUserName(repositoryFormData.userName);
				repository.setCreateDate(new Date(repositoryFormData.createDate));
				repository.setModifiedDate(new Date(repositoryFormData.modifiedDate));
				repository.setClassNameId(Long.valueOf(repositoryFormData.classNameId));
				repository.setName(repositoryFormData.name);
				repository.setDescription(repositoryFormData.description);
				repository.setPortletId(repositoryFormData.portletId);
				repository.setTypeSettings(repositoryFormData.typeSettings);
				repository.setDlFolderId(Long.valueOf(repositoryFormData.dlFolderId));
			}
			else {
				repository = new Repository(repositoryFormData);
			}
			Ebean.save(repository);
			flash("success", "Repository instance created/edited: " + repository);
			return all();
		}
	}
	public static Result delete(Form<RepositoryFormData> formData) {
		Re
public class GetSenderInteractor implements Interactor<Sender> {
    private final int senderId;
    private final SenderRepository senderRepository;
    private final InputRepository inputRepository;
    private final OutputRepository outputRepository;
    private final CommandRepository commandRepository;
    @Inject
    public GetSenderInteractor(@Named("senderId") int senderId,
                               @NonNull SenderRepository senderRepository,
                               @NonNull InputRepository inputRepository,
                               @NonNull OutputRepository outputRepository,
                               @NonNull CommandRepository commandRepository) {
        this.senderId = senderId;
        this.senderRepository = senderRepository;
        this.inputRepository = inputRepository;
        this.outputRepository = outputRepository;
        this.commandRepository = commandRepository;
    }
    @Override
    public Sender execute() {
        return buildSender(se
/**
 * Class to represent the result when starting a process.
 */
public class WorkflowProcessResult {
    private WorkflowProcess process;
    private Collection<WorkflowActivity> activities;
    private String status;
    /**
     * @return the process
     */
    public WorkflowProcess getProcess() {
        return process;
    }
    /**
     * @param process the process to set
     */
    public void setProcess(WorkflowProcess process) {
        this.process = process;
    }
    /**
     * @return the activities
     */
    public Collection<WorkflowActivity> getActivities() {
        return activities;
    }
    /**
     * @param activities the activities to set
     */
    public void setActivities(Collection<WorkflowActivity> activities) {
        this.activities = activities;
    }
    /**
     * @return the status
     */
    public String getStatus() {
        return status;
    }
    /**
     * @param status the status to set
     */
    public void setStatus(String status) 
public class AutowiredService<T> extends BaseSiteController<T> {
	private static final long serialVersionUID = 1L;
	@Autowired
	protected UserService userService;
	@Autowired
	protected CategoryService categoryService;
	@Autowired
	protected ProductService productService;
	@Autowired
	protected LinkService linkService;
	@Autowired
	protected AttachmentService attachmentService;
	@Autowired
	protected SupplyService supplyService;
	@Autowired
	protected EnterpcontactService enterpcontactService;
	@Autowired
	protected NewsService newsService;
	@Autowired
	protected SyscodeService syscodeService;
	@Autowired
	protected EnterpriseService enterpriseService;
	@Autowired
	protected AlbumService albumService;
	@Autowired
	protected GroupLayoutService layoutService;
	@Autowired
	protected GroupLaymodService laymodService;
	@Autowired
	protected GroupModuleService moduleService;
	@Autowired
	protected GroupLaythemeService laythemeService;
	@Autowired
	protected GroupThemeService themeService;
	@
/**
 * Created by wangxiunian on 2016/8/13.
 */
public class AppModuleHandlerStore extends ModuleHandlerStore {
    public AppModuleHandlerStore(Application application) {
        super(application);
    }
    @SuppressWarnings("unchecked")
    @Override
    protected <T extends UriDispatcherHandler> Class<T>[] registHandlers() {
        Class<T>[] clazzes = new Class[]{
                LoginHandler.class,
                WalletHttpHandler.class,
                AccessTokenHandler.class,
                UserProfileHandler.class,
                BankCardManagerHandler.class,
                RechargeHandler.class,
                LocationGetHandler.class,
                ImageChoiceHandler.class,
                CheckLivenessHandler.class,
                RichScanHandler.class,
                PaymentCodeHandler.class,
                RunTimeHandler.class,
                ContactGetHandler.class,
                TopUpHandler.class,
                VerifyPayPasswordHandler.class,
        
/*!
* \File: ProcessService.java 
* \Author: Quaglio Davide <quaglio.davide@gmail.com> 
* \Date: 2014-04-22 
* \LastModified: 2014-09-10
* \Class: ProcessService
* \Package: com.sirius.sequenziatore.server.service
* \Brief: gestione dei processi
* */
@Service
public class ProcessService {
	@Autowired
	ProcessDao processDao;
	@Autowired
	UserDao userDao;
	public boolean createProcess(ProcessWrapper processWrapper){
		Process process;
		List<Block> blocks;
		return result;			
	}
	public List<Process> getProcessList(){
		List<Process> processList=new ArrayList<Process>();
		processList=processDao.getAllProcess();
		return processList;
	}
	public List<User> getUserList(int processId) {
		List<User> userList=new ArrayList<User>();
		userList=userDao.getUserByProcess(processId);
		return userList;
	}
	public boolean terminateProcess(int processId) {
		Process process;
		process=processDao.getProcess(processId);
		process.setTerminated(true);
		boolean result=processDao.updateProcess(process)
/**
 * 
 */
/**
 * @author timchiang
 * 
 */
public class PaymentDetailFacade {
    /** 申請單狀態 Service */
    private ApplStateService applStateService;
    /** 分錄 Service */
    private EntryService entryService;
    /** 行政費用申請單 Service */
    private ExpapplCService expapplCService;
    /** 流程簽核歷程 Service */
    private FlowCheckstatusService flowCheckstatusService;
    /** 送匯批次記錄Service */
    private PaymentBatchService paymentBatchService;
    /** 序號表 Service */
    private SequenceService sequenceService;
    /** 日結單代傳票 Service */
    private SubpoenaService subpoenaService;
    /** 子系統別 Service */
    private SysTypeService sysTypeService;
    /** 過渡付款明細 Service */
    private TransitPaymentDetailService transitPaymentDetailService;
    /** 使用者的 Service */
    private UserService userService;
    /** 大分類 Service */
    private BigTypeService bigTypeService;
    /**日計表 Service*/
    private DailyStatementService dailyStatementService;
    /**
     * @param 申請單狀態
     *            

     */
    public void setApplStateService(ApplStateService applStateService) {
        this.applStateService = applStateService;
    }
    /**
     * @return 申請單狀態 Service
     */
    public ApplStateService getApplStateService() {
        return applStateService;
    }
    /**
     * @param 行政費用申請單
     *            Service
     */
    public void setExpapplCService(ExpapplCService expapplCService) {
        this.expapplCService = expapplCService;
    }
    /**
     * @return 行政費用申請單 Service
     */
    public ExpapplCService getExpapplCService() {
        return expapplCService;
    }
    /**
     * @param 日結單代傳票
     *            Service
     */
    public void setSubpoenaService(SubpoenaService subpoenaService) {
        this.subpoenaService = subpoenaService;
    }
    /**
     * @return 日結單代傳票 Service
     */
    public SubpoenaService getSubpoenaService() {
        return subpoenaService;
    }
    /**
     * @param 子系統別
     *            Service
     */
    public void setSy

        this.sysTypeService = sysTypeService;
    }
    /**
     * @return 子系統別 Service
     */
    public SysTypeService getSysTypeService() {
        return sysTypeService;
    }
    /**
     * @param 送匯批次記錄Service
     */
    public void setPaymentBatchService(PaymentBatchService paymentBatchService) {
        this.paymentBatchService = paymentBatchService;
    }
    /**
     * @return 送匯批次記錄Service
     */
    public PaymentBatchService getPaymentBatchService() {
        return paymentBatchService;
    }
    /**
     * @param 流程簽核歷程
     *            Service
     */
    public void setFlowCheckstatusService(FlowCheckstatusService flowCheckstatusService) {
        this.flowCheckstatusService = flowCheckstatusService;
    }
    /**
     * @return 流程簽核歷程 Service
     */
    public FlowCheckstatusService getFlowCheckstatusService() {
        return flowCheckstatusService;
    }
    /**
     * @param 序號表
     *            Service
     */
    public void setSequenceService(SequenceServi

        this.sequenceService = sequenceService;
    }
    /**
     * @return 序號表 Service
     */
    public SequenceService getSequenceService() {
        return sequenceService;
    }
    /**
     * @param 使用者的
     *            Service
     */
    public void setUserService(UserService userService) {
        this.userService = userService;
    }
    /**
     * @return 使用者的 Service
     */
    public UserService getUserService() {
        return userService;
    }
    public void setTransitPaymentDetailService(TransitPaymentDetailService transitPaymentDetailService) {
        this.transitPaymentDetailService = transitPaymentDetailService;
    }
    public TransitPaymentDetailService getTransitPaymentDetailService() {
        return transitPaymentDetailService;
    }
    public void setEntryService(EntryService entryService) {
        this.entryService = entryService;
    }
    public EntryService getEntryService() {
        return entryService;
    }
    public BigTypeService getBigT
/**
 * The service locator module.
 * Will fetch service from cache, otherwise creates a fresh service and update cache
 *
 * @author saifasif
 */
public class ServiceLocator {
    private static ServiceCache serviceCache = new ServiceCache();
    /**
     * Fetch the service with the name param from the cache first,
     * if no service is found, lookup the service from the {@link InitContext} and
     * then add the newly created service into the cache map for future requests.
     *
     * @param serviceJndiName a string
     * @return {@link Service}
     */
    public static Service getService(String serviceJndiName) {
        Service serviceObj = serviceCache.getService(serviceJndiName);
        if (serviceObj != null) {
            return serviceObj;
        } else {
            /*
             * If we are unable to retrive anything from cache, then
			 * lookup the service and add it in the cache map
			 */
            InitContext ctx = new InitContext();
            serviceObj
/**
 * @author guoxianwei
 * @date 2010-10-20 上午10:52:01
 * 
 */
public class CpmProcessStatus implements Serializable {
	private static final long serialVersionUID = -993588298196945409L;
	public CpmProcessStatus() {
	}
	private String cpmProcessPID;
	private String cpmProcessName;
	private String cpmProcessuSecs;
	private String cpmProcessTimeCreated;
	private String cpmProcessAverageUSecs;
	private CpmProcessExtStatus cpmProcessExtStatus;
	private CpmProcessExtRevStatus cpmProcessExtRevStatus;
	public CpmProcessExtRevStatus getCpmProcessExtRevStatus() {
		return cpmProcessExtRevStatus;
	}
	public void setCpmProcessExtRevStatus(
			CpmProcessExtRevStatus cpmProcessExtRevStatus) {
		this.cpmProcessExtRevStatus = cpmProcessExtRevStatus;
	}
	public CpmProcessExtStatus getCpmProcessExtStatus() {
		return cpmProcessExtStatus;
	}
	public void setCpmProcessExtStatus(CpmProcessExtStatus cpmProcessExtStatus) {
		this.cpmProcessExtStatus = cpmProcessExtStatus;
	}
	public String getCpmProcessPI
/**
 * 설문템플릿 Dao Class 구현
 * @author 공통서비스 장동한
 * @since 2009.03.20
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  장동한          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성
 *
 * </pre>
 */
@Repository("qustnrTmplatManageDao")
public class QustnrTmplatManageDao extends EgovAbstractDAO {
    /**
	 * 템플릿파일명을 조회한다.
	 * @param qustnrTmplatManageVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	public Map<?, ?> selectQustnrTmplatManageTmplatImagepathnm(QustnrTmplatManageVO qustnrTmplatManageVO){
		return (Map<?, ?>)select("QustnrTmplatManage.selectQustnrTmplatManageTmplatImagepathnm", qustnrTmplatManageVO);
	}
	/**
	 * 설문템플릿 목록을 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	public List<?> selectQustnrTmplatManageList(ComDefaultVO searchVO){
		return list("QustnrTmplatManage.selectQustnrTm

	}
    /**
	 * 설문템플릿를(을) 상세조회 한다.
	 * @param QustnrTmplatManage - 회정정보가 담김 VO
	 * @return List
	 * @throws Exception
	 */
	public List<?> selectQustnrTmplatManageDetail(QustnrTmplatManageVO qustnrTmplatManageVO){
		return list("QustnrTmplatManage.selectQustnrTmplatManageDetail", qustnrTmplatManageVO);
	}
    /**
	 * 설문템플릿를(을) 목록 전체 건수를(을) 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return int
	 * @throws Exception
	 */
	public int selectQustnrTmplatManageListCnt(ComDefaultVO searchVO){
		return (Integer)select("QustnrTmplatManage.selectQustnrTmplatManageCnt", searchVO);
	}
    /**
	 * 설문템플릿를(을) 등록한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @throws Exception
	 */
	public void insertQustnrTmplatManage(QustnrTmplatManageVO qustnrTmplatManageVO){
		insert("QustnrTmplatManage.insertQustnrTmplatManage", qustnrTmplatManageVO);
	}
    /**
	 * 설문템플릿를(을) 수정한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @throws Exception
	 */
	public void updateQustnrTmplatManage(QustnrTmplatManageVO qustnrTmpla
/**
 * 사용자관리에 대한 DAO 클래스
 * @user 배치운영환경 김지완
 * @since 2012.07.12
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2012.07.12  김지완          최초 생성
 *
 * </pre>
 */
@Repository("userManageDAO")
public class UserManageDAO extends EgovAbstractDAO {
	 /**
	 * 모든 사용자를 조회한다.
	 * @param userManageVO UserManageVO
	 * @return List<UserManageVO>
	 * @exception Exception
	 */
    @SuppressWarnings("unchecked")
	public List<UserManageVO> selectUserList(UserManageVO userManageVO) throws Exception {
        return (List<UserManageVO>) list("userManageDAO.selectUserAllList", userManageVO);
    }
	/**
	 * 사용자를 등록
	 * @param userManage UserManage
	 * @exception Exception
	 */
    public void insertUser(UserManage userManage) throws Exception {
        insert("userManageDAO.insertUser", userManage);
    }
    /**
	 * 사용자를 수정
	 * @param userManage UserManage
	 * @exception Exception
	

    public void updateUser(UserManage userManage) throws Exception {
        update("userManageDAO.updateUser", userManage);
    }
    /**
	 * 사용자를 삭제
	 * @param userManage UserManage
	 * @exception Exception
	 */
    public void deleteUser(UserManage userManage) throws Exception {
        delete("userManageDAO.deleteUser", userManage);
    }
    /**
	 * 사용자목록 총 갯수 조회
	 * @param userManageVO UserManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectUserListTotCnt(UserManageVO userManageVO)  throws Exception {
        return (Integer)select("userManageDAO.selectUserListTotCnt", userManageVO);
    }
    /**
	 * 사용자를 조회한다.
	 * @param userManageVO UserManageVO
	 * @return UserManageVO
	 * @exception Exception
	 */
    public UserManageVO selectUser(UserManageVO userManageVO) throws Exception {
        return (UserManageVO) select("userManageDAO.selectUser", userManageVO);
    }
    /**
     * 입력한 사용자아이디의 중복여부를 체크하여 사용가능여부를 확인
     * @param checkId 중복체크대상 아이디
     * @
/**
 * Created by zhongqinng on 1/1/15.
 */
public class AssetHandler {
    private String TAG = "AssetHandler";
    public FrameLayoutHandler frameLayoutHandler;
    public ImageButtonHandler imageButtonHandler;
    public LinearLayoutHandler linearLayoutHandler;
    public TextViewHandler textViewHandler;
    public EditTextHandler editTextHandler;
    public KeyBoardHandler keyBoardHandler;
    public ImageViewHandler imageViewHandler;
    public ButtonHandler buttonHandler;
    public SmartImageViewHandler smartImageViewHandler;
    public AssetHandler(FragmentActivity fragmentActivity){
        frameLayoutHandler =new FrameLayoutHandler();
        imageButtonHandler =new ImageButtonHandler();
        linearLayoutHandler =new LinearLayoutHandler();
        textViewHandler =new TextViewHandler();
        editTextHandler=new EditTextHandler();
        keyBoardHandler=new KeyBoardHandler(fragmentActivity);
        imageViewHandler=new ImageViewHandler();
        buttonHandler=new Butt
/**
 * RSS태그관리를 처리하는 Service Class 구현
 * @author 공통서비스 장동한
 * @since 2010.06.16
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.07.03  장동한          최초 생성
 *
 * </pre>
 */
public interface EgovRssTagManageService {
    /**
     * JDBC 테이블 목록을조회한다.
     * @return List
     * @throws Exception
     */
    public List<?> selectRssTagManageTableList() throws Exception;
    /**
     * JDBC 테이블 컬럼 목록을 조회한다.
     * @param map - 컬럼조회정보
     * @return List
     * @throws Exception
     */
    public List<?> selectRssTagManageTableColumnList(Map<?, ?> map) throws Exception;
    /**
	 * RSS태그관리 목록을 조회한다.
	 * @param rssManage -조회할 정보가 담긴 객체
	 * @return List
	 * @throws Exception
	 */
	public List<?> selectRssTagManageList(RssManage rssManage) throws Exception;
    /**
     * RSS태그관리를(을) 목록 전체 건수를(을) 조회한다.
     * @param rssManage  -조회할 정보가 담긴 객체
     * @return int -조회한건수가담
public class DomainTier_ConfigurationFixture {
   protected static ProcessPuzzleContext config = null;
   protected static WorkflowRepository actionRepository;
   protected static DefaultArtifactRepository artifactRepository;
   protected static ArtifactSubClassRepository artifactSubClassRepository;
   protected static ArtifactTypeRepository artifactTypeRepository;
   protected static ArtifactTypeGroupRepository artifactTypeGroupRepository;
   protected static CountryRepository countryRepository;
   protected static InternalizationContext internalizationRepository = null;
   protected static PartyRelationshipTypeRepository partyRelationshipTypeRepository;
   protected static PartyRepository partyRepository;
   protected static PartyRoleTypeRepository partyRoleTypeRepository;
   protected static ProtocolRepository protocolRepository;
   protected static ResourceTypeRepository resourceTypeRepository;
   protected static SettlementRepository settlementRepository;
   protected static UserR

   protected static ZipCodeRepository zipCodeRepository;
   protected static DomainTier_ConfigurationFixture fixtureInstance = null;
   @Mock private Application application;
   public static DomainTier_ConfigurationFixture getInstance() {
      if( fixtureInstance == null ){
         return new DomainTier_ConfigurationFixture();
      }
      return fixtureInstance;
   }
   public void setUp() {
      MockitoAnnotations.initMocks( DomainTier_ConfigurationFixture.class );
      config = ApplicationContextFactory.create( application, DomainTierTestConfiguration.APPLICATION_CONFIGURATION_DESCRIPTOR_PATH );
      try{
         config.setUp( Application.Action.start );
         getDomainTierRepositories();
      }catch( ConfigurationSetUpException e ){
         e.printStackTrace();
      }
   }
   public void tearDown() {
      config.tearDown( Application.Action.stop );
      config = null;
      internalizationRepository = null;
      userRepository = null;
      fixtureInstance = null;

   }
   public static WorkflowRepository getActionRepository() {
      return actionRepository;
   }
   public static DefaultArtifactRepository getArtifactRepository() {
      return artifactRepository;
   }
   public static ArtifactSubClassRepository getArtifactSubClassRepository() {
      return artifactSubClassRepository;
   }
   public static ArtifactTypeGroupRepository getArtifactTypeGroupRepository() {
      return artifactTypeGroupRepository;
   }
   public static ArtifactTypeRepository getArtifactTypeRepository() {
      return artifactTypeRepository;
   }
   public static ProcessPuzzleContext getConfig() {
      return config;
   }
   public static CountryRepository getCountryRepository() {
      return countryRepository;
   }
   public static InternalizationContext getInternalizationRepository() {
      return internalizationRepository;
   }
   public static PartyRelationshipTypeRepository getPartyRelationshipTypeRepository() {
      return partyRelationshipTypeRepository;
 
/**
 * 服务的容器类 <br/>
 * 实现延迟初始化
 *
 * @author cpaladin
 */
public class ServiceContainer implements Service {
    private boolean init = false;
    private Service service;
    private ServiceConfig serviceConfig;
    public ServiceContainer(Service service) {
        this.service = service;
    }
    @Override
    public void init(ServiceConfig serviceConfig) throws Exception {
        this.serviceConfig = serviceConfig;
        if (serviceConfig.getOrder() > 0) {
            service.init(serviceConfig);
            init = true;
        }
    }
    @Override
    public void destroy() {
        service.destroy();
    }
    @Override
    public void service(Request request) throws Exception {
        getService().service(request);
    }
    private Service getService() throws Exception {
        if (init) {
            return service;
        }
        synchronized (this) {
            if (!init) {
                service.init(serviceConfig);
                init = true;
            }
  
/**
 * <code>Handlers</code> is a utility class with static factory methods to
 * return instances of argument {@link Handler} objects.
 **/
public final class Handlers {
    public static final BooleanHandler booleanHandler (boolean initialValue) {
	return new BooleanHandler (initialValue) ;
    }
    public static final BooleanHandler booleanHandler (Boolean initialValue) {
	return new BooleanHandler (initialValue) ;
    }
    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    public static final CountHandler countHandler (int initialValue) {
	return new CountHandler (initialValue) ;
    }
    public static final CountHandler countHandler (Integer initialValue) {
	return new CountHandler (initialValue) ;
    }
    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    public static final InputFileHandler inputFileHandler (File defaultFile) {
	return
	    defaultFile != null
	    ? new InputFileHandler (null, defaultFile)
	    : in

    }
    public static final InputFileHandler inputFileHandler () {
	return InputFileHandler.NULL_HANDLER ;
    }
    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    public static final OutputFileHandler outputFileHandler (File defaultOut) {
	return
	    defaultOut != null
	    ? new OutputFileHandler (null, defaultOut)
	    : outputFileHandler () ;
    }
    public static final OutputFileHandler outputFileHandler () {
	return OutputFileHandler.NULL_HANDLER ;
    }
    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    final public static PatternHandler patternHandler (String defaultValue) {
	return
	    defaultValue != null
	    ? new PatternHandler (defaultValue)
	    : patternHandler () ;
    }
    public static final PatternHandler patternHandler () {
	return PatternHandler.NULL_HANDLER ;
    }
    /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    public static final StringHandler stringHan
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Luisito
 */
public class Service implements Serializable{
    private String serviceName;
    private String serviceIP;
    private int servicePort;
    
    public Service(){
        
    }
    public Service(String serviceName){
        this.serviceName = serviceName;
    }
    public Service(String serviceName, String serviceIP, int servicePort){
        this.serviceName = serviceName;
        this.serviceIP = serviceIP;
        this.servicePort = servicePort;
    }
    
    public void setServiceName(String serviceName){
        this.serviceName = serviceName;
    }
    public void setServiceIP(String serviceIP){
        this.serviceIP = serviceIP;
    }
    public void setServicePort(int servicePort){
        this.servicePort = servicePort;
    }
    public String getServiceName(){
        return serviceName;
    }
    public String getServiceIP(){
        return s
public interface IUnitOfWork  extends AutoCloseable {
	public void commit();
	public void rollback();
	public ICityRepository getCityRepository();
	public IRETypeRepository getrETypeRepository();
	public ISellingOfferRepository getSellingOfferRepository();
	public IRepresenterRepository getRepresenterRepository();
	public IOfferRepository getOfferRepository();
	public IBookedTimeRepository getBookedTimeRepository();
	public IAvailableTimeRepository getAvailableTimeRepository();
	public IUnitRepository getUnitRepository();
	public IPieceRepository getPieceRepository();
	public INearbyFacilityRepository getNearbyFacilityRepository();
	public IImageRepository getImageRepository();
	public IEstateFeatureRepository getEstateFeatureRepository();
	public IEstateRepository getEstateRepository();
	public IApplianceRepository getApplianceRepository();
	public IStateRepository getStateRepository();
	public IDistrictRepository getDistrictRepository();
	public ICountryRepository getCountryRepositor
/**
 * Message for sending Corba Server's Location to client
 * Immutable class
 * 
 * @author Gokan EKINCI
 */
public class ServerMulticastDiscoveryResponse {   
    private String serviceName;
    private String serviceHost;
    private int servicePort;
    
    public ServerMulticastDiscoveryResponse(String serviceName, String serviceHost, int servicePort){
        this.serviceName = serviceName;
        this.serviceHost = serviceHost;
        this.servicePort = servicePort;
    }
    @Override
    public String toString() {
        return "ServerMulticastDiscoveryResponse [serviceName=" + serviceName
                + ", serviceHost=" + serviceHost + ", servicePort="
                + servicePort + "]";
    }
    public String getServiceName() {
        return serviceName;
    }
    public String getServiceHost() {
        return serviceHost;
    }
    public int getServicePort() {
        return servicePort;
    }
    public void setServiceName(String serviceName) {
        this.s
/**
 * 바로가기메뉴관리 정보를 관리하기 위한 서비스 인터페이스 클래스
 * @author 공통컴포넌트팀 윤성록
 * @since 2009.09.25
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.9.25  윤성록          최초 생성
 *
 * </pre>
 */
public interface EgovBkmkMenuManageservice {
    
    /**
     * 바로가기메뉴관리 정보를 삭제한다.
     * @param BkmkMenuManage
     * @return  
     * @exception Exception
     */
    public void deleteBkmkMenuManage(BkmkMenuManage BkmkMenuManage) throws Exception ;
    
    /**
     * 바로가기메뉴관리 정보를 등록한다.
     * @param BkmkMenuManage
     * @return  
     * @exception Exception
     */
    public void insertBkmkMenuManage(BkmkMenuManage bkmkMenuManage)throws Exception ;
    
    /**
     * 바로가기메뉴관리 정보의 전체목록을 조회한다.
     * @param BkmkMenuManage
     * @return  Map<String, Object>
     * @exception Exception
     */
    public Map<String, Object> selectBkmkMenuManageList(BkmkMenuManageVO bkmkMenuManag
public class LogHandlerFactory {
    
    public static final String DB_HANDLER = "db";
    public static final String FILE_HANDLER = "file";
    public static final String CONSOLE_HANDLER = "console";
    
    public static LogHandler createLogHandler(String type){
        if(type != null){
            if (type.equals(DB_HANDLER)) {
                return createDBHandler();
            } else if(type.equals(FILE_HANDLER)){
                return createFileHandler();
            } else if(type.equals(CONSOLE_HANDLER)){
                return createConsoleHandler();
            }
        }
        
        return null;
    }
    
    public static List<LogHandler> createLogHandler(List<String> types){
        
        List<LogHandler> handlers = new ArrayList<LogHandler>();
        
        if(types != null && !types.isEmpty()){
            for (String type : types) {
                LogHandler handler = createLogHandler(type);
                
                if(handler != null){
     
/**
 * <p>
 * This class is a wrapper for {@link CourseImageService}.
 * </p>
 *
 * @author    Brian Wing Shun Chan
 * @see       CourseImageService
 * @generated
 */
public class CourseImageServiceWrapper implements CourseImageService,
    ServiceWrapper<CourseImageService> {
    private CourseImageService _courseImageService;
    public CourseImageServiceWrapper(CourseImageService courseImageService) {
        _courseImageService = courseImageService;
    }
    /**
     * @deprecated Renamed to {@link #getWrappedService}
     */
    public CourseImageService getWrappedCourseImageService() {
        return _courseImageService;
    }
    /**
     * @deprecated Renamed to {@link #setWrappedService}
     */
    public void setWrappedCourseImageService(
        CourseImageService courseImageService) {
        _courseImageService = courseImageService;
    }
    public CourseImageService getWrappedService() {
        return _courseImageService;
    }
    public void setWrappedService(Course
/**
 * 권한관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Service("egovAuthorManageService")
public class EgovAuthorManageServiceImpl extends EgovAbstractServiceImpl implements EgovAuthorManageService {
    
	@Resource(name="authorManageDAO")
    private AuthorManageDAO authorManageDAO;
    /**
	 * 권한 목록을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return List<AuthorManageVO>
	 * @exception Exception
	 */
    public List<AuthorManageVO> selectAuthorList(AuthorManageVO authorManageVO) throws Exception {
        return authorManageDAO.selectAuthorList(authorManageVO);
    }
    
	/**
	 * 권한을 등록한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void insertAuthor(AuthorManage authorManage) throws Exceptio

    	authorManageDAO.insertAuthor(authorManage);
    }
    /**
	 * 권한을 수정한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void updateAuthor(AuthorManage authorManage) throws Exception {
    	authorManageDAO.updateAuthor(authorManage);
    }
    /**
	 * 권한을 삭제한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void deleteAuthor(AuthorManage authorManage) throws Exception {
    	authorManageDAO.deleteAuthor(authorManage);
    }
    /**
	 * 권한을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return AuthorManageVO
	 * @exception Exception
	 */
    public AuthorManageVO selectAuthor(AuthorManageVO authorManageVO) throws Exception {
    	AuthorManageVO resultVO = authorManageDAO.selectAuthor(authorManageVO);
        if (resultVO == null)
            throw processException("info.nodata.msg");
        return resultVO;
    }
    /**
	 * 권한 목록 카운트를 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return int
	 * @exception Exc
public interface ServiceLocator {
	/**
	 * Gets the contactmethods service.
	 * 
	 * @return the contactmethods service
	 */
	ContactmethodsService getContactmethodsService();
	/**
	 * Gets the permission service.
	 * 
	 * @return the permission service
	 */
	PermissionsService getPermissionService();
	/**
	 * Gets the RecommendationsService.
	 * 
	 * @return the RecommendationsService.
	 */
	RecommendationsService getRecommendationsService();
	/**
	 * Gets the RelationPermissionsService.
	 * 
	 * @return the RelationPermissionsService.
	 */
	RelationPermissionsService getRelationPermissionsService();
	/**
	 * Gets the reset passwords service.
	 * 
	 * @return the reset passwords service
	 */
	ResetPasswordsService getResetPasswordsService();
	/**
	 * Gets the robinsons service.
	 *
	 * @return the robinsons service
	 */
	RobinsonsService getRobinsonsService();
	/**
	 * Gets the roles service.
	 * 
	 * @return the roles service
	 */
	RolesService getRolesService();
	/**
	 * Gets the ru

	 *
	 * @return the rule violations service
	 */
	RuleViolationsService getRuleViolationsService();
	/**
	 * Gets the user credits service.
	 *
	 * @return the user credits service
	 */
	UserCreditsService getUserCreditsService();
	/**
	 * Gets the user data service.
	 *
	 * @return the user data service
	 */
	UserDataService getUserDataService();
	/**
	 * Gets the user management service.
	 * 
	 * @return the user management service
	 */
	UserManagementService getUserManagementService();
	/**
	 * Gets the users service.
	 * 
	 * @return the users service
	 */
	UsersService getUsersService();
	/**
	 * Sets the contactmethods service.
	 * 
	 * @param contactmethodsService
	 *            the new contactmethods service
	 */
	void setContactmethodsService(ContactmethodsService contactmethodsService);
	/**
	 * Sets the permission business service.
	 * 
	 * @param permissionService
	 *            the new permission business service
	 */
	void setPermissionService(PermissionsService permissi

	/**
	 * Sets the RecommendationsService.
	 *
	 * @param recommendationsService
	 *            the new RecommendationsService
	 */
	void setRecommendationsService(RecommendationsService recommendationsService);
	/**
	 * Sets the RelationPermissionsService.
	 *
	 * @param relationPermissionsService
	 *            the new RelationPermissionsService
	 */
	void setRelationPermissionsService(
			RelationPermissionsService relationPermissionsService);
	/**
	 * Sets the reset passwords business service.
	 * 
	 * @param resetPasswordsService
	 *            the new reset passwords business service
	 */
	void setResetPasswordsService(ResetPasswordsService resetPasswordsService);
	/**
	 * Sets the robinsons service.
	 *
	 * @param robinsonsService
	 *            the new robinsons service
	 */
	void setRobinsonsService(RobinsonsService robinsonsService);
	/**
	 * Sets the roles service.
	 * 
	 * @param rolesService
	 *            the new roles service
	 */
	void setRolesService(RolesService roles
/**
 * Facade 模式，集中了所有的 Service
 * 
 * @author jinqinghua@gmail.com
 * @version 2013-12-23 03:32:42
 */
@Component
public class Facade {
	@Autowired
	private ConfigService configService;
	@Autowired
	private DepartmentService departmentService;
	@Autowired
	private GroupService groupService;
	@Autowired
	private LinkService linkService;
	@Autowired
	private LogService logService;
	@Autowired
	private NewsService newsService;
	@Autowired
	private NewsAttachmentService newsAttachmentService;
	@Autowired
	private ResourceService resourceService;
	@Autowired
	private TypeService typeService;
	@Autowired
	private UserService userService;
	public Facade() {
	}
	public ConfigService getConfigService() {
		return configService;
	}
	public void setConfigService(ConfigService configService) {
		this.configService = configService;
	}
	public DepartmentService getDepartmentService() {
		return departmentService;
	}
	public void setDepartmentService(DepartmentService departmentService) {
		this.dep

	}
	public GroupService getGroupService() {
		return groupService;
	}
	public void setGroupService(GroupService groupService) {
		this.groupService = groupService;
	}
	public LinkService getLinkService() {
		return linkService;
	}
	public void setLinkService(LinkService linkService) {
		this.linkService = linkService;
	}
	public LogService getLogService() {
		return logService;
	}
	public void setLogService(LogService logService) {
		this.logService = logService;
	}
	public NewsService getNewsService() {
		return newsService;
	}
	public void setNewsService(NewsService newsService) {
		this.newsService = newsService;
	}
	public NewsAttachmentService getNewsAttachmentService() {
		return newsAttachmentService;
	}
	public void setNewsAttachmentService(NewsAttachmentService newsAttachmentService) {
		this.newsAttachmentService = newsAttachmentService;
	}
	public ResourceService getResourceService() {
		return resourceService;
	}
	public void setResourceService(ResourceService resourceServ
@Component
public class SyncHandlerFactory {
	@Autowired
	private StorageSyncHandler storageSyncHandler;
	@Autowired
	private AddressRangeSyncHandler addressRangeSyncHandler;
	@Autowired
	private CloudSyncHandler cloudSyncHandler;
	@Autowired
	private CredentialSyncHandler credentialSyncHandler;
	public AddressRangeSyncHandler getAddressRangeSyncHandler() {
		return addressRangeSyncHandler;
	}
	public void setAddressRangeSyncHandler(AddressRangeSyncHandler addressRangeSyncHandler) {
		this.addressRangeSyncHandler = addressRangeSyncHandler;
	}
	public CloudSyncHandler getCloudSyncHandler() {
		return cloudSyncHandler;
	}
	public void setCloudSyncHandler(CloudSyncHandler cloudSyncHandler) {
		this.cloudSyncHandler = cloudSyncHandler;
	}
	public CredentialSyncHandler getCredentialSyncHandler() {
		return credentialSyncHandler;
	}
	public void setCredentialSyncHandler(CredentialSyncHandler credentialSyncHandler) {
		this.credentialSyncHandler = credentialSyncHandler;
	}
	public ImageSyncHa

		return imageSyncHandler;
	}
	public void setImageSyncHandler(ImageSyncHandler imageSyncHandler) {
		this.imageSyncHandler = imageSyncHandler;
	}
	public InstanceSyncHandler getInstanceSyncHandler() {
		return instanceSyncHandler;
	}
	public void setInstanceSyncHandler(InstanceSyncHandler instanceSyncHandler) {
		this.instanceSyncHandler = instanceSyncHandler;
	}
	public LocationSyncHandler getLocationSyncHandler() {
		return locationSyncHandler;
	}
	public void setLocationSyncHandler(LocationSyncHandler locationSyncHandler) {
		this.locationSyncHandler = locationSyncHandler;
	}
	public ModelSyncHandler getModelSyncHandler() {
		return modelSyncHandler;
	}
	public void setModelSyncHandler(ModelSyncHandler modelSyncHandler) {
		this.modelSyncHandler = modelSyncHandler;
	}
	public NetworkSyncHandler getNetworkSyncHandler() {
		return networkSyncHandler;
	}
	public void setNetworkSyncHandler(NetworkSyncHandler networkSyncHandler) {
		this.networkSyncHandler = networkSyncHandler;
	}
	pub
@Component
public class UnitOfWork  implements IUnitOfWork {
	private Session session;
	private Transaction transaction;
	private ICityRepository cityRepository;
	private IRoleRepository roleRepository;
	private IUserRepository userRepository;
	private IExpertAgencyRepository expertAgencyRepository;
	private ICountryRepository countryRepository;
	private IDistrictRepository districtRepository;
	private IStateRepository stateRepository;
	private IApplianceRepository applianceRepository;
	private IEstateRepository estateRepository;
	private IEstateFeatureRepository estateFeatureRepository;
	private IImageRepository imageRepository;
	private INearbyFacilityRepository nearbyFacilityRepository;
	private IPieceRepository pieceRepository;
	private IUnitRepository unitRepository;
	private IAvailableTimeRepository availableTimeRepository;
	private IBookedTimeRepository bookedTimeRepository;
	private IOfferRepository offerRepository;
	private IRepresenterRepository representerRepository;
	privat

	private IRETypeRepository rETypeRepository;
	public UnitOfWork() {
		this.session = HibernateUtility.getSessionFactory().openSession();
		this.transaction = session.beginTransaction();
	}
	@Override
	public void close() {
		this.session.close();
	}
	@Override
	public void commit() {
		this.transaction.commit();
		close();
	}
	@Override
	public void rollback() {
		this.transaction.rollback();
		close();
	}
	public Session getSession() {
		return session;
	}
	public void setSession(Session session) {
		this.session = session;
	}
	public Transaction getTransaction() {
		return transaction;
	}
	public void setTransaction(Transaction transaction) {
		this.transaction = transaction;
	}
	@Override
	public ICityRepository getCityRepository() {
		return cityRepository;
	}
	@Autowired
	public void setCityRepository(ICityRepository cityRepository) {
		this.cityRepository = cityRepository;
		this.cityRepository.setObject(this.session);
	}
	@Override
	public IRoleRepository getRoleRepository() {


	}
	@Autowired
	public void setRoleRepository(IRoleRepository roleRepository) {
		this.roleRepository = roleRepository;
		this.roleRepository.setObject(this.session);
	}
	@Override
	public IUserRepository getUserRepository() {
		return userRepository;
	}
	@Autowired
	public void setUserRepository(IUserRepository userRepository) {
		this.userRepository = userRepository;
		this.userRepository.setObject(this.session);
	}
	@Override
	public IExpertAgencyRepository getExpertAgencyRepository() {
		return expertAgencyRepository;
	}
	@Autowired
	public void setExpertAgencyRepository(
			IExpertAgencyRepository expertAgencyRepository) {
		this.expertAgencyRepository = expertAgencyRepository;
		this.expertAgencyRepository.setObject(this.session);
	}
	@Override
	public ICountryRepository getCountryRepository() {
		return countryRepository;
	}
	@Autowired
	public void setCountryRepository(ICountryRepository countryRepository) {
		this.countryRepository = countryRepository;
		this.countryRepositor

	}
	@Override
	public IDistrictRepository getDistrictRepository() {
		return districtRepository;
	}
	@Autowired
	public void setDistrictRepository(IDistrictRepository districtRepository) {
		this.districtRepository = districtRepository;
		this.districtRepository.setObject(this.session);
	}
	@Override
	public IStateRepository getStateRepository() {
		return stateRepository;
	}
	@Autowired
	public void setStateRepository(IStateRepository stateRepository) {
		this.stateRepository = stateRepository;
		this.stateRepository.setObject(this.session);
	}
	@Override
	public IApplianceRepository getApplianceRepository() {
		return applianceRepository;
	}
	@Autowired
	public void setApplianceRepository(IApplianceRepository applianceRepository) {
		this.applianceRepository = applianceRepository;
		this.applianceRepository.setObject(this.session);
	}
	@Override
	public IEstateRepository getEstateRepository() {
		return estateRepository;
	}
	@Autowired
	public void setEstateRepository(IEstateReposit

		this.estateRepository = estateRepository;
		this.estateRepository.setObject(this.session);
	}
	@Override
	public IEstateFeatureRepository getEstateFeatureRepository() {
		return estateFeatureRepository;
	}
	@Autowired
	public void setEstateFeatureRepository(
			IEstateFeatureRepository estateFeatureRepository) {
		this.estateFeatureRepository = estateFeatureRepository;
		this.estateFeatureRepository.setObject(this.session);
	}
	@Override
	public IImageRepository getImageRepository() {
		return imageRepository;
	}
	@Autowired
	public void setImageRepository(IImageRepository imageRepository) {
		this.imageRepository = imageRepository;
		this.imageRepository.setObject(this.session);
	}
	@Override
	public INearbyFacilityRepository getNearbyFacilityRepository() {
		return nearbyFacilityRepository;
	}
	@Autowired
	public void setNearbyFacilityRepository(
			INearbyFacilityRepository nearbyFacilityRepository) {
		this.nearbyFacilityRepository = nearbyFacilityRepository;
		this.nearbyFacili

	}
	@Override
	public IPieceRepository getPieceRepository() {
		return pieceRepository;
	}
	@Autowired
	public void setPieceRepository(IPieceRepository pieceRepository) {
		this.pieceRepository = pieceRepository;
		this.pieceRepository.setObject(this.session);
	}
	@Override
	public IUnitRepository getUnitRepository() {
		return unitRepository;
	}
	@Autowired
	public void setUnitRepository(IUnitRepository unitRepository) {
		this.unitRepository = unitRepository;
		this.unitRepository.setObject(this.session);
	}
	@Override
	public IAvailableTimeRepository getAvailableTimeRepository() {
		return availableTimeRepository;
	}
	@Autowired
	public void setAvailableTimeRepository(
			IAvailableTimeRepository availableTimeRepository) {
		this.availableTimeRepository = availableTimeRepository;
		this.availableTimeRepository.setObject(this.session);
	}
	@Override
	public IBookedTimeRepository getBookedTimeRepository() {
		return bookedTimeRepository;
	}
	@Autowired
	public void setBookedTimeRepos

		this.bookedTimeRepository = bookedTimeRepository;
		this.bookedTimeRepository.setObject(this.session);
	}
	@Override
	public IOfferRepository getOfferRepository() {
		return offerRepository;
	}
	@Autowired
	public void setOfferRepository(IOfferRepository offerRepository) {
		this.offerRepository = offerRepository;
		this.offerRepository.setObject(this.session);
	}
	@Override
	public IRepresenterRepository getRepresenterRepository() {
		return representerRepository;
	}
	@Autowired
	public void setRepresenterRepository(
			IRepresenterRepository representerRepository) {
		this.representerRepository = representerRepository;
		this.representerRepository.setObject(this.session);
	}
	@Override
	public ISellingOfferRepository getSellingOfferRepository() {
		return sellingOfferRepository;
	}
	@Autowired
	public void setSellingOfferRepository(
			ISellingOfferRepository sellingOfferRepository) {
		this.sellingOfferRepository = sellingOfferRepository;
		this.sellingOfferRepository.setObject(t
/**
 *
 * @author brad
 */
public class Http11Protocol implements HttpExtension{
    private final Set<Handler> handlers;
    public Http11Protocol( Set<Handler> handlers ) {
        this.handlers = handlers;
    }
    /**
     * OPTIONS authentication is disabled by default
     *
     * @param responseHandler
     * @param handlerHelper
     */
    public Http11Protocol(Http11ResponseHandler responseHandler, HandlerHelper handlerHelper) {
        this(responseHandler, handlerHelper, false );
    }
    public Http11Protocol(Http11ResponseHandler responseHandler, HandlerHelper handlerHelper, boolean enableOptionsAuth) {
        this.handlers = new HashSet<Handler>();
        handlers.add(new OptionsHandler(responseHandler, handlerHelper, enableOptionsAuth));
        handlers.add(new GetHandler(responseHandler, handlerHelper));
        handlers.add(new PostHandler(responseHandler, handlerHelper));
        handlers.add(new DeleteHandler(responseHandler, handlerHelper));
        handlers.
/**
 * 권한관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성 
 *
 * </pre>
 */
@Repository("authorManageDAO")
public class AuthorManageDAO extends EgovAbstractDAO {
    /**
	 * 권한목록을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return List<AuthorManageVO>
	 * @exception Exception
	 */
    @SuppressWarnings("unchecked")
	public List<AuthorManageVO> selectAuthorList(AuthorManageVO authorManageVO) throws Exception {
        return list("authorManageDAO.selectAuthorList", authorManageVO);
    }
	/**
	 * 권한을 등록한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void insertAuthor(AuthorManage authorManage) throws Exception {
        insert("authorManageDAO.insertAuthor", authorManage);

    }
    /**
	 * 권한을 수정한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void updateAuthor(AuthorManage authorManage) throws Exception {
        update("authorManageDAO.updateAuthor", authorManage);
    }
    /**
	 * 권한을 삭제한다.
	 * @param authorManage AuthorManage
	 * @exception Exception
	 */
    public void deleteAuthor(AuthorManage authorManage) throws Exception {
        delete("authorManageDAO.deleteAuthor", authorManage);
    }
    /**
	 * 권한을 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return AuthorManageVO
	 * @exception Exception
	 */
    public AuthorManageVO selectAuthor(AuthorManageVO authorManageVO) throws Exception {
        return (AuthorManageVO) selectByPk("authorManageDAO.selectAuthor", authorManageVO);
    }
    /**
	 * 권한목록 총 갯수를 조회한다.
	 * @param authorManageVO AuthorManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectAuthorListTotCnt(AuthorManageVO authorManageVO)  throws Exception {
        return (I

