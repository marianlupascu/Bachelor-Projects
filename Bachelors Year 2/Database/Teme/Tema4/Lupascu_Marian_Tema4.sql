SELECT * FROM STUDENT;
SELECT * FROM FACULTY;
SELECT * FROM COURSE;
SELECT * FROM COURSE_SECTION;
SELECT * FROM ENROLLMENT;
SELECT * FROM LOCATION;
SELECT * FROM T;
SELECT * FROM TERM;

--1
--Sã se determine numele studenþilor pentru care toate notele sunt cunoscutE.
SELECT S.S_ID, S.S_LAST, S.S_FIRST
FROM STUDENT S
WHERE (SELECT COUNT(1) FROM ENROLLMENT E WHERE E.S_ID = S.S_ID AND E.GRADE IS NULL) = 0
;

--2
--Sã se afiºeze codul clãdirilor pentru care toate locaþiile corespunzãtoare se regãsesc în tabelul COURSE_SECTION.
SELECT DISTINCT L.BLDG_CODE
FROM LOCATION L
WHERE EXISTS (SELECT 1 FROM COURSE_SECTION C WHERE C.LOC_ID = L.LOC_ID)
;

--3
--Determinaþi profesorii care îndeplinesc atât condiþia cã sunt coordonatori ai unui student care a obþinut o notã „A”, 
--cât ºi pe cea cã þin un curs de baze de date. Se vor afiºa codul ºi numele profesorului.
SELECT DISTINCT F.F_ID, F.F_FIRST, F.F_LAST, C.COURSE_NAME
FROM FACULTY F
JOIN COURSE_SECTION CS ON (F.F_ID = CS.F_ID)
JOIN COURSE C ON (CS.COURSE_NO = C.COURSE_NO)
WHERE C.COURSE_NAME = 'Database Management' AND EXISTS (
SELECT 1 FROM STUDENT S 
JOIN ENROLLMENT E ON (E.S_ID = S.S_ID)
WHERE S.F_ID=F.F_ID AND E.GRADE = 'A'
);

--4
--Determinaþi numele profesoruloui cãruia îi corespunde cursul cu numãr maxim de studenþi sau care se desfãºoarã în locaþia de
--capacitate maximã.
SELECT DISTINCT F.F_ID, F.F_FIRST, F.F_LAST, C.COURSE_NAME, L.CAPACITY, CS.MAX_ENRL
FROM FACULTY F
JOIN COURSE_SECTION CS ON (CS.F_ID = F.F_ID)
JOIN COURSE C ON (CS.COURSE_NO = C.COURSE_NO)
JOIN LOCATION L ON (CS.LOC_ID = L.LOC_ID)
WHERE L.CAPACITY = (SELECT MAX(CAPACITY) FROM LOCATION) OR 
CS.MAX_ENRL = (SELECT MAX(MAX_ENRL) FROM COURSE_SECTION)
;

--5
--Sã se gãseascã profesorii care au biroul într-o locaþie cu capacitate minimã ºi au predat cursul cu numãrul minim de locuri 
--dintre cursurile desfãºurate în locaþia cu capacitate maximã.
SELECT DISTINCT F.F_ID, F.F_FIRST, F.F_LAST, C.COURSE_NAME, CS.MAX_ENRL
FROM FACULTY F
JOIN COURSE_SECTION CS ON (CS.F_ID = F.F_ID)
JOIN COURSE C ON (CS.COURSE_NO = C.COURSE_NO)
JOIN LOCATION L ON (F.LOC_ID = L.LOC_ID)
WHERE L.CAPACITY = (SELECT MIN(CAPACITY) FROM LOCATION) AND
CS.MAX_ENRL = (SELECT MIN(MAX_ENRL) FROM (SELECT MAX_ENRL FROM COURSE_SECTION WHERE LOC_ID IN 
(SELECT LOC_ID FROM LOCATION WHERE CAPACITY = (SELECT MAX(CAPACITY) FROM LOCATION))))
;

--6
--Sã se afle media (avg) a urmãtoarelor valori: capacitatea sãlilor (distincte) unde a þinut curs profesorul Teresa Marx ºi 
--numãrul de locuri de la cursurile frecventate de studentul Jones Tammy.
SELECT (SELECT AVG(CAPACITY) FROM LOCATION WHERE LOC_ID IN (
SELECT DISTINCT L.LOC_ID FROM LOCATION L JOIN COURSE_SECTION CS ON (CS.LOC_ID = L.LOC_ID) JOIN FACULTY F ON (F.F_ID = CS.F_ID)
WHERE UPPER(F.F_FIRST) LIKE 'TERESA' AND UPPER(F.F_LAST) LIKE 'MARX')) "MEDIE"
FROM DUAL;

SELECT (SELECT AVG(MAX_ENRL) FROM COURSE_SECTION WHERE C_SEC_ID IN (
SELECT DISTINCT CS.C_SEC_ID 
FROM COURSE_SECTION CS JOIN ENROLLMENT E ON (E.C_SEC_ID = CS.C_SEC_ID) JOIN STUDENT S ON (S.S_ID = E.S_ID) 
WHERE UPPER(S.S_FIRST) LIKE 'TAMMY' AND UPPER(S.S_LAST) LIKE 'JONES')) "MEDIE"
FROM DUAL;

--7
--Determinaþi media capacitãþilor sãlilor din fiecare clãdire în care s-a desfãºurat un curs al cãrui nume conþine cuvântul 
--„Systems”. Se vor afiºa codul clãdirii ºi media capacitãþilor corespunzãtoare.

SELECT L.BLDG_CODE, (SELECT AVG(CAPACITY) FROM LOCATION WHERE BLDG_CODE = L.BLDG_CODE)
FROM LOCATION L
JOIN COURSE_SECTION CS ON (L.LOC_ID = CS.LOC_ID)
JOIN COURSE C ON (C.COURSE_NO = CS.COURSE_NO)
WHERE LOWER(C.COURSE_NAME) LIKE '%systems%'
GROUP BY L.BLDG_CODE
;

--8
--Enunþul problemei 21 + media capacitãþilor sãlilor din toate clãdirile în care s-a desfãºurat un curs al cãrui 
--nume conþine cuvântul „Systems”.
SELECT DISTINCT L.BLDG_CODE, (SELECT AVG(CAPACITY) FROM LOCATION WHERE BLDG_CODE = L.BLDG_CODE)
FROM LOCATION L
WHERE EXISTS (SELECT 1 FROM COURSE_SECTION C WHERE C.LOC_ID = L.LOC_ID)
GROUP BY L.BLDG_CODE;

--9
--Sã se determine cursurile al cãror nume conþine cuvântul „Java”; dacã nu existã, se cer toate cursurile din baza de date. 
--Se vor afiºa codul ºi denumirea cursului.
SELECT C.COURSE_NO, C.COURSE_NAME
FROM COURSE C
WHERE EXISTS (SELECT 1 FROM COURSE WHERE UPPER(COURSE_NAME) LIKE '%JAVA%')
UNION 
SELECT C.COURSE_NO, C.COURSE_NAME
FROM COURSE C
WHERE NOT EXISTS (SELECT 1 FROM COURSE WHERE UPPER(COURSE_NAME) LIKE '%JAVA%') AND UPPER(COURSE_NAME) LIKE '%DATABASE%'
;

--10
--Sã se afle cursurile care îndeplinesc cel puþin 3 dintre criteriile urmãtoare: 
-- - au fost þinute într-o salã de capacitate 42;
-- - au fost predate de profesorul Brown;
-- - au fost frecventate de studentul Tammy Jones;
-- - numele conþine ºirul de caractere „Database”;
-- - au fost predate în semestre începute în anul 2007.

CREATE VIEW CAPACITATE42 AS
SELECT DISTINCT C.COURSE_NO
FROM COURSE C
JOIN COURSE_SECTION CS ON (C.COURSE_NO = CS.COURSE_NO)
JOIN LOCATION L ON (L.LOC_ID = CS.LOC_ID)
WHERE L.CAPACITY = 42
;

CREATE VIEW PROFBROWN AS
SELECT DISTINCT CS.COURSE_NO
FROM COURSE_SECTION CS
JOIN FACULTY F ON (F.F_Id = CS.F_ID)
WHERE UPPER(F.F_LAST) = 'BROWN'
;

CREATE VIEW FRECVENTATASTUDENT AS
SELECT DISTINCT CS.COURSE_NO
FROM COURSE_SECTION CS
JOIN ENROLLMENT E ON (E.C_SEC_ID = CS.C_SEC_ID)
JOIN STUDENT S ON (S.S_ID = E.S_ID)
WHERE UPPER(S.S_LAST) = 'JONES' AND UPPER(S.S_FIRST) = 'TAMMY'
;

CREATE VIEW NAMEDATABASE AS
SELECT DISTINCT C.COURSE_NO
FROM COURSE C
WHERE UPPER(C.COURSE_NAME) LIKE '%DATABASE%'
;

CREATE VIEW DUPA2007 AS
SELECT DISTINCT CS.COURSE_NO
FROM COURSE_SECTION CS
JOIN TERM T ON (T.TERM_ID = CS.TERM_ID)
WHERE T.START_DATE < TO_DATE('01/01/2007', 'DD/MM/YYYY')
;

SELECT *
FROM COURSE C 
WHERE 
(C.COURSE_NO IN (SELECT DISTINCT C.COURSE_NO
FROM COURSE C
JOIN COURSE_SECTION CS ON (C.COURSE_NO = CS.COURSE_NO)
JOIN LOCATION L ON (L.LOC_ID = CS.LOC_ID)
WHERE L.CAPACITY = 42) 
AND 
C.COURSE_NO IN (SELECT DISTINCT CS.COURSE_NO
FROM COURSE_SECTION CS
JOIN FACULTY F ON (F.F_Id = CS.F_ID)
WHERE UPPER(F.F_LAST) = 'BROWN')
AND
C.COURSE_NO IN (SELECT DISTINCT CS.COURSE_NO
FROM COURSE_SECTION CS
JOIN ENROLLMENT E ON (E.C_SEC_ID = CS.C_SEC_ID)
JOIN STUDENT S ON (S.S_ID = E.S_ID)
WHERE UPPER(S.S_LAST) = 'JONES' AND UPPER(S.S_FIRST) = 'TAMMY'))
OR (
C.COURSE_NO IN (SELECT DISTINCT C.COURSE_NO
FROM COURSE C
JOIN COURSE_SECTION CS ON (C.COURSE_NO = CS.COURSE_NO)
JOIN LOCATION L ON (L.LOC_ID = CS.LOC_ID)
WHERE L.CAPACITY = 42) 
AND 
C.COURSE_NO IN (SELECT DISTINCT CS.COURSE_NO
FROM COURSE_SECTION CS
JOIN FACULTY F ON (F.F_Id = CS.F_ID)
WHERE UPPER(F.F_LAST) = 'BROWN')
AND
C.COURSE_NO IN (SELECT DISTINCT C.COURSE_NO
FROM COURSE C
WHERE UPPER(C.COURSE_NAME) LIKE '%DATABASE%')
) OR (
C.COURSE_NO IN (SELECT DISTINCT C.COURSE_NO
FROM COURSE C
JOIN COURSE_SECTION CS ON (C.COURSE_NO = CS.COURSE_NO)
JOIN LOCATION L ON (L.LOC_ID = CS.LOC_ID)
WHERE L.CAPACITY = 42) 
AND 
C.COURSE_NO IN (SELECT DISTINCT CS.COURSE_NO
FROM COURSE_SECTION CS
JOIN FACULTY F ON (F.F_Id = CS.F_ID)
WHERE UPPER(F.F_LAST) = 'BROWN')
AND
C.COURSE_NO IN (SELECT DISTINCT CS.COURSE_NO
FROM COURSE_SECTION CS
JOIN TERM T ON (T.TERM_ID = CS.TERM_ID)
WHERE T.START_DATE < TO_DATE('01/01/2007', 'DD/MM/YYYY'))
) OR (
C.COURSE_NO IN (SELECT DISTINCT CS.COURSE_NO
FROM COURSE_SECTION CS
JOIN FACULTY F ON (F.F_Id = CS.F_ID)
WHERE UPPER(F.F_LAST) = 'BROWN')
AND
C.COURSE_NO IN (SELECT DISTINCT CS.COURSE_NO
FROM COURSE_SECTION CS
JOIN ENROLLMENT E ON (E.C_SEC_ID = CS.C_SEC_ID)
JOIN STUDENT S ON (S.S_ID = E.S_ID)
WHERE UPPER(S.S_LAST) = 'JONES' AND UPPER(S.S_FIRST) = 'TAMMY')
AND
C.COURSE_NO IN (SELECT DISTINCT C.COURSE_NO
FROM COURSE C
WHERE UPPER(C.COURSE_NAME) LIKE '%DATABASE%')
) OR (
C.COURSE_NO IN (SELECT DISTINCT CS.COURSE_NO
FROM COURSE_SECTION CS
JOIN FACULTY F ON (F.F_Id = CS.F_ID)
WHERE UPPER(F.F_LAST) = 'BROWN')
AND
C.COURSE_NO IN (SELECT DISTINCT CS.COURSE_NO
FROM COURSE_SECTION CS
JOIN ENROLLMENT E ON (E.C_SEC_ID = CS.C_SEC_ID)
JOIN STUDENT S ON (S.S_ID = E.S_ID)
WHERE UPPER(S.S_LAST) = 'JONES' AND UPPER(S.S_FIRST) = 'TAMMY')
AND
C.COURSE_NO IN (SELECT DISTINCT CS.COURSE_NO
FROM COURSE_SECTION CS
JOIN TERM T ON (T.TERM_ID = CS.TERM_ID)
WHERE T.START_DATE < TO_DATE('01/01/2007', 'DD/MM/YYYY'))
) OR (
C.COURSE_NO IN (SELECT DISTINCT CS.COURSE_NO
FROM COURSE_SECTION CS
JOIN ENROLLMENT E ON (E.C_SEC_ID = CS.C_SEC_ID)
JOIN STUDENT S ON (S.S_ID = E.S_ID)
WHERE UPPER(S.S_LAST) = 'JONES' AND UPPER(S.S_FIRST) = 'TAMMY')
AND 
C.COURSE_NO IN (SELECT DISTINCT C.COURSE_NO
FROM COURSE C
WHERE UPPER(C.COURSE_NAME) LIKE '%DATABASE%')
AND
C.COURSE_NO IN (SELECT DISTINCT CS.COURSE_NO
FROM COURSE_SECTION CS
JOIN TERM T ON (T.TERM_ID = CS.TERM_ID)
WHERE T.START_DATE < TO_DATE('01/01/2007', 'DD/MM/YYYY'))
)
;

--11
--Determinaþi semestrele în care s-au þinut cele mai multe cursuri de baze de date (ºirul „Database” face parte din numele 
--cursului). Afiºaþi denumirea semestrului ºi numãrul de astfel de cursuri.
SELECT DISTINCT T.TERM_DESC, T.TERM_ID, (SELECT COUNT(1) FROM (SELECT CS.TERM_ID FROM COURSE_SECTION CS JOIN COURSE C ON (C.COURSE_NO = CS.COURSE_NO) 
WHERE UPPER(C.COURSE_NAME) LIKE '%DATABASE%' GROUP BY CS.TERM_ID)) "NUMAR CURSURI"
FROM TERM T
JOIN COURSE_SECTION CS ON (CS.TERM_ID = T.TERM_ID)
WHERE (SELECT COUNT(1) FROM COURSE_SECTION CS JOIN COURSE C ON (C.COURSE_NO = CS.COURSE_NO) 
WHERE CS.TERM_ID = T.TERM_ID AND UPPER(C.COURSE_NAME) LIKE '%DATABASE%') = 
(SELECT COUNT(1) FROM (SELECT CS.TERM_ID FROM COURSE_SECTION CS JOIN COURSE C ON (C.COURSE_NO = CS.COURSE_NO) 
WHERE UPPER(C.COURSE_NAME) LIKE '%DATABASE%' GROUP BY CS.TERM_ID)) GROUP BY T.TERM_DESC, T.TERM_ID;

--12
--Determinaþi nota pe care au obþinut-o cel puþin o datã cei mai mulþi studenþi. Afiºaþi nota ºi numãrul de studenþi.
SELECT * FROM (
SELECT E.GRADE,
    CASE
        WHEN E.GRADE = 'A' THEN 
        (SELECT COUNT(1) FROM (SELECT S_ID, GRADE FROM ENROLLMENT WHERE GRADE IS NOT NULL AND GRADE = 'A' GROUP BY S_ID, GRADE))
        WHEN E.GRADE = 'B' THEN 
        (SELECT COUNT(1) FROM (SELECT S_ID, GRADE FROM ENROLLMENT WHERE GRADE IS NOT NULL AND GRADE = 'B' GROUP BY S_ID, GRADE))
        WHEN E.GRADE = 'C' THEN 
        (SELECT COUNT(1) FROM (SELECT S_ID, GRADE FROM ENROLLMENT WHERE GRADE IS NOT NULL AND GRADE = 'C' GROUP BY S_ID, GRADE))
    END "NUMAR_STUDENTI"
FROM ENROLLMENT E
WHERE E.GRADE IS NOT NULL
GROUP BY E.GRADE)
WHERE NUMAR_STUDENTI IN (SELECT MAX(NUMAR_STUDENTI) FROM (
SELECT E.GRADE,
    CASE
        WHEN E.GRADE = 'A' THEN 
        (SELECT COUNT(1) FROM (SELECT S_ID, GRADE FROM ENROLLMENT WHERE GRADE IS NOT NULL AND GRADE = 'A' GROUP BY S_ID, GRADE))
        WHEN E.GRADE = 'B' THEN 
        (SELECT COUNT(1) FROM (SELECT S_ID, GRADE FROM ENROLLMENT WHERE GRADE IS NOT NULL AND GRADE = 'B' GROUP BY S_ID, GRADE))
        WHEN E.GRADE = 'C' THEN 
        (SELECT COUNT(1) FROM (SELECT S_ID, GRADE FROM ENROLLMENT WHERE GRADE IS NOT NULL AND GRADE = 'C' GROUP BY S_ID, GRADE))
    END "NUMAR_STUDENTI"
FROM ENROLLMENT E
WHERE E.GRADE IS NOT NULL
GROUP BY E.GRADE
));

--13
--Afiºaþi semestrele în care numãrul de materii predate, având 3 credite, a fost maxim.
SELECT T.TERM_ID, T.TERM_DESC, (SELECT COUNT(1) FROM
(SELECT DISTINCT CS.TERM_ID FROM COURSE_SECTION CS JOIN COURSE C ON (C.COURSE_NO = CS.COURSE_NO) 
WHERE C.CREDITS = 3 GROUP BY CS.TERM_ID)) "NUMAR CURSURI"
FROM TERM T
WHERE (SELECT COUNT(1) FROM
(SELECT DISTINCT CS.COURSE_NO, CS.TERM_ID FROM COURSE_SECTION CS JOIN COURSE C ON (C.COURSE_NO = CS.COURSE_NO) 
WHERE C.CREDITS = 3) WHERE T.TERM_ID = TERM_ID) = (SELECT COUNT(1) FROM
(SELECT DISTINCT CS.TERM_ID FROM COURSE_SECTION CS JOIN COURSE C ON (C.COURSE_NO = CS.COURSE_NO) 
WHERE C.CREDITS = 3 GROUP BY CS.TERM_ID)) GROUP BY T.TERM_ID, T.TERM_DESC
;

--14
--Determinaþi locaþiile în care au avut loc atât cursuri de baze de date, cât ºi cursuri de C++.
SELECT DISTINCT L.LOC_ID, L.BLDG_CODE FROM LOCATION L
JOIN COURSE_SECTION CS ON (L.LOC_ID = CS.LOC_ID)
JOIN COURSE C ON (C.COURSE_NO = CS.COURSE_NO)
WHERE UPPER(C.COURSE_NAME) LIKE '%C++%'
INTERSECT
SELECT DISTINCT L.LOC_ID, L.BLDG_CODE FROM LOCATION L
JOIN COURSE_SECTION CS ON (L.LOC_ID = CS.LOC_ID)
JOIN COURSE C ON (C.COURSE_NO = CS.COURSE_NO)
WHERE UPPER(C.COURSE_NAME) LIKE '%DATABASE%'
;

--15
--Afiºaþi clãdirile care gãzduiesc o singurã locaþie (se considerã atât locaþiile în care au 
--loc cursuri, cât ºi cele corespunzãtoare birourilor profesorilor).
SELECT DISTINCT L.BLDG_CODE
FROM LOCATION L
WHERE (SELECT COUNT(1) FROM (SELECT LOC_ID FROM FACULTY) WHERE LOC_ID = L.LOC_ID AND 
LOC_ID IN (SELECT LOC_ID FROM LOCATION WHERE BLDG_CODE = L.BLDG_CODE)) + 
(SELECT COUNT(1) FROM (SELECT LOC_ID FROM COURSE_SECTION) WHERE LOC_ID = L.LOC_ID AND 
LOC_ID IN (SELECT LOC_ID FROM LOCATION WHERE BLDG_CODE = L.BLDG_CODE))= 1
;