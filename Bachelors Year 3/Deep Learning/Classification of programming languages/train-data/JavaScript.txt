var nav__drop_8h =
    [ "NavDropAligned", "nav__drop_8h.html#aa5f82371a90592d2e1bc26a5a8a0e2a9", null ],
    [ "NavDropCloseHatch", "nav__drop_8h.html#a587bf7d4a842e769c5c865d19fd31d8e", null ],
    [ "NavDropComputeApproach", "nav__drop_8h.html#ac9cb0754e785ce74d50e83ee4fdcb6d0", null ],
    [ "NavDropShoot", "nav__drop_8h.html#a4529b8a7a5a48feb03bcf1611dcfdec6", null ],
    [ "NavDropUpdateRelease", "nav__drop_8h.html#a0afc3fc4b72b658b6bff7826116db8ee", null ],
    [ "compute_alignment", "nav__drop_8h.html#ab242b1072e38faf0e67e1da07e00f9ab", null ],
    [ "nav_drop_compute_approach", "nav__drop_8h.html#a109ae5e49434646c14e55174b80f1c23", null ],
    [ "nav_drop_shoot", "nav__drop_8h.html#a0e9ac240f39dc33492426056b1299227", null ],
    [ "nav_drop_update_release", "nav__drop_8h.html#ab65dbfc40970aaba82469b775a829995", null ],
    [ "nav_drop_start_qdr", "nav__drop_8h.html#a833c2bc4de81c7daf803571457ac1d30", null ],
    [ "nav_drop_trigger_delay", "nav__drop_8h.html#a30c0e5e0fbaf12b13
/**
 *
 * Created by Frank on 15/6/26.
 */
'use strict';
var auth = require('../../middleware/auth');
var user = require('../../api/v1/user.api');
module.exports = function (api) {
    /**
     * @apiDefine ClientRequestError
     * @apiError {String} error 错误信息
     *
     */
    /**
     * @api {get} /api/v1/profile 获取当前用户信息
     * @apiName GetUserProfile
     * @apiGroup User
     * @apiVersion 0.0.1
     * @apiHeader {String} Authorization Json web token
     * @apiPermission 认证用户
     *
     * @apiSuccess {String} _id 用户ID
     * @apiSuccess {String} username 用户名
     * @apiSuccess {String} displayName 真实姓名
     * @apiSuccess {String} gender 性别
     * @apiSuccess {String} avatar 用户头像URL (相对URL)
     * @apiSuccess {String} phone 用户电话
     * @apiSuccess {String} parent 家长名字
     * @apiSuccess {String} onSchool 用户所在公办学校
     * @apiSuccess {String} grade 年级
     * @apiSuccess {Number} finishedHomeworkCount 完成作业数
     * @apiSuccess {Number} finishedPreviewsCount 完成预习数
     *
     * @ap

     *
     *
     */
    api.get('/profile', auth.getUserByToken, user.profile);
    /**
     * @api {post} /api/v1/public/bind 微信绑定
     * @apiName BindWeixin
     * @apiGroup User
     * @apiVersion 0.0.1
     * @apiPermission public
     * @apiParam {string} username 用户名
     * @apiParam {String} password 密码
     * @apiParam {String} code 微信验证码
     * @apiUse ClientRequestError
     * @apiSuccess {String} response Json web token
     * @apiSuccessExample 成功响应示例
     *     HTTP/1.1 200 OK
     *     xxxxxx
     *
     */
    api.post('/public/bind', user.bind);
    /**
     * @api {post} /api/v1/unbind 解除绑定
     * @apiName BindWeixin
     * @apiGroup User
     * @apiVersion 0.0.1
     * @apiPermission public
     * @apiUse ClientRequestError
     * @apiSuccess {String} response Json web token
     * @apiSuccessExample 成功响应示例
     *     HTTP/1.1 200 OK
     *
     */
    api.post('/unbind', user.unbind);
    /**
     * @api {get} /api/v1/public/auth 微信认证
     * @apiName AuthWeixin
 

     * @apiVersion 0.0.1
     * @apiPermission public
     * @apiParam {String} code 微信验证码
     * @apiUse ClientRequestError
     * @apiSuccess {String} response Json web token
     * @apiSuccessExample 成功响应示例
     *     HTTP/1.1 200 OK
     *     xxxxxx
     *
     */
    api.get('/public/auth', auth.getOpenidToken, user.auth);
    /**
     * @api {put} /api/v1/profile 修改当前用户信息
     * @apiName UpdateUserProfile
     * @apiGroup User
     * @apiVersion 0.0.1
     * @apiHeader {String} Authorization Json web token
     * @apiPermission 认证用户
     *
     * @apiParam {String} displayName 真实姓名
     * @apiParam {String} gender 性别
     * @apiParam {String} phone 用户电话
     * @apiParam {String} parent 家长名字
     * @apiParam {String} onSchool 用户所在公办学校
     * @apiParam {String} grade 年级
     *
     * @apiUse ClientRequestError
     * @apiSuccessExample 成功响应示例
     *     HTTP/1.1 200 OK
     *
     *
     */
    api.put('/profile', user.update);
    /**
     * @api {put} /api/v1/avatar 修改当前用户头像
  
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
var AEntity_1 = require("./Entity/AEntity");
exports.Model = AEntity_1.Model;
var UrlService_1 = require("./service/UrlService");
exports.UrlService = UrlService_1.UrlService;
var AjaxService_1 = require("./service/AjaxService");
exports.AjaxService = AjaxService_1.AjaxService;
var EntityManager_1 = require("./service/EntityManager");
exports.EntityManager = EntityManager_1.EntityManager;
var Flashmessage_1 = require("./service/Flashmessage");
exports.FlashmessageService = Flashmessage_1.FlashmessageService;
var RepositoryService_1 = require("./service/RepositoryService");
exports.RepositoryService = RepositoryService_1.RepositoryService;
var StorageService_1 = require("./service/StorageService");
exports.StorageService = StorageService_1.StorageService;
var AuthService_1 = require("./service/AuthService");
exports.AuthService = AuthService_1.AuthService;
__export(require("./ser
Package.describe({
  summary: "A reactive router built on page.js"
});
Npm.depends({
  'connect': '2.7.10'
});
Package.on_use(function (api, where) {
  api.use('deps', 'client');
  api.use('startup', 'client');
  api.use('templating', 'client');
  api.use('handlebars', 'client');
  api.use('page-js-ie-support', 'client');
  api.use('underscore', ['client', 'server']);
  
  api.add_files('lib/router_client.js', 'client');
  api.add_files('lib/router_helpers.js', 'client');
  api.add_files('lib/router_server.js', 'server');
  api.add_files('lib/router_common.js', ['client', 'server']);
  
  if (typeof api.export !== 'undefined') {
    api.use('webapp', 'server');
    
    api.use('HTML5-History-API', 'client', {weak: true});
  }
});
Package.on_test(function (api) {
  api.use('router', ['client', 'server']);
  api.use('test-helpers', ['client', 'server']);
  api.use('tinytest', ['client', 'server']);
  
  api.use('session', 'client');
  api.add_files('tests/router_client_tests.js', 'clien
export const deleteTodo = (id) => (dispatch) =>{
  dispatch({type:'ASYNC_DELETE_TODO'});
  axios.delete(`/todos/${id}`)
    .then(() => {
      dispatch({type:'ASYNC_DELETE_TODO_SUCCESS', id});
    }, () => {
      dispatch({type: 'ASYNC_DELETE_TODO_FAILURE'});
    });
};
export const addTodo = () => (dispatch, getState) => {
  dispatch({type: 'ASYNC_ADD_TODO'});
  console.log('ADD_TODO', getState());
  axios.post('/todos', {name: getState().asyncTodos.newTodo.name})
    .then((response) => {
      dispatch({type:'ASYNC_ADD_TODO_SUCCESS', data: response.data});
    }, () => {
      dispatch({type: 'ASYNC_ADD_TODO_FAILURE'});
    });
};
export const completeTodo = (id) => (dispatch) => {
  dispatch({type: 'ASYNC_COMPLETE_TODO'});
  axios.put(`/todos/${id}`, {})
    .then(() => {
      dispatch({type: 'ASYNC_COMPLETE_TODO_SUCCESS', id});
    }, () => {
      dispatch({type: 'ASYNC_COMPLETE_TODO_FAILURE'});
    })
};
export const fetchTodos = () => (dispatch) => {
  dispatch({type: 'ASYNC
'use strict'; /*jshint -W100, browser:true, es5:true*/
define(function(){
var E = {
    "DJ": {message: "Xhibuti"},
    "JM": {message: "Xhamajkë"},
    "PG": {message: "Papua Guineja e Re"},
    "AT": {message: "Austri"},
    "Want Hola on other devices? (Xbox, PS, Apple TV, iPhone...). Click here": {message: "Dëshironi Hola në pajisje të tjera? (Xbox, PS, Apple TV, iPhone ...). Kliko këtu"},
    "KI": {message: "Qiribati"},
    "SZ": {message: "Svazilandë"},
    "BN": {message: "Brunej"},
    "ZM": {message: "Zambi"},
    "app_desc": {message: "Qasja lekë të internetit! Shkoni në faqen bllokuar -> click Hola icon -> vendi ndryshim flamuri -> ENJOY!"},
    "BW": {message: "Botsvana"},
    "AO": {message: "Angolë"},
    "Improve translation": {message: "Përmirësimi i përkthimit"},
    "ZW": {message: "Zimbabve"},
    "VC": {message: "Saint Vincent e Grenadinet"},
    "more...": {message: "më shumë ..."},
    "JP": {message: "Japoni"},
    "NA": {message: "Namibi"},
    "TJ": {message: 

    "There seems to be an error": {message: "Nuk duket të jetë një gabim"},
    "MA": {message: "Maroko"},
    "MT": {message: "Maltë"},
    "MN": {message: "Mongoli"},
    "IT": {message: "Itali"},
    "Unblocker": {message: "Unblocker"},
    "Enable": {message: "Mundësoj"},
    "Access any site from any country, free": {message: "Hyni në ndonjë vend nga çdo vend, pa pagesë"},
    "Loading": {message: "Ngarkim"},
    "Try to <span>reload</span>": {message: "Mundohuni të <span> ringarkoni </span>"},
    "FR": {message: "Francë"},
    "EG": {message: "Egjipt"},
    "start": {message: "filloj"},
    "LR": {message: "Liberi"},
    "RW": {message: "Ruanda"},
    "BE": {message: "Belgjikë"},
    "TN": {message: "Tunisi"},
    "EE": {message: "Estoni"},
    "BY": {message: "Bjellorusi"},
    "Accelerator": {message: "Akselerator"},
    "SA": {message: "Arabia Saudite"},
    "KR": {message: "Koreja e Jugut"},
    "LS": {message: "Lesoto"},
    "NO": {message: "Norvegji"},
    "ZA": {message:

    "PT": {message: "Portugali"},
    "CA": {message: "Kanada"},
    "AM": {message: "Armeni"},
    "Starting...": {message: "Duke filluar nga ..."},
    "CM": {message: "Kamerun"},
    "MG": {message: "Madagaskar"},
    "The free version of Hola needs to be re-enabled every 4 hours and is sponsored by ads.": {message: "Versioni i lirë për Hola duhet të ri-aktivizuar çdo 4 orë dhe është sponsorizuar nga reklama."},
    "ON": {message: "ON"},
    "Hola": {message: "Hola"},
    "BT": {message: "Butan"},
    "PL": {message: "Poloni"},
    "CF": {message: "Republika Qendrore e Afrikës"},
    "GA": {message: "Gjabon"},
    "BA": {message: "Bosnja dhe Hercegovina"},
    "AE": {message: "Emiratet Arabe te Bashkuara"},
    "TH": {message: "Tajlandë"},
    "Author:": {message: "Author artikullit:"},
    "Verify you have Internet": {message: "Verifikuar që ju keni internet"},
    "PH": {message: "Filipine"},
    "NI": {message: "Nikaragua"},
    "KZ": {message: "Kazakistan"},
    "DM": {message

    "AD": {message: "Andorrë"},
    "MR": {message: "Mauritani"},
    "TO": {message: "Tonga"},
    "SE": {message: "Suedi"},
    "changing...": {message: "ndryshimin e ..."},
    "AZ": {message: "Azerbajxhan"},
    "AF": {message: "Afganistan"},
    "NG": {message: "Nigeri"},
    "KE": {message: "Kenia"},
    "Turn on to get started": {message: "Kthejeni në për të marrë filluar"},
    "Very old version of Chrome, <a>update</a> Chrome to use Hola": {message: "Version shumë i vjetër i Chrome, <a> Azhurimi </a> Chrome për të përdorur Hola"},
    "AX": {message: "Ishujt Aland"},
    "YE": {message: "Jemen"},
    "CI": {message: "Bregu i Fildishtë"},
    "DZ": {message: "Algjeri"},
    "ID": {message: "Indonezi"},
    "FM": {message: "Mikronezi"},
    "(some Hola features are not available on your version)": {message: "(Disa karakteristika Hola nuk janë në dispozicion në versionin tuaj)"},
    "GE": {message: "Gjeorgji"},
    "GM": {message: "Gambi"},
    "LV": {message: "Letoni"},
    "R

    "LB": {message: "Liban"},
    "FI": {message: "Finlandë"},
    "DE": {message: "Gjermani"},
    "MV": {message: "Maldivit"},
    "Get Hola Plus for un-interrupted, ad-free service.": {message: "Merrni Hola Plus për un-ndërprerë, shërbim ad-free."},
    "even more...": {message: "edhe më shumë ..."},
    "LU": {message: "Luksemburg"},
    "VE": {message: "Venezuelë"},
    "BH": {message: "Bahrein"},
    "RO": {message: "Rumani"},
    "AR": {message: "Argjentinë"},
    "IN": {message: "Indi"},
    "CS": {message: "Serbië en Montenegro"},
    "MX": {message: "Meksikë"},
    "Unblocker site list": {message: "Site Unblocker lista"},
    "MC": {message: "Monako"},
    "BR": {message: "Brazili"},
    "IL": {message: "Izrael"},
    "SB": {message: "Ishujt Solomon"},
    "Author site:": {message: "Site Author artikullit:"},
    "Translate to your language": {message: "Përkthe në gjuhën tuaj"},
    "NZ": {message: "Zelanda e Re"},
    "DO": {message: "Republika Dominikanë"},
    "HU": {mess

    "OFF": {message: "OFF"},
    "KH": {message: "Kamboxhi"},
    "GB": {message: "Mbretëria e Bashkuar"},
    "TG": {message: "Togo"},
    "Hola cannot work properly because another extension is controlling your proxy settings. Please disable other extensions that you think might control your proxy settings in <a>extensions</a> (such as ad-blockers, other VPN services, etc.).": {message: "Hola nuk mund të punojnë siç duhet, sepse një tjetër zgjerim është kontrolluar parametrat tuaj prokurë. Ju lutemi disable zgjerime të tjera që ju mendoni se mund të kontrollojnë parametrat tuaj prokurë në <a> zgjerimet </a> (të tilla si ad-blockers, shërbime të tjera VPN, etj.)"},
    "Remove ads": {message: "Hiq reklama"},
    "DK": {message: "Danimarkë"},
    "QA": {message: "Katar"},
    "CV": {message: "Kap Verde"},
    "Reload": {message: "Ringarkoj"},
    "Number of users that use this option": {message: "Numri i përdoruesve që përdorin këtë opsion"},
    "ZZ": {message: "Rajon i panjohur ose 

    "Old version of Firefox. Press <a>here</a> to upgrade.": {message: "Versioni i vjetër i Firefox. Press <a> këtu </a> për të përmirësuar."},
    "KM": {message: "Komore"},
    "KW": {message: "Kuvajt"},
    "HR": {message: "Kroaci"},
    "CZ": {message: "Republika e Çekisë"},
    "MZ": {message: "Mozambik"},
    "ES": {message: "Spanjë"},
    "BO": {message: "Bolivi"},
    "ST": {message: "Sao Tome e Prinsipe"},
    "AU": {message: "Australi"},
    "AL": {message: "Shqipëria"},
    "CG": {message: "Kongo"},
    "MD": {message: "Moldavi"},
    "TR": {message: "Turqi"},
    "GW": {message: "Guine Bisau"},
    "GN": {message: "Guine"},
    "MK": {message: "Maqedoni"},
    "GR": {message: "Greqi"},
    "AG": {message: "Antigua e Barbuda"},
    "CO": {message: "Kolumbi"},
    "SI": {message: "Slloveni"},
    "Settings": {message: "Cilësimet"},
    "JO": {message: "Jordani"},
    "UA": {message: "Ukrainë"},
    "EH": {message: "Saharaja Perëndimore"},
    "CU": {message: "Kubë"},
    "CL

    "KN": {message: "Saint Kitts e Nevis"},
    "ET": {message: "Etiopi"},
    "SC": {message: "Sishel"},
    "IS": {message: "Islandë"},
    "NL": {message: "Vendet e Ulëta"},
    "Reload Hola": {message: "Rifresko Hola"},
    "EC": {message: "Ekuator"},
    "MY": {message: "Malajzi"},
    "CR": {message: "Kosta Rika"},
    "VA": {message: "Vatikan"},
    "back to": {message: "mbështetur tek"},
    "CN": {message: "Kinë"},
    "BG": {message: "Bullgari"},
    "MH": {message: "Ishujt Marshall"},
    "UY": {message: "Uruguaj"},
    "PY": {message: "Paraguaj"},
    "CH": {message: "Zvicër"},
    "LI": {message: "Lihtënshtajn"},
    "GH": {message: "Ganë"},
    "KG": {message: "Kirgistan"},
    "US": {message: "Shtetet e Bashkuara të Amerikës"},
    "SL": {message: "Siera Leone"},
    "CY": {message: "Qipro"},
    "FJ": {message: "Fixhi"},
    "IE": {message: "Irlandë"},
    "Get help from engineer over skype:": {message: "Merrni ndihmë nga inxhinier mbi skype artikullit:"},
    "TW": {m

    "KP": {message: "Koreja e Veriut"},
    "ER": {message: "Eritre"},
    "app_name": {message: "Hola Interneti më i mirë"},
    "IQ": {message: "Irak"},
    "Update": {message: "Update"},
    "TZ": {message: "Tanzani"},
    "MW": {message: "Malavi"},
    "LY": {message: "Libi"},
    "GT": {message: "Guatemalë"},
    "GY": {message: "Guajana"},
    "Unblocker is disabled": {message: "Unblocker është me aftësi të kufizuara"},
    "GQ": {message: "Guineja Ekuatoriale"},
    "LT": {message: "Lituani"},
    "Number of users that pressed not working": {message: "Numri i përdoruesve që nuk presion të punës"},
    "SG": {message: "Singapor"},
    "Initializing...": {message: "Initializing ..."},
    "TT": {message: "Trinidad e Tobago"},
    "Hola does not work well in Windows 8 mode. Please switch to desktop mode. Click <a>here</a> for instructions": {message: "Hola nuk punon mirë në Windows 8 regjimin. Ju lutemi të kaloni në mënyrë desktop. <a> Kliko këtu </a> për udhëzime"},
    "TD": {me
(function() {
    var navActions = {};
  
    var NavManager = function() {
       
  /* Get repo list */
        setNav = function(navScope) {
            navActions.openNav = navScope.openNav;
            navActions.addForm = navScope.addForm;
            navActions.editForm = navScope.editForm;
            navActions.updateViewNode = navScope.updateViewNode;
            navActions.errorWindow = navScope.errorWindow;
            navActions.activeNav = navScope.activeNav;
            navActions.activeSubMenu = navScope.activeSubMenu;
            navActions.activeList = navScope.activeList;
            navActions.currentNode = navScope.currentNode;
            navActions.previousMenu = navScope.previousMenu;
            navActions.parentAddNode = navScope.parentAddNode;
        };
        var connectNav = function(childScope){
            childScope.openNav = navActions.openNav;
            childScope.addForm = navActions.addForm;
            childScope.editForm = navActions.editForm;

﻿(function () {
    'use strict';
    var serviceId = 'restoreUserService';
    angular.module('app.security')
        .factory(serviceId, ['$location','$q', 'storageService', 'appActivityService', 'userService', restoreUserService]);
    function restoreUserService($location, $q, storageService, appActivityService, userService) {        
        var service = {
            restore: restore
        };
        return service;
        function restore() {
            appActivityService.busy("restoreUserService");
            if (storageService.retrieve("accessToken")) {
                return userService.getUserInfo().then(
                      function (result) {
                          if (result.hasRegistered) {
                              userService.setUser(result);
                              appActivityService.idle("restoreUserService");                                                    
                          } else {
                              appActivityService.id
domino.settings({
  verbose: false,
  strict: true
});
QUnit.module('domino instance');
QUnit.test('Hacks', function() {
  var o = new domino({
    properties: [
      {
        id: 'p1',
        value: false,
        dispatch: 'p1Updated'
      },
      {
        id: 'p2',
        value: false,
        dispatch: 'p2Updated'
      }
    ],
    hacks: [
      {
        triggers: 'trigger_0',
        dispatch: 'dispatch_0'
      },
      {
        triggers: ['trigger_1_0', 'trigger_1_1'],
        dispatch: 'dispatch_1'
      },
      {
        triggers: 'trigger_2',
        dispatch: ['dispatch_2_0', 'dispatch_2_1']
      },
      {
        triggers: 'trigger_3',
        method: method_3
      },
      {
        triggers: 'trigger_4',
        method: method_4
      },
      {
        triggers: 'trigger_5',
        method: method_5
      },
      {
        triggers: 'trigger_6',
        method: method_6
      }
    ]
  });
  o.addEventListener('dispatch_0', function() {
    QUnit.ok(true,

    o.dispatchEvent('trigger_1_0');
    o.dispatchEvent('trigger_1_1');
  });
  var c1 = 0;
  o.addEventListener('dispatch_1', function() {
    if (++c1 === 2) {
      QUnit.ok(true, 'Hack with multiple triggers works.')
      o.dispatchEvent('trigger_2');
    }
  });
  var c2 = 0;
  o.addEventListener('dispatch_2_0 dispatch_2_1', function() {
    if (++c2 === 2) {
      QUnit.ok(true, 'Hack with multiple dispatches works.')
      o.dispatchEvent('trigger_3', {
        value: 42
      });
    }
  });
  function method_3(event) {
    QUnit.equal(event.data.value, 42, 'Hack with event data reception works.');
    o.dispatchEvent('trigger_4');
  }
  function method_4(event) {
    this.p1 = true;
  }
  o.addEventListener('p1Updated', function() {
    QUnit.equal(o.get('p1'), true, 'Hack with scope alteration works.');
    o.dispatchEvent('trigger_5');
  });
  function method_5(event) {
    this.update('p2', true);
  }
  o.addEventListener('p2Updated', function() {
    QUnit.equal(o.get('p
messages = {
    message: '',
    category: '',
    renderMessage: function() {
        if(this.category == '') {
            this.category = 'info'
        }
        if(this.message == '' || this.message == 'None') {
            $('#message').parent().hide();
            $('#message').html('');
        } else {
            $('#message > a').addClass('alert-link');
            $('#message').html(this.message);
            $('#message').parent().attr('class', 'alert alert-dismissible alert-' + this.category);
            $('#message').parent().show();
        }
    },
    add: function(message, category) {
        this.message = message;
        this.category = category;
        this.renderMessage();
    },
    addInfo: function(message) {
        this.add(message, 'info');
    },
    addSuccess: function(message) {
        this.add(message, 'success');
    },
    addWarning: function(message) {
        this.add(message, 'warning');
    },
    addDanger: function(message) {
        this
var MenuController           = require('./menu_controller');
var LoginController          = require('./login/login_controller');
var ReserveController        = require('./reserve/reserve_controller');
var ReserveSuccessController = require('./reserve/reserve_success_controller');
var ExistingController       = require('./existing/existing_controller');
var FinishController         = require('./finish/finish_controller');
var FinishSuccessController  = require('./finish/finish_success_controller');
var CompleteController         = require('./complete/complete_controller');
var CompleteSuccessController  = require('./complete/complete_success_controller');
var CarsController             = require('./cars/cars_controller');
var CarDetailController        = require('./cars/car_detail_controller');
module.exports = {
  '/': {
    templateUrl: 'menu.html', showMenuButton: false,
    controller: MenuController
  },
  '/login': {
    templateUrl: 'login/login.html', showMenuButton: false,
    

  },
  '/reserve': {
    title: 'Rezervace',
    templateUrl: 'reserve/reserve.html',
    controller: ReserveController
  },
  '/reserve/:id/success': {
    title: 'Zarezervováno',
    templateUrl: 'reserve/reserve_success.html',
    controller: ReserveSuccessController,
    showMenuButton: false
  },
  '/reserve/:id/canceled': {
    title: 'Rezervace Zrušena',
    templateUrl: 'reserve/reserve_canceled.html',
    showMenuButton: false
  },
  '/existing': {
    title: 'Stávající Rezervace',
    templateUrl: 'existing/existing.html',
    controller: ExistingController
  },
  '/finish/:id': {
    title: 'Ukončení Rezervace',
    templateUrl: 'finish/finish.html',
    controller: FinishController
  },
  '/finish/:id/success': {
    title: 'Rezervace ukončena',
    templateUrl: 'finish/finish_success.html',
    controller: FinishSuccessController
  },
  '/complete/:id': {
    title: 'Ukončení Rezervace',
    templateUrl: 'complete/complete.html',
    controller: CompleteController
  },
  
'use strict';
angular.module('angularChatApp')
  .factory('ChatService', function () {
    var service = {};
    service.connect = function(url) {
      if (!service.closed()) {
        console.log('socket already opened.');
        return;
      }
      var ws = new WebSocket(url);
      ws.onopen = function() {
        service.callback('Connected.');
      };
      ws.onclose = function() {
        service.callback('Disconnected.');
      };
      ws.onerror = function(event) {
        console.error(event);
        service.callback('Error');
      };
      ws.onmessage = function(event) {
        console.debug(event.data);
        service.callback(event.data);
      };
      service.ws = ws;
    };
    service.disconnect = function() {
      if (service.ws) {
        service.ws.close();
        delete service.ws;
      }
    };
    service.send = function(message) {
      service.ws.send(message);
    };
    service.subscribe = function (callback) {
      service.callback = callback;
var MessageHandler = {};
MessageHandler.Alert = new Class({
	handle : function(message) {
		if ( message.text && message.type ) {
				message.text.alert(message.type);	
		}
	}
});
MessageHandler.Element = new Class({
	initialize : function(container) {
		this.container = container;
	},
	handle : function(message) {
		if ( !message.text || !message.type) {
			return
		}
		if ( document.id(this.container) ) {
			msg = new Element('div',{'class':'alert alert-'+message.type}).set('html', message.text);
			document.id(this.container).empty().adopt(msg);
		} else {
			new MessageHandler.Alert(message); 
		}		
	}
});
/**
 * Handling displaying ajax message notifications
 */
Class.refactor(Request.HTML, 
{	
	options  : {
		message : {
			handler :new MessageHandler.Element('flash-message') 
		}
	},
	onSuccess: function() 
	{
		var message = this.xhr.getResponseHeader('X-Message');
		message  = JSON.decode(message || '{}');
		this.options.message.handler.handle(message);
		return this.previous.
﻿(function() {
    'use strict';
    var app = angular.module('taptap');
    app.factory('outputService', ['playService', 'metService', 'staffService', 'feedbackService',
        function(playService, metService, staffService, feedbackService) {
        var outputService = {
            outputBeat: _outputBeat,
            toStaff: _toStaff,
            start: _start,
            end: _end,
            feedback: {
                leftButton: false,
                rightButton: false,
                length: 0
            }
        };
        function _outputBeat(beat) {
            if (typeof beat !== 'undefined') {
                feedbackService.showFeedback(beat);
                playService.playBeat(beat);
                metService.currentBeat = beat;
                metService.startPlayer();
            }
        }
        function _toStaff(lines) {
            if (Array.isArray(lines)) {
                metService.startComputer(lines);
            } else {
                consol
'use strict';
eventsApp.controller('PageController', 
	function ($scope) {
		$scope.ShowSubject = false;
		$scope.ShowDiscount = false;
		$scope.ShowUser = true;
		$scope.ShowCharge = false;
		$scope.ShowSemester = false;
		$scope.ShowBackUp = false;
		
		$scope.DiscountDetails = function() {
			$scope.ShowSubject = false;
			$scope.ShowDiscount = true;
			$scope.ShowUser = false;
			$scope.ShowCharge = false;
			$scope.ShowSemester = false;
			$scope.ShowBackUp = false;
		};
		
		$scope.SubjectDetails = function() {
			$scope.ShowSubject = true;
			$scope.ShowDiscount = false;
			$scope.ShowUser = false;
			$scope.ShowCharge = false;
			$scope.ShowSemester = false;
			$scope.ShowBackUp = false;
		};
		
		$scope.UserDetails = function() {
			$scope.ShowSubject = false;
			$scope.ShowDiscount = false;
			$scope.ShowUser = true;
			$scope.ShowCharge = false;
			$scope.ShowSemester = false;
			$scope.ShowBackUp = false;
		};
		
		$scope.ChargeDetails = function() {
			$scope.ShowSubject =
require(['application'], function (application) {
  application.controller('ApiController', [
    '$rootScope', '$scope', '$http',
    function ($rootScope, $scope, $http) {
      function loadApiTokens() {
        $http.get('/api/api_tokens')
          .success(function (response) {
            $scope.apiTokens = response.api_tokens;
          });
      }
      $rootScope.bodyClass = 'api_tokens';
      $scope.hideSidebar();
      $scope.newApiToken = {};
      $scope.saveApiToken = function () {
        $scope.savingApiToken = true;
        $http.post('/api/api_tokens', { model: $scope.newApiToken })
          .success(function () {
            loadApiTokens();
            $scope.savingApiToken = false;
          })
          .error(function () {
            $scope.savingApiToken = false;
          });
      };
      $scope.deleteApiToken = function (token) {
        if (!confirm('Are you sure?')) { return; }
        $http['delete']('/api/api_tokens/' + token.id)
          .success(f
/**
 * Class Message.
 *
 * @author Maxime Ollagnier
 */
/** Info message type */
Message.INFO = 'INFO';
/** Warning message type */
Message.WARN = 'WARN';
/** Error message type */
Message.ERROR = 'ERROR';
/** Default message string */
Message.DEFAULT_MESSAGE = '';
/** Default message type */
Message.DEFAULT_TYPE = Message.INFO;
/** Default i18n flag */
Message.DEFAULT_I18N = false;
/**
 * Class Message
 * @param {Object} jsonMessage
 */
function Message(jsonMessage)
    if (typeof jsonMessage == 'object' && typeof jsonMessage.message == 'string') 
    {
        this.message = jsonMessage.message;
    }
    else 
    {
        this.message = Message.DEFAULT_MESSAGE;
    }
    if (typeof jsonMessage == 'object' && typeof jsonMessage.type == 'string') 
    {
        this.type = jsonMessage.type;
    }
    else 
    {
        this.type = Message.DEFAULT_TYPE;
    }
    if (typeof jsonMessage == 'object' && typeof jsonMessage.i18n == 'boolean') 
    {
        this.i18n = jsonMessage.i18n;

    }
    else 
    {
        this.i18n = Message.DEFAULT_I18N;
    }
/**
 * Returns the raw message or the i18n message if necessary
 */
Message.prototype.getMessage = function()
    if (this.i18n) 
    {
        return I18nManager.get(this.message);
    }
    else 
    {
        return this.message;
    }
};
/**
 * Logs the message regarding to its type
 */
Message.prototype.log = function()
    switch (this.type)
    {
        case Message.INFO:
            Logger.info(this.getMessage());
            break;
        case Message.WARN:
            Logger.warn(this.getMessage());
            break;
        case Message.ERROR:
            Logger.error(this.getMessage());
            break;
    }
};
/**
 * Returns the jQuery message
 */
Message.prototype.getJQ = function()
    switch (this.type)
    {
        case Message.INFO:
            return $('<div class="info">' + this.getMessage() + '</div>');
            break;
        case Message.WARN:
            return $('<div class="warn">
var libString = require("../../lib/js/string");
var ucfirst = libString.ucfirst;
function extendApis(env){
	env.hasMultipart = false;
	if(!env.apis) env.apis = {};
	for(var key in env.apis){
		var api = env.apis[key];
		if(!api.type) api.type = false;
		if(api.multipart){
			env.hasMultipart = true;
		}
		if(api.isSignin)
			env.signinApi = api;
		else
			api.isSignin = false;
		if(api.isSignup)
			env.signupApi = api;
		else
			api.isSignup = false;
		if(api.isSignupSendCode)
			env.signupSendCodeApi = api;
		else
			api.isSignupSendCode = false;
		if(!api.fields) api.fields = [];
		if(!api.db) api.db = false;
		if(!api.fieldFromSchema) api.fieldFromSchema = false;
		else if(api.db){
			if(!env.schemas[api.db]){
				console.log("database " + api.db + " not exist");
				process.exit(1);
			}
			env.schemas[api.db].fields.slice(1).forEach(function(f){
				if(!f.auto) return api.fields.push(f);
			});
		}
		if(!api.name) api.name = key;
		if(!api.text) api.text = key;
		if(!api.route) ap
class Authorization { 
    constructor(lightBoxService,accountService,newCommentService,stateService) {
        this.lightBoxService = lightBoxService;
        this.accountService = accountService;
        this.newCommentService = newCommentService;
        this.stateService = stateService; 
        this.restrict = 'E';
        this.templateUrl = '/modules/account/authorization.html?v=3';
    }
    link(scope,element,attrs) {
        var lightBoxService = Authorization.instance.lightBoxService;
        var accountService = Authorization.instance.accountService;
        var newCommentService = Authorization.instance.newCommentService; 
        var stateService = Authorization.instance.stateService;
        scope.authorization = false; 
        scope.accountService = accountService;
        scope.context = lightBoxService.data.context; 
        scope.newComment = newCommentService.comment;
        accountService.email_exists(newCommentService.comment.email);
        if(stateService.data.
$(document).ready(function() {
    var $body = $('body'),
        desktopBreak = 768,
        maxNavHeight = 38,
        $topNav = $('#tdr_nav'),
        $window = $(window),
        $search = $topNav.find('.tdr_search'),
        $navList = $('.tdr_nav_list'),
    /* do we have a nav menu? */
        hasNav = false;
    if ($navList.find('> li').length > 0) {
        hasNav = true;
    }
    if (hasNav) {
        /* init nav menu */
        $navList.superfish({
            cssArrows: false
        });
    } else {
        /* hide menu icon */
        $("#tdr_title_menu_link").attr("style", "display: none");
        $("#tdr_title_content").addClass("noMenu");
    }
    /* search link */
    $("#tdr_search_toggle").click(function(event) {
        $search.toggleClass("show");
    });
    $(".navbar-toggle").on("click", function() {
        $body.toggleClass("active");
    });
    function navMover() {
        if ($window.width() >= desktopBreak) {
            if ($body.hasClass("active"))
'use strict';
var express = require('express');
var router  = express.Router();
var Service = require('../models/service');
var Request = require('../models/request');
var isAdmin = require('../utility/isAdmin.js')
router.get('/', listServices);
router.get(':serviceCode.json', getServiceDescription);
router.get('/metadata', getMetadata);
router.post('/', addService);
router.post('/delete', isAdmin, deleteService);
router.post('/update', updateService);
function listServices(req, res) {
	if (req.originalUrl === '/services') {
		res.send400('You must define a service code.');
		return;
	}
	Service.find(function (error, services){
		if (error){
			res.send('Error finding service request types.');
		} else if (services.length === 0) {
			res.send404('Could not find any services.');
		} else {
			res.send(services);
		}
	});
function getServiceDescription(req, res){
	var serviceCode = req.params.serviceCode;
	if (typeof serviceCode === 'undefined') {
		res.send400('You need to provide a ser

	}
	Service.find({service_code: serviceCode}, function serviceFound(err, result){
		if (result.length === 0) {
			res.send404('Could not find a service with that code.');
		} else {
			res.send(result);
		}
	});
function addService(req, res) {
	var service = new Service(req.body);
	service.save(function serviceSaved (error, service) {
		if (error) {
			res.send500('Error while trying to save the service.');
		}
		console.log('service.service_code', service.service_code);
		if (isUndefined(service.service_code)) {
			Service.findByIdAndUpdate(service._id, {$set:{service_code:service._id}}, function (error, service){
				if (error) {
					res.send500('Error while trying to save the service code.');
				} else {
					res.send(service);
				}
			});
		} else {
			res.send(service)
		}
	});
function updateService(req, res) {
	Service.findByIdAndUpdate(req.body._id, {$set: req.body}, function (error, service){
		if (error) {
			res.send500('Error while searching for service.')
		} else if (

			res.send404('Service not found.')
		} else {
			res.send(service)
		}
	});
}	
function deleteService (req, res) {
	Service.findByIdAndRemove(req.body.id, function(error) {
		if (error) {
			res.send500('Could not remove. Service may not exist, or some other error.');
		} else {
			res.send('Service deleted.');
		}
	});
function getMetadata (req, res) {
	var results = {};
	var servicesDone = 0;
	Service.find(function(error, services){
		services.forEach(function (service) {
			Request.count({service_code: service.service_code, status:'open'}, function(error, openCount) {
				results[service.service_code] = {};
				results[service.service_code].openCount = openCount;
				Request.count({service_code: service.service_code, status: 'closed'}, function(error, closedCount) {
					results[service.service_code].closedCount = closedCount;
					results[service.service_code].total = openCount + closedCount;
					servicesDone++;
					if (servicesDone === services.length) {
						res.send(result
(function() {
  $(document).ready(function() {
    var body, content, nav, nav_closed_width, nav_open, nav_toggler;
    nav_toggler = $("header .toggle-nav");
    nav = $("#main-nav");
    content = $("#content");
    body = $("body");
    nav_closed_width = 50;
    nav_open = body.hasClass("main-nav-opened") || nav.width() > nav_closed_width;
    $("#main-nav .dropdown-collapse").on("click", function(e) {
      var link, list;
      e.preventDefault();
      link = $(this);
      list = link.parent().find("> ul");
      if (list.is(":visible")) {
        if (body.hasClass("main-nav-closed") && link.parents("li").length === 1) {
          false;
        } else {
          link.removeClass("in");
          list.slideUp(300, function() {
            return $(this).removeClass("in");
          });
        }
      } else {
        if (list.parents("ul.nav.nav-stacked").length === 1) {
          $(document).trigger("nav-open");
        }
        link.addClass("in");
        list.slideDown(3
'use babel';
/* @flow */
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */
var logger = require('nuclide-logging').getLogger();
var {loadConfigsOfServiceWithServiceFramework} = require('nuclide-server/lib/config');
var {optionsToString} = require('nuclide-server/lib/service-manager');
var {RemoteConnection} = require('nuclide-remote-connection');
var {isRemote, getHostname} = require('nuclide-remote-uri');
var serviceConfigs = loadConfigsOfServiceWithServiceFramework();
var cachedServices: Map<string, mixed> = new Map();
/**
 * Create or get a cached service with given serviceOptions.
 * @param nuclideUri It could either be either a local path or a remote path in form of
 *    `nuclide:$host:$port/$path`. The function will use the $host from remote path to
 *    create a remote service with given serviceOptions or create a local service

 *    uri is local path.
 */
function getServiceByNuclideUri(
  serviceName: string,
  nuclideUri: ?NuclideUri = null,
  serviceOptions: ?mixed = null
): ?mixed {
  var hostname = (nuclideUri && isRemote(nuclideUri)) ?
    getHostname(nuclideUri) :
    null;
  return getService(serviceName, hostname, serviceOptions);
/**
 * Create or get a cached service with given serviceOptions. If hostname is null or empty string,
 * it returns a local service, otherwise a remote service will be returned. For the same host
 * serviceOptions, the same service instance will be returned.
 */
function getService(serviceName: string, hostname: ?string, serviceOptions: ?mixed): ?mixed {
  var [serviceConfig] = serviceConfigs.filter(config => config.name === serviceName);
  if (!serviceConfig) {
    logger.error('Service %s undefined.', serviceName);
    return null;
  }
  var cacheKey = serviceName + '@' + (hostname ? hostname : '') + ':' + optionsToString(serviceOptions);
  if (cachedServices.has(cacheK

    return cachedServices.get(cacheKey);
  }
  serviceOptions = serviceOptions || {};
  if (hostname) {
    var serviceInstance = createRemoteService(serviceConfig, hostname, serviceOptions);
  } else {
    var serviceInstance = createLocalService(serviceConfig, serviceOptions);
  }
  cachedServices.set(cacheKey, serviceInstance);
  return serviceInstance;
function createRemoteService(serviceConfig: ServiceConfig, hostname: string, serviceOptions: mixed): mixed {
  var {requireRemoteServiceSync} = require('nuclide-service-transformer');
  var remoteServiceClass = requireRemoteServiceSync(serviceConfig.definition);
  var remoteConnection = RemoteConnection.getByHostnameAndPath(hostname, null);
  return new remoteServiceClass(remoteConnection, serviceOptions);
function createLocalService(serviceConfig: ServiceConfig, serviceOptions: mixed): mixed {
  var serviceClass = require(serviceConfig.implementation);
  return new serviceClass(serviceOptions);
module.exports = {
  getService,
  ge
'use strict'
app.controller('ShowViewCtrl', function ($scope, $routeParams, $location, $filter, Show, Auth, Band) {
	var show = Show.get($routeParams.showId);
	$scope.bands = Show.getBands($routeParams.showId);
	$scope.deleteShow = false;
	$scope.notesEdit = false;
	show.$bindTo($scope, 'show');
	$scope.delete = function () {
		Show.delete($routeParams.showId);
		$location.path('/');
	};
	$scope.removePending = function () {
		Show.removePending($routeParams.showId);
	};
	$scope.status = function() {
		var today = new Date();
		var date = new Date($routeParams.showId * 1000);
		if (show.pending && date > today) {
			return 'PENDING';
		} else if (date > today) {
			return 'UPCOMING';
		} else if (date.toDateString() === today.toDateString()) {
			return 'TODAY';
		} else {
			return 'COMPLETE';
		}
	};
	$scope.setPending = function () {
		Show.setPending($routeParams.showId);
	};
	$scope.editNotes = function () {
		$scope.notesEdit = true;
	};
	$scope.saveNotes = function () {
		$scope
var invariant = require('./lib/invariant');
var warning = require('./lib/warning');
var QueuedDispatcher = {
	construct() {
		this.__dispatchQueue__ = [];
	},
	willDispatch(action, params, dispatch) {
		if (this.isDispatching()) {
			warning(
				!this.isDispatching(),
				'Dispatcher.dispatch(...): Cascading dispatch detected. \n' +
				`You have tried to dispatch an action of type '${action}' while simultaneously dispatching an action of type '${this.currentDispatch.action}'. ` +
				'This action will be queued until the pending payload has finished dispatching. ' +
				'Actions should avoid cascading updates wherever possible.'
			);
			return this.queueDispatch(action, params);
		}
		dispatch();
	},
	queueDispatch(action, params) {
		if (!this.isDispatching()) {
			this.dispatch(action, params)
		}
		this.__dispatchQueue__.push({action, params})
	},
	flushQueue() {
		var queued;
		while(queued = this.__dispatchQueue__.pop())
			this.dispatch(queued.action, queued.params);
	},
	endD
var markPageApp = angular.module('markPageApp', []);
markPageApp.config(function ($routeProvider) {
	$routeProvider
		.when ('/home',
			{
				controller: 'LoadingController',
				templateUrl:'partials/Home.html'
			})
		.when ('/work',
			{
				controller: 'LoadingController',
				templateUrl:'partials/WorkHistory.html'
			})
		.when ('/education',
			{
				controller: 'LoadingController',
				templateUrl:'partials/Education.html'
			})
		.when ('/projects',
			{
				controller: 'LoadingController',
				templateUrl:'partials/Projects.html'
			})
		.when ('/contact',
			{
				controller: 'LoadingController',
				templateUrl:'partials/Contact.html'
			})
		.when ('/disney',
			{
				controller: 'LoadingController',
				templateUrl:'partials/Work/Disney.html'
			})
		.when ('/dragon',
			{
				controller: 'LoadingController',
				templateUrl:'partials/Work/Dragon.html'
			})
		.when ('/toys',
			{
				controller: 'LoadingController',
				templateUrl:'partials/Work/ThinkerToys.html'
			})

		.when ('/stormdrain',
			{
				controller: 'LoadingController',
				templateUrl:'partials/Work/Stormdrain.html'
			})
		.when ('/hthi',
			{
				controller: 'LoadingController',
				templateUrl:'partials/Education/HTHI.html'
			})
		.when ('/ucsc',
			{
				controller: 'LoadingController',
				templateUrl:'partials/Education/UCSC.html'
			})
		.when ('/firewall',
			{
				controller: 'LoadingController',
				templateUrl:'partials/Education/UCSC/Firewall.html'
			})
		.when ('/minigolf',
			{
				controller: 'LoadingController',
				templateUrl:'partials/Education/UCSC/Minigolf.html'
			})
		.when ('/sustain',
			{
				controller: 'LoadingController',
				templateUrl:'partials/Education/UCSC/Sustain.html'
			})
		.when ('/udk',
			{
				controller: 'LoadingController',
				templateUrl:'partials/Education/UCSC/UDK.html'
			})
		.when ('/robots',
			{
				controller: 'LoadingController',
				templateUrl:'partials/Projects/FIRST.html'
			})
		.when ('/firefighter',
			{
				controller: 
export default (apiEngine) => ({
  list: ({ page }) => apiEngine.get('/api/users', { params: { page } }),
  register: (user) => apiEngine.post('/api/users', { data: user }),
  verifyEmail: ({ token }) => apiEngine.post('/api/users/email/verify', {
    data: { verifyEmailToken: token },
  }),
  requestVerifyEmail: (form) => (
    apiEngine.post('/api/users/email/request-verify', { data: form })
  ),
  login: (user) => apiEngine.post('/api/users/login', { data: user }),
  requestResetPassword: (form) => (
    apiEngine.post('/api/users/password/request-reset', { data: form })
  ),
  resetPassword: ({ token, ...form }) => (
    apiEngine.put('/api/users/password', {
      data: {
        resetPasswordToken: token,
        ...form,
      },
    })
  ),
  logout: () => apiEngine.get('/api/users/logout'),
  readSelf: () => apiEngine.get('/api/users/me'),
  update: (user) => apiEngine.put('/api/users/me', { data: user }),
  updateAvatarURL: (form) => apiEngine.put('/api/users/me/avatarURL', {
 String.prototype.endsWith = function(suffix) {
    return this.indexOf(suffix, this.length - suffix.length) !== -1;
};
var libsw = new LibSpaceWalk();
var logData = [];
var filteredData = [];
var showState = {
	show: 'show',
	hide: 'hide',
	faded: 'faded'
var showTrace = showState.show;
var showDebug = showState.show;
var showInfo = showState.show;
var showWarn = showState.show;
var showError = showState.show;
var showFatal = showState.show;
function nextShowState(state) {
	if (state === showState.show)
		return showState.faded;
	else if (state == showState.faded)
		return showState.hide;
	else
		return showState.show;
libsw.onMessage = function(data) {
	if (data.type === 'core.simpleLog.message') {
		addLog(data.payload);
		d3.select('#lineCounter')
			.text(logData.length);
	}
libsw.onSessionStarted = function() {
		
	d3.select('#log').append('div')
		.attr('class', 'sessionMarker')
		.text('new session started...');
function addLog(datum) {
	logData.push(datum);
	d3.select('#lineCo

		.text(logData.length);
	d3.select('#log').selectAll('div.logEntry')
		.data(logData)
			.enter().append('div')
				.attr('class', function(d) { return 'logEntry ' + d.level; })
				.html(function(d) { return d.message; })
				.style('opacity', function(d) {
					if (((showTrace === showState.faded) && d.level === 'trace') ||
						((showDebug === showState.faded) && d.level === 'debug') ||
						((showInfo === showState.faded) && d.level === 'info') ||
						((showWarn === showState.faded) && d.level === 'warn') ||
						((showError === showState.faded) && d.level === 'error') ||
						((showFatal === showState.faded) && d.level === 'fatal')) {
						return '0.5';					
					} else
						return '1';
				})
				.style('display', function(d) {
					if (((showTrace === showState.hide) && d.level === 'trace') ||
						((showDebug === showState.hide) && d.level === 'debug') ||
						((showInfo === showState.hide) && d.level === 'info') ||
						((showWarn === showState.hide) && d.level ==

						((showError === showState.hide) && d.level === 'error') ||
						((showFatal === showState.hide) && d.level === 'fatal')) {
						return 'none';					
					} else
						return 'block';
				})
function toggleCube(state, name, cls) {
	if (state === showState.show) {
		d3.select(name)
			.transition()
				.duration(200)
				.style('opacity', 1);
				
		d3.selectAll('div.log div.' + cls)
			.style('opacity', 1)
			.style('display', 'block');
	}
	else if (state === showState.faded) {
		d3.select(name)
			.transition()
				.duration(200)
				.style('opacity', 0.5);
		
		d3.selectAll('div.log div.' + cls)
			.style('opacity', 0.5)
			.style('display', 'block');
	}
	else if (state === showState.hide) {
		d3.select(name)
			.transition()
				.duration(200)
				.style('opacity', 0.1);
				
		d3.selectAll('div.log div.' + cls)
			.style('opacity', 0.1)
			.style('display', 'none');
	}
function init() {	
	$('#toggleTrace').click(function() {
		showTrace = nextShowState(showTrace);
		toggleCu

	});
	$('#toggleInfo').click(function() {
		showInfo = nextShowState(showInfo);
		toggleCube(showInfo, '#toggleInfo', 'info');
	});
	$('#toggleDebug').click(function() {
		showDebug = nextShowState(showDebug);
		toggleCube(showDebug, '#toggleDebug', 'debug');
	});
	$('#toggleWarn').click(function() {
		showWarn = nextShowState(showWarn);
		toggleCube(showWarn, '#toggleWarn', 'warn');
	});
	$('#toggleError').click(function() {
		showError = nextShowState(showError);
		toggleCube(showError, '#toggleError', 'error');
	});
	$('#toggleFatal').click(function() {
		showFatal = nextShowState(showFatal);
		toggleCube(showFatal, '#toggleFatal', 'fatal');
	});
	var clearLog = function() {
		logData = [];
		d3.select('#lineCounter')
			.text('--');
		
		d3.selectAll('div.log div')
			.remove();
	}
	$('#clearLog').click(clearLog);
	var clearScalar = function() {
		scalarData = [];
		
		d3.selectAll('div.scalar div')
			.remove();
		
		d3.select('#scalar').append('div')
			.attr('id', 'scalar-sessi
var EffecktOffScreenNav = {
  nav: $("#effeckt-off-screen-nav"),
  closeButton: $("#effeckt-off-screen-nav-close"),
  init: function() {
    this.bindUIActions();
  },
  bindUIActions: function() {
      var type = $(this).data("effeckt");
      var threedee = $(this).data("threedee");
      EffecktOffScreenNav.toggleNav(type, threedee);
    });
  },
  toggleNav: function(type, threedee) {
    if (!EffecktOffScreenNav.nav.hasClass("effeckt-off-screen-nav-show")) {
      EffecktOffScreenNav.nav.addClass(type);
      EffecktOffScreenNav.closeButton.data("effeckt", type);
      if (threedee) {
        $("html").addClass("md-perspective");
      }
      setTimeout(function() {
        EffecktOffScreenNav.nav.addClass("effeckt-off-screen-nav-show");
      }, 500);
    } else {
      EffecktOffScreenNav.nav.removeClass("effeckt-off-screen-nav-show");
      setTimeout(function() {
        EffecktOffScreenNav.nav.removeClass(EffecktOffScreenNav.closeButton.data("effeckt"));
        EffecktOffS
var GCD = {};
GCD.worker_id = 1;
GCD.AsyncWorker = function(id) {
	this.callbacks = {};
	this.asyncCount = 0;
	var self = this;
	var worker = new Worker('worker.js');
	worker.postMessage({'cmd': 'on_create', 'id': id});
	worker.onmessage = function(event) {
		var cb = self.callbacks[event.data.count];
		console.log('[' + id + ']' + ' result:' + event.data.result);
		if (cb)
			cb();
	};
	worker.onerror = function(error) {
		console.log('error in worker: [' + id + ':' + error.filename + ':' + error.lineno + '] ' + error.message);
	};
	this.worker = worker;
};
GCD.AsyncWorker.prototype.dispatch_async = function(func, callback, args) {
	this.asyncCount++;
	this.worker.postMessage({'cmd': 'dispatch_async', 'func': func.toString(), 'args': args, 'count': this.asyncCount});
	this.callbacks[this.asyncCount] = callback;
};
GCD.SerialQueue = function() {
	this.worker = new GCD.AsyncWorker(GCD.worker_id++);
};
GCD.SerialQueue.prototype.dispatch_async = function(func, callback, args) {
	this.work
export function getHelps(appId) {
  return dispatch => {
    dispatch({
      type : types.SET_IS_GETTING_HELPS
    });
    request
    .get(`${urlRoot}applications/${appId}/helps`)
    .set('Content-Type', 'application/json')
    .end((err, res) => {
      if (res.ok) {
        dispatch(getHelpsSuccess(JSON.parse(res.text)));
      } else {
        dispatch(getHelpsError());
      }
    });
  }
export function getHelpsSuccess(data) {
  return dispatch => {
    dispatch({
      type : types.GET_HELPS_SUCCESS,
      data : data
    });
  }; 
export function getHelpsError() {
  return dispatch => {
    dispatch({
      type : types.GET_HELPS_ERROR
    });
    dispatch(notification.set('error', 'ヘルプの取得に失敗しました。時間をおいてから再度お試しください。'));
  }; 
export function postHelp(appId, params) {
  return dispatch => {
    dispatch({
      type : types.SET_IS_POSTING_HELP
    });
    request
    .post(`${urlRoot}applications/${appId}/helps`)
    .send(params)
    .end((err, res) => {
      if (res.ok) {
  

        dispatch(postHelpSuccess(params));
      } else {
        dispatch(postHelpError());
      }
    });
  }
export function postHelpSuccess(data) {
  return dispatch => {
    dispatch({
      type : types.POST_HELP_SUCCESS,
      data : data
    });
    dispatch(notification.set('success', 'ヘルプの作成に成功し、一覧に追加されました。'));
  }; 
export function postHelpError() {
  return dispatch => {
    dispatch({
      type : types.POST_HELP_ERROR
    });
    dispatch(notification.set('error', 'ヘルプの作成に失敗しました。時間をおいてから再度お試しください。'));
  }; 
export function putHelp(appId, helpId, params) {
  return dispatch => {
    dispatch({
      type : types.SET_IS_PUTTING_HELP
    });
    request
    .put(`${urlRoot}applications/${appId}/helps/${helpId}`)
    .send(params)
    .end((err, res) => {
      if (res.ok) {
        dispatch(putHelpSuccess(params, helpId));
      } else {
        dispatch(putHelpError());
      }
    });
  }
export function putHelpSuccess(data, helpId) {
  return dispatch => {
    dispatch(

      type   : types.PUT_HELP_SUCCESS,
      data   : data,
      helpId : helpId
    });
    dispatch(notification.set('success', 'ヘルプの編集に成功しました。'));
  }; 
export function putHelpError() {
  return dispatch => {
    dispatch({
      type : types.PUT_HELP_ERROR
    });
    dispatch(notification.set('error', 'ヘルプの編集に失敗しました。時間をおいてから再度お試しください。'));
  }; 
export function deleteHelp(appId, helpId) {
  return dispatch => {
    dispatch({
      type : types.SET_IS_DELETING_HELP
    });
    request
    .del(`${urlRoot}applications/${appId}/helps/${helpId}`)
    .end((err, res) => {
      if (res.ok) {
        dispatch(deleteHelpSuccess(helpId));
      } else {
        dispatch(deleteHelpError());
      }
    });
  }
export function deleteHelpSuccess(helpId) {
  return dispatch => {
    dispatch({
      type   : types.DELETE_HELP_SUCCESS,
      helpId : helpId
    });
    dispatch(notification.set('success', 'ヘルプの削除に成功しました。'));
  }; 
export function deleteHelpError() {
  return dispatch => {
  
/* Serrvice for handling error  */
webchatApp.factory('errorsService', function errorsService($rootScope, ajaxErrorText, baseUrl) {
    function handleError(error) {
        var message = {};
        message.Type = 'danger';
        if (error.Message.indexOf('You\'ve already joined this chatroom.') > -1) {
            message.Text = 'You\'ve already joined this chatroom.';
            $rootScope.$broadcast('alertMessage', message);
        } else if (error.Message.indexOf('Authorization has been denied') > -1) {
            message.Text = 'You are not authorized to perform this type of request!';
            $rootScope.$broadcast('alertMessage', message);
        } else if (error.Message.indexOf('Chatroom with the same name already exists') > -1) {
            message.Text = error.Message;
            $rootScope.$broadcast('alertMessage', message);
        } else {
            message.Text = ajaxErrorText;
            $rootScope.$broadcast('alertMessage', message);
        }
    };
   

        var message = {};
        message.Type = 'danger';
        if (error.error_description) {
            message.Text = error.error_description;
            $rootScope.$broadcast('alertMessage', message);
        } else {
            message.Text = ajaxErrorText;
            $rootScope.$broadcast('alertMessage', message);
        }
    };
    function handleRegisterError(errorMessage) {
        var message = {};
        message.Type = 'danger';
        if (errorMessage['']) {
            message.Text = errorMessage[''][0];
            $rootScope.$broadcast('alertMessage', message);
        } else if (errorMessage['model.ConfirmPassword']) {
            message.Text = errorMessage['model.ConfirmPassword'][0];
            $rootScope.$broadcast('alertMessage', message);
        } else if (errorMessage['model.Password']) {
            message.Text = errorMessage['model.Password'][0];
            $rootScope.$broadcast('alertMessage', message);
        } else {
            message.Text
'use strict'; /*jshint -W100, browser:true, es5:true*/
define(function(){
var E = {
    "DJ": {message: "Xhibuti"},
    "JM": {message: "Xhamajkë"},
    "PG": {message: "Papua Guineja e Re"},
    "AT": {message: "Austri"},
    "Want Hola on other devices? (Xbox, PS, Apple TV, iPhone...). Click here": {message: "Dëshironi Hola në pajisje të tjera? (Xbox, PS, Apple TV, iPhone ...). Kliko këtu"},
    "KI": {message: "Qiribati"},
    "SZ": {message: "Svazilandë"},
    "BN": {message: "Brunej"},
    "ZM": {message: "Zambi"},
    "app_desc": {message: "Qasja lekë të internetit! Shkoni në faqen bllokuar -> click Hola icon -> vendi ndryshim flamuri -> ENJOY!"},
    "BW": {message: "Botsvana"},
    "AO": {message: "Angolë"},
    "Improve translation": {message: "Përmirësimi i përkthimit"},
    "ZW": {message: "Zimbabve"},
    "VC": {message: "Saint Vincent e Grenadinet"},
    "more...": {message: "më shumë ..."},
    "JP": {message: "Japoni"},
    "NA": {message: "Namibi"},
    "TJ": {message: 

    "There seems to be an error": {message: "Nuk duket të jetë një gabim"},
    "MA": {message: "Maroko"},
    "MT": {message: "Maltë"},
    "MN": {message: "Mongoli"},
    "Hola site list": {message: "Site Unblocker lista"},
    "IT": {message: "Itali"},
    "Unblocker": {message: "Unblocker"},
    "Enable": {message: "Mundësoj"},
    "Access any site from any country, free": {message: "Hyni në ndonjë vend nga çdo vend, pa pagesë"},
    "Loading": {message: "Ngarkim"},
    "Try to <span>reload</span>": {message: "Mundohuni të <span> ringarkoni </span>"},
    "FR": {message: "Francë"},
    "EG": {message: "Egjipt"},
    "start": {message: "filloj"},
    "LR": {message: "Liberi"},
    "RW": {message: "Ruanda"},
    "BE": {message: "Belgjikë"},
    "TN": {message: "Tunisi"},
    "EE": {message: "Estoni"},
    "BY": {message: "Bjellorusi"},
    "Accelerator": {message: "Akselerator"},
    "SA": {message: "Arabia Saudite"},
    "KR": {message: "Koreja e Jugut"},
    "LS": {message: "Lesot

    "NO": {message: "Norvegji"},
    "ZA": {message: "Afrika e Jugut"},
    "PT": {message: "Portugali"},
    "CA": {message: "Kanada"},
    "AM": {message: "Armeni"},
    "Starting...": {message: "Duke filluar nga ..."},
    "CM": {message: "Kamerun"},
    "MG": {message: "Madagaskar"},
    "ON": {message: "ON"},
    "Hola": {message: "Hola"},
    "BT": {message: "Butan"},
    "PL": {message: "Poloni"},
    "CF": {message: "Republika Qendrore e Afrikës"},
    "GA": {message: "Gjabon"},
    "BA": {message: "Bosnja dhe Hercegovina"},
    "AE": {message: "Emiratet Arabe te Bashkuara"},
    "TH": {message: "Tajlandë"},
    "Author:": {message: "Author artikullit:"},
    "PH": {message: "Filipine"},
    "NI": {message: "Nikaragua"},
    "KZ": {message: "Kazakistan"},
    "DM": {message: "Dominikë"},
    "AD": {message: "Andorrë"},
    "MR": {message: "Mauritani"},
    "TO": {message: "Tonga"},
    "SE": {message: "Suedi"},
    "changing...": {message: "ndryshimin e ..."},
    "AZ": {messa

    "AF": {message: "Afganistan"},
    "NG": {message: "Nigeri"},
    "KE": {message: "Kenia"},
    "Turn on to get started": {message: "Kthejeni në për të marrë filluar"},
    "Very old version of Chrome, <a>update</a> Chrome to use Hola": {message: "Version shumë i vjetër i Chrome, <a> Azhurimi </a> Chrome për të përdorur Hola"},
    "AX": {message: "Ishujt Aland"},
    "YE": {message: "Jemen"},
    "CI": {message: "Bregu i Fildishtë"},
    "DZ": {message: "Algjeri"},
    "ID": {message: "Indonezi"},
    "FM": {message: "Mikronezi"},
    "(some Hola features are not available on your version)": {message: "(Disa karakteristika Hola nuk janë në dispozicion në versionin tuaj)"},
    "GE": {message: "Gjeorgji"},
    "GM": {message: "Gambi"},
    "LV": {message: "Letoni"},
    "RU": {message: "Rusi"},
    "LB": {message: "Liban"},
    "FI": {message: "Finlandë"},
    "DE": {message: "Gjermani"},
    "MV": {message: "Maldivit"},
    "Get Hola Plus for un-interrupted, ad-free service.": {m

    "even more...": {message: "edhe më shumë ..."},
    "LU": {message: "Luksemburg"},
    "VE": {message: "Venezuelë"},
    "BH": {message: "Bahrein"},
    "RO": {message: "Rumani"},
    "AR": {message: "Argjentinë"},
    "IN": {message: "Indi"},
    "CS": {message: "Serbië en Montenegro"},
    "MX": {message: "Meksikë"},
    "MC": {message: "Monako"},
    "BR": {message: "Brazili"},
    "IL": {message: "Izrael"},
    "SB": {message: "Ishujt Solomon"},
    "Author site:": {message: "Site Author artikullit:"},
    "Translate to your language": {message: "Përkthe në gjuhën tuaj"},
    "NZ": {message: "Zelanda e Re"},
    "DO": {message: "Republika Dominikanë"},
    "HU": {message: "Hungari"},
    "OFF": {message: "OFF"},
    "KH": {message: "Kamboxhi"},
    "Hola cannot work properly because another extension is controlling your proxy settings. Please disable other extensions that you think might control your proxy settings in <a>extensions</a> (such as ad-blockers, other VPN services,

    "TG": {message: "Togo"},
    "GB": {message: "Mbretëria e Bashkuar"},
    "DK": {message: "Danimarkë"},
    "QA": {message: "Katar"},
    "CV": {message: "Kap Verde"},
    "Reload": {message: "Ringarkoj"},
    "Number of users that use this option": {message: "Numri i përdoruesve që përdorin këtë opsion"},
    "ZZ": {message: "Rajon i panjohur ose i pavlefshëm"},
    "Old version of Firefox. Press <a>here</a> to upgrade.": {message: "Versioni i vjetër i Firefox. Press <a> këtu </a> për të përmirësuar."},
    "KM": {message: "Komore"},
    "KW": {message: "Kuvajt"},
    "HR": {message: "Kroaci"},
    "CZ": {message: "Republika e Çekisë"},
    "MZ": {message: "Mozambik"},
    "ES": {message: "Spanjë"},
    "BO": {message: "Bolivi"},
    "ST": {message: "Sao Tome e Prinsipe"},
    "AU": {message: "Australi"},
    "AL": {message: "Shqipëria"},
    "CG": {message: "Kongo"},
    "MD": {message: "Moldavi"},
    "TR": {message: "Turqi"},
    "GW": {message: "Guine Bisau"},
    "GN": {mess

    "MK": {message: "Maqedoni"},
    "GR": {message: "Greqi"},
    "AG": {message: "Antigua e Barbuda"},
    "CO": {message: "Kolumbi"},
    "SI": {message: "Slloveni"},
    "Settings": {message: "Cilësimet"},
    "JO": {message: "Jordani"},
    "UA": {message: "Ukrainë"},
    "EH": {message: "Saharaja Perëndimore"},
    "CU": {message: "Kubë"},
    "CL": {message: "Kili"},
    "KN": {message: "Saint Kitts e Nevis"},
    "ET": {message: "Etiopi"},
    "SC": {message: "Sishel"},
    "IS": {message: "Islandë"},
    "NL": {message: "Vendet e Ulëta"},
    "Reload Hola": {message: "Rifresko Hola"},
    "EC": {message: "Ekuator"},
    "MY": {message: "Malajzi"},
    "CR": {message: "Kosta Rika"},
    "VA": {message: "Vatikan"},
    "back to": {message: "mbështetur tek"},
    "CN": {message: "Kinë"},
    "BG": {message: "Bullgari"},
    "MH": {message: "Ishujt Marshall"},
    "UY": {message: "Uruguaj"},
    "PY": {message: "Paraguaj"},
    "CH": {message: "Zvicër"},
    "LI": {message: "Liht

    "GH": {message: "Ganë"},
    "KG": {message: "Kirgistan"},
    "US": {message: "Shtetet e Bashkuara të Amerikës"},
    "SL": {message: "Siera Leone"},
    "CY": {message: "Qipro"},
    "FJ": {message: "Fixhi"},
    "IE": {message: "Irlandë"},
    "Get help from engineer over skype:": {message: "Merrni ndihmë nga inxhinier mbi skype artikullit:"},
    "TW": {message: "Tajvan"},
    "KP": {message: "Koreja e Veriut"},
    "ER": {message: "Eritre"},
    "app_name": {message: "Hola Interneti më i mirë"},
    "IQ": {message: "Irak"},
    "Update": {message: "Update"},
    "TZ": {message: "Tanzani"},
    "MW": {message: "Malavi"},
    "LY": {message: "Libi"},
    "GT": {message: "Guatemalë"},
    "GY": {message: "Guajana"},
    "Unblocker is disabled": {message: "Unblocker është me aftësi të kufizuara"},
    "GQ": {message: "Guineja Ekuatoriale"},
    "LT": {message: "Lituani"},
    "Number of users that pressed not working": {message: "Numri i përdoruesve që nuk presion të punës"},
   
describe("App Controller", function(){
   beforeEach(function(){ 
   	appController = new App.Controller();
   });
	it("should be defined", function(){
		expect(appController).toBeDefined();
	}),
	it("has function 'loadNewStudio' ", function(){
		expect(appController.loadNewStudio).toBeDefined();
	}),
	it("has function 'loadStudioCollection' ", function(){
		expect(appController.loadStudioCollection).toBeDefined();
	}),
	it("has function 'registerStudioCollectionController' ", function(){
		expect(appController.registerStudioCollectionController).toBeDefined();
	}),
	it("has function 'registerStudioController' ", function(){
		expect(appController.registerStudioController).toBeDefined();
	}),
	it("has function 'registerSearchController' ", function(){
		expect(appController.registerSearchController).toBeDefined();
	}),
	it("initializes with an empty 'this.studioCollectionController' ", function(){
		expect(appController.studioCollectionController).toEqual({});
	}),
	it("initializes wit

		expect(appController.studioController).toEqual({});
	}),
	it("initializes with an empty 'this.searchController' ", function(){
		expect(appController.searchController).toEqual({});
	}),
	it("sets the proper 'controller' key when calling 'registerStudioCollectionController' ", function(){
		appController.registerStudioCollectionController("controller", "method")
		expect(appController.studioCollectionController.controller).toEqual("controller");
	}),
	it("sets the proper 'callbackMethod' key when calling 'registerStudioCollectionController' ", function(){
		appController.registerStudioCollectionController("controller", "method")
		expect(appController.studioCollectionController.callbackMethod).toEqual("method");
	}),
	it("sets the proper 'controller' key when calling 'registerStudioController' ", function(){
		appController.registerStudioController("controller", "method")
		expect(appController.studioController.controller).toEqual("controller");
	}),
	it("sets the proper 'callbackMet

		appController.registerStudioController("controller", "method")
		expect(appController.studioController.callbackMethod).toEqual("method");
	}),
	it("sets the proper 'controller' key when calling 'registerSearchController' ", function(){
		appController.registerSearchController("controller", "method")
		expect(appController.searchController.controller).toEqual("controller");
	}),
	it("sets the proper 'callbackMethod' key when calling 'registerSearchController' ", function(){
		appController.registerSearchController("controller", "method")
		expect(appController.searchController.callbackMethod).toEqual("method");
	}),
	it("calls 'loadNewStudio' ", function(){
		testStudio = jasmine.createSpyObj('testStudio', ['update']);
		testSearch = jasmine.createSpyObj('testSearch', ['update']);
		appController.registerStudioController(testStudio, 'update')
		appController.registerSearchController(testSearch, 'update')
		appController.loadNewStudio()
		expect(testStudio.update).toHaveBeenCalled();

var TaxinvoiceService = require('./lib/TaxinvoiceService');
var StatementService = require('./lib/StatementService');
var CashbillService = require('./lib/CashbillService');
var MessageService = require('./lib/MessageService');
var FaxService = require('./lib/FaxService');
var HTTaxinvoiceService = require('./lib/HTTaxinvoiceService');
var HTCashbillService = require('./lib/HTCashbillService');
var ClosedownService = require('./lib/ClosedownService');
var linkhub = require('linkhub');
var configuration = {LinkID : '',SecretKey : '',IsTest : false};
exports.config = function(config) {
	configuration = config;
exports.MgtKeyType = {SELL:'SELL', BUY:'BUY', TRUSTEE:'TRUSTEE'};
exports.TaxinvoiceService = function() {
  if(!this._TaxinvoiceService) {
    this._TaxinvoiceService = new TaxinvoiceService(configuration);
  }
  return this._TaxinvoiceService;
exports.StatementService = function(){
  if(!this._StatementService){
    this._StatementService = new StatementService(configuration);
  

  return this._StatementService;
exports.CashbillService = function() {
  if(!this._CashbillService) {
    this._CashbillService = new CashbillService(configuration);
  }
  return this._CashbillService;
exports.MessageType = {SMS : 'SMS', LMS : 'LMS', MMS : 'MMS'};
exports.MessageService = function() {
  if(!this._MessageService) {
    this._MessageService = new MessageService(configuration);
  }
  return this._MessageService;
exports.FaxService = function() {
  if(!this._FaxService) {
    this._FaxService = new FaxService(configuration);
  }
  return this._FaxService;
exports.HTTaxinvoiceService = function() {
  if(!this._HTTaxinvoiceService) {
    this._HTTaxinvoiceService = new HTTaxinvoiceService(configuration);
  }
  return this._HTTaxinvoiceService;
exports.HTCashbillService = function() {
  if(!this._HTCashbillService) {
    this._HTCashbillService = new HTCashbillService(configuration);
  }
  return this._HTCashbillService;
exports.ClosedownService = function() {
  if(!this._C
define(["kendo", "cart", "config"], function (kendo, cart, config) {
    return {
        baseserviceItemViewModel: {
            onAddServiceItemToCart: function (clickEvt) {
                var serviceItem = clickEvt.data;
                cart.add(serviceItem);
                var aid = serviceItem.get("serviceItemId");
                serviceItem.set("serviceItemId", -1);
                serviceItem.set("serviceItemId", aid);
            },
          
            serviceItemUnitPrice: function (serviceItem) {
                return kendo.toString(parseFloat(serviceItem.get("serviceItemUnitPrice")), "c");
            },
            serviceItemDescription: function (serviceItem) {
                return serviceItem.get("serviceItemDescription");
            },
            serviceItemNotes: function (serviceItem) {
                return serviceItem.get("serviceItemNotes");
            },
            qtyInCart: function (serviceItem) {
                var cartItem = cart.find(serviceIt
var searchData=
  ['scanbottom',['scanBottom',['../class_controller_1_1_scan_parameters.html#ac902c2988228e091693b3ecb522e1eed',1,'Controller::ScanParameters']]],
  ['scandatalength',['ScanDataLength',['../struct_controller_1_1_telemetry.html#a6c3fbaf035e1e87418f5cb8e7f1d1bdf',1,'Controller::Telemetry']]],
  ['scanlines',['scanLines',['../class_controller_1_1_scan_parameters.html#a93a3ea5315c2e596884019b099f583a9',1,'Controller::ScanParameters']]],
  ['scanmode',['ScanMode',['../class_controller_1_1_path_waypoint.html#a963afd88069752441c4a561b4cf4227f',1,'Controller::PathWaypoint']]],
  ['scanres',['scanRes',['../class_controller_1_1_scan_parameters.html#a617ecb94db3dfb80acbc1930acfc8fa7',1,'Controller::ScanParameters']]],
  ['score',['score',['../class_controller_1_1_sphere.html#a92b793d7849fe5061ce879e1e0a309f9',1,'Controller::Sphere']]],
  ['source',['Source',['../class_controller_1_1_debug_trace.html#a0b32986c873425cee40c688112f6bec6',1,'Controller::DebugTrace']]],
  ['sphererecogn
var common__nav_8h =
    [ "point", "common__nav_8h.html#structpoint", [
      [ "a", "common__nav_8h.html#a7bb43530a17e55615fa418ff9f914991", null ],
      [ "x", "common__nav_8h.html#a8293fd2de3ce739deb6d53691fd21fcf", null ],
      [ "y", "common__nav_8h.html#a616ad85a2096d1566f5971666bbc3b3f", null ]
    ] ],
    [ "Height", "common__nav_8h.html#af637c15f691fc23f50337eb194758ec7", null ],
    [ "NavSetAltitudeReferenceHere", "common__nav_8h.html#a82da50e89ef6cb752d1554e61531333d", null ],
    [ "NavSetGroundReferenceHere", "common__nav_8h.html#ac51da095b4a1038ac7be8d3be9b9573e", null ],
    [ "NavSetWaypointHere", "common__nav_8h.html#af6eb4097676a1a2eaea357f56751e669", null ],
    [ "NavSetWaypointPosAndAltHere", "common__nav_8h.html#a14ad4ca3c686b25f5ef136245a8b693e", null ],
    [ "WaypointAlt", "common__nav_8h.html#a2de6e5b93a3552facfa675f1bccd8db2", null ],
    [ "WaypointX", "common__nav_8h.html#a2d51bcd8e90e2dea91009f895a452a22", null ],
    [ "WaypointY", "common__nav_8h.ht

    [ "common_nav_periodic_task_4Hz", "common__nav_8h.html#aeee253823276823c6ea935330d106280", null ],
    [ "compute_dist2_to_home", "common__nav_8h.html#a4603515f41786b54ea9383a65a9f249e", null ],
    [ "nav_move_waypoint", "common__nav_8h.html#a442b6321ba6cb77bcae6a05b14bb132b", null ],
    [ "nav_reset_alt", "common__nav_8h.html#a3288149314aa748ce8aa507335f50bfd", null ],
    [ "nav_reset_reference", "common__nav_8h.html#a1886ff619a5c03dc6c54729f301fa62e", null ],
    [ "nav_reset_utm_zone", "common__nav_8h.html#a9147dda4ed788fcde6cbb065e304e037", null ],
    [ "nav_update_waypoints_alt", "common__nav_8h.html#afff7da316d3e0f9de71424b08f7ac805", null ],
    [ "dist2_to_home", "common__nav_8h.html#aaa0755e7078e30953f14178d3dcd90ee", null ],
    [ "dist2_to_wp", "common__nav_8h.html#a1ea7c4cd1046a57c3444b89a1dce6250", null ],
    [ "ground_alt", "common__nav_8h.html#a7a9fcbdc46c61d7a15eafcb443211104", null ],
    [ "max_dist_from_home", "common__nav_8h.html#a1e29c2884fac341d819ffcc66
const dependencies = [
  'ngResource',
  'app.constants'
angular.module('api-services', dependencies)
require('./authorizations-api.service.coffee')
require('./quote-approval-api.service.coffee')
require('./copilot-project-details-api.service.coffee')
require('./copilot-projects-api.service.coffee')
require('./copilot-unclaimed-projects-api.service.coffee')
require('./inboxes-api.service.coffee')
require('./inboxes-project-api.service.coffee')
require('./message-update-api.service.coffee')
require('./messages-api.service.coffee')
require('./profiles-api.service.coffee')
require('./project-estimates-api.service.coffee')
require('./projects-api.service.coffee')
require('./status-report-api.service.coffee')
require('./status-report-collection-api.service.coffee')
require('./status-report-detail-api.service.coffee')
require('./steps-api.service.coffee')
require('./submissions-api.service.coffee')
require('./submissions-messages-api.service.coffee')
require('./submit-work-api.service.coffee
app.factory('ExpTracker', [ '$http', function($http) {
	var categoryService = CategoryService($http);
	var expenseService = ExpenseService($http);
	var historyService = HistoryService($http);
	var recurringService = RecurringExpenseService($http);
	var settingsService = SettingsService($http);
	var sessionService = SessionService($http);
	service = {
		categories : categoryService,
		expenses : expenseService,
		history : historyService,
		recurring : recurringService,
		settings : settingsService,
		session : sessionService,
		token : ''
	};
	service.setToken = function(token) {
		service.token = token;
		
		$http.defaults.headers.common.Authorization = token;
		service.refresh();
		if (typeof (Storage) !== "undefined") {
			localStorage.setItem("token", token);
		}
	};
	service.refresh = function() {
		expenseService.refreshMonths();
		categoryService.refresh();
		categoryService.refreshAvailableIcons();
		historyService.refresh();
		recurringService.refresh();
		settingsService.refr
define(['controllers/module', 'services/alert'], function (controllers) {
    'use strict';
    return controllers.controller('AlertsController', ['$scope', '$timeout', 'EventHub', function ($scope, $timeout, EventHub) {
        var lastMessageId = 0;
        var lastMessage = '';
        $scope.alerts = [];
        var addWarningMessage = function (message) {
            addMessage('warning', message, 2500);
        };
        var addErrorMessage = function (message) {
            addMessage('error', message, 4000);
        };
        var addSuccessMessage = function (message) {
            addMessage('success', message, 3000);
        };
        var addInfoMessage = function (message) {
            addMessage('info', message, 2000);
        };
        var addMessage = function (type, message, delay) {
            if(message == lastMessage) return;
            lastMessageId++;
            lastMessage = message;
            var alert = {'id': lastMessageId, 'type': type, 'msg': message
var dir_e84856aadd3662e9e76626e119df92ce =
    [ "ArtisanServiceProvider.php", "_artisan_service_provider_8php.html", [
      [ "ArtisanServiceProvider", "class_illuminate_1_1_foundation_1_1_providers_1_1_artisan_service_provider.html", "class_illuminate_1_1_foundation_1_1_providers_1_1_artisan_service_provider" ]
    ] ],
    [ "ComposerServiceProvider.php", "_composer_service_provider_8php.html", [
      [ "ComposerServiceProvider", "class_illuminate_1_1_foundation_1_1_providers_1_1_composer_service_provider.html", "class_illuminate_1_1_foundation_1_1_providers_1_1_composer_service_provider" ]
    ] ],
    [ "ConsoleSupportServiceProvider.php", "_console_support_service_provider_8php.html", [
      [ "ConsoleSupportServiceProvider", "class_illuminate_1_1_foundation_1_1_providers_1_1_console_support_service_provider.html", "class_illuminate_1_1_foundation_1_1_providers_1_1_console_support_service_provider" ]
    ] ],
    [ "FormRequestServiceProvider.php", "_form_request_service_provi
const MessageFormatter = {
  formatMessageSummary(messageSummary) {
    const message = messageSummary.message;
    return this.formatMessage(message._id, messageSummary.index, message, message, messageSummary.highlight_ranges, messageSummary.decoration_stats);
  },
  formatResultMessage(resultMessage) {
    const message = resultMessage.message;
    return this.formatMessage(message.id, resultMessage.index, message, message.fields, resultMessage.highlight_ranges, resultMessage.decoration_stats);
  },
  formatMessage(id, index, message, fields, highlightRanges, decorationStats) {
    const filteredFields = MessageFieldsFilter.filterFields(fields);
    return {
      id: id,
      timestamp: moment(message.timestamp).unix(),
      filtered_fields: filteredFields,
      formatted_fields: filteredFields,
      fields: fields,
      index: index,
      source_node_id: fields.gl2_source_node,
      source_input_id: fields.gl2_source_input,
      stream_ids: message.streams,
      highlight_
/**
 * @api {get} /users/:id 사용자 조회
 * @apiHeader (User) {String} authorization Authorization value.
 * @apiHeaderExample {json} Header-Example:
 *  {
 *    "Authorization": "accessTokenId"
 *  } 
 * @apiVersion 0.1.0
 * @apiName GetUser
 * @apiGroup User
 * @apiPermission admin
 *
 * @apiDescription
 * Find a model instance by {{id}} from the data source.
 *
 * @apiParam {String} id 		   userId	.
 *
 * @apiSuccess {String} id         userId.
 * @apiSuccess {Date}   name       Fullname of the User.
 *
 * @apiError UserNotFound   The <code>id</code> of the User was not found.
 */
/**
 * @api {post} /users 사용자 회원가입
 * @apiVersion 0.1.0
 * @apiName PostUser
 * @apiGroup User
 * @apiPermission user
 *
 * @apiDescription
 * Create a new instance of the model and persist it into the data source.
 *
 * @apiParam {String} email  		user eamil.
 * @apiParam {String} email  		user password.
 *
 * @apiSuccess {String} id          userId.
 *
 * @apiUse CreateUserError
 */
 /**
 * @api {post} /users
(function()
  angular
    .module("PandaMusicApp")
    .config(Config);
    
  function Config($routeProvider)
  {
    $routeProvider
			.when("/home",
      {
        templateUrl: "home/home.view.html",
        controller: "HomeController",
				controllerAs: "model"
      })
			.when("/search",
      {
        templateUrl: "search/search.view.html",
        controller: "SearchController",
				controllerAs: "model"
      })
		  .when("/admin",
      {
        templateUrl: "admin/admin.view.html",
        controller: "AdminController",
				controllerAs: "model"
      })
      .when("/login",
      {
        templateUrl: "login/login.view.html",
        controller: "LoginController",
				controllerAs: "model"
      })
		  .when("/logout",
      {
        templateUrl: "logout/logout.view.html",
        controller: "LogoutController",
				controllerAs: "model"
      })
      .when("/register",
      {
        templateUrl: "register/register.view.html",
        controller: "RegisterControll

				controllerAs: "model"
      })
		  .when("/header",
      {
        templateUrl: "header/header.view.html",
        controller: "HeaderController",
				controllerAs: "model"
      })
      .when("/profile",
      {
        templateUrl: "profile/profile.view.html",
        controller: "ProfileController",
				controllerAs: "model"
      })
      .when("/album",
      {
        templateUrl: "album/album.view.html",
        controller: "AlbumController",
				controllerAs: "model"
      })
			.when("/artist",
      {
        templateUrl: "artist/artist.view.html",
        controller: "ArtistController",
				controllerAs: "model"
      })
			.when("/song",
      {
        templateUrl: "song/song.view.html",
        controller: "SongController",
				controllerAs: "model"
      })
			.when("/user",
      {
        templateUrl: "user/user.view.html",
        controller: "UserController",
				controllerAs: "model"
      })
			.when("/user-comment",
      {
        templateUrl: "user-commen
'use strict';
var Message = messageModel.Message;
var MessageRoom = messageRoomModel.MessageRoom;
var messageController = {
    getMessages: getMessages,
    createMessage: createMessage
    
};
function getMessages(req, res) {
        var queryObj = {};
        let selectString = 'anonName picture';
        queryObj.messageRoom = req.params.roomID;
        var options ={};
        options.sort = {
            time: -1
        };
        options.page = req.query.page || 1;
        options.populate=[{ path: 'user', select: selectString, model: 'User' }];
        Message.paginate(queryObj,options).then(function(messages){
            return res.json(messages);
        }).catch(function(e){
            console.log("Error in getMessages");
            console.log(e);
        });
    }
    
function createMessage(req, res) {
    
        var recData = req.body;
        
        var message = new Message();
        
        message.user = req.user;    
        message.type = recData.type;
  

        message.messageRoom = req.params.roomID;
        message.message = recData.message;
        
        message.save().then(function(savedMessage) {
            saveMessageRoom({_id:savedMessage.messageRoom},savedMessage);
            sendMessage(req,res,savedMessage);
            res.json({savedMessage:savedMessage});
        }).catch(function(e){
            console.log("error in message save");
            console.log(e);
        });
function saveMessageRoom(queryObj,message,callback){
    
    MessageRoom.findOne(queryObj,function(err1,messageRoom){
        
        if(err1){
            console.log("err 89");
            console.log(err1);
        }
        
        
        messageRoom.lastMessage = message;
        messageRoom.lastMessageTime = message.time;
        messageRoom.save(function(err,messageRoomSaved){
            if(err){
                console.log(err);
            }
            
            if(callback){
                callback(messageRoomSaved);    
     
var express     = require('express'),
    api         = require('../api'),
    apiRoutes;
apiRoutes = function (middleware) {
    var router = express.Router();
    router.del = router.delete;
    router.get('/configuration', api.http(api.configuration.browse));
    router.get('/configuration/:key', api.http(api.configuration.read));
    router.get('/posts', api.http(api.posts.browse));
    router.post('/posts', api.http(api.posts.add));
    router.get('/posts/:id', api.http(api.posts.read));
    router.get('/posts/slug/:slug', api.http(api.posts.read));
    router.put('/posts/:id', api.http(api.posts.edit));
    router.del('/posts/:id', api.http(api.posts.destroy));
    router.get('/issues', api.http(api.issues.browse));
    router.post('/issues', api.http(api.issues.add));
    router.get('/issues/:id', api.http(api.issues.read));
    router.get('/issues/slug/:slug', api.http(api.issues.read));
    router.put('/issues/:id', api.http(api.issues.edit));
    router.del('/issues/:id', api

    router.get('/articles', api.http(api.articles.browse));
    router.post('/articles', api.http(api.articles.add));
    router.get('/articles/:id', api.http(api.articles.read));
    router.get('/articles/slug/:slug', api.http(api.articles.read));
    router.put('/articles/:id', api.http(api.articles.edit));
    router.del('/articles/:id', api.http(api.articles.destroy));
    router.get('/settings', api.http(api.settings.browse));
    router.get('/settings/:key', api.http(api.settings.read));
    router.put('/settings', api.http(api.settings.edit));
    router.get('/users', api.http(api.users.browse));
    router.get('/users/:id', api.http(api.users.read));
    router.get('/users/slug/:slug', api.http(api.users.read));
    router.get('/users/email/:email', api.http(api.users.read));
    router.put('/users/password', api.http(api.users.changePassword));
    router.put('/users/owner', api.http(api.users.transferOwnership));
    router.put('/users/:id', api.http(api.users.edit));
    ro

    router.del('/users/:id', api.http(api.users.destroy));
    router.get('/tags', api.http(api.tags.browse));
    router.get('/roles/', api.http(api.roles.browse));
    router.get('/slugs/:type/:name', api.http(api.slugs.generate));
    router.get('/themes', api.http(api.themes.browse));
    router.put('/themes/:name', api.http(api.themes.edit));
    router.get('/notifications', api.http(api.notifications.browse));
    router.post('/notifications', api.http(api.notifications.add));
    router.del('/notifications/:id', api.http(api.notifications.destroy));
    router.get('/db', api.http(api.db.exportContent));
    router.del('/db', api.http(api.db.deleteAllContent));
    router.post('/mail', api.http(api.mail.send));
    router.post('/mail/test', function (req, res) {
        api.http(api.mail.sendTest)(req, res);
    });
    router.post('/authentication/passwordreset',
        middleware.spamForgottenPrevention,
        api.http(api.authentication.generateResetToken)
    );
    route
angular.module('myApp').service('UrlService', ['baseUrl', 'documentationUrl', '$http', '$rootScope', function(baseUrl, documentationUrl, $http, $rootScope) {
	var UrlService = {};	
	$http.defaults.headers.common.apikey = $rootScope.apikey;
	var apiDoc = $http.get(baseUrl + documentationUrl);
	var getApi = function (apiDocumentation, resource) {
		var api;
		if (apiDocumentation !== undefined) {
			api = findApi(apiDocumentation.apis, resource);
		}
		return api ? removeProtocol(apiDocumentation.basePath + api.path) : undefined;		
	};
	function findApi(apiArray, resource){
		for(var index in apiArray){
			if (apiArray[index].description.search(resource) != -1){
				return apiArray[index];
			}
		}
		return undefined;
	}
	function removeProtocol(uri) {
	}
	UrlService.officeUrl = apiDoc.then(function (apiDocumentation) {
		return getApi(apiDocumentation.data, 'offices');
	});
	UrlService.countryUrl = apiDoc.then(function (apiDocumentation) {
		return getApi(apiDocumentation.data, 'countri
var Level1 = {
    enemyMax:1,
    giftMax:1,
    gifts:[
        {
            ShowType:"Repeate",
            ShowTime:"00:04",
            Types:[0,1,2,3]
        }
    ],
    enemies:[
        {
            ShowType:"Repeate",
            ShowTime:"00:02",
            Types:[0,1,2,3]
        },
        {
            ShowType:"Repeate",
            ShowTime:"00:03",
            Types:[3,4,5]
        }
        /*{
            ShowType:"Repeate",
            ShowTime:"00:08",
            Types:[0,4,3,5]
        },
        {
            ShowType:"Once",
            ShowTime:"00:6",
            Types:[0,2,4,3]
        },
        {
            ShowType:"Once",
            ShowTime:"00:16",
            Types:[0,2,5,4,3]
        },
        {
            ShowType:"Once",
            ShowTime:"00:25",
            Types:[0,3,5,4,3]
        },
        {
            ShowType:"Once",
            ShowTime:"00:35",
            Types:[4,5,3,1,3]
        },
        {
            ShowType:"Once",
   
var util = require('util'),
    ViewController = require('./viewController.js');
function SplitViewController() {
    ViewController.apply(this, arguments); 
    this.view.element.style.display = '-webkit-flex';
util.inherits(SplitViewController, ViewController);
SplitViewController.prototype.setLeftViewController = function (viewController) {
    this.leftViewController = viewController;
    this.leftViewController.view.element.style.flex = '1';
    this.view.appendChild(this.leftViewController.view);
    
    this.leftViewController.parentViewController = this;
    if (this.leftViewController.viewDidLoad) {
        this.leftViewController.viewDidLoad();    
    }
};
SplitViewController.prototype.setRightViewController = function (viewController) {
    this.rightViewController = viewController;
    this.rightViewController.view.element.style.flex = '1';
    this.view.appendChild(this.rightViewController.view);
    
    this.rightViewController.parentViewController = this;
    if (this
var scroll;
var logo = $(".nav>li>a>img");
var logoEl = $(".hidden-xs");
var nav = $(".navbar-nav");
var listElement = $(".navbar-nav li");
$(document).scroll(function() {
    scroll = $(document).scrollTop();
    if(scroll > 130){
      goLeft();
    }else{
      goMiddle();
    }
})
function logoLeft(){
  logo.css("position", "fixed");
  logo.css("left", "0");
  logo.css("top", "0");
  logo.css("height", "150px");
  logo.css("width", "150px");
function navLeft(){
  nav.css("position", "fixed");
  nav.css("left", "-40%");
  $(".navbar-nav>li>a").css("padding", "0");
  $(".navbar-nav>li>a").css("display", "block");
  $(".navbar-nav>li").css("float", "none");
  nav.css("top", "15%");
  nav.css("background-color", "white");
function goLeft(){
  logoLeft();
  navLeft();
function goMiddle(){
  logo.css("position", "relative");
  nav.css("position", "relative");
  nav.css("left", "auto");
function openNav(){
  if(nav.hasClass("right")){
    nav.removeClass("right");
    nav.animate({
      
var native_accessor = {
    send_sms: function (phone, message) {
       console.log(phone, message);
    },
    receive_message: function (json_message) {
        if (typeof this.process_received_message === 'function') {
            this.process_received_message(json_message);
        }
    },
    process_received_message: function (message_json) {
        var message = message_json.messages[0].message.replace(/\s/g, "");
        if(message.search(/bm/i) == 0) {
            var message=Sms.sign_up_response(message_json.messages[0].phone,message_json.messages[0].message);
            native_accessor.send_sms(message_json.messages[0].phone,message);
        }
        else if(message.search(/jj/i) == 0){
            var message=Sms.bid_response(message_json.messages[0].phone,message_json.messages[0].message);
            native_accessor.send_sms(message_json.messages[0].phone,message);
        }
function notify_message_received(message_json) {
   native_accessor.receive_message(message_
define(["underscore"], function(_){ 
var ControllerManager = function(){
	this.collection = [];
	this.path = "controllers/";
ControllerManager.prototype._getControllerPath = function(name){
	return this.path + name;
ControllerManager.prototype._load = function(name, callback_fn){
	var __this = this;
	requirejs([ this._getControllerPath(name) ], function(Controller){
		__this._setController(name, Controller);
		callback_fn();
	});
ControllerManager.prototype._setController = function(name, Controller){
	this.collection.push({
		name: name, 
		controller: new Controller()
	});
	console.log('Instanciando controlador ' + name);
ControllerManager.prototype._findController = function(name){
	var row = _.findWhere(this.collection, {name: name});
	if(!_.isUndefined(row)){
		return row.controller;
	}
	return undefined;
ControllerManager.prototype._getController = function(name, defineController){
	var Controller = this._findController(name);
	var __this = this;
	if(_.isUndefined(Controller)){
	
showWord :: Word -> ShowS
showWord (i,WTInt)       = showString "int " . shows i
showWord w@(_,WTFloat)   = showString "float " . shows (w2f(w))
showWord (0,WTReference) = showString "null"
showWord (r,t)           = shows t . showString " " . shows r 
showWord x               = error ("showWord " ++ show x)
showWord' :: Word -> String
showWord' w = showWord w ""
showInstr :: Instr -> ShowS
showInstr (Prim(PrimFun(f)))     = showString f
showInstr (Prim(PrimLdc([(0,WTReference)]))) = showString "aconst_null"
showInstr (Prim(PrimLdc([v])))     = showString "ldc " .shows (v : [])
showInstr (Prim(PrimLdc([v1,v2]))) = showString "ldc2 " .shows [v1,v2]
showInstr (LoadString s) = showString "ldc " . shows (resubstNewline s)
showInstr (Iinc(r,i)) = showString "iinc " 
                        . shows r . showString " "
                        . shows (i : [])
showInstr (Load(t,r)) = shows t . showString "load " . shows r
showInstr (Store(t,r))= shows t . showString "store " . shows r
showInstr

showInstr (Pop(0))    = showString "nop"
showInstr (Pop(1))    = showString "pop"
showInstr (Pop(2))    = showString "pop2"
showInstr (Dupx(0,1)) = showString "dup"
showInstr (Dupx(0,2)) = showString "dup2"
showInstr (Dupx(1,1)) = showString "dup_x1"
showInstr (Dupx(1,2)) = showString "dup2_x1"
showInstr (Dupx(2,1)) = showString "dup_x2"
showInstr (Dupx(2,2)) = showString "dup2_x2"
showInstr (Goto(o))   = showString "goto " . shows o
showInstr (Cond(rel,o)) = showString rel . showString " " . shows o
showInstr (Halt)      = showString "halt"
showInstr (MGetStatic(t,f,_)) = showString "getstatic " . showFRef f .
                                showString " " . shows t
showInstr (MPutStatic(t,f,_)) = showString "putstatic " . showFRef f .
                                showString " " . shows t
showInstr (MInvokeStatic(rt,m,_)) = showString "invokestatic " . shows m .
                                    shows rt
showInstr (Return(MTvoid)) = showString "return"
showInstr (Return(t))     

showInstr (NewArray(TJInt,1))    = showString "newarray int"
showInstr (NewArray(TJByte,1))   = showString "newarray byte"
showInstr (NewArray(TJChar,1))   = showString "newarray char"
showInstr (NewArray(TJShort,1))  = showString "newarray short"
showInstr (NewArray(TJFloat,1))  = showString "newarray float"
showInstr (NewArray(TJLong,1))   = showString "newarray long"
showInstr (NewArray(TJDouble,1)) = showString "newarray double"
showInstr (NewArray(t,1))        = showString "anewarray "
                                   . showAddrType t
showInstr (NewArray(t,d))       = showString "multianewarray "
                                  . shows (TJArray(t)) . showString " "
                                  . shows d
showInstr (ArrayLength)         = showString "arraylength"
showInstr (ALoad(t))            = shows t . showString "aload"
showInstr (AStore(t))           = shows t . showString "astore"
showInstr (New(cn))         = showString "new " . showClassName cn
showInstr (MGetFiel

                               showString " " . shows t
showInstr (MPutField(t,f,_))   = showString "putfield " . showFRef f .
                                 showString " " . shows t
showInstr (InstanceOf(t))  = showString "instanceof " . shows t
showInstr (Checkcast(t))   = showString "checkcast " . shows t
showInstr (MInvokeSpecial(rt,m,_))   = showString "invokespecial " . shows m .
                                       shows rt
showInstr (MInvokeVirtual(rt,m,_)) = showString "invokevirtual "
                                   . shows m . shows rt
showInstr (Athrow)               = showString "athrow"
showInstr (Jsr(o))               = showString "jsr " . shows o
showInstr (Ret(r))               = showString "ret " . shows r
showInstr (TableSwitch _ _ _)    = showString "tableswitch"
showInstr (LookupSwitch _ _)     = showString "lookupswitch"
showInstr e = error ("instance Text Instr: " ++ primPrint 0 e "")
showArgs :: (a -> ShowS) -> [a] -> ShowS
showArgs shows xs = showString

  where showArgs' []     = id
        showArgs' [x]    = shows x
        showArgs' (x:xs) = shows x . showString ", " . showArgs' xs
showSwitch :: Switch -> ShowS
showSwitch (Noswitch)        = id
showSwitch (Call(meth,locs)) = showString "call: " . showString (mNm(meth))
                             . showArgs showWord locs
showSwitch (Result([]))      = showString "yield: Nothing"
showSwitch (Result(vs))      = showString "yield: " . shows vs
showSwitch (InitClass(c))    = showString "initclass: " . showClass c
showSwitch (Throw(r))        = showString "throw: " . shows r
showSwitch (ThrowInit(r))    = showString "throwInit: " . shows r
prettyPrintTypeAssignment :: (Code,[(Nat,[VerifyType])],
                                   [(Nat, Map RegNo VerifyType)]) -> ShowS
prettyPrintTypeAssignment(code,opdV,regV) = 
   showSepBy' "\n" (map f (zip [0..] code))
 where f (i,instr) = shows i . showString ": " . showInstr instr .
                     showString "\t" . g showList (opd i) . 
   
var Registry = require('./registry').createRegistry
  , EventEmitter = require('events').EventEmitter
  , mdns = require('mdns')
  ;
exports.discovery = function(serviceType, serviceVersion) {
  var self = new EventEmitter()
    , registry = new Registry()
    , mdnsBrowser = new mdns.Browser(mdns.udp(serviceType, serviceVersion))
    ;
  mdnsBrowser.on('serviceUp', serviceUp);
  mdnsBrowser.on('serviceDown', serviceDown);
  mdnsBrowser.start();
  function serviceUp(service) {
    if (!serviceIsKnown(service)) {
      addItem(service);
    } else {
      updateItem(service);
    }
  }
  function serviceDown(service) {
    if (serviceIsKnown(service)) {
      removeItem(service);
    }
  }
  function serviceIsKnown(service) {
    var found = false;
    registry.readAll(function(err, store) {
      Object.keys(store).forEach(function(value, index, array) {
        if(value === service.name) {
          found = true;
        }
      });
    });
    return found;
  }
  function addItem(ser
define([
  'automan/helpers/patterns/Factory',
  'automan/service/ServiceProviderErrors',
  'automan/service/ServiceProvider',
  '/test/fixtures/automan/helpers/patterns/abstract/FactoryItemInterface.js',
  '/test/fixtures/automan/service/abstract/ServiceInterface.js',
], function(Factory, ServiceProviderErrors, ServiceProvider, FactoryItem, Service) {
  describe('automan/service/ServiceProvider', function() {
    var serviceProvider, factory;
    beforeEach(function() {
      serviceProvider = new ServiceProvider();
      factory = new Factory();
    });
    describe('#registerFactory', function() {
      it('Should return self.', function() {
        serviceProvider.registerFactory('factory', factory).should.equal(serviceProvider);
      });
      it('Should register a factory.', function() {
        serviceProvider.registerFactory('factory', factory).has('factory').should.be.true;
      });
      it('Should thrown ServiceProviderErrors.InvalidFactory if a service is registered with 

        var throwMe = function() {
          serviceProvider.registerFactory('factory', {});
        };
        throwMe.should.throw(ServiceProviderErrors.InvalidFactory);
      });
    });
    describe('#registerService', function() {
      it('Should return self.', function() {
        serviceProvider.registerService(Service).should.equal(serviceProvider);
      });
      it('Should register a service.', function() {
        serviceProvider.registerService(Service).has('service').should.be.true;
      });
      it('Should thrown ServiceProviderErrors.InvalidService if a service is registered with implementing ServiceInterface.', function() {
        var throwMe = function() {
          serviceProvider.registerService({});
        };
        throwMe.should.throw(ServiceProviderErrors.InvalidService);
      });
    });
    describe('#register', function() {
      it('Should return self.', function() {
        serviceProvider.register('item', {}).should.equal(serviceProvider);
      })

      it('Should register an instanse.', function() {
        serviceProvider.register('item', {}).has('item').should.be.true;
      });
    });
    describe('#has', function() {
      it('Should determine if an object has been registered.', function() {
        serviceProvider.has('item').should.be.false;
        serviceProvider.register('item', {}).has('item').should.be.true;
      });
      it('Should determine if a factory has been registered.', function() {
        serviceProvider.has('factory').should.be.false;
        serviceProvider.registerFactory('factory', factory).has('factory').should.be.true;
      });
      it('Should determine if a factory provides required item.', function() {
        serviceProvider.registerFactory('factory', factory).has('item').should.be.false;
        factory.register(FactoryItem);
        serviceProvider.has('item').should.be.true;
      });
      it('Should determine if a service is registered.', function() {
        serviceProvider.has('service

        serviceProvider.registerService(Service).has('service').should.be.true;
      });
    });
    describe('#get', function() {
      it('Should return a registered object.', function() {
        should.not.exist(serviceProvider.get('item'));
        serviceProvider.register('item', {}).get('item').should.deep.equal({});
      });
    });
    describe('#create', function() {
      it('Should create a registered service with arguments.', function() {
        should.not.exist(serviceProvider.create('service'));
        var service = serviceProvider.registerService(Service).create('service', 'key', 'value');
        service.getKey().should.equal('key');
        service.getValue().should.equal('value');
      });
      it('Should create a registered factory item with arguments.', function() {
        should.not.exist(serviceProvider.create('item'));
        factory.register(FactoryItem);
        var item = serviceProvider.registerFactory('factory', factory).create('item', 'key', 'valu
/* */ 
(function(process) {
  'use strict';
  var EventConstants = require("./EventConstants");
  var invariant = require("./invariant");
  var injection = {
    Mount: null,
    injectMount: function(InjectedMount) {
      injection.Mount = InjectedMount;
      if ("production" !== process.env.NODE_ENV) {
        ("production" !== process.env.NODE_ENV ? invariant(InjectedMount && InjectedMount.getNode, 'EventPluginUtils.injection.injectMount(...): Injected Mount module ' + 'is missing getNode.') : invariant(InjectedMount && InjectedMount.getNode));
      }
    }
  };
  var topLevelTypes = EventConstants.topLevelTypes;
  function isEndish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
  }
  function isMoveish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
  }
  function isStartish(topLevelType) {
  

  }
  var validateEventDispatches;
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches = function(event) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchIDs = event._dispatchIDs;
      var listenersIsArr = Array.isArray(dispatchListeners);
      var idsIsArr = Array.isArray(dispatchIDs);
      var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
      var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
      ("production" !== process.env.NODE_ENV ? invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
    };
  }
  function forEachEventDispatch(event, cb) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;
    if ("production" !== process.env.NODE_ENV) {
      validateEventDispatches(event);
    }
    if (Array.isArray(dis

      for (var i = 0; i < dispatchListeners.length; i++) {
        if (event.isPropagationStopped()) {
          break;
        }
        cb(event, dispatchListeners[i], dispatchIDs[i]);
      }
    } else if (dispatchListeners) {
      cb(event, dispatchListeners, dispatchIDs);
    }
  }
  function executeDispatch(event, listener, domID) {
    event.currentTarget = injection.Mount.getNode(domID);
    var returnValue = listener(event, domID);
    event.currentTarget = null;
    return returnValue;
  }
  function executeDispatchesInOrder(event, cb) {
    forEachEventDispatch(event, cb);
    event._dispatchListeners = null;
    event._dispatchIDs = null;
  }
  function executeDispatchesInOrderStopAtTrueImpl(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;
    if ("production" !== process.env.NODE_ENV) {
      validateEventDispatches(event);
    }
    if (Array.isArray(dispatchListeners)) {
      for (var i = 0; i < dispatchListener

        if (event.isPropagationStopped()) {
          break;
        }
        if (dispatchListeners[i](event, dispatchIDs[i])) {
          return dispatchIDs[i];
        }
      }
    } else if (dispatchListeners) {
      if (dispatchListeners(event, dispatchIDs)) {
        return dispatchIDs;
      }
    }
    return null;
  }
  function executeDispatchesInOrderStopAtTrue(event) {
    var ret = executeDispatchesInOrderStopAtTrueImpl(event);
    event._dispatchIDs = null;
    event._dispatchListeners = null;
    return ret;
  }
  function executeDirectDispatch(event) {
    if ("production" !== process.env.NODE_ENV) {
      validateEventDispatches(event);
    }
    var dispatchListener = event._dispatchListeners;
    var dispatchID = event._dispatchIDs;
    ("production" !== process.env.NODE_ENV ? invariant(!Array.isArray(dispatchListener), 'executeDirectDispatch(...): Invalid `event`.') : invariant(!Array.isArray(dispatchListener)));
    var res = dispatchListener ? dispatchListener(
function parser(reader) {
    var result = [];
    while (reader.remain()) {
        var info = [
            reader.readString16()
            ,reader.readUINT32()
        ];
        result.push(info[0]);
    }
    return result;
/**
INFO - API.info:["赵",606]
INFO - API.info:["钱",606]
INFO - API.info:["孙",606]
INFO - API.info:["李",606]
INFO - API.info:["周",606]
INFO - API.info:["吴",606]
INFO - API.info:["郑",606]
INFO - API.info:["王",606]
INFO - API.info:["冯",606]
INFO - API.info:["陈",606]
INFO - API.info:["褚",606]
INFO - API.info:["卫",606]
INFO - API.info:["蒋",606]
INFO - API.info:["沈",606]
INFO - API.info:["韩",606]
INFO - API.info:["杨",606]
INFO - API.info:["朱",606]
INFO - API.info:["秦",606]
INFO - API.info:["尤",606]
INFO - API.info:["许",606]
INFO - API.info:["何",606]
INFO - API.info:["吕",606]
INFO - API.info:["施",606]
INFO - API.info:["张",606]
INFO - API.info:["孔",606]
INFO - API.info:["曹",606]
INFO - API.info:["严",606]
INFO - API.info:["华",606]
INFO - API.info:["金",606]
INFO - API.

INFO - API.info:["陶",606]
INFO - API.info:["姜",606]
INFO - API.info:["戚",606]
INFO - API.info:["谢",606]
INFO - API.info:["邹",606]
INFO - API.info:["喻",606]
INFO - API.info:["柏",606]
INFO - API.info:["水",606]
INFO - API.info:["窦",606]
INFO - API.info:["章",606]
INFO - API.info:["云",606]
INFO - API.info:["苏",606]
INFO - API.info:["潘",606]
INFO - API.info:["葛",606]
INFO - API.info:["奚",606]
INFO - API.info:["范",606]
INFO - API.info:["彭",606]
INFO - API.info:["郎",606]
INFO - API.info:["鲁",606]
INFO - API.info:["韦",606]
INFO - API.info:["昌",606]
INFO - API.info:["马",606]
INFO - API.info:["苗",606]
INFO - API.info:["凤",606]
INFO - API.info:["花",606]
INFO - API.info:["方",606]
INFO - API.info:["俞",606]
INFO - API.info:["任",606]
INFO - API.info:["袁",606]
INFO - API.info:["柳",606]
INFO - API.info:["酆",606]
INFO - API.info:["鲍",606]
INFO - API.info:["史",606]
INFO - API.info:["唐",606]
INFO - API.info:["费",606]
INFO - API.info:["廉",606]
INFO - API.info:["岑",606]
INFO - API.info:["薛",606]
INFO - API.

INFO - API.info:["贺",606]
INFO - API.info:["倪",606]
INFO - API.info:["汤",606]
INFO - API.info:["滕",606]
INFO - API.info:["殷",606]
INFO - API.info:["罗",606]
INFO - API.info:["毕",606]
INFO - API.info:["郝",606]
INFO - API.info:["邬",606]
INFO - API.info:["安",606]
INFO - API.info:["常",606]
INFO - API.info:["乐",606]
INFO - API.info:["于",606]
INFO - API.info:["时",606]
INFO - API.info:["傅",606]
INFO - API.info:["皮",606]
INFO - API.info:["卞",606]
INFO - API.info:["齐",606]
INFO - API.info:["康",606]
INFO - API.info:["伍",606]
INFO - API.info:["余",606]
INFO - API.info:["元",606]
INFO - API.info:["卜",606]
INFO - API.info:["顾",606]
INFO - API.info:["孟",606]
INFO - API.info:["平",606]
INFO - API.info:["黄",606]
INFO - API.info:["和",606]
INFO - API.info:["穆",606]
INFO - API.info:["萧",606]
INFO - API.info:["欧阳",1000]
INFO - API.info:["太史",1000]
INFO - API.info:["端木",1000]
INFO - API.info:["上官",1000]
INFO - API.info:["司马",1000]
INFO - API.info:["东方",1000]
INFO - API.info:["独孤",1000]
INFO - API.info:["南宫",1
$.fn.navigationController = function() {
  var nav = $.fn.navigationController;
  var $el = $(this);
  var $desktopNav = $el.find("nav.navigation");
  var $mobileNav = $el.find("nav.mobile-navigation");
  var $currentNav = $desktopNav;
  var navVisible = true;
  nav.init = function() {
    nav.addBindings();
    nav.addKeyboardBindings();
  };
  nav.addBindings = function() {
    $el.on("mouseenter", "nav", (function(e) {
      if ($currentNav === $desktopNav) {
        nav.showCurrentNavigation();
      }
    }));
    $el.on("click", ".nav-expand", (function(e) {
      if ($currentNav === $mobileNav && navVisible === false) {
        nav.showCurrentNavigation();
      } else if ($currentNav === $mobileNav && navVisible === true) {
        nav.hideCurrentNavigation();
      }
    }));
  };
  nav.addKeyboardBindings = function() {
    var spacebar = 32;
    var one = 49;
    var two = 50;
    var three = 51;
    var four = 52;
    var five = 53;
    $("body").keyup(function(e) {
      i

        switch (e.keyCode) {
          case spacebar:
            nav.showCurrentNavigation();
            break;
          case one:
            window.location.pathname = $(".navlinks .link a").eq(0).attr("href");
            break;
          case two:
            window.location.pathname = $(".navlinks .link a").eq(1).attr("href");
            break;
          case three:
            window.location.pathname = $(".navlinks .link a").eq(3).attr("href");
            break;
          case four:
            window.location.pathname = $(".navlinks .link a").eq(4).attr("href");
            break;
        }
      }
    });
  };
  nav.showCurrentNavigation = function() {
    if (!navVisible) {
      $currentNav.addClass("is-visible");
      navVisible = true;
    }
  };
  nav.hideCurrentNavigation = function() {
    if (navVisible) {
      $currentNav.removeClass("is-visible");
      navVisible = false;
    }
  };
  nav.activateDesktopNavigation = function() {
    if ($currentNav != $deskt
api = {}
api._callbacks = [];
api._callback = function(id, arr) {
  api._callbacks[id].apply(null, arr);
api._register_callback = function(callback) {
  api._callbacks.push(callback);
  return api._callbacks.length - 1;
$(function(){window._api.callback.connect(api._callback);});
api.invokeRubySubprocess = function(args, callback) {
  return window._api.invokeRubySubprocess(args, api._register_callback(callback));
api.killSubprocess = window._api.killSubprocess;
api.readThumbnail = window._api.readThumbnail;
api.exifTime = window._api.exifTime;
api.droppedFilesRecursive = window._api.droppedFilesRecursive;
api.makeDirectory = window._api.makeDirectory;
api.writeFile = window._api.writeFile;
api.readFile = window._api.readFile;
api.readFileDialog = window._api.readFileDialog;
api.openProjectFile = window._api.openProjectFile;
api.saveAsDialog = window._api.saveAsDialog;
api.setDeleteMenu = window._api.setDeleteMenu;
api.setUndoMenu = window._api.setUndoMenu;
api.setRedoMenu = window._ap
"use strict";
$(init);
function init(){
	handlers();
	listShows();
function listShows(){
	var el = $('#shows');
	getShows(function(shows){
		for (var i = 0; i < shows.length; i++){
			addShowItem(el, shows[i]);
		}
	});
function handlers(){
	$('#newShow').submit(function(e){
		e.preventDefault();
		var form = $(this);
		createShow({post:{title:form.find('[name=title]').val()}},function(show){
			goToShow(show._id);
		});
		return false;
	});
	$('#existingShow').submit(function(e){
		e.preventDefault();
		var form = $(this);
		var showId = form.find('[name=_id]').val();
		goToShow(showId);
		return false;
	});
function goToShow(showId){
	if (showId){
		window.location = '/show/' + showId;
	}
/**DOM**/
function addShowItem(el, show){
	el.append('<p></p>').append(
		$('<a style="color:red;"></a>')
		.text(show.title)
		.attr('href', '/show/' + show._id)
	);
/**Ajax**/
function createShow(data, cb){
	$.post('/api/post', data, function(show){
		cb(show);
	}).fail(function(err){
		console.di
require.config({
	paths : {
		transferComm : 'app/modules/transfer/comm',
		transferController : 'app/modules/transfer/controller',
		transferModel : 'app/modules/transfer/model',
		transferView : 'app/modules/transfer/view',
		transferTemplate : 'app/modules/transfer/template',
		noticeDespositTool : 'app/modules/noticeDeposit/model/common',
	}
});
define(['transferController/CrossBankGatherController',
        'transferController/CreditCardRepayController',
		'transferController/banktransfer/BankTransferController',
		'transferController/gathringManage/GathringManageController',
		'transferController/transferQuery/TransferQueryController',
		'transferController/gathringManage/editGathring/EditGathringController',
		'transferController/gathringManage/mergerSame/MergerGathringController',
		'transferController/BankTransferMainController',
		'transferController/gathringManage/classifyManage/ClassifyManageController',
		'transferController/reserveTransferC',
		'transferComm/commControll/
function fetchingArticles() {
  return {
    type: 'FETCHING_ARTICLES',
  };
function postArticles(articles) {
  return {
    type: 'POST_ARTICLES',
    articles: {
      ...articles,
      status: 'posted',
    },
  };
export function requestAllArticles() {
  return (dispatch) => {
    dispatch(fetchingArticles());
    return fetchAllArticles()
      .then((articles) => {
        dispatch(postArticles(articles));
      });
  };
export function requestArticles(tid) {
  return (dispatch) => {
    dispatch(fetchingArticles());
    return fetchArticles(tid)
      .then((articles) => {
        dispatch(postArticles(articles));
      });
  };
export function requestArticlesByTeam(id) {
  return (dispatch) => {
    dispatch(fetchingArticles());
    return fetchArticlesByTeam(id)
      .then((articles) => {
        dispatch(postArticles(articles));
      });
  };
export function requestArticlesByTeams(ids) {
  return (dispatch) => {
    dispatch(fetchingArticles());
    return fetchArticlesBy
'use strict';
module.exports = function(json){
	/* 	confirm the the passed in string is valid json
		if so, return the parsed json,
		else return the invalid json response
	*/
	try {
		var valid_json = JSON.parse(json);
		return {
			response:	build_shows(valid_json)
		}
	} catch(e) {
		return {
    		"error": "Could not decode request: JSON parsing failed"
		}
	}
	/*	filters the shows to match the requirements then reduces the show object to only the requested fields */
	function build_shows(shows_json){
			return shows_json.payload.filter(function(show){
					if(show.drm && show.episodeCount>0 && check_show_obj(show)) return true;
				}).map(function(show){
					return show_obj(show);
				});
	}
	/* checks the show object has the required items */
	function check_show_obj(show){
		if(!show.image || !show.slug || ! show.title || !show.image.showImage) return false;
		return true;
	}
	/* build the show object with the required items */
	function show_obj(show){
		return {
					image: s
var lib = module.exports;
var compose = require('compose.io');
var Promise = compose.require('bluebird');
var soCache = {};
var apiCache = {};
lib.Promise = Promise;
var getkey = function(apiConfig) {
    return apiConfig.apiKey + apiConfig.transport + apiConfig.url;
};
var getApi = function(apiConfig) {
    return apiCache[ getkey(apiConfig) ];
};
var setApi = function(apiConfig, api) {
    var _key = getkey(apiConfig);
    apiCache[ _key ] = api;
    soCache[ _key ] = soCache[ _key ] || {};
};
var getSO = function(apiConfig, soid) {
    var _key = getkey(apiConfig);
    return getApi(apiConfig) && soCache[ _key ][ soid ] ? soCache[ _key ][ soid ] : null;
};
var setSO = function(apiConfig, so) {
    if(getApi(apiConfig)) {
        soCache[ getkey(apiConfig) ][ so.id ] = so.toJson();
    }
};
lib.get = function(apiConfig) {
    var api = getApi(apiConfig);
    if(api) {
        return Promise.resolve(api);
    }
    api = new compose(apiConfig);
    setApi(apiConfig, api);
    
    ret
var nav__drop_8h =
    [ "NavDropAligned", "nav__drop_8h.html#aa5f82371a90592d2e1bc26a5a8a0e2a9", null ],
    [ "NavDropCloseHatch", "nav__drop_8h.html#a587bf7d4a842e769c5c865d19fd31d8e", null ],
    [ "NavDropComputeApproach", "nav__drop_8h.html#ac9cb0754e785ce74d50e83ee4fdcb6d0", null ],
    [ "NavDropShoot", "nav__drop_8h.html#a4529b8a7a5a48feb03bcf1611dcfdec6", null ],
    [ "NavDropUpdateRelease", "nav__drop_8h.html#a0afc3fc4b72b658b6bff7826116db8ee", null ],
    [ "compute_alignment", "nav__drop_8h.html#a82702082821f9c3cd860e753a13218f0", null ],
    [ "nav_drop_compute_approach", "nav__drop_8h.html#a97fa94f8d1ac8b800d56a80925ecb3ca", null ],
    [ "nav_drop_shoot", "nav__drop_8h.html#a0e9ac240f39dc33492426056b1299227", null ],
    [ "nav_drop_update_release", "nav__drop_8h.html#ab65dbfc40970aaba82469b775a829995", null ],
    [ "nav_drop_start_qdr", "nav__drop_8h.html#a833c2bc4de81c7daf803571457ac1d30", null ],
    [ "nav_drop_trigger_delay", "nav__drop_8h.html#a30c0e5e0fbaf12b13
/**
 * Created by vincentfxz on 15/7/1.
 */
/**
 * 服务表单处理
 *
 */
/**
 * 服务新增弹出表单
 */
var parentId;
$(function(){
    var node = $('.mxservicetree').tree('getSelected');
    if(node.serviceCategory !=null){
        parentId = node.serviceCategory.categoryId;
    }
    if(node.service != null){
        parentId = node.service.categoryId;
    }
    /**
     * 服务新增保持按钮事件
     */
    var saveService = function saveService(){
        if (!$("#serviceForm").form('validate')) {
            return false;
        }
        var service = {};
        service.serviceId = $('#serviceId').val();
        service.serviceName = $('#serviceName').val();
        service.desc = $('#discription').val();
        service.remark = $('#remark').val();
        service.categoryId = parentId;
        service.version = $('#version').val();
        service.state = $('#state').val();
        if(PROCESS_INFO && PROCESS_INFO.processId){
            service.processId = PROCESS_INFO.processId;
        }
        serviceMa
var MapRouter = Backbone.Router.extend ({
	  routes: {
	  	         "pcthchild" : "showPcthchild",
	  	         "pct_finance" : "showPct_finance",
	  	         "pctind_professional" : "showPct_professional",
	  	         "pctocc_profmanage" : "showPctocc_profmanage",
	  	         "pctcollege" : "showPctcollege",
	  	         "pctinc_0_25k" : "showPctinc_0_25k",
	  	         "pctinc_25k_50k" : "showPctinc_25k_50k",
	  	         "pctinc_50k_100k" : "showPctinc_50k_100k",
	  	         "pctinc_100k_more" : "showPctinc_100k_more",
	  	         "medhhincome" : "showMedhhincome",
	  	         "pctpoverty" : "showPctpoverty",
	  	         "pctpublicassist" : "showPctpublicassist",
	  	         "units" : "showUnits",
	  	         "pctown" : "showPctown",
	  	         "pctrent" : "showPctrent",
	  	         "pctvacant" : "showPctvacant",
	  	         "medianvalue" : "showMedianvalue",
	  	         "medianrent" : "showMedianrent",
	  	         "pctincomerent_30_more" : "showPctincomerent_30_more"

	  	         "medianpctincomerent" : "showMedianpctincomerent",
	  	         "pctinc_mortgage_30_more" : "showPctinc_mortgage_30_more",
	  	         "pctsameres" : "showPctsameres",
	  	         "pctind_info" : "showPctind_info",
	  	         "pctunits_newres_2000" : "showPctunits_newres_2000",
	  	         "pctunits_newres" : "showPctunits_newres"
	  },
	  showPcthchild: function(){
	  	setProperty("pcthhchild", "#FFFF33", "#FF00CC"); 
	  },
	  showPct_finance: function(){
		setProperty("pctind_finance", "#CCFFCC", "#9900FF"); 
	  },
	  showPct_professional: function(){
		setProperty("pctind_professional", "#FF0033", "#9933FF"); 
	  },
	  showPctocc_profmanage: function(){
	  },
	  showPctcollege: function(){
	  },
	  showPctinc_0_25k: function(){
	  },
	  showPctinc_25k_50k: function(){
	  },
	  showPctinc_50k_100k: function(){
	  },
	  showPctinc_100k_more: function(){
	  },
	  showMedhhincome: function(){
	  },
	  showPctpoverty: function(){
		setProperty("pctpoverty", "#07E500", 
requirejs([
  'modernizr',
  'jquery',
  'menuController',
  'featuredController',
  'lineController',
  'tabsController',
  'compareController',
  'favoritesController',
  'itemController',
  'fullViewController',
  'catalogueController',
  'faqController',
  'cardController',
  'incDecController',
  'loginController',
  'controlsController',
  'PasswordController',
  'UpScrollController'
],function(
  modernizr, 
  jquery, 
  menuController, 
  featuredController, 
  lineController, 
  tabsController, 
  compareController, 
  favoritesController, 
  itemController, 
  fullViewController, 
  catalogueController, 
  faqController,
  cardController,
  incDecController,
  loginController,
  controlsController,
  PasswordController,
  UpScrollController
){
  $(document).ready(function(){
    new controlsController();
    new menuController();
    $('.featured-widget').each(function(index, widget){
      new featuredController(widget);
    });
    $('.inc-dec-widget').each(function(index, 
$(document).ready(function(){
        PopUpHide();
    });
    function ShowREK(){
        $("#popup-details").show();
		$("#bg-popup").show();
    }
    function ShowDELAY(){
        $("#popup-delay").show();
		$("#bg-popup").show();
    }
    function ShowERR(){
        $("#popup-error").show();
		$("#bg-popup").show();
    }
    function ShowCARD2(){
        $("#new-card-account").show();
		$("#popup-new-account").show();
		$("#popup-new-card").hide();
		$("#bg-popup").show();
    }
    function ShowCARD(){
        $("#new-card-account").show();
		$("#popup-new-card").show();
		$("#bg-popup").show();
    }
    function ShowCONFIRM(){
		$("#popup-confirmation").show();
		$("#bg-popup").show();
    }
    function allCARD(){
        $(".whom-popup").show();
    }
    function ShowCycle(){
        $("#popup-cycle").show();
		$(".cycle-complete").show();
		$("#bg-popup").show();
		$(".cycle-part").hide();
    }
    function ShowPart(){
        $("#popup-cycle").show();
		$(".cycle-comple

		$("#bg-popup").show();
		$(".cycle-part").show();
    }
    function ShowSet(){
        $("#popup-settings").show();
		$(".new-login").show();
		$("#bg-popup").show();
		$(".new-password").hide();
		$(".new-phone").hide();
    }
    function ShowPASS(){
        $("#popup-settings").show();
		$(".new-login").hide();
		$("#bg-popup").show();
		$(".new-password").show();
		$(".new-phone").hide();
    }
    function ShowPHONE(){
        $("#popup-settings").show();
		$(".new-login").hide();
		$("#bg-popup").show();
		$(".new-password").hide();
		$(".new-phone").show();
    }
    function PopUpHide(){
        $("#popup-details").hide();
		$("#popup-confirmation").hide();
		$("#popup-error").hide();
		$("#popup-delay").hide();
		$("#new-card-account").hide();
		$("#popup-new-account").hide();
		$("#bg-popup").hide();
		$(".whom-popup").hide();	
		$("#popup-cycle").hide();
		$(".cycle-complete").hide();
		$(".new-password").hide();
		$(".new-phone").hide();
		$(".new-login").hide();
		$("#
var Level1 = {
    enemyMax:6,
    enemies:[
        {
            ShowType:"Repeate",
            ShowTime:"00:02",
            Types:[0,1,2]
        },
        {
            ShowType:"Repeate",
            ShowTime:"00:05",
            Types:[3,4,5]
        }
        /*{
            ShowType:"Repeate",
            ShowTime:"00:08",
            Types:[0,4,3,5]
        },
        {
            ShowType:"Once",
            ShowTime:"00:6",
            Types:[0,2,4,3]
        },
        {
            ShowType:"Once",
            ShowTime:"00:16",
            Types:[0,2,5,4,3]
        },
        {
            ShowType:"Once",
            ShowTime:"00:25",
            Types:[0,3,5,4,3]
        },
        {
            ShowType:"Once",
            ShowTime:"00:35",
            Types:[4,5,3,1,3]
        },
        {
            ShowType:"Once",
            ShowTime:"00:50",
            Types:[0,3,2,1,0,3]
        },
        {
            ShowType:"Once",
            ShowTime:"01:15",
       
(function($) {
$(function() {
	$("#nav ul li ul").css({ display: 'none' });
	$("#nav ul li").hover(function() {
		$(this).children('ul').stop(true, true).delay(50).animate({ "height": "show", "opacity": "show" }, 200 );
	}, function(){
		$(this).children('ul').stop(true, true).delay(50).animate({ "height": "hide", "opacity": "hide" }, 200 );
	});
});
$(function() {
	var navAClass = '#nav > ul > li > a';
	$(navAClass).css({'paddingLeft' : 0 , 'paddingRight' : 0});
	var navCount = $(navAClass).size();
	var navOW = $('#nav').outerWidth();
	var navWidth = 0;
	var navDiff = 0;
	var navPad = 0;
	$(navAClass).each(function() {
		navWidth += $(this).outerWidth();
	});
	  navDiff = navOW - navWidth - 2;
	  navPad = navDiff/navCount;
	  navPad = navPad/2;
	  navPad = Math.floor(navPad);
	  navPad = navPad;
	$(navAClass).css({'paddingLeft' : navPad , 'paddingRight' : navPad});
});
$(window).load(function() {
	var navAClass = '#nav > ul > li > a';
	$(navAClass).css({'paddingLeft' : 0 , 'paddingRig
function restServiceFactory() {
    var service = {};
    /*Events*/
    service.eventsReadAll = service.ip + 'events';
    service.eventsCreate = service.ip + 'events';
    service.eventsUpdate = service.ip + 'events/{UUID}';
    service.eventsDelete = service.ip + 'events/{UUID}';
    /*Details*/
    service.detailsReadAll = service.ip + 'details';
    service.detailsCreate = service.ip + 'details';
    service.detailsUpdate = service.ip + 'details/{UUID}';
    service.detailsDelete = service.ip + 'details/{UUID}';
    service.detailsPrint = service.ip + 'details/print';
    /*Dampers*/
    service.dampersCreate = service.ip + 'dampers';
    service.dampersCreateContract = service.ip + 'dampers/{uuid}/contracts';
    service.dampersCreateAccessory = service.ip + 'dampers/{uuid}/accessories';
    service.dampersAll = service.ip + 'dampers';
    service.dampersOne = service.ip + 'dampers/{uuid}';
    service.dampersUpdate = service.ip + 'dampers/{uuid}';
    service.dampersDelete = ser

    /*Contracts*/
    service.contractUpdate = service.ip + 'contracts/{uuid}';
    service.contractDelete = service.ip + 'contracts/{uuid}';
    /*Equipments*/
    service.equipmentsAll = service.ip + 'equipments';
    service.equipmentsCreate = service.ip + 'equipments';
    service.equipmentsUpdate = service.ip + 'equipments/{UUID}';
    service.equipmentsDelete  = service.ip + 'equipments/{UUID}';
    /*Created equipments*/
    service.detailsProgressReadAll = service.ip + 'createdequipments';
    service.detailsProgressCreate = service.ip + 'createdequipments';
    service.detailsProgressUpdate = service.ip + 'createdequipments/{UUID}';
    service.detailsProgressDelete  = service.ip + 'createdequipments/{UUID}';
    /*Accessories*/
    service.accessoriesDelete = service.ip + 'accessories/{uuid}';
    service.accessoriesUpdate = service.ip + 'accessories/{uuid}';
    /*Notifications*/
    service.notificationsAll = service.ip + 'notifications';
    /*Test equipments*/
    servic
﻿'use strict';
omega.factory('notificationFactory', ['$translate', 'enumFactory', function ($translate, enumFactory) {
	return {
		notificationMessage: function (messageKey, messageType) {
			var responseMessage = '';
			var displayErrorMessage = function (responseMessage) {
				if (messageType === '' || messageType === null || messageType === undefined) {
					toastr.success(responseMessage);
				}
				else {
					switch (messageType) {
						case enumFactory.messageTypeEnums.success:
							toastr.success(responseMessage);
							break;
						case enumFactory.messageTypeEnums.error:
							toastr.error(responseMessage);
							break;
						case enumFactory.messageTypeEnums.warning:
							toastr.warning(responseMessage);
							break;
						case enumFactory.messageTypeEnums.info:
							toastr.info(responseMessage);
							break;
						default:
							toastr.warning('Check message type!');
							break;
					}
				}
			};
			if (messageKey !== '' || messageKey !== null || messageKey 
 $(function(){
     $('.first').css('opacity','1');
            $(".second_show").hide();
            $(".third_show").hide();
            	$('.second').css('opacity','0.5');
                $('.third').css('opacity','0.5');
            
            $('.first').click(function(e){
                $('.first_show').show();
                    $(".second_show").hide();
                    $(".third_show").hide();                
                       	$('.first').css('opacity','1');
                        $('.second').css('opacity','0.5');
                        $('.third').css('opacity','0.5');                        
                 			e.preventDefault();
            });
            $('.second').click(function(e){
                $('.second_show').show();
                    $(".third_show").hide();              
                    $('.first_show').hide();
                    	$('.second').css('opacity','1');
                        $('.first').css('opacity','0.5');
                
var searchData=
  ['nav_2ec',['nav.c',['../nav_8c.html',1,'']]],
  ['nav_2eh',['nav.h',['../nav_8h.html',1,'']]],
  ['nav_5fairspeed_2ec',['nav_airspeed.c',['../nav__airspeed_8c.html',1,'']]],
  ['nav_5fairspeed_2eh',['nav_airspeed.h',['../nav__airspeed_8h.html',1,'']]],
  ['nav_5fbungee_5ftakeoff_2ec',['nav_bungee_takeoff.c',['../nav__bungee__takeoff_8c.html',1,'']]],
  ['nav_5fbungee_5ftakeoff_2eh',['nav_bungee_takeoff.h',['../nav__bungee__takeoff_8h.html',1,'']]],
  ['nav_5fcatapult_2ec',['nav_catapult.c',['../nav__catapult_8c.html',1,'']]],
  ['nav_5fcatapult_2eh',['nav_catapult.h',['../nav__catapult_8h.html',1,'']]],
  ['nav_5fcube_2ec',['nav_cube.c',['../nav__cube_8c.html',1,'']]],
  ['nav_5fcube_2eh',['nav_cube.h',['../nav__cube_8h.html',1,'']]],
  ['nav_5fdrop_2ec',['nav_drop.c',['../nav__drop_8c.html',1,'']]],
  ['nav_5fdrop_2eh',['nav_drop.h',['../nav__drop_8h.html',1,'']]],
  ['nav_5fflower_2ec',['nav_flower.c',['../nav__flower_8c.html',1,'']]],
  ['nav_5fflower_2eh',['nav_f

  ['nav_5fgls_2ec',['nav_gls.c',['../nav__gls_8c.html',1,'']]],
  ['nav_5fgls_2eh',['nav_gls.h',['../nav__gls_8h.html',1,'']]],
  ['nav_5fline_2ec',['nav_line.c',['../nav__line_8c.html',1,'']]],
  ['nav_5fline_2eh',['nav_line.h',['../nav__line_8h.html',1,'']]],
  ['nav_5fline_5fborder_2ec',['nav_line_border.c',['../nav__line__border_8c.html',1,'']]],
  ['nav_5fline_5fborder_2eh',['nav_line_border.h',['../nav__line__border_8h.html',1,'']]],
  ['nav_5fline_5fosam_2ec',['nav_line_osam.c',['../nav__line__osam_8c.html',1,'']]],
  ['nav_5fline_5fosam_2eh',['nav_line_osam.h',['../nav__line__osam_8h.html',1,'']]],
  ['nav_5fpoles_2ec',['nav_poles.c',['../nav__poles_8c.html',1,'']]],
  ['nav_5fpoles_2eh',['nav_poles.h',['../nav__poles_8h.html',1,'']]],
  ['nav_5fsmooth_2ec',['nav_smooth.c',['../nav__smooth_8c.html',1,'']]],
  ['nav_5fsmooth_2eh',['nav_smooth.h',['../nav__smooth_8h.html',1,'']]],
  ['nav_5fspiral_2ec',['nav_spiral.c',['../nav__spiral_8c.html',1,'']]],
  ['nav_5fspiral_2eh',['na

  ['nav_5fsurvey_5fdisc_2ec',['nav_survey_disc.c',['../nav__survey__disc_8c.html',1,'']]],
  ['nav_5fsurvey_5fdisc_2eh',['nav_survey_disc.h',['../nav__survey__disc_8h.html',1,'']]],
  ['nav_5fsurvey_5fpoly_5fosam_2ec',['nav_survey_poly_osam.c',['../nav__survey__poly__osam_8c.html',1,'']]],
  ['nav_5fsurvey_5fpoly_5fosam_2eh',['nav_survey_poly_osam.h',['../nav__survey__poly__osam_8h.html',1,'']]],
  ['nav_5fsurvey_5fpoly_5frotorcraft_2ec',['nav_survey_poly_rotorcraft.c',['../nav__survey__poly__rotorcraft_8c.html',1,'']]],
  ['nav_5fsurvey_5fpoly_5frotorcraft_2eh',['nav_survey_poly_rotorcraft.h',['../nav__survey__poly__rotorcraft_8h.html',1,'']]],
  ['nav_5fsurvey_5fpolygon_2ec',['nav_survey_polygon.c',['../nav__survey__polygon_8c.html',1,'']]],
  ['nav_5fsurvey_5fpolygon_2eh',['nav_survey_polygon.h',['../nav__survey__polygon_8h.html',1,'']]],
  ['nav_5fsurvey_5frectangle_2ec',['nav_survey_rectangle.c',['../nav__survey__rectangle_8c.html',1,'']]],
  ['nav_5fsurvey_5frectangle_2eh',['nav

  ['nav_5fsurvey_5frectangle_5frotorcraft_2ec',['nav_survey_rectangle_rotorcraft.c',['../nav__survey__rectangle__rotorcraft_8c.html',1,'']]],
  ['nav_5fsurvey_5frectangle_5frotorcraft_2eh',['nav_survey_rectangle_rotorcraft.h',['../nav__survey__rectangle__rotorcraft_8h.html',1,'']]],
  ['nav_5fsurvey_5fzamboni_2ec',['nav_survey_zamboni.c',['../nav__survey__zamboni_8c.html',1,'']]],
  ['nav_5fsurvey_5fzamboni_2eh',['nav_survey_zamboni.h',['../nav__survey__zamboni_8h.html',1,'']]],
  ['nav_5fvertical_5fraster_2ec',['nav_vertical_raster.c',['../nav__vertical__raster_8c.html',1,'']]],
  ['nav_5fvertical_5fraster_2eh',['nav_vertical_raster.h',['../nav__vertical__raster_8h.html',1,'']]],
  ['navdata_2ec',['navdata.c',['../navdata_8c.html',1,'']]],
  ['navdata_2eh',['navdata.h',['../navdata_8h.html',1,'']]],
  ['navgo_5f1_2e0_2eh',['navgo_1.0.h',['../navgo__1_80_8h.html',1,'']]],
  ['navigation_2ec',['navigation.c',['../navigation_8c.html',1,'']]],
  ['navigation_2eh',['navigation.h',['../nav
app.controller("DiagramCtrl",['$scope','DiagramService','RuntimeService',function ($scope,DiagramService,RuntimeService){
    DiagramService.Init();
    myDiagram = DiagramService.getDiagram();
    $$ = DiagramService.getGoMake();
    Init();
    function Init()
    {
        DiagramService.DefineUndoDiagram($$)
        DiagramService.LoadNodeTemplate($$)
        DiagramService.LoadLinkTemplate()
        DiagramService.LoadGroupTemlate()
        DiagramService.ContextMenu()
        DiagramService.LoadPalette()
        DiagramService.LoadSettings()
        undoDisplay = DiagramService.getUndoDisplay();
        DiagramService.ExternalObjectsDroppedListener(RuntimeService, myDiagram)
        DiagramService.addChangedListener(myDiagram,undoDisplay)
        DiagramService.mouseDrop(RuntimeService,myDiagram)
        DiagramService.mouseDragOver(RuntimeService,myDiagram)
        DiagramService.SetCustomLinkingTool()
        DiagramService.SetCustomPanningTool()
    }
    $scope.list = Diagram
'use strict';
var injct = require('injct'),
    util = require('util');
/**
 * Init all dependency injection references
 */
exports.init = function (cb) {
    console.log('Setting up dependencies');
    setupDependencies(function() {
        cb();
    });
};
/**
 * Setup dependencies
 *
 * @param cb
 */
function setupDependencies(cb) {
    injct.unique({
        accountService: reqService('AccountService'),
        accountRepository: reqRepository('AccountRepository'),
        bookingService: reqService('BookingService'),
        bookingRepository: reqRepository('BookingRepository'),
        formService: reqService('FormService'),
        formRepository: reqRepository('FormRepository'),
        locationService: reqService('LocationService'),
        locationRepository: reqRepository('LocationRepository'),
        providerService: reqService('ProviderService'),
        providerRepository: reqRepository('ProviderRepository'),
        serviceRepository: reqRepository('ServiceRepository'),

        serviceService: reqService('ServiceService'),
        scheduleRepository: reqRepository('ScheduleRepository'),
        scheduleService: reqService('ScheduleService'),
        timeSlotRepository: reqRepository('TimeSlotRepository'),
        timeSlotService: reqService('TimeSlotService'),
        userRepository: reqRepository('UserRepository'),
        userService: reqService('UserService'),
        widgetRepository: reqRepository('widgetRepository'),
        widgetService: reqService('widgetService')
    });
    console.log('Setup dependencies');
    if (cb) {
        cb();
    }
exports.setupDependencies = setupDependencies;
/**
 * Helper to require a service
 *
 * @param service
 * @returns {*}
 */
function reqService(service) {
    return req(util.format('/services/%s.js', service));
/**
 * Helper to require a repository
 *
 * @param repository
 * @returns {*}
 */
function reqRepository(repository) {
    return req(util.format('/repository/%s.js', repository));
/**
 * Helper
jQuery(function($){
	function get_current_show() {
	$.post(crudScriptURL, {"crud-action" : "read", "read-type" : "current"}, function (currentShowJSON) {
		var schedule = $.parseJSON(currentShowJSON);
		var outputHTML = '';
		
		var currentShow = schedule['current-show'];
		if (currentShow.showName){
			var currentShowName = currentShow.showName;
			var imageURL = currentShow.imageURL;
			var linkURL = currentShow.linkURL;
			var startClock = currentShow.startClock;
			var endClock = currentShow.endClock;
			if (linkURL){
				currentShowName = '<a href="'+linkURL+'">'+currentShowName+'</a>';
			}
			outputHTML += '<h3 class="current-show">'+currentShowName+'</h3>';
			outputHTML += '<span>'+startClock + ' - ' + endClock + '</span>';
			if (imageURL){
				if (linkURL){
					outputHTML += '<a href="'+linkURL+'"><img class="showtime-image-thumbnail" src="'+imageURL+'" alt="'+currentShow.showName+'" /></a>';
				} else {
					outputHTML += '<img class="showtime-image-thumbnail" src="'+imag
var express = require('express');
var router = express.Router();
var OurService = require('../../../models/ourService');
var fs = require('fs');
router.get('/:serviceId', function(req, res, next) {
    var serviceId = req.params.serviceId;
    console.log('Deleting the Service: ' + serviceId);
    OurService.findById(serviceId, (err, myService) => {
        if(err) {
            console.log('Error in finding the service: ' + err);
            res.redirect('/adminServiceList');
        } else {
            console.log('Name: ' + myService.serviceName);
            console.log('Image path : ./public' +  myService.serviceImagePath);
            console.log('Id: ' + myService._id);
            myService.remove((err, success) => {
                if(err) {
                    console.log('Error in removing the Service: ' + err);
                } else {
                    console.log('Service Removed successfully.');
                    fs.unlink('./public' + myService.serviceImagePath, (e
$(function() {
			
				var Page = (function() {
					var $navArrows = $( '#nav-arrows' ),
						$nav = $( '#nav-dots > span' ),
						slitslider = $( '#slider' ).slitslider( {
							onBeforeChange : function( slide, pos ) {
								$nav.removeClass( 'nav-dot-current' );
								$nav.eq( pos ).addClass( 'nav-dot-current' );
							}
						} ),
						init = function() {
							initEvents();
							
						},
						initEvents = function() {
							$navArrows.children( ':last' ).on( 'click', function() {
								slitslider.next();
								return false;
							} );
							$navArrows.children( ':first' ).on( 'click', function() {
								
								slitslider.previous();
								return false;
							} );
							$nav.each( function( i ) {
							
								$( this ).on( 'click', function( event ) {
									
									var $dot = $( this );
									
									if( !slitslider.isActive() ) {
										$nav.removeClass( 'nav-dot-current' );
										$dot.addClass( 'nav-dot-current' );
									
					
﻿/* app/ui/nav/small */
define( 
	[
		'jquery'
	],
	function ( $ ) {
		var NavSmall;
		var $nav;
		var $navToggle;
		return {
			init: function () {
				NavSmall = this;
				NavSmall.initVars();
				NavSmall.bind();
			},
			initVars: function () {
				NavSmall = this;
				$nav = $('#menu');
				$navToggle = $('.js-menu-toggle');
			},
			bind: function () {
				this._setData();
				$navToggle.on('click', this._toggleSmallMenu);
				$nav.on('click', 'a', this._menuItemClick);
			},
			unbind: function () {
				$navToggle.off('click', this._toggleSmallMenu);
				$nav.off('click', 'a', this._menuItemClick);
				this._resetMenu();
				this._removeData();
			},
			_toggleSmallMenu: function ( event ) {
				event.preventDefault();
				$('body').toggleClass('open-menu');
			},
			
			_menuItemClick: function () {
				$('body').toggleClass('open-menu');
			},
			_setData: function () {
				$nav.data( 'nav', 'true' );
			},
			_removeData: function () {
				$nav.removeData( 'nav' );
			},
			_
/**
@module ang-layout
@class ang-header
*/
'use strict';
angular.module('myApp').controller('HeaderCtrl', ['$scope', 'appNav', 'appConfig',
    function($scope, appNav, appConfig) {
        $scope.nav = {};
        $scope.classes = {
            cont: ''
        };
        var nav;
        /**
	@method init
	*/
        function init(params) {
            nav = appNav.getNav({});
                var ppSend = {};
                ppSend.loggedIn = appConfig.state.loggedIn;
                nav = navLoginUpdate(nav, ppSend);
                setNav(nav.header, {});
            }
        }
        /**
	@method setNav
	*/
        function setNav(nav, params) {
                $scope.nav = nav;
                if ($scope.nav.classes !== undefined && $scope.nav.classes.cont !== undefined && $scope.nav.classes.cont == 'hidden') {
                    $scope.classes.cont = $scope.nav.classes.cont;
                } else {
                }
            }
        }
        /**
	@param {Object} param

		@param {Object} nav
	*/
        $scope.$on('appNavHeaderUpdate', function(evt, params) {
            setNav(params.nav.header, {});
        });
        /**
	Handles post login (or reverse for logout) - need to update nav header (toggle between login / logout)
	@toc 2.
	@method $scope.$on('loginEvt',..
	@param {Object} params
		@param {Boolean} [loggedIn] true if logged in
	*/
        $scope.$on('loginEvt', function(evt, params) {
        nav = navLoginUpdate(nav, params);
        appNav.setNav(nav, {});
        });
        /**
	@toc 2.5.
	@method navLoginUpdate
	@param {Object} nav
	@param {Object} params
		@param {Boolean} loggedIn true if logged in
	*/
        function navLoginUpdate(nav, params) {
                nav.header.buttons.left[0] = {
                    icon: 'fa fa-sign-out',
                    iconHtml: 'Logout',
                    href: $scope.appPathLink + 'logout'
                };
                nav.header.buttons.left[0] = {
                    icon: 'fa fa-s
/**
 * AuthorsPanelNavToolBarView.js
 *
 * Backbone view representing nav toolbar for ebooklibrary authors panel.
 *
 * (c)2014 mrdragonraaar.com
 */
define([
    'ebooklibrary/view/toolbar/NavToolBarView',
    'hbs!ebooklibrary/template/panel/authors/toolbar/AuthorsPanelNavToolBar',
    'backbone',
    'bootstrap'
],
function(
    NavToolBarView,
    AuthorsPanelNavToolBarTemplate,
    Backbone
) {
	var AuthorsPanelNavToolBarView = NavToolBarView.extend({
		tagName: 'ul',
		className: 'authors-nav panel-nav nav panel-left',
		template: AuthorsPanelNavToolBarTemplate,
		initialNavItemId: 'letter-all',
		/**
		 * Event handler for nav item select event.
		 * @param navItemId id of nav item.
		 * @param navItemGroup group name of nav item.
		 */
		onToolBarSelectNavItem: function(navItemId, navItemGroup) {
			if (navItemGroup === 'letter') {
				var letter = navItemId.substr(navItemGroup.length + 1);
				this.trigger('toolBarFilterBy', letter);
			}
		}
	});
	return AuthorsPanelNavToolBa
Ext.define('Ext.cf.ServiceDefinitions', {
    statics: {
        'AppService': '0.7',
        'AuthorizationService': '0.7',
        'AuthProvider': '0.7',
        'ChannelService': '0.7',
        'CnameVerifierService': '0.7',
        'ContentService': '0.7',
        'CourierService': '0.7',
        'DeployService': '0.7',
        'DeviceAllocatorService': '0.7',
        'DynectService': '0.7',
        'EmailService': '0.7',
        'ExtSvcLifecycleService': '0.1',
        'ExtSvcSubscriberService': '0.1',
        'ExtSvcWebhookService': '0.1',
        'FileService': '0.7',
        'GraphvizService': '0.7',
        'GroupManager': '0.7',
        'GroupService': '0.7',
        'InstrumentationRpcService': '0.7',
        'InstrumentationService': '0.7',
        'MessagingService': '0.7',
        'MockAsyncService': '0.7',
        'MockRpcService': '0.7',
        'NamingEventService': '0.7',
        'NamingRpcService': '0.7',
        'NamingService': '0.7',
        'NotificationService':
"use strict"
'react-bootstrap';
class Menu extends React.Component {
    render() {
        return (
            <Navbar inverse fixedTop>
                <Navbar.Header>
                    <Navbar.Brand>
                        <a href="/">BookStore</a>
                    </Navbar.Brand>
                    <Navbar.Toggle/>
                </Navbar.Header>
                <Navbar.Collapse>
                    <Nav>
                        <NavItem eventKey={1} href="/about">About</NavItem>
                        <NavItem eventKey={2} href="/contacts">Contact Us</NavItem>
                    </Nav>
                    <Nav pullRight>
                        <NavItem eventKey={1} href="/admin">Admin</NavItem>
                        <NavItem eventKey={2} href="/cart_item">Your Cart{(this.props.cartItemsNumber > 0)?(<Badge className="badge">{this.props.cartItemsNumber}</Badge>):('')}
                        </NavItem>
                    </Nav>
                </Navbar.Collapse>
     
var myService = cordova.require('com.red_folder.phonegap.plugin.backgroundservice.BackgroundService');
document.addEventListener('deviceready', function() {
    AndroidService.getStatusStart();
}, true);
AndroidService = function() {};
AndroidService.handleSuccess = function(data) {
    AndroidService.updateView(data);
};
AndroidService.handleError = function(data) {
    AndroidService.updateView(data);
};
AndroidService.getStatusStart=function() {
    myService.getStatus(function(r) {
            if (!r.ServiceRunning) {
                AndroidService.startService();
            } else {
                if (r.TimerEnabled) {
                } else {
                    if (!r.RegisteredForBootStart) {
                        AndroidService.registerForBootStart();
                    } else {
                        AndroidService.setConfig();
                        AndroidService.handleSuccess(r);
                    }
                }
            }
        },
        function(e) {


        });
};
/*
 * Button Handlers
 */
AndroidService.getStatus = function() {
    myService.getStatus(function(r) {
            AndroidService.handleSuccess(r)
        },
        function(e) {
            AndroidService.handleError(e)
        });
};
AndroidService.startService = function() {
    myService.startService(function(r) {
            AndroidService.handleSuccess(r)
        },
        function(e) {
            AndroidService.handleError(e)
        });
};
AndroidService.stopService=function() {
    myService.stopService(function(r) {
            AndroidService.handleSuccess(r)
        },
        function(e) {
            AndroidService.handleError(e)
        });
};
AndroidService.enableTimer=function() {
    myService.enableTimer(60000,
        function(r) {
            AndroidService.handleSuccess(r)
        },
        function(e) {
            AndroidService.handleError(e)
        });
};
AndroidService.disableTimer = function() {
    myService.disableTimer(function(r) {
 

        },
        function(e) {
            AndroidService.handleError(e)
        });
};
AndroidService.registerForBootStart = function() {
    myService.registerForBootStart(function(r) {
            AndroidService.handleSuccess(r)
        },
        function(e) {
            AndroidService.handleError(e)
        });
};
AndroidService.deregisterForBootStart = function() {
    myService.deregisterForBootStart(function(r) {
            AndroidService.handleSuccess(r)
        },
        function(e) {
            AndroidService.handleError(e)
        });
};
AndroidService.registerForUpdates=function() {
    myService.registerForUpdates(function(r) {
            AndroidService.handleSuccess(r)
        },
        function(e) {
            AndroidService.handleError(e)
        });
};
AndroidService.deregisterForUpdates=function() {
    myService.deregisterForUpdates(function(r) {
            AndroidService.handleSuccess(r)
        },
        function(e) {
            AndroidService.handleE
goog.provide('cljs.core.async.impl.dispatch');
goog.require('cljs.core');
goog.require('cljs.core.constants');
goog.require('cljs.core.async.impl.buffers');
goog.require('goog.async.nextTick');
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer((32));
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = (1024);
cljs.core.async.impl.dispatch.process_messages = (function cljs$core$async$impl$dispatch$process_messages(){
cljs.core.async.impl.dispatch.running_QMARK_ = true;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
var count_14335 = (0);
while(true){
var m_14336 = cljs.core.async.impl.dispatch.tasks.pop();
if((m_14336 == null)){
} else {
(m_14336.cljs$core$IFn$_invoke$arity$0 ? m_14336.cljs$core$IFn$_invoke$arity$0() : m_14336.call(null));
if((count_14335 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE)){
var G__14337 = (count_14335 + (1));
count_1433

continue;
} else {
break;
cljs.core.async.impl.dispatch.running_QMARK_ = false;
if((cljs.core.async.impl.dispatch.tasks.length > (0))){
return (cljs.core.async.impl.dispatch.queue_dispatcher.cljs$core$IFn$_invoke$arity$0 ? cljs.core.async.impl.dispatch.queue_dispatcher.cljs$core$IFn$_invoke$arity$0() : cljs.core.async.impl.dispatch.queue_dispatcher.call(null));
} else {
return null;
});
cljs.core.async.impl.dispatch.queue_dispatcher = (function cljs$core$async$impl$dispatch$queue_dispatcher(){
if((cljs.core.async.impl.dispatch.queued_QMARK_) && (cljs.core.async.impl.dispatch.running_QMARK_)){
return null;
} else {
cljs.core.async.impl.dispatch.queued_QMARK_ = true;
return goog.async.nextTick(cljs.core.async.impl.dispatch.process_messages);
});
cljs.core.async.impl.dispatch.run = (function cljs$core$async$impl$dispatch$run(f){
cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
return cljs.core.async.impl.dispatch.queue_dispatcher();
});
cljs.core.async.impl.dispatch.queue_delay 
d3.dispatch = function() {
  var dispatch = new d3_dispatch,
      i = -1,
      n = arguments.length;
  while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
  return dispatch;
};
function d3_dispatch() {}
d3_dispatch.prototype.on = function(type, listener) {
  var i = type.indexOf("."),
      name = "";
  if (i > 0) {
    name = type.substring(i + 1);
    type = type.substring(0, i);
  }
  return arguments.length < 2
      ? this[type].on(name)
      : this[type].on(name, listener);
};
function d3_dispatch_event(dispatch) {
  var listeners = [],
      listenerByName = new d3_Map;
  function event() {
        i = -1,
        n = z.length,
        l;
    while (++i < n) if (l = z[i].on) l.apply(this, arguments);
    return dispatch;
  }
  event.on = function(name, listener) {
    var l = listenerByName.get(name),
        i;
    if (arguments.length < 2) return l && l.on;
    if (l) {
      l.on = null;
      listeners = listeners.slice(0, i = listeners.indexOf(l)).conca
d3.dispatch = function() {
  var dispatch = new d3_dispatch,
      i = -1,
      n = arguments.length;
  while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
  return dispatch;
};
function d3_dispatch() {}
d3_dispatch.prototype.on = function(type, listener) {
  var i = type.indexOf("."),
      name = "";
  if (i > 0) {
    name = type.substring(i + 1);
    type = type.substring(0, i);
  }
  return arguments.length < 2
      ? this[type].on(name)
      : this[type].on(name, listener);
};
function d3_dispatch_event(dispatch) {
  var listeners = [],
      listenerByName = new d3_Map;
  function event() {
        i = -1,
        n = z.length,
        l;
    while (++i < n) if (l = z[i].on) l.apply(this, arguments);
    return dispatch;
  }
  event.on = function(name, listener) {
    var l = listenerByName.get(name),
        i;
    if (arguments.length < 2) return l && l.on;
    if (l) {
      l.on = null;
      listeners = listeners.slice(0, i = listeners.indexOf(l)).conca
function requireAPI(filename) {
    return function(options) {
      var type = typeof options;
      var version;
      if (type === 'string') {
        version = options;
        options = {};
      } else if (type === 'object') {
        version = options.version;
        delete options.version;
      } else {
        throw new Error('Argument error: Accepts only string or object');
      }
      
      try {
        var endpointPath = 'gapi/apis/' + filename + "/" + version;
        var Endpoint = require(endpointPath);
        var ep = new Endpoint(options);
      } catch (e) {
        throw new Error(String.format('Unable to load endpoint %s("%s"): %s',
          filename, version, e.message));
      }
    };
  }
  /**
   * APIs to be exported
   * @type {Object}
   * @private
   */
var APIs = {
  'adexchangebuyer': requireAPI('adexchangebuyer'),
  'adexchangeseller': requireAPI('adexchangeseller'),
  'admin': requireAPI('admin'),
  'adsense': requireAPI('adsense'),
  'adsensehos

  'analytics': requireAPI('analytics'),
  'androidpublisher': requireAPI('androidpublisher'),
  'appsactivity': requireAPI('appsactivity'),
  'appstate': requireAPI('appstate'),
  'audit': requireAPI('audit'),
  'autoscaler': requireAPI('autoscaler'),
  'bigquery': requireAPI('bigquery'),
  'blogger': requireAPI('blogger'),
  'books': requireAPI('books'),
  'calendar': requireAPI('calendar'),
  'civicinfo': requireAPI('civicinfo'),
  'cloudmonitoring': requireAPI('cloudmonitoring'),
  'compute': requireAPI('compute'),
  'container': requireAPI('container'),
  'content': requireAPI('content'),
  'coordinate': requireAPI('coordinate'),
  'customsearch': requireAPI('customsearch'),
  'datastore': requireAPI('datastore'),
  'dfareporting': requireAPI('dfareporting'),
  'discovery': requireAPI('discovery'),
  'dns': requireAPI('dns'),
  'doubleclickbidmanager': requireAPI('doubleclickbidmanager'),
  'doubleclicksearch': requireAPI('doubleclicksearch'),
  'drive': requireAPI('drive'),
  'fi
picalApp.config(function ($routeProvider) {
   
    $routeProvider
    
    .when('/', {
        templateUrl: 'pages/home.htm',
        controller: 'homeController'
    })
    
    .when('/splash', {
        templateUrl: 'pages/splash.htm',
        controller: 'splashController'
    })
    .when('/sync', {
        templateUrl: 'pages/sync.htm',
        controller: 'syncController'
    })
    
    .when('/login', {
        templateUrl: 'pages/login.htm',
        controller: 'loginController'
    })
    
    .when('/login/signup', {
        templateUrl: 'pages/login-signup.htm',
        controller: 'loginController'
    })
    
    .when('/past', {
        templateUrl: 'pages/past.htm',
        controller: 'pastController'
    })
    .when('/next', {
        templateUrl: 'pages/next.htm',
        controller: 'nextController'
    })
    .when('/future', {
        templateUrl: 'pages/future.htm',
        controller: 'futureController'
    })
    .when('/settings', {
        templateUrl: 'p
if(document.images) {
	var nav_bar011 = new Image();
	var nav_bar012 = new Image();
	var nav_bar021 = new Image();
	var nav_bar022 = new Image();
	var nav_bar031 = new Image();
	var nav_bar032 = new Image();
	var nav_bar041 = new Image();
	var nav_bar042 = new Image();
	var nav_bar051 = new Image();
	var nav_bar052 = new Image();
	var nav_bar061 = new Image();
	var nav_bar062 = new Image();
	var nav_bar071 = new Image();
	var nav_bar072 = new Image();
	var nav_bar081 = new Image();
	var nav_bar082 = new Image();
	var nav_bar091 = new Image();
	var nav_bar092 = new Image();
	var nav_bar101 = new Image();
	var nav_bar102 = new Image();
	var nav_bar111 = new Image();
	var nav_bar112 = new Image();
	var nav_bar121 = new Image();
	var nav_bar122 = new Image();
	var nav_bar131 = new Image();
	var nav_bar132 = new Image();
	var nav_bar141 = new Image();
	var nav_bar142 = new Image();
	var nav_bar151 = new Image();
	var nav_bar152 = new Image();
	var nav_bar161 = new Image();
	var nav_bar162 =

	var nav_bar171 = new Image();
	var nav_bar172 = new Image();
	var nav_bar181 = new Image();
	var nav_bar182 = new Image();
	var nav_bar191 = new Image();
	var nav_bar192 = new Image();
	var nav_bar201 = new Image();
	var nav_bar202 = new Image();
	var nav_bar211 = new Image();
	var nav_bar212 = new Image();
	var nav_bar221 = new Image();
	var nav_bar222 = new Image();
	nav_bar011.src = "/wgbh/nova/images04/nav-bar-401-novahome.gif";
	nav_bar012.src = "/wgbh/nova/images04/nav-bar-401-novahome-on.gif";
	nav_bar021.src = "/wgbh/nova/images04/nav-bar-402-tvschedule.gif";
	nav_bar022.src = "/wgbh/nova/images04/nav-bar-402-tvschedule-on.gif";
	nav_bar031.src = "/wgbh/nova/images04/nav-bar-403-archive.gif";
	nav_bar032.src = "/wgbh/nova/images04/nav-bar-403-archive-on.gif";
	nav_bar041.src = "/wgbh/nova/images04/nav-bar-404-aboutnova.gif";
	nav_bar042.src = "/wgbh/nova/images04/nav-bar-404-aboutnova-on.gif";
	nav_bar051.src = "/wgbh/nova/images04/nav-bar-405-subscribe.gif";
	nav_bar052.src 

	nav_bar061.src = "/wgbh/nova/images04/nav-bar-406-teachers.gif";
	nav_bar062.src = "/wgbh/nova/images04/nav-bar-406-teachers-on.gif";
	nav_bar071.src = "/wgbh/nova/images04/nav-bar-407-feedback.gif";
	nav_bar072.src = "/wgbh/nova/images04/nav-bar-407-feedback-on.gif";
	nav_bar081.src = "/wgbh/nova/images04/nav-bar-408-transcripts.gif";
	nav_bar082.src = "/wgbh/nova/images04/nav-bar-408-transcripts-on.gif";
	nav_bar091.src = "/wgbh/nova/images04/nav-bar-409-shopnova.gif";
	nav_bar092.src = "/wgbh/nova/images04/nav-bar-409-shopnova-on.gif";
	nav_bar101.src = "/wgbh/nova/images04/nav-bar-410-programs.gif";
	nav_bar102.src = "/wgbh/nova/images04/nav-bar-410-programs-on.gif";
	nav_bar111.src = "/wgbh/nova/images04/nav-bar-411-faqs.gif";
	nav_bar112.src = "/wgbh/nova/images04/nav-bar-411-faqs-on.gif";
	nav_bar121.src = "/wgbh/nova/images04/nav-bar-401-novahome.gif";
	nav_bar122.src = "/wgbh/nova/images04/nav-bar-401-novahome-on.gif";
	nav_bar131.src = "/wgbh/nova/images04/nav-bar-402-tvsch

	nav_bar132.src = "/wgbh/nova/images04/nav-bar-402-tvschedule-on.gif";
	nav_bar141.src = "/wgbh/nova/images04/nav-bar-403-archive.gif";
	nav_bar142.src = "/wgbh/nova/images04/nav-bar-403-archive-on.gif";
	nav_bar151.src = "/wgbh/nova/images04/nav-bar-404-aboutnova.gif";
	nav_bar152.src = "/wgbh/nova/images04/nav-bar-404-aboutnova-on.gif";
	nav_bar161.src = "/wgbh/nova/images04/nav-bar-405-subscribe.gif";
	nav_bar162.src = "/wgbh/nova/images04/nav-bar-405-subscribe-on.gif";
	nav_bar171.src = "/wgbh/nova/images04/nav-bar-406-teachers.gif";
	nav_bar172.src = "/wgbh/nova/images04/nav-bar-406-teachers-on.gif";
	nav_bar181.src = "/wgbh/nova/images04/nav-bar-407-feedback.gif";
	nav_bar182.src = "/wgbh/nova/images04/nav-bar-407-feedback-on.gif";
	nav_bar191.src = "/wgbh/nova/images04/nav-bar-408-transcripts.gif";
	nav_bar192.src = "/wgbh/nova/images04/nav-bar-408-transcripts-on.gif";
	nav_bar201.src = "/wgbh/nova/images04/nav-bar-409-shopnova.gif";
	nav_bar202.src = "/wgbh/nova/images04/nav-b
var namespace_o_r_m_1_1_controller =
    [ "Request", "namespace_o_r_m_1_1_controller_1_1_request.html", "namespace_o_r_m_1_1_controller_1_1_request" ],
    [ "Session", "namespace_o_r_m_1_1_controller_1_1_session.html", "namespace_o_r_m_1_1_controller_1_1_session" ],
    [ "BaseController", "class_o_r_m_1_1_controller_1_1_base_controller.html", "class_o_r_m_1_1_controller_1_1_base_controller" ],
    [ "ControllerFactory", "class_o_r_m_1_1_controller_1_1_controller_factory.html", "class_o_r_m_1_1_controller_1_1_controller_factory" ],
    [ "ControllerRegister", "class_o_r_m_1_1_controller_1_1_controller_register.html", "class_o_r_m_1_1_controller_1_1_controller_register" ],
    [ "Request", "class_o_r_m_1_1_controller_1_1_request.html", "class_o_r_m_1_1_controller_1_1_request" ],
    [ "Session", "class_o_r_m_1_1_controller_1_1_session.html", "class_o_r_m_1_1_controller_1_1_session" ],
    [ "SmartyTemplate", "class_o_r_m_1_1_controller_1_1_smarty_template.html", "class_o_r_m_1_1_contr
define([
	"jquery", "underscore", "backbone", "mvc",
	"controllers/HeaderController", "controllers/ToolbarController", "controllers/ProjectController", 
	"controllers/ComponentLibraryController", "controllers/CanvasController", "controllers/CodeController", "controllers/RunController",
	"controllers/PropertyController", "controllers/EventController", "controllers/StatusController",
	"views/MainView"
], function($, _, Backbone, MVC, 
		HeaderController, ToolbarController, ProjectController,
		ComponentLibraryController, CanvasController, CodeController, RunController,
		PropertyController, EventController, StatusController, 
		MainView) {
	var MainController = AppBuilder.Controller.extend({
		
		headerController: null,
		toolbarController: null,
		projectController: null,
		componentLibraryController: null,
		canvasController: null,
		codeController: null,
		propertyController: null,
		eventController: null,
		statusController: null,
		mobileController: null,
		runController: null,
		
	

			"": "showMainView"
		},
		
		initialize: function(node, parentController) {
			AppBuilder.Controller.prototype.initialize.call(this, node, parentController);
		},
		
		showMainView: function() {
			/*if(!$.browser.webkit) {
				alert("AppBuilder only supports the browsers that has WebKit core (e.g. Chrome, Baidu Browser, etc.)");
				return;
			}*/
			this.view = new MainView();
			this.node.append(this.view.$el);
			this.view.render();
			
			this.headerController = new HeaderController($("#header", this.node), this);
			this.toolbarController = new ToolbarController($("#toolbar", this.node), this);
			this.projectController = new ProjectController($("#project", this.node), this);
			this.componentLibraryController = new ComponentLibraryController($("#component", this.node), this);
			this.canvasController = new CanvasController($("#canvas", this.node), this);
			this.propertyController = new PropertyController($("#property", this.node), this);
			this.eventController = new EventC

			this.statusController = new StatusController($("#status", this.node), this);
			this.codeController = new CodeController(null, this);
			this.runController = new RunController($("body"), this);
			this.headerController.showView();
			this.toolbarController.showView();
			this.projectController.showView();
			this.componentLibraryController.showView();
			this.canvasController.showView();
			this.runController.showView();
			this.propertyController.showView();
			this.eventController.showView();
			this.statusController.showView();
			this.codeController.showView();
			
			this.view.pass("onCloseTab", this.codeController);
		},
		
		setMobileController: function(controller) {
			this.mobileController = controller;
			this.trigger("onMobileReady");
		},
		
		activateProjectView: function() {
			
		},
		
		activateComponentView: function() {
			
		},
		
		activateCanvasView: function() {
			
		},
		
		activateCodeView: function() {
			this.view.activateCodeView();
		},
		
		activatePr
var express     = require('express'),
    api         = require('../api'),
    apiRoutes;
/**
 * IMPORTANT
 * - cors middleware MUST happen before pretty urls, because otherwise cors header can get lost
 * - cors middleware MUST happen after authenticateClient, because authenticateClient reads the trusted domains
 */
apiRoutes = function apiRoutes(middleware) {
    var router = express.Router(),
        authenticatePublic = [
            middleware.api.authenticateClient,
            middleware.api.authenticateUser,
            middleware.api.requiresAuthorizedUserPublicAPI,
            middleware.api.cors,
            middleware.api.prettyUrls
        ],
        authenticatePrivate = [
            middleware.api.authenticateClient,
            middleware.api.authenticateUser,
            middleware.api.requiresAuthorizedUser,
            middleware.api.cors,
            middleware.api.prettyUrls
        ];
    router.del = router.delete;
    router.use(middleware.api.maintenance);
   

    router.options('*', middleware.api.cors);
    router.get('/configuration', authenticatePrivate, api.http(api.configuration.read));
    router.get('/configuration/:key', authenticatePrivate, api.http(api.configuration.read));
    router.get('/configuration/timezones', authenticatePrivate, api.http(api.configuration.read));
    router.get('/posts', authenticatePublic, api.http(api.posts.browse));
    router.post('/posts', authenticatePrivate, api.http(api.posts.add));
    router.get('/posts/:id', authenticatePublic, api.http(api.posts.read));
    router.get('/posts/slug/:slug', authenticatePublic, api.http(api.posts.read));
    router.put('/posts/:id', authenticatePrivate, api.http(api.posts.edit));
    router.del('/posts/:id', authenticatePrivate, api.http(api.posts.destroy));
    router.put('/schedules/posts/:id', [middleware.api.authenticateClient, middleware.api.authenticateUser], api.http(api.schedules.publishPost));
    router.get('/settings', authenticatePrivate, api.http(api

    router.get('/settings/:key', authenticatePrivate, api.http(api.settings.read));
    router.put('/settings', authenticatePrivate, api.http(api.settings.edit));
    router.get('/users', authenticatePublic, api.http(api.users.browse));
    router.get('/users/:id', authenticatePublic, api.http(api.users.read));
    router.get('/users/slug/:slug', authenticatePublic, api.http(api.users.read));
    router.get('/users/email/:email', authenticatePublic, api.http(api.users.read));
    router.put('/users/password', authenticatePrivate, api.http(api.users.changePassword));
    router.put('/users/owner', authenticatePrivate, api.http(api.users.transferOwnership));
    router.put('/users/:id', authenticatePrivate, api.http(api.users.edit));
    router.post('/users', authenticatePrivate, api.http(api.users.add));
    router.del('/users/:id', authenticatePrivate, api.http(api.users.destroy));
    router.get('/tags', authenticatePublic, api.http(api.tags.browse));
    router.get('/tags/:id', auth

    router.get('/tags/slug/:slug', authenticatePublic, api.http(api.tags.read));
    router.post('/tags', authenticatePrivate, api.http(api.tags.add));
    router.put('/tags/:id', authenticatePrivate, api.http(api.tags.edit));
    router.del('/tags/:id', authenticatePrivate, api.http(api.tags.destroy));
    router.get('/subscribers', middleware.api.labs.subscribers, authenticatePrivate, api.http(api.subscribers.browse));
    router.get('/subscribers/csv', middleware.api.labs.subscribers, authenticatePrivate, api.http(api.subscribers.exportCSV));
    router.post('/subscribers/csv',
        middleware.api.labs.subscribers,
        authenticatePrivate,
        middleware.upload.single('subscribersfile'),
        middleware.validation.upload({type: 'subscribers'}),
    );
    router.get('/subscribers/:id', middleware.api.labs.subscribers, authenticatePrivate, api.http(api.subscribers.read));
    router.post('/subscribers', middleware.api.labs.subscribers, authenticatePublic, api.http(api.

    router.put('/subscribers/:id', middleware.api.labs.subscribers, authenticatePrivate, api.http(api.subscribers.edit));
    router.del('/subscribers/:id',  middleware.api.labs.subscribers, authenticatePrivate, api.http(api.subscribers.destroy));
    router.get('/roles/', authenticatePrivate, api.http(api.roles.browse));
    router.get('/clients/slug/:slug', api.http(api.clients.read));
    router.get('/slugs/:type/:name', authenticatePrivate, api.http(api.slugs.generate));
    router.get('/themes/:name/download',
        authenticatePrivate,
        api.http(api.themes.download)
    );
    router.post('/themes/upload',
        authenticatePrivate,
        middleware.upload.single('theme'),
        middleware.validation.upload({type: 'themes'}),
        api.http(api.themes.upload)
    );
    router.del('/themes/:name',
        authenticatePrivate,
        api.http(api.themes.destroy)
    );
    router.get('/notifications', authenticatePrivate, api.http(api.notifications.browse));
   

    router.del('/notifications/:id', authenticatePrivate, api.http(api.notifications.destroy));
    router.get('/db', authenticatePrivate, api.http(api.db.exportContent));
    router.post('/db',
        authenticatePrivate,
        middleware.validation.upload({type: 'db'}),
    );
    router.del('/db', authenticatePrivate, api.http(api.db.deleteAllContent));
    router.post('/mail', authenticatePrivate, api.http(api.mail.send));
    router.post('/mail/test', authenticatePrivate, api.http(api.mail.sendTest));
    router.post('/slack/test', authenticatePrivate, api.http(api.slack.sendTest));
    router.post('/authentication/passwordreset',
        middleware.spamPrevention.forgotten,
        api.http(api.authentication.generateResetToken)
    );
    router.post('/authentication/setup/three', middleware.api.authenticateClient, api.http(api.authentication.onSetupStep3));
    router.put('/authentication/passwordreset', api.http(api.authentication.resetPassword));
    router.post('/authent
'use strict';
var angular = require('angular');
angular.module('partsApp')
  .controller('AuthController', ["$window", "$location", "SigninService","SignupService", require('./auth.controller')])
  .controller('AboutController', require('./about.controller'))
  .controller('AccountController',["$scope", "$route", "$window", "$http", "GetUsersQuotes","PostNewQuote", "CheckForAuthService", require('./account.controller')])
  .controller('FormController',require('./form.controller'))
  .controller('ContactController', require('./contact.controller'))
  .controller('UserDashController', ["$location" ,require('./user/userDash.controller')])
  .controller('QuoteRequestController', ["NewQuoteService",require('./user/quoteRequest.controller')])
  .controller('UserQuotesController', ["GetUsersQuotes", require('./user/pricedQuotes.controller')])
  .controller('AdminController', ["$scope", "AdminSummaryService", "DummyDataService", require('./admin.controller')])
  .controller('RequestedQuotesCon
'use strict';
angular.module('d2Docs')
    .config(function ($routeProvider) {
        $routeProvider
            /**/
            .when('/examples', {
                templateUrl: 'examples.html',
                controller: 'sectionController',
                controllerAs: 'section'
            })
            /**/
            .when('/examples/Basic usage', {
                templateUrl: 'examples/Basic_usage.json',
                controller: 'pageController',
                controllerAs: 'page'
            })
            /**/
            .when('/examples/How do i', {
                templateUrl: 'examples/How_do_i.json',
                controller: 'pageController',
                controllerAs: 'page'
            })
            /**/
            /**/
            .when('/general', {
                templateUrl: 'general.html',
                controller: 'sectionController',
                controllerAs: 'section'
            })
            /**/
            .when('/general/Install'

                templateUrl: 'general/Install.json',
                controller: 'pageController',
                controllerAs: 'page'
            })
            /**/
            /**/
            .when('/d2', {
                templateUrl: 'd2.html',
                controller: 'sectionController',
                controllerAs: 'section'
            })
            /**/
            .when('/d2/d2', {
                templateUrl: 'd2.json',
                controller: 'pageController',
                controllerAs: 'page'
            })
            /**/
            /**/
            .when('/i18n', {
                templateUrl: 'i18n.html',
                controller: 'sectionController',
                controllerAs: 'section'
            })
            /**/
            .when('/i18n/I18n', {
                templateUrl: 'i18n/I18n.json',
                controller: 'pageController',
                controllerAs: 'page'
            })
            /**/
            /**/
            .when('

                templateUrl: 'model.html',
                controller: 'sectionController',
                controllerAs: 'section'
            })
            /**/
            .when('/model/Filter', {
                templateUrl: 'model/Filter.json',
                controller: 'pageController',
                controllerAs: 'page'
            })
            /**/
            .when('/model/Model', {
                templateUrl: 'model/Model.json',
                controller: 'pageController',
                controllerAs: 'page'
            })
            /**/
            .when('/model/ModelBase', {
                templateUrl: 'model/ModelBase.json',
                controller: 'pageController',
                controllerAs: 'page'
            })
            /**/
            .when('/model/ModelCollection', {
                templateUrl: 'model/ModelCollection.json',
                controller: 'pageController',
                controllerAs: 'page'
            })
            /**/
     

                templateUrl: 'model/ModelDefinition.json',
                controller: 'pageController',
                controllerAs: 'page'
            })
            /**/
            .when('/model/ModelDefinitions', {
                templateUrl: 'model/ModelDefinitions.json',
                controller: 'pageController',
                controllerAs: 'page'
            })
            /**/
            .when('/model/ModelValidation', {
                templateUrl: 'model/ModelValidation.json',
                controller: 'pageController',
                controllerAs: 'page'
            })
            /**/
            /**/
            .when('/pager', {
                templateUrl: 'pager.html',
                controller: 'sectionController',
                controllerAs: 'section'
            })
            /**/
            .when('/pager/Pager', {
                templateUrl: 'pager/Pager.json',
                controller: 'pageController',
                controllerAs: 'page'
    

            /**/
            /**/
            .when('/system', {
                templateUrl: 'system.html',
                controller: 'sectionController',
                controllerAs: 'section'
            })
            /**/
            .when('/system/System', {
                templateUrl: 'system/System.json',
                controller: 'pageController',
                controllerAs: 'page'
            })
            /**/
            .when('/system/SystemConfiguration', {
                templateUrl: 'system/SystemConfiguration.json',
                controller: 'pageController',
                controllerAs: 'page'
            })
            /**/
            .when('/system/SystemSettings', {
                templateUrl: 'system/SystemSettings.json',
                controller: 'pageController',
                controllerAs: 'page'
            })
            /**/
            .when('/system/settingsKeyMapping', {
                templateUrl: 'system/settingsKeyMapping.json',
  
jQuery.fn.center = function () {
    this.css("position","absolute");
    this.css("top", ( $(window).height() - this.height() ) / 2+$(window).scrollTop() + "px");
    this.css("left", ( $(window).width() - this.width() ) / 2+$(window).scrollLeft() + "px");
    return this;
$(document).ready(fadeInicio);
function fadeInicio(){
  $("#inicio").center();
  setTimeout(hideInicio, 2000);
function hideInicio(){
    $("#inicio").transition({
    animation  : 'scale',
    duration   : '2s',
    onComplete : showMenu
  });
function showMenu(){
    $("#sideBar").sidebar('toggle');
$("#botonMenu").click(showMenu);
$("#botonReportar").click(showModalReport);
function showModalReport(){
	$('#reportarModal').modal('show');
$("#botonLogin").click(showModalLogin);
function showModalLogin(){
	$('#loginModal').modal('show');
$("#botonHistoria").click(showModalHistoria);
function showModalHistoria(){
	$('#historiaModal').modal('show');
$("#botonMision").click(showModalMision);
function showModalMision(){

	$('#misionModal').modal('show');
$("#botonVision").click(showModalVision);
function showModalVision(){
	$('#visionModal').modal('show');
$("#botonBase").click(showModalBase);
function showModalBase(){
    $('#baseModal').modal('show');
$("#botonPorhora").click(showModalPorhora);
function showModalPorhora(){
    $('#porhoraModal').modal('show');
$("#botonSolicitar").click(showModalCuantos);
$("#botonSolicitar2").click(showModalCuantos);
$("#botonSolicitar3").click(showModalCuantos);
$("#botonSolicitar4").click(showModalCuantos);
$("#botonSolicitar5").click(showModalCuantos);
function showModalCuantos(){
    $('#cuantosModal').modal('show');
$("#botonSolicitar6").click(showModalCuantos2);
$("#botonSolicitar7").click(showModalCuantos2);
$("#botonSolicitar8").click(showModalCuantos2);
$("#botonSolicitar9").click(showModalCuantos2);
$("#botonSolicitar10").click(showModalCuantos2);
function showModalCuantos2(){
    $('#cuantosModal2').modal('show');
$("#botonCheck").click(showModalCheck);

require('colors');
var util = require('util');
var moment = require('moment');
var logentries = require('node-logentries');
var config = require('../../config');
var stub = require('./stub');
var log = logentries.logger({
	token: config.logentries.token,
	printerror: false
});
log.level('debug');
var logger = {
	success: function (message) {
		message = typeof message === 'string' ? message : JSON.stringify(message);
		console.log(this.timestamptMessage(util.format('SUCCESS: %s', message)).green);
		log.log('info', message);
	},
	warning: function (message) {
		message = typeof message === 'string' ? message : JSON.stringify(message);
		console.log(this.timestamptMessage(util.format('WARNING: %s', message)).yellow);
		log.log('warning', message);
	},
	error: function (message) {
		message = typeof message === 'string' ? message : JSON.stringify(message);
		console.log(this.timestamptMessage(util.format('ERROR: %s', message)).red);
		log.log('err', message);
	},
	fatal: function (messag

		message = typeof message === 'string' ? message : JSON.stringify(message);
		console.log(this.timestamptMessage(util.format('ERROR: %s', message)).red);
		log.log('emerg', message);
	},
	info: function (message) {
		message = typeof message === 'string' ? message : JSON.stringify(message);
		console.log(this.timestamptMessage(message));
		log.log('info', message);
	},
	connector: function (name) {
		var me = this;
		return {
			info: function (message) {
				me.info('connector ' + name + ': ' + message);
			},
			warning: function (message) {
				me.warning('connector ' + name + ': ' + message);
			},
			error: function (message) {
				me.error('connector ' + name + ': ' + message);
			},
			success: function (message) {
				me.success('connector ' + name + ': ' + message);
			}
		};
	},
	timestamptMessage: function (message) {
		return util.format('[%s] %s', moment(), message);
	}
};
module.exports = module.exports = (function () {
	var env = process.env.NODE_ENV || 'development';

var class_show_widgets =
    [ "ShowWidgets", "class_show_widgets.html#a5eebbaa78503100fc2983203787a0b5d", null ],
    [ "~ShowWidgets", "class_show_widgets.html#a18744fd531f1a33e0ae5506eca3dfa2e", null ],
    [ "GetPosBoxChoice", "class_show_widgets.html#abee8be92674ef32ea33a60f54446ae44", null ],
    [ "GetPosConsoleWindows", "class_show_widgets.html#a13a5bed3bbc767aae08f7e55199687da", null ],
    [ "GetPosCustomer", "class_show_widgets.html#ac1975b3a7f9ed9521609955a81edb03d", null ],
    [ "GetPosDeliveryConfirm", "class_show_widgets.html#aabec56f3943570f571c18bde574c63e6", null ],
    [ "GetPosDoorsManager", "class_show_widgets.html#aa03adcf2f2140486f8c6b85e5c23e90a", null ],
    [ "GetPosEditSettingSystem", "class_show_widgets.html#a17dd995d69968828ed11b25e62aae6f9", null ],
    [ "GetPosLogin", "class_show_widgets.html#aa0273c4058ae0aead5885c2d742a6782", null ],
    [ "GetPosMaintenanceMenu", "class_show_widgets.html#aa29e84bd199c2eeef67195da624b8633", null ],
    [ "GetPosMenuDe

    [ "GetPosOpenEmptyBox", "class_show_widgets.html#a55e7c8167da06000dd7d9bdbf1ab67ea", null ],
    [ "GetPosScanPackage", "class_show_widgets.html#a07f5e9138e49d6e509ae847abcfc2fb9", null ],
    [ "GetPosSetting", "class_show_widgets.html#ac8702df051c1561c701f6d6ed951bab6", null ],
    [ "GetPosSettingSystem", "class_show_widgets.html#a7f0c1dfa6fc920465a967a22b25291ff", null ],
    [ "GetPosShowPackageBox", "class_show_widgets.html#a91143030a1dd03f77a0fbf4910a9f0da", null ],
    [ "GetPosSiteConfigManager", "class_show_widgets.html#a2237cbe16f5b81538e3ac03c224e6ae5", null ],
    [ "GetPosSQLite_Local_DatabaseManager", "class_show_widgets.html#a101605491e8ac96d7e4f13c47a5c9370", null ],
    [ "GetPosStowPackages", "class_show_widgets.html#a00384a209f22e8c2512b5956af37ca73", null ],
    [ "GetWidget", "class_show_widgets.html#ac7e1fd754e795f4caebe577443c31387", null ],
    [ "SetPosAssistance", "class_show_widgets.html#acc06918511388f3469d0af8d2695dc08", null ],
    [ "SetPosBoxChoice

    [ "SetPosConsoleWindows", "class_show_widgets.html#a24c6095f4d7ca399bbe5cf87bced29c7", null ],
    [ "SetPosCustomer", "class_show_widgets.html#a8f42677931d6e8e3f7c4f8565b59ff7e", null ],
    [ "SetPosDeliveryConfirm", "class_show_widgets.html#a9896ce3d3785c60583afddf882d055dd", null ],
    [ "setPosDoorsManager", "class_show_widgets.html#a17afc4d1af9efebdbec864c61911cac0", null ],
    [ "SetPosEditSettingSystem", "class_show_widgets.html#aa4a8155250252ffe44d17e07846bdaae", null ],
    [ "SetPosLogin", "class_show_widgets.html#ae4c92b7642cfe98b5cb643f1bf46e5ae", null ],
    [ "SetPosMaintenanceMenu", "class_show_widgets.html#a5a75864fb86be29bf4a7d1ea3d1d6cab", null ],
    [ "SetPosMenuDelivery", "class_show_widgets.html#a22237a4824334438a640a2fae169c528", null ],
    [ "SetPosOpenEmptyBox", "class_show_widgets.html#ade749a1e2cb372cdc878a07ebbc32436", null ],
    [ "SetPosScanPackage", "class_show_widgets.html#ab45c6a1431201b74dc7a4755627cc7f6", null ],
    [ "SetPosSetting", "clas

    [ "SetPosSettingSystem", "class_show_widgets.html#a43eaeabac8ea2138824cd43223edf5ba", null ],
    [ "SetPosShowPackageBox", "class_show_widgets.html#a7909e16b6e46794af9308a872a0aa154", null ],
    [ "SetPosSiteConfigManager", "class_show_widgets.html#ac35c8cbd195ad1d233cdd120a031d306", null ],
    [ "SetPosSQLite_Local_DatabaseManager", "class_show_widgets.html#a810fd079c17ee54dd65e586204f64d26", null ],
    [ "SetPosStowPackages", "class_show_widgets.html#abdd6508aab642e14181da711f55a810b", null ],
    [ "SetStackedWidget", "class_show_widgets.html#aace00e3b059233ac9203cd937800c375", null ],
    [ "ShowWAssistance", "class_show_widgets.html#ac230452a5da05d25be4b40964c9a310a", null ],
    [ "ShowWBoxChoice", "class_show_widgets.html#ab038ff960339a0f5c89db56992a3235e", null ],
    [ "ShowWConsoleWindows", "class_show_widgets.html#a41e281e6f1ca3b1789f552ac60e00776", null ],
    [ "ShowWCustomer", "class_show_widgets.html#aaabbf73abffc900127d4829dec8fd1a6", null ],
    [ "ShowWDelive

    [ "ShowWDoorsManager", "class_show_widgets.html#a3ee625b95df8afdad6cd0d258ea81105", null ],
    [ "ShowWEditSettingSystem", "class_show_widgets.html#aab5a07f98b97a85fb46e90be4ad6f45c", null ],
    [ "ShowWidgetCurrent", "class_show_widgets.html#a2c77dee18274c9f252eddc1b8fa5301b", null ],
    [ "ShowWLogin", "class_show_widgets.html#aaf54034b425c4c6f8903abb3b3e9a960", null ],
    [ "ShowWMaintenanceMenu", "class_show_widgets.html#a2f27dd65c0d8b16dffc3dd77bdc21c45", null ],
    [ "ShowWMenuDelivery", "class_show_widgets.html#af2fbfd95464a3bab01663fe19a80a1a4", null ],
    [ "ShowWOpenEmptyBox", "class_show_widgets.html#a0eb312bd11ecabca7a80b130bc1e9758", null ],
    [ "ShowWPackageBox", "class_show_widgets.html#a4e1eac80bbf827e314a45c5bd177c71a", null ],
    [ "ShowWScanPackage", "class_show_widgets.html#a39a53de24f170fca45ef37b43a39c8e9", null ],
    [ "ShowWSetting", "class_show_widgets.html#aea1ab328a9374608259240d0c8958500", null ],
    [ "ShowWSettingSystem", "class_show_widget
/**
 * Created by syzer on 4/16/2014.
 */
module.exports = function diController(initialServices) {
    'use strict';
    var SERVICE_INVALID = 'Invalid service';
    var SERVICE_DOES_NOT_EXISTS = 'Service with this name does not exist';
    var SERVICE_WAS_EXISTING = 'Cannot add service that exists';
    var services = initialServices || {};
    return {
        add: function (serviceName, service) {
            if (!service || !serviceName) {
                throw new Error(SERVICE_INVALID);
            }
            if (this.hasService(serviceName)) {
                throw new Error(SERVICE_WAS_EXISTING + ': ' + serviceName);
            }
            services[serviceName] = service;
        },
        /**
         * return service , if service is curred returns auto-curred/resolved version
         * @param serviceName
         * @returns {*}
         */
        get: function (serviceName) {
            if (!this.hasService(serviceName)) {
                throw new Error(SERVICE_DO
define([
  , 'services/PartService'
  , 'services/MaterialService'
  , 'services/WindowModelService'
  , 'services/GlassService'
  , 'services/NeedMaterialService'
  , 'services/NeedGlassService'
  , 'services/NeedPartService'
  , 'services/BallService'
  , 'services/ColorService'
  , 'services/GrainService'
  , 'services/ContactListService'
  , 'services/GlassBallService'
], function(Console, _, ps, ms, ws, gs, nms, ngs, nps, bs, cs, grains, cls, gbs) {
  "use strict";
  Console.group("Entering Service module.");
  Console.info("PartService", ps);
  Console.info("MaterialService", ms);
  Console.info("WindowModelService", ws);
  Console.info("GlassService", gs);
  Console.info("NeedMaterialService", nms);
  Console.info("NeedGlassService", ngs);
  Console.info("NeedPartService", nps);
  Console.info("BallService", bs);
  Console.info("ColorService", cs);
  Console.info("GrainService", grains);
  Console.info("ContactListService", cls);
  Console.info("GlassBallService", gbs);
  var se
var dispatch_form="";
var dispatch_div="";
$(function(){
  $('#dispatch_form .btn').each(function(){
    $(this).click(function(){
      $("#dispatch_error_message").empty();
      dispatch_form = $(this).parents("form");
      page = $(dispatch_form).parent().find(".disabled").attr("value");
      dispatch_div = $(dispatch_form).parent().find(".dispatch_paginator");
      Dajaxice.adminStaff.Dispatch(Dispatch_callback,{'form':$(dispatch_form).serialize(true),'identity':$(this).attr("id"),'page':page,'search_form':$(dispatch_div).parent().find("#search_form").serialize(true)});
    })
  })
  $('#search_form .btn').each(function(){
    $(this).click(function(){
      dispatch_form = $(this).parents("form");
      page = $(dispatch_form).parent().find(".disabled").attr("value");
      dispatch_div = $(dispatch_form).parent().find(".dispatch_paginator");
      ids = $(dispatch_div).attr("id").split('_');
      Dajaxice.adminStaff.DispatchPagination(DispatchPaginationCallback,{'page':page,

    })
  })
})
$(document).on("click",".dispatch_paginator .item_page",function(){
      dispatch_div = $(this).parents(".dispatch_paginator");
      page = $(this).attr("arg");
      ids = $(dispatch_div).attr("id").split('_');
      Dajaxice.adminStaff.DispatchPagination(DispatchPaginationCallback,{'page':page, 'identity':ids[1], 'search_form':$(dispatch_div).parent().find("#search_form").serialize(true)});
})
$(document).on("click","table .btn-danger",function(){
  username=$(this).parent().parent().children(0).html();
  dispatch_div = $(this).parents(".dispatch_paginator");
  page = $(dispatch_div).find(".disabled").attr("value");
  Dajaxice.adminStaff.DispatchDelete(DispatchDelete_callback,{'username':username,'identity':$(dispatch_div).attr("id").split("_")[1],'page':page, 'search_form':$(dispatch_div).parent().find("#search_form").serialize(true)});
})
function DispatchDelete_callback(data){
  if (data.status == "1"){
    $(dispatch_div).html(data.table);
  }
  alert(data.messa
/**
 * @class AbstractServiceFactory
 *
 * @author: darryl.west@roundpeg.com
 * @created: 8/13/14 9:03 AM
 */
const dash = require('lodash' ),
    IndexPageService = require( '../services/IndexPageService' ),
    WebStatusService = require( '../services/WebStatusService' );
const AbstractServiceFactory = function(options) {
    'use strict';
    const factory = this,
        log = options.log,
        createLogger = options.createLogger;
    let services = {};
    /**
     * creates a single instance of IndexPageService
     *
     * @returns the index page service
     */
    this.createIndexPageService = function() {
        let service = services[ IndexPageService.SERVICE_NAME ];
        if (!service) {
            log.info('create index page service');
            const opts = dash.clone( options );
            opts.log = createLogger( IndexPageService.SERVICE_NAME );
            service = new IndexPageService( opts );
            services[ IndexPageService.SERVICE_NAME ] = service

        }
        return service;
    };
    /**
     * creates a single instance of WebStatusService
     *
     * @returns the service instance
     */
    this.createWebStatusService = function() {
        let service = services[ WebStatusService.SERVICE_NAME ];
        if (!service) {
            log.info('create web status service');
            const opts = dash.clone( options );
            opts.log = createLogger( WebStatusService.SERVICE_NAME );
            opts.dataService = {};
            service = new WebStatusService( opts );
            services[ WebStatusService.SERVICE_NAME ] = service;
        }
        return service;
    };
    if (!log) {
        throw new Error('service factory must be constructed with a log');
    }
    if (!createLogger) {
        throw new Error('service factory must be constructed with a create logger method');
    }
};
AbstractServiceFactory.extend = function(child, options) {
    'use strict';
    const parent = new AbstractServiceFactory( 
define(['controller/appCtrl',
        'controller/loginCtrl',
        'controller/settingCtrl',
        'controller/aboutCtrl',
        'controller/feedbackCtrl',
        'controller/timelineCtrl',
        'controller/itemCtrl',
        'controller/postCtrl',
        'controller/contactCtrl',
        'controller/commentCtrl',
        'controller/messageCtrl',
        'controller/languageCtrl',
        'controller/archiveCtrl',
        'controller/kuhalnicaCtrl',
        'controller/kuhalnicaitemCtrl',
        'controller/recipeCtrl',
        'controller/moviesCtrl',
        'controller/moviesItemCtrl',
        'controller/signupCtrl'],function(appCtrl,loginCtrl,settingCtrl,aboutCtrl,feedbackCtrl,timelineCtrl,itemCtrl,postCtrl,contactCtrl,commentCtrl,messageCtrl,languageCtrl,archiveCtrl,kuhalnicaCtrl,kuhalnicaitemCtrl, recipeCtrl, moviesCtrl,moviesItemCtrl, signupCtrl) {
    var module = {
        module: function(name){
            var controller;
            switch (name){
           

                    controller = appCtrl;
                    break;
                case 'loginCtrl':
                    controller = loginCtrl;
                    break;
                case 'settingCtrl':
                    controller = settingCtrl;
                    break;
                case 'aboutCtrl':
                    controller = aboutCtrl;
                    break;
                case 'feedbackCtrl':
                    controller = feedbackCtrl;
                    break;
                case 'timelineCtrl':
                    controller = timelineCtrl;
                    break;
                case 'itemCtrl':
                    controller = itemCtrl;
                    break;
                case 'postCtrl':
                    controller = postCtrl;
                    break;
                case 'contactCtrl':
                    controller = contactCtrl;
                    break;
                case 'commentCtrl':
                    controller = comme

                    break;
                case 'messageCtrl':
                    controller = messageCtrl;
                    break;
                case 'languageCtrl':
                    controller = languageCtrl;
                    break;
                case 'archiveCtrl':
                    controller = archiveCtrl;
                    break;
                case 'kuhalnicaCtrl':
                    controller = kuhalnicaCtrl;
                    break;
                case 'kuhalnicaitemCtrl':
                    controller = kuhalnicaitemCtrl;
                    break;
                case 'recipeCtrl':
                    controller = recipeCtrl;
                    break;
                case 'moviesCtrl':
                    controller = moviesCtrl;
                    break;
                case 'moviesItemCtrl':
                    controller = moviesItemCtrl;
                    break;
                case 'signupCtrl':
                    controller = signupCtrl;

(function() {
  $(document).ready(function() {
    var $nav, $navSpacer, $subnav;
    $nav = $(".sticky-nav");
    $subnav = $(".sticky-subnav");
    $navSpacer = $("<div />", {
      "class": "nav-drop-spacer",
      height: $nav.outerHeight()
    });
    if ($nav.length && $subnav.length) {
      return $(window).scroll(function() {
        if (!$nav.hasClass("nav-fix") && $(window).scrollTop() > $nav.offset().top) {
          $nav.before($navSpacer);
          $nav.addClass("nav-fix");
          return $subnav.addClass("subnav-fix");
        } else if ($nav.hasClass("nav-fix") && $(window).scrollTop() < $navSpacer.offset().top) {
          $nav.removeClass("nav-fix");
          $subnav.removeClass("subnav-fix");
          return $navSpacer.remove();
        }
      });
    } else {
      return $(window).scroll(function() {
        if (!$nav.hasClass("nav-fix") && $(window).scrollTop() > $nav.offset().top) {
          $nav.before($navSpacer);
          return $nav.addClass("nav-fix"
var operaI18N = {
	getMessage : function (key) {
		var value = '';
		if (localeMessage[key]) {
			value = localeMessage[key].message;
		}
		return value;
	}
var localeMessage = {
	"AuthenticationFailure": {
		"message": "在你剪辑该页面之前，请先点击保存到wiz工具栏按钮登陆"
	},
	"Completed": {
		"message": "已完成"
	},
	"DeletedItems": {
		"message": "已删除"
	},
	"Inbox": {
		"message": "收集箱"
	},
	"MyContacts": {
		"message": "我的联系人"
	},
	"MyDrafts": {
		"message": "我的草稿"
	},
	"MyEmails": {
		"message": "我的邮件"
	},
	"MyEvents": {
		"message": "我的事件"
	},
	"MyJournals": {
		"message": "我的日记"
	},
	"MyMobiles": {
		"message": "我的手机"
	},
	"MyNotes": {
		"message": "我的笔记"
	},
	"MyPhotos": {
		"message": "我的照片"
	},
	"MyStickyNotes": {
		"message": "我的桌面便笺"
	},
	"MyTasks": {
		"message": "我的任务"
	},
	"actionName": {
		"message": "为知笔记网页剪辑器"
	},
	"add_comment": {
		"message": "添加评论"
	},
	"add_tag": {
		"message": "输入标签"
	},
	"article_save": {
		"message": "保存文章"
	},
	"category_loading": {
		"message": "加载中，请稍后"
	},
	"category

		"message": "文件夹: "
	},
	"clipResult_clipping": {
		"message": "正在剪辑"
	},
	"clipResult_error": {
		"message": "保存失败"
	},
	"clipResult_success": {
		"message": "已剪辑"
	},
	"clipResult_sync": {
		"message": "正在同步"
	},
	"comment_tip": {
		"message": "评论: "
	},
	"contentPreview_clipArticle": {
		"message": "剪辑文章"
	},
	"contentPreview_expandSelection": {
		"message": "扩大选取区域"
	},
	"contentPreview_moveSelection": {
		"message": "移动选取区域"
	},
	"contentPreview_shrinkSelection": {
		"message": "缩小选取区域"
	},
	"contextMenus_clipPage": {
		"message": "保存到为知笔记"
	},
	"contextMenus_clipSelection": {
		"message": "剪辑选择"
	},
	"contextMenus_clipUrl": {
		"message": "剪辑 URL"
	},
	"create_account_link": {
		"message": "创建为知笔记账号"
	},
	"description": {
		"message": "使用“为知笔记”扩展程序，将网络上你需要的内容与网页保存到你自己的帐户"
	},
	"extName": {
		"message": "为知笔记网页剪辑器"
	},
	"fullpage_save": {
		"message": "保存整页"
	},
	"install_client_notify": {
		"message": "该功能需要安装最新版的wiz客户端，是否跳转到下载页面?"
	},
	"keep_password_tip": {
		"message": "记住密码
var assert     = require("assert"),
    _          = require("underscore"),
    thicket    = require("../../../../lib-node/thicket/index"),
    Dispatcher = thicket.c("dispatcher");
describe("Dispatcher", function() {
  it("should dispatch to provided delegate per mT", function() {
    var dispatchCount = 0,
        dispatcher = new Dispatcher({
          prefix: "onBob",
          elseSuffix: "Loblaw",
          malformedSuffix: "notBob",
          delegate: {
            onBobLoblaw: function(msg) {
              assert.equal(msg.mT, "NOTFOUND");
              dispatchCount++;
            },
            onBobNotBob: function(msg) {
              assert.ok(!msg.mT);
              dispatchCount++;
            },
            onBobBob: function(msg) {
              assert.equal(msg.mT, "bob");
              dispatchCount++;
            }
          }
        });
    dispatcher.dispatch({
      mT: "NOTFOUND"
    });
    dispatcher.dispatch({
      mT: null
    });
    dispatcher.dispatch(
var GrocRoundAdminServicesIntegration;
(function (GrocRoundAdminServicesIntegration) {
    GrocRoundAdminServicesIntegration.integrate = function () {
        /*******************************************************************/
        angular.module("toastService", []);
        angular.module("toastService").factory("ToastService", Toast);
        Toast.$inject = [
            "$q",
            "$mdToast"
        ];
        function Toast($q, $mdToast) {
            return new ToastService.Service($q, $mdToast);
        }
        /*******************************************************************/
        angular.module("dialogService", []);
        angular.module("dialogService").factory("DialogService", Dialog);
        Dialog.$inject = [
            "$q",
            "$mdDialog"
        ];
        function Dialog($q, $mdDialog) {
            return new DialogService.Service($q, $mdDialog);
        }
        /*******************************************************************/
   

        angular.module("contextsService").factory("ContextsService", Contexts);
        Contexts.$inject = [
            "$location"
        ];
        function Contexts($location) {
            return new GrocRoundAdminContextsService.Service($location);
        }
        /*******************************************************************/
        angular.module("profileService", [
            "toastService",
            "contextsService"
        ]);
        angular.module("profileService").factory("ProfileService", Profile);
        Profile.$inject = [
            "$q",
            "$http",
            "$timeout",
            "ToastService",
            "ContextsService"
        ];
        function Profile($q, $http, $timeout, ToastService, ContextsService) {
            return new GrocRoundAdminProfileService.Service($q, $http, $timeout, ToastService, ContextsService);
        }
        /*******************************************************************/
        angular.module("s

        angular.module("shopsService").factory("ShopsService", Shops);
        Shops.$inject = [
            "$q",
            "$http",
            "$timeout",
            "ToastService",
            "ContextsService"
        ];
        function Shops($q, $http, $timeout, ToastService, ContextsService) {
            return new GrocRoundAdminShopsService.Service($q, $http, $timeout, ToastService, ContextsService);
        }
        /*******************************************************************/
        angular.module("productsService", []);
        angular.module("productsService").factory("ProductsService", Products);
        Products.$inject = [
            "$q",
            "$http",
            "$timeout",
            "ToastService",
            "ContextsService"
        ];
        function Products($q, $http, $timeout, ToastService, ContextsService) {
            return new GrocRoundAdminProductsService.Service($q, $http, $timeout, ToastService, ContextsService);
        }
  
/*global Messenger window */
angular.module('notifications.services', [])
  .factory('notifications', 
    function () {
      Messenger.options = {
        extraClasses: 'messenger-fixed messenger-on-top messenger-on-right',
        theme: 'flat'
      };
      var notifications = {
        message : function (message, config) {
          message.showCloseButton = true;
          if (angular.isDefined(config) && angular.isObject(config)) {
            message = angular.extend(message, config);
          }
          new Messenger().post(message);
        },
        error : function (message, config) {
          notifications.message({message: message, type: 'error', id: 'error-message'}, config);
        },
        success : function (message, config) {
          notifications.message({message: message, type: 'success', id: 'success-message'}, config);
        },
        info: function (message, config) {
          notifications.message({message: message, type: 'info', id: 'info-messag
/**
 * Created by K on 11/1/2016.
 */
var express = require('express');
var router = express.Router();
var Service = require('../models/service');
/**Request
 * body
 *  service_id
 *  service_name
 *  service_price
 * */
/**Response
 * service
 */
router.post('/create', function (req, res) {
    var service_name = req.body.service_name;
    var service_price = req.body.service_price;
    var service_desciption = req.body.service_desciption;
    var newService = new Service({
        service_name: service_name,
        service_price: service_price,
        service_desciption : service_desciption
    });
    Service.createService(newService, function (err, service) {
        if (err) throw err;
        res.json({
            success: true,
            msg: "Successfully Create Service",
            data: service
        });
    });
});
/**Request
 * param
 *  service_id
 * */
/**Response
 * service
 */
router.get('/findinfo/:id', function (req, res) {
    Service.getServiceById(req.para

        if (err) throw err;
        res.json({
            success: true,
            data: service
        });
    });
});
/**Request
 * param
 *  service_name
 * */
/**Response
 * service
 */
router.get('/findname/:name', function (req, res) {
    Service.getServiceByName(req.params.name, function (err, service) {
        if (err) throw err;
        res.json({
            success: true,
            data: service
        });
    });
});
/**Request
 * param
 *  service_price
 * */
/**Response
 * services
 */
router.get('/findprice/:price', function (req, res) {
    Service.getServiceByPrice(req.params.price, function (err, services) {
        if (err) throw err;
            res.json({
                success: true,
                msg: 'Service was found!',
                data: services
            });
    });
});
/**Request
 * param
 *  service_id
 *  body
 *  service_name
 *  service_desciption
 *  servce_price
 * */
/**Response
 * service
 */
router.put('/updateinfo/:id', function

    Service.getServiceById(req.params.id, function (err, service) {
        if (err) throw err;
        service.service_name = req.body.service_name;
        service.service_desciption = req.body.service_desciption;
        service.service_price = req.body.service_price;
        Service.createService(service, function (err, service) {
            if (err) throw err;
            res.json({
                success: true,
                msg: "Update Successfully!",
                data: service
            });
        });
    });
});
/**Request
 * param
 *  service_name
 * */
/**Response
 * service
 */
router.get('/findall', function (req, res) {
    Service.findAll(err,function(err,service){
        if(err) throw err;
        res.json({
            success : true,
            data : service
        });
    });
});
router.delete('/deleteservice/:id', function (req, res) {
    Service.removeService(req.params.id, function (err) {
        if (err) throw err;
        res.json({
           
var mainApp = angular.module("mainApp", ["ngRoute"]);
mainApp.config(function($routeProvider, $locationProvider){
	$routeProvider.when("/", {
		templateUrl: "templates/home.html",
		controller: "homeController"
	})
	.when("/view1",{
		templateUrl: "templates/view1.html",
		controller: "viewBooksController"
	})
	.when("/view2",{
		templateUrl: "templates/view2.html",
		controller: "manageBooksController"
	})
	.when("/view3", {
		templateUrl: "templates/view3.html",
		controller: "addBookController"
	})
	.when("/view4", {
		templateUrl: "templates/view4.html",
		controller: "viewNotesController"
	})
	.when("/view5", {
		templateUrl: "templates/view5.html",
		controller: "addNoteController"
	})
	.when("/view6", {
		templateUrl: "templates/view6.html",
		controller: "viewNoteController"
	})
	.otherwise({redirectTo: "/"});
	$locationProvider.html5Mode(true);
});
mainApp.controller("homeController", function(){});
mainApp.controller("viewBooksController", function(){});
mainApp.controller("m
"use strict";
/**
 * ChatMessage
 * class for chat message objects
 * @constructor
 */
function ChatMessage(messageType) {
    this.type = ChatMessage.Type;
    this.messageType = messageType;
    this.text = "";
    this.from = User.load().getUsername();
    this.to = "";
    this.readyState = "";
    this.party = [];
    this.id = "";
    this.startPlayer = "";
                    ChatMessage.Type = "ChatMessage";
             ChatMessage.TextMessage = "ChatText";
          ChatMessage.ConnectMessage = "ConnectMessage";
        ChatMessage.StartGameMessage = "StartGameMessage";
       ChatMessage.DisconnectMessage = "DisconnectMessage";
       ChatMessage.InvitationMessage = "InvitationMessage";
      ChatMessage.AlreadyHereMessage = "AlreadyHereMessage";
    ChatMessage.NewReadyStateMessage = "NewReadyStateMessage";
   ChatMessage.NewPartyMemberMessage = "NewPartyMemberMessage";
ChatMessage.DeclineInvitationMessage = "DeclineInvitationMessage";
ChatMessage.AcceptInvitationMessage = 
'use strict';
angular.module('komanaiApp')
  .service('unity', function () {
    var service = {};
    service.u = new UnityObject2();
    service.currentPos = {};
    service.visibleImage = undefined;
    service.moveToPosition = function(x,y,z) {
      service.currentPos = {x:x, y:y, z:z}
      service.u.getUnity().SendMessage("MainCamera", "MoveToPosition", service.currentPos.x + "," + service.currentPos.y + "," + service.currentPos.z);
    }
    service.toStreetLevel = function() {
      service.currentPos.y = 0.05
      console.log(service.currentPos);
      service.u.getUnity().SendMessage("MainCamera", "MoveToPosition", service.currentPos.x + "," + service.currentPos.y + "," + service.currentPos.z);
    }
    service.to50mLevel = function() {
      console.log("click");
      service.currentPos.y = 1
      service.u.getUnity().SendMessage("MainCamera", "MoveToPosition", service.currentPos.x + "," + service.currentPos.y + "," + service.currentPos.z);
    }
    service.focusOnFire
const addLoggingToDispatch = (store) => {
  const rawDispatch = store.dispatch;
  if (!console.group) {
    return rawDispatch;
  }
  return (action) => {
    console.groupCollapsed(`${action.type} (${formatTime(new Date())})`);
    console.log('%c prev state', 'color: gray', store.getState());
    console.log('%c action', 'color: blue', action);
    const returnValue = rawDispatch(action);
    console.log('%c next state', 'color: green', store.getState());
    console.groupEnd(action.type);
    return returnValue;
  }
const addCallbackToDispatch = (store) => {
  const rawDispatch = store.dispatch;
  return (action) => {
    return (typeof(action) === 'function') ?
      action(rawDispatch, store.getState) :
      rawDispatch(action);
  }
const addLocalStorageToDispatch = (store) => {
  const rawDispatch = store.dispatch;
  return (action) => {
    if (typeof(action.localDataState) === 'object')
      saveState(action.localDataState);
    return rawDispatch(action);
  }
export const co
var searchData=
  ['show_5fin_5fadd',['SHOW_IN_ADD',['../class_s_s_d_b_schema.html#a55c88aea8820a5fc40a17c42b2c57465',1,'SSDBSchema']]],
  ['show_5fin_5faddress',['SHOW_IN_ADDRESS',['../class_s_s_d_b_schema.html#aedd959ec63b30b40b43c06e21ae9326e',1,'SSDBSchema']]],
  ['show_5fin_5fbill_5faddress',['SHOW_IN_BILL_ADDRESS',['../class_s_s_d_b_schema.html#acf4e795baec6ef940676cbea3d2d0d8a',1,'SSDBSchema']]],
  ['show_5fin_5fcart_5fitem',['SHOW_IN_CART_ITEM',['../class_s_s_d_b_schema.html#af9a371fb7b04ba059f6e412dd30f30f7',1,'SSDBSchema']]],
  ['show_5fin_5fcart_5fitem_5fdel',['SHOW_IN_CART_ITEM_DEL',['../class_s_s_d_b_schema.html#af07188002331b6270f206c0e8c15f70e',1,'SSDBSchema']]],
  ['show_5fin_5fdeliver_5faddress',['SHOW_IN_DELIVER_ADDRESS',['../class_s_s_d_b_schema.html#ae9ddf8ce120064b82080c5af1c293c9f',1,'SSDBSchema']]],
  ['show_5fin_5fdetail',['SHOW_IN_DETAIL',['../class_s_s_d_b_schema.html#ac823829fd1c75bddaca433cb159dce15',1,'SSDBSchema']]],
  ['show_5fin_5fedit',['SHOW_IN_EDIT',[
    var ServiceContainerShare = function(handle)
    {
        this.instance = null;
        this.handle = handle;
        this.getData = function(c)
        {
            if(null === this.instance) {
                this.instance = this.handle(c);
            }
            return this.instance;
        };
    };
    var ServiceContainer = Class(
    {
        "public get" : function(serviceName)
        {
            if(typeof ServiceContainer.$("services")[serviceName] == "object" && ServiceContainer.$("services")[serviceName] instanceof ServiceContainerShare)
            {
                return ServiceContainer.$("services")[serviceName].getData(this);
            }
            else if(typeof ServiceContainer.$("services")[serviceName] == "function")
            {
                return ServiceContainer.$("services")[serviceName](this);
            }
            else
            {
                ServiceContainer.$("services")[serviceName];
            }
        },
        "public 
FactorySim.module("FactoryApp.Show", function(Show, App, Backbone, Marionette, $, _){
    Show.Controller = App.Controllers.Base.extend({
        initialize: function (options) {
            this.factory = options.factory;
            this.layout =  this.getLayout();
            this.listenTo(this.layout, "show", function () {
                this.showWorkers();
                this.showResources();
                this.showJobs();
                this.showMarkets();
                this.showConnections();
            });
            this.show(this.layout);
        },
        showWorkers: function () {
            App.execute("show:workers", {
                region: this.layout.workersRegion,
                workers: this.factory.workers
            });
        },
        showResources: function() {
            App.execute("show:resources", {
                region: this.layout.resourcesRegion,
                resources: this.factory.resources
            });
        },
        showJo
var recorder = require('.');
var keycode = require('keycode');
var events = require('events');
describe('recorder', function () {
  it('should capture a valid shortcut', function (done) {
    i = 0;
    recorder.start()
      .on('end', function (res) {
        res.should.eql(['ctrl', 'x']);
        i++;
      });
    dispatch('keydown', 'ctrl');
    dispatch('keydown', 'x');
    dispatch('keydown', 'y');
    recorder.start()
      .on('end', function (res) {
        res.should.eql(['ctrl', 'alt', 'y']);
        i++;
      });
    dispatch('keydown', 'alt');
    dispatch('keydown', 'ctrl');
    dispatch('keydown', 'y');
    dispatch('keydown', 'x');
    recorder.start()
      .on('end', function (res) {
        res.should.eql(['ctrl', 'command', 'x']);
        if(i == 2) done();
      });
    dispatch('keydown', 'command');
    dispatch('keydown', 'ctrl');
    dispatch('keydown', 'x');
  });
  it('should update unpressed pfx keys', function (done) {
    recorder.start()
      .on('end'

        res.should.eql(['ctrl', 'x']);
        done();
      });
    dispatch('keydown', 'alt');
    dispatch('keydown', 'shift');
    dispatch('keyup', 'shift');
    dispatch('keyup', 'alt');
    dispatch('keydown', 'ctrl');
    dispatch('keydown', 'x');
  });
  it('should not end when only shift is pressed', function (done) {
    recorder.start()
      .on('end', function (res) {
        res.should.eql(['shift', 'command', 'y']);
        done();
      });
    dispatch('keydown', 'shift');
    dispatch('keydown', 'x');
    dispatch('keyup', 'x');
    dispatch('keydown', 'command');
    dispatch('keydown', 'y');
  });
  it('should cancel explicitly', function (done) {
    recorder.start()
      .on('cancel', function () {
        done();
      });
    dispatch('keydown', 'ctrl');
    recorder.cancel();
  });
  it('should cancel implicitly', function (done) {
    recorder.start()
      .on('cancel', function () {
        done();
      });
    recorder.start();
  });
  it('should cancel
/**
 * @module vaultier-initializer
 */
ApplicationKernel.namespace('Vaultier.initializers');
/**
 * Dependency injection initializer, service dependency injection should be defined here
 *
 *
 * @class Vaultier.initializers.DI
 */
Vaultier.initializers.DI = {
    name: 'vaultier-di',
    after: 'vaultier-boot',
    initialize: function (container, app) {
        app.register('store:main', Vaultier.dal.core.Client, {instantiate: false});
        app.inject('route', 'store', 'store:main');
        app.inject('controller', 'store', 'store:main');
        app.inject('controller', 'router', 'router:main');
        app.inject('component', 'store', 'store:main');
        RESTless.set('client', Vaultier.dal.core.Client);
        app.register('service:errors', Service.Errors);
        app.inject('route', 'errors', 'service:errors');
        app.inject('component', 'errors', 'service:errors');
        app.inject('view', 'errors', 'service:errors');
        app.inject('service:errors', 'errorCon

        app.inject('service:errors', 'router', 'router:main')
        app.register('service:session', Service.Session);
        app.register('service:storage', Service.Storage);
        app.register('service:auth', Service.Auth)
        app.inject('service:auth', 'coder', 'service:coder')
        app.inject('service:auth', 'store', 'store:main')
        app.inject('service:auth', 'router', 'router:main')
        app.inject('service:auth', 'session', 'service:session')
        app.inject('service:auth', 'storage', 'service:storage')
        app.register('service:tree', Service.Tree);
        app.inject('route', 'auth', 'service:auth');
        app.inject('route', 'tree', 'service:tree');
        app.inject('controller', 'auth', 'service:auth');
        app.inject('controller', 'tree', 'service:tree');
        app.inject('service:tree', 'store', 'store:main');
        app.inject('service:tree', 'adapter', 'adapter:node')
        app.register('service:coder', Service.Coder)
        app.r

        app.inject('service:invitations', 'store', 'store:main')
        app.inject('service:invitations', 'session', 'service:session')
        app.inject('service:invitations', 'auth', 'service:auth');
        app.inject('service:invitations', 'router', 'router:main');
        app.inject('service:invitations', 'tree', 'service:tree');
        app.inject('route:InvitationUse', 'invitations', 'service:invitations')
        app.inject('route:InvitationAccept', 'invitations', 'service:invitations')
        app.inject('route', 'invitations', 'service:invitations');
        app.register('service:keytransfer', Service.KeyTransfer)
        app.inject('service:keytransfer', 'store', 'store:main');
        app.inject('service:keytransfer', 'auth', 'service:auth');
        app.inject('service:keytransfer', 'coder', 'service:coder');
        if (ApplicationKernel.Config.environment != 'dev-mock') {
            app.register('service:nodekey', Service.NodeKey);
        } else {
            app.re

        }
        app.inject('service:nodekey', 'auth', 'service:auth');
        app.inject('service:nodekey', 'store', 'store:main');
        app.inject('service:nodekey', 'coder', 'service:coder');
        app.inject('service:nodekey', 'keytransfer', 'service:keytransfer');
        app.register('service:changekey', Service.ChangeKey);
        app.inject('route:SettingsKeys', 'changekey', 'service:changekey');
        app.inject('route:AuthLostKeyRecoveryRebuild', 'changekey', 'service:changekey');
        app.inject('service:changekey', 'store', 'store:main');
        app.inject('service:changekey', 'auth', 'service:auth');
        app.inject('service:changekey', 'coder', 'service:coder');
        app.register('service:newuserinit', Service.NewUserInit);
        app.inject('service:newuserinit', 'auth', 'service:auth');
        app.inject('service:newuserinit', 'router', 'router:main');
        app.inject('service:newuserinit', 'invitations', 'service:invitations');
        app.inje
"use strict";
var assert = require("assert");
var schlub = require("../src/schlub");
describe("schlub", function() {
    it("should be an object", function() {
        assert.ok(typeof schlub === "object", "not an object");
        assert.ok(schlub !== null, "null");
    });
    describe("api", function() {
        function ServiceA() {
            this.name = "service a";
        }
        function ServiceB(serviceA) {
            this.name = "service b";
            this.serviceA = serviceA;
        }
        function ServiceB2() {
            this.name = "service b2";
        }
        function ServiceC(serviceA, serviceB) {
            this.name = "service c";
            this.serviceA = serviceA;
            this.serviceB = serviceB;
        }
        function ServiceD() {
            this.name = "service d";
        }
        function ServiceE(serviceA, serviceB, arg1, arg2) {
            this.name = "service e";
            this.serviceA = serviceA;
            this.serviceB = s

            this.arg1 = arg1;
            this.arg2 = arg2;
        }
        function ServiceF(serviceA) {
            this.name = "service f";
            this.serviceA = serviceA;
        }
        schlub.point("serviceA", function() {
            return new ServiceA();
        });
        schlub.point("serviceB/typeA", ["serviceA"],
            function(serviceA) {
                return new ServiceB(serviceA);
            }
        );
        schlub.point("serviceB/typeB", function() {
            return new ServiceB2();
        });
        schlub.point("serviceC", ["serviceA", "serviceB/typeA"],
            function(serviceA, serviceB) {
                return new ServiceC(serviceA, serviceB);
            }
        );
        schlub.point("serviceD", function() {
            return new ServiceD();
        });
        schlub.point("serviceD/typeA/instance", new ServiceD());
        schlub.point("serviceE", ["serviceA", "serviceB/typeB"],
            function(serviceA, serviceB, a

                return new ServiceE(serviceA, serviceB, arg1, arg2);
            }
        );
        schlub.point("serviceF", ["serviceA"],
            function(serviceA) {
                return new ServiceF(serviceA);
            },
            { singleton: true });
        describe("#get", function() {
            it("can get a service with no dependencies", function() {
                var serviceA = schlub.get("serviceA");
                assert.equal(serviceA.name, "service a", "did not get service a");
            });
            it("can get a service under a directory", function() {
                var serviceB2 = schlub.get("serviceB/typeB");
                assert.equal(serviceB2.name, "service b2", "did not get service b2");
            });
            it("can get all services under a directory", function() {
                let services = schlub.get({ type: "serviceB/*", allowMultiple: true });
                let found = 0;
                assert.equal(services.length, 2

                for (let i = 0; i < services.length; i++) {
                    switch (true) {
                        case services[i] instanceof ServiceB:
                            found += 2;
                            break;
                        case services[i] instanceof ServiceB2:
                            found += 4;
                            break;
                    }
                }
                assert.equal(found, 6, "did not get all services");
            });
            it("can get a service with a single dependency", function() {
                var serviceB = schlub.get("serviceB/typeA");
                assert.equal(serviceB.name, "service b", "got service b");
                assert.equal(serviceB.serviceA.constructor, ServiceA, "service b did not get ServiceA dependency");
            });
            it("can get a service with a deep dependency tree", function() {
                var serviceC = schlub.get("serviceC");
                assert.equal(s

                assert.equal(serviceC.serviceA.constructor, ServiceA, "service c did not get ServiceA dependency");
                assert.equal(serviceC.serviceB.constructor, ServiceB, "service c did not get ServiceB dependency");
            });
            it("allows none when getting", function() {
                assert.doesNotThrow(function() {
                    assert.strictEqual(schlub.get({ type: "foo", allowNone: true }), null, "did not allow none");
                }, "did not allow none");
            });
            it("throws when none", function() {
                assert.throws(function() {
                    schlub.get("foo");
                });
            });
            it("throws when multiple", function() {
                assert.throws(function() {
                    schlub.get("serviceB/*");
                });
            });
            it("get registered instance", function() {
                var serviceDInstance = schlub.get("serviceD/typeA/instance")

                assert.equal(serviceDInstance.name, "service d", "did not get service d instance");
            });
            it("registering triggers register event", function() {
                var serviceD = new ServiceD();
                var triggered = false;
                schlub.once("register", function(type, service) {
                    assert.equal(type, "serviceD/typeA/instance", "triggered event did not have serviceD/typeA/instance");
                    assert.equal(service, serviceD, "triggered event did not contain the service");
                    triggered = true;
                });
                schlub.point("serviceD/typeA/instance", serviceD);
                assert.ok(triggered, "event wasn't triggered");
            });
            it("pass in dependency", function() {
                var serviceA = schlub.get("serviceA");
                var serviceB = schlub.get("serviceB/typeA", [serviceA]);
                assert.ok(serviceB.serviceA === serviceA, 

            });
            it("pass in constructor args", function() {
                var arg1 = "this is arg1";
                var arg2 = "this is arg2";
                var serviceE = schlub.get("serviceE", [], [arg1, arg2]);
                assert.equal(serviceE.name, "service e", "wrong service");
                assert.equal(serviceE.serviceA.constructor, ServiceA, "service e got wrong ServiceA dependency");
                assert.equal(serviceE.serviceB.constructor, ServiceB2, "service e got wrong ServiceB dependency");
                assert.equal(serviceE.arg1, arg1, "arg1 is incorrect");
                assert.equal(serviceE.arg2, arg2, "arg2 is incorrect");
            });
            it("pass in specific dependency of multiple dependencies", function() {
                var serviceB = schlub.get("serviceB/typeA");
                var serviceC = schlub.get("serviceC", [null, serviceB]);
                assert.equal(serviceC.name, "service c", "instantiated service c");
  

                assert.ok(serviceC.serviceB === serviceB, "serviceB isn't the same");
            });
            it("pass in specific dependency of multiple dependencies and constructor args", function() {
                var arg1 = "this is arg1";
                var arg2 = "this is arg2";
                var serviceB = schlub.get("serviceB/typeA");
                var serviceE = schlub.get("serviceE", [null, serviceB], [arg1, arg2]);
                assert.equal(serviceE.name, "service e", "wrong service");
                assert.equal(serviceE.serviceA.constructor, ServiceA, "service e got wrong ServiceA dependency");
                assert.ok(serviceE.serviceB === serviceB, "serviceB isn't the same");
                assert.equal(serviceE.arg1, arg1, "arg1 is incorrect");
                assert.equal(serviceE.arg2, arg2, "arg2 is incorrect");
            });
            it("returns the same singleton", function() {
                var serviceF1 = schlub.get("serviceF");
         

                assert.strictEqual(serviceF2, serviceF1, "serviceF is not a singleton");
            });
            it("returns a different instance of a singleton when asked", function() {
                var serviceF1 = schlub.get("serviceF");
                var serviceF2 = schlub.get({ type: "serviceF", newInstance: true });
                assert.ok(serviceF1 !== serviceF2, "serviceF didn't return a new instance");
            });
        });
        describe("#forget", function() {
            it("can forget all of a type", function() {
                let a = {};
                let b = {};
                schlub.point("forget/foo", a);
                schlub.point("forget/foo", b);
                let services = schlub.get({ type: "forget/foo", allowMultiple: true });
                assert.equal(services.length, 2, "services weren't registered");
                schlub.forget("forget/foo");
                services = schlub.get({ type: "forget/foo", allowNone: true });
     
'use strict';
var ns = {
    AjaxUtils: require('./AjaxUtils'),
    BindingLookup: require('./BindingLookup'),
    ListFilter: require('./ListFilter'),
    LookupServiceBuilder: require('./LookupServiceBuilder'),
    LookupServiceUtils: require('./LookupServiceUtils'),
    PageExpandUtils: require('./PageExpandUtils'),
    QueryPaginator: require('./QueryPaginator'),
    RequestCache: require('./RequestCache'),
    ResultSetPart: require('./ResultSetPart'),
    ResultSetUtils: require('./ResultSetUtils'),
    ServiceUtils: require('./ServiceUtils'),
    SparqlServiceBuilder: require('./SparqlServiceBuilder'),
    TableServiceUtils: require('./TableServiceUtils'),
    SparqlCacheSupplier: require('./cache/SparqlCacheSupplier'),
    Cache: require('./cache/Cache'),
    CacheSimple: require('./cache/CacheSimple'),
    Criteria: require('./criteria/Criteria'),
    Order: require('./criteria/Order'),
    Restrictions: require('./criteria/Restrictions'),
    ServiceBuilder: require('./criter

    DataService: require('./data_service/DataService'),
    DataServiceArray: require('./data_service/DataServiceArray'),
    DataServiceFilter: require('./data_service/DataServiceFilter'),
    DataServiceTransformEntry: require('./data_service/DataServiceTransformEntry'),
    AugmenterLookup: require('./list_service/AugmenterLookup'),
    ListService: require('./list_service/ListService'),
    ListServiceArray: require('./list_service/ListServiceArray'),
    ListServiceAugmenter: require('./list_service/ListServiceAugmenter'),
    ListServiceConcept: require('./list_service/ListServiceConcept'),
    ListServiceConceptKeyLookup: require('./list_service/ListServiceConceptKeyLookup'),
    ListServiceFn: require('./list_service/ListServiceFn'),
    ListServiceIndexSubString: require('./list_service/ListServiceIndexSubString'),
    ListServicePageExpand: require('./list_service/ListServicePageExpand'),
    ListServiceSparqlQuery: require('./list_service/ListServiceSparqlQuery'),
    ListS

    ListServiceTransformConceptMode: require('./list_service/ListServiceTransformConceptMode'),
    ListServiceTransformItem: require('./list_service/ListServiceTransformItem'),
    ListServiceTransformItems: require('./list_service/ListServiceTransformItems'),
    ListServiceUtils: require('./ListServiceUtils'),
    LookupService: require('./lookup_service/LookupService'),
    LookupServiceBase: require('./lookup_service/LookupServiceBase'),
    LookupServiceCache: require('./lookup_service/LookupServiceCache'),
    LookupServiceChunker: require('./lookup_service/LookupServiceChunker'),
    LookupServiceConst: require('./lookup_service/LookupServiceConst'),
    LookupServiceDelegateBase: require('./lookup_service/LookupServiceDelegateBase'),
    LookupServiceFn: require('./lookup_service/LookupServiceFn'),
    LookupServiceGraphSparql: require('./lookup_service/LookupServiceGraphSparql'),
    LookupServiceIdFilter: require('./lookup_service/LookupServiceIdFilter'),
    LookupServiceK

    LookupServiceListServiceSparql: require('./lookup_service/LookupServiceListServiceSparql'),
    LookupServiceMap: require('./lookup_service/LookupServiceMap'),
    LookupServiceFallback: require('./lookup_service/LookupServiceFallback'),
    LookupServiceMulti: require('./lookup_service/LookupServiceMulti'),
    LookupServiceSparqlQuery: require('./lookup_service/LookupServiceSparqlQuery'),
    LookupServiceTimeout: require('./lookup_service/LookupServiceTimeout'),
    LookupServiceTransform: require('./lookup_service/LookupServiceTransform'),
    LookupServiceTransformKey: require('./lookup_service/LookupServiceTransformKey'),
    QueryCacheBindingHashSingle: require('./query_cache/QueryCacheBindingHashSingle'),
    QueryCacheNodeFactory: require('./query_cache/QueryCacheNodeFactory'),
    QueryCacheNodeFactoryImpl: require('./query_cache/QueryCacheNodeFactoryImpl'),
    QueryExecution: require('./query_execution/QueryExecution'),
    QueryExecutionCache: require('./query_executi

    QueryExecutionDelegate: require('./query_execution/QueryExecutionDelegate'),
    QueryExecutionFailover: require('./query_execution/QueryExecutionFailover'),
    QueryExecutionHttp: require('./query_execution/QueryExecutionHttp'),
    QueryExecutionPageExpand: require('./query_execution/QueryExecutionPageExpand'),
    QueryExecutionPaginate: require('./query_execution/QueryExecutionPaginate'),
    UpdateExecutionHttp: require('./query_execution/UpdateExecutionHttp'),
    ResultSet: require('./result_set/ResultSet'),
    ResultSetArrayIteratorBinding: require('./result_set/ResultSetArrayIteratorBinding'),
    ResultSetHashJoin: require('./result_set/ResultSetHashJoin'),
    SparqlService: require('./sparql_service/SparqlService'),
    SparqlServiceBaseString: require('./sparql_service/SparqlServiceBaseString'),
    SparqlServiceCache: require('./sparql_service/SparqlServiceCache'),
    SparqlServiceConsoleLog: require('./sparql_service/SparqlServiceConsoleLog'),
    SparqlServiceFa

    SparqlServiceFactoryConst: require('./sparql_service/SparqlServiceFactoryConst'),
    SparqlServiceFactoryDefault: require('./sparql_service/SparqlServiceFactoryDefault'),
    SparqlServiceFailover: require('./sparql_service/SparqlServiceFailover'),
    SparqlServiceHttp: require('./sparql_service/SparqlServiceHttp'),
    SparqlServiceLimit: require('./sparql_service/SparqlServiceLimit'),
    SparqlServicePageExpand: require('./sparql_service/SparqlServicePageExpand'),
    SparqlServicePaginate: require('./sparql_service/SparqlServicePaginate'),
    SparqlServiceReliableLimit: require('./sparql_service/SparqlServiceReliableLimit'),
    SparqlServiceVirtFix: require('./sparql_service/SparqlServiceVirtFix'),
    SparqlUpdateBaseString: require('./sparql_service/SparqlUpdateBaseString'),
    SparqlUpdateHttp: require('./sparql_service/SparqlUpdateHttp'),
    TableService: require('./table_service/TableService'),
    TableServiceDelegateBase: require('./table_service/TableServiceDeleg
var nav_8h =
    [ "CloseDegAngles", "nav_8h.html#ac7337f6adcdaff21acccd2f32070b666", null ],
    [ "DistanceSquare", "nav_8h.html#ac72e29d6c97b6ae1fcf957fa59c69215", null ],
    [ "Eight", "nav_8h.html#aefc5a52ca873a9bfb3e1d31a261338a4", null ],
    [ "GetAltRef", "nav_8h.html#a24891072dad1936c21f884d623bda8b4", null ],
    [ "GetPosAlt", "nav_8h.html#a0bb5f5ae29ba1d5968fe7857a304253e", null ],
    [ "GetPosX", "nav_8h.html#ac500a50330425cb4a3054774289bb205", null ],
    [ "GetPosY", "nav_8h.html#a10961173ac6973d795af2f62eb67edca", null ],
    [ "HORIZONTAL_MODE_CIRCLE", "nav_8h.html#a5bfcd798f85be44cd7766b55ef9c9c08", null ],
    [ "HORIZONTAL_MODE_ROUTE", "nav_8h.html#a6084dc0a6bca1d7ca7c39dad6614bce0", null ],
    [ "HORIZONTAL_MODE_WAYPOINT", "nav_8h.html#a303d1b36f192af5f774d7a660ea83fff", null ],
    [ "NAV_GRAVITY", "nav_8h.html#aa1fb8d7e7ce58924d9a5bf0ee4f4123e", null ],
    [ "nav_IncreaseShift", "nav_8h.html#ade046c5227910bd6f3ea18f9b4d6c514", null ],
    [ "NAV_MODE_COURSE"

    [ "NAV_MODE_ROLL", "nav_8h.html#a97cbe769969373c820146ab3e92047f2", null ],
    [ "nav_SetNavRadius", "nav_8h.html#ae1dfe610bee226ce313ba07538805322", null ],
    [ "NavApproaching", "nav_8h.html#a2ef5712522a8553afbd595be12cdd98e", null ],
    [ "NavApproachingFrom", "nav_8h.html#a6abc4155795f1dda277c3246557348dc", null ],
    [ "NavAttitude", "nav_8h.html#a81c6df93605ad973117e427efc141af6", null ],
    [ "NavCircleCount", "nav_8h.html#aa9aacd23ad02eee9d32481775bf9dd31", null ],
    [ "NavCircleCountNoRewind", "nav_8h.html#a86794d1bb2e4a1386114d81522e14925", null ],
    [ "NavCircleQdr", "nav_8h.html#a0809ecd41f0b888de7f9754e75caf82d", null ],
    [ "NavCircleWaypoint", "nav_8h.html#a32b0c914606a5e49eb66833967deb640", null ],
    [ "NavCourseCloseTo", "nav_8h.html#a68ab3f04c3fcd85380c950db512fd97e", null ],
    [ "NavGotoWaypoint", "nav_8h.html#a4bf42a1b0d3b1c6c0faebcda4c531b8c", null ],
    [ "NavHeading", "nav_8h.html#ac90e1aa0615ba8f354b17674af4b12c8", null ],
    [ "NavKillThr

    [ "NavQdrCloseTo", "nav_8h.html#a9f9ad9045eda753a7ea58359bd6a0581", null ],
    [ "NavSegment", "nav_8h.html#ace040d4295064ba78ba5c0339fb5fc9d", null ],
    [ "NavVerticalAltitudeMode", "nav_8h.html#ad8b75deb4546e944bed16b5b19455ff5", null ],
    [ "NavVerticalAutoPitchMode", "nav_8h.html#ad617b2ea9bb32ff976e4b172cd375483", null ],
    [ "NavVerticalAutoThrottleMode", "nav_8h.html#af95d040500e23a05d6b095662fb18b59", null ],
    [ "NavVerticalClimbMode", "nav_8h.html#a2b27eca94ecb2d5b20d5af88bfdd4efe", null ],
    [ "NavVerticalThrottleMode", "nav_8h.html#a6f740d9f9313ba73fa7dcd9dd53c4440", null ],
    [ "NormCourse", "nav_8h.html#a397bca15d146964a80f93abd74763384", null ],
    [ "Oval", "nav_8h.html#a3e1c9983a7508c42235e2fead19db8b1", null ],
    [ "Square", "nav_8h.html#a5b322de63943d278a002687f820ac41c", null ],
    [ "oval_status", "nav_8h.html#a6b504fc3b9e256669f3d93dff3372bcf", [
      [ "OR12", "nav_8h.html#a6b504fc3b9e256669f3d93dff3372bcfa65e326a040572bfc5a61c079d8bfca25",

      [ "OC2", "nav_8h.html#a6b504fc3b9e256669f3d93dff3372bcfa06833c96276f88424e14772ee87ac437", null ],
      [ "OR21", "nav_8h.html#a6b504fc3b9e256669f3d93dff3372bcfae5d99807c6a564838a7fed8239ef311b", null ],
      [ "OC1", "nav_8h.html#a6b504fc3b9e256669f3d93dff3372bcfa5f636214b976745986c087710a2dde17", null ]
    ] ],
    [ "fly_to_xy", "nav_8h.html#ae9d11d2e378b23ecbee86419cbf341f0", null ],
    [ "nav_approaching_xy", "nav_8h.html#a771b907350b836982ba4e31fd4bcbf4b", null ],
    [ "nav_circle_XY", "nav_8h.html#ad1b9d2e8da4a32477ca8bedc0bca86fe", null ],
    [ "nav_eight", "nav_8h.html#a083964068940390afc5e6621f015c19f", null ],
    [ "nav_eight_init", "nav_8h.html#ae9a835aee8c0898c8c5c65190d0b30bc", null ],
    [ "nav_home", "nav_8h.html#a069e6b8f68b2e117cbbe03f29e30a2e3", null ],
    [ "nav_init", "nav_8h.html#a64a3814d1672e69989f80701a0ff5749", null ],
    [ "nav_oval", "nav_8h.html#a5a4a7ec5d3cf1734dca01d87b3d1eef5", null ],
    [ "nav_oval_init", "nav_8h.html#aa602ef7f7d2e485

    [ "nav_periodic_task", "nav_8h.html#ad40d34bcd8520f64bb073fae4a08878e", null ],
    [ "nav_route_xy", "nav_8h.html#ab4247c9f3dc0417690e1404add032cbe", null ],
    [ "nav_without_gps", "nav_8h.html#ab746572e63956a2ad40674328a85b029", null ],
    [ "carrot_x", "nav_8h.html#a2bece6794aadefe30136dcd27b721f53", null ],
    [ "carrot_y", "nav_8h.html#a433f78b82598ad1380701b8b4e376632", null ],
    [ "cur_pos_x", "nav_8h.html#aa5c303fedda9fe2c787095dcd2456363", null ],
    [ "cur_pos_y", "nav_8h.html#a9db617e643c0032d53f3df6852a2a590", null ],
    [ "desired_x", "nav_8h.html#a88f523b73a294f7cb312604f212c21ab", null ],
    [ "desired_y", "nav_8h.html#ab7d49633159601ed2eaa65f23d612805", null ],
    [ "flight_altitude", "nav_8h.html#a1612ea0e1474e49b800cb3f497096523", null ],
    [ "fp_pitch", "nav_8h.html#a737a463b508f62286a0e62c5ed5648b4", null ],
    [ "horizontal_mode", "nav_8h.html#ad2a5195a657a7961bfb54e3c2da48a21", null ],
    [ "last_x", "nav_8h.html#ab2e97613bcf8e5721e639812c7a3469

    [ "last_y", "nav_8h.html#a38c13a13ef3e5a3b6480f71bf244e668", null ],
    [ "nav_altitude", "nav_8h.html#a67342fe7d0a993249d4b4cd0e20821ce", null ],
    [ "nav_circle_radians", "nav_8h.html#ae53708a0be0d9df410749c81a8458d6f", null ],
    [ "nav_circle_radians_no_rewind", "nav_8h.html#aa12872e504eb6e366acf1b7d29708431", null ],
    [ "nav_circle_radius", "nav_8h.html#a3e545eca284b674d03e90c15f58e1ff4", null ],
    [ "nav_circle_trigo_qdr", "nav_8h.html#aa10361692f333adcd1ccfd84ff1d0974", null ],
    [ "nav_circle_x", "nav_8h.html#ac1af27920d41a6dbc343fc1d7f55e08c", null ],
    [ "nav_circle_y", "nav_8h.html#a7b01191b794559f9d485b67c2be62c39", null ],
    [ "nav_climb", "nav_8h.html#a45139c6cf4dbda18870cf748337fbea7", null ],
    [ "nav_course", "nav_8h.html#af90efaefda837fe910e6c1d55ea0e949", null ],
    [ "nav_glide_pitch_trim", "nav_8h.html#a0ac0aec8bffae1d911b4f2fa5e2be72b", null ],
    [ "nav_ground_speed_pgain", "nav_8h.html#a4088688165aca8cabadaf45fb0b44643", null ],
    [ "na

    [ "nav_in_circle", "nav_8h.html#a3d597a1b316fdba0db5701a03ad56c7b", null ],
    [ "nav_in_segment", "nav_8h.html#a70c77743e83862b67b86056fcc80a8ec", null ],
    [ "nav_mode", "nav_8h.html#a100095dcf201264924107b608a3ed5cd", null ],
    [ "nav_oval_count", "nav_8h.html#a3f8eab6736191ca3d1cb16738cbcf97f", null ],
    [ "nav_pitch", "nav_8h.html#ac1ac32b055c0a7879329346b1662f313", null ],
    [ "nav_radius", "nav_8h.html#a4e73a18879f679277a72ef00250e359e", null ],
    [ "nav_segment_x_1", "nav_8h.html#a8b5c072e3f61f9025578e3e6283ffcb1", null ],
    [ "nav_segment_x_2", "nav_8h.html#a123af850aca7872d4ae1f0fd561fc302", null ],
    [ "nav_segment_y_1", "nav_8h.html#aa04e457095198f649868d28f72969029", null ],
    [ "nav_segment_y_2", "nav_8h.html#a2992c5b1e4da4284068a225e451877a4", null ],
    [ "nav_shift", "nav_8h.html#aae62d3a760ee0f535ee7bf9131df6d9c", null ],
    [ "nav_survey_active", "nav_8h.html#a68393cb43ffff9bfff53cce34d108e38", null ],
    [ "nav_survey_east", "nav_8h.html#a17
require.config({
    paths : {
        fundMarketView : 'app/modules/fundMarket/view',
        fundMarketModel : 'app/modules/fundMarket/model',
        fundMarketTemplate : 'app/modules/fundMarket/template',
        fundMarketController : 'app/modules/fundMarket/controller',
        fundMarketCommon : 'app/modules/fundMarket/common'
    }
});
define([
"commonClass/commonTools",
"fundMarketCommon/accessible",
"commonView/componentEventBoot",
    
"fundMarketController/IndexController",
"fundMarketController/FundsController", 
"fundMarketController/FundPositionsController",
"fundMarketController/AttentionController",
"fundMarketController/MyFundPlanController",
"fundMarketController/EntrustRepealController",
'fundMarketController/QueryController',
'fundMarketController/TAAccountManagerController',
"fundMarketController/PurchaseController",
"fundMarketController/InvestController",
"fundMarketController/AccessErrorController"],
function(commonTools, accessible){
    var dependencies = arg
var urls = {
    contest: {
        list: "/api/contests",
        index: "/api/contests/:id",
        add: "/api/contests",
        edit: "/api/contests/:id",
        delete: "/api/contests/:id"
    },
    match: {
        list: "/api/matches",
        index: "/api/matches/:id",
        add: "/api/contests/:contest_id/matches/add",
        edit: "/api/matches/:id",
        delete: "/api/matches/:id"
    },
    score: {
        list: "/api/scores",
        index: "/api/scores/:id",
        add: "/api/user/:user_id/match/:match_id/scores/add",
        edit: "/api/user/:user_id/match/:match_id/scores/edit",
        delete: "/api/scores/:id",
        getSpecific: "/api/scores/user/:user_id/match/:match_id"
    },
    question: {
        list: "/api/questions",
        index: "/api/questions/:id",
        add: "/api/questions",
        addToContest: "/api/contests/:contest_id/questions/add",
        edit: "/api/questions/:id",
        delete: "/api/questions/:id"
    },
    user: {
       
$(document).ready(function() {
    var navMain = '#nav';
    var navActive = 'active';
    $('.nav-button').click(function() {
        $(this).toggleClass('open');
        if ($(navMain).hasClass(navActive)) {
            $(navMain).stop().animate({height:0},300);
            setTimeout(function(){
                $(navMain).removeClass(navActive).removeAttr('style');
            },300);
        } else {
            var navHeight = $(navActive).stop().height($(window).height() - 124 );
            $(navMain).height(0).animate({height:navHeight},250);
            setTimeout(function(){
                $(navMain).addClass(navActive).removeAttr('style');
            },250);
        }
    });
    $('.grid-intro').owlCarousel({
        items: 1,
        animateOut: 'slideOutDown',
        animateIn: 'flipInX',
        smartSpeed: 450,
        loop: true,
        center: true,
        nav: true,
        navText: ["<i class='fa fa-chevron-left'></i>","<i class='fa fa-chevron-right'></i>"]
   
var test_PrefsContentTab = function() {
  var controller = new controller.MozMillController(mozmill.utils.getWindowByType("Browser:Preferences"));
  controller.click(new elementslib.Elem( controller.tabs.Content.button ));
  controller.sleep(1000);
  e = new elementslib.ID(controller.window.document, 'popupPolicy')
  controller.waitForElement(e);
  controller.click(e);
  controller.sleep(1000);
  controller.click(new elementslib.ID(controller.window.document, 'loadImages'));
  controller.sleep(1000);
  controller.click(new elementslib.ID(controller.window.document, 'enableJavaScript'));
  controller.sleep(1000);
  controller.click(new elementslib.ID(controller.window.document, 'enableJava'));
  controller.sleep(1000);
var test_GoogleDotCom = function () {
  var controller = mozmill.getBrowserController();
  controller.window.focus();
  controller.sleep(2000);
  controller.type(new elementslib.Name(controller.window.content.document, 'q'), 'Mozilla');
  controller.assertValue(new elemen

  controller.sleep(2000);
  controller.click(new elementslib.Name(controller.window.content.document, 'btnG'));
  controller.sleep(2000);
var test_mozillaorg = function () {
  var controller = mozmill.getBrowserController();
  controller.window.focus();
  controller.sleep(5000);
  controller.type(new elementslib.Name(controller.window.content.document, 'q'), 'QA');
  controller.waitForElement(new elementslib.Name(controller.window.content.document, 'q'));
  controller.click(new elementslib.ID(controller.window.content.document, 'submit'));
  controller.sleep(3000);
  controller.click(new elementslib.Link(controller.window.content.document, 'Mozilla'));
  controller.sleep(2000);
  controller.waitForElement(new elementslib.Link(controller.window.content.document, 'Tools'));
  controller.click(new elementslib.Link(controller.window.content.document, 'Tools'));
  controller.waitForElement(new elementslib.ID(controller.window.content.document, 'searchInput'));
  controller.type(new element
goog.provide('jchemhub.controller.BondController');
goog.provide('jchemhub.controller.BondController.BondEvent');
goog.require('goog.events.EventTarget');
goog.require('goog.debug.Logger');
/**
 * @constructor
 * @extends {goog.events.EventTarget}
 */
jchemhub.controller.BondController = function(parentController) {
	goog.events.EventTarget.call(this);
	this.setParentEventTarget(parentController);
};
goog.inherits(jchemhub.controller.BondController, goog.events.EventTarget);
/**
 * Logging object.
 * 
 * @type {goog.debug.Logger}
 * @protected
 */
jchemhub.controller.BondController.prototype.logger = goog.debug.Logger
		.getLogger('jchemhub.controller.BondController');
jchemhub.controller.BondController.prototype.handleMouseOver = function(bond, e) {
	this.dispatchEvent(new jchemhub.controller.BondController.BondEvent(this,
			bond, jchemhub.controller.BondController.EventType.MOUSEOVER));
};
jchemhub.controller.BondController.prototype.handleMouseOut = function(bond, e) {
	this.dispat
define(['jquery',
    'underscore',
    'backbone',
    'globalSettings',
    'bootbox',
    'toastr'
], function($, _, Backbone, GlobalSettings, bootbox, toastr) {
    var ServiceManager = function(serviceName, serviceType) {
        this.service = '';
        this.serviceName = '';
        this.serviceType = '';
        this.serviceRequest = '';
        this.setupService = function(name, type) {
            this.serviceName = name;
            this.serviceType = type;
            this.service = new ROSLIB.Service({
                ros: ros,
                name: this.serviceName,
                serviceType: this.serviceType
            });
        };
        this.setupRequest = function(serviceJSON) {
            this.serviceRequest = new ROSLIB.ServiceRequest(serviceJSON);
        };
        this.callService = function(callback) {
            var running = false;
            if (!running) {
                running = true;
                serviceName = this.serviceName;
            
"use strict";
app.config(['crudRoutesProvider', function(crudRoutesProvider) {
        crudRoutesProvider.addAllRoutes({
            entity:"Empresa",
            expand:"direccion.municipio,direccion.municipio.provincia,centro.direccion.municipio,centro.direccion.municipio.provincia"
        });
    }]);
app.controller("EmpresaSearchController", ['$scope', 'genericControllerCrudList','controllerParams', function($scope, genericControllerCrudList,controllerParams) {
        genericControllerCrudList.extendScope($scope, controllerParams);      
        $scope.page.pageSize=20;
        
        
        $scope.search();
    }]);
app.controller("EmpresaNewEditController", ['$scope', 'genericControllerCrudDetail', 'controllerParams', function($scope, genericControllerCrudDetail, controllerParams) {
        genericControllerCrudDetail.extendScope($scope, controllerParams);
    }]);
app.controller("EmpresaViewController", ['$scope', 'genericControllerCrudDetail', 'controllerParams', function
(function() {
    var ns = jassa.geo;
    var sparql = jassa.sparql;
    var service = jassa.service;
    ns.GeoDataSourceUtils = {
        /**
         *
         * @param attrs Additional static attributes, such as style information
         */
        createGeoDataSourceLabels: function(sparqlService, geoMapFactory, concept, attrs) {
            if(attrs == null) {
                attrs = {};
            }
            var bboxListService = new service.ListServiceBbox(sparqlService, geoMapFactory, concept);
            var lookupServiceLabels = sponate.LookupServiceUtils.createLookupServiceNodeLabels(sparqlService);
            lookupServiceLabels = new service.LookupServiceTransform(lookupServiceLabels, function(doc, id) {
                var result = {
                    shortLabel: doc
                };
                return result;
            });
            var augmenterLabels = new service.AugmenterLookup(lookupServiceLabels);
            bboxListService = new service.ListS
var omnibrokerControllers = angular.module('omnibrokerControllers',
		[ 'ui.bootstrap' ]);
omnibrokerControllers.controller('ServiceListCtrl', [
		'$scope',
		'Service',
		'$modal',
		function($scope, Service, $modal) {
			function updateServiceList() {
				var services = Service.query(function() {
					if (services && services._embedded
							&& services._embedded.service)
					{
						$scope.services = services._embedded.service
					}
					else
						$scope.services = [];
				});
			};
			updateServiceList();
			$scope.editService = function(service, index) {
				serviceDialog(service, index);
			}
			$scope.addService = function() {
				serviceDialog({id: generateGUID(), plans:[], dashboard_client: {}, metadata: {}}, $scope.services.length);
			};
			
			function serviceDialog(service, index) {
				dlg = $modal.open({
					templateUrl : 'views/serviceEdit.html',
					controller : 'ServiceEditCtrl',
					resolve: {
						'service': function() { return angular.copy(service); },
				

					}
				});
				dlg.result.then(function(serviceReturn) {
					$scope.services[serviceReturn.index] = serviceReturn.service;
					Service.save(serviceReturn.service);
				});
			};
			
			$scope.removeService = function(index) {
				Service.delete({id: $scope.services[index].id});
				$scope.services.splice(index,1);
			};
		} ]);
omnibrokerControllers.controller('ServiceEditCtrl', [ '$scope', '$modalInstance', 'service', 'index', function($scope, $modalInstance, service, index) {
	$scope.service = service;
	$scope.index = index;
	$scope.ok = function() {
		$modalInstance.close({service: $scope.service, index: $scope.index});
	};
	$scope.cancel = function() {
		$modalInstance.dismiss('cancel');
	};
	$scope.addPlan = function() {
		service.plans.push({id: generateGUID(), name: "", description: "", metadata: null, free: false});
	};
	$scope.removePlan = function(index) {
		service.plans.splice(index,1);
	};
} ]);
function generateGUID()
	return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.
export const RECIEVE_MEMOLIST = Symbol()
export const DROP_MEMOLIST = Symbol()
export const START_FETCHING_MEMO = Symbol()
export const RECIEVE_MEMO = Symbol()
export const FAIL_TO_FETCH_MEMO = Symbol()
export const ADD_MEMO = Symbol()
export const SET_MEMO = Symbol()
export const DELETE_MEMO = Symbol()
export function dropMemos() {
  return {
    type: DROP_MEMOLIST
  }
export function fetchMemos() {
  return (dispatch)=> {
    dispatch(showLoader())
    return Http().get(`/memos`)
    .then(res => {
      dispatch(hideLoader())
      dispatch({
        type: RECIEVE_MEMOLIST,
        items: res.data,
      })
      return res.data
    }, error => {
      dispatch(hideLoader())
    })
  }
export function getMemos() {
  return (dispatch, getState)=> {
    let state = getState().memo
    if (state.items.length > 0) {
      return Promise.resolve(state)
    } else {
      return dispatch(fetchMemos())
    }
  }
export function fetchMemo(path) {
  return (dispatch)=> {
    dispatch(showLo

    const encodedPath = encodeURIComponent(path)
    return Http().get(`/memos/${encodedPath}`)
    .then(res => {
      const memo = res.data
      dispatch(hideLoader())
      dispatch({
        type: RECIEVE_MEMO,
        item: memo,
      })
      return memo
    }, error => {
      dispatch(failToFetchMemo(path))
      dispatch(hideLoader())
    })
  }
export function deleteMemo(id) {
  return (dispatch, getState)=> {
    dispatch(showLoader())
    return Http().delete(`/memos/${id}`)
    .then(() => {
      dispatch(dropMemos())
      dispatch(hideLoader())
      dispatch({
        type: DELETE_MEMO,
        id: id,
      })
    }, error => {
      dispatch(hideLoader())
    })
  }
function uploadMemo(id, memo) {
  return (dispatch, getState)=> {
    dispatch(showLoader())
    const updating = !!id
    return Http().request({
      method: updating ? 'PATCH' : 'POST',
      url:  updating ? `/memos/${id}` : `/memos`,
      data: memo,
    }).then(res => {
      const memo = res.
(function($){
	$.fn.responsiveNav = function(options) {
		var settings = $.extend({
			'breakPoint': 640,
			'navControlText': 'Menu'
		}, options);
		
		
		return this.each(function() {
		
			var docWidth = $(document).width(),
				wrapper = $(this),
				navUL = wrapper.find("ul").first();
			
			wrapper.addClass("nav-open");
		
			var navControl = $('<div class="navControl" id="navControl"/>').prependTo(wrapper);
			var navControlLink = $('<a/>', {"text": settings.navControlText}).prependTo(navControl);
		
			function init() {
				checkNav();
			}
			init();
			function toggleNav() {
				wrapper.toggleClass("open");
		
				navUL.slideToggle();
			}
		
			$('#navControl a').on('click', function() {
				toggleNav();
			});
		
			function checkNav() {
				if( docWidth > settings.breakPoint ) {
					navControl.hide();
		
					if( !wrapper.hasClass("nav-open") ) {
						navUL.css("display", "block");
						wrapper.addClass("nav-open");
					}
				}
				else {
					navControl.show();
		
		
/* Author:
*/
function msg_error(){
    $('#msg').toggleClass('error');
$(function(){
    $('#local_image').show();
    $('#web_image').hide();
    
    var radio = $("input[name='upload_method_2']");
    radio.change(function(){
        $('#local_image, #web_image').toggle();
    });
})
$(function(){
    $('#toggle_exif_on').click(function(){
        $('#toggle_exif_off').show()
        $('#toggle_exif_on').hide()
        $('#exif_exif, #exif_xmp, #exif_photoshop, #exif_iptc, #exif_jfif, #exif_file, #exif_composite, #exif_icc_profile, #exif_exif_tool, #exif_maker_notes').show()
        $('#show_exif_exif, #show_exif_xmp, #show_exif_photoshop, #show_exif_iptc, #show_exif_jfif, #show_exif_file, #show_exif_composite, #show_exif_icc_profile, #show_exif_exif_tool, #show_exif_maker_notes').hide()
    })
})
$(function(){
    $('#toggle_exif_off').click(function(){
        $('#toggle_exif_on').show()
        $('#toggle_exif_off').hide()
        $('#exif_exif, #exif_xmp, #exif_photoshop, #exif

        $('#show_exif_exif, #show_exif_xmp, #show_exif_photoshop, #show_exif_iptc, #show_exif_jfif, #show_exif_file, #show_exif_composite, #show_exif_icc_profile, #show_exif_exif_tool, #show_exif_maker_notes').show()
    })
})
function hide_footer(){
    $('#footer').toggle();
$(function(){
   $("#histo, #exif_exif, #exif_xmp, #exif_photoshop, #exif_iptc, #exif_exif_tool, #exif_jfif, #exif_file, #exif_maker_notes, #exif_composite, #exif_icc_profile, #toggle_exif_off").hide()
   $("#show_exif_exif, #show_exif_xmp, #show_exif_photoshop, #show_exif_iptc, #show_exif_exif_tool, #show_exif_jfif, #show_exif_file, #show_exif_maker_notes, #show_exif_composite, #show_exif_icc_profile, #toggle_exif_on").show()
});
$(function() {
    $('#show_exif_exif').click(function (){
        $('#exif_exif').show()
        $('#show_exif_exif').hide()
    })
})
$(function() {
    $('#exif_exif').click(function(){
        $('#exif_exif').hide()
        $('#show_exif_exif').show()
    })
})
$(function() {
    $

        $('#exif_xmp').show()
        $('#show_exif_xmp').hide()
    })
})
$(function() {
    $('#exif_xmp').click(function(){
        $('#exif_xmp').hide()
        $('#show_exif_xmp').show()
    })
})
$(function() {
    $('#show_exif_photoshop').click(function (){
        $('#exif_photoshop').show()
        $('#show_exif_photoshop').hide()
    })
})
$(function() {
    $('#exif_photoshop').click(function(){
        $('#exif_photoshop').hide()
        $('#show_exif_photoshop').show()
    })
})
$(function() {
    $('#show_exif_iptc').click(function (){
        $('#exif_iptc').show()
        $('#show_exif_iptc').hide()
    })
})
$(function() {
    $('#exif_iptc').click(function(){
        $('#exif_iptc').hide()
        $('#show_exif_iptc').show()
    })
})
$(function() {
    $('#show_exif_exif_tool').click(function (){
        $('#exif_exif_tool').show()
        $('#show_exif_exif_tool').hide()
    })
})
$(function() {
    $('#exif_exif_tool').click(function(){
        $('#exif_exif_tool

        $('#show_exif_exif_tool').show()
    })
})
$(function() {
    $('#show_exif_jfif').click(function (){
        $('#exif_jfif').show()
        $('#show_exif_jfif').hide()
    })
})
$(function() {
    $('#exif_jfif').click(function(){
        $('#exif_jfif').hide()
        $('#show_exif_jfif').show()
    })
})
$(function() {
    $('#show_exif_file').click(function (){
        $('#exif_file').show()
        $('#show_exif_file').hide()
    })
})
$(function() {
    $('#exif_file').click(function(){
        $('#exif_file').hide()
        $('#show_exif_file').show()
    })
})
$(function() {
    $('#show_exif_maker_notes').click(function (){
        $('#exif_maker_notes').show()
        $('#show_exif_maker_notes').hide()
    })
})
$(function() {
    $('#exif_maker_notes').click(function(){
        $('#exif_maker_notes').hide()
        $('#show_exif_maker_notes').show()
    })
})
$(function() {
    $('#show_exif_composite').click(function (){
        $('#exif_composite').show()
        

    })
})
$(function() {
    $('#exif_composite').click(function(){
        $('#exif_composite').hide()
        $('#show_exif_composite').show()
    })
})
$(function() {
    $('#show_exif_icc_profile').click(function (){
        $('#exif_icc_profile').show()
        $('#show_exif_icc_profile').hide()
    })
})
$(function() {
    $('#exif_icc_profile').click(function(){
        $('#exif_icc_profile').hide()
        $('#show_exif_icc_profile').show()
    })
})
 $(function() {
   $("#click_histo").click(function () {
      $('#histo').show()
      $('#top_exif').hide()
    });
 });
 $(function() {
   $("#histo").click(function () {
      $('#histo').hide()
      $('#top_exif').show()
    });
 });
function countDown() {
    if(!isNaN(sec)){
   sec--;
  if (sec == -1) {
   sec = 5;
   }
if(sec == 0){
    sec = 'smile';
    take_snapshot();
  time = sec;
if (document.getElementById) {document.getElementById('counter').innerHTML = time;}
SD=window.setTimeout("countDown();", 1000);
if (sec ==
(function () {
    function blobServiceModule($interval, $q) {
        var BlobService = require('./modules/blobService');
        var cache = {};
        return {
            load: load
        };
        function load(name, key){
            if(!cache[name]){
                cache[name] = new BlobService(name, key);
            }
            var blobService = cache[name];
            return {
                get: get,
                listContainer: listContainer,
                listBlobs: listBlobs,
                download: download
            };
            function get() {
                blobService.get();
            }
            function listContainer() {
                return blobService.listContainer();
            }
            function listBlobs(container) {
                return blobService.listBlobs(container);
            }
            function download(container, blob) {
                return blobService.download(container, blob);
            }
        }
    }
   
function getDisplayName(component) {
  return component.displayName || component.name || 'Component';
function createMapDispatchToPropsFunc(mapDispatchToProps) {
  if (!mapDispatchToProps) {
    return dispatch => ({ dispatch });
  }
  switch (typeof mapDispatchToProps) {
    case 'function':
      return mapDispatchToProps;
    case 'object':
      return dispatch => (
        Object.keys(mapDispatchToProps).reduce((props, key) => {
          const eventName = mapDispatchToProps[key];
          props[key] = (...args) => dispatch(eventName, ...args);
          return props;
        }, {}));
    default:
      throw new Error(`unexpected type of mapDispatchToProps: ${typeof mapDispatchToProps}`);
  }
export function connect(mapStateToProps, mapDispatchToProps) {
  const mapStateToPropsFunc = mapStateToProps || (() => ({}));
  const mapDispatchToPropsFunc = createMapDispatchToPropsFunc(mapDispatchToProps);
  return function connectHOC(WrappedComponent) {
    class Connect extends Compone
angular.module('cordova.services', [])
    .service("CaptureService", function () {
        return {};
    })
    .service("CompassService", function () {
        return {
            promiseCurrentHeading: function () {
            },
            compass: {
                watchHeading: function (callback) {
                    setTimeout(function () {
                        callback({});
                    }, 1000);
                    return "WATCHID";
                },
                clearWatch: function () {
                }
            }
        };
    })
    .service("ContactsService", function () {
        return {};
    })
    .service("EventsService", function () {
        return {};
    })
    .service("FileService", function ($q) {
        return {
            read: function () {
            },
            write: function () {
            }
        }
    })
    .service("GlobalizationService", function () {
        return {};
    })
    .service("InAppBrowserService", 
var files =
    [ "AttraitController.php", "_attrait_controller_8php.html", [
      [ "AttraitController", "class_my_app_1_1_admin_bundle_1_1_controller_1_1_attrait_controller.html", "class_my_app_1_1_admin_bundle_1_1_controller_1_1_attrait_controller" ]
    ] ],
    [ "DashboardController.php", "_dashboard_controller_8php.html", [
      [ "DashboardController", "class_my_app_1_1_admin_bundle_1_1_controller_1_1_dashboard_controller.html", "class_my_app_1_1_admin_bundle_1_1_controller_1_1_dashboard_controller" ]
    ] ],
    [ "GeneralController.php", "_general_controller_8php.html", [
      [ "GeneralController", "class_my_app_1_1_admin_bundle_1_1_controller_1_1_general_controller.html", "class_my_app_1_1_admin_bundle_1_1_controller_1_1_general_controller" ]
    ] ],
    [ "HebergementController.php", "_hebergement_controller_8php.html", [
      [ "HebergementController", "class_my_app_1_1_admin_bundle_1_1_controller_1_1_hebergement_controller.html", "class_my_app_1_1_admin_bundle_1_1_

    ] ],
    [ "InformationController.php", "_information_controller_8php.html", [
      [ "InformationController", "class_my_app_1_1_admin_bundle_1_1_controller_1_1_information_controller.html", "class_my_app_1_1_admin_bundle_1_1_controller_1_1_information_controller" ]
    ] ],
    [ "QuebecSaisonController.php", "_quebec_saison_controller_8php.html", [
      [ "QuebecSaisonController", "class_my_app_1_1_admin_bundle_1_1_controller_1_1_quebec_saison_controller.html", "class_my_app_1_1_admin_bundle_1_1_controller_1_1_quebec_saison_controller" ]
    ] ],
    [ "SecurityController.php", "_security_controller_8php.html", [
      [ "SecurityController", "class_my_app_1_1_admin_bundle_1_1_controller_1_1_security_controller.html", "class_my_app_1_1_admin_bundle_1_1_controller_1_1_security_controller" ]
    ] ],
    [ "StatistiqueController.php", "_statistique_controller_8php.html", [
      [ "StatistiqueController", "class_my_app_1_1_admin_bundle_1_1_controller_1_1_statistique_controller.h
var _message_8hpp =
    [ "__attribute__", "_message_8hpp.html#gacabc44d6011d9326224811e47a96a6ef", null ],
    [ "__attribute__", "_message_8hpp.html#gacabc44d6011d9326224811e47a96a6ef", null ],
    [ "delete_payload_after_send", "_message_8hpp.html#a66dc28ce060b19a5b78d4c9f83648963", null ],
    [ "deliver_locally", "_message_8hpp.html#a19ea0ae270847952b03b6e8595e0c8eb", null ],
    [ "Message", "_message_8hpp.html#a840759a6e44179d1a96111e693a9ec08", null ],
    [ "Message", "_message_8hpp.html#a72be15397e598158d6767cbe73c9c879", null ],
    [ "Message", "_message_8hpp.html#a82be9d62c18c254e81250f10cca3002c", null ],
    [ "Message", "_message_8hpp.html#aa4d570772adb65f3ba6a3be6d592624f", null ],
    [ "message", "_message_8hpp.html#ga1b0faf3e8ee3ef69117c14c5d4547396", null ],
    [ "message", "_message_8hpp.html#gab3bb6fb2dcd4b3e39012d2bdbb475267", null ],
    [ "operator*", "_message_8hpp.html#a3f534efce0b043d603eb8f5653268e7d", null ],
    [ "operator->", "_message_8hpp.html#a4442

    [ "operator=", "_message_8hpp.html#a5d036a3af0321dffdf88e0555bfc8393", null ],
    [ "operator=", "_message_8hpp.html#a423f1fd313d91b8130b43af99f86c65a", null ],
    [ "operator=", "_message_8hpp.html#a68dc6ca847ae463ebabf85fc6faac2df", null ],
    [ "operator=", "_message_8hpp.html#a291772e815eef4792cb3158f9e43be9c", null ],
    [ "PayloadMessage", "_message_8hpp.html#a3e5e57c2004bfbe68de1d09c24793921", null ],
    [ "PayloadMessage", "_message_8hpp.html#ad06d951331f6e988a3669a9ebf4998b4", null ],
    [ "PayloadMessage", "_message_8hpp.html#ae80f1eeb7dc951aac75083edfc2af84f", null ],
    [ "PayloadMessage", "_message_8hpp.html#aadb572065907eb08cfd697a569107f15", null ],
    [ "reset", "_message_8hpp.html#a2418727fc0fba4f52bc81883d6e3a5f4", null ],
    [ "send_message", "_message_8hpp.html#ga528d3be2db6c7577613bba8b60bf01d3", null ],
    [ "send_message", "_message_8hpp.html#ga6e65f7faed0d5d92611442f9b46cb3e8", null ],
    [ "serialize_to", "_message_8hpp.html#a109dbc49c2ad9fcc066
angular.module('dockerSpawnerApp').controller('ServiceCtrl', function($scope, $state, service, $modal, ServiceDestination, $http, Spawns) {
    $scope.service = service;
    $scope.service.variables = $scope.service.variables || [];
    $scope.updateDestinations = function() {
        if ($scope.service._id) {
            $scope.loadingDestinations = true;
            $scope.serviceDestinations = ServiceDestination.query({serviceId: $scope.service._id});
            $scope.serviceDestinations.$promise.then(function() {
                $scope.loadingDestinations = false;
                Spawns.updateLastSpawnForServiceDestinations($scope.serviceDestinations);
            });
        }
    };
    $scope.updateDestinations();
    $scope.save = function() {
        $scope.service.$save().then(function(service) {
            $state.go("services");
        });
    };
    $scope.delete = function() {
        if ($scope.service._id) {
            if (window.confirm('Sure?')) {
                

                    $state.go("services");
                });
            }
        } else {
            $state.go("services");
        }
    };
    $scope.addDestination = function() {
        openServiceDestinationPopup(new ServiceDestination({
            serviceId: $scope.service._id
        }));
    };
    $scope.editDestination = function(serviceDestination) {
        openServiceDestinationPopup(serviceDestination);
    };
    $scope.spawn = function(serviceDestination) {
        serviceDestination.isSpawning = true;
        $scope.service.$save().then(function() {
            $http.post('/api/service-destinations/' + serviceDestination._id + '/spawn')
                .catch(function(response) {
                    window.alert(response.data.error);
                });
        });
    };
    $scope.isServiceDestinationSpawning = function(serviceDestination) {
        return serviceDestination.lastSpawn && serviceDestination.lastSpawn._id && !serviceDestination.lastSpawn.endTime
export const login = ({ dispatch }, email, password) => {
	usersApi.getByEmail(email)
		.then(result => result.body)
		.then(user => {
			if (user.Password === password) {
				dispatch(A.LOGIN_SUCCESS, user);
				dispatch(A.ALERT, 'info', 'Logged in');
			}
			else {
				dispatch(A.ALERT, 'danger', 'Login failure');
			}
		})
		.catch(error => {
			console.error(error);
			dispatch(A.ALERT, 'danger', 'Login failure');
			dispatch(A.LOGIN_FAILURE);
		})
};
export const logout = ({ dispatch }) => {
	dispatch(A.LOGOUT);
	dispatch(A.ALERT, 'info', 'Logged out');
};
export const alert = ({ dispatch }, type, message) => {
	dispatch(A.ALERT, type, message);
};
export const alertDismiss = ({ dispatch }, index) => {
	dispatch(A.ALERT_DISMISS, index);
};
export const userUpdate = ({ dispatch }, user) => {
	dispatch(A.USER_UPDATE, user);
};
export const achievementListUpdate = ({ dispatch }, achievements) => {
	dispatch(A.ACHIEVEMENT_LIST_UPDATE, achievements);
};
export const achievementAward = 
export function loadingUserData() {
    return {
        type: 'LOADING_USER_DATA',
    }
export function loggedOut() {
    return {
        type: 'LOGGED_OUT',
    }
export function userDataLoaded(user) {
    return {
        type: 'USER_DATA_LOADED',
        payload: user
    }
export function loggedIn(user) {
    return {
        type: 'LOGGED_IN',
        payload: user
    }
export function userDataLoadingFailed() {
    return {
        type: 'USER_DATA_LOADING_FAILED'
    }
export function loadUserData() {
    return function(dispatch) {
        dispatch(loadingUserData())
        dispatch({
            type: 'API_GET',
            uri: '/api/users/me',
            onSuccess: (dispatch, result) => {
                dispatch(userDataLoaded(result))
            },
            onError: (dispatch, error) => {
                dispatch(userDataLoadingFailed())
            }
        })
    }
export function logout() {
    return function(dispatch) {
        dispatch({
            type: '
var GlobalNav;
GlobalNav = (function() {
  var $button, $content, $nav, $overlay, showFlg, toggleNav;
  $nav = $('#globalNav');
  $overlay = $('#globalOverlay');
  $content = $('#globalContent');
  $button = $('#showGlobalNav');
  showFlg = false;
  toggleNav = function() {
    if (showFlg) {
      showFlg = false;
      $content.stop().animate({
        left: -225
      }, 200, function() {
        $nav.stop().hide();
      });
    } else {
      showFlg = true;
      $nav.stop().show();
      $content.stop().animate({
        left: 0
      }, 200, function() {});
    }
  };
  function GlobalNav() {
    $button.on('click', function(e) {
      e.preventDefault();
      toggleNav();
      return false;
    });
    $overlay.on('click', function() {
      toggleNav();
    });
    $(window).on('touchmove scroll', function(e) {
      if (showFlg) {
        e.preventDefault;
        return false;
      }
    });
    return;
  }
  return GlobalNav;
})();
$(function(jQuery) {
  var globalNav;

define(
	['knockout', 
	'knockout-postbox' , 
	'jquery' ,
	'underscore', 
	'./src/serviceTypeModule'],
	function(ko, postbox, $, _, serviceTypeModule) {
		return function serviceTypeController(){
			var self;
			self = this;
			serviceTypeModule.initConnection("", "/DisasterMgmnt");
			self.approvedServiceType = ko.observableArray([]);
			self.pendingServiceType = ko.observableArray([]);
			self.serviceType = ko.observable(new serviceTypeModule.ServiceType({}));
			serviceTypeModule.getServiceTypes(function(services){
					self.approvedServiceType.removeAll();
					self.pendingServiceType.removeAll();
				_.each(services, function(service) {
					if(service.approved === true){
						self.approvedServiceType.push(service);
					}else {
						self.pendingServiceType.push(service);
					}
				})
				if(self.pendingServiceType.length == 0){
					$(".pending-services").alert('close')
				}
			});
		
			self.approveService = function(data){
				console.log("clicked approved");
				data.appro

				serviceTypeModule.updateServiceType(data, function(data){
				self.pendingServiceType( 
					_.reject(self.pendingServiceType(), function(serviceType) {return serviceType.id == data.id; }) 
					)
				self.approvedServiceType.push(data);
				},function(err){
					console.log(err)
				})
			}
			self.denyService = function(data){
				console.log("clicked deny")
				console.log(data);
			}
			self.editServiceType = function(data){
				$('.editServiceType').toggleClass('hidden');
				$('.manageServices').toggleClass('hidden');
				self.serviceType(data);
			}
			self.submitEdit = function(){
				var data = self.serviceType();
				serviceTypeModule.updateServiceType(data, function(data){
					console.log(data);
					if(!data.approved){
						self.approvedServiceType( 
						_.reject(self.approvedServiceType(), function(serviceType) {return serviceType.id == data.id; }) 
						)
						self.pendingServiceType.push(data);
					}
					$('.editServiceType').toggleClass('hidden');
					$('.
function itemsList(data) {
    return {
        type: constants.LIST_ITEMS,
        payload: data
    };
export function itemsListAsync() {
    let options = {
        method: 'get',
        headers: {
            'Content-Type': 'application/json',
        }
    };
    return (dispatch) => {
        dispatch(showLoading());
        return fetchWrapper(API + '/items/', options)
            .then(success => {
                dispatch(itemsList(success));
                dispatch(hideLoading());
            })
            .catch(errorActionHandler(dispatch))
    };
export function createItemAsync(data) {
    let options = {
        method: 'post',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify( data )
    };
    return (dispatch) => {
        dispatch(showLoading());
        return fetchWrapper(API + '/items/', options)
            .then(success => {
                dispatch(hideLoading());
                return success;
      

            .catch(errorActionHandler(dispatch))
    };
export function getItemAsync(id) {
    let options = {
        method: 'get',
        headers: {
            'Content-Type': 'application/json',
        },
    };
    return (dispatch) => {
        dispatch(showLoading());
        return fetchWrapper(API + '/items/' + id + '/', options)
            .then(success => {
                dispatch(hideLoading());
                return success;
            })
            .catch(errorActionHandler(dispatch))
    };
export function updateItemAsync(data) {
    let options = {
        method: 'put',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify( data )
    };
    return (dispatch) => {
        dispatch(showLoading());
        return fetchWrapper(API + '/items/' + data.id + '/', options)
            .then(success => {
                dispatch(hideLoading());
                return success;
            })
            .catch(errorAc
SureSubstationInto=function(row){
    var dispatchOrderItemIdsplit = "";
    var realIntoQuantitysplit = "";
    var dispatchOrderId = 0
    for(var i=0;i<row.length;i++){
           if(row.length==1){
               dispatchOrderItemIdsplit=row[i].data.id;
               realIntoQuantitysplit=row[i].data.realIntoQuantity;
               dispatchOrderId = row[i].data.dispatchOrderId;
           }else{
               
               if(i<(row.length-1)){
                   dispatchOrderItemIdsplit=row[i].data.id+","+dispatchOrderItemIdsplit;
                   dispatchOrderId = row[i].data.dispatchOrderId;
                   realIntoQuantitysplit=row[i].data.realIntoQuantity+","+realIntoQuantitysplit;
               }
               if(i==(row.length-1)){
                   dispatchOrderId = row[i].data.dispatchOrderId;
                   dispatchOrderItemIdsplit=dispatchOrderItemIdsplit+row[i].data.id;
                   realIntoQuantitysplit=realIntoQuantitysplit+row[i].data.realIntoQ
/* ѣ */
(function() {
	'use strict';
	var messageServiceFactory = function($timeout) {
		var MessageService = {
			promise: null,
			message: {
				type: '',
				text: ""
			},
			setMessage: function(message) {
				MessageService.message.text = message;
				MessageService.promise = $timeout(function() {
					MessageService.message.type = '';
					MessageService.message.text = "";
				}, 2000);
			},
			setError: function(message) {
				MessageService.message.type = 'error';
				MessageService.setMessage(message);
			},
			setInfo: function(message) {
				MessageService.message.type = 'info';
				MessageService.setMessage(message);
			},
			setDone: function(message) {
				MessageService.message.type = 'done';
				MessageService.setMessage(message);
			},
			clear: function() {
				MessageService.message.type = '';
				MessageService.message.text = "";
				$timeout.cancel(MessageService.promise);
			}
		};
		return MessageService;
	};
	angular.module('racepoint')
	.factory('messageServ
(function() {
  $(document).ready(function() {
    var body, click_event, content, nav, nav_closed_width, nav_open, nav_toggler;
    nav_toggler = $("header .toggle-nav");
    nav = $("#main-nav");
    content = $("#content");
    body = $("body");
    nav_closed_width = 50;
    nav_open = body.hasClass("main-nav-opened") || nav.width() > nav_closed_width;
    click_event = (jQuery.support.touch ? "tap" : "click");
    $("#main-nav .dropdown-collapse").on(click_event, function(e) {
      var link, list;
      e.preventDefault();
      link = $(this);
      list = link.parent().find("> ul");
      if (list.is(":visible")) {
        if (body.hasClass("main-nav-closed") && link.parents("li").length === 1) {
          false;
        } else {
          link.removeClass("in");
          list.slideUp(300, function() {
            return $(this).removeClass("in");
          });
        }
      } else {
        if (list.parents("ul.nav.nav-stacked").length === 1) {
          $(document).trigger
_menuCloseDelay=0
_subOffsetTop=3
_subOffsetLeft=-15
_subOffsetTop=0
_subOffsetLeft=0
_menuCloseDelay=300
_menuOpenDelay=0
_followSpeed=0
_followRate=0
_scrollAmount=3
_scrollDelay=20
with(navStyle1=new mm_style()){
offclass="nav";
onclass="nav_hover";
pageclass="nav_hover nav_selected";
with(subNavStyle1=new mm_style()){
offclass="nav subnav";
onclass="nav_hover subnav_hover";
pageclass="nav_hover subnav_hover nav_selected subnav_selected";
with(navStyle2=new mm_style()){
offclass="nav";
onclass="nav_hover";
pageclass="nav_hover nav_selected";
with(subNavStyle2=new mm_style()){
offclass="nav subnav";
onclass="nav_hover subnav_hover";
pageclass="nav_hover subnav_hover nav_selected subnav_selected";
with(navStyle3=new mm_style()){
offclass="nav";
onclass="nav_hover";
pageclass="nav_hover nav_selected";
with(subNavStyle3=new mm_style()){
offclass="nav subnav";
onclass="nav_hover subnav_hover";
pageclass="nav_hover subnav_hover nav_selected subnav_selected";
with(navStyle4=new mm_style())

offclass="nav";
onclass="nav_hover";
pageclass="nav_hover nav_selected";
with(subNavStyle4=new mm_style()){
offclass="nav subnav";
onclass="nav_hover subnav_hover";
pageclass="nav_hover subnav_hover nav_selected subnav_selected";
with(navStyle5=new mm_style()){
offclass="nav";
onclass="nav_hover";
pageclass="nav_hover nav_selected";
with(subNavStyle5=new mm_style()){
offclass="nav subnav";
onclass="nav_hover subnav_hover";
pageclass="nav_hover subnav_hover nav_selected subnav_selected";
with(navStyle6=new mm_style()){
offclass="nav";
onclass="nav_hover";
pageclass="nav_hover nav_selected";
with(subNavStyle6=new mm_style()){
offclass="nav subnav";
onclass="nav_hover subnav_hover";
pageclass="nav_hover subnav_hover nav_selected subnav_selected";
with(navStyle7=new mm_style()){
offclass="nav";
onclass="nav_hover";
pageclass="nav_hover nav_selected";
with(subNavStyle7=new mm_style()){
offclass="nav subnav";
onclass="nav_hover subnav_hover";
pageclass="nav_hover subnav_hover nav_selected s
export function fetchPokemons() {
	return function(dispatch) {
		dispatch({type:"FETCH_POKEMONS"});
			
			if(response){	
				dispatch({type:"FETCH_POKEMONS_FULFILLED",payload:response.data});
			}
		}).catch((err) => {
			dispatch({type:"FETCH_POKEMONS_ERROR",payload:err})
		})	
	}
export function lookForPokemons(text) {
	return function(dispatch) {
			dispatch({type:"LOOKFOR_POKEMONS"});
			
			if(response){	
				dispatch({type:"LOOKFOR_POKEMONS_FULFILLED",payload:response.data});
			}
		}).catch((err) => {
			dispatch({type:"LOOKFOR_POKEMONS_ERROR",payload:err})
		})	
	}
	}
export function lookForPokemonsById(id) {
	return function(dispatch) {
			dispatch({type:"LOOKFOR_POKEMONS"});
			console.log("response: "+JSON.stringify(response.data))
			if(response){	
				dispatch({type:"LOOKFOR_POKEMONS_FULFILLED",payload:response.data});
			}
		}).catch((err) => {
			dispatch({type:"LOOKFOR_POKEMONS_ERROR",payload:err})
		})	
	}
	}
export function PokemonStats(pokeid,types){
	return functio
_menuCloseDelay=0
_subOffsetTop=3
_subOffsetLeft=-15
_subOffsetTop=0
_subOffsetLeft=0
_menuCloseDelay=300
_menuOpenDelay=0
_followSpeed=0
_followRate=0
_scrollAmount=3
_scrollDelay=20
with(navStyle1=new mm_style()){
offclass="nav";
onclass="nav_hover";
pageclass="nav_hover nav_selected";
with(subNavStyle1=new mm_style()){
offclass="nav subnav";
onclass="nav_hover subnav_hover";
pageclass="nav_hover subnav_hover nav_selected subnav_selected";
with(navStyle2=new mm_style()){
offclass="nav";
onclass="nav_hover";
pageclass="nav_hover nav_selected";
with(subNavStyle2=new mm_style()){
offclass="nav subnav";
onclass="nav_hover subnav_hover";
pageclass="nav_hover subnav_hover nav_selected subnav_selected";
with(navStyle3=new mm_style()){
offclass="nav";
onclass="nav_hover";
pageclass="nav_hover nav_selected";
with(subNavStyle3=new mm_style()){
offclass="nav subnav";
onclass="nav_hover subnav_hover";
pageclass="nav_hover subnav_hover nav_selected subnav_selected";
with(navStyle4=new mm_style())

offclass="nav";
onclass="nav_hover";
pageclass="nav_hover nav_selected";
with(subNavStyle4=new mm_style()){
offclass="nav subnav";
onclass="nav_hover subnav_hover";
pageclass="nav_hover subnav_hover nav_selected subnav_selected";
with(navStyle5=new mm_style()){
offclass="nav";
onclass="nav_hover";
pageclass="nav_hover nav_selected";
with(subNavStyle5=new mm_style()){
offclass="nav subnav";
onclass="nav_hover subnav_hover";
pageclass="nav_hover subnav_hover nav_selected subnav_selected";
with(navStyle6=new mm_style()){
offclass="nav";
onclass="nav_hover";
pageclass="nav_hover nav_selected";
with(subNavStyle6=new mm_style()){
offclass="nav subnav";
onclass="nav_hover subnav_hover";
pageclass="nav_hover subnav_hover nav_selected subnav_selected";
with(navStyle7=new mm_style()){
offclass="nav";
onclass="nav_hover";
pageclass="nav_hover nav_selected";
with(subNavStyle7=new mm_style()){
offclass="nav subnav";
onclass="nav_hover subnav_hover";
pageclass="nav_hover subnav_hover nav_selected s
/**
 * Created by yedaodao on 2015/5/23.
 */
define(
    [
        'lib',
        'instance/controllers/admin/instance.controller',
        'instance/controllers/admin/instance.detail.controller',
        'instance/directive/modal/controller/create.instance.controller',
        'instance/controllers/admin/alarm.controller',
        'instance/services/server.service',
        'instance/services/oam.service',
        'instance/services/instance.status.service',
        'instance/repository/server.repository',
        'instance/directive/select.time.directive',
        'instance/directive/modal/controller/delete.modal.controller',
        'instance/directive/modal/controller/migrate.modal.controller',
        'instance/directive/modal/controller/reboot.modal.controller',
        'instance/directive/modal/controller/stop.modal.controller',
        'instance/directive/modal/controller/resize.instance.controller',
        'instance/directive/modal/controller/create.snapshot.controller',
    

        'instance/directive/modal/controller/change.password.controller'
    ],
    function (Lib, instanceController, instanceDetailController, createInstanceController, alarmController, serverService, OAMService, InstanceStatusService, serverRepository, chartDirective, deleteModalController, migrateModalController, rebootModalController, stopModalController, resizeInstanceController, createInstanceSnapShotController, createCaptureController, changePasswordController) {
        var ApplicationConfiguration = Lib.ApplicationConfiguration;
        return {
            start: function () {
                ApplicationConfiguration.registerModule('instance');
                instanceController();
                instanceDetailController();
                createInstanceController();
                alarmController();
                serverService();
                OAMService();
                InstanceStatusService();
                serverRepository();
                chartDirective();

/**********************************************************************
 *
 * nav/obj.js
 *
 * author: Patrick Dooley
 *
 *
 **********************************************************************
 *
 * Copyright (c) 2013 iTKunst Corporation
 *
 **********************************************************************/
define
	[	
		"../../attrs/simple/obj",
		"../../view/simple/obj",
		"../../../base/elmt/obj",
		"kWStat/validate"
	], 
	function
	(
		attrs,
		view,
		elmt,
		validate
	)
	{
			
		function nav()
		{
			this.m_sKWTag	= "nav";
		}
		nav.prototype = new elmt();
		nav.prototype.constructor = nav;
		nav.constructor = elmt.prototype.constructor;
		nav.prototype.check = 
			function check()
		{
			elmt.prototype.check.call(this);
		};
		nav.prototype.init =
			function init()
		{
			elmt.prototype.init.call(this);
		};
		nav.prototype.elmtCreateAttrsOR = 
			function()
		{
			return this.navCreateAttrs(); 
		};
		
		nav.prototype.elmtCreateViewOR = 
			function()
		{
			return this
(function(angular) {
  'use strict';
  angular.module('sauWebApp').factory('regionToggles', function() {
    var defaultToggles = {
      showMiniMap: true,
      showMaricultureMiniMap: false,
      showFAOAndLegend: true,
      showFAOs: false,
      showGlobalSubRegion: false,
      showLegend: true,
      showDisclaimer: true,
      showMaricultureLegend: false,
      showFAOEEZLinks: true,
      showMultiRegionList: false,
      showMetrics: true
    };
    var toggles = {
      eez: angular.extend({}, defaultToggles, {
        showFAOs: true
      }),
      lme: angular.extend({}, defaultToggles, {
        showDisclaimer: false,
        showFAOEEZLinks: false
      }),
      highseas: angular.extend({}, defaultToggles, {
        showFAOEEZLinks: false
      }),
      rfmo: angular.extend({}, defaultToggles, {
        showFAOAndLegend: false
      }),
      global: angular.extend({}, defaultToggles, {
        showMiniMap: false,
        showGlobalSubRegion: true
      }),
      ma
/**
 * Created by vincentfxz on 15/7/1.
 */
$(function(){
    var node = $('.mxservicetree').tree('getSelected');
    $('#serviceName').val(node.service.serviceName);
    $('#discription').val(node.service.desc);
    $('#serviceCategory').val(node.service.categoryId);
    $('#serviceId').val(node.service.serviceId);
    $('#state').val(node.service.state);
    $('#version').val(node.service.version);
    $('#remark').val(node.service.remark);
    /**
     * 编辑对话框保存按钮事件
     */
    var saveByEdit = function saveByEdit(){
        var service = {};
        service.serviceName = $('#serviceName').val();
        service.desc = $('#discription').val();
        service.remark = $('#remark').val();
        var node = $('.mxservicetree').tree('getSelected');
        service.serviceId = node.id;
        service.categoryId = $('#serviceCategory').val();
        service.version = $('#version').val();
        service.state = $('#state').val();
        serviceManager.update(service,function(result){
var Level1 = {
    enemies:[
        {
            ShowType:"Repeate",
            ShowTime:"00:02",
            Types:[0,1,2]
        },
        {
            ShowType:"Repeate",
            ShowTime:"00:05",
            Types:[3,4,5]
        }
        /*{
            ShowType:"Repeate",
            ShowTime:"00:08",
            Types:[0,4,3,5]
        },
        {
            ShowType:"Once",
            ShowTime:"00:6",
            Types:[0,2,4,3]
        },
        {
            ShowType:"Once",
            ShowTime:"00:16",
            Types:[0,2,5,4,3]
        },
        {
            ShowType:"Once",
            ShowTime:"00:25",
            Types:[0,3,5,4,3]
        },
        {
            ShowType:"Once",
            ShowTime:"00:35",
            Types:[4,5,3,1,3]
        },
        {
            ShowType:"Once",
            ShowTime:"00:50",
            Types:[0,3,2,1,0,3]
        },
        {
            ShowType:"Once",
            ShowTime:"01:15",
            Types:[4,5,
﻿$(function () {
    var $navTop = $('#topNav'), $navMain = $navTop.find('#navMain'), $navSub = $navMain.find('#navSub'), $navIndex = $navMain.find('#navIndex'), de = 200;
    $navIndex.mouseenter(function () {
        $navSub.show().stop().animate({
            'height': '187px'
        }, de);
        $navTop.stop().animate({
            'height': '242px'
        }, de);
    });
    $navMain.mouseleave(function () {
        $navSub.stop().animate({
            'height': '3px'
        }, de, function () {
            $navSub.hide();
        });
        $navTop.stop().animate({
            'height': '75px'
        }, de);
    });
    $navIndex.find('li:not(:eq(0))').mouseenter(function () {
        var $this = $(this), i = $this.index() - 1;
        $(this).addClass('nav3').siblings().removeClass('nav3');
        $navSub.find('dt:eq(' + i + ')').show();
    }).mouseleave(function () {
        var $this = $(this), i = $this.index() - 1;
        $this.removeClass('nav3');
        $navSub
var assert = require('assert');
var _ = require('underscore');
var testutil = require('../framework/util');
var azure = testutil.libRequire('azure-storage');
var blobService;
var queueService;
var tableService;
describe('ServiceProperties', function () {
  before(function (done) {
    blobService = azure.createBlobService()
      .withFilter(new azure.ExponentialRetryPolicyFilter());
    queueService = azure.createQueueService()
      .withFilter(new azure.ExponentialRetryPolicyFilter());
    tableService = azure.createTableService()
      .withFilter(new azure.ExponentialRetryPolicyFilter());
    done();
  });
  describe('fullServiceProperties', function () {   
    it('should get/set complete blob service properties', function (done) {
      var serviceProperties = defaultServiceProperties(true);
      fullServicePropertiesTest(blobService, serviceProperties, done);
    });
    it('should get/set complete queue service properties', function (done) {
      var serviceProperties = defa

      fullServicePropertiesTest(queueService, serviceProperties, done);
    });
    it('should get/set complete table service properties', function (done) {
      var serviceProperties = defaultServiceProperties(false);     
      fullServicePropertiesTest(tableService, serviceProperties, done);
    });
  });
  describe('defaultServiceProperties', function () {   
    it('should write default blob service properties', function (done) {
      var serviceProperties = emptyServiceProperties();
      baseServicePropertiesTest(blobService, serviceProperties, done);
    });
    it('should write default queue service properties', function (done) {
      var serviceProperties = emptyServiceProperties();      
      baseServicePropertiesTest(queueService, serviceProperties, done);
    });
    it('should write default table service properties', function (done) {
      var serviceProperties = emptyServiceProperties();     
      baseServicePropertiesTest(tableService, serviceProperties, done);
 

  });
  describe('overwriteServiceProperties', function () { 
    it('should overwrite with empty blob service properties', function (done) {
      var serviceProperties = mostlyNullServiceProperties();
      overwriteServicePropertiesTest(blobService, serviceProperties, done);
    });
    it('should overwrite with empty queue service properties', function (done) {
      var serviceProperties = mostlyNullServiceProperties();      
      overwriteServicePropertiesTest(queueService, serviceProperties, done);
    });
    it('should overwrite with empty table service properties', function (done) {
      var serviceProperties = mostlyNullServiceProperties();     
      overwriteServicePropertiesTest(tableService, serviceProperties, done);
    });
  });
});
function fullServicePropertiesTest(service, serviceProperties, done){
  service.setServiceProperties(serviceProperties, function (error) {
    assert.equal(error, null);
    var inner = function(){    
      service.getServiceProperties(

        assert.equal(error2, null);
        assertServicePropertiesEqual(serviceProperties2, serviceProperties);
        done();
      });
    };
    setTimeout(inner, 30000);
  });
function overwriteServicePropertiesTest(service, serviceProperties, done){
  service.getServiceProperties(function(error1, serviceProperties1){
    assert.equal(error1, null);
    service.setServiceProperties(serviceProperties, function (error2) {
      assert.equal(error2, null);
      var inner = function(){
        service.getServiceProperties(function (error3, serviceProperties2) {
          assert.equal(error3, null);
          serviceProperties1.Cors = {};
          assertServicePropertiesEqual(serviceProperties2, serviceProperties1);
          done();
        });
      };
      setTimeout(inner, 30000);
    });
  });
function baseServicePropertiesTest(service, serviceProperties, done){
  var expectedServiceProperties = baseServiceProperties();
  service.setServiceProperties(serviceProperties, functi

    assert.equal(error, null);
    var inner = function(){
      service.getServiceProperties(function (error2, serviceProperties2) {
        assert.equal(error2, null);
        assertServicePropertiesEqual(serviceProperties2, expectedServiceProperties);
        done();
      });
    };
    setTimeout(inner, 30000);
  });
function assertServicePropertiesEqual(serviceProperties1, serviceProperties2){
  assert.deepEqual(serviceProperties2.Logging, serviceProperties1.Logging);
  assert.deepEqual(serviceProperties2.HourMetrics, serviceProperties1.HourMetrics);
  assert.deepEqual(serviceProperties2.MinuteMetrics, serviceProperties1.MinuteMetrics);
  sortCorsRuleArrays(serviceProperties1);
  sortCorsRuleArrays(serviceProperties2);
  assert.deepEqual(serviceProperties2.Cors, serviceProperties1.Cors);
function sortCorsRuleArrays(serviceProperties){
  if(serviceProperties && serviceProperties.Cors && serviceProperties.Cors.CorsRule){
    var rules = serviceProperties.Cors.CorsRule;
    rules.f

      if(rule.AllowedOrigins){
        rule.AllowedOrigins.sort();
      }
      if(rule.AllowedMethods){
        rule.AllowedMethods.sort();
      }
      if(rule.AllowedHeaders){
        rule.AllowedHeaders.sort();
      }
      if(rule.ExposedHeaders){
        rule.ExposedHeaders.sort();
      }
    });
  }
} 
function defaultServiceProperties(isBlobService){
  var serviceProperties = {};
  serviceProperties.Logging = {};
  serviceProperties.Logging.Version = '1.0';
  serviceProperties.Logging.Delete = true;
  serviceProperties.Logging.Read = true;
  serviceProperties.Logging.Write = true;
  serviceProperties.Logging.RetentionPolicy = {};
  serviceProperties.Logging.RetentionPolicy.Enabled = true;
  serviceProperties.Logging.RetentionPolicy.Days = 1;
  serviceProperties.HourMetrics = {};
  serviceProperties.HourMetrics.Enabled = true;
  serviceProperties.HourMetrics.Version = '1.0';
  serviceProperties.HourMetrics.IncludeAPIs = true;
  serviceProperties.HourMetrics.RetentionPolicy 

  serviceProperties.HourMetrics.RetentionPolicy.Enabled = true;
  serviceProperties.HourMetrics.RetentionPolicy.Days = 1;
  serviceProperties.MinuteMetrics = {};
  serviceProperties.MinuteMetrics.Enabled = true;
  serviceProperties.MinuteMetrics.Version = '1.0';
  serviceProperties.MinuteMetrics.IncludeAPIs = true;
  serviceProperties.MinuteMetrics.RetentionPolicy = {};
  serviceProperties.MinuteMetrics.RetentionPolicy.Enabled = true;
  serviceProperties.MinuteMetrics.RetentionPolicy.Days = 1;
  serviceProperties.Cors = {};
  var rule = {};
  rule.AllowedOrigins = ['www.ab.com', 'www.bc.com'];
  rule.AllowedMethods = ['GET', 'PUT'];
  rule.AllowedHeaders = ['x-ms-meta-data*', 'x-ms-meta-target*', 'x-ms-meta-xyz', 'x-ms-meta-foo'];
  rule.ExposedHeaders = ['x-ms-meta-data*', 'x-ms-meta-source*', 'x-ms-meta-abc', 'x-ms-meta-bcd'];
  rule.MaxAgeInSeconds = 500;
  serviceProperties.Cors.CorsRule = [rule, rule];
  if(isBlobService){
    serviceProperties.DefaultServiceVersion = '2013-08-15

  }
  return serviceProperties;
function emptyServiceProperties(){
  var serviceProperties = {};
  serviceProperties.Logging = {};
  serviceProperties.HourMetrics = {};
  serviceProperties.MinuteMetrics = {};
  serviceProperties.Cors = {};
  return serviceProperties;
function baseServiceProperties(){
  var serviceProperties = {};
  serviceProperties.Logging = {};
  serviceProperties.Logging.Version = '1.0';
  serviceProperties.Logging.Delete = false;
  serviceProperties.Logging.Read = false;
  serviceProperties.Logging.Write = false;
  serviceProperties.Logging.RetentionPolicy = {};
  serviceProperties.Logging.RetentionPolicy.Enabled = false;
  serviceProperties.HourMetrics = {};
  serviceProperties.HourMetrics.Version = '1.0';
  serviceProperties.HourMetrics.Enabled = false;
  serviceProperties.HourMetrics.RetentionPolicy = {};
  serviceProperties.HourMetrics.RetentionPolicy.Enabled = false;
  serviceProperties.MinuteMetrics = {};
  serviceProperties.MinuteMetrics.Version = '1.0';
  
var app = angular.module('aplus', ['ngRoute','ui.bootstrap']);
app.config(['$routeProvider', function($routeProvider) {
    $routeProvider
        .when('/main', {
            templateUrl: 'partials/main.html',
            controller: 'AplusController'
        }).when('/about', {
            templateUrl: 'partials/about.html',
            controller: 'AplusController'
        }).when('/clients', {
            templateUrl: 'partials/clients.html',
            controller: 'AplusController'
        }).when('/contact', {
            templateUrl: 'partials/contact.html',
            controller: 'AplusController'
        }).when('/legal', {
            templateUrl: 'partials/legal.html',
            controller: 'AplusController'
        }).when('/privacy', {
            templateUrl: 'partials/privacy.html',
            controller: 'AplusController'
        }).when('/careers', {
            templateUrl: 'partials/careers.html',
            controller: 'AplusController'
        }).when('/login
Solstice.Message = {};
Solstice.Message.current_fade = null;
Solstice.Message.clear = function() {
    Solstice.Message._init();
    $("#sol_message_container").hide();
    $("#sol_message_wrapper").removeClass("sol-message-error");
    $("#sol_message_wrapper").removeClass("sol-message-information");
    $("#sol_message_wrapper").removeClass("sol-message-warning");
    $("#sol_message_wrapper").removeClass("sol-message-success");
    $("#sol_message").html("");
Solstice.Message.setError = function(message){
    Solstice.Message.clear();
    Solstice.Message._show("error", message);
Solstice.Message.setInfo = function(message){
    Solstice.Message.clear();
    Solstice.Message._show("information", message);
Solstice.Message.setWarning = function(message){
    Solstice.Message.clear();
    Solstice.Message._show("warning", message);
Solstice.Message.setSuccess = function(message){
    Solstice.Message.clear();
    Solstice.Message._show("success", message);
Solstice.Message._show = fun
;(function () {
    'use strict';
    console.clear();
    function O() {
    }
    O.prototype.message = 'o';
    O.prototype.data = { message : 'o' };
    function OO() {
    }
    OO.prototype = Object.create( O.prototype );
    OO.constructor = OO;
    function OOO() {
    }
    OOO.prototype = Object.create( OO.prototype );
    OOO.constructor = OOO;
    var o = new O() ,
        oo = new OO() ,
        ooo = new OOO();
    console.log( '%O \n', O );
    console.log( 'o.message: %O , oo.message: %O , ooo.message: %O' , o , oo , ooo );
    console.log( 'o.message: %s , oo.message: %s , ooo.message: %s ' , o.message , oo.message , ooo.message );
    console.log( 'o.data.message: %s , oo.data.message: %s , ooo.data.message: %s \n' , o.data.message , oo.data.message , ooo.data.message );
    oo.message = 'oo';
    oo.data.message = oo.message;
    ooo.message = 'ooo';
    ooo.data.message = ooo.message;
    console.log( 'o.message: %s , oo.message: %s , ooo.message: %s ' , o.message ,
var Controller =            require("../controllers/Controller.js");
var EventController =       require("../controllers/EventController.js");
var TimelineController =    require("../controllers/TimelineController.js");
var PlotPointController =   require("../controllers/PlotPointController.js");
var PersonController =      require("../controllers/PersonController.js");
var PlotController =        require("../controllers/PlotController.js");
var url = require("url");
module.exports = function getController(serverRequest){
    
    var pathParts = url.parse(serverRequest.url).pathname.split("/");
    var controller = Controller;
    switch (pathParts[1]) {
        case "event":
            controller = EventController;
            break;
        case "timeline":
            controller = TimelineController;
            break;
        case "plotPoint":
            controller = PlotPointController;
            break;
        case "person":
            controller = PersonController;
       
(function($)  {
	$.fn.extend({
		pacNav: function(_options) {
			var options = $.extend({
				childSelector: "> *",
				direction: "ltr",
				minVisible: 2,
				offsetWidth: 0
			}, _options);
			this.each(function() {
				var isMobileNavOpen		= false;
				var navItems			= [];
				var $pacNav				= $(this);
				var $window				= $(window);
				var $navContents		= $pacNav.children();
				var $navItems			= $(options.childSelector, $pacNav);
				var $navToggle			= $("<div>").addClass("pac-nav--toggle");
				var $desktopNav			= $("<div>").addClass("pac-nav pac-nav--desktop");
				var $mobileNav			= $("<div>").addClass("pac-nav pac-nav--mobile").addClass("pac-nav--hidden");
				var $desktopNavItems	= null;
				var $mobileNavItems		= null;
				var closeMobileNav = function()
				{
					if (isMobileNavOpen)
					{
						 toggleMobileNav();
					}
				}
				var eatPellets = function()
				{
					var visibleItems = 0;
					var calculatedWidth = 0;
					var desktopWidth = $desktopNav.innerWidth() 

					for (var i = 0; i < $desktopNavItems.length; i++)
					{
						calculatedWidth += navItems[i].width;
						if (calculatedWidth > desktopWidth)
						{
							$desktopNavItems.eq(i)
								.removeClass("pac-nav--visible")
								.addClass("pac-nav--hidden");
							$mobileNavItems.eq(i)
								.removeClass("pac-nav--hidden")
								.addClass("pac-nav--visible");
						}
						else
						{
							$desktopNavItems.eq(i)
								.removeClass("pac-nav--hidden")
								.addClass("pac-nav--visible");
							$mobileNavItems.eq(i)
								.removeClass("pac-nav--visible")
								.addClass("pac-nav--hidden");
							visibleItems++;
						}
					}
					if (visibleItems < options.minVisible)
					{
						$desktopNavItems
							.removeClass("pac-nav--visible")
							.addClass("pac-nav--hidden");
						$mobileNavItems
							.removeClass("pac-nav--hidden")
							.addClass("pac-nav--visible");
						$pacNav
							.removeClass("pac-nav--is-desktop")
							.removeClass("pac-nav--is-inte

							.addClass("pac-nav--is-mobile");
					}
					else if (visibleItems == navItems.length)
					{
						$pacNav
							.removeClass("pac-nav--is-intermediary")
							.removeClass("pac-nav--is-mobile")
							.addClass("pac-nav--is-desktop");
					}
					else
					{
						$pacNav
							.removeClass("pac-nav--is-desktop")
							.removeClass("pac-nav--is-mobile")
							.addClass("pac-nav--is-intermediary");
					}
				};
				var init = function()
				{
					$window
						.load(startingCalculations)
						.load(instantiateDom)
						.load(eatPellets)
						.resize(eatPellets)
						.click(closeMobileNav);
					$navToggle.click(toggleMobileNav);
				};
				var instantiateDom = function()
				{
					$pacNav
						.empty()
						.append($desktopNav.append($navContents.clone()))
						.append($navToggle)
						.append($mobileNav.append($navContents.clone()));
					$desktopNavItems = $(options.childSelector, $desktopNav);
					$mobileNavItems = $(options.childSelector, $mobileNav);
				
export const IS_LOADING = "IS_LOADING"
export const isLoading = (bool) => (
   {
    type: IS_LOADING,
    isLoading: bool
  }
export const SERVER_ERROR = "SERVER_ERROR"
export const serverError = (bool) => (
   {
    type: SERVER_ERROR,
    serverError: bool
  }
export const ADD_POST = "ADD_POST"
export function addPost(title, body, owner, category) {
  return function (dispatch) {
    dispatch(isLoading(true))
    return ReadableAPI.addPost(title, body, owner, category)
      .then(
        response => response.json(),
        error => dispatch(serverError())
      )
      .then((data) => {
        dispatch(isLoading(false))
        dispatch(
          {
            type:ADD_POST,
            data
          }
        )
      }
      )
  }
export const DELETE_POST = "DELETE_POST"
export function deletePost(postId) {
  return function (dispatch) {
    dispatch(isLoading(true))
    return ReadableAPI.deletePost(postId)
      .then(
        response => response.json(),
        error => d

      )
      .then(() => {
        dispatch(isLoading(false))
        dispatch(
          {
            type: DELETE_POST,
            postId: postId
          }
        )}
      )
  }
export const UPDATE_POST = "UPDATE_POST"
export function updatePost(postId, title, body) {
  return function (dispatch) {
    dispatch(isLoading(true))
    return ReadableAPI.editPost(postId, title, body)
      .then(
        response => response.json(),
        error => dispatch(serverError())
      )
      .then(() =>{
        dispatch(isLoading(false))
        dispatch(
          {
            type: UPDATE_POST,
            postId,
            title,
            body
          }
        )}
      )
  }
export const FETCH_POSTS = "FETCH_POSTS"
export function fetchPosts() {
  return function (dispatch) {
    dispatch(isLoading(true))
    return ReadableAPI.getPosts()
      .then(
        response => response.json(),
        error => dispatch(serverError())
      )
      .then((data) =>{
        dispat

        dispatch(
          {
            type: FETCH_POSTS,
            data
          }
        )}
      )
  }
export const READ_POST = "READ_POST"
export function readPost(postId) {
  return function (dispatch) {
    dispatch(isLoading(true))
    return ReadableAPI.getPostById(postId)
      .then(
        response => response.json(),
        error => dispatch(serverError())
      )
      .then((data) => {
        dispatch(isLoading(false))
        dispatch(
          {
            type: READ_POST,
            data
          }
        )}
      )
  }
export const UPVOTE_POST = "UPVOTE_POST"
export function upVotePost(postId) {
  return function (dispatch) {
    dispatch(isLoading(true))
    return ReadableAPI.votePost(postId, "upVote")
      .then(
        response => response.json(),
        error => dispatch(serverError())
      )
      .then(() => {
        dispatch(isLoading(false))
        dispatch(
          {
            type: UPVOTE_POST,
            postId: postId
          
var express     = require('express'),
    api         = require('../api'),
    apiRoutes;
apiRoutes = function (middleware) {
    var router = express.Router();
    router.del = router.delete;
    router.get('/configuration', api.http(api.configuration.browse));
    router.get('/configuration/:key', api.http(api.configuration.read));
    router.get('/posts', api.http(api.posts.browse));
    router.post('/posts', api.http(api.posts.add));
    router.get('/posts/:id', api.http(api.posts.read));
    router.get('/posts/slug/:slug', api.http(api.posts.read));
    router.put('/posts/:id', api.http(api.posts.edit));
    router.del('/posts/:id', api.http(api.posts.destroy));
    router.get('/settings', api.http(api.settings.browse));
    router.get('/settings/:key', api.http(api.settings.read));
    router.put('/settings', api.http(api.settings.edit));
    router.get('/users', api.http(api.users.browse));
    router.get('/users/:id', api.http(api.users.read));
    router.get('/users/slug/:slug

    router.get('/users/email/:email', api.http(api.users.read));
    router.put('/users/password', api.http(api.users.changePassword));
    router.put('/users/owner', api.http(api.users.transferOwnership));
    router.put('/users/:id', api.http(api.users.edit));
    router.post('/users', api.http(api.users.add));
    router.del('/users/:id', api.http(api.users.destroy));
    router.get('/tags', api.http(api.tags.browse));
    router.get('/roles/', api.http(api.roles.browse));
    router.get('/slugs/:type/:name', api.http(api.slugs.generate));
    router.get('/themes', api.http(api.themes.browse));
    router.put('/themes/:name', api.http(api.themes.edit));
    router.get('/notifications', api.http(api.notifications.browse));
    router.post('/notifications', api.http(api.notifications.add));
    router.del('/notifications/:id', api.http(api.notifications.destroy));
    router.get('/db', api.http(api.db.exportContent));
    router.del('/db', api.http(api.db.deleteAllContent));
    rout

    router.post('/mail/test', function (req, res) {
        api.http(api.mail.sendTest)(req, res);
    });
    router.post('/authentication/passwordreset',
        middleware.spamForgottenPrevention,
        api.http(api.authentication.generateResetToken)
    );
    router.put('/authentication/passwordreset', api.http(api.authentication.resetPassword));
    router.post('/authentication/invitation', api.http(api.authentication.acceptInvitation));
    router.get('/authentication/invitation', api.http(api.authentication.isInvitation));
    router.post('/authentication/setup', api.http(api.authentication.setup));
    router.get('/authentication/setup', api.http(api.authentication.isSetup));
    router.post('/authentication/token',
        middleware.spamSigninPrevention,
        middleware.addClientSecret,
        middleware.authenticateClient,
        middleware.generateAccessToken
    );
    router.post('/authentication/revoke', api.http(api.authentication.revoke));
    router.post('/up
'use strict';
angular.module('suitApp.home')
.factory('CustomMessageService', ['messageCenterService', function(messageCenterService){
  var self = this;
  self.addMessage = function(type, message) {
    messageCenterService.add(type, message, { status: messageCenterService.status.shown, timeout: 7000 });
  };
  self.addInfoMessage = function(message) {
  	self.addMessage('info', message);
  };
  self.addWarningMessage = function(message) {
  	self.addMessage('warning', message);
  };
  self.addDangerMessage = function(message) {
  	self.addMessage('danger', message);
  };
  self.addSuccessMessage = function(message) {
  	self.addMessage('success', message);
  };
  return {
    message: function(type, message) {
      self.addMessage(type, message);
    },
    dangerMessage: function(message) {
      self.addDangerMessage(message);
    },
    successMessage: function(message) {
      self.addSuccessMessage(message);
    },
    infoMessage: function(message) {
      self.addInfoMessage(
var nav__cube_8h =
    [ "MAX_LINES_X", "nav__cube_8h.html#a4b68381ec1530ae49c1149b5948ec1b5", null ],
    [ "nav_cube_SetAlpha", "nav__cube_8h.html#ab17c3af9f3ec2a27fc6b29d7578781d0", null ],
    [ "nav_cube_SetGridX", "nav__cube_8h.html#ab10ec420d5a1e25d24568fa3cbb4b52c", null ],
    [ "nav_cube_SetGridZ", "nav__cube_8h.html#a7fe7b91fc3a2e0a55371d310533d327d", null ],
    [ "nav_cube_SetNSectX", "nav__cube_8h.html#ab738aae66e65a5f1c401e6bc39eda15e", null ],
    [ "nav_cube_SetNSectZ", "nav__cube_8h.html#a6af57cc1e2ed48c6872e21cd569e18c1", null ],
    [ "nav_cube_SetOffsX", "nav__cube_8h.html#ab7d7c5b8b7f2370854c9dd2ff2299ca5", null ],
    [ "nav_cube_SetOffsY", "nav__cube_8h.html#ad1e905303bba61797a008ef0f6f292ad", null ],
    [ "nav_cube_SetOffsZ", "nav__cube_8h.html#ad38abaaf6c9fcbd5ba647196f0292ef4", null ],
    [ "nav_cube_SetSect", "nav__cube_8h.html#af870bfbe9a7682a451851935b153e7d2", null ],
    [ "nav_cube_SetSizeX", "nav__cube_8h.html#aa03ecf840dc5ea86e780336f629a9871", null

    [ "nav_cube_SetSizeY", "nav__cube_8h.html#a77397a3774d20390bf36852f00836050", null ],
    [ "nav_cube_SetSizeZ", "nav__cube_8h.html#a5904cffa3e764f58bc55f6b024e616ef", null ],
    [ "STBY_OFFSET", "nav__cube_8h.html#aaeba4b840a03817a2f12e1f1c43b52a8", null ],
    [ "nav_cube", "nav__cube_8h.html#aef97acee782c6205b6dfec1681e9b96c", null ],
    [ "nav_cube_init", "nav__cube_8h.html#a147245454ccec554be66a5a4c79cf24d", null ],
    [ "cube_alpha", "nav__cube_8h.html#a3ce684b2e9247992262e4440b8a70d29", null ],
    [ "cube_grid_x", "nav__cube_8h.html#aff04e231d3ec97feb7b8567e7825aef3", null ],
    [ "cube_grid_z", "nav__cube_8h.html#ae25e56f562d92137708071dc98384e31", null ],
    [ "cube_nline_x", "nav__cube_8h.html#a5b1ef2472f3655786baa8e5f54fa768e", null ],
    [ "cube_nline_z", "nav__cube_8h.html#a3dd7218ee9f0f5d224968ca181c1b6cf", null ],
    [ "cube_nsect_x", "nav__cube_8h.html#aa1f813b4f620f9c0f5d529f17c910a4e", null ],
    [ "cube_nsect_z", "nav__cube_8h.html#a4fea9e1fecec509111fc
$(function init_nav(){
	var nav = $("#nav");
	var nav_items = $(".nav-item");
	var nav_content_items = $(".nav-content-item");
	nav_content_items._jq_cache = [];
	nav_content_items.each(function(i,nav_content_item){
		nav_content_item = $(nav_content_item);
		var height = nav_content_item._cache_height = nav_content_item.height();
		var width = nav_content_item._cache_width = nav_content_item.width();
		var offset = nav_content_item._cache_offset = nav_content_item.offset();
		nav_content_item.css({height:0,minHeight:0,overflow:"hidden",display:"none",opacity:1});
		nav_content_items._jq_cache[nav_content_item.data("nav-content")] = nav_content_item;
	});
	var start_line = nav.offset().left,
		end_line = start_line+nav.width()-2;
	nav_items.each(function(i,nav_item){
		nav_item = $(nav_item);
		i = nav_item.data("nav-index");
		var nav_content_item = nav_content_items._jq_cache[i];
		if (i!==undefined&&nav_content_item) {
			var offset_start = nav_content_item._cache_offset.left;
			va

			console.log(start_line,offset_start,end_line)
			if (offset_start<start_line) {
				nav_content_item.css({
					marginLeft:start_line-offset_start
				})
			}else if(offset_end>end_line){
				nav_content_item.css({
					marginLeft:end_line-offset_end
				})
			}else{
				var half_margin = -(nav_content_item._cache_width/2)+nav_item.width()/2;
				if ((offset_start+half_margin)<start_line) {
					nav_content_item.css({
						marginLeft:start_line-offset_start
					})
				}else{
					nav_content_item.css({
						marginLeft:half_margin
					})
				}
			}
			nav_item.on("mouseenter",function(){
				nav_item.addClass("nav-item-hover");
				nav_content_item.stop().css({
					display:"block"
				}).animate({
					height:nav_content_item._cache_height
				},130);
			}).on("mouseleave",function(){
				nav_item.removeClass("nav-item-hover");
				nav_content_item.stop().css({
					display:"none"
				}).animate({
					height:0
				},130);
			});
		}
	});
	nav_items.last().css({
		paddingRight:
/**
 * Main application routes
 */
'use strict';
var errors = require('./components/errors');
module.exports = function(app) {
  app.use('/api/invoices', require('./api/invoice'));
  app.use('/api/workOrders', require('./api/workOrder'));
  app.use('/api/bids', require('./api/bid'));
  app.use('/api/taskCats', require('./api/taskCat'));
  app.use('/api/productCats', require('./api/productCat'));
  app.use('/api/ratings', require('./api/rating'));
  app.use('/api/comments', require('./api/comment'));
  app.use('/api/tasks', require('./api/task'));
  app.use('/api/sizes', require('./api/size'));
  app.use('/api/tools', require('./api/tool'));
  app.use('/api/features', require('./api/feature'));
  app.use('/api/themes', require('./api/theme'));
  app.use('/api/colors', require('./api/color'));
  app.use('/api/patterns', require('./api/pattern'));
  app.use('/api/products', require('./api/product'));
  app.use('/api/roles', require('./api/role'));
  app.use('/api/sites', require('./api/si
/**$(document).ready(function(){
    $("#button1").click(function(){
     $("#showWeekOne").show();
    });
});
$(document).ready(function(){
    $("#button2").click(function(){
     $("#showWeekTwo").show();
    });
});
$(document).ready(function(){
    $("#button3").click(function(){
     $("#showWeekThree").show();
    });
});
$(document).ready(function(){
    $("#button4").click(function(){
     $("#showWeekFour").show();
    });
});*/
$(document).ready(function(){
    $("#one").click(function(){
     $("#showWeekOne").show();
	 $("#showWeekTwo").hide();
	 $("#showWeekThree").hide();
	 $("#showWeekFour").hide();
	 $("#myCarousel").hide();
	 $("#mePic").hide();
    });
    $("#two").click(function(){	
     $("#showWeekOne").hide();
	 $("#showWeekTwo").show();
	 $("#showWeekThree").hide();
	 $("#showWeekFour").hide();
	 $("#myCarousel").hide();
	 $("#mePic").hide();
    });
     $("#main").click(function(){	
     $("#showWeekOne").hide();
	 $("#showWeekTwo").hide();
	 $("#showWeekThr
require('enyo');
/**
* Contains the declaration for the {@link module:enyo/MultipleDispatchComponent~MultipleDispatchComponent} kind.
* @module enyo/MultipleDispatchComponent
*/
var
	kind = require('./kind');
var
	Component = require('./Component'),
	MultipleDispatchSupport = require('./MultipleDispatchSupport');
/**
* {@link module:enyo/MultipleDispatchComponent~MultipleDispatchComponent} is a purely abstract
* {@glossary kind} that simply provides a common ancestor for
* {@link module:enyo/Component~Component} [objects]{@glossary Object} that need 
* the [MultipleDispatchSupport]{@link module:enyo/MultipleDispatchSupport~MultipleDispatchSupport}
* {@glossary mixin}.
* @class MultipleDispatchComponent
* @extends module:enyo/Component~Component
* @mixes module:enyo/MultipleDispatchSupport~MultipleDispatchSupport
* @public
*/
module.exports = kind(
	/** @lends module:enyo/MultipleDispatchComponent~MultipleDispatchComponent */ {
	/**
	* @private
	*/
	kind: Component,
	/**
	* @private
	*/
/**
 * @mixin
 * @description
 *
 * Mixin which allows to specify the service name when creating an error instance.
 */
Subclass.Error.Option.Service = function()
    function ServiceOption()
    {
        return {
            /**
             * The name of service
             *
             * @type {(string|undefined)}
             */
            _service: undefined
        };
    }
    /**
     * Sets/returns service name
     *
     * @method service
     * @memberOf Subclass.Error.Option.Service
     *
     * @param {string} [service]
     *      The name of the service
     *
     * @returns {Subclass.Error}
     */
    ServiceOption.prototype.service = function(service)
    {
        if (!arguments.length) {
            return this._service;
        }
        if (service && typeof service != 'string') {
            throw new Error('Specified invalid service name. It must be a string.');
        }
        this._service = service;
        return this;
    };
    /**
     * Checks 
(function () {
  "use strict"
  var root = this,
      $ = root.jQuery;
  if(typeof root.GOVUK === 'undefined') { root.GOVUK = {}; }
  var showHide = {
    
    init: function() {
      showHide.$toggle = $('.js-showhide');
      if (showHide.$toggle.length > 0) {
        showHide.$target = $(showHide.$toggle[0].hash);
        showHide.$toggle.on('click', showHide.toggle);
        
        if (showHide.$toggle.is(':visible')) {
        }
      }
    },
    toggle: function(e) {
      e.preventDefault();
      if (!showHide.$target.hasClass('js-hidden')) {
        showHide.hideStuff();
      } else {
        showHide.showStuff();
      }
      return false;
    },
    showStuff: function() {
      showHide.$target.removeClass('js-hidden');
      showHide.$toggle.removeClass('closed')
        .text(showHide.$toggle.text().replace('Show', 'Hide'));
    },
    hideStuff: function() {
      showHide.$target.addClass('js-hidden');
      showHide.$toggle.addClass('closed')
        .text(showH
/* global publishExternalAPI, createInjector */
describe('$controller', function () {
    'use strict';
    beforeEach(function () {
        delete window.angular;
        publishExternalAPI();
    });
    it('instantiates controller functions', function () {
        var injector = createInjector(['ng']);
        var $controller = injector.get('$controller');
        function MyController() {
            this.invoked = true;
        }
        var controller = $controller(MyController);
        expect(controller).toBeDefined();
        expect(controller instanceof MyController).toBe(true);
        expect(controller.invoked).toBe(true);
    });
    it('injects dependencies to controller functions', function () {
        var injector = createInjector(['ng', function ($provide) {
            $provide.constant('aDep', 42);
        }]);
        var $controller = injector.get('$controller');
        function MyController(aDep) {
            this.theDep = aDep;
        }
        var controller

        expect(controller.theDep).toBe(42);
    });
    it('allows injecting locals to controller functions', function () {
        var injector = createInjector(['ng']);
        var $controller = injector.get('$controller');
        function MyController(aDep) {
            this.theDep = aDep;
        }
        var controller = $controller(MyController, {aDep: 42});
        expect(controller.theDep).toBe(42);
    });
    it('allows registering controllers at config time', function () {
        function MyController() {
        }
        var injector = createInjector(['ng', function ($controllerProvider) {
            $controllerProvider.register('MyController', MyController);
        }]);
        var $controller = injector.get('$controller');
        var controller = $controller('MyController');
        expect(controller).toBeDefined();
        expect(controller instanceof MyController).toBe(true);
    });
    it('allows registering several controllers in an object', function () {
  

        }
        function MyOtherController() {
        }
        var injector = createInjector(['ng', function ($controllerProvider) {
            $controllerProvider.register({
                MyController: MyController,
                MyOtherController: MyOtherController
            });
        }]);
        var $controller = injector.get('$controller');
        var controller = $controller('MyController');
        var otherController = $controller('MyOtherController');
        expect(controller instanceof MyController).toBe(true);
        expect(otherController instanceof MyOtherController).toBe(true);
    });
    it('allows registering controllers through modules', function () {
        var module = angular.module('myModule', []);
        module.controller('MyController', function () {
        });
        var injector = createInjector(['ng', 'myModule']);
        var $controller = injector.get('$controller');
        var controller = $controller('MyController');
        expect(c

    });
    it('does not normally look controllers up from window', function () {
        window.MyController = function MyController() {
        };
        var injector = createInjector(['ng']);
        var $controller = injector.get('$controller');
        expect(function () {
            $controller('MyController');
        }).toThrow();
    });
    it('looks up controllers from window if so configured', function () {
        window.MyController = function MyController() {
        };
        var injector = createInjector(['ng', function ($controllerProvider) {
            $controllerProvider.allowGlobals();
        }]);
        var $controller = injector.get('$controller');
        var controller = $controller('MyController');
        expect(controller).toBeDefined();
        expect(controller instanceof window.MyController).toBe(true);
    });
    it('can return semi-constructed controller', function () {
        var injector = createInjector(['ng']);
        var $controller = inj

        function MyController() {
            this.constructed = true;
            this.myAttrWhenConstructed = this.myAttr;
        }
        var controller = $controller(MyController, null, true);
        expect(controller.constructed).toBeUndefined();
        expect(controller.instance).toBeDefined();
        controller.instance.myAttr = 42;
        var actualController = controller();
        expect(actualController.constructed).toBeDefined();
        expect(actualController.myAttrWhenConstructed).toBe(42);
    });
    it('can return semi-constructed controller when using array injection', function () {
        var injector = createInjector(['ng', function ($provide) {
            $provide.constant('aDep', 42);
        }]);
        var $controller = injector.get('$controller');
        function MyController(aDep) {
            this.aDep = aDep;
            this.constructed = true;
        }
        var controller = $controller(['aDep', MyController], null, true);
        expect(co
var navItem1 = document.getElementById('item1');
var navItem2 = document.getElementById('item2');
var navItem3 = document.getElementById('item3');
var tab1 = document.getElementById('tab1');
var tab2 = document.getElementById('tab2');
var tab3 = document.getElementById('tab3');
    navItem1.onclick = function(){
        this.className = 'item_active nav_item';
        navItem2.className = 'nav_item';
        navItem3.className = 'nav_item';
        tab1.style.visibility = 'visible';
        tab2.style.visibility = 'hidden';
        tab3.style.visibility = 'hidden';
    navItem2.onclick = function(){
        this.className = 'item_active nav_item';
        navItem1.className = 'nav_item';
        navItem3.className = 'nav_item';
        tab2.style.visibility = 'visible';
        tab1.style.visibility = 'hidden';
        tab3.style.visibility = 'hidden';
    navItem3.onclick = function(){
        this.className = 'item_active nav_item';
        navItem1.className = 'nav_item';
        na
trcraftingbuddy.factory('disposableController', [function()                     {
    return {
        create: function($scope, base)                                          {
            var controller                  = base || {};
            var events                      = [];
            var initialized                 = false;
            controller.isInitialized        = function() { return initialized; };
            controller.init                 = function() { };
            controller.update               = true;
            controller.render               = function() { };
            controller.destroy              = function() { };
            controller.countEvents          = function() { return events?events.length:-1; };
            controller.addEventRemover      = function(remover) { events.push(remover); return remover };
            controller.removeEventRemover   = function(remover)                 {
                var index = events.indexOf(remover); if (ind

                events.splice(index, 1);
            };
            var updater                 = setInterval(function()                {
                if (!controller.update) return; controller.update   = false;
                if (!initialized && typeof controller.init == 'function')       {
                    initialized    = true;
                    controller.init();
                } 
                if (typeof controller.render == 'function') controller.render();
            }, 10);
            events.push($scope.$on('$destroy', function()                       {
                if (updater >= 0) clearInterval(updater);
                while (events.length) events.shift()();
                if (controller.destroy && typeof controller.destroy === 'function') controller.destroy();
                controller.update           = null;
                controller.init             = null;
                controller.countEvents      = null;
                controller.addEventRemover
var hierarchy =
    [ "Controller.DebugTimer", "class_controller_1_1_debug_timer.html", null ],
    [ "Controller.DebugTrace", "class_controller_1_1_debug_trace.html", null ],
    [ "Controller.Drone", "class_controller_1_1_drone.html", null ],
    [ "Form", null, [
      [ "Controller.ConnectionDialog", "class_controller_1_1_connection_dialog.html", null ],
      [ "Controller.Control", "class_controller_1_1_control.html", null ],
      [ "Controller.Control", "class_controller_1_1_control.html", null ],
      [ "Controller.Control", "class_controller_1_1_control.html", null ],
      [ "Controller.Debug", "class_controller_1_1_debug.html", null ],
      [ "Controller.DroneCommandList", "class_controller_1_1_drone_command_list.html", null ],
      [ "Controller.ImageViewer", "class_controller_1_1_image_viewer.html", null ],
      [ "Controller.MainFrame", "class_controller_1_1_main_frame.html", null ],
      [ "Controller.Navigation", "class_controller_1_1_navigation.html", null ],
   

      [ "Controller.RangeImageViewer", "class_controller_1_1_range_image_viewer.html", null ],
      [ "Controller.ScanParametersViewer", "class_controller_1_1_scan_parameters_viewer.html", null ],
      [ "Controller.SphereRecognitionView", "class_controller_1_1_sphere_recognition_view.html", null ]
    ] ],
    [ "Controller.HeightMap", "class_controller_1_1_height_map.html", null ],
    [ "Controller.Image", "class_controller_1_1_image.html", null ],
    [ "Controller.Map", "class_controller_1_1_map.html", null ],
    [ "Controller.MapCell", "struct_controller_1_1_map_cell.html", null ],
    [ "Controller.Message", "struct_controller_1_1_message.html", null ],
    [ "Controller.Path", "class_controller_1_1_path.html", null ],
    [ "PathFinder", "class_path_finder.html", null ],
    [ "Controller.PathWaypoint", "class_controller_1_1_path_waypoint.html", null ],
    [ "Controller.PointCloud", "class_controller_1_1_point_cloud.html", null ],
    [ "Controller.RangeImage", "class_cont
angular.module('app.controllers', [])
  
.controller('dIVERTRIPCtrl', function($scope) {
})
   
.controller('personasCtrl', function($scope) {
})
   
.controller('patrocinadorCtrl', function($scope) {
})
   
.controller('bienvenidoCtrl', function($scope) {
})
   
.controller('menuCtrl', function($scope) {
})
   
.controller('eventosCtrl', function($scope) {
})
   
.controller('mapaCtrl', function($scope) {
})
   
.controller('playCtrl', function($scope) {
})
   
.controller('preferenciasCtrl', function($scope) {
	  $scope.settings = {
    	recibirnotificaciones: true
  };
})
   
.controller('ayudaCtrl', function($scope) {
})
   
.controller('informacionCtrl', function($scope) {
})
   
.controller('contactoCtrl', function($scope) {
})
.controller('inicioCtrl', function($scope) {
})
   
.controller('menuPatrocinadorCtrl', function($scope) {
})
   
.controller('administrarEventosCtrl', function($scope) {
})
   
.controller('contrasenaCtrl', function($scope) {
})
   
.controller('historial
tsApp
  .controller(
    'AdminCtrl',
    [
      '$scope',
      '$http',
      '$modal',
      '$location',
      '$anchorScroll',
      'gpService',
      'utilService',
      'tabService',
      'securityService',
      'translationService',
      'refsetService',
      'directoryService',
      'adminService',
      function($scope, $http, $modal, $location, $anchorScroll, gpService,
        utilService, tabService, securityService, translationService,
        refsetService, directoryService, adminService) {
        console.debug('configure AdminCtrl');
        if (tabService.selectedTab.label != 'Admin') {
          tabService.setSelectedTabByLabel('Admin');
        }
        $scope.translation = translationService.getModel();
        $scope.user = securityService.getUser();
        $scope.component = directoryService.getModel();
        $scope.pageSizes = directoryService.getPageSizes();
        $scope.searchParams = directoryService.getSearchParams();
        $scope.searchResul
var Level1 = {
    enemyMax:5,
    giftMax:1,
    gifts:[
        {
            ShowType:"Repeate",
            ShowTime:"00:02",
            Types:[0,1,2]
        }
    ],
    enemies:[
        {
            ShowType:"Repeate",
            ShowTime:"00:02",
            Types:[0,1,2]
        },
        {
            ShowType:"Repeate",
            ShowTime:"00:05",
            Types:[3,4,5]
        }
        /*{
            ShowType:"Repeate",
            ShowTime:"00:08",
            Types:[0,4,3,5]
        },
        {
            ShowType:"Once",
            ShowTime:"00:6",
            Types:[0,2,4,3]
        },
        {
            ShowType:"Once",
            ShowTime:"00:16",
            Types:[0,2,5,4,3]
        },
        {
            ShowType:"Once",
            ShowTime:"00:25",
            Types:[0,3,5,4,3]
        },
        {
            ShowType:"Once",
            ShowTime:"00:35",
            Types:[4,5,3,1,3]
        },
        {
            ShowType:"Once",
       
const getOptions = () => {
  const options = []
  options.push({value: 0, label: 'Menu'})
  options.push({value: 1, label: 'Events'})
  options.push({value: 2, label: 'Content'})
  return options
const mapStateToProps = state => {
  return {
    page: state.app.form,
    options: getOptions()
  }
const getHandler = dispatch => {
  return {
    changeTitle: title => {
      dispatch(UI.changeTitle(title))
    },
    changeDescription: description => {
      dispatch(UI.changeDescription(description))
    },
    changeType: type => {
      dispatch(UI.changeType(type))
    },
    changeActive: isActive => {
      dispatch(UI.changeActive(isActive))
    },
    changePublicationDate: publishedOn => {
      dispatch(UI.changePublicationDate(publishedOn))
    },
    savePage: page => {
      dispatch(API.postPage(page))
    },
    updatePage: page => {
      dispatch(API.putPage(page))
    },
    resetPage: id => {
      dispatch(UI.resetPage(id))
    }
  }
const mapDispatchToProps = dispatc
$(function() {
    var nav = $('#nav');
    var navWrap = $('#nav-wrap');
    var navHomeY = nav.offset().top;
    var isFixed = false;
    var $w = $(window);
    var navNumber = $('.number');
    $w.scroll(function() {
        var scrollTop = $w.scrollTop();
        var shouldBeFixed = scrollTop > navHomeY;
        if (shouldBeFixed && !isFixed) {
            nav.css({
                width: '88%',
                position: 'fixed',
                'z-index': 10,
                top: 0,
                height: '71px',
                boxShadow: '0px 2px 10px #E0E0E0'
            });
            isFixed = true;
            nav.addClass('nav-smaller');
            navWrap.css({ height: '71px'});
            navWrap.addClass('nav-smaller');
        }
        else if (!shouldBeFixed && isFixed)
        {
            nav.css({
                width: '100%',
                position: 'static',
                boxShadow: 'none',
                height: '114px'
            });
            is
"use strict";
/*  ================================================================================
	Services
================================================================================  */
angular
	.module('Services', [])
		/* ================================================================================
	 #IssuesSvc: Repository Issues Service
	 ================================================================================ */
	.factory(
		'IssuesSvc', [
			'$rootScope', 'Log', '$resource', '$filter', 'ParametersSvc',
			function($rootScope, Log, $resource, $filter, ParametersSvc) {
				var service = {
					_name: 'IssuesSvc',
					resourceParams:  {
						params: {
						},
						actions: {
							getIssues: {
								method: 'GET',
								isArray: true
							}
						}
					}
				};
				/* ==== INIT VARIABLES ==================== */
				service.init = function() {
					Log.debug([service._name, service, 'init']);
					service.resource = $resource(service.resourceParams.path,
var processor = require("../../processor/processor"),
    mongoose = require('mongoose'),
    API = mongoose.model('API');
var adminApisController = (function () {
    "use strict";
    var path = 'admin/apis',
        view_path = 'admin/apis';
    function index(req, res) {
        API.find(function (err, apis) {
            res.render(view_path + '/index', { title: 'APIs', apis: apis });
        });
    }
    function show(req, res) {
        API.findById(req.params[0], function (err, api) {
            if (typeof req.param('populateData') !== "undefined") {
                api.populateData();
                req.flash('success', api.title + ' API is checking for data. Please wait...');
                return res.redirect('/' + path + '/' + api._id);
            }
            res.render(view_path + '/show', { title: api.title, api: api });
        });
    }
    function build(req, res) {
        API.findById(req.params[0], function (err, api) {
            res.render(view_path + '/bu

        });
    }
    function create(req, res) {
        var api;
        if (req.method === 'POST') {
            api = new API(req.param('api'));
            api.save(function (error) {
                if (error) {
                    res.flash('error', error);
                    return res.render(view_path + '/create', { title: 'New API', api: api });
                }
                req.flash('success', api.title + ' API successfully created.');
                return res.redirect('/' + path + '/' + api._id);
            });
        } else {
            if (req.xhr) {
                processor.head(req.query.url, function (result) {
                    return res.send(result.data);
                });
            } else {
                api = new API();
                return res.render(view_path + '/create', { title: 'New API', api: api });
            }
        }
    }
    function update(req, res) {
        API.findById(req.params[0], function (err, api) {
            if (r

                var key;
                for (key in req.param('api')) {
                    if (req.param('api').hasOwnProperty(key)) {
                        if (key !== '_id') {
                            if (req.param('api')[key] !== api[key]) {
                                api[key] = req.param('api')[key];
                            }
                        }
                    }
                }
                api.save(function (error) {
                    if (error) {
                        res.flash('error', error);
                        return res.render(view_path + '/update', { title: 'Edit ' + api.title, api: api });
                    }
                    req.flash('success', api.title + ' API successfully updated.');
                    return res.redirect('/' + path + '/' + api._id);
                });
            } else {
                return res.render(view_path + '/update', { title: 'Edit ' + api.title, api: api });
            }
        });
    }
 
var dir_b3b6f0ba51cfe0acc4894d1f872bef0a =
    [ "Request", "dir_e183873a6ae1e237e08dadf9f5de65f9.html", "dir_e183873a6ae1e237e08dadf9f5de65f9" ],
    [ "Session", "dir_22f03130c6fc964b088edb4944e82d35.html", "dir_22f03130c6fc964b088edb4944e82d35" ],
    [ "BaseController.php", "_base_controller_8php.html", [
      [ "BaseController", "class_o_r_m_1_1_controller_1_1_base_controller.html", "class_o_r_m_1_1_controller_1_1_base_controller" ]
    ] ],
    [ "ControllerFactory.php", "_controller_factory_8php.html", [
      [ "ControllerFactory", "class_o_r_m_1_1_controller_1_1_controller_factory.html", "class_o_r_m_1_1_controller_1_1_controller_factory" ]
    ] ],
    [ "ControllerRegister.php", "_controller_register_8php.html", [
      [ "ControllerRegister", "class_o_r_m_1_1_controller_1_1_controller_register.html", "class_o_r_m_1_1_controller_1_1_controller_register" ]
    ] ],
    [ "Request.php", "_request_8php.html", [
      [ "Request", "class_o_r_m_1_1_controller_1_1_request.html", 
var barbakoa = require("barbakoa");
var r = barbakoa.router;
var movieApi = require("./api/movieApi");
var downloadApi = require("./api/downloadApi");
var torrentsApi = require("./api/torrentsApi");
var recentApi = require("./api/recentApi");
var showApi = require("./api/showApi");
var fileApi = require("./api/fileApi");
var playerApi = require("./api/playerApi");
var logsApi = require("./api/logsApi");
var subtitlesApi = require("./api/subtitlesApi");
var favApi = require("./api/favApi");
var searchApi = require("./api/searchApi");
var notificationsApi = require("./api/notificationsApi");
r.get("/", function * () {
  var assets = barbakoa.assets.getModule("app");
  yield this.render("index", {assets: assets});
});
r.get("/api/movies", movieApi.find);
r.get("/api/movies/:imdb", movieApi.get);
r.get("/api/shows", showApi.find);
r.get("/api/shows/:imdb", showApi.get);
r.post("/api/favs/:imdb", favApi.add);
r.delete("/api/favs/:imdb", favApi.remove);
r.get("/api/search", searchApi.search)
'use strict';
/**
 * UserAdminService
 */
angular.module('service.userAdmin', [])
.constant('SERVICE_CONFIG', {
})
.factory('UserAdminService', function($http, SERVICE_CONFIG) {
	var service = {};
	/**
	 * API Methods
	 */
	service.getUser = function(userId) {
		var userAdminServiceUrl = SERVICE_CONFIG.URL + "/service/user/" + userId;
		var getConfig = {
		};
		return $http.get(userAdminServiceUrl, getConfig).then(function(response) {
			return response.data;
		});
	}; 
	service.addUser = function(user) {
		var userAdminServiceUrl = SERVICE_CONFIG.URL + "/service/user/add";
		var postConfig = {};
		return $http.post(userAdminServiceUrl, user, postConfig).then(function(response) {
			return response;
		});
	};
	service.updateUser = function(user) {
		var userAdminServiceUrl = SERVICE_CONFIG.URL + "/service/user/update";
		var postConfig = {};
		return $http.post(userAdminServiceUrl, user, postConfig).then(function(response) {
			return response;
		});
	};
	service.deleteUser = function(
var path = require('path');
var assert = require('assert');
var after = require('after');
var Registry = require('../');
var service_path_1 = path.join('/', 'test', 'etcd-spaceport', '1');
var service_path_2 = path.join('/', 'test', 'etcd-spaceport', '2');
var registry_1 = undefined;
var registry_2 = undefined;
before('should create a registry', function(done) {
    registry_1 = Registry(service_path_1);
    registry_2 = Registry(service_path_2);
    done();
});
test('should create and register a new service', function(done) {
    var service_1 = registry_1.service('service-1', { ttl: 1 });
    done = after(3, done);
    service_1.start({}, function() {
        done();
    });
    var browser = registry_1.browse(function(service) {
        assert.equal('service-1', service.name);
        service.once('offline', function() {
            done();
            browser.stop();
        });
        service_1.stop(done);
    });
});
test('should have service registred after ttl', function(done)

    var service_2 = registry_1.service('service-2', { ttl: 1 });
    done = after(2, done);
    service_2.start({}, function() {
        done();
    });
    var browser = registry_1.browse(function(service) {
        if (service.name != 'service-2') {
            return
        }
        assert.equal('service-2', service.name);
        var online = true;
        service.once('offline', function() {
            assert(!online);
            browser.stop();
        });
        setTimeout(function() {
            online = false;
            service_2.stop(done);
        }, 1500);
    });
});
test('should no longer listen for services after browser stop', function(done) {
    var service_3 = registry_1.service('service-3', { ttl: 1 });
    done = after(2, done);
    service_3.start({}, function() {
        done();
    });
    var browser = registry_1.browse(function(service) {
        assert(false);
    });
    browser.stop();
    setTimeout(function() {
        service_3.stop();
    }, 15

    setTimeout(function() {
        done();
    }, 1750);
});
test('should not start if already running', function(done) {
    var service_4 = registry_1.service('service-4', { ttl: 1 });
    var service_again = registry_1.service('service-4', { ttl: 1 });
    done = after(3, done);
    service_4.start({}, function() {
        done();
    });
    var browser = registry_1.browse(function(service) {
        assert.equal('service-4', service.name);
        service_again.start({}, function(err) {
            assert.equal(err.message, 'Key already exists');
            assert.equal(err.code, 105);
        });
        done();
    });
    setTimeout(function() {
        browser.stop();
        service_4.stop(done);
    }, 1500);
});
test('should have heartbeats', function(done) {
    this.timeout(12000);
    var service_1 = registry_1.service('service-1', { ttl: 1 });
    done = after(3, done);
    service_1.start({}, function() {
        done();
    });
    var online = true;
    var browse
var nav_8h =
    [ "CloseDegAngles", "nav_8h.html#ac7337f6adcdaff21acccd2f32070b666", null ],
    [ "DistanceSquare", "nav_8h.html#ac72e29d6c97b6ae1fcf957fa59c69215", null ],
    [ "Eight", "nav_8h.html#aefc5a52ca873a9bfb3e1d31a261338a4", null ],
    [ "G", "nav_8h.html#aed9ea78689ecce0b7264c02c7f8a9a54", null ],
    [ "HORIZONTAL_MODE_CIRCLE", "nav_8h.html#a5bfcd798f85be44cd7766b55ef9c9c08", null ],
    [ "HORIZONTAL_MODE_ROUTE", "nav_8h.html#a6084dc0a6bca1d7ca7c39dad6614bce0", null ],
    [ "HORIZONTAL_MODE_WAYPOINT", "nav_8h.html#a303d1b36f192af5f774d7a660ea83fff", null ],
    [ "nav_IncreaseShift", "nav_8h.html#ade046c5227910bd6f3ea18f9b4d6c514", null ],
    [ "NAV_MODE_COURSE", "nav_8h.html#addc6a163a0d81c27179c10d7e260cdc5", null ],
    [ "NAV_MODE_ROLL", "nav_8h.html#a97cbe769969373c820146ab3e92047f2", null ],
    [ "nav_SetNavRadius", "nav_8h.html#ae1dfe610bee226ce313ba07538805322", null ],
    [ "NavApproaching", "nav_8h.html#a2ef5712522a8553afbd595be12cdd98e", null ],
    [ "

    [ "NavAttitude", "nav_8h.html#a81c6df93605ad973117e427efc141af6", null ],
    [ "NavCircleCount", "nav_8h.html#aa9aacd23ad02eee9d32481775bf9dd31", null ],
    [ "NavCircleCountNoRewind", "nav_8h.html#a86794d1bb2e4a1386114d81522e14925", null ],
    [ "NavCircleQdr", "nav_8h.html#a0809ecd41f0b888de7f9754e75caf82d", null ],
    [ "NavCircleWaypoint", "nav_8h.html#a32b0c914606a5e49eb66833967deb640", null ],
    [ "NavCourseCloseTo", "nav_8h.html#a68ab3f04c3fcd85380c950db512fd97e", null ],
    [ "NavGotoWaypoint", "nav_8h.html#a4bf42a1b0d3b1c6c0faebcda4c531b8c", null ],
    [ "NavHeading", "nav_8h.html#ac90e1aa0615ba8f354b17674af4b12c8", null ],
    [ "NavKillThrottle", "nav_8h.html#ab4d16c33e2792978452a6b33e26df83c", null ],
    [ "NavQdrCloseTo", "nav_8h.html#a9f9ad9045eda753a7ea58359bd6a0581", null ],
    [ "NavSegment", "nav_8h.html#ace040d4295064ba78ba5c0339fb5fc9d", null ],
    [ "NavVerticalAltitudeMode", "nav_8h.html#ad8b75deb4546e944bed16b5b19455ff5", null ],
    [ "NavVertica

    [ "NavVerticalAutoThrottleMode", "nav_8h.html#af95d040500e23a05d6b095662fb18b59", null ],
    [ "NavVerticalClimbMode", "nav_8h.html#a2b27eca94ecb2d5b20d5af88bfdd4efe", null ],
    [ "NavVerticalThrottleMode", "nav_8h.html#a6f740d9f9313ba73fa7dcd9dd53c4440", null ],
    [ "NormCourse", "nav_8h.html#a397bca15d146964a80f93abd74763384", null ],
    [ "Oval", "nav_8h.html#a3e1c9983a7508c42235e2fead19db8b1", null ],
    [ "Square", "nav_8h.html#a5b322de63943d278a002687f820ac41c", null ],
    [ "oval_status", "nav_8h.html#a6b504fc3b9e256669f3d93dff3372bcf", [
      [ "OR12", "nav_8h.html#a6b504fc3b9e256669f3d93dff3372bcfa65e326a040572bfc5a61c079d8bfca25", null ],
      [ "OC2", "nav_8h.html#a6b504fc3b9e256669f3d93dff3372bcfa06833c96276f88424e14772ee87ac437", null ],
      [ "OR21", "nav_8h.html#a6b504fc3b9e256669f3d93dff3372bcfae5d99807c6a564838a7fed8239ef311b", null ],
      [ "OC1", "nav_8h.html#a6b504fc3b9e256669f3d93dff3372bcfa5f636214b976745986c087710a2dde17", null ]
    ] ],
    [

    [ "nav_approaching_xy", "nav_8h.html#a771b907350b836982ba4e31fd4bcbf4b", null ],
    [ "nav_circle_XY", "nav_8h.html#ad1b9d2e8da4a32477ca8bedc0bca86fe", null ],
    [ "nav_eight", "nav_8h.html#a083964068940390afc5e6621f015c19f", null ],
    [ "nav_eight_init", "nav_8h.html#ae9a835aee8c0898c8c5c65190d0b30bc", null ],
    [ "nav_home", "nav_8h.html#a069e6b8f68b2e117cbbe03f29e30a2e3", null ],
    [ "nav_init", "nav_8h.html#a64a3814d1672e69989f80701a0ff5749", null ],
    [ "nav_oval", "nav_8h.html#a5a4a7ec5d3cf1734dca01d87b3d1eef5", null ],
    [ "nav_oval_init", "nav_8h.html#aa602ef7f7d2e485655a7cc97a35b80c3", null ],
    [ "nav_periodic_task", "nav_8h.html#ad40d34bcd8520f64bb073fae4a08878e", null ],
    [ "nav_route_xy", "nav_8h.html#ab4247c9f3dc0417690e1404add032cbe", null ],
    [ "nav_without_gps", "nav_8h.html#ab746572e63956a2ad40674328a85b029", null ],
    [ "carrot_x", "nav_8h.html#a2bece6794aadefe30136dcd27b721f53", null ],
    [ "carrot_y", "nav_8h.html#a433f78b82598ad138070

    [ "cur_pos_x", "nav_8h.html#aa5c303fedda9fe2c787095dcd2456363", null ],
    [ "cur_pos_y", "nav_8h.html#a9db617e643c0032d53f3df6852a2a590", null ],
    [ "desired_x", "nav_8h.html#a88f523b73a294f7cb312604f212c21ab", null ],
    [ "desired_y", "nav_8h.html#ab7d49633159601ed2eaa65f23d612805", null ],
    [ "flight_altitude", "nav_8h.html#a1612ea0e1474e49b800cb3f497096523", null ],
    [ "fp_pitch", "nav_8h.html#a737a463b508f62286a0e62c5ed5648b4", null ],
    [ "horizontal_mode", "nav_8h.html#ad2a5195a657a7961bfb54e3c2da48a21", null ],
    [ "last_x", "nav_8h.html#ab2e97613bcf8e5721e639812c7a3469a", null ],
    [ "last_y", "nav_8h.html#a38c13a13ef3e5a3b6480f71bf244e668", null ],
    [ "nav_altitude", "nav_8h.html#a67342fe7d0a993249d4b4cd0e20821ce", null ],
    [ "nav_circle_radians", "nav_8h.html#ae53708a0be0d9df410749c81a8458d6f", null ],
    [ "nav_circle_radians_no_rewind", "nav_8h.html#aa12872e504eb6e366acf1b7d29708431", null ],
    [ "nav_circle_radius", "nav_8h.html#a3e545eca28

    [ "nav_circle_trigo_qdr", "nav_8h.html#aa10361692f333adcd1ccfd84ff1d0974", null ],
    [ "nav_circle_x", "nav_8h.html#ac1af27920d41a6dbc343fc1d7f55e08c", null ],
    [ "nav_circle_y", "nav_8h.html#a7b01191b794559f9d485b67c2be62c39", null ],
    [ "nav_climb", "nav_8h.html#a45139c6cf4dbda18870cf748337fbea7", null ],
    [ "nav_course", "nav_8h.html#af90efaefda837fe910e6c1d55ea0e949", null ],
    [ "nav_glide_pitch_trim", "nav_8h.html#a0ac0aec8bffae1d911b4f2fa5e2be72b", null ],
    [ "nav_ground_speed_pgain", "nav_8h.html#a4088688165aca8cabadaf45fb0b44643", null ],
    [ "nav_ground_speed_setpoint", "nav_8h.html#aeaf31d3e1ac7e38949cd2b45ea2ce21e", null ],
    [ "nav_in_circle", "nav_8h.html#a3d597a1b316fdba0db5701a03ad56c7b", null ],
    [ "nav_in_segment", "nav_8h.html#a70c77743e83862b67b86056fcc80a8ec", null ],
    [ "nav_mode", "nav_8h.html#a100095dcf201264924107b608a3ed5cd", null ],
    [ "nav_oval_count", "nav_8h.html#a3f8eab6736191ca3d1cb16738cbcf97f", null ],
    [ "nav_pitch

    [ "nav_radius", "nav_8h.html#a4e73a18879f679277a72ef00250e359e", null ],
    [ "nav_segment_x_1", "nav_8h.html#a8b5c072e3f61f9025578e3e6283ffcb1", null ],
    [ "nav_segment_x_2", "nav_8h.html#a123af850aca7872d4ae1f0fd561fc302", null ],
    [ "nav_segment_y_1", "nav_8h.html#aa04e457095198f649868d28f72969029", null ],
    [ "nav_segment_y_2", "nav_8h.html#a2992c5b1e4da4284068a225e451877a4", null ],
    [ "nav_shift", "nav_8h.html#aae62d3a760ee0f535ee7bf9131df6d9c", null ],
    [ "nav_survey_active", "nav_8h.html#a68393cb43ffff9bfff53cce34d108e38", null ],
    [ "nav_survey_east", "nav_8h.html#a1709471dbc0af61015c59e136100e118", null ],
    [ "nav_survey_north", "nav_8h.html#a4bd5ccc05012fbe9ba362b941aea7294", null ],
    [ "nav_survey_shift", "nav_8h.html#ad07af37c66417d0eac97740c696ace0d", null ],
    [ "nav_survey_south", "nav_8h.html#a5bd732618e35c5a855ef4e0549f733f0", null ],
    [ "nav_survey_west", "nav_8h.html#aeb19008e34a80086cfcb00ae5ae32fdd", null ],
    [ "nav_throttle_s
var config = require("../config")();
var factory = function(providerType, serviceName) {
    var service = null;
    switch (providerType) {
        case "mongo":
            service = require([".", "mongo", serviceName + "Service"].join("/"))();
            break;
        case "remote":
            service = require([".", "remote", serviceName + "Service"].join("/"))();
            break;
        default:
            service = require([".", providerType, serviceName + "Service"].join("/"))();
            break;
    }
    return service;
};
module.exports = {
    /**
     * instance specificed data provider type, such xml, mongo
     * @param  {string} providerType e.g. xml, mongo, mysql
     * @param  {string} serviceName  the service name, e.g.  product, user
     * @return {[type]}              [description]
     */
    get: function(providerType, serviceName) {
        if (arguments.length == 1) {
            serviceName = providerType;
            providerType = config.defaultData
var dispatch = require('pico-flux').dispatch;
var request = require('superagent');
var GifStore = require('gifbin/gif.store.js');
module.exports = {
	login  : function(){
		dispatch('LOGIN');
	},
	logout : function(){
		dispatch('LOGOUT');
	},
	saveGif : function(gifData, callback){
		dispatch('SET_PENDING');
		request.post('/api/gifs')
			.set('Accept', 'application/json')
			.send(gifData)
			.end(function(err, res){
				if(err){
					dispatch('SET_ERRORS', err);
					return;
				}
				dispatch('SET_FINISHED');
				dispatch('UPDATE_GIF', res);
				callback && callback(res)
			})
	},
	updateGif : function(gifData, callback){
		dispatch('SET_PENDING');
		request.put('/api/gifs/' + gifData.id)
			.set('Accept', 'application/json')
			.send(gifData)
			.end(function(err, res){
				if(err){
					dispatch('SET_ERRORS', err);
					return;
				}
				dispatch('SET_FINISHED');
				dispatch('UPDATE_GIF', res);
				callback && callback(res)
			})
	},
	deleteGif : function(gifId, callback){
		dis
var utils = require('./utils');
var util = require('util');
var log = utils.replaceObject(console, 'log', function (message, object) {
    log(formatMessage(message, object, 'INFO'));
});
var error = utils.replaceObject(console, 'error', function (message, object) {
    error(formatMessage(message, object, 'ERROR'));
});
var debug = utils.replaceObject(console, 'debug', function (message, object) {
    if (!debug) {
        debug = log;
    }
    debug(formatMessage(message, object, 'DEBUG'));
});
function formatMessage(message, object, type) {
    if (!message) {
        message = '';
    } else if (typeof message !== 'string') {
        object = message;
        message = '';
    }
    if (object) {
        if (message !== '') {
            message += '\n';
        }
        if (object instanceof Error) {
            message += object.stack;
        } else {
            message += JSON.stringify(object);
        }
    }
    return '[' + utils.timestamp() + '][' + type + '] ' + messag
'use strict';
const when = require('when');
module.exports = ($, mixpanel, config) => {
  const HTTPService = require('./HTTPService')($, when, config);
  const SessionService = require('./SessionService')(HTTPService, when, config);
  const APIService = require('./APIService')($, HTTPService, SessionService);
  const MixpanelService = require('./MixpanelService')(mixpanel);
  const MobileService = require('./MobileService')();
  const SecureService = require('./SecureService')(mixpanel);
  const StripeService = require('./StripeService')($, APIService, SecureService, when, config);
  const URLService = require('./URLService')();
  const UserService = require('./UserService')(APIService, when, config);
  return {
    APIService: APIService,
    HTTPService: HTTPService,
    MixpanelService: MixpanelService,
    MobileService: MobileService,
    SessionService: SessionService,
    StripeService: StripeService,
    SecureService: SecureService,
    URLService: URLService,
    UserService
var middleware  = require('../middleware').middleware,
    api         = require('../api');
module.exports = function (server) {
    /* TODO: auth should be public auth not user auth */
    server.get('/ghost/api/v0.1/posts', middleware.authAPI, middleware.disableCachedResult, api.requestHandler(api.posts.browse));
    server.post('/ghost/api/v0.1/posts', middleware.authAPI, middleware.disableCachedResult, api.requestHandler(api.posts.add));
    server.get('/ghost/api/v0.1/posts/:id', middleware.authAPI, middleware.disableCachedResult, api.requestHandler(api.posts.read));
    server.put('/ghost/api/v0.1/posts/:id', middleware.authAPI, middleware.disableCachedResult, api.requestHandler(api.posts.edit));
    server.del('/ghost/api/v0.1/posts/:id', middleware.authAPI, middleware.disableCachedResult, api.requestHandler(api.posts.destroy));
    server.get('/ghost/api/v0.1/settings/', middleware.authAPI, middleware.disableCachedResult, api.requestHandler(api.settings.browse));
    server.get

    server.put('/ghost/api/v0.1/settings/', middleware.authAPI, middleware.disableCachedResult, api.requestHandler(api.settings.edit));
    server.get('/ghost/api/v0.1/users/', middleware.authAPI, middleware.disableCachedResult, api.requestHandler(api.users.browse));
    server.get('/ghost/api/v0.1/users/:id/', middleware.authAPI, middleware.disableCachedResult, api.requestHandler(api.users.read));
    server.put('/ghost/api/v0.1/users/:id/', middleware.authAPI, middleware.disableCachedResult, api.requestHandler(api.users.edit));
    server.get('/ghost/api/v0.1/tags/', middleware.authAPI, middleware.disableCachedResult, api.requestHandler(api.tags.all));
    server.del('/ghost/api/v0.1/notifications/:id', middleware.authAPI, middleware.disableCachedResult, api.requestHandler(api.notifications.destroy));
    server.post('/ghost/api/v0.1/notifications/', middleware.authAPI, middleware.disableCachedResult, api.requestHandler(api.notifications.add));
    server.get('/ghost/api/v0.1/db/', 
define([
	"jquery", "underscore", "backbone", "mvc", 
	"views/ToolbarView"
], function($, _, Backbone, MVC, ToolbarView) {
	var ToolbarController = AppBuilder.Controller.extend({
		
		initialize: function(node, parentController) {
			AppBuilder.Controller.prototype.initialize.call(this, node, parentController);
		},
		
		showView: function() {
			this.view = new ToolbarView();
			this.view.pass("onNewProject", this.parentController.projectController);
			this.view.pass("onOpenProject", this.parentController.projectController);
			this.view.pass("onSaveProject", this.parentController.projectController);
			this.view.pass("onCloseProject", this.parentController.projectController);
			this.view.pass("onRemoveProject", this.parentController.projectController);
			this.view.pass("onSetupProject", this.parentController.projectController);
			this.view.pass("onNewPage", this.parentController.projectController);
			
			this.view.pass("onUndo", this.parentController.projectController);
			this.
var class_message_dispatch =
    [ "dispatch_s", "struct_message_dispatch_1_1dispatch__s.html", "struct_message_dispatch_1_1dispatch__s" ],
    [ "record_s", "struct_message_dispatch_1_1record__s.html", "struct_message_dispatch_1_1record__s" ],
    [ "MessageDispatch", "class_message_dispatch.html#a1f19402564c069c702642added0d69fe", null ],
    [ "~MessageDispatch", "class_message_dispatch.html#adcceed2cb2aa3cbf006da52fdb327040", null ],
    [ "clear", "class_message_dispatch.html#ae72913b98b8fbc4a8bd5ed134e493cb3", null ],
    [ "ser", "class_message_dispatch.html#a07471718b33b9c79608ee81373624d73", null ],
    [ "size", "class_message_dispatch.html#a4e6b9cd03465be036c1b925441abd820", null ],
    [ "unpack", "class_message_dispatch.html#a62dcdeb255f3f8f7755f57c62cbea2eb", null ],
    [ "dispatchStruct", "class_message_dispatch.html#ad0d1a2666a55d85141bddee9872544da", null ],
    [ "pidsids", "class_message_dispatch.html#a6899b17ef178c7d2b3fb6625634791ab", null ],
    [ "records", "cla
define(["jquery"], function($) {
  var MessageController = (function(id){
    var idDiv = id;
    var message = "";
    var messageClases = ["alert-success","alert-info","alert-warning","alert-danger","alert"];
    var checkId = function(){
      if(idDiv === "" || idDiv == null ){
        return false;
      }else{
        return true; 
      }
    }
    var printSucessMessage = function(message){
      printMessage(messageClases[0],message);
    }
    var printInfoMessage = function(message){
      printMessage(messageClases[1],message);
    }
    var printWarningMessage = function(message){
      printMessage(messageClases[2],message);
    }
    var printDangerMessage = function(message){
      printMessage(messageClases[3],message);
    }
    var printMessage = function(type,message){
      if(checkId()){
        removeClasses();
        addClass(type);
        addMessage(message);
      }
    }
    var removeClasses = function(){
      $.each(messageClases, function( index, value 
'use strict';
tatool
  .controller('numberKeepTrackCtrl', [ '$scope', 'service',
    function ($scope, service) {
    $scope.gridService = service.gridService;
    $scope.inputService = service.inputService;
    $scope.start = function() {
      service.setPhase('ENCODING');
      service.gridService.clear().refresh();
      service.gridService.resize(1,4).redraw();
      encodingPhase();
    };
    function encodingPhase() {
      service.setPhase('UPDATING');
      service.createStimulus();
      service.setEncodingStimuli();
      service.gridService.refresh();
      service.gridService.show();
      service.timerDisplayEncoding.start(encodingTimeUp);
    }
    function encodingTimeUp() {
      service.gridService.clear().refresh();
      service.gridService.resize(1,1).redraw();
      service.timerIntervalEncoding.start(updatingPhase);
    }
    function updatingPhase() {
      service.createStimulus();
      if (parseInt(service.stimulus['phase']) === 1 && parseInt(service.stimulu

        service.setPhase('RECALL');
        recallPhase();
      } else {
        service.setUpdatingStimuli();
        service.gridService.refresh();
        service.timerDisplayUpdating.start(updatingTimeUp);
      }
    }
    function updatingTimeUp() {
      service.gridService.clear().refresh();
      if (service.getPhase() === 'UPDATING') {
        service.timerIntervalUpdating.start(updatingPhase);
      } else {
        service.timerIntervalUpdating.start(recallPhase);
      }
    }
    function recallPhase() {
      service.createStimulus();
      service.setRecallStimuli();
      service.gridService.refresh();
      service.inputService.enable();
      service.startTime = service.gridService.show();
    }
    $scope.inputAction = function(input, timing, event) {
      service.inputService.disable();
      service.gridService.clear().refresh();
      service.processResponse(input.givenResponse, timing).then(nextStep);
    };
    function nextStep() {
      if (service.getPhas
Ext.define("PublicChat.desktop.controller.handlers.CanPrintMessage", function () {
    var getMessage = function (message) {
        message = Ext.create("PublicChat.common.model.Message", {
            username:message.username,
            message:message.message
        });
        return message;
    };
    return {
        printMessage:function (message) {
            var dataMessage = message.data,
                messageGrid;
            if (dataMessage.message !== undefined && dataMessage.username) {
                messageGrid = this.getMessageGrid();
                messageGrid.getStore().add(getMessage(message.data));
                messageGrid.scrollByDeltaY(messageGrid.getEl().getHeight());
            }
        },
        printPrivateMessage:function (message) {
            var dataMessage,
                imMessage,
                username;
            dataMessage = message.data;
            imMessage = dataMessage.message;
            username = dataMessage.username;

/**
 * Created by Mazhar on 10/2/2014.
 */
/*
 *  Cms structure url
 */
cms_url = new Array();
cms_url['get_cms_url'] = host + 'selfcare-panel/';
logoutUrl = host + 'cmsPanel/';
/*CONFIGURATION */
service_url = new Array();
service_url['get_category_url'] = service_host + 'CMSWebService/getCMSCategoryList.php';
service_url['new_category_url'] = service_host + 'CMSWebService/newCMSCategory.php';
service_url['delete_category_by_id_url'] = service_host + 'CMSWebService/deleteCMSCategory.php';
service_url['get_content_url'] = service_host + 'CMSWebService/getCMSContentList.php';
service_url['new_content_url'] = service_host + 'CMSWebService/newCMSContent.php';
service_url['delete_content_url'] = service_host + 'CMSWebService/deleteCMSContent.php';
service_url['get_header_footer'] = service_host + 'CMSWebService/getHeaderFooter.php';
service_url['edit_header_footer'] = service_host + 'CMSWebService/editHeaderFooter.php';
service_url['login'] = service_host + 'CMSWebService/login.php';
servi
"use strict";
app.config(['crudRoutesProvider', function (crudRoutesProvider) {
        crudRoutesProvider.addAllRoutes({
            entity: "Centro",
            expand: "direccion.municipio,direccion.municipio.provincia"
        });
    }]);
app.controller("CentroSearchController", ['$scope', 'genericControllerCrudList', 'controllerParams', function ($scope, genericControllerCrudList, controllerParams) {
        genericControllerCrudList.extendScope($scope, controllerParams);
        $scope.page.pageSize = 20;
        $scope.filters.$ne.idCentro=-1; 
        $scope.search();
    }]);
app.controller("CentroNewEditController", ['$scope', 'genericControllerCrudDetail', 'controllerParams', function ($scope, genericControllerCrudDetail, controllerParams) {
        genericControllerCrudDetail.extendScope($scope, controllerParams);
    }]);
app.controller("CentroViewController", ['$scope', 'genericControllerCrudDetail', 'controllerParams', function ($scope, genericControllerCrudDetail, con
var searchData=
  ['delay_5ftime',['delay_time',['../dispatch_8h.html#a3ca83343e7d0b2a5c87e67e7a37d1580',1,'dispatch.h']]],
  ['deletetask',['DeleteTask',['../dispatch_8h.html#af9614f9097c425adde3c7154c962173a',1,'DeleteTask(uint8_t index):&#160;dispatch.c'],['../dispatch_8c.html#a44e5d840f344e39cc9676a13e4270669',1,'DeleteTask(uint8_t j):&#160;dispatch.c']]],
  ['digit',['digit',['../indicator_8c.html#a0555fd5164ca009c356fc654f58dd6a6',1,'indicator.c']]],
  ['dispatch_2ec',['dispatch.c',['../dispatch_8c.html',1,'']]],
  ['dispatch_2eh',['dispatch.h',['../dispatch_8h.html',1,'']]],
  ['dispatchtask',['DispatchTask',['../dispatch_8h.html#aa46f19a6d870d46a2749a8c623a7ef68',1,'DispatchTask(void):&#160;dispatch.c'],['../dispatch_8c.html#aa46f19a6d870d46a2749a8c623a7ef68',1,'DispatchTask(void):&#160;dispatch.c']]],
  ['doublecountdown',['doubleCountdown',['../timer_8h.html#a9a336e2a30206a895d000a9d07775b4b',1,'doubleCountdown():&#160;timer.c'],['../timer_8c.html#a9a336e2a30206a895d000a9d077
/**
 * @apiDefineStructure ApiAppStructure
 *
 * @apiParam {String} appName Name for API App. Apps that are clients of API such as: CSM, National and so on.
 * @apiParam {String} authKey This key must be put in headers when accessing to API's secured methods such as creating Provider, Client and so on. The way it should exists in header: header('authorization', 'Basic {authKey}') 
 * @apiParam {Boolean} [sysInfo_active=true] true is App should have access to API. false otherwise.
 */
/**
 * @api {post} /api/apiapps Create new API App
 * @apiName Create
 * @apiGroup ApiApps
 * @apiVersion 0.1.0
 * @apiDescription Creates new API App record in database. ApiApp's json must be send into request.body
 *
 * @apiStructure ApiAppStructure
 */
/**
 * @api {put} /api/apiapps/:id Updates a API App
 * @apiName Update
 * @apiGroup ApiApps
 * @apiVersion 0.1.0
 * @apiDescription Updates ApiApp's record in database. Authkey update is achieved by this method.
 *
 * @apiParam {String} id Id of user tha

 *
 * @apiExample Example of update of password: 
 *      BODY: {
 *              authKey: "test2"
 *      }
 *      response:
 *      {
 *          "success": true,
 *          "message": "Doc with id: 52360848e12d40d723000009 has successfully updated.",
 *          "result": {
 *              "__v": 0,
 *              "_id": "52360848e12d40d723000009",
 *              "appName": "CSM",
 *              "authKey": "ca10587c0232623281bb395c48c91e91",
 *              "sysInfo": {
 *                  "active": true
 *              }
 *          }
 *      }
 */
/**
 * @api {get} /api/apiapps/:id Returnes single API App
 * @apiName GetSingle
 * @apiGroup ApiApps
 * @apiVersion 0.1.0
 * @apiDescription Returnes single API App
 *
 * @apiParam {String} id Id of API App that will be returned.
 */
/**
 * @api {get} /api/apiapps Search
 * @apiName Search
 * @apiGroup ApiApps
 * @apiVersion 0.1.0
 * @apiDescription Get list of active API Apps.
 *  
 */
/**
 * @api {delete} /api/apiapps/:id Delete
/** SpagoBI, the Open Source Business Intelligence suite
 * Copyright (C) 2012 Engineering Ingegneria Informatica S.p.A. - SpagoBI Competency Center
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0, without the "Incompatible With Secondary Licenses" notice.
/**
 *
 * A service proxy object
 *
 *
 *  @author
 *  Andrea Gioia (andrea.gioia@eng.it)
 */
Ext.define('Sbi.service.ServiceReg', {
	extend: 'Ext.util.Observable'
	, config: {
		serviceBaseConfs: {}
		, services: {}
	}
	, constructor : function(config) {
		this.initConfig(config);
		this.callParent();
	}
	, addServiceBaseConf: function(name, baseConf) {
		this.serviceBaseConfs[name] = baseConf;
	}
	, registerService: function(serviceName, serviceConf, serviceBaseConfs) {
		if(Sbi.isValorized(serviceBaseConfs)) {
			if(Ext.isString(serviceBaseConfs)) {
				serviceBaseConfs = this.serviceBaseConfs[serviceBaseConfs];
				if(Sbi.isValorized(serviceBaseConfs) == false) {
					Sbi.warn("[ServiceReg.r

				}
			}
		}
		var conf = Ext.apply({}, serviceConf || {}, serviceBaseConfs || {});
		var service = Ext.create('Sbi.service.RestService', conf);
		this.services[serviceName] = service;
		return service;
	}
	, getService: function(serviceName) {
		return this.services[serviceName];
	}
	, getServiceUrl: function(serviceName, options) {
		var serviceUrl = null;
		var service = this.services[serviceName];
		if(service) {
			serviceUrl = service.getServiceUrl(options);
		} else {
			Sbi.warn("[ServiceReg.callService]: service [" + serviceName + "] does not exist. Available service are [" + Sbi.toSource(this.services, true) + "]");
		}
		return serviceUrl;
	}
	, callService: function(serviceName, options) {
		var serviceCalled = true;
		var service = this.getService(serviceName);
		if(service) {
			service.doRequest(options);
		} else {
			serviceCalled = false;
			Sbi.warn("[ServiceReg.callService]: service [" + serviceName + "] does not exist. Available service are [" + Sbi.toSource(thi
/* ==============================================
= 				ON DOM READY 					=
================================================*/
$(function() {
    $('.toggle-nav').click(function(event) {
        toggleNav();
    });
    $(document).keyup(function(event) {
    	if(event.keyCode == 27) {
    		if ($('#site-wrapper').hasClass('show-nav')) {
    			toggleNav();
    		};
    	}
    });
});
/* ==============================================
= 				CUSTOM FUNCTIONS				=
================================================*/
function toggleNav() {
	if($('#site-wrapper').hasClass('show-nav')) {
		$('#site-wrapper').removeClass('show-nav');
	} else {
		$('#site-wrapper').addClass('show-nav');		
	}
function toggleNavOld() {
    if ($('#site-wrapper').hasClass('show-nav')) {
        $('#site-wrapper').css('margin-right', '0px');
        $('#site-wrapper').removeClass('show-nav');
    } else {  
        $('#site-wrapper').css('margin-right', '-300px');
        $('#site-wrapper').addClass('show-nav');
   
QUnit.module("Ember.View - controller property");
QUnit.test("controller property should be inherited from nearest ancestor with controller", function() {
  var grandparent = ContainerView.create();
  var parent = ContainerView.create();
  var child = ContainerView.create();
  var grandchild = ContainerView.create();
  var grandparentController = {};
  var parentController = {};
  run(function() {
    grandparent.set('controller', grandparentController);
    parent.set('controller', parentController);
    grandparent.pushObject(parent);
    parent.pushObject(child);
  });
  strictEqual(grandparent.get('controller'), grandparentController);
  strictEqual(parent.get('controller'), parentController);
  strictEqual(child.get('controller'), parentController);
  strictEqual(grandchild.get('controller'), null);
  run(function() {
    child.pushObject(grandchild);
  });
  strictEqual(grandchild.get('controller'), parentController);
  var newController = {};
  run(function() {
    parent.set('c
export default class ModalEditServiceController {
    /* @ngInject */
    constructor(modalsService, serviceHelperFactory, $log, serviceService, $state, $stateParams, userService) {
        this._modalsService = modalsService;
        this._serviceHelperFactory = serviceHelperFactory;
        this._$log = $log;
        this._serviceService = serviceService;
        this._userService = userService;
        this._$state = $state;
        this.page = parseInt($stateParams.page, 10) || 1;
    }
    set service(service) {
        this._service = service;
        this.config = this.createReadForm();
    }
    get service() {
        return this._service;
    }
    handleAction({ name, data }) {
        if (this[name]) {
            return this[name](data);
        }
        this._$log.error(`Unhandled action: ${name}`);
    }
    doctors() {
        this._$state.transitionTo('app.doctor.service', { serviceId: this.service.id });
        this._modalsService.close();
    }
    handleSubmit({ o

        return this._serviceService.put(obj)
            .then((services) => this._serviceService.getList(this.page))
            .then((services) => {
                this._serviceService.set(services);
                this._modalsService.close();
            })
            .catch(() => null);
    }
    edit() {
        this.config = this._serviceHelperFactory.createSendForm(this._service);
    }
    remove() {
        this._modalsService.openConfirm('Подтвердить удаление', () => {
            return this._serviceService.remove(this._service.id)
                .then((service) => this._serviceService.getList(this.page))
                .then((services) => {
                    this._serviceService.services = services;
                    this._modalsService.close();
                });
        });
    }
    createReadForm() {
        return this._serviceHelperFactory.createReadForm(this._service, {
            canWrite: this.canWrite
        });
    }
    get canWrite() {
        con
var common__nav_8h =
    [ "point", "common__nav_8h.html#structpoint", [
      [ "a", "common__nav_8h.html#a7bb43530a17e55615fa418ff9f914991", null ],
      [ "x", "common__nav_8h.html#a8293fd2de3ce739deb6d53691fd21fcf", null ],
      [ "y", "common__nav_8h.html#a616ad85a2096d1566f5971666bbc3b3f", null ]
    ] ],
    [ "Height", "common__nav_8h.html#af637c15f691fc23f50337eb194758ec7", null ],
    [ "NavSetAltitudeReferenceHere", "common__nav_8h.html#a82da50e89ef6cb752d1554e61531333d", null ],
    [ "NavSetGroundReferenceHere", "common__nav_8h.html#ac51da095b4a1038ac7be8d3be9b9573e", null ],
    [ "NavSetWaypointHere", "common__nav_8h.html#af6eb4097676a1a2eaea357f56751e669", null ],
    [ "NavSetWaypointPosAndAltHere", "common__nav_8h.html#a14ad4ca3c686b25f5ef136245a8b693e", null ],
    [ "WaypointAlt", "common__nav_8h.html#a2de6e5b93a3552facfa675f1bccd8db2", null ],
    [ "WaypointX", "common__nav_8h.html#a2d51bcd8e90e2dea91009f895a452a22", null ],
    [ "WaypointY", "common__nav_8h.ht

    [ "common_nav_periodic_task_4Hz", "common__nav_8h.html#aeee253823276823c6ea935330d106280", null ],
    [ "compute_dist2_to_home", "common__nav_8h.html#a4603515f41786b54ea9383a65a9f249e", null ],
    [ "nav_move_waypoint", "common__nav_8h.html#a442b6321ba6cb77bcae6a05b14bb132b", null ],
    [ "nav_reset_alt", "common__nav_8h.html#ad2cf49c6186e482ca67ec67d17d9107b", null ],
    [ "nav_reset_reference", "common__nav_8h.html#a9be99612e24c6ba96a13c2c1d657ee99", null ],
    [ "nav_reset_utm_zone", "common__nav_8h.html#a3ef010d83e7da90d33327f0e69b9a169", null ],
    [ "nav_update_waypoints_alt", "common__nav_8h.html#a34dae3b6ee415907433b0d92cfa46eac", null ],
    [ "dist2_to_home", "common__nav_8h.html#aaa0755e7078e30953f14178d3dcd90ee", null ],
    [ "dist2_to_wp", "common__nav_8h.html#a1ea7c4cd1046a57c3444b89a1dce6250", null ],
    [ "ground_alt", "common__nav_8h.html#a7a9fcbdc46c61d7a15eafcb443211104", null ],
    [ "max_dist_from_home", "common__nav_8h.html#a1e29c2884fac341d819ffcc66
define(function(require, exports) {
    var $ = require('jquery');
    var $header = $("#header");
    var $nav = $("#nav");
    var $topNav = $("#top-nav");
    $nav.on("click", "dt", function() {
        var $this = $(this);
        $this.addClass('nav-current').siblings('dt').removeClass('nav-current');
        $this.next('dd').show().siblings('dd').hide();
    });
    $nav.on("click", "a", function() {
        $nav.find('.cur').removeClass('cur');
        $topNav.find('.current-nav').removeClass('current-nav');
        $(this).addClass('cur');
    });
    /*var windowHeight = $(window).height();
     var bodyHeight = $(document).height();
     var headerHeight = $header.height();
     if ( bodyHeight >= windowHeight ) {
     $nav.css("min-height", bodyHeight-headerHeight);
     } else {
     $nav.css("min-height", windowHeight-headerHeight);
     }*/
    $topNav.on("click", "a", function() {
        $topNav.find('.current-nav').removeClass('current-nav');
        $nav.find('.nav-cu
var searchData=
  ['debug',['debug',['../class_log_service.html#a49c41e3a2b535b938c7e14c000d5b472',1,'LogService']]],
  ['decreasequantity',['decreaseQuantity',['../class_cart_service.html#a52b92a1e9621ade18ae387b0f8a83657',1,'CartService']]],
  ['deductscore',['deductScore',['../class_score_service.html#a2899145623ded43fd85cbfd734e53f6d',1,'ScoreService']]],
  ['delete',['delete',['../class_rest_client.html#aad52c04b3af8a7d3232013daa739e053',1,'RestClient']]],
  ['deleteallavatars',['deleteAllAvatars',['../class_avatar_service.html#aea18c8803a12507dd4d700eabdd01956',1,'AvatarService']]],
  ['deleteallpreferences',['deleteAllPreferences',['../class_recommender_service.html#a468ae67c8db20494d0197d4887c5668a',1,'RecommenderService']]],
  ['deleteavatarbyname',['deleteAvatarByName',['../class_avatar_service.html#a4dc0b42993128ca0c28f9f3178e81b58',1,'AvatarService']]],
  ['deletechannel',['deleteChannel',['../class_push_notification_service.html#a7c05d342b993f465b4f0b294c93b0ca8',1,'PushNo
(function () {
    'use strict';
    angular.module('public')
        .service('ProfileService', ProfileService);
    ProfileService.$inject = ['MenuService'];
    function ProfileService(MenuService) {
        var profileService = this;
        profileService.profile = {};
        profileService.profile_saved = false;
        profileService.getProfile = function () {
            return profileService.profile;
        };
        profileService.saveProfile = function (first_name, last_name, email, phone, favorite_dish) {
            MenuService.getItem(favorite_dish).then(function (response) {
                profileService.profile.first_name = first_name;
                profileService.profile.last_name = last_name;
                profileService.profile.email = email;
                profileService.profile.phone = phone;
                profileService.profile.favorite_dish = response;
                console.log(response);
                profileService.profile_saved = true;
         
(function() {
  "use strict";
  var closeNav, insideNav, navBtn, navLinks, navTop, openNav, toggleNav, waitToCloseNav;
  navTop = $('.nav--top');
  navBtn = $('.nav-btn');
  navLinks = $('.nav--top a');
  insideNav = false;
  openNav = function() {
    navTop.setAttribute('data-state', 'expanded');
    return navBtn.setAttribute('data-state', 'active');
  };
  closeNav = function() {
    navTop.setAttribute('data-state', 'collapsed');
    return navBtn.setAttribute('data-state', 'inactive');
  };
  toggleNav = function() {
    if (navTop.getAttribute('data-state') === 'expanded') {
      return closeNav();
    } else {
      return openNav();
    }
  };
  waitToCloseNav = function() {
    return setTimeout(function() {
      if (!insideNav) {
        return closeNav();
      }
    }, 100);
  };
  navBtn.on('click', function(e) {
    e.preventDefault();
    return toggleNav();
  });
  navBtn.on('focus', function(e) {
    insideNav = true;
    return openNav();
  });
  navBtn.on('blur', 
travi.test.testCase('SlideNavTests', (function () {
    'use strict';
    return {
        setUp: function () {
            $('body').append('<nav id="primaryNav"><ul style="display: none">' +
                '<li><ul id="innerList" style="display: none"></ul></li>' +
                '</ul></nav>');
            this.$nav = $('#primaryNav');
            this.$nav.slideNav();
        },
        'test "Navigation" added': function () {
            var $navToggle = this.$nav.find('.navToggle');
            assertEquals(1, $navToggle.length);
            assertEquals('Navigation', $navToggle.text());
            assertEquals(1, $navToggle.find('.ui-icon.ui-icon-triangle-1-s').length);
        },
        'test visibility of menu': function () {
            var $navToggle = this.$nav.find('.navToggle'),
                $list = this.$nav.find('ul');
            assertFalse($list.is(':visible'));
            $navToggle.click();
            assertTrue($list.is(':visible'));
            $navToggl
var namespace_controller =
    [ "ConnectionDialog", "class_controller_1_1_connection_dialog.html", "class_controller_1_1_connection_dialog" ],
    [ "Control", "class_controller_1_1_control.html", "class_controller_1_1_control" ],
    [ "Debug", "class_controller_1_1_debug.html", "class_controller_1_1_debug" ],
    [ "DebugTimer", "class_controller_1_1_debug_timer.html", "class_controller_1_1_debug_timer" ],
    [ "DebugTrace", "class_controller_1_1_debug_trace.html", "class_controller_1_1_debug_trace" ],
    [ "Drone", "class_controller_1_1_drone.html", "class_controller_1_1_drone" ],
    [ "DroneCommandList", "class_controller_1_1_drone_command_list.html", "class_controller_1_1_drone_command_list" ],
    [ "HeightMap", "class_controller_1_1_height_map.html", "class_controller_1_1_height_map" ],
    [ "Image", "class_controller_1_1_image.html", "class_controller_1_1_image" ],
    [ "ImageViewer", "class_controller_1_1_image_viewer.html", "class_controller_1_1_image_viewer" ],
    [ "

    [ "Map", "class_controller_1_1_map.html", "class_controller_1_1_map" ],
    [ "MapCell", "struct_controller_1_1_map_cell.html", "struct_controller_1_1_map_cell" ],
    [ "Message", "struct_controller_1_1_message.html", "struct_controller_1_1_message" ],
    [ "Navigation", "class_controller_1_1_navigation.html", "class_controller_1_1_navigation" ],
    [ "NavigationBAK", "class_controller_1_1_navigation_b_a_k.html", "class_controller_1_1_navigation_b_a_k" ],
    [ "Path", "class_controller_1_1_path.html", "class_controller_1_1_path" ],
    [ "PathWaypoint", "class_controller_1_1_path_waypoint.html", "class_controller_1_1_path_waypoint" ],
    [ "PointCloud", "class_controller_1_1_point_cloud.html", "class_controller_1_1_point_cloud" ],
    [ "RangeImage", "class_controller_1_1_range_image.html", "class_controller_1_1_range_image" ],
    [ "RangeImageViewer", "class_controller_1_1_range_image_viewer.html", "class_controller_1_1_range_image_viewer" ],
    [ "Robot", "class_controlle
/**
 * 接口
 */
define(function(require, exports, module){
    var version = "/x5/";
    var API = {
        
        jsonp: false,
        domain: !!(MOGU.isProduction)?version:"/Data"+version,
        interface: {
            WELCOME_API: 'index/index',
            DAPEI_API: 'photo/dapei',
            SHAIHUO_API: 'photo/look',
            SEARCH_AIP: 'search/',
            TUANTAOBAO_API: 'tuan/list',
            TUANDETAIL_API: 'tuan/detail',
            TUANCOUPON_API: 'tuan/getcoupon',
            COMMENTARY_API_LIST:"twitter/commentaryList",
            COMMENTARY_API: 'twitter/commentary',
            ADDFAV_API: 'twitter/addfav',
            DELFAV_API: 'twitter/delfav',
            SINGLE_API: 'twitter/single',
            GETPROFILE_API: 'user/getprofile',
            FANS_API: 'home/fans',
            FOLLOW_API: 'home/follow',
            COVER_API: 'home/talk',
            FAV_API: 'home/fav',
            TIMELINE_API: 'home/timeline',
            FRIEND_API: 'search/frien
'use strict';
angular.module('demoApp').controller('Annotation-Dependency-Controller', [
  '$scope',
  'ServiceD',
  function ($scope, pippo) {
    $scope.hello = pippo.getHello();
    
    $scope.controller = ".controller('Annotation-Dependency-Controller', ['$scope','ServiceD', function ($scope, service) {}])";
    
  }
]).controller('Implicit-Dependency-Controller', function ($scope, ServiceD) {
  $scope.hello = ServiceD.getHello();
  $scope.controller = ".controller('Implicit-Dependency-Controller', function ($scope, ServiceD) {})";
});
var injectorController = function ($scope, pippo) {
  $scope.hello = pippo.getHello();
  $scope.controller = "var injectorController = function ($scope, sercvice) {};injectorController.$inject = ['$scope','ServiceD'];angular.module('demoApp').controller('Injector-Dependency-Controller', injectorController);";
};
injectorController.$inject = [
  '$scope',
  'ServiceD'
];
angular.module('demoApp').controller('Injector-Dependency-Controller', injectorC
var dir_bbd6674d859f4cefaacb708974cac240 =
    [ "CollisionController.cpp", "_collision_controller_8cpp.html", null ],
    [ "CollisionController.h", "_collision_controller_8h.html", [
      [ "CollisionController", "class_collision_controller.html", "class_collision_controller" ]
    ] ],
    [ "EventController.cpp", "_event_controller_8cpp.html", null ],
    [ "EventController.h", "_event_controller_8h.html", [
      [ "EventController", "class_event_controller.html", "class_event_controller" ]
    ] ],
    [ "GameController.cpp", "_game_controller_8cpp.html", null ],
    [ "GameController.h", "_game_controller_8h.html", [
      [ "GameController", "class_game_controller.html", "class_game_controller" ]
    ] ],
    [ "MotionController.cpp", "_motion_controller_8cpp.html", null ],
    [ "MotionController.h", "_motion_controller_8h.html", [
      [ "MotionController", "class_motion_controller.html", "class_motion_controller" ]
    ] ],
    [ "ScreenController.cpp", "_screen_controller
define([
    'web/controller/applicationController',
    'web/controller/signInController',
    'web/controller/userController',
    'web/controller/dashboardController',
    'web/model/applicationModel',
    'web/model/signInModel',
    'web/model/userModel',
    'web/model/dashboardModel'
], function(
    applicationController,
    signInController,
    userController,
    dashboardController,
    applicationModel,
    signInModel,
    userModel,
    dashboardModel
) {
    var controllersMap = {};
    function router(name) {
        return controllersMap[name];
    }
    function bindController(name, controllerClass, modelClass) {
        modelClass.prototype = {
            controller: function() {
                return controllersMap[name];
            }
        };
        var model = new modelClass();
        controllerClass.prototype = {
            model: function() {
                return model;
            },
            router: router
        };
        controllersMap[name]
var TestApp = new Marionette.Application();
TestApp.addRegions({
	mainRegion: "#main-region"
});
TestApp.navigate = function(route, options){
	options || (options = {});
	Backbone.history.navigate(route, options);
};
TestApp.getCurrentRoute = function(){
	return Backbone.history.fragment
};
TestApp.on("start", function(){
	if(Backbone.history){
		Backbone.history.start();
		if(this.getCurrentRoute() === ""){
			this.navigate("foo");
			TestApp.MyApp.Show.Controller.ShowFoo();
		}
	}
});
TestApp.module("MyApp", function(App, TestApp, Backbone, Marionette, $, _) {
	App.Router = Marionette.AppRouter.extend({
		appRoutes: {
			"foo": "ShowFoo",
			"bar": "ShowBar",
			"baz": "ShowBaz"
		}
	});
	var API = {
		ShowFoo: function(){
			App.Show.Controller.ShowFoo();
		},
		ShowBar: function(){
			App.Show.Controller.ShowBar();
		},
		ShowBaz: function(){
			App.Show.Controller.ShowBaz();
		}
	};
	TestApp.addInitializer(function(){
		new App.Router({
			controller: API
		});
	});
});
TestApp.mo
MessageParserTest = TestCase("MessageParserTest", {
    test_dummy:function(){
        assert(true);  
    },
    test_one_message_with_a_sub_message:function() {
        var messageParser = new MessageParser();
        var messages = messageParser.parse("A.Method()\n{\nB.Method()\n}");
        assertEquals(1, messages.length);
        assertEquals("", messages[0].from);
        assertEquals(messages[0].to, "A");
        assertEquals(messages[0].message, "Method()");
        assertEquals(messages[0].subMessages.length, 1);
    },
    test_one_message_with_two_sub_message:function() {
        var messageParser = new MessageParser();
        var messages = messageParser.parse("A.MethodA()\n{\nB.MethodB()\nC.MethodC()\n}");
        assertEquals(1, messages.length);
        var messageA = messages[0];
        assertEquals("", messageA.from);
        assertEquals(messageA.to, "A");
        assertEquals(messageA.message, "MethodA()");
        assertEquals(messageA.subMessages.length, 2);
   

        assertEquals("A", messageB.from);
        assertEquals(messageB.to, "B");
        assertEquals(messageB.message, "MethodB()");
        assertEquals(messageB.subMessages.length, 0);
        var messageC = messageA.subMessages[1];
        assertEquals("A", messageC.from);
        assertEquals(messageC.to, "C");
        assertEquals(messageC.message, "MethodC()");
        assertEquals(messageC.subMessages.length, 0);
    },
    test_one_message_with_two_sub_message:function() {
        var messageParser = new MessageParser();
        var messages = messageParser.parse("A.MethodA()\nA1.MethodA1\n{\nB.MethodB()\n{\nD.MethodD()\n}\nC.MethodC()\n}");
        assertEquals(1, messages.length);
        var messageA = messages[0];
        assertEquals("", messageA.from);
        assertEquals(messageA.to, "A");
        assertEquals(messageA.message, "MethodA()");
        assertEquals(messageA.subMessages.length, 2);
        var messageB = messageA.subMessages[0];
        assertEquals("A",
/* ==========================================================================
    Nav -- Version: 0.4.0 - Updated: 8/18/2014
    ========================================================================== */
  $(function() {
    var header = $('header')
    , header_height = header.outerHeight()
    , nav = $('nav')
    , nav_height = nav.outerHeight();
  $('nav a').click(function(){
    $('nav a').parent('li').removeClass('active');
    $(this).parent('li').addClass('active');
    $('html, body').animate({
      scrollTop: $($.attr(this, 'href')).offset().top +1
    }, 500);
    return false;
  });
  if ($(window).scrollTop() >= (header_height - nav_height)) {
    $('nav').addClass('fixed');
    $('nav').css('margin-top','0');
  }
  $(window).bind('scroll', function () {
    if ($(window).scrollTop() >= (header_height - nav_height)) {
      $('nav').addClass('fixed');
      $('nav').css('margin-top','0');
    } else {
      $('nav').removeClass('fixed');
      $('nav').css('margin-top'
require("../env");
var vows = require("vows"),
    assert = require("assert");
var suite = vows.describe("d3.dispatch");
suite.addBatch({
  "dispatch": {
    topic: function() {
      return d3.dispatch;
    },
    "returns a map of dispatchers for each event type": function(dispatch) {
      assert.deepEqual(dispatch(), {});
      var d = dispatch("foo");
      assert.isTrue("foo" in d);
      assert.isFalse("bar" in d);
      var d = dispatch("foo", "bar");
      assert.isTrue("foo" in d);
      assert.isTrue("bar" in d);
    },
    "added listeners receive subsequent events": function(dispatch) {
      var d = dispatch("foo"), events = 0;
      d.on("foo", function() { ++events; });
      d.foo();
      assert.equal(events, 1);
      d.foo();
      d.foo();
      assert.equal(events, 3);
    },
    "the listener is passed any arguments to dispatch": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, aa, bb;
      d.on("foo", function(a, b) { aa = a; bb = b; });
    

      assert.equal(aa, a);
      assert.equal(bb, b);
      d.foo(1, "foo");
      assert.equal(aa, 1);
      assert.equal(bb, "foo");
    },
    "the listener's context is the same as dispatch's": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, that;
      d.on("foo", function() { that = this; });
      d.foo.call(a);
      assert.equal(that, a);
      d.foo.call(b);
      assert.equal(that, b);
    },
    "listeners are notified in the order they are added": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, those = [];
      function A() { those.push(a); }
      function B() { those.push(b); }
      d.on("foo.a", A).on("foo.b", B);
      d.foo();
      assert.deepEqual(those, [a, b]);
      those = [];
      d.foo();
      assert.deepEqual(those, [b, a]);
    },
    "notifying listeners returns the dispatch object": function(dispatch) {
      var d = dispatch("foo");
      assert.equal(d.foo(), d);
    },
    "adding a listener returns the dispa
require("../env");
var vows = require("vows"),
    assert = require("assert");
var suite = vows.describe("d3.dispatch");
suite.addBatch({
  "dispatch": {
    topic: function() {
      return d3.dispatch;
    },
    "returns a map of dispatchers for each event type": function(dispatch) {
      assert.deepEqual(dispatch(), {});
      var d = dispatch("foo");
      assert.isTrue("foo" in d);
      assert.isFalse("bar" in d);
      var d = dispatch("foo", "bar");
      assert.isTrue("foo" in d);
      assert.isTrue("bar" in d);
    },
    "added listeners receive subsequent events": function(dispatch) {
      var d = dispatch("foo"), events = 0;
      d.on("foo", function() { ++events; });
      d.foo();
      assert.equal(events, 1);
      d.foo();
      d.foo();
      assert.equal(events, 3);
    },
    "the listener is passed any arguments to dispatch": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, aa, bb;
      d.on("foo", function(a, b) { aa = a; bb = b; });
    

      assert.equal(aa, a);
      assert.equal(bb, b);
      d.foo(1, "foo");
      assert.equal(aa, 1);
      assert.equal(bb, "foo");
    },
    "the listener's context is the same as dispatch's": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, that;
      d.on("foo", function() { that = this; });
      d.foo.call(a);
      assert.equal(that, a);
      d.foo.call(b);
      assert.equal(that, b);
    },
    "listeners are notified in the order they are added": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, those = [];
      function A() { those.push(a); }
      function B() { those.push(b); }
      d.on("foo.a", A).on("foo.b", B);
      d.foo();
      assert.deepEqual(those, [a, b]);
      those = [];
      d.foo();
      assert.deepEqual(those, [b, a]);
    },
    "notifying listeners returns the dispatch object": function(dispatch) {
      var d = dispatch("foo");
      assert.equal(d.foo(), d);
    },
    "adding a listener returns the dispa

      var d = dispatch("foo");
      function A() {}
      assert.equal(d.on("foo", A), d);
    },
    "removed listeners do not receive subsequent events": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, those = [];
      function A() { those.push(a); }
      function B() { those.push(b); }
      d.on("foo.a", A).on("foo.b", B);
      d.foo();
      those = [];
      d.on("foo.a", null);
      d.foo();
      assert.deepEqual(those, [b]);
    },
    "removing a shared listener only affects the intended event": function(dispatch) {
      var d = dispatch("foo", "bar"), a = 0;
      function A() { ++a; }
      d.on("foo", A).on("bar", A);
      d.foo();
      d.bar();
      assert.equal(a, 2);
      d.on("foo", null);
      d.bar();
      assert.equal(a, 3);
    },
    "adding an existing listener has no effect": function(dispatch) {
      var d = dispatch("foo"), events = 0;
      function A() { ++events; }
      d.on("foo.a", A);
      d.foo();
      d.on("foo.a", 

      d.foo();
      assert.equal(events, 2);
    },
    "removing a missing listener has no effect": function(dispatch) {
      var d = dispatch("foo"), events = 0;
      function A() { ++events; }
      d.on("foo.a", null).on("foo", A).on("foo", null).on("foo", null);
      d.foo();
      assert.equal(events, 0);
    },
    "adding a listener does not affect the current event": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, those = [];
      function A() { d.on("foo.b", B); those.push(a); }
      function B() { those.push(b); }
      d.on("foo.a", A);
      d.foo();
      assert.deepEqual(those, [a]);
    },
    "removing a listener does affect the current event": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, those = [];
      function A() { d.on("foo.b", null); those.push(a); }
      function B() { those.push(b); }
      d.on("foo.a", A).on("foo.b", B);
      d.foo();
      assert.deepEqual(those, [a]);
    },
    "getting a listener retur

      var d = dispatch("foo");
      function A() {}
      assert.equal(d.on("foo", A), d);
    },
    "removed listeners do not receive subsequent events": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, those = [];
      function A() { those.push(a); }
      function B() { those.push(b); }
      d.on("foo.a", A).on("foo.b", B);
      d.foo();
      those = [];
      d.on("foo.a", null);
      d.foo();
      assert.deepEqual(those, [b]);
    },
    "removing a shared listener only affects the intended event": function(dispatch) {
      var d = dispatch("foo", "bar"), a = 0;
      function A() { ++a; }
      d.on("foo", A).on("bar", A);
      d.foo();
      d.bar();
      assert.equal(a, 2);
      d.on("foo", null);
      d.bar();
      assert.equal(a, 3);
    },
    "adding an existing listener has no effect": function(dispatch) {
      var d = dispatch("foo"), events = 0;
      function A() { ++events; }
      d.on("foo.a", A);
      d.foo();
      d.on("foo.a", 

      d.foo();
      assert.equal(events, 2);
    },
    "removing a missing listener has no effect": function(dispatch) {
      var d = dispatch("foo"), events = 0;
      function A() { ++events; }
      d.on("foo.a", null).on("foo", A).on("foo", null).on("foo", null);
      d.foo();
      assert.equal(events, 0);
    },
    "adding a listener does not affect the current event": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, those = [];
      function A() { d.on("foo.b", B); those.push(a); }
      function B() { those.push(b); }
      d.on("foo.a", A);
      d.foo();
      assert.deepEqual(those, [a]);
    },
    "removing a listener does affect the current event": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, those = [];
      function A() { d.on("foo.b", null); those.push(a); }
      function B() { those.push(b); }
      d.on("foo.a", A).on("foo.b", B);
      d.foo();
      assert.deepEqual(those, [a]);
    },
    "getting a listener retur
var namespace_mix_e_r_p_1_1_net_1_1_api =
    [ "Audit", "namespace_mix_e_r_p_1_1_net_1_1_api_1_1_audit.html", "namespace_mix_e_r_p_1_1_net_1_1_api_1_1_audit" ],
    [ "Config", "namespace_mix_e_r_p_1_1_net_1_1_api_1_1_config.html", "namespace_mix_e_r_p_1_1_net_1_1_api_1_1_config" ],
    [ "Core", "namespace_mix_e_r_p_1_1_net_1_1_api_1_1_core.html", "namespace_mix_e_r_p_1_1_net_1_1_api_1_1_core" ],
    [ "HRM", "namespace_mix_e_r_p_1_1_net_1_1_api_1_1_h_r_m.html", "namespace_mix_e_r_p_1_1_net_1_1_api_1_1_h_r_m" ],
    [ "Localization", "namespace_mix_e_r_p_1_1_net_1_1_api_1_1_localization.html", "namespace_mix_e_r_p_1_1_net_1_1_api_1_1_localization" ],
    [ "Office", "namespace_mix_e_r_p_1_1_net_1_1_api_1_1_office.html", "namespace_mix_e_r_p_1_1_net_1_1_api_1_1_office" ],
    [ "Policy", "namespace_mix_e_r_p_1_1_net_1_1_api_1_1_policy.html", "namespace_mix_e_r_p_1_1_net_1_1_api_1_1_policy" ],
    [ "Transactions", "namespace_mix_e_r_p_1_1_net_1_1_api_1_1_transactions.html", "namespace
/**
 * this service deals with login credentials
 */
(function (){
	angular.module('weaveAnalyst.configure.auth', []);
	angular.module('weaveAnalyst.configure.auth').factory('authenticationService', authenticationService);
	authenticationService.$inject = ['$rootScope', 'runQueryService', 'adminServiceURL'];
	function authenticationService (rootScope, runQueryService, adminServiceURL){
		var authenticationService = {};
		authenticationService.user;
		authenticationService.password;
		authenticationService.authenticated = false;
		
		 authenticationService.authenticate = function(user, password){
			 runQueryService.queryRequest(adminServiceURL, 'authenticate', [user, password], function(result){
	    		authenticationService.authenticated = result;
	            if(authenticationService.authenticated){
	            	
	            	authenticationService.user = user;
	            	authenticationService.password = password;
	            }
	            rootScope.$apply();
	        }.bind(aut
var _ = require('underscore');
module.exports = function (menuService, messagesService, securityService, themeService, entityDescriptionService, trackingService, jadeParserService, securityConfigService, integrationService, assetsService) {
    var service = {};
    service.vars = function (req, obj) {
        var result = obj || {};
        var acceptLanguageHeader = req.header('Accept-Language');
        var languageSetting = req.languageSetting;
        _.extend(result, {
            menuService: menuService,
            entityTypeId: req.params.entityTypeId,
            messages: messagesService.messages(acceptLanguageHeader, languageSetting),
            locale: messagesService.extractLocale(acceptLanguageHeader, languageSetting),
            user: req.user,
            securityService: securityService,
            entityTitle: req.params.entityTypeId && entityDescriptionService.entityDescription(entityDescriptionService.entityTypeIdCrudId(req.params.entityTypeId)).title || undefi
const expect = chai.expect;
describe('ServiceBox', function() {
  let serviceBox;
  const service = function() {
    return Promise.resolve('Service');
  };
  const dependentService = function() {
    const serviceName = serviceBox.get('service');
    return Promise.resolve(`Dependent Service (depends on '${serviceName}')`);
  };
  dependentService.dependencies = ['service'];
  const otherService = function() {
    return Promise.resolve('Other Service');
  };
  otherService.dependencies = ['dependent-service'];
  beforeEach(function() {
    serviceBox = new ServiceBox();
  });
  it('does not allow the same service to be registered twice', function() {
    serviceBox.register('the-service', service);
    expect(() => serviceBox.register('the-service', service)).to.throw(
      'A factory with the name \'the-service\' has already been registered.'
    );
  });
  it('fails if we try to request a service that has not been registered', function() {
    expect(() => serviceBox.get('the-serv

      'No service called \'the-service\' has been registered.'
    );
  });
  it('fails if we try to request a service that has not been resolved', function() {
    serviceBox.register('the-service', service);
    expect(() => serviceBox.get('the-service')).to.throw(
      'The \'the-service\' service needs to be resolved before you can retrieve it.'
    );
  });
  it('can resolve a service with no dependencies', function() {
    serviceBox.register('the-service', service);
    return serviceBox.resolve(['the-service']).then(function() {
      expect(serviceBox.get('the-service')).to.equal('Service');
      expect(() => serviceBox.get('dependent-service')).to.throw(Error);
    });
  });
  it('can resolve a service with a single dependency', function() {
    serviceBox.register('service', service);
    serviceBox.register('dependent-service', dependentService);
    return serviceBox.resolve(['dependent-service']).then(function() {
      expect(serviceBox.get('service')).to.equal('Servi

      expect(serviceBox.get('dependent-service')).to.equal('Dependent Service (depends on \'Service\')');
      expect(() => serviceBox.get('other-service')).to.throw(Error);
    });
  });
  it('can resolve a service through a chain of dependencies with a partial resolve list', function() {
    serviceBox.register('service', service);
    serviceBox.register('dependent-service', dependentService);
    serviceBox.register('other-service1', otherService);
    serviceBox.register('other-service2', otherService);
    return serviceBox.resolve(['dependent-service', 'other-service1']).then(function() {
      expect(serviceBox.get('service')).to.equal('Service');
      expect(serviceBox.get('dependent-service')).to.equal('Dependent Service (depends on \'Service\')');
      expect(serviceBox.get('other-service1')).to.equal('Other Service');
      expect(() => serviceBox.get('other-service2')).to.throw(Error);
    });
  });
  it('can resolve all services', function() {
    serviceBox.register(
/**
 * @class
 * @constructor
 * @description
 *
 * The class which instance is the factory for the services
 *
 * @throws {Error}
 *      Throws error if specified not valid service manager instance
 *
 * @param {Subclass.Service.ServiceContainer} container
 *      The instance of service manager
 */
Subclass.Service.ServiceFactory = (function()
    /**
     * @alias Subclass.Service.ServiceFactory
     */
    function ServiceFactory(container)
    {
        if (!container || !(container instanceof Subclass.Service.ServiceContainer)) {
            Subclass.Error.create('InvalidArgument')
                .argument('the service manager instance', false)
                .expected('an instance of Subclass.Service.ServiceManager')
                .received(container)
                .apply()
            ;
        }
        /**
         * @type {Subclass.Service.ServiceContainer}
         * @private
         */
        this._serviceContainer = container;
    }
    /**
     * Returns service

     *
     * @method getServiceContainer
     * @memberOf Subclass.Service.ServiceFactory.prototype
     *
     * @returns {Subclass.Service.ServiceContainer}
     */
    ServiceFactory.prototype.getServiceContainer = function()
    {
        return this._serviceContainer;
    };
    /**
     * Creates and returns the service class instance
     *
     * @method createService
     * @memberOf Subclass.Service.ServiceFactory.prototype
     *
     * @param {Subclass.Service.Service} service
     */
    ServiceFactory.prototype.createService = function(service)
    {
        if (service.getAbstract()) {
            Subclass.Error.create('AbstractService')
                .service(service.getName())
                .apply()
            ;
        }
        var container = this.getServiceContainer();
        var moduleInstance = container.getModuleInstance();
        var parserManager = moduleInstance.getParser();
        var serviceManager = container.getServiceManager();
        var clas
require("../env");
require("../../d3");
var vows = require("vows"),
    assert = require("assert");
var suite = vows.describe("d3.dispatch");
suite.addBatch({
  "dispatch": {
    topic: function() {
      return d3.dispatch;
    },
    "returns a map of dispatchers for each event type": function(dispatch) {
      assert.deepEqual(dispatch(), {});
      var d = dispatch("foo");
      assert.isTrue("foo" in d);
      assert.isFalse("bar" in d);
      var d = dispatch("foo", "bar");
      assert.isTrue("foo" in d);
      assert.isTrue("bar" in d);
    },
    "added listeners receive subsequent events": function(dispatch) {
      var d = dispatch("foo"), events = 0;
      d.on("foo", function() { ++events; });
      d.foo();
      assert.equal(events, 1);
      d.foo();
      d.foo();
      assert.equal(events, 3);
    },
    "the listener is passed any arguments to dispatch": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, aa, bb;
      d.on("foo", function(a, b) { aa 

      d.foo(a, b);
      assert.equal(aa, a);
      assert.equal(bb, b);
      d.foo(1, "foo");
      assert.equal(aa, 1);
      assert.equal(bb, "foo");
    },
    "the listener's context is the same as dispatch's": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, that;
      d.on("foo", function() { that = this; });
      d.foo.call(a);
      assert.equal(that, a);
      d.foo.call(b);
      assert.equal(that, b);
    },
    "listeners are notified in the order they are added": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, those = [];
      function A() { those.push(a); }
      function B() { those.push(b); }
      d.on("foo.a", A).on("foo.b", B);
      d.foo();
      assert.deepEqual(those, [a, b]);
      those = [];
      d.foo();
      assert.deepEqual(those, [b, a]);
    },
    "notifying listeners returns the dispatch object": function(dispatch) {
      var d = dispatch("foo");
      assert.equal(d.foo(), d);
    },
    "adding a listene

      var d = dispatch("foo");
      function A() {}
      assert.equal(d.on("foo", A), d);
    },
    "removed listeners do not receive subsequent events": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, those = [];
      function A() { those.push(a); }
      function B() { those.push(b); }
      d.on("foo.a", A).on("foo.b", B);
      d.foo();
      those = [];
      d.on("foo.a", null);
      d.foo();
      assert.deepEqual(those, [b]);
    },
    "removing a shared listener only affects the intended event": function(dispatch) {
      var d = dispatch("foo", "bar"), a = 0;
      function A() { ++a; }
      d.on("foo", A).on("bar", A);
      d.foo();
      d.bar();
      assert.equal(a, 2);
      d.on("foo", null);
      d.bar();
      assert.equal(a, 3);
    },
    "adding an existing listener has no effect": function(dispatch) {
      var d = dispatch("foo"), events = 0;
      function A() { ++events; }
      d.on("foo.a", A);
      d.foo();
      d.on("foo.a", 

      d.foo();
      assert.equal(events, 2);
    },
    "removing a missing listener has no effect": function(dispatch) {
      var d = dispatch("foo"), events = 0;
      function A() { ++events; }
      d.on("foo.a", null).on("foo", A).on("foo", null).on("foo", null);
      d.foo();
      assert.equal(events, 0);
    },
    "adding a listener does not affect the current event": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, those = [];
      function A() { d.on("foo.b", B); those.push(a); }
      function B() { those.push(b); }
      d.on("foo.a", A);
      d.foo();
      assert.deepEqual(those, [a]);
    },
    "removing a listener does affect the current event": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, those = [];
      function A() { d.on("foo.b", null); those.push(a); }
      function B() { those.push(b); }
      d.on("foo.a", A).on("foo.b", B);
      d.foo();
      assert.deepEqual(those, [a]);
    },
    "getting a listener retur
var dispatcher = require('../../lib/dispatcher');
var messageId = 100;
module.exports = {
    "join": function(user) {
        this.broadcast.emit("message", {
            id: messageId++,
            content: {
                type: "message",
                data: "User '" + user.name + "' has joined."
            },
            user: "System",
            time: (new Date()).toString()  
        });
    },
    
    "changed:username": function(from, to) {
        this.broadcast.emit("message", {
            id: messageId++,
            content: {
                type: "message",
                data: "User '" + from + "' changed name to '" + to + "'."
            },
            user: "System",
            time: (new Date()).toString()  
        });
    },
    
    "message": function(message, fn) {
        var socket = this;
        var namespace = socket.namespace.name;
        var dispatch = dispatcher.dispatchers[namespace];
        
        if (!dispatch) {
            return;
  

        
        var originalContent = message.content.data;        
        dispatch(message.content.data, function(err, type, response) {
            message.time = (new Date()).toString();
            message.id = messageId++;
            message.content.type = type;
            message.content.error = err || null;
            message.content.data = response || null;
            message.content.original = originalContent;
            
            socket.emit("message", message);
            socket.broadcast.emit("message", message);
        });        
    },
    
    "onBreak": function(br, broadcast) {
        message = {};
        message.time = (new Date()).toString();
        message.id = messageId++;
        message.user = "System";
        message.silent = false;
        message.content = {};
        message.content.type = "break";
        message.content.error = null;
        message.content.data = br;
        broadcast("message", message);
    },
    
    "onStdout": funct

        message = {};
        message.time = (new Date()).toString();
        message.id = messageId++;
        message.user = "System - stdout";
        message.silent = true;
        message.content = {};
        message.content.type = "stdout";
        message.content.error = null;
        message.content.data = str;
        broadcast("message", message);
    },
    
    "onStderr": function(str, broadcast) {
        message = {};
        message.time = (new Date()).toString();
        message.id = messageId++;
        message.user = "System - stderr";
        message.silent = true;
        message.content = {};
        message.content.type = "stderr";
        message.content.error = null;
        message.content.data = str;
        broadcast("message", message);
    },
    
    "onNoDebuggerAttached": function(broadcast) {
        message = {};
        message.time = (new Date()).toString();
        message.id = messageId++;
        message.user = "System";
        message.silent 

        message.content = {};
        message.content.type = "system";
        message.content.error = null;
        message.content.data = "No debugger attached.";
        broadcast("message", message);
    },
    
    "onDebuggerConnected": function(broadcast) {
        message = {};
        message.time = (new Date()).toString();
        message.id = messageId++;
        message.user = "System";
        message.silent = false;
        message.content = {};
        message.content.type = "system";
        message.content.error = null;
        message.content.data = "Debugger is now attached.";
        broadcast("message", message);
    },
    
    "onDebuggerDisconnected": function(broadcast) {
        message = {};
        message.time = (new Date()).toString();
        message.id = messageId++;
        message.user = "System";
        message.silent = false;
        message.content = {};
        message.content.type = "system";
        message.content.error = null;
        message
export function searchWorkflows(query, search, hours, fullstr, start) {
  return function (dispatch) {
    dispatch({
      type: 'GET_WORKFLOWS',
      search: search
    });
    if(fullstr && search != null && search.length > 0) {
      search = '"' + search + '"';
    }
    return http.get('/api/wfe/' + status + '?q=' + query + '&h=' + hours + '&freeText=' + search + '&start=' + start).then((data) => {
      dispatch({
        type: 'RECEIVED_WORKFLOWS',
        data
      });
    }).catch((e) => {
      dispatch({
        type: 'REQUEST_ERROR',
        e
      });
    });
  }
export function getWorkflowDetails(workflowId){
  return function (dispatch) {
    dispatch({
      type: 'GET_WORKFLOW_DETAILS',
      workflowId
    });
    return http.get('/api/wfe/id/' + workflowId).then((data) => {
      dispatch({
        type: 'RECEIVED_WORKFLOW_DETAILS',
        data
      });
    }).catch((e) => {
      dispatch({
        type: 'REQUEST_ERROR',
        e
      });
    });
  }
export 

  return function (dispatch) {
    dispatch({
      type: 'REQUESTED_TERMINATE_WORKFLOW',
      workflowId
    });
    return http.delete('/api/wfe/terminate/' + workflowId).then((data) => {
      dispatch({
        type: 'RECEIVED_TERMINATE_WORKFLOW',
        workflowId
      });
    }).catch((e) => {
      dispatch({
        type: 'REQUEST_ERROR',
        e
      });
    });
  }
export function restartWorfklow(workflowId){
  return function (dispatch) {
    dispatch({
      type: 'REQUESTED_RESTART_WORKFLOW',
      workflowId
    });
    return http.post('/api/wfe/restart/' + workflowId).then((data) => {
      dispatch({
        type: 'RECEIVED_RESTART_WORKFLOW',
        workflowId
      });
    }).catch((e) => {
      dispatch({
        type: 'REQUEST_ERROR',
        e
      });
    });
  }
export function retryWorfklow(workflowId){
  return function (dispatch) {
    dispatch({
      type: 'REQUESTED_RETRY_WORKFLOW',
      workflowId
    });
    return http.post('/api/wfe/retry/' +

      dispatch({
        type: 'RECEIVED_RETRY_WORKFLOW',
        workflowId
      });
    }).catch((e) => {
      dispatch({
        type: 'REQUEST_ERROR',
        e
      });
    });
  }
export function pauseWorfklow(workflowId) {
  return function (dispatch) {
    dispatch({
      type: 'REQUESTED_PAUSE_WORKFLOW',
      workflowId
    });
    return http.post('/api/wfe/pause/' + workflowId).then((data) => {
      dispatch({
        type: 'RECEIVED_PAUSE_WORKFLOW',
        workflowId
      });
    }).catch((e) => {
      dispatch({
        type: 'REQUEST_ERROR',
        e
      });
    });
  }
export function resumeWorfklow(workflowId) {
  return function (dispatch) {
    dispatch({
      type: 'REQUESTED_RESUME_WORKFLOW',
      workflowId
    });
    return http.post('/api/wfe/resume/' + workflowId).then((data) => {
      dispatch({
        type: 'RECEIVED_RESUME_WORKFLOW',
        workflowId
      });
    }).catch((e) => {
      dispatch({
        type: 'REQUEST_ERROR',
        e


    });
  }
export function getWorkflowDefs() {
  return function (dispatch) {
    dispatch({
      type: 'LIST_WORKFLOWS'
    });
    return http.get('/api/wfe/metadata/workflow').then((data) => {
      dispatch({
        type: 'RECEIVED_LIST_WORKFLOWS',
        workflows : data
      });
    }).catch((e) => {
      dispatch({
        type: 'REQUEST_ERROR',
        e
      });
    });
  }
export function getWorkflowMetaDetails(name, version){
  return function (dispatch) {
    dispatch({
      type: 'GET_WORKFLOW_DEF',
      name,
      version
    });
    return http.get('/api/wfe/metadata/workflow/' + name + '/' + version).then((data) => {
      dispatch({
        type: 'RECEIVED_WORKFLOW_DEF',
        name,
        version,
        workflowMeta: data
      });
    }).catch((e) => {
      dispatch({
        type: 'REQUEST_ERROR',
        e
      });
    });
  }
export function getTaskDefs() {
  return function (dispatch) {
    dispatch({
      type: 'GET_TASK_DEFS'
    });
    retu

      dispatch({
        type: 'RECEIVED_TASK_DEFS',
        taskDefs: data
      });
    }).catch((e) => {
      dispatch({
        type: 'REQUEST_ERROR',
        e
      });
    });
  }
export function getQueueData() {
  return function (dispatch) {
    dispatch({
      type: 'GET_POLL_DATA'
    });
    return http.get('/api/wfe/queue/data').then((data) => {
      dispatch({
        type: 'RECEIVED_POLL_DATA',
        queueData: data
      });
    }).catch((e) => {
      dispatch({
        type: 'REQUEST_ERROR',
        e
      });
    });
  }
export function updateWorkflow(workflow){
  return function (dispatch) {
    dispatch({
      type: 'REQUESTED_UPDATE_WORKFLOW_DEF',
      workflow
    });
    return http.put('/api/wfe/metadata/', workflow).then((data) => {
      dispatch({
        type: 'RECEIVED_UPDATE_WORKFLOW_DEF'
      });
    }).catch((e) => {
      dispatch({
        type: 'REQUEST_ERROR',
        e
      });
    });
  }
export function getEventHandlers() {
  return fu

    dispatch({
      type: 'LIST_EVENT_HANDLERS'
    });
    return http.get('/api/events').then((data) => {
      dispatch({
        type: 'RECEIVED_LIST_EVENT_HANDLERS',
        events : data
      });
    }).catch((e) => {
      dispatch({
        type: 'REQUEST_ERROR',
        e
      });
    });
  }
export function getEvents(event, time, query) {
  return function (dispatch) {
    dispatch({
      type: 'LIST_EVENT'
    });
    return http.get('/api/events/executions').then((data) => {
      dispatch({
        type: 'RECEIVED_LIST_EVENT',
        events : data
      });
    }).catch((e) => {
      dispatch({
        type: 'REQUEST_ERROR',
        e
      });
    });
  }
export function getTaskLogs(taskId) {
  return function (dispatch) {
    dispatch({
      type: 'GET_TASK_LOGS'
    });
    return http.get('/api/wfe/task/log' + taskId).then((data) => {
      dispatch({
        type: 'RECEIVED_GET_TASK_LOGS',
        logs : data
      });
    }).catch((e) => {
      dispatch({
  
$(document).ready(function(){
	$("#typeSelect").bind("change",function(){
		init_nav_type($(this).val());	
	});
	$("#mobileTypeSelect").bind("change",function(){	
		init_nav_cfg($(this).val());		
		init_nav_type($("#typeSelect").val());
	});
	init_nav_cfg($("#mobileTypeSelect").val());
	init_nav_type($("#typeSelect").val());
});
function init_nav_cfg(type)
	var navs = null;
	for(nav_key in nav_cfg)
	{
		nav_cfg_item = nav_cfg[nav_key];
		if(nav_cfg_item['mobile_type']==type)
		{
			navs = nav_cfg_item['nav'];
			break;
		}
	}
	if(type==0)
	{
		if($("#advposition").find("option[value='1']").length==0)
		{
			var opp = new Option("启动页","1");
			$("#advposition").append(opp);
		}
	}
	else
	{
		$("#advposition").find("option[value='1']").remove();
	}
	$("#typeSelect").empty();
	for(nav_key in navs)
	{
		nav_item = navs[nav_key];
		
		var select_str = "";
		if(nav_item['type']==adv_type)
		{
			select_str = "selected='selected'";
		}
		$("#typeSelect").append("<option value='"+nav_item['typ
var
	kind = require('enyo/kind'),
	utils = require('enyo/utils');
var
	Component = require('enyo/Component'),
	MultipleDispatchComponent = require('enyo/MultipleDispatchComponent');
describe('MultipleDispatch', function () {
	describe('usage', function () {
		describe('Default dispatch', function () {
			var p, c;
			before(function () {
				var Parent = kind({
						kind: Component,
						handlers: {
							onTest1: "accept"
						},
						accept: function () {
							this.done();
						}
					}),
					Child = kind({
						kind: MultipleDispatchComponent,
						events: {
							onTest1: ""
						}
					});
				p = new Parent();
				c = new Child({owner: p});
			});
			after(function () {
				p.destroy();
				c.destroy();
			});
			it ('should have default dispatch path', function (done) {
				p.done = done;
				c.doTest1();
				expect(c._dispatchDefaultPath).to.exist;
			});
		});
		describe('Add dispatch target', function () {
			var dc;
			before(function () {
				var DispatchCompon

					kind: MultipleDispatchComponent,
					events: {
						onTest1: ""
					}
				});
				dc = new DispatchComponent();
			});
			after(function () {
				dc.destroy();
			});
			it ('should have _dispatchTargets', function () {
				expect(dc._dispatchTargets).to.exist;
			});
			it ('should have dispatch targets zeroed out', function () {
				expect(dc._dispatchTargets.length).to.equal(0);
			});
			it ('should add dispatch target properly', function () {
				dc.addDispatchTarget(new Component());
				expect(dc._dispatchTargets.length).to.equal(1);
			});
		});
		describe('Remove dispatch target', function () {
			var dc, c;
			before(function () {
				var DispatchComponent = kind({
					kind: MultipleDispatchComponent,
					events: {
						onTest1: ""
					}
				});
				dc = new DispatchComponent();
			});
			after(function () {
				dc.destroy();
			});
			it ('should add dispatch target properly', function () {
				dc.addDispatchTarget((c = new Component()));
				expect(dc._dispatch

			});
			it ('should remove dispatch target properly', function () {
				dc.removeDispatchTarget(c);
				expect(dc._dispatchTargets.length).to.equal(0);
			});
		});
		describe('Multiple listeners without owner', function () {
			var ex = 4,
				TestComponent, dc;
			before(function () {
				TestComponent = kind({
					kind: Component,
					handlers: {
						onTest1: "accept"
					},
					accept: function () {
						--ex;
						console.log('ex=', ex);
						if (ex === 0) {
							this.done();
						}
					}
				});
				var DispatchComponent = kind({
					kind: MultipleDispatchComponent,
					events: {
						onTest1: ""
					}
				});
				dc = new DispatchComponent();
			});
			after(function () {
				TestComponent = null;
				dc.destroy();
			});
			it ('should have multiple listeners', function (done) {
				for (var i = 0; i < 4; ++i) {
					dc.addDispatchTarget(new TestComponent({done: done}));
				}
				dc.doTest1();
			});
		});
		describe('Multiple listeners with owner', functio
        'underscore', 'backbone','text!page/05-1-1_myPage.html',
        'mec/model/myPageModel'
        ], 
		_, Backbone, mainView,mainModel){
  return cpmView = Backbone.View.extend({
	  
    template:_.template(mainView),
   
    initialize : function() {
    	
    },
    
    refresh: function(){
    	
    },
    
    render: function(){
      $(this.el).empty();
      $(this.el).html(this.template(this.model.toJSON()));
      return this;
    },
    
    events: {
        'click .myproperty':'showMypropertyPage',
        'click .myorder':'showMyorderPage',
        'click .mymessage':'showMymessagePage',
        'click .mysetting':'showMysettingPage',
        'click .update':'showUpdatePage'
    },
      showMypropertyPage:function(){
          window.AppRouter.showMypropertyPage();
      },
      showMyorderPage:function(){
          window.AppRouter.showMyorderPage();
      },
      showMymessagePage:function(){
          window.AppRouter.showMymessagePage();
      },
      show
'use strict';
tatool
  .controller('uzhShiftingCtrl', [ '$scope', 'service',
    function ($scope, service) {
    $scope.cueService = service.cueService;
    $scope.stimulusService = service.stimulusService;
    $scope.inputService = service.inputService;
    $scope.displayCross = false;
    $scope.start = function() {
      service.createStimulus();
      displayCue();
    };
    function displayCue() {
      service.cueService.show();
      service.cueTimer.start(displayStimulus);
    }
    function displayStimulus() {
      service.inputService.enable();
      if (service.showKeys.propertyValue === true) {
        service.inputService.show();
      }
      if (service.timerEnabled.propertyValue === true) {
        service.timer.start(timerUp);
      }
      service.startTime = service.stimulusService.show();
    }
    function timerUp() {
      service.inputService.disable();
      service.endTime = service.stimulusService.hide();
      service.processResponse('');
    }
    $scope.
define([
  'aeris/util',
  'aeris/geolocate/html5geolocateservice',
  'aeris/geolocate/freegeoipgeolocateservice'
], function(_, HTML5GeolocateService, FreeGeoIPGeolocateService) {
  /**
   * Helper for creating a supported {aeris.geolocate.GeolocateServiceInterface}
   *
   * @class GeolocateServiceResolver
   * @namespace aeris.geolocate
   *
   * @constructor
   *
   * @param {Object=} opt_options
   * @param {function():aeris.geolocate.GeolocateServiceInterface} opt_options.GeolocateService
   *        Defaults to {aeris.geolocate.HTML5GeolocateService}.
   * @param {function():aeris.geolocate.GeolocateServiceInterface} opt_options.FallbackGeolocateService
   *        Defaults to {aeris.geolocate.FreeGeoIPGeolocateService}.
   * @param {aeris.geolocate.options.GeolocateServiceOptions} opt_options.geolocateServiceOptions
  */
  var GeolocateServiceResolver = function(opt_options) {
    var options = _.defaults(opt_options || {}, {
      GeolocateService: HTML5GeolocateService,
     

      geolocateServiceOptions: {}
    });
    /**
     * @property GeolocateService_
     * @private
     * @type {function():aeris.geolocate.GeolocateServiceInterface}
    */
    this.GeolocateService_ = options.GeolocateService;
    /**
     * @property FallbackGeolocateService_
     * @private
     * @type {function():aeris.geolocate.GeolocateServiceInterface}
    */
    this.FallbackGeolocateService_ = options.FallbackGeolocateService;
    /**
     * @property geolocateServiceOptions_
     * @private
     * @type {aeris.geolocate.options.GeolocateServiceOptions}
    */
    this.geolocateServiceOptions_ = options.geolocateServiceOptions;
  };
  /**
   * Return an instance of the GeolocateService option,
   * or, if it's not supported, the FallbackGeolocateService
   *
   * @method resolveService
   * @return {aeris.geolocate.GeolocateServiceInterface}
   */
  GeolocateServiceResolver.prototype.resolveService = function() {
    return this.GeolocateService_.isSupported() ?
      new
var api        = require('../../api'),
    middleware = require('../../middlewares');
/**
 * Archiving provider API routes.
 */
module.exports = function(app) {
  var contextHandler = middleware.contextHandler(app);
  /**
   * @api {get} /api/archive Get all archiving providers
   * @apiVersion 0.9.0
   * @apiName GetAllArchivingProvider
   * @apiGroup archive
   * @apiPermission user
   *
   * @apiSuccess {String} description Archiving provider description.
   * @apiSuccess {String} name        Archiving provider name.
   * @apiSuccess {String} url         Archiving provider url.
   *
   * @apiSuccessExample Success-Response:
   *     HTTP/1.1 200 OK
   *     [{
   *        description: "Nunux Keeper
   *        name: "keeper"
   *     },
   *     {...}
   *     ]
   */
  app.get('/api/archive', api.archive.all);
  /**
   * @api {post} /api/archive/:provider/:aid Send article to the archiving provider.
   * @apiVersion 0.9.0
   * @apiName SendArticleToArchivingProvider
   * @apiGroup 

   * @apiPermission user
   *
   * @apiParam {String} provider Archiving provider's name.
   * @apiParam {String} aid      Article ID.
   *
   * @apiSuccess {String} ref      Article extrenal reference.
   * @apiSuccess {String} provider Archiving provider name.
   *
   * @apiSuccessExample Success-Response:
   *     HTTP/1.1 200 OK
   *     {
   *        provider: "keeper"
   *        ref: "a54c156d46a5e1f87a"
   *     }
   */
  app.post('/api/archive/:provider/:aid', api.archive.assertProvider, api.archive.saveArticle);
  /**
   * @api {get} /api/archive/:provider/registration/request Request to be register by the archiving provider.
   * @apiVersion 0.9.0
   * @apiName RegisterToArchivingProvider
   * @apiGroup archive
   * @apiPermission user
   *
   * @apiParam {String} provider Archiving provider's name.
   */
  app.get('/api/archive/:provider/registration/request', contextHandler, api.archive.assertProvider, api.archive.registrationRequest);
  app.get('/api/archive/:provider/re
const auth = (user) => {
    return FireBaseRepository.auth(user);
};
export default {
    listenToAuthState() {
        return (dispatch) => {
            FireBaseRef.onAuth((authData) => {
                if (authData) {
                    console.log('listen action says logged in.');
                    dispatch({type: 'SET_LOGIN_USER', email: authData.password.email});
                    dispatch({type: 'LOGIN'});
                }
                else {
                    console.log('listen action says logged out.');
                    dispatch({type: 'LOGOUT'});
                }
            });
        }
    },
    loginUser(user) {
        return async (dispatch) => {
            dispatch({type: 'START_SPINNER'});
            let validation = await auth(user);
            if (validation.isSuccessful) {
                let email = validation.data.password.email;
                dispatch({type: 'LOGIN'});
                dispatch({type: 'SET_LOGIN_USER', email});
           
'use strict';
define(function(require) {
        var angular = require('angular');
        var models = require('teacher/models');
        var userModels = require('users/models');
        var GameService = require('./GameService');
        var InteractionService = require('./InteractionService');
        var ObjectiveService = require('./ObjectiveService');
        var TagService = require('./TagService');
        var NoteService = require('./NoteService');
        var UserService = require('./UserService');
        var moduleName = 'kasparGUI.teacher.dataProvider';
        var dependancies = [
            models,
            userModels,
        ];
        var module = angular.module(moduleName, dependancies)
            .service('gameService', GameService)
            .service('interactionService', InteractionService)
            .service('objectiveService', ObjectiveService)
            .service('tagService', TagService)
            .service('noteService', NoteService)
            .
Package.describe({
  name: 'deligencetechnologies:htmlblock',
  version: '0.0.6',
  documentation: 'README.md'
});
Package.onUse(function(api) {
  api.versionsFrom('1.3.4');
  api.use('ecmascript');
  api.use("mongo");
  api.use("mobile-experience");
  api.use("meteor-base");
  api.use("jquery");
  api.use("session");
  api.use("tracker");
  api.use("logging");
  api.use("reload");
  api.use("random");
  api.use("ejson");
  api.use('react@0.14.6');
  api.use('insecure');
  api.use('underscore');
  api.use('accounts-password');
  api.use('alanning:roles@1.2.14');
  api.use("http");
  api.use('kadira:flow-router@2.12.1');
  api.use('kadira:react-layout@1.5.3');
  api.use('custom:gridfs@0.0.33');
  api.use('cfs:filesystem@0.1.2');
  api.use('cfs:s3@0.1.3');
  api.use('mizzao:jquery-ui@1.11.4');
  api.use('mizzao:autocomplete@0.5.1');
  api.use('ajduke:bootstrap-tokenfield@0.5.0');
  api.use('anti:i18n@0.4.3');
  api.use('themeteorchef:jquery-validation@1.0.0');
  api.use('arillo:flow-rout
export function lockStore () {
    return (dispatch) => {
        dispatch({ type: types.LOCK });
        dispatch(clearPersistedState());
    };
export function unlockStore (items, password) {
    return (dispatch) => {
        dispatch({ type: types.UNLOCK, items, password });
        dispatch(persistState());
    };
export function createStore (password) {
    return (dispatch) => {
        dispatch({ type: types.CREATE_STORE, password });
        dispatch(clearPersistedState());
    };
export function updateStoreFile () {
    return dispatch => {
        dispatch(lockStore());
        remote.dialog.showOpenDialog({ properties: ['openFile'] }, ([storeFile]) => {
            dispatch({ type: types.UPDATE_STORE_FILE, storeFile });
            dispatch(persistState());
        });
    };
export function useDefaultStoreFile () {
    return dispatch => {
        dispatch(lockStore());
        dispatch({ type: types.UPDATE_STORE_FILE, storeFile: config.defaultStore });
        dispatch(pe
function toggle_active_link(nav) {
    $('#nav_home').removeClass('active_nav');
    $('#nav_books').removeClass('active_nav');
    $('#nav_blog').removeClass('active_nav');
    $('#nav_videos').removeClass('active_nav');
    $('nav_gallery').removeClass('active_nav');
    $('#nav_patas').removeClass('active_nav');
    $('#nnav_jem').removeClass('active_nav');
    $('#nav_forum').removeClass('active_nav');
  switch (nav) {
    case 'nav_books':
      $('#nav_books').addClass('active_nav');
      break;
    case 'nav_blog':
      $('#nav_blog').addClass('active_nav');
      break;
    case 'nav_videos':
      $('#nav_videos').addClass('active_nav');
      break;
    case 'nav_gallery':
      $('#nav_gallery').addClass('active_nav');
      break;
    case 'nav_patas':
      $('#nav_patas').addClass('active_nav');
      break;
    case 'nav_jem':
      $('#nav_jem').addClass('active_nav');
      break;
    case 'nav_forum':
      $('#nav_forum').addClass('active_nav');
      break;
    de
var searchData=
  ['filterkeys',['filterKeys',['../interface_c_b_h_view_controller.html#a4f3d75d1d8fad73011f6e351b372e3fc',1,'CBHViewController']]],
  ['filtertableview',['filterTableView',['../interface_c_b_h_view_controller.html#af31b6aa64efbefec22db9335fb4d093b',1,'CBHViewController']]],
  ['filtervalues',['filterValues',['../interface_c_b_h_view_controller.html#a63bd8d08d79e12fdbb5d8433a7ce8d39',1,'CBHViewController']]],
  ['filterview',['filterView',['../interface_c_b_h_view_controller.html#ae1cc55bda553d1bedb1b55726035b20a',1,'CBHViewController']]],
  ['finaluploadbuttonpressed_3a',['finalUploadButtonPressed:',['../interface_c_b_h_view_controller.html#a112c0996342c1157f8f97e35379505c9',1,'CBHViewController']]],
  ['finaluploadcancelbuttonpressed_3a',['finalUploadCancelButtonPressed:',['../interface_c_b_h_view_controller.html#a7a0248ccf94716a4a8021089bef209a0',1,'CBHViewController']]],
  ['finaluploadsongview',['finalUploadSongView',['../interface_c_b_h_view_controller.html#a0b371
enyo.kind({
	name: "MultipleDispatchTest",
	kind: enyo.TestSuite,
	noDefer: true,
	testDefaultDispatch: function () {
		var s = this, c, mm, test = {};
		test.Component = enyo.kind({
			kind: "enyo.Component",
			handlers: {
				onTest1: "accept"
			},
			accept: function () {
				s.finish();
			}
		});
		test.DispatchComponent = enyo.kind({
			kind: "enyo.MultipleDispatchComponent",
			events: {
				onTest1: ""
			}
		});
		c = new test.Component();
		mm = new test.DispatchComponent({owner: c});
		if (!mm._dispatchDefaultPath) {
			return this.finish("did not detect default dispatch path");
		}
		mm.doTest1();
	},
	testAddDispatchTarget: function () {
		var mm, test = {};
		test.DispatchComponent = enyo.kind({
			kind: "enyo.MultipleDispatchComponent",
			events: {
				onTest1: ""
			}
		});
		mm = new test.DispatchComponent();
		if (!mm._dispatchTargets) {
			return this.finish("dispatch targets not initialized properly");
		}
		if (mm._dispatchTargets.length !== 0) {
			return this.

		}
		mm.addDispatchTarget(new enyo.Component());
		if (mm._dispatchTargets.length !== 1) {
			return this.finish("dispatch target not added properly");
		}
		this.finish();
	},
	testRemoveDispatchTarget: function () {
		var mm, test = {}, c;
		test.DispatchComponent = enyo.kind({
			kind: "enyo.MultipleDispatchComponent",
			events: {
				onTest1: ""
			}
		});
		mm = new test.DispatchComponent();
		mm.addDispatchTarget((c = new enyo.Component()));
		if (mm._dispatchTargets.length !== 1) {
			return this.finish("dispatch target not added properly");
		}
		mm.removeDispatchTarget(c);
		if (mm._dispatchTargets.length !== 0) {
			return this.finish("dispatch target not removed properly");
		}
		this.finish();
	},
	testMultipleListenersWithoutOwner: function () {
		var s = this, ex = 4, mm, test = {};
		test.Component = enyo.kind({
			kind: "enyo.Component",
			handlers: {
				onTest1: "accept"
			},
			accept: function () {
				--ex;
				if (ex === 0) {
					s.finish();
				}
			}
		});
angular.module('localjam', [])
    .controller('mainCtrl', function($scope, $http) {
      $http.get('lessons').
			  success(function(data, status, headers, config) {
			    $scope.lessons = data;
			  }).
			  error(function(data, status, headers, config) {
			    console.log('somethign went wrong.')
			  });
    	function showLesson(lesson) {
    		$scope.activeLesson = lesson;
    		$scope.isShowLesson = true;
    		$scope.isShowLessons = false;
            $scope.isShowContact = false;
            $scope.isShowAbout = false;
    	}
    	function showLessons() {
    		$scope.activeLesson = null;
    		$scope.isShowLesson = false;
    		$scope.isShowLessons = true;
            $scope.isShowContact = false;
            $scope.isShowAbout = false;
    	}
        function showAbout() {
            $scope.isShowLesson = false;
            $scope.isShowLessons = false;
            $scope.isShowContact = false;
            $scope.isShowAbout = true;
        }
        function showContact(
module.exports = function(app) {
    var serviceGroups = require('../../server/service-groups');
    app.get('/api/service-groups', function(req, res) {
        res.json(serviceGroups.find());
    });
    app.post('/api/service-groups', function(req, res) {
        res.json(serviceGroups.create(req.body));
    });
    app.get('/api/service-groups/:serviceGroupId', function(req, res) {
        res.json(
            serviceGroups.findById(req.params.serviceGroupId)
        );
    });
    app.post('/api/service-groups/:serviceGroupId', function(req, res) {
        res.json(
            serviceGroups.findById(req.params.serviceGroupId)
                .then(function(service) {
                    if (!service) throw new Error("Service not found");
                    return serviceGroups.update(service, req.body);
                })
        );
    });
    app.delete('/api/service-groups/:serviceGroupId', function(req, res) {
        res.json(
            serviceGroups.findById(req.params.s
(function(){
'use strict';
var app = angular.module('liquidacionApp',[]),
    PanelBusquedaController = require('../controllers/liquidacion/panel_busqueda_controller.js'),
    LiquidacionController = require('../controllers/liquidacion/liquidacion_controller.js'),
    ProductoController = require('../controllers/liquidacion/producto_controller.js'),
    GuiaPropiaController = require('../controllers/liquidacion/guia_propia_controller.js'),
    GuiaLipigasController = require('../controllers/liquidacion/guia_lipigas_controller.js'),
    VoucherLipigasController = require('../controllers/liquidacion/voucher_lipigas_controller.js'),
    VoucherTransbankController = require('../controllers/liquidacion/voucher_transbank_controller.js'),
    ChequeController = require('../controllers/liquidacion/cheque_controller.js'),
    CuponPrepagoController = require('../controllers/liquidacion/cupon_prepago_controller.js'),
    OtroController = require('../controllers/liquidacion/otro_controller.js'),


    liquidacionService = require('../services/liquidacion_service.js'),
    formatoPeso = require('../filters/string_filters.js').formatoPeso,
    mantieneRestanteService = require('../services/mantiene_restante_service.js');
app.filter('formatoPeso', formatoPeso);
app.factory('liquidacionService', liquidacionService);
app.factory('mantieneRestanteService', mantieneRestanteService);
app.factory('calculaRestanteService', function(){
    return {
        calculaRestante: function(producto){
            if(typeof producto.llenos !== 'undefined'){
                producto.llenos = producto.llenos.replace(/\D+/g, '');
            }
            var aux = parseInt(producto.cantidad) - parseInt(producto.llenos);
            if(isNaN(aux) || aux < 0){
                aux = 0;
            }
            if(producto.cantidad < parseInt(producto.llenos)){
                producto.llenos = producto.cantidad;
            }
            producto.vacios = aux;
        }
    };
});
app.controller('Panel

app.controller('LiquidacionController', ['$scope', 'liquidacionService', LiquidacionController]);
app.controller('ProductoController', ['$scope', 'calculaRestanteService', ProductoController]);
app.controller('GuiaPropiaController', ['$scope', 'liquidacionService','mantieneRestanteService', GuiaPropiaController]);
app.controller('GuiaLipigasController', ['$scope', 'liquidacionService','mantieneRestanteService', GuiaLipigasController]);
app.controller('VoucherLipigasController', ['$scope', VoucherLipigasController]);
app.controller('VoucherTransbankController', ['$scope', VoucherTransbankController]);
app.controller('ChequeController', ['$scope', ChequeController]);
app.controller('CuponPrepagoController', ['$scope', 'mantieneRestanteService', CuponPrepagoController]);
app.controller('OtroController', ['$scope', OtroController]);
app.controller('GarantiasController', ['$scope', 'liquidacionService', GarantiasController]);
})();
$('button[data-accion=abre_modal]').on('click', function(e
angular.module('betaberry.darkhounds.net').factory('serviceSession', ['observable', 'serviceAPI', 'serviceValidator', 'serviceMessages',
    function(observable, serviceAPI, serviceValidator, serviceMessages)         {
        var service         = observable.create();
        
        var _session        = null;
        serviceAPI.$on('logedin', function(data)                                {
            _session = data;
            service.$broadcast('changed');
        });
        serviceAPI.$on('logedout', function()                                   {
            _session = null;
            service.$broadcast('changed');
        });
        serviceAPI.$on('played', function(data)                                 {
            if (!_session) retun;
            _session.credits = data.credits;
            service.$broadcast('changed');
        });
        
        service.login       = function(email, password, callback)               {
            if (!serviceValidator.checkEmail(e

            else if (!serviceValidator.checkPassword(password)) serviceMessages.add('error', "Invalid Password");
            else serviceAPI.login(email, password, callback);
            return service;
        };
        
        service.logout      = function(callback)                                {
            serviceAPI.logout(callback);
            return service;
        };
        service.isOpen      = function()                                        {
            return !!_session;
        };
        service.getName     = function()                                        {
            if (!_session) return "";
            var name    = "";
            if (_session.name)       name += _session.name;
            if (_session.lastName)   name += (name?" ":"") + _session.lastName;
            return name;
        };
        service.getCredits  = function()                                        {
            return _session?_session.credits:0;
        };
        
        retur
var classv_1_1_ui___service_1_1_ui___service =
    [ "retranslateUi", "classv_1_1_ui___service_1_1_ui___service.html#a1388958761966fb2fcc62ec145308115", null ],
    [ "setupUi", "classv_1_1_ui___service_1_1_ui___service.html#aa5c20b6064a392f1ed1d79812b9f54c4", null ],
    [ "btn_annuler", "classv_1_1_ui___service_1_1_ui___service.html#aca9489b14bfa102b8f3ee4ea594f5198", null ],
    [ "btn_valider", "classv_1_1_ui___service_1_1_ui___service.html#a0ffdfe4d84320339dbd7d9eb54d4a5a0", null ],
    [ "checkBox_Entretien", "classv_1_1_ui___service_1_1_ui___service.html#a6e195e5d5619a02a52a1a5d8d1a53076", null ],
    [ "checkBox_Livraison", "classv_1_1_ui___service_1_1_ui___service.html#a8af00299a9f0a5bbb07a4d57d532e993", null ],
    [ "checkBox_Maintenance", "classv_1_1_ui___service_1_1_ui___service.html#ae9eac3c9f84f213f34c9a2607605e969", null ],
    [ "dateTimeEdit", "classv_1_1_ui___service_1_1_ui___service.html#a846bbb7444e9848c22e7240be8aa3ae0", null ],
    [ "formLayout", "classv_1_1_ui_
$(document).ready(function($){
    /**
     * Панель разработчика
     */
    $(".button-show").mousemove(function (eventObject) {
        $("#show_classes") .show();
    }).mouseout(function () {
        $("#show_classes").hide();
    });
    $("#button_show_classes").mousemove(function (eventObject) {
        $("#show_classes") .show();
    }).mouseout(function () {
        $("#show_classes").hide();
    });
    $("#button_show_session").mousemove(function (eventObject) {
        $("#show_session") .show();
    }).mouseout(function () {
        $("#show_session").hide();
    });
    $("#button_show_get").mousemove(function (eventObject) {
        $("#show_get") .show();
    }).mouseout(function () {
        $("#show_get").hide();
    });
    $("#button_show_post").mousemove(function (eventObject) {
        $("#show_post") .show();
    }).mouseout(function () {
        $("#show_post").hide();
    });
    $("#button_show_requests").mousemove(function (eventObject) {
        $("#show_re
﻿var _ = require('lodash');
var Navigation = require('mongoose').model('Navigation');
exports.getNavigation = function (req, res) {
    Navigation.find({}).lean().exec(function (err, collection) {
        
        var navItems = collection;
        
        var filteredNavItems = [];
        
        var myroles = req.user.roles;
        GetNavItems(navItems, filteredNavItems);
        function GetNavItems(allItems, filteredItems) {
            
            allItems.forEach(function (navItem) {
                var newNavItem = _.cloneDeep(navItem);
                if (navItem.navItems.length > 0) {
                    newNavItem.navItems = [];
                    navItem.navItems.forEach(function (subNavItem) {
                        if (isReqRolesInNavRoles(myroles, subNavItem.roles)) {
                            newNavItem.navItems.push(subNavItem);
                        }
                    });
                }
                if (isReqRolesInNavRoles(myroles, navItem.roles)) 
function save_options() {
  var showLabels = document.getElementById('show_labels').checked;
  var showCountries = document.getElementById('show_countries').checked;
  var showStates = document.getElementById('show_states').checked;
  var showProvinces = document.getElementById('show_provinces').checked;
  var showAustralianStates = document.getElementById('show_australian_states').checked;
  var showSupranationalUnions = document.getElementById('show_supranational_unions').checked;
  var showSovietRepublics = document.getElementById('show_soviet_republics').checked;
  chrome.storage.sync.set({
    showLabels: showLabels,
    showCountries: showCountries,
    showStates: showStates,
    showProvinces: showProvinces,
    showAustralianStates: showAustralianStates,
    showSupranationalUnions: showSupranationalUnions,
    showSovietRepublics: showSovietRepublics
  }, function() {
    var status = document.getElementById('status');
    status.textContent = 'Preferences saved!';
    setTim

      status.textContent = '';
    }, 750);
  });
function restore_options() {
  chrome.storage.sync.get({
    showLabels: true,
    showCountries: true,
    showStates: false,
    showProvinces: false,
    showAustralianStates: false,
    showSupranationalUnions: false,
    showSovietRepublics: false
  }, function(data) {
    document.getElementById('show_labels').checked = data.showLabels;
    document.getElementById('show_countries').checked = data.showCountries;
    document.getElementById('show_states').checked = data.showStates;
    document.getElementById('show_provinces').checked = data.showProvinces;
    document.getElementById('show_australian_states').checked = data.showAustralianStates;
    document.getElementById('show_supranational_unions').checked = data.showSupranationalUnions;
    document.getElementById('show_soviet_republics').checked = data.showSovietRepublics;
  });
document.addEventListener('DOMContentLoaded', restore_options);
document.getElementById('save').add
var express     = require('express'),
    api         = require('../api'),
    apiRoutes;
apiRoutes = function (middleware) {
    var router = express.Router();
    router.get('/ghost/api/v0.1/posts', api.http(api.posts.browse));
    router.post('/ghost/api/v0.1/posts', api.http(api.posts.add));
    router.get('/ghost/api/v0.1/posts/:id(\\d+)', api.http(api.posts.read));
    router.get('/ghost/api/v0.1/posts/:slug([a-z-]+)', api.http(api.posts.read));
    router.put('/ghost/api/v0.1/posts/:id', api.http(api.posts.edit));
    router['delete']('/ghost/api/v0.1/posts/:id', api.http(api.posts.destroy));
    router.get('/ghost/api/v0.1/settings/', api.http(api.settings.browse));
    router.get('/ghost/api/v0.1/settings/:key/', api.http(api.settings.read));
    router.put('/ghost/api/v0.1/settings/', api.http(api.settings.edit));
    router.get('/ghost/api/v0.1/users/', api.http(api.users.browse));
    router.get('/ghost/api/v0.1/users/:id/', api.http(api.users.read));
    router.put('/ghost
export const loginUser = (login) => {
  return dispatch => {
    dispatch({ type: 'LOGIN_LOADING' })
    POST('/user/login/', login)
    .then(key => {
      dispatch(push('/'))
      dispatch(getMyInfo())
      return dispatch({ type: 'LOGIN_SUCCESS', payload: key.key })
    })
    .catch(error => {
      if (Promise.resolve(error) === error) {
        return error.then(data => dispatch({ type: 'LOGIN_ERROR', payload: data }))
      } else {
        return error
      }
    })
  }
export const logoutUser = () => {
  return dispatch => {
    const tok = localStorage.getItem('key')
    localStorage.setItem('key', '')
    POST('/user/logout/', { 'token': tok })
    dispatch(push('/login'))
    dispatch({ type: 'AUTH_RESET' })
  }
export const registerUser = (register) => {
  return dispatch => {
    dispatch({ type: 'LOGIN_LOADING' })
    POST('/user/registration/', register)
    .then(key => {
      dispatch(push('/'))
      dispatch(getMyInfo())
      return dispatch({ type: 'LOGIN_SUC
export function fetchArticles() {
  return function(dispatch) {
    axios.get(mockAPIURL+'?sortBy=id&order=desc')
      .then((response) => {
        dispatch({type: "FETCH_ARTICLES", payload: response.data})
      })
      .catch((err) => {
        dispatch({type: "API_REJECTED", payload: err})
      })
  }
export function fetchingStarted(){
    return function(dispatch){
        dispatch({type: "LOADING_ARTICLES", payload: true})
    }
export function addArticle(article){
    return function(dispatch){
        axios.post(mockAPIURL,article)
        .then(function (response) {
            window.location = '/dashboard'
        })
        .catch(function (error) {
            dispatch({type: "API_REJECTED", payload: error})
        });
    }
export function updateArticle(articleId,article){
    return function(dispatch){
        axios.put(mockAPIURL+'/'+articleId,article)
        .then(function (response) {
            dispatch({type: "FETCH_ARTICLES", payload: response.data})
        
var dir_984e899df90dd104b2eabcdbb76ec71f =
    [ "nav_airspeed.c", "nav__airspeed_8c.html", "nav__airspeed_8c" ],
    [ "nav_airspeed.h", "nav__airspeed_8h.html", "nav__airspeed_8h" ],
    [ "nav_bungee_takeoff.c", "nav__bungee__takeoff_8c.html", "nav__bungee__takeoff_8c" ],
    [ "nav_bungee_takeoff.h", "nav__bungee__takeoff_8h.html", "nav__bungee__takeoff_8h" ],
    [ "nav_catapult.c", "nav__catapult_8c.html", "nav__catapult_8c" ],
    [ "nav_catapult.h", "nav__catapult_8h.html", "nav__catapult_8h" ],
    [ "nav_cube.c", "nav__cube_8c.html", "nav__cube_8c" ],
    [ "nav_cube.h", "nav__cube_8h.html", "nav__cube_8h" ],
    [ "nav_drop.c", "nav__drop_8c.html", null ],
    [ "nav_drop.h", "nav__drop_8h.html", "nav__drop_8h" ],
    [ "nav_flower.c", "nav__flower_8c.html", "nav__flower_8c" ],
    [ "nav_flower.h", "nav__flower_8h.html", "nav__flower_8h" ],
    [ "nav_gls.c", "nav__gls_8c.html", "nav__gls_8c" ],
    [ "nav_gls.h", "nav__gls_8h.html", "nav__gls_8h" ],
    [ "nav_line.c", "na

    [ "nav_line.h", "nav__line_8h.html", "nav__line_8h" ],
    [ "nav_line_border.c", "nav__line__border_8c.html", "nav__line__border_8c" ],
    [ "nav_line_border.h", "nav__line__border_8h.html", "nav__line__border_8h" ],
    [ "nav_line_osam.c", "nav__line__osam_8c.html", "nav__line__osam_8c" ],
    [ "nav_line_osam.h", "nav__line__osam_8h.html", "nav__line__osam_8h" ],
    [ "nav_smooth.c", "nav__smooth_8c.html", "nav__smooth_8c" ],
    [ "nav_smooth.h", "nav__smooth_8h.html", "nav__smooth_8h" ],
    [ "nav_spiral.c", "nav__spiral_8c.html", "nav__spiral_8c" ],
    [ "nav_spiral.h", "nav__spiral_8h.html", "nav__spiral_8h" ],
    [ "nav_survey_disc.c", "nav__survey__disc_8c.html", "nav__survey__disc_8c" ],
    [ "nav_survey_disc.h", "nav__survey__disc_8h.html", "nav__survey__disc_8h" ],
    [ "nav_survey_poly_osam.c", "nav__survey__poly__osam_8c.html", "nav__survey__poly__osam_8c" ],
    [ "nav_survey_poly_osam.h", "nav__survey__poly__osam_8h.html", "nav__survey__poly__osam_8h" ],
  
export const UPLOAD_PHOTO = 'UPLOAD_PHOTO'
export function updatePicture(data) {
  return {
    type: 'UPDATE_PICTURE',
    ...data
  }
export function uploadPhotoAsync() {
  return (dispatch, getState) => {
    dispatch(updatePicture({id, loading: true}))
    Network.put(`pictures/${id}`)
      .then(response => {
        return response.json()
      })
      .then(data => {
        console.log(data)
        dispatch(updatePicture({id, loading: false}))
      })
  }
export function getEmbedsAsync(id) {
  return (dispatch, getState) => {
    Network.get('embeds')
      .then(response => {
        return response.json()
      })
      .then(data => {
        dispatch(showEmbeds(data))
      })
  }
export function showEmbeds(embeds) {
  return {
    type: SHOW_EMBEDS,
    embeds
  }
export function createEmbed(data, history) {
  return (dispatch, getState) => {
    Network.post('embeds', data)
    .then(response => {
      return response.json()
    })
    .then(data => {
      history.p
var UpdateConfirmedOrderApiController = (function() {
  /**
   * Private state
   */
  var updateConfirmedOrderApi = null;
  var successfulApiCallbackListeners = [];
  var failedLogicalApiCallbackListeners = [];
  var failedNonLogicalApiCallbackListeners = [];
  /**
   * update()
   * - update the specified confirmed order
   * @param UpdateConfirmedOrderRequest request: update request
   */
  var update = function(request) {
    
  };
  
  var successfulApiCallback = function(api_response) {
    for (var i = 0; i < successfulApiCallbackListeners.length; ++i) {
      successfulApiCallbackListeners[i](api_response, getStartupDataApi.getApiKeys());
    }
  };
  
  var logicallyFailedApiCallback = function(api_response) {
    console.log("WARNING: Logically failed api response!");
    console.log(api_response); 
    
    for (var i = 0; i < logicallyFailedApiCallbackListeners.length; ++i) {
      logicallyFailedApiCallbackListeners[i](api_response, getStartupDataApi.getApiKeys());
    }
 

  var nonLogicallyFailedApiCallback = function(api_response) {
    console.nonLog("WARNING: Logically failed api response!");
    console.nonLog(api_response); 
    
    for (var i = 0; i < nonLogicallyFailedApiCallbackListeners.length; ++i) {
      nonLogicallyFailedApiCallbackListeners[i](api_response, getStartupDataApi.getApiKeys());
    }
  };
  /**
   * registerSuccessfulApiCallback()
   * - add callback for successful api call
   * @param FuncPtr callback: function(json_response, api_keys) {...}
   */
  var registerSuccessfulApiCallback = function(callback) {
    successfulApiCallbackListeners.push(callback);
    return this;
  };
  /**
   * registerLogicalFailedApiCallback()
   * - add callback for logical failed api call (i.e. api error error rather than network error)
   * @param FuncPtr callback: function(json_response, api_keys) {...}
   */
  var registerLogicalFailedApiCallback = function(callback) {
    logicallyFailedApiCallbackListeners.push(callback);
    return this;

﻿/**
 * services.
 * @file services.js.
 * @copyright Copyright ©
 */
define([
        'angular', 'angular-resource', 'core/core', 'common/common',
        'user/menu/services/userMenuService',
        'user/menu/services/orderService',
        'user/menu/services/userMenuApiService',
        'user/menu/services/userMenuApiMappingService',
        'user/menu/services/boxCapacityService'
    ],
    function(angular, ngResource, core, common, userMenuService, orderService, userMenuApiService, userMenuApiMappingService, boxCapacityService) {
        'use strict';
        var dependencies = [
            'ngResource',
            core.name,
            common.name
        ];
        var services = angular.module('lunchtime.user.menu.services', dependencies);
        services.service('userMenuService', userMenuService);
        services.service('orderService', orderService);
        services.service('userMenuApiService', userMenuApiService);
        services.service('userMenuApiMappingServi
navButton_over = function() {
	this.style.backgroundImage = 
		"url(img/NavButton" + this.navIndex + "_over.jpg)";
};
navButton_out = function() {
	this.style.backgroundImage = 
		"url(img/NavButton" + this.navIndex + "_norm.jpg)";
};
navButton_down = function() {
	this.style.backgroundImage = 
		"url(img/NavButton" + this.navIndex + "_down.jpg)";
	window.location.href = this.navUrl;
};
navButton_up = function() {
	this.style.backgroundImage = 
		"url(img/NavButton" + this.navIndex + "_over.jpg)";
};
navButton_init = function(navIndex, navUrl){
	var navButton = document.getElementById("navButton" + navIndex);
	navButton.onmouseover = navButton_over;
	navButton.onmouseout = navButton_out;
	navButton.onmousedown = navButton_down;
	navButton.onmouseup = navButton_up;
	navButton.navIndex = navIndex;
	navButton.navUrl = navUrl;
};
ihf_load = function() {
	navButton_init(0, "about-us.html");
	navButton_init(1, "education.html");
	navButton_init(2, "projects.html");
	navButton_init(3, "events
var message = require('./message.js');
var entity = require('./entity.js');
var moment = require('moment');
var HeartbeatMessage = function() {
	message.Message.apply(this, arguments);
	this.uid = undefined;
};
HeartbeatMessage.prototype = new message.Message();
HeartbeatMessage.prototype.constructor = HeartbeatMessage;
exports.HeartbeatMessage = HeartbeatMessage;
var ReqChatMessage = function() {
	message.Message.apply(this, arguments);
	this.uid = undefined;
	this.group = undefined;
	this.chat = undefined;
};
ReqChatMessage.prototype = new message.Message();
ReqChatMessage.prototype.constructor = ReqChatMessage;
exports.ReqChatMessage = ReqChatMessage;
var ReqLoginMessage = function() {
	message.Message.apply(this, arguments);
	this.uid = undefined;
};
ReqLoginMessage.prototype = new message.Message();
ReqLoginMessage.prototype.constructor = ReqLoginMessage;
exports.ReqLoginMessage = ReqLoginMessage;
var ReqLogoutMessage = function() {
	message.Message.apply(this, arguments);
	this.u

};
ReqLogoutMessage.prototype = new message.Message();
ReqLogoutMessage.prototype.constructor = ReqLogoutMessage;
exports.ReqLogoutMessage = ReqLogoutMessage;
var ReqJoinMessage = function() {
	message.Message.apply(this, arguments);
	this.uid = undefined;
	this.group = undefined;
};
ReqJoinMessage.prototype = new message.Message();
ReqJoinMessage.prototype.constructor = ReqJoinMessage;
exports.ReqJoinMessage = ReqJoinMessage;
var ReqLeaveMessage = function() {
	message.Message.apply(this, arguments);
	this.uid = undefined;
	this.group = undefined;
};
ReqLeaveMessage.prototype = new message.Message();
ReqLeaveMessage.prototype.constructor = ReqLeaveMessage;
exports.ReqLeaveMessage = ReqLeaveMessage;
var ReqUserListMessage = function() {
	message.Message.apply(this, arguments);
	this.uid = undefined;
	this.group = undefined;
};
ReqUserListMessage.prototype = new message.Message();
ReqUserListMessage.prototype.constructor = ReqUserListMessage;
exports.ReqUserListMessage = ReqUserListMes
$(document).ready(function() {
  $('.btn-blue').click(function() {
    $('.nav-green').addClass('nav-blue').removeClass("nav-green nav-red nav-white")
    $('.nav-red').addClass('nav-blue').removeClass("nav-green nav-red nav-white")
    $('.nav-white').addClass('nav-blue').removeClass("nav-green nav-red nav-white")
  });
  $('.btn-red').click(function() {
    $('.nav-green').addClass('nav-red').removeClass("nav-green nav-blue nav-white")
    $('.nav-blue').addClass('nav-red').removeClass("nav-green nav-blue nav-white")
    $('.nav-white').addClass('nav-red').removeClass("nav-green nav-blue nav-white")
  });
  $('.btn-green').click(function() {
    $('.nav-blue').addClass('nav-green').removeClass("nav-red nav-blue nav-white")
    $('.nav-red').addClass('nav-green').removeClass("nav-red nav-blue nav-white")
    $('.nav-white').addClass('nav-green').removeClass("nav-red nav-blue nav-white")
  });
  $('.btn-white').click(function() {
    $('.nav-blue').addClass('nav-white').removeClass("na
/** @constructor */
MusicXMLAnalyzer.ApplicationController = function() {
	var that = {},
	headerController = null,
	uploadController = null,
	dashboardController = null,
	patternController = null,
	resultController = null,
	scoreController = null,
	/**
	 * Init function of ApplicationController
	 * @function
     * @public
	 */
	init = function() {
		headerController = MusicXMLAnalyzer.HeaderController();
		headerController.init();
		uploadController = MusicXMLAnalyzer.UploadController();
		uploadController.init();
		if (Route.check('/dashboard')) {
			dashboardController = MusicXMLAnalyzer.DashboardController();
			dashboardController.init();
		}
		if (Route.check('/pattern')) {
			patternController = MusicXMLAnalyzer.PatternController();
			patternController.init();
		}
		if (Route.check('/results')) {
			resultController = MusicXMLAnalyzer.ResultController();
			resultController.init();
		}
		if (Route.check('/score')) {
			scoreController = MusicXMLAnalyzer.ScoreController();
			s
'use strict';
define(function(require, exports) {
var messageTemplate = require("./templates/message.html");
angular.module('ecgMessage', [])
.factory("MessageService", function() {
    var items = [];
    return {
        all: function() {
          return items;
        },
        create: function() {
          items.push(arguments[0]);
        }
    };
})
.controller('MessageController', ['$scope', '$filter', '$timeout', 'MessageService', function ($scope, $filter, $timeout, MessageService) {
    $scope.message = {};
    $scope.message.total = 0;
    $scope.message.msgs = [];
    $scope.message.currents = [];
    $scope.message.current = null;
    $scope.message.show = function(message) {
        message.id = (new Date()).getTime();
        message.date = $filter('date')(message.id, 'HH:mm:ss');
        $scope.message.current = message;
        $scope.message.currents.push(message);
        $scope.message.msgs.push(message);
        MessageService.create(message);
        $(document

        $timeout(function() {
            $(document.body).removeClass("msging");
            $scope.message.close();
        }, 5000);
    };
    $scope.message.close = function() {
        $scope.message.currents.pop();
        if ($scope.message.currents.length > 0) {
            $scope.message.current = $scope.message.currents[$scope.message.currents.length - 1];
        }
    };
    $scope.message.closeAll = function() {
        $(document.body).removeClass("msging");
        $scope.message.currents = [];
        $scope.message.current = null;
    };
    $scope.message.success = function(msg) {
        var message = {
            type: 'success',
            text: msg,
            show: true
        };
        $scope.message.show(message);
    };
    $scope.message.info = function(msg) {
        var message = {
            type: 'info',
            text: msg,
            show: true
        };
        $scope.message.show(message);
    };
    $scope.message.error = function(msg) {

var usersController = require('../controllers/UsersController.js'),
	socketioController = require('../controllers/SocketioController.js'),
	dogsController = require("../controllers/DogsController.js"),
    placesController = require("../controllers/PlacesController.js"),
	messagesController = require('../controllers/MessagesController.js'),
	CaptchaController = require('../controllers/CaptchaController.js'),
	notificationsController = require('../controllers/NotificationsController.js'),
    searchController = require('../controllers/SearchController.js'),
    achievmentsController = require('../controllers/AchievmentsController.js'),
    allDataController = require('../controllers/AllData.js'),
    scheduleController = require('../controllers/ScheduleController.js');
    routeController = require('../controllers/routeController.js'),
module.exports = {
    users: usersController,
    socket: socketioController,
    messages: messagesController,
    notifications: notificationsControll
'use strict';
tatool.controller('memorySpanTrainingCtrl', [ '$scope', 'service', 
    function ($scope, service) {
    $scope.stimulusService = service.stimulusService;
    $scope.inputService = service.inputService;
    $scope.start = function() {
      service.inputService.hide();
      service.inputService.disable();
      switch (service.getPhase()) {
        case 'INIT':
          service.createStimulus();
          service.setPhase('MEMORISATION');
          memorisationPhase();
          break;
        case 'MEMORISATION':
          memorisationPhase();
          break;
        case 'RECALL':
          recallPhase();
          break;
      }
    };
    function memorisationPhase() {
      service.memCounter++;
      if (service.memCounter === service.stimulus.stimulusCount) {
        service.setPhase('RECALL');
      }
      service.setStimulus();
      if (service.timerEnabled.propertyValue === true) {
        service.timerDisplayMemoranda.start(memorisationTimeUp);
      }
   

    }
    function memorisationTimeUp() {
      service.stimulusService.hide();
      if (service.suspendAfterEachItem.propertyValue) {
        service.suspendExecution();
      } else {
        if (service.getPhase() == 'MEMORISATION') {
          if (service.timerEnabled.propertyValue === true) {
            service.timerIntervalMemoranda.start(memorisationPhase);
          }
        } else {
          service.suspendExecution();
        }
      }
    }
    function recallPhase() {
      service.respCounter++;
      var stimulusText = service.recallText + ' ' + service.respCounter + ' ?';
      service.setRecallStimulus(stimulusText);
      service.startTime = service.stimulusService.show();      
      service.inputService.show();
      service.inputService.enable();
    }
    $scope.inputAction = function(input, timing, event) {
      service.inputService.disable();
      service.inputService.hide();
      service.stimulusService.hide();
      service.endTime = timing;
      proce
'use strict';
define(function(require) {
  var angular = require('angular');
    return angular.module('elicit.controllers', [])
          .controller('ChooseProblemController', require('mcda/controllers/chooseProblem'))
          .controller('WorkspaceController', require('mcda/controllers/workspace'))
          .controller('ScenarioController', require('mcda/controllers/scenario'))
          .controller('OverviewController', require('mcda/controllers/overview'))
          .controller('ScaleRangeController', require('mcda/controllers/scaleRange'))
          .controller('PartialValueFunctionController', require('mcda/controllers/partialValueFunction'))
          .controller('OrdinalSwingController', require('mcda/controllers/ordinalSwing'))
          .controller('IntervalSwingController', require('mcda/controllers/intervalSwing'))
          .controller('ExactSwingController', require('mcda/controllers/exactSwing'))
          .controller('ResultsController', require('mcda/controllers/re
'use strict';
var cmApp = angular.module('cmApp', ['ngCookies','ngSanitize']);
cmApp.config(function($routeProvider){
    $routeProvider.
        when('/',{
            controller: 'DashboardController',
            templateUrl: '/views/dashboard.html'}).
        when('/customers',{
            controller: 'CustomersController',
            templateUrl: '/views/customers.html'}).
        when('/projects',{
            controller: 'ProjectsController',
            templateUrl: '/views/projects.html'}).
        when('/calender',{
            controller: 'CalenderController',
            templateUrl: '/views/calender.html'}).
        otherwise({ redirectTo: '/'});
});
cmApp.controller('CmAppController', function($scope){
});
cmApp.controller('DashboardController', function($scope){
});
cmApp.controller('CustomersController', function($scope, customerService){
    $scope.customers = customerService.getCustomers();
});
cmApp.controller('ProjectsController',function($scope){
});
cmApp.contro
export const addTodo = (id, text) => {
  return dispatch => {
    dispatch(pendingRequest())
    dispatch(newItem(id, text, json => dispatch({...json, type: types.ADD_TODO })))
  }
export const deleteTodo = (id) => {
  return dispatch => {
    dispatch(pendingRequest())
    dispatch(deleteItem(id, json => dispatch({...json, type: types.DELETE_TODO, id: id })))
  }
export const markAll = () => {
  return (dispatch, getState) => {
    const items = getState().todos.items;
    let count = 0;
    dispatch(pendingRequest())
    items.map(item => {
      dispatch(updateItem(item.id, item.text, true, json => dispatch({...json, type: types.TOGGLE_TODO})))
        .then(() => {
          if (count === items.length - 1) {
            dispatch(requestDone())
          } else {
            count++;
          }
        })
        .catch(error => console.log(error))
    });
  }
export const deleteMarked = () => {
  return (dispatch, getState) => {
    const markedItems = getState().todos.items.filte

    let count = 0;
    
    dispatch(pendingRequest())
    markedItems.map(item => {
      dispatch(deleteItem(item.id, json => dispatch({...json, type: types.TOGGLE_TODO})))
        .then(() => {
          if (count === markedItems.length - 1) {
            dispatch(requestDone())
          } else {
            count++;
          }
        })
        .catch(error => console.log(error))      
    });
  }
export const setFilter = (filter) => {
  return {
    type: types.SET_VISIBILITY_FILTER,
    filter: filter
  }
export const pendingRequest = () => {
  return {
    type: types.PENDING_REQUEST
  }
export const requestDone = () => {
  return {
    type: types.REQUEST_DONE
  }
export const receiveTodos = (json) => {
  return {
    type: types.RECEIVE_TODOS,
    todos: json
  }
export const fetchTodos = () => {
  return dispatch => {
    dispatch(pendingRequest())
      .then(response => response.json())
      .then(json => dispatch(receiveTodos(json)))
      .catch(error => console.log(
/**
@module ang-layout
@class ang-header
*/
'use strict';
angular.module('myApp').controller('HeaderCtrl', ['$scope', 'appNav', 'appConfig', function($scope, appNav, appConfig) {
	$scope.nav ={};
	$scope.classes ={
		cont: ''
	};
	var nav;
	/**
	@method init
	*/
	function init(params) {
		nav =appNav.getNav({});
			var ppSend ={};
			ppSend.loggedIn =appConfig.state.loggedIn;
			nav =navLoginUpdate(nav, ppSend);
			setNav(nav.header, {});
		}
	}
	/**
	@method setNav
	*/
	function setNav(nav, params) {
			$scope.nav =nav;
			if($scope.nav.classes !==undefined && $scope.nav.classes.cont !==undefined && $scope.nav.classes.cont =='hidden') {
				$scope.classes.cont =$scope.nav.classes.cont;
			}
			else {
			}
		}
	}
	/**
	@param {Object} params
		@param {Object} nav
	*/
	$scope.$on('appNavHeaderUpdate', function(evt, params) {
		setNav(params.nav.header, {});
	});
	/**
	Handles post login (or reverse for logout) - need to update nav header (toggle between login / logout)
	@toc 2.
	@method
'use strict';
define(['app'], function (app) {
	var wsClientService = function ($rootScope, $resource, $q, $cookieStore, constantService, configurationService) {
		
		var ws;
		var service = {};
  	  	service.connect = function() {
  		  	
  		    ws = new WebSocket(configurationService.wsDashboard);
  		    
  		    ws.onopen = function() {
  		    	service.callback("connected");
  		    };
  		    
  		    ws.onclose = function(evt){
  			    service.callback("close");
  		    }
  		 
  		    ws.onerror = function() {
  		    	service.callback("disconnected");
  		    }
  		 
  		    ws.onmessage = function(message) {
  		    	service.callback(message.data);
  		    };
  		    service.ws = ws;
  		};
  	 
		service.send = function(message) {
			service.ws.send(message);
		};
	  	 
	  	service.subscribe = function(callback) {
	  		service.callback = callback;
	  	};
	  	 
	  	service.close = function() {
	  		ws.close();
	  	};
	  	
	  	
  	 
	  	return service; 
    };
    
    app.s
const Actions = {
  showForm: (show) => {
    return dispatch => {
      dispatch({
        type: Constants.CURRENT_BOARD_SHOW_FORM,
        show: show,
      });
    };
  },
  connectToChannel: (socket, boardId) => {
    return dispatch => {
      const channel = socket.channel(`boards:${boardId}`);
      dispatch({ type: Constants.CURRENT_BOARD_FETCHING });
      channel.join().receive('ok', (response) => {
        dispatch({
          type: Constants.BOARDS_SET_CURRENT_BOARD,
          board: response.board,
        });
      });
      channel.on('user:joined', (msg) => {
        dispatch({
          type: Constants.CURRENT_BOARD_CONNECTED_USERS,
          users: msg.users,
        });
      });
      channel.on('user:left', (msg) => {
        dispatch({
          type: Constants.CURRENT_BOARD_CONNECTED_USERS,
          users: msg.users,
        });
      });
      channel.on('list:created', (msg) => {
        dispatch({
          type: Constants.CURRENT_BOARD_LIST_CREATED,
        

        });
      });
      channel.on('card:created', (msg) => {
        dispatch({
          type: Constants.CURRENT_BOARD_CARD_CREATED,
          card: msg.card,
        });
      });
      channel.on('member:added', (msg) => {
        dispatch({
          type: Constants.CURRENT_BOARD_MEMBER_ADDED,
          user: msg.user,
        });
      });
      channel.on('card:updated', (msg) => {
        dispatch({
          type: Constants.BOARDS_SET_CURRENT_BOARD,
          board: msg.board,
        });
        dispatch({
          type: Constants.CURRENT_CARD_SET,
          card: msg.card,
        });
      });
      channel.on('list:updated', (msg) => {
        dispatch({
          type: Constants.BOARDS_SET_CURRENT_BOARD,
          board: msg.board,
        });
      });
      channel.on('comment:created', (msg) => {
        dispatch({
          type: Constants.BOARDS_SET_CURRENT_BOARD,
          board: msg.board,
        });
        dispatch({
          type: Constants.CURRENT_CARD_

          card: msg.card,
        });
      });
      dispatch({
        type: Constants.CURRENT_BOARD_CONNECTED_TO_CHANNEL,
        channel: channel,
      });
    };
  },
  leaveChannel: (channel) => {
    return dispatch => {
      channel.leave();
      dispatch({
        type: Constants.CURRENT_BOARD_RESET,
      });
    };
  },
  addNewMember: (channel, email) => {
    return dispatch => {
      channel.push('members:add', { email: email })
      .receive('error', (data) => {
        dispatch({
          type: Constants.CURRENT_BOARD_ADD_MEMBER_ERROR,
          error: data.error,
        });
      });
    };
  },
  updateCard: (channel, card) => {
    return dispatch => {
      channel.push('card:update', { card: card });
    };
  },
  updateList: (channel, list) => {
    return dispatch => {
      channel.push('list:update', { list: list });
    };
  },
  showMembersForm: (show) => {
    return dispatch => {
      dispatch({
        type: Constants.CURRENT_BOARD_SHOW_MEMBERS_FO
var searchData=
  ['registercontroller',['RegisterController',['../d7/d09/classserv_1_1_register_controller.html#a1149208957b67cadb89df45268430871',1,'serv::RegisterController']]],
  ['registerresultcontroller',['RegisterResultController',['../d9/d5f/classserv_1_1_register_result_controller.html#a86e852af3ba08f89f9314197710abd5b',1,'serv::RegisterResultController']]],
  ['rentcontroller',['RentController',['../db/d58/classserv_1_1_rent_controller.html#a57c2dcd22e3efb11f51b86797dc620d5',1,'serv::RentController']]],
  ['rentresultcontroller',['RentResultController',['../d3/ddc/classserv_1_1_rent_result_controller.html#a8e0a9b443daaeb4056a546ca328bcf63',1,'serv::RentResultController']]],
  ['returncontroller',['ReturnController',['../d5/d1c/classserv_1_1_return_controller.html#aca7c2da7b6b2513115952c5194456a9e',1,'serv::ReturnController']]],
  ['returnresultcontroller',['ReturnResultController',['../d8/de8/classserv_1_1_return_result_controller.html#a8ff22112de24a6fc2ad896c4738f4814',1,'s
var MessageControler = (function(id){
  var idDiv = id;
  var message = "";
  var messageClases = ["alert-success","alert-info","alert-warning","alert-danger"];
  var checkId = function(){
    if(idDiv === "" || idDiv == null ){
      console.log("Developer, you must to load the id for Message box");  
      return false;
    }else{
      console.log("Great, Message box id exist!"); 
      return true; 
    }
  }
  var printSucessMessage = function(message){
    printMessage(messageClases[0],message);
  }
  var printInfoMessage = function(message){
    printMessage(messageClases[1],message);
  }
  var printWarningMessage = function(message){
    printMessage(messageClases[2],message);
  }
  var printDangerMessage = function(message){
    printMessage(messageClases[3],message);
  }
  var printMessage = function(type,message){
    if(checkId()){
      removeClasses();
      addClass(type);
      addMessage(message);
    }
  }
  var removeClasses = function(){
    $.each(messageClases, fu
'use strict';
var user = require('./user');
var league = require('./league');
var member = require('./member');
function RegisterService(userService, leagueService, memberService) {
  this.userService = userService;
  this.leagueService = leagueService;
  this.memberService = memberService;
RegisterService.prototype.create = function (email, password, name, callback) {
  var me = this;
  me.userService.create(email, password, function (error, user) {
    if (error) {
      return callback(error);
    }
    me.leagueService.create(user.id, name, function (error, league) {
      if (error) {
        return callback(error);
      }
      me.memberService.create(user.id, league.id, true, function (error, member) {
        if (error) {
          return callback(error);
        }
        callback(null, {user: user, league: league, member: member});
      });
    });
  });
};
module.exports = {
  Service: RegisterService,
  createService: function (userService, leagueService, memberService) {
export default
class EditorActions extends Actions {
	static reset() {
		super.dispatch('EditorReset', arguments);
	}
	static load(file) {
		super.dispatch('EditorLoad', arguments);
	}
	static update(code) {
		super.dispatch('EditorUpdate', arguments);
	}
	static run() {
		super.dispatch('EditorRun', arguments);
	}
	static abort() {
		super.dispatch('EditorAbort', arguments);
	}
	static receiveRunning() {
		super.dispatch('EditorReceiveRunning', arguments);
	}
	static receiveSuccess(status, warnings) {
		super.dispatch('EditorReceiveSuccess', arguments);
	}
	static receiveError(message) {
		super.dispatch('EditorReceiveError', arguments);
	}
	static receiveCode(code) {
		super.dispatch('EditorReceiveCode', arguments);
	}
	static updateFilter(filter) {
		super.dispatch('EditorUpdateFilter', arguments);
	}
	static receiveExamples(examples) {
		super.dispatch('EditorReceiveExamples', arguments);
	}
	static toggleGroup(group) {
		super.dispatch('EditorToggleGroup', arguments);
	}
	static u
define(["kendo", "cart", "config"], function (kendo, cart, config) {
    return {
        baseserviceItemViewModel: {
            onAddToCart: function (clickEvt) {
                var serviceItem = clickEvt.data;
                cart.add(serviceItem);
                var aid = serviceItem.get("serviceItemId");
                serviceItem.set("serviceItemId", -1);
                serviceItem.set("serviceItemId", aid);
            },
            serviceItemUnitPrice: function (serviceItem) {
                return kendo.toString(parseFloat(serviceItem.get("serviceItemUnitPrice")), "c");
            },
            serviceItemDescription: function (serviceItem) {
                return serviceItem.get("serviceItemDescription");
            },
            serviceItemNotes: function (serviceItem) {
                return serviceItem.get("serviceItemNotes");
            },
            qtyInCart: function (serviceItem) {
                var cartItem = cart.find(serviceItem.get("serviceItemId"
"use strict";
var _ = require("underscore");
var check = new require("./exceptions").create("serviceRef");
module.exports.SimpleServiceRef = function (service, context) {
    check.notNull(service, "service");
    check.notNull(context, "context");
    var list = [];
    var instances = {};
    this.toString = function () {
        return list.join(",");
    };
    this.isRefBy = function (otherService) {
        return instances[otherService.getServiceId()] !== undefined;
    };
    
    this.get = function (otherService) {
        check.notNull(otherService, "otherService");
        var serviceInstance = instances[otherService.getServiceId()];
        if (!serviceInstance) {
            var module = service.getModule();
            var instance = context.require(module);
            serviceInstance = instance;
            if (_.isFunction(instance)) {
                serviceInstance = new instance();
            }
            if (serviceInstance.activate) {
                serviceIns
(function () {
	'use strict';
	angular.module('abt').config(function ($routeProvider) {
        $routeProvider
            .when('/', {
                controller: 'HomeController',
                controllerAs: 'vm',
                templateUrl: 'app/views/home/index.html'
            })
			.when('/students', {
                controller: 'StudentController',
                controllerAs: 'vm',
                templateUrl: 'app/views/student/index.html'
            })
			.when('/students/details/:id', {
                controller: 'StudentDetailsController',
                controllerAs: 'vm',
                templateUrl: 'app/views/student/details.html'
            })
			.when('/students/create', {
                controller: 'StudentCreateController',
                controllerAs: 'vm',
                templateUrl: 'app/views/student/create.html'
            })
			.when('/students/edit/:id', {
                controller: 'StudentEditController',
                controllerAs: 'vm',
 
﻿'use strict';
var wciApp = angular.module(
    'WCI',
    [
        'ui.bootstrap',
        'ngRoute',
        'ngSanitize',
        'ui.select'
    ]
);
wciApp.config(function ($routeProvider, $locationProvider) {
    $routeProvider
    .when('/changelog',
    {
        templateUrl: 'Views/changelog.html',
        controller: 'ChangelogController',
        controllerAs: 'cl'
    })
    .when('/ia',
    {
        templateUrl: 'Views/internalAffairs.html',
        controller: 'CountryController',
        controllerAs: 'countryCtrl'
    })
    .when('/structure',
    {
        templateUrl: 'Views/structures.html',
        controller: 'StructureController',
        controllerAs: 'structureCtrl'
    })
    .when('/military',
    {
        templateUrl: 'Views/military.html',
        controller: 'MilitaryController',
        controllerAs: 'militaryCtrl'
    })
    .when('/research',
    {
        templateUrl: 'Views/research.html',
        controller: 'ResearchController',
        controlle
define(["./unitjs"], function(unitjs)
	function TestSuite() {
		function runNextTestCase() {
			api.testCases[++api.currentTestCase]
				? api.testCases[api.currentTestCase].run(api)
				: done();
		}
		function done() {
			api.timeEnd = unitjs.now();
			if (api.isPassed == null)
				api.isPassed = true;
			api.callListeners("suiteDone", [api]);
		}
		var api = this;
		api.testCases = [];
		api.currentTestCase = -1;
		api.listeners = [];
		api.timeStart = 0;
		api.timeEnd = 0;
		api.isPassed = null;
		api.isWorking = false;
		api.callListeners = function(methodName, args) {
			if (api.isWorking)
				for (var i = 0, listener; i < api.listeners.length; i++) {
					listener = api.listeners[i];
					listener[methodName].apply(listener, args);
				}
			return api;
		};
		api.addTestCases = function() {
			for (var i = 0; i < arguments.length; i++)
				api.testCases.push(arguments[i]);
			return api;
		};
		api.addListeners = function() {
			for (var i = 0; i < arguments.length; i++)
				api
module("Ember.View - controller property");
test("controller property should be inherited from nearest ancestor with controller", function() {
  var grandparent = Ember.ContainerView.create();
  var parent = Ember.ContainerView.create();
  var child = Ember.ContainerView.create();
  var grandchild = Ember.ContainerView.create();
  var grandparentController = {};
  var parentController = {};
  Ember.run(function() {
    grandparent.set('controller', grandparentController);
    parent.set('controller', parentController);
    grandparent.pushObject(parent);
    parent.pushObject(child);
  });
  strictEqual(grandparent.get('controller'), grandparentController);
  strictEqual(parent.get('controller'), parentController);
  strictEqual(child.get('controller'), parentController);
  strictEqual(grandchild.get('controller'), null);
  Ember.run(function() {
    child.pushObject(grandchild);
  });
  strictEqual(grandchild.get('controller'), parentController);
  var newController = {};
  Ember.run(
var services = {
    '/amazon/autoscaling' : {
        title    : 'AutoScaling',
        provider : 'amazon',
        service  : 'autoscaling',
    },
    '/amazon/cloudformation' : {
        title    : 'CloudFormation',
        provider : 'amazon',
        service  : 'cloudformation',
    },
    '/amazon/cloudfront' : {
        title    : 'CloudFront',
        provider : 'amazon',
        service  : 'cloudfront',
    },
    '/amazon/cloudsearch' : {
        title    : 'CloudSearch',
        provider : 'amazon',
        service  : 'cloudsearch',
    },
    '/amazon/cloudwatch' : {
        title    : 'CloudWatch',
        provider : 'amazon',
        service  : 'cloudwatch',
    },
    '/amazon/dynamodb' : {
        title    : 'DynamoDB',
        provider : 'amazon',
        service  : 'dynamodb',
    },
    '/amazon/ec2' : {
        title    : 'Elastic Compute Cluster (EC2)',
        provider : 'amazon',
        service  : 'ec2',
    },
    '/amazon/elasticache' : {
        title    : 

        provider : 'amazon',
        service  : 'elasticache',
    },
    '/amazon/elasticbeanstalk' : {
        title    : 'Elastic Beanstalk',
        provider : 'amazon',
        service  : 'elasticbeanstalk',
    },
    '/amazon/elb' : {
        title    : 'Elastic Load Balancing (ELB)',
        provider : 'amazon',
        service  : 'elb',
    },
    '/amazon/emr' : {
        title    : 'Elastic MapReduce (EMR)',
        provider : 'amazon',
        service  : 'emr',
    },
    '/amazon/fps' : {
        title    : 'Flexible Payments Service (FPS)',
        provider : 'amazon',
        service  : 'fps',
    },
    '/amazon/glacier' : {
        title    : 'Glacier',
        provider : 'amazon',
        service  : 'glacier',
    },
    '/amazon/iam' : {
        title    : 'Identity and Access Management (IAM)',
        provider : 'amazon',
        service  : 'iam',
    },
    '/amazon/imd' : {
        title    : 'Instance MetaData (IMD)',
        provider : 'amazon',
        servic

    },
        title    : 'ImportExport',
        provider : 'amazon',
    },
    '/amazon/rds' : {
        title    : 'Relational Database Service (RDS)',
        provider : 'amazon',
        service  : 'rds',
    },
    '/amazon/redshift' : {
        title    : 'RedShift',
        provider : 'amazon',
        service  : 'redshift',
    },
    '/amazon/route53' : {
        title    : 'Route53',
        provider : 'amazon',
        service  : 'route53',
    },
    '/amazon/s3' : {
        title    : 'Simple Storage Service (S3)',
        provider : 'amazon',
        service  : 's3',
    },
    '/amazon/ses' : {
        title    : 'Simple Email Service (SES)',
        provider : 'amazon',
        service  : 'ses',
    },
    '/amazon/simpledb' : {
        title    : 'SimpleDB',
        provider : 'amazon',
        service  : 'simpledb',
    },
    '/amazon/sns' : {
        title    : 'Simple Notification Service (SNS)',
        provider : 'amazon',
        service  : 'sns',
    },
    
var class_snowflake_1_1_service_1_1_scrape_service =
    [ "ScrapeService", "class_snowflake_1_1_service_1_1_scrape_service.html#a83cce1f940d0fe848920ccc556a67155", null ],
    [ "ScrapeService", "class_snowflake_1_1_service_1_1_scrape_service.html#a7185b35c6534f63a68cb8e24674a9849", null ],
    [ "GetGameImageResults", "class_snowflake_1_1_service_1_1_scrape_service.html#a4deb5d6ccd1cf4bee8987c3b59416975", null ],
    [ "GetGameInfo", "class_snowflake_1_1_service_1_1_scrape_service.html#a979487ff644621358bc6984313a41af0", null ],
    [ "GetGameInfo", "class_snowflake_1_1_service_1_1_scrape_service.html#a1732ba65eb3f70435bffd9056d44946a", null ],
    [ "GetGameInfo", "class_snowflake_1_1_service_1_1_scrape_service.html#abe41cdee0bba83b0c20833def8a705b0", null ],
    [ "GetGameResults", "class_snowflake_1_1_service_1_1_scrape_service.html#aa6b3547c867826846f6cf09042bcf6ad", null ],
    [ "ScrapePlatform", "class_snowflake_1_1_service_1_1_scrape_service.html#aa71f61c14f3be7933b8f8c4af7e7
var express     = require('express'),
    api         = require('../api'),
    apiRoutes;
apiRoutes = function (middleware) {
    var router = express.Router();
    router.del = router.delete;
    router.get('/posts', api.http(api.posts.browse));
    router.post('/posts', api.http(api.posts.add));
    router.get('/posts/:id', api.http(api.posts.read));
    router.get('/posts/slug/:slug', api.http(api.posts.read));
    router.put('/posts/:id', api.http(api.posts.edit));
    router.del('/posts/:id', api.http(api.posts.destroy));
    router.get('/settings', api.http(api.settings.browse));
    router.get('/settings/:key', api.http(api.settings.read));
    router.put('/settings', api.http(api.settings.edit));
    router.get('/users', api.http(api.users.browse));
    router.get('/users/:id', api.http(api.users.read));
    router.get('/users/slug/:slug', api.http(api.users.read));
    router.get('/users/email/:email', api.http(api.users.read));
    router.put('/users/password', api.http(api.u

    router.put('/users/owner', api.http(api.users.transferOwnership));
    router.put('/users/:id', api.http(api.users.edit));
    router.post('/users', api.http(api.users.add));
    router.del('/users/:id', api.http(api.users.destroy));
    router.get('/tags', api.http(api.tags.browse));
    router.get('/roles/', api.http(api.roles.browse));
    router.get('/slugs/:type/:name', api.http(api.slugs.generate));
    router.get('/themes', api.http(api.themes.browse));
    router.put('/themes/:name', api.http(api.themes.edit));
    router.get('/notifications', api.http(api.notifications.browse));
    router.post('/notifications', api.http(api.notifications.add));
    router.del('/notifications/:id', api.http(api.notifications.destroy));
    router.get('/db', api.http(api.db.exportContent));
    router.del('/db', api.http(api.db.deleteAllContent));
    router.post('/mail', api.http(api.mail.send));
    router.post('/mail/test', function (req, res) {
        api.http(api.mail.sendTest)(req, 
'use strict';
describe('GameManager', function(){
    describe('playing', function(){
		var GameManagerService;
		beforeEach(module("tictactoe"));
		beforeEach(inject(function (GameManager) {
		    GameManagerService = GameManager;
		}));
        it('winners X', function(){
            GameManagerService.newGame();
            GameManagerService.move(0,0);
            GameManagerService.move(0,1);
            GameManagerService.move(1,1);
            GameManagerService.move(1,2);
            GameManagerService.move(2,2);
            expect( GameManagerService.winner ).toEqual(1);
        });
        it('winners O', function(){
            GameManagerService.newGame();
            GameManagerService.move(1,0);
            GameManagerService.move(0,0);
            GameManagerService.move(1,2);
            GameManagerService.move(0,1);
            GameManagerService.move(2,2);
            GameManagerService.move(0,2);
            expect( GameManagerService.winner ).toEqual(2);
        });
/*
 * GET page.
 */
var TITLE = 'hello, World';
var navData = [{
    path : '/',
    str  : 'Entrance',
}, {
    path : '/lounge/',
    str  : 'Lounge',
}, {
    path : '/studio/',
    str  : 'Studio',
}, {
    path : '/editroom/',
    str  : 'Edit Room',
}, {
    path : '/gear/',
    str : 'Gear',
}];
exports.index = function(req, res){
    res.render('index', {
        title : TITLE,
        currentNav : 0,
        navData : navData
    });
};
exports.lounge = function(req, res){
  res.render('lounge', {
        title : TITLE,
        currentNav : 1,
        navData : navData
    });
};
exports.studio = function(req, res){
  res.render('studio', {
        title : TITLE,
        currentNav : 2,
        navData : navData
    });
};
exports.editroom = function(req, res){
  res.render('editroom', {
        title : TITLE,
        currentNav : 3,
        navData : navData
    });
};
exports.gear = function(req, res){
  res.render('gear', {
        title : TITLE,
        currentNav : 4,
   
/** attach controllers to this module 
 * if you get 'unknown {x}Provider' errors from angular, be sure they are
 * properly referenced in one of the module dependencies in the array.
 * below, you can see we bring in our services and constants modules 
 * which avails each controller of, for example, the `config` constants object.
 **/
define([
    './footer-controller',
    './header-controller',
    './primary-controller',
  
    './about/about-controller',
    './admin/admin-controller',
    
    './campaign/campaign-controller',
    './campaign/mycampaigns/mycampaigns-controller',
    './campaign/newcampaign/newcampaign-controller',
    './campaign/requests/campaignrequests-controller',
    './campaign/search/searchcampaigns-controller',
    
    './flagged/flagged-controller',
    
    './funds/funds-controller',
    
    './help/help-controller',
    
    './home/home-controller',
    
    './jobs/jobs-controller',
   
    './login/forgotpassword-controller',
    './login/login-
"use strict";
export default class ServiceList extends React.Component {
    render() {
        const enabledServices = this.props.enabledServices;
        const {enableService, disableService, login} = this.props;
        const onEnable = (service, event) => {
            if (event.shiftKey) {
                login(service);
            } else {
                enableService(service);
            }
        };
        const onDisable = (service) => {
            disableService(service)
        };
        const serviceList = this.props.services.map(service => {
            if (enabledServices.indexOf(service.id) !== -1) {
                return <li key={service.id} className="Service--enable"
                           onClick={onDisable.bind(this, service)}><img className="Service-icon" src={service.icon}
                                                                        alt={service.name}/></li>;
            } else {
                return <li key={service.id} className="Service-
/**
 * Created with JetBrains WebStorm.
 * User: NBE01
 * Date: 14-3-9
 * Time: 下午4:53
 * To change this template use File | Settings | File Templates.
 */
var logger = require('./../common/log').getLogger();
var Constant = require('./../common/Constant');
var CategoryService = require('./CategoryService');
var UserService = require('./UserService');
var BoardService = require('./BoardService');
var PostService = require('./PostService');
var SdkPostService = require('./PostSdkService');
var UploadPicService = require('./UploadPicService');
module.exports = function (app) {
    logger.info('init service.................................');
    var daoFactory = app.get(Constant.DAO_FACTORY);
    var ServiceFactory = {};
    if (!ServiceFactory[Constant.SERVICE_BOARD]) {
        BoardService.init(daoFactory);
        ServiceFactory[Constant.SERVICE_BOARD] = BoardService;
    }
    if (!ServiceFactory[Constant.SERVICE_CATEGORY]) {
        CategoryService.init(daoFactory);
        ServiceFa
/* */ 
(function(process) {
  'use strict';
  var EventConstants = require('./EventConstants');
  var invariant = require('./invariant');
  var injection = {
    Mount: null,
    injectMount: function(InjectedMount) {
      injection.Mount = InjectedMount;
      if ("production" !== process.env.NODE_ENV) {
        ("production" !== process.env.NODE_ENV ? invariant(InjectedMount && InjectedMount.getNode, 'EventPluginUtils.injection.injectMount(...): Injected Mount module ' + 'is missing getNode.') : invariant(InjectedMount && InjectedMount.getNode));
      }
    }
  };
  var topLevelTypes = EventConstants.topLevelTypes;
  function isEndish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
  }
  function isMoveish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
  }
  function isStartish(topLevelType) {
  

  }
  var validateEventDispatches;
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches = function(event) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchIDs = event._dispatchIDs;
      var listenersIsArr = Array.isArray(dispatchListeners);
      var idsIsArr = Array.isArray(dispatchIDs);
      var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
      var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
      ("production" !== process.env.NODE_ENV ? invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
    };
  }
  function forEachEventDispatch(event, cb) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;
    if ("production" !== process.env.NODE_ENV) {
      validateEventDispatches(event);
    }
    if (Array.isArray(dis

      for (var i = 0; i < dispatchListeners.length; i++) {
        if (event.isPropagationStopped()) {
          break;
        }
        cb(event, dispatchListeners[i], dispatchIDs[i]);
      }
    } else if (dispatchListeners) {
      cb(event, dispatchListeners, dispatchIDs);
    }
  }
  function executeDispatch(event, listener, domID) {
    event.currentTarget = injection.Mount.getNode(domID);
    var returnValue = listener(event, domID);
    event.currentTarget = null;
    return returnValue;
  }
  function executeDispatchesInOrder(event, cb) {
    forEachEventDispatch(event, cb);
    event._dispatchListeners = null;
    event._dispatchIDs = null;
  }
  function executeDispatchesInOrderStopAtTrueImpl(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;
    if ("production" !== process.env.NODE_ENV) {
      validateEventDispatches(event);
    }
    if (Array.isArray(dispatchListeners)) {
      for (var i = 0; i < dispatchListener

        if (event.isPropagationStopped()) {
          break;
        }
        if (dispatchListeners[i](event, dispatchIDs[i])) {
          return dispatchIDs[i];
        }
      }
    } else if (dispatchListeners) {
      if (dispatchListeners(event, dispatchIDs)) {
        return dispatchIDs;
      }
    }
    return null;
  }
  function executeDispatchesInOrderStopAtTrue(event) {
    var ret = executeDispatchesInOrderStopAtTrueImpl(event);
    event._dispatchIDs = null;
    event._dispatchListeners = null;
    return ret;
  }
  function executeDirectDispatch(event) {
    if ("production" !== process.env.NODE_ENV) {
      validateEventDispatches(event);
    }
    var dispatchListener = event._dispatchListeners;
    var dispatchID = event._dispatchIDs;
    ("production" !== process.env.NODE_ENV ? invariant(!Array.isArray(dispatchListener), 'executeDirectDispatch(...): Invalid `event`.') : invariant(!Array.isArray(dispatchListener)));
    var res = dispatchListener ? dispatchListener(
/**
 * Created by Amit Thakkar on 10/16/15.
 */
((ng) => {
    "use strict";
    let dynamicMongooseSchemaModule = ng.module('dynamicMongooseSchema');
    dynamicMongooseSchemaModule.controller('ApiEditController', [
        'ApiService', '$routeParams',
        function (ApiService, $routeParams) {
            let apiEdit = this;
            apiEdit.activate = ['$scope', function ($scope) {
                $scope.setTitleAndPageProperty('API Edit', 'api-edit');
            }];
            apiEdit.methods = [
                'GET',
                'POST',
                'PUT',
                'DELETE'
            ];
            ApiService.get($routeParams._id)
                .success((updatedApi) => {
                    apiEdit.updatedApi = updatedApi;
                })
                .error((error)=> {
                });
            apiEdit.reset = (isManualReset) => {
                apiEdit.errorMessage = '';
                if (isManualReset) {
                    apiEdit.suc
window.PortNHTTPD={}
;(function(exports){
exports.init=function init(persistence,o,args){var nhttpd_conf_path,dispatch_path,read,write
read=persistence.read
write=persistence.write
nhttpd_conf_path=args[0]
o.devmode=devmode
o.dispatch_ls=dispatch_ls
o.dispatch_cd=dispatch_cd
o.dispatch_insert_before=dispatch_insert_before
o.dispatch_update=dispatch_update
if(!o)throw new Error('missing path argument')
identify()
read('dispatch_path',function(e,s){
  dispatch_path=e?'':s
  identify()})
function devmode(devmode_path){
  }
function dispatch_ls(out){
  xhr('GET',current_path(),null,function(x){out(x.responseText)})
  }
function dispatch_cd(path,out){
  write('dispatch_path',dispatch_path)
  identify()
  out(dispatch_path)}
function dispatch_insert_before(matchtype,matchtok,value,ref,out){
  req={before:ref
      ,value:[matchtype,matchtok,value]}
  conf_dispatch_POST(req,out)}
function dispatch_update(placement,ref,value,out){
  req={value:value}
  if(ref===undefined)ref=true
  req[placeme
/**
@module ang-layout
@class ang-header
*/
'use strict';
angular.module('myApp').controller('HeaderCtrl', ['$scope', 'appNav', 'appConfig', function($scope, appNav, appConfig) {
	$scope.nav ={};
	$scope.classes ={
		cont: ''
	};
	var nav;
	/**
	@method init
	*/
	function init(params) {
		nav =appNav.getNav({});
			var ppSend ={};
			ppSend.loggedIn =appConfig.state.loggedIn;
			nav =navLoginUpdate(nav, ppSend);
			setNav(nav.header, {});
		}
	}
	/**
	@method setNav
	*/
	function setNav(nav, params) {
			$scope.nav =nav;
			if($scope.nav.classes !==undefined && $scope.nav.classes.cont !==undefined && $scope.nav.classes.cont =='hidden') {
				$scope.classes.cont =$scope.nav.classes.cont;
			}
			else {
			}
		}
	}
	/**
	@param {Object} params
		@param {Object} nav
	*/
	$scope.$on('appNavHeaderUpdate', function(evt, params) {
		setNav(params.nav.header, {});
	});
	/**
	Handles post login (or reverse for logout) - need to update nav header (toggle between login / logout)
	@toc 2.
	@method
'use strict';
var appServices = angular.module('appServices', []);
appServices.factory('BarcodeService', ['Restangular',
    function BarcodeService (Restangular) {
        return Restangular.service('barcodes');
    }]);
appServices.factory('ConfigService', ['Restangular',
    function ConfigService (Restangular) {
        return Restangular.service('config');
    }]);
appServices.factory('ErrorService', ['Restangular',
    function ErrorService (Restangular) {
        return Restangular.service('error');
    }]);
appServices.factory('ItemService', ['Restangular',
    function ItemService (Restangular) {
        return Restangular.service('items');
    }]);
appServices.factory('SessionService', ['Restangular',
    function SessionService (Restangular) {
        return Restangular.service('session');
    }]);
appServices.factory('StocktakingService', ['Restangular',
    function StocktakingService (Restangular) {
        return Restangular.service('stocktakings');
    }]);
appServices.
const path = require('path');
const log = require(path.resolve('modules', 'logutil.js'));
const logPre = log.logPre.modules.nav.pre;
log.consoleLogger.trace(`${logPre} loading`);
const config = require(path.resolve('modules', 'configutil.js'));
const authDb =  config.get(config.subject.auth, 'authdb');
const navHashname = config.get(config.subject.auth, 'navhashname');
const roleHashname = config.get(config.subject.auth, 'rolehashname');
const redis = require(path.resolve('modules', 'redisclientpool.js'));
function getNav(roleid, callback) {
    redis.moduleClient.hget(roleHashname, roleid, (err, role) => {
        if(err) {
            log.moduleLogger.error(`${logPre} err in get role from dbsvr ${err}`);
            callback(new Error('get role error'));
        } else if(role) {
            try {
                let roleObj = JSON.parse(role);
                callback(null ,roleObj.nav);   
                log.moduleLogger.warn(`${logPre} err in parse role of ${roleid} ${e}`);
     

            }
        } else {
            log.moduleLogger.warn(`${logPre} role not found ${roleid}`);
            callback(null, false, { message: `role not found ${roleid}` });
        }
    });
function setNav(req, res, next) {
    const roleid = req.user.role;
    getNav(roleid, (err, res, message) => {
        if(err) {
            next(err);
        } else if(res) {
            req.session.nav = res;
            next();
        } else {
            next(new Error(message.message));
        }
    });
function pageNav(userNav, reqUrl) {
    let curMainNav = '';
    let curSubNav = '';
    const mainNav = {};
    const subNav = {};
    for(let nav of Object.keys(userNav)) {
        if(userNav[nav].url === reqUrl) {
            curMainNav = nav;
            curSubNav = '';
        }
        if(userNav[nav].child) {
            let child = userNav[nav].child;
            for(let sub of Object.keys(child)) {
                if(child[sub].url === reqUrl) {
                    curMainN

                    curSubNav = sub;
                }
            }
        }
    }
    if(!curMainNav) {
        for(let nav of Object.keys(userNav)) {
            mainNav[userNav[nav].order] = { title: userNav[nav].title, url: userNav[nav].url };
        }
    } else if(curMainNav && !curSubNav) {
        for(let nav of Object.keys(userNav)) {
            if(nav === curMainNav) {
                mainNav[userNav[nav].order] = { title: userNav[nav].title, url: userNav[nav].url, active: true };
                if(userNav[nav].child) {
                    let child = userNav[nav].child;
                    for(let sub of Object.keys(child)) {
                        subNav[child[sub].order] = { title: child[sub].title, url: child.child[sub].url };
                    }
                }
            } else {
                mainNav[userNav[nav].order] = { title: userNav[nav].title, url: userNav[nav].url};
            }
        }
    } else {
        for(let nav of Object.keys(userNav)) 

            if(nav === curMainNav) {
                mainNav[userNav[nav].order] = { title: userNav[nav].title, url: userNav[nav].url, active: true };
                if(userNav[nav].child) {                    
                    let child = userNav[nav].child;
                    for(let sub of Object.keys(child)) {
                        if(sub === curSubNav) {
                            subNav[child[sub].order] = { title: child[sub].title, url: child[sub].url, active: true };
                        } else {
                            subNav[child[sub].order] = { title: child[sub].title, url: child[sub].url };
                        }
                    }
                }
            } else {
                mainNav[userNav[nav].order] = { title: userNav[nav].title, url: userNav[nav].url};
            }
        }
    }
    
    return { mainNav, subNav };
function navMid(req, res, next) {
    if(req.session.nav) {
        const userNav = pageNav(req.session.nav, req.origina
define({
	/**
	 * /index
	 */
	queryServiceTag : 'admin/serviceTag/query.do',
	queryAuditServiceTags : 'admin/serviceTag/queryAuditServiceTags.do',
	uodateServiceTag : 'admin/serviceTag/update.do',
	removeServiceTag : 'admin/serviceTag/remove.do',
	addServiceTag : 'admin/serviceTag/add.do',
	uoloadServiceTagImage : 'admin/serviceTag/uploadServiceTagImage.do',
	getAuditById : 'admin/serviceTag/getAuditById.do',
	checkAuditServiceTag : 'admin/serviceTag/checkAuditServiceTag.do',
	unCheckAuditServiceTag : 'admin/serviceTag/unCheckAuditServiceTag.do',
	getAuditByServiceTagId : 'admin/serviceTag/getAuditByServiceTagId.do',
	updateAuditServiceTag : 'admin/serviceTag/updateAuditServiceTag.do',
	/**
	 * /service/user
	 */
	queryUserGroupList : 'admin/userGroup/queryGroupList.do',
	queryUserList : 'admin/userGroupRelUser/queryUserList.do',
	createUserGroup : 'admin/userGroup/addGroup.do',
	editUserGroup : 'admin/userGroup/editGroup.do',
	delUserGroup : 'admin/userGroup/delGroup.do',
	moveToBlac

	moveOutBlack : 'admin/userGroupRelUser/moveOutBlack.do',
	addUserToGroup : 'admin/userGroupRelUser/addUserToGroup.do',
	/**
	 * /service/message
	 */
	queryMessageList : 'admin/messageBox/queryMessageList.do',
	replyMessage : 'admin/replyMessage/replyMessage.do',
	/**
	 * /service/custom/survey
	 */
	getQuestClassList : 'admin/quest/getQuestClassList.do',
	addQuest : 'admin/quest/addQuest.do',
	delQuest : 'admin/quest/delQuest.do',
	publishQuest : 'admin/quest/publishQuest.do',
	queryQuestPageList : 'admin/quest/queryQuestPageList.do',
	/**
	 * /service/custom/article
	 */
	uploadTeletextImage : 'admin/service/uploadTeletextImage.do',
	/**
	 * /service/custom/reward
	 */
	uploadRewardFiles : 'admin/service/uploadRewardFiles.do',
	saveServiceReward : 'admin/service/saveServiceReward.do',
	publishServiceReward : 'admin/service/publishServiceReward.do',
	republishServiceReward : 'admin/service/republishServiceReward.do',
	queryRewardIdeas : 'admin/service/queryRewardIdeas.do',
	queryAll
(function () {
    angular
        .module("StoryGenerator")
        .config(function ($routeProvider) {
            $routeProvider
                .when("/", {
                    templateUrl: "view/main.client.view.html",
                    controller: "MainController",
                    controllerAs: "Model"})
                .when("/result1", {
                    templateUrl: "view/result1.client.view.html",
                    controller: "ResultController",
                    controllerAs: "Model"})
                .when("/result2", {
                    templateUrl: "view/result2.client.view.html",
                    controller: "ResultController",
                    controllerAs: "Model"})
                .when("/result3", {
                    templateUrl: "view/result3.client.view.html",
                    controller: "ResultController",
                    controllerAs: "Model"})
                .when("/result4", {
                    templateUrl: "view/result4.clien

                    controller: "ResultController",
                    controllerAs: "Model"})
                .when("/result5", {
                    templateUrl: "view/result5.client.view.html",
                    controller: "ResultController",
                    controllerAs: "Model"})
                .when("/result6", {
                    templateUrl: "view/result6.client.view.html",
                    controller: "ResultController",
                    controllerAs: "Model"})
                .when("/result7", {
                    templateUrl: "view/result7.client.view.html",
                    controller: "ResultController",
                    controllerAs: "Model"})
                .when("/result8", {
                    templateUrl: "view/result8.client.view.html",
                    controller: "ResultController",
                    controllerAs: "Model"})
                .when("/result9", {
                    templateUrl: "view/result9.client.view.html",
         

                    controllerAs: "Model"})
                .when("/result10", {
                    templateUrl: "view/result10.client.view.html",
                    controller: "ResultController",
                    controllerAs: "Model"})
                .when("/result11", {
                        templateUrl: "view/result11.client.view.html",
                        controller: "ResultController",
                        controllerAs: "Model"})
                .when("/result12", {
                        templateUrl: "view/result12.client.view.html",
                        controller: "ResultController",
                        controllerAs: "Model"})
                .when("/result13", {
                        templateUrl: "view/result13.client.view.html",
                        controller: "ResultController",
                        controllerAs: "Model"})
                .when("/result14", {
                        templateUrl: "view/result14.client.view.html",
           

                        controllerAs: "Model"})
                .when("/result15", {
                        templateUrl: "view/result15.client.view.html",
                        controller: "ResultController",
                        controllerAs: "Model"})
                .when("/result16", {
                        templateUrl: "view/result16.client.view.html",
                        controller: "ResultController",
                        controllerAs: "Model"})
                .when("/result17", {
                        templateUrl: "view/result17.client.view.html",
                        controller: "ResultController",
                        controllerAs: "Model"})
                .when("/result18", {
                        templateUrl: "view/result18.client.view.html",
                        controller: "ResultController",
                        controllerAs: "Model"})
                .when("/result19", {
                        templateUrl: "view/result19.client.view.ht
(function() {
    'use strict';
angular.module('ag-admin').controller('ApiOverviewController', function ($scope, $state, flash, ApiRepository) {
    $scope.api = {};
    $scope.defaultApiVersion = 1;
    $scope.deleteApiPanelIsCollapsed = true;
    var updateApi = function (api) {
        $scope.api = api;
        $scope.defaultApiVersion = api.default_version;
    };
    $scope.setDefaultApiVersion = function () {
        flash.info = 'Setting the default API version to ' + $scope.defaultApiVersion;
        ApiRepository.setDefaultApiVersion($scope.api.name, $scope.defaultApiVersion).then(function (data) {
            flash.success = 'Default API version updated';
            $scope.defaultApiVersion = data.version;
        });
    };
    $scope.$on('api.version.update', function () {
        ApiRepository.getApi($state.params.apiName, $state.params.version, true).then(function (api) {
            updateApi(api);
        });
    });
    $scope.removeApi = function (recursive) {
      
require('colors');
var util = require('util');
var moment = require('moment');
var logentries = require('node-logentries');
var config = require('../../config');
var stub = require('./stub');
var log = logentries.logger({
    token: config.logentries.token,
    printerror: false
});
log.level('debug');
var logger = {
    success: function (message) {
        message = typeof message === 'string' ? message : JSON.stringify(message);
        console.log(this.timestamptMessage(util.format('SUCCESS: %s', message)).green);
        log.log('info', message);
    },
    warning: function (message) {
        message = typeof message === 'string' ? message : JSON.stringify(message);
        console.log(this.timestamptMessage(util.format('WARNING: %s', message)).yellow);
        log.log('warning', message);
    },
    error: function (message) {
        message = typeof message === 'string' ? message : JSON.stringify(message);
        console.log(this.timestamptMessage(util.format('ERROR: %s', me

        log.log('err', message);
    },
    fatal: function (message) {
        message = typeof message === 'string' ? message : JSON.stringify(message);
        console.log(this.timestamptMessage(util.format('ERROR: %s', message)).red);
        log.log('emerg', message);
    },
    info: function (message) {
        message = typeof message === 'string' ? message : JSON.stringify(message);
        console.log(this.timestamptMessage(message));
        log.log('info', message);
    },
    connector: function (name) {
        var me = this;
        return {
            info: function (message) {
                me.info('connector ' + name + ': ' + message);
            },
            warning: function (message) {
                me.warning('connector ' + name + ': ' + message);
            },
            error: function (message) {
                me.error('connector ' + name + ': ' + message);
            },
            success: function (message) {
                me.success('connect
/** SpagoBI, the Open Source Business Intelligence suite
 * Copyright (C) 2012 Engineering Ingegneria Informatica S.p.A. - SpagoBI Competency Center
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0, without the "Incompatible With Secondary Licenses" notice.
/**
 *
 * A service proxy object
 *
 *
 *  @author
 *  Andrea Gioia (andrea.gioia@eng.it)
 */
Ext.define('Sbi.service.ServiceReg', {
	extend: 'Ext.util.Observable'
	, config: {
		serviceBaseConfs: {}
		, services: {}
	}
	, constructor : function(config) {
		this.initConfig(config);
		this.callParent();
	}
	, addServiceBaseConf: function(name, baseConf) {
		this.serviceBaseConfs[name] = baseConf;
	}
	, registerService: function(serviceName, serviceConf, serviceBaseConfs) {
		if(Sbi.isValorized(serviceBaseConfs)) {
			if(Ext.isString(serviceBaseConfs)) {
				serviceBaseConfs = this.serviceBaseConfs[serviceBaseConfs];
				if(Sbi.isValorized(serviceBaseConfs) == false) {
					Sbi.warn("[ServiceReg.r

				}
			}
		}
		var conf = Ext.apply({}, serviceConf || {}, serviceBaseConfs || {});
		var service = Ext.create('Sbi.service.RestService', conf);
		this.services[serviceName] = service;
		return service;
	}
	, getService: function(serviceName) {
		return this.services[serviceName];
	}
	, getServiceUrl: function(serviceName, options) {
		var serviceUrl = null;
		var service = this.services[serviceName];
		if(service) {
			serviceUrl = service.getServiceUrl(options);
		} else {
			Sbi.warn("[ServiceReg.callService]: service [" + serviceName + "] does not exist. Available service are [" + Sbi.toSource(this.services, true) + "]");
		}
		return serviceUrl;
	}
	, callService: function(serviceName, options) {
		var serviceCalled = true;
		var service = this.getService(serviceName);
		if(service) {
			service.doRequest(options);
		} else {
			serviceCalled = false;
			Sbi.warn("[ServiceReg.callService]: service [" + serviceName + "] does not exist. Available service are [" + Sbi.toSource(thi
/**
 * Created by Richard Treichl on 14.04.2016.
 */
function createNavBars(){
    $("#navBar").jqxNavBar({
        theme: "metrodark",
        height: 40,
        selectedItem: 0
    });
    $("#navBar2").jqxNavBar({
        height: 300,
        width: '100%',
        minimizedHeight: 40,
        minimizeButtonPosition: 'right',
        orientation: 'vertical',
        selectedItem: 0,
        minimized: true,
        theme: "metrodark",
    });
    $("#navBar2").jqxNavBar({ minimizedTitle: 'Home: Overview'});
    $("#navBar2").jqxNavBar('open');
    $("#navBar2").jqxNavBar('close');
    $('#navBar2').on('change', function (event) {
        var index = $("#navBar2").jqxNavBar('getSelectedIndex');
        var text =  $('#navBar2').jqxNavBar('minimizedTitle');
        part = $(event.owner._items[index]).attr("data");
        text = text.split(':');
        text = text[0] + ': ' + event.owner._items[index].innerText;
        $("#navBar2").jqxNavBar({ minimizedTitle: text});
        $('#n
$(function () {
    var $navTop = $('#topNav'), $navMain = $navTop.find('#navMain'), $navSub = $navMain.find('#navSub'), $navIndex = $navMain.find('#navIndex'), de = 200;
    $navIndex.mouseenter(function () {
        $navSub.show().stop().animate({
            'height': '187px'
        }, de);
        $navTop.stop().animate({
            'height': '242px'
        }, de);
    });
    $navMain.mouseleave(function () {
        $navSub.stop().animate({
            'height': '3px'
        }, de, function () {
            $navSub.hide();
        });
        $navTop.stop().animate({
            'height': '75px'
        }, de);
    });
    $navIndex.find('li:not(:eq(0))').mouseenter(function () {
        var $this = $(this), i = $this.index() - 1;
        $(this).addClass('nav3').siblings().removeClass('nav3');
        $navSub.find('dt:eq(' + i + ')').show();
    }).mouseleave(function () {
        var $this = $(this), i = $this.index() - 1;
        $this.removeClass('nav3');
        $navSub.
var logger = require('cloud/lib/logger');
var serviceSetting = require('cloud/app.config.js').settings.webservice;
var ParseMessage = Parse.Object.extend('Message');
module.exports.convertToMessageModel = function(parseMessage) {
	var message = {};
	message.id = parseMessage.id;
	message.creatorId = parseMessage.get('creatorId');
	message.receiverId = parseMessage.get('receiverId');
	message.creatorName = parseMessage.get('creatorName');
	message.messageType = parseMessage.get('messageType');
	message.messageTitle = parseMessage.get('messageTitle');
	message.messageBody = parseMessage.get('messageBody');
	message.createdAt = parseMessage.createdAt;
	message.isRead = parseMessage.get('isRead');
	return message;
};
module.exports.addMessage = function(creatorId, receiverId, creatorName, order, messageType, messageText) {
	var parseMessage = new ParseMessage();
	parseMessage.set('creatorId', creatorId);
	parseMessage.set('receiverId', receiverId);
	parseMessage.set('creatorName', creatorN

	parseMessage.set('messageType', messageType);
	var messageTitle = constructMessageTitle(order, messageType, messageText);
	parseMessage.set('messageTitle', messageTitle);
	var messageBody = constructMessageBody(order, messageType, messageText);
	parseMessage.set('messageBody', messageBody);
	parseMessage.set('isRead', false);
	return parseMessage.save();
};
module.exports.addWelcomeMessage = function(signedUpUser) {
	var parseMessage = new ParseMessage();
	parseMessage.set('creatorId', 'parse_admin');
	parseMessage.set('receiverId', signedUpUser.id);
	parseMessage.set('creatorName', '微蜂团购');
	parseMessage.set('messageType', 'sendEmailVerification');
	parseMessage.set('messageTitle', '');
	parseMessage.set('messageBody', '');
	parseMessage.set('isRead', false);
	return parseMessage.save();
};
module.exports.constructMessageTitle = function(order, messageType, messageText) {
	return constructMessageTitle(order, messageType, messageText);
};
module.exports.constructMessageBody = functio

	return constructMessageBody(order, messageType, messageText);
};
module.exports.constructHtmlMessageBody = function(order, messageType, messageText) {
	var orderUrl = order? serviceSetting.baseUrl + '/#/orderDetail/' + order.id : '';
	var messageBody = messageText? '卖家信息:\n' + messageText : '';
	if (messageType == 'productArrived') {
		return '您定的货, ' 
			+ '<a href="' + orderUrl + '">'
			+      order.dealName 
			+ '</a>'
			+ ', 已经可以取货了.\n'
			+ messageBody;
	}
	if (messageType == 'general') {
		return order? 
			'您的微蜂团购消息, ' 
			+ '<a href="' + orderUrl + '">'
			+      order.dealName 
			+ '</a>\n'
			+ messageBody 
			: 
			'您的微蜂团购取消消息';
	}
	return null; 
};
var constructMessageBody = function(order, messageType, messageText) {
	var messageBody = messageText? '卖家信息:\n' + messageText : '';
	if (messageType == 'productArrived') {
		return messageBody;
	}
	if (messageType == 'general') {
		return messageBody;
	}
	return null; 
};
var constructMessageTitle = function(order, message
describe('EIGENFACTORIZER.default_options', function () {
  var default_options = EIGENFACTORIZER.default_options;
  describe('#makeComplete', function () {
    it('should return an object when passed null', function () {
      expect(default_options.makeComplete(null)).toEqual(
	default_options.defaults);
    });
    it('should fill in missing values from default', function () {
      expect(default_options.makeComplete(
	{show_modal: true,
	 color_scheme: 0})).toEqual(
	   { debug: false,
	     show_modal: true,
	     show_color_key: true,
	     show_impact: true,
	     show_search: true,
	     show_share: true,
	     color_scheme: 0});
      expect(default_options.makeComplete(
	{debug: true,
	 color_scheme: 0})).toEqual(
	   { debug: true,
	     show_modal: true,
	     show_color_key: true,
	     show_impact: true,
	     show_search: true,
	     show_share: true,
	     color_scheme: 0});
      expect(default_options.makeComplete(
	{debug: true,
	 show_modal: true})).toEqual(
	   { 
var nav__catapult_8c =
    [ "NAV_CATAPULT_ACCELERATION_THRESHOLD", "nav__catapult_8c.html#a7d8f0758b0966827a70c1cb6c3c41db3", null ],
    [ "NAV_CATAPULT_HEADING_DELAY", "nav__catapult_8c.html#a324a2d68af6b57aaeb318b5c7086ac4f", null ],
    [ "NAV_CATAPULT_INITIAL_PITCH", "nav__catapult_8c.html#a698a2e847494cc1bde2f621a2d5bc958", null ],
    [ "NAV_CATAPULT_INITIAL_THROTTLE", "nav__catapult_8c.html#a605f716f37ba4dd117402212690eabd1", null ],
    [ "NAV_CATAPULT_MOTOR_DELAY", "nav__catapult_8c.html#a5ff5d0d94501c89d3c6c886b3cb6ad46", null ],
    [ "nav_catapult_highrate_module", "nav__catapult_8c.html#afc9cb27f8b568c7117d4fc7bfd09afbc", null ],
    [ "nav_catapult_run", "nav__catapult_8c.html#a9099e0b41a20bd476fd1bf3703c1a060", null ],
    [ "nav_catapult_setup", "nav__catapult_8c.html#a2c6a974377ff09c2975c1b20bfbebf3b", null ],
    [ "nav_select_touch_down", "nav__catapult_8c.html#a93764b8ee0dbc837ad7c46d752d9299b", null ],
    [ "nav_catapult_acceleration_threshold", "nav__catapult_8
(function Test() {
	'use strict';
	eval(uate)('Testing');
	/**
	 * Testings.
	 *
	 * @param {String} foo
	 * @param {Object} bar
	 */
	window.x = function (foo, bar) {
		var y = {};
	};
	/**
	 * My funny function
	 *
	 * @param {String} test
	 * @return {boolean} whaterver
	 */
	/*
	function funny(str) {
		return !!str;
	}
	var x = {
	};
	x['.y (z)'] = function () {
		this.tested = function () {
			this.tested2 = 3;
		};
		var test = 1;
		eval(uate)(this);
		eval(uate)(x);
		eval(uate)(test);
	};
	*/
	/*
	var a = { b: function () {
		this.c = 1;
		function test() {}
		this.c.d = 2;
		this.c2 = {
			d2: 1,
			e: {
				f: null
			}
		};
	}};
	*/
	/*
	var a = {b:{}};
	a.b['c'] = {d: 1};
	*/
	/*
	function six() {}
	var seven = function () {}
	var eight, nine = 9;
	nine = 10;
	eight, nine;
	var ten, eleven;
	nine.ten = {};
	*/
	/*
	var foo = function () {
		this.bar = 1;
	};
	*/
	/*
	function a() {
		b = function () {}
		function c() {
			var d1 = function () {}
			d2 = function () {}
			fu
var Datastore = require('nedb');
var Q = require('q');
if (typeof db == 'undefined') 
	db = {};
db.show = new Datastore("show.db");
db.show.loadDatabase();
function Show() {
	this.name = null;
	this.seasons = [];
	Show.setupMethods(this);
Show.setupMethods = function(show) {
	show.save = function() {
		var deferred = Q.defer();	
		
		if (show._id) {
			db.show.update({_id : show._id}, show, {}, function(err) {
				if (err) {
					deferred.reject(new Error(err));
				} else {
					deferred.resolve(show);
				}
			});
		} else {
			db.show.insert(show, function(err, newDoc) {
				if (err) {
					deferred.reject(new Error(err));
				} else {
					show._id = newDoc._id;
					deferred.resolve(show);
				}
			});
		}
		
		return deferred.promise;
	};
	show.planNextCheck = function(seconds) {
		show.nextCheck = new Date(new Date().getTime() + seconds * 1000).toJSON();		
	};
};
Show.getAll = function(done) {
	db.show.find({}, function(err, show) {
		if (err) {
			console.log(err);
			done(err,
define(['controller/appCtrl',
        'controller/loginCtrl',
        'controller/settingCtrl',
        'controller/aboutCtrl',
        'controller/feedbackCtrl',
        'controller/timelineCtrl',
        'controller/itemCtrl',
        'controller/postCtrl',
        'controller/contactCtrl',
        'controller/commentCtrl',
        'controller/messageCtrl',
        'controller/languageCtrl'],function(appCtrl,loginCtrl,settingCtrl,aboutCtrl,feedbackCtrl,timelineCtrl,itemCtrl,postCtrl,contactCtrl,commentCtrl,messageCtrl,languageCtrl) {
    var module = {
        module: function(name){
            var controller;
            switch (name){
                case 'appCtrl':
                    controller = appCtrl;
                    break;
                case 'loginCtrl':
                    controller = loginCtrl;
                    break;
                case 'settingCtrl':
                    controller = settingCtrl;
                    break;
                case 'aboutCtrl':
   
var dataflows = require ('dataflo.ws');
function Worker (conf, appName, serviceName) {
	this.conf     = conf;
	this.appName  = appName;
	this.services = {};
	if (serviceName)
		return this.launchService (serviceName);
	this.requestServiceName (
		conf,
		appName,
		this.startServices.bind (this)
	);
Worker.prototype.requestServiceName = function (conf, appName, callback) {
	process.send ({request: 'service'});
	process.on ('message', function keyHandler (msg) {
		if (msg.request && msg.request === 'service') {
			callback (msg.response);
			process.removeListener ('message', keyHandler);
		}
	});
Worker.prototype.launchService = function (serviceType) {
	var conf = this.conf;
	var serviceConfig = conf.service[serviceType];
	var service = dataflows.service (serviceConfig.module || serviceType);
	if ('function' !== typeof service) {
		console.error('Cannot load service "%s"', serviceType);
		process.exit (1);
		return;
	}
	if (!this.busy) {
		var worker = new service (serviceConfig, this

		this.services[serviceType] = worker;
		worker.on ('ready', function () {
			this.busy = false;
			if (this.queue.length) {
				var serviceType = this.queue.shift ();
				this.launchService (serviceType);
			} else {
				this.callback && this.callback ();
			}
		}.bind (this));
		this.busy = true;
	} else {
		this.queue.push (serviceType);
	}
Worker.prototype.startServices = function (serviceName) {
	var conf = this.conf;
	var appConfig = conf.app[this.appName];
	var serviceNames = appConfig.services;
	var serviceConfig = conf.service[serviceName];
	this.queue = [];
	this.callback = function () {
		process.send ({status: 'ready'});
	}
	if (serviceNames.indexOf (serviceName) >= 0) {
		this.launchService (serviceName);
	}
	serviceNames.filter (function (otherServiceName) {
		var service = dataflows.service (
			conf.service[otherServiceName].module || otherServiceName
		);
		var keyNames = service.keyNames
		? service.keyNames (serviceConfig)
		: [otherServiceName];
		if (serviceName =
/*
	SlideShow banerow wraz z funckją inicjujaca.
	Kraków 2010-02-05
*/
  jQuery.fn.log = function (msg) {
      console.log("%s: %o", msg, this);
      return this;
  };
var slideShow={
	banners:null,
	timer:null,
	interval:3000,
	current:0,
	max:0,
	_allow:true,
	showNext:function(){
	if(this._allow){
		
		this.timer=setTimeout("slideShow.renderEffect()",slideShow.interval);
		this.current++;
		if(this.current>=this.max){this.current=0}
	}
	},
		
	renderEffect:function(){
		slideShow.points.removeClass("active").eq(slideShow.current).addClass("active");
		if(slideShow.current==0){
			slideShow.banners.eq(0).show();
			slideShow.banners.not(":first, :last").hide();
			slideShow.banners.eq(slideShow.max-1).fadeOut(2000,function(){slideShow.showNext()})
		}
		else{
			slideShow.banners.eq(slideShow.current).fadeIn(2000,function(){slideShow.showNext()})
		}
	},
		
	init:function(){
		this.banners=$('.pictures .banners li');
		this.max=this.banners.length;
		if(this.max){if(this.max>1){
		
require("../env");
require("../../d3");
var vows = require("vows"),
    assert = require("assert");
var suite = vows.describe("d3.dispatch");
suite.addBatch({
  "dispatch": {
    topic: function() {
      return d3.dispatch;
    },
    "returns a map of dispatchers for each event type": function(dispatch) {
      assert.deepEqual(dispatch(), {});
      var d = dispatch("foo");
      assert.isTrue("foo" in d);
      assert.isFalse("bar" in d);
      var d = dispatch("foo", "bar");
      assert.isTrue("foo" in d);
      assert.isTrue("bar" in d);
    },
    "added listeners receive subsequent events": function(dispatch) {
      var d = dispatch("foo"), events = 0;
      d.foo.add(function() { ++events; });
      d.foo.dispatch();
      assert.equal(events, 1);
      d.foo.dispatch();
      d.foo.dispatch();
      assert.equal(events, 3);
    },
    "the listener is passed any arguments to dispatch": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, aa, bb;
      d.foo.a

      d.foo.dispatch(a, b);
      assert.equal(aa, a);
      assert.equal(bb, b);
      d.foo.dispatch(1, "foo");
      assert.equal(aa, 1);
      assert.equal(bb, "foo");
    },
    "the listener's context is the same as dispatch's": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, that;
      d.foo.add(function() { that = this; });
      d.foo.dispatch.call(a);
      assert.equal(that, a);
      d.foo.dispatch.call(b);
      assert.equal(that, b);
    },
    "listeners are notified in the order they are first added": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, those = [];
      function A() { those.push(a); }
      function B() { those.push(b); }
      d.foo.add(A);
      d.foo.add(B);
      d.foo.dispatch();
      assert.deepEqual(those, [a, b]);
      those = [];
      d.foo.remove(A);
      d.foo.add(A);
      d.foo.dispatch();
      assert.deepEqual(those, [a, b]);
    },
    "removed listeners do not receive subsequent events": functio

      var d = dispatch("foo"), a = {}, b = {}, those = [];
      function A() { those.push(a); }
      function B() { those.push(b); }
      d.foo.add(A);
      d.foo.add(B);
      d.foo.dispatch();
      those = [];
      d.foo.remove(A);
      d.foo.dispatch();
      assert.deepEqual(those, [b]);
    },
    "adding an existing listener has no effect": function(dispatch) {
      var d = dispatch("foo"), events = 0;
      function A() { ++events; }
      d.foo.add(A);
      d.foo.dispatch();
      d.foo.add(A);
      d.foo.add(A);
      d.foo.dispatch();
      assert.equal(events, 2);
    },
    "removing a missing listener has no effect": function(dispatch) {
      var d = dispatch("foo"), events = 0;
      function A() { ++events; }
      d.foo.remove(A);
      d.foo.add(A);
      d.foo.remove(A);
      d.foo.remove(A);
      d.foo.dispatch();
      assert.equal(events, 0);
    },
    "adding a listener does not affect the current event": function(dispatch) {
      var d = dispatch(
engine.createMessageFiles("skill_message.xml");
engine.createMessageFiles("form_message.xml");
engine.createMessageFiles("vocation_message.xml");
engine.createMessageFiles("battle_message.xml");
engine.createMessageFiles("player_message.xml");
engine.createMessageFiles("common_message.xml");
engine.createMessageFiles("quest_message.xml");
engine.createMessageFiles("chat_message.xml");
engine.createMessageFiles("human_message.xml");
engine.createMessageFiles("pet_message.xml");
engine.createMessageFiles("scene_message.xml");
engine.createMessageFiles("item_message.xml");
engine.createMessageFiles("mail_message.xml");
engine.createMessageFiles("prize_message.xml");
engine.createMessageFiles("monster_message.xml");
engine.createMessageFiles("buffer_message.xml");
engine.createMessageFiles("rep_message.xml");
engine.createMessageFiles("mall_message.xml");
engine.createMessageFiles("vit_message.xml");
engine.createMessageFiles("transfer_vocation_message.xml");
engine.createMessageFiles("int
var modules =
    [ "Adc_api", "group__adc__api.html", "group__adc__api" ],
    [ "Can_api", "group__can__api.html", "group__can__api" ],
    [ "Comp_api", "group__comp__api.html", "group__comp__api" ],
    [ "Eeprom_api", "group__eeprom__api.html", "group__eeprom__api" ],
    [ "Flash_api", "group__flash__api.html", "group__flash__api" ],
    [ "Fpu_api", "group__fpu__api.html", "group__fpu__api" ],
    [ "Gpio_api", "group__gpio__api.html", "group__gpio__api" ],
    [ "Hibernate_api", "group__hibernate__api.html", "group__hibernate__api" ],
    [ "I2c_api", "group__i2c__api.html", "group__i2c__api" ],
    [ "Interrupt_api", "group__interrupt__api.html", "group__interrupt__api" ],
    [ "Mpu_api", "group__mpu__api.html", "group__mpu__api" ],
    [ "Pwm_api", "group__pwm__api.html", "group__pwm__api" ],
    [ "Qei_api", "group__qei__api.html", "group__qei__api" ],
    [ "Ssi_api", "group__ssi__api.html", "group__ssi__api" ],
    [ "Sw_crc_api", "group__sw__crc__api.html", "group__sw__c
var $i;
var PersonRoute = function(di) {
  $i = di;
  $i.graoExpress.get('/service/person/count',
    $i.controllers.passport.service.validateJson, 
  	$i.controllers.person.service.count);
  $i.graoExpress.get('/service/person/:id', 
    $i.controllers.passport.service.validateJson,
  	$i.controllers.person.service.get);
  $i.graoExpress.put('/service/person/:id', 
    $i.controllers.passport.service.validateJson,
  	$i.controllers.person.service.validate, 
    $i.controllers.person.service.update);
  $i.graoExpress.del('/service/person/:id', 
    $i.controllers.passport.service.validateJson,
  	$i.controllers.person.service.destroy);
  $i.graoExpress.get('/service/person', 
    $i.controllers.passport.service.validateJson,
  	$i.controllers.person.service.query);
  $i.graoExpress.post('/service/person/validate', 
    $i.controllers.passport.service.validateJson,
  	$i.controllers.person.service.validate, 
  	function(req, res){ 
  	  res.json($i.event.newSuccess("Successful validatio
/**
 * Main application routes
 */
'use strict';
module.exports = function(app) {
    app.use('/api/users', require('./api/user'));
    app.use('/api/categories', require('./api/category'));
    app.use('/api/foods', require('./api/food'));
    app.use('/api/tables', require('./api/table'));
    app.use('/api/taxes', require('./api/tax'));
    app.use('/api/discounts', require('./api/discount'));
    app.use('/api/orders', require('./api/order'));
    /*    app.use('/auth', require('./auth'));
        app.use('/api/users', require('./api/user'));
        app.use('/api/foods', require('./api/food'));
        app.use('/api/images', require('./api/image'));
        app.use('/api/taxes', require('./api/tax'));
        app.use('/api/discounts', require('./api/discount'));
        app.use('/api/tables', require('./api/table'));
        app.use('/api/orders', require('./api/order'));
        app.use('/api/things', require('./api/thing'));
        app.use('/api/updates', require('./api/update'
(function(){
	LetDooJS.Core.Process = function (_R) {
		var call = [],
			routeWaiting = [] ;
		LetDooJS.Core.Process.prototype.runAction = function (_R) {
			routeWaiting.push(_R);
			if(routeWaiting.length == 1) processAction(_R);
		};
		LetDooJS.Core.Process.callbackRender = function(){
			routeWaiting.shift();
			LetDooJS.Core.Controller.renderApplied = false;
			if(routeWaiting[0]) processAction(routeWaiting[0]);
		};
		function processAction (_R) {
			if (typeof _R == "function") {
				_R();
				LetDooJS.Core.Process.callbackRender();
				return false;
			}
			var nameController = _R.controller[0].toUpperCase() + _R.controller.substring(1) + "Controller";
			if(!call[nameController]){
				LetDooJS.System.load([nameController+"-Controller"] , function () {
					var controllerCalled = LetDooJS.System.getController(nameController);
					controllerCalled.bindController(nameController, LetDooJS.Controller[nameController]);
					var require = ( controllerCalled[nameController]["require
$(document).ready(function() {
	/*$("div#show-1").click(
	  function () {
		$("div#nav-1").stop(true, true).slideToggle();
		$("div#show-1 div.z-nav").toggleClass("active");
	  }
	);
	$("div#show-1").hover(
		function() {
			$("div#show-1").closest("div.showAllButton").addClass("orange");
			$("div#show-1 div.z-nav").addClass("orange");
		},
		
		function() {
			$("div#show-1").closest("div.showAllButton").removeClass("orange");
			$("div#show-1 div.z-nav").removeClass("orange");
		}
	);
	$("div#show-2").click(
	  function () {
		$("div#nav-2").stop(true, true).slideToggle();
		$("div#show-2 div.z-nav").toggleClass("active");
	  }
	);
	$("div#show-2").hover(
		function() {
			$("div#show-2").closest("div.showAllButton").addClass("orange");
			$("div#show-2 div.z-nav").addClass("orange");
		},
		
		function() {
			$("div#show-2").closest("div.showAllButton").removeClass("orange");
			$("div#show-2 div.z-nav").removeClass("orange");
		}
	);
	$("div#show-3").click(
	  function () {
		$("d

		$("div#show-3 div.z-nav").toggleClass("active");
	  }
	);
	$("div#show-3").hover(
		function() {
			$("div#show-3").closest("div.showAllButton").addClass("orange");
			$("div#show-3 div.z-nav").addClass("orange");
		},
		
		function() {
			$("div#show-3").closest("div.showAllButton").removeClass("orange");
			$("div#show-3 div.z-nav").removeClass("orange");
		}
	);
	$("div#show-4").click(
	  function () {
		$("div#nav-4").stop(true, true).slideToggle();
		$("div#show-4 div.z-nav").toggleClass("active");
	  }
	);
	$("div#show-4").hover(
		function() {
			$("div#show-4").closest("div.showAllButton").addClass("orange");
			$("div#show-4 div.z-nav").addClass("orange");
		},
		
		function() {
			$("div#show-4").closest("div.showAllButton").removeClass("orange");
			$("div#show-4 div.z-nav").removeClass("orange");
		}
	);
	$("div#show-5").click(
	  function () {
		$("div#nav-5").stop(true, true).slideToggle();
		$("div#show-5 div.z-nav").toggleClass("active");
	  }
	);
	$("div#show-5").ho

		function() {
			$("div#show-5").closest("div.showAllButton").addClass("orange");
			$("div#show-5 div.z-nav").addClass("orange");
		},
		
		function() {
			$("div#show-5").closest("div.showAllButton").removeClass("orange");
			$("div#show-5 div.z-nav").removeClass("orange");
		}
	);
	$("div#show-6").click(
	  function () {
		$("div#nav-6").stop(true, true).slideToggle();
		$("div#show-6 div.z-nav").toggleClass("active");
	  }
	);
	$("div#show-6").hover(
		function() {
			$("div#show-6").closest("div.showAllButton").addClass("orange");
			$("div#show-6 div.z-nav").addClass("orange");
		},
		
		function() {
			$("div#show-6").closest("div.showAllButton").removeClass("orange");
			$("div#show-6 div.z-nav").removeClass("orange");
		}
	);
	$("div#show-7").click(
	  function () {
		$("div#nav-7").stop(true, true).slideToggle();
		$("div#show-7 div.z-nav").toggleClass("active");
	  }
	);
	$("div#show-7").hover(
		function() {
			$("div#show-7").closest("div.showAllButton").addClass("orange

			$("div#show-7 div.z-nav").addClass("orange");
		},
		
		function() {
			$("div#show-7").closest("div.showAllButton").removeClass("orange");
			$("div#show-7 div.z-nav").removeClass("orange");
		}
	);
	$("div#show-8").click(
	  function () {
		$("div#nav-8").stop(true, true).slideToggle();
		$("div#show-8 div.z-nav").toggleClass("active");
	  }
	);
	$("div#show-8").hover(
		function() {
			$("div#show-8").closest("div.showAllButton").addClass("orange");
			$("div#show-8 div.z-nav").addClass("orange");
		},
		
		function() {
			$("div#show-8").closest("div.showAllButton").removeClass("orange");
			$("div#show-8 div.z-nav").removeClass("orange");
		}
	);
	$("div#show-9").click(
	  function () {
		$("div#nav-9").stop(true, true).slideToggle();
		$("div#show-9 div.z-nav").toggleClass("active");
	  }
	);
	$("div#show-9").hover(
		function() {
			$("div#show-9").closest("div.showAllButton").addClass("orange");
			$("div#show-9 div.z-nav").addClass("orange");
		},
		
		function() {
			$("d
'use strict';
var AppDispatcher = require('../app-dispatcher'),
    config = require('./document.config'),
    Interactions = config.Interactions,
    DocumentService = require('./document.service');
var dispatch = function(eventName, data) {
    AppDispatcher.dispatch({
        eventName: eventName,
        data: data
    });
};
var DocumentInteractions = {
    loadAll: function() {
        dispatch(Interactions.LOAD_DOCUMENTS);
        DocumentService.getAll();
    },
    create: function(document) {
        dispatch(Interactions.CREATE_DOCUMENT, document);
        DocumentService.create(document);
    },
    update: function(document) {
        dispatch(Interactions.UPDATE_DOCUMENT, document);
        DocumentService.update(document);
    },
    delete: function(document) {
        dispatch(Interactions.DELETE_DOCUMENT, document);
        DocumentService.delete(document);
    },
    activate: function(document) {
        dispatch(Interactions.ACTIVATE_DOCUMENT, document);
    },
   
module.exports.routes = {
  /* TODO MAIN */
  '/': {
    controller: 'PromoController',
    action: 'promo'
  },
  '/panel':  {
    controller: 'PromoController',
    action: 'index'
  },
  /* TODO SETTINGS */
  '/settings': {
    controller: 'SettingsController',
    action: 'index'
  },
  '/get/vin': {
    controller: 'SettingsController',
    action: 'getVin'
  },
  '/get/makes/': {
    controller: 'SettingsController',
    action: 'getMakes'
  },
  '/get/models/:make/:year': {
    controller: 'SettingsController',
    action: 'getModels'
  },
  '/get/info/models/:type/:id/:year': {
    controller: 'SettingsController',
    action: 'getInfoModels'
  },
  '/set/param': {
    controller: 'SettingsController',
    action: 'setParam'
  },
  /* TODO USER */
  '/user/new':{
    controller: 'UserController',
    action: 'new'
  },
  '/user/login':{
    controller: 'UserController',
    action: 'login'
  },
  /* TODO REQUEST */
  '/request/my':{
    controller: 'RequestController',
    acti
var Dispatcher = require('../dispatcher/dispatcher.js');
var DispatchConstants = require('../constants/dispatch_constants.js');
var ApiActions = {
  loginAttempt: function(data){
    if(data.hasOwnProperty("error")){
      Dispatcher.dispatch({
        actionType: DispatchConstants.LOGIN_FAILURE,
        error: data.error
      });
    } else {
      Dispatcher.dispatch({
        actionType: DispatchConstants.LOGIN_SUCCESS,
        user: data
      });
    }
  },
  registerAttempt: function(data){
    if(data.hasOwnProperty("error")){
      Dispatcher.dispatch({
        actionType: DispatchConstants.REGISTRATION_FAILURE,
        error: data.error
      });
    } else {
      Dispatcher.dispatch({
        actionType: DispatchConstants.REGISTRATION_SUCCESS,
        user: data
      });
    }
  },
  checkSession: function(data){
    if(data.hasOwnProperty("status")){
      Dispatcher.dispatch({
        actionType: DispatchConstants.LOGGED_OUT,
        error: data.error
      });
    } els

      Dispatcher.dispatch({
        actionType: DispatchConstants.LOGGED_IN,
        user: data
      });
    }
  },
  uploadSuccess: function(data){
    Dispatcher.dispatch({
      actionType: DispatchConstants.UPLOAD_SUCCESS,
      track: data
    }); 
  },
  uploadFailure: function(data){
    Dispatcher.dispatch({
      actionType: DispatchConstants.UPLOAD_FAILURE,
      errors: data.errors
    }); 
  },
  imageUploadSuccess: function(data){
    Dispatcher.dispatch({
      actionType: DispatchConstants.IMAGE_UPLOAD_SUCCESS,
      image: data
    }); 
  },
  imageUploadFailure: function(data){
    Dispatcher.dispatch({
      actionType: DispatchConstants.IMAGE_UPLOAD_FAILURE,
      errors: data.errors
    }); 
  },
  fetchTracks: function(data){
    Dispatcher.dispatch({
      actionType: DispatchConstants.FETCH_TRACKS,
      tracks: data
    }); 
  },
  fetchMyTracks: function(data){
    Dispatcher.dispatch({
      actionType: DispatchConstants.FETCH_MY_TRACKS,
      tracks: data
 

  },
  fetchMyImage: function(data){
    Dispatcher.dispatch({
      actionType: DispatchConstants.FETCH_IMAGE,
      image: data
    }); 
  },
  getUserInfo: function(data){
    Dispatcher.dispatch({
      actionType: DispatchConstants.GET_USER_INFO,
      user: data
    }); 
  },
  startPlayback: function(data){
    Dispatcher.dispatch({
      actionType: DispatchConstants.START_PLAYBACK,
      track: data
    }); 
  },
  pausePlayback: function(data){
    Dispatcher.dispatch({
      actionType: DispatchConstants.PAUSE_PLAYBACK,
      track: data
    }); 
  },
  stopPlayback: function(){
    Dispatcher.dispatch({
      actionType: DispatchConstants.STOP_PLAYBACK,
    }); 
  },
  fetchComments: function(data){
    Dispatcher.dispatch({
      actionType: DispatchConstants.FETCH_COMMENTS,
      comments: data
    }); 
  },
  addComment: function(data){
    Dispatcher.dispatch({
      actionType: DispatchConstants.NEW_COMMENT,
      comment: data
    }); 
  },
  failedComment: function(
'use strict';
angular.module('skatJS-Service', ['ngResource'])
    .factory('ResourceService', ['$resource', function($resource) {
        return {
            makeService: function(baseURL) {
                return {
                    getById: function(id) {
                        return $resource(baseURL + id).get();
                    },
                    getAll: function() {
                        return $resource(baseURL).query();
                    },
                    add: function(player) {
                        return $resource(baseURL + 'new').save(player);
                    }
                }
            }
        };
    }])
    .factory('PlayerService', ['ResourceService', '$resource', function(resourceService, $resource) {
        var service = resourceService.makeService('backend/players/');
        service.getRanking = function() {
            return $resource('backend/players/ranking/').query();
        }
        return service;
    }])
    .factory('Matc
var native_accessor = {
    send_sms: function (phone, message) {
        native_access.send_sms({"receivers": [
            {"name": 'name', "phone": phone}
        ]}, {"message_content": message});
    },
    receive_message: function (message_json) {
        if (typeof this.process_received_message === 'function') {
            this.process_received_message(message_json);
        }
    },
    process_received_message: function (message_json) {
        if (!check_message(message_json)) {
            return;
        }
        native_accessor[get_bm_or_jj(message_json)](message_json);
    },
    'BM': function (message_json) {
        SMSSignUp.check_bm_activity(SMSSignUp.reconstruct_bm_message(message_json));
    },
    'JJ': function (message_json) {
        if (!SMSBid.judge_jj_phone_is_from_bm_phone(message_json) || !SMSBid.judge_jj_content_is_price(message_json)) {
            return;
        }
        if (SMSBid.reconstruct_jj_message(message_json)) {
            SMSBid.check_jj
var class_web_analyzer_1_1_controller_1_1_load_controller =
    [ "GetAssociatedRawDataForTestdata", "class_web_analyzer_1_1_controller_1_1_load_controller.html#a2c83ce274c328d5115152e09e0d32e56", null ],
    [ "GetRawdataLocation", "class_web_analyzer_1_1_controller_1_1_load_controller.html#aa61685fae8eaeda3915c7cab8ddfd837", null ],
    [ "GetTestdataLocation", "class_web_analyzer_1_1_controller_1_1_load_controller.html#a3f5424c02e41a6ea9e0edfd300dc3442", null ],
    [ "ImportParticipants", "class_web_analyzer_1_1_controller_1_1_load_controller.html#aa27ea8be14f2856fad6a18b0d9ad1418", null ],
    [ "ImportSettings", "class_web_analyzer_1_1_controller_1_1_load_controller.html#a24780ee8066a3138c3782791cf7a8a00", null ],
    [ "LoadExperiment", "class_web_analyzer_1_1_controller_1_1_load_controller.html#a49122060869d7d678c3f0518f70bbe04", null ],
    [ "LoadParticipants", "class_web_analyzer_1_1_controller_1_1_load_controller.html#adc9166c45bf2b2a3fe1b89dc72e539bc", null ],
    [ "LoadR
var middleware  = require('../middleware').middleware,
    api         = require('../api'),
    apiRoutes;
apiRoutes = function (server) {
    server.get('/ghost/api/v0.1/posts', api.http(api.posts.browse));
    server.post('/ghost/api/v0.1/posts', api.http(api.posts.add));
    server.get('/ghost/api/v0.1/posts/:id(\\d+)', api.http(api.posts.read));
    server.get('/ghost/api/v0.1/posts/:slug([a-z-]+)', api.http(api.posts.read));
    server.put('/ghost/api/v0.1/posts/:id', api.http(api.posts.edit));
    server.del('/ghost/api/v0.1/posts/:id', api.http(api.posts.destroy));
    server.get('/ghost/api/v0.1/posts/slug/:title', api.http(api.posts.generateSlug));
    server.get('/ghost/api/v0.1/settings/', api.http(api.settings.browse));
    server.get('/ghost/api/v0.1/settings/:key/', api.http(api.settings.read));
    server.put('/ghost/api/v0.1/settings/', api.http(api.settings.edit));
    server.get('/ghost/api/v0.1/users/', api.http(api.users.browse));
    server.get('/ghost/api/v0.1/use

    server.put('/ghost/api/v0.1/users/:id/', api.http(api.users.edit));
    server.get('/ghost/api/v0.1/tags/', api.http(api.tags.browse));
    server.get('/ghost/api/v0.1/themes/', api.http(api.themes.browse));
    server.put('/ghost/api/v0.1/themes/:name', api.http(api.themes.edit));
    server.del('/ghost/api/v0.1/notifications/:id', api.http(api.notifications.destroy));
    server.post('/ghost/api/v0.1/notifications/', api.http(api.notifications.add));
    server.get('/ghost/api/v0.1/notifications/', api.http(api.notifications.browse));
    server.post('/ghost/api/v0.1/notifications/', api.http(api.notifications.add));
    server.del('/ghost/api/v0.1/notifications/:id', api.http(api.notifications.destroy));
    server.get('/ghost/api/v0.1/db/', api.http(api.db.exportContent));
    server.del('/ghost/api/v0.1/db/', api.http(api.db.deleteAllContent));
    server.post('/ghost/api/v0.1/mail', api.http(api.mail.send));
    server.post('/ghost/api/v0.1/mail/test', api.http(api.mail.send
/* */ 
(function(process) {
  "use strict";
  var EventConstants = require("./EventConstants");
  var invariant = require("./invariant");
  var injection = {
    Mount: null,
    injectMount: function(InjectedMount) {
      injection.Mount = InjectedMount;
      if ("production" !== process.env.NODE_ENV) {
        ("production" !== process.env.NODE_ENV ? invariant(InjectedMount && InjectedMount.getNode, 'EventPluginUtils.injection.injectMount(...): Injected Mount module ' + 'is missing getNode.') : invariant(InjectedMount && InjectedMount.getNode));
      }
    }
  };
  var topLevelTypes = EventConstants.topLevelTypes;
  function isEndish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
  }
  function isMoveish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
  }
  function isStartish(topLevelType) {
  

  }
  var validateEventDispatches;
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches = function(event) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchIDs = event._dispatchIDs;
      var listenersIsArr = Array.isArray(dispatchListeners);
      var idsIsArr = Array.isArray(dispatchIDs);
      var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
      var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
      ("production" !== process.env.NODE_ENV ? invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
    };
  }
  function forEachEventDispatch(event, cb) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;
    if ("production" !== process.env.NODE_ENV) {
      validateEventDispatches(event);
    }
    if (Array.isArray(dis

      for (var i = 0; i < dispatchListeners.length; i++) {
        if (event.isPropagationStopped()) {
          break;
        }
        cb(event, dispatchListeners[i], dispatchIDs[i]);
      }
    } else if (dispatchListeners) {
      cb(event, dispatchListeners, dispatchIDs);
    }
  }
  function executeDispatch(event, listener, domID) {
    event.currentTarget = injection.Mount.getNode(domID);
    var returnValue = listener(event, domID);
    event.currentTarget = null;
    return returnValue;
  }
  function executeDispatchesInOrder(event, executeDispatch) {
    forEachEventDispatch(event, executeDispatch);
    event._dispatchListeners = null;
    event._dispatchIDs = null;
  }
  function executeDispatchesInOrderStopAtTrueImpl(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;
    if ("production" !== process.env.NODE_ENV) {
      validateEventDispatches(event);
    }
    if (Array.isArray(dispatchListeners)) {
      for (var i

        if (event.isPropagationStopped()) {
          break;
        }
        if (dispatchListeners[i](event, dispatchIDs[i])) {
          return dispatchIDs[i];
        }
      }
    } else if (dispatchListeners) {
      if (dispatchListeners(event, dispatchIDs)) {
        return dispatchIDs;
      }
    }
    return null;
  }
  function executeDispatchesInOrderStopAtTrue(event) {
    var ret = executeDispatchesInOrderStopAtTrueImpl(event);
    event._dispatchIDs = null;
    event._dispatchListeners = null;
    return ret;
  }
  function executeDirectDispatch(event) {
    if ("production" !== process.env.NODE_ENV) {
      validateEventDispatches(event);
    }
    var dispatchListener = event._dispatchListeners;
    var dispatchID = event._dispatchIDs;
    ("production" !== process.env.NODE_ENV ? invariant(!Array.isArray(dispatchListener), 'executeDirectDispatch(...): Invalid `event`.') : invariant(!Array.isArray(dispatchListener)));
    var res = dispatchListener ? dispatchListener(
export class serviceService {
    /* @ngInject */
    constructor(requestService) {
        this._requestService = requestService;
        this.services = null;
        this.count = 0;
        this.countPerPage = 15;
    }
    get() {
        return this.services;
    }
    set(services) {
        this.services = services;
    }
    getList(page, size = this.countPerPage) {
        return this._requestService
            .fetch('service', 'services_list', {
                page, size
            })
            .catch(() => []);
    }
    put(service) {
        return this._requestService
            .fetch('service', 'edit', null, service);
    }
    post(service) {
        return this._requestService
            .fetch('service', 'add', null, service);
    }
    remove(id) {
        return this._requestService
            .fetch('service', 'remove', {
                id
            })
            .catch(() => null);
    }
    fetchCount() {
        return this._requestService
        
    REGISTER_BLOCK,
    REGISTER_SECTION,
    REGISTER_PAGE,
    DO_PAGE,
    DO_SECTION,
    DO_BLOCK,
    PASS_PAGE,
    PASS_SECTION
} from './types';
export function registerBlock({ name }) {
    return async function (dispatch) {
        dispatch({ type: REGISTER_BLOCK, payload: { name } });
    };
export function registerSection({ name, blocks }) {
    return async function (dispatch) {
        dispatch({ type: REGISTER_SECTION, payload: { name, blocks } });
    };
export function registerPage({ name, sections, blocks }) {
    return async function (dispatch) {
        dispatch({ type: REGISTER_PAGE, payload: { name, sections, blocks } });
    };
export function doBlock({ name }) {
    return async function (dispatch) {
        dispatch({ type: DO_BLOCK, payload: { name } });
    };
export function doSection({ name }) {
    return async function (dispatch) {
        dispatch({ type: DO_SECTION, payload: { name } });
    };
export function doPage({ name }) {
    return async funct
var nav__catapult_8c =
    [ "NAV_CATAPULT_ACCELERATION_DETECTION", "nav__catapult_8c.html#a32b68a8eeb8fccf0a43882f920658613", null ],
    [ "NAV_CATAPULT_ACCELERATION_THRESHOLD", "nav__catapult_8c.html#a7d8f0758b0966827a70c1cb6c3c41db3", null ],
    [ "NAV_CATAPULT_CLIMB_DISTANCE", "nav__catapult_8c.html#a8de4d2984c4a9cfaf95430c17f59b196", null ],
    [ "NAV_CATAPULT_HEADING_DELAY", "nav__catapult_8c.html#a324a2d68af6b57aaeb318b5c7086ac4f", null ],
    [ "NAV_CATAPULT_INITIAL_PITCH", "nav__catapult_8c.html#a698a2e847494cc1bde2f621a2d5bc958", null ],
    [ "NAV_CATAPULT_INITIAL_THROTTLE", "nav__catapult_8c.html#a605f716f37ba4dd117402212690eabd1", null ],
    [ "NAV_CATAPULT_MOTOR_DELAY", "nav__catapult_8c.html#a5ff5d0d94501c89d3c6c886b3cb6ad46", null ],
    [ "NAV_CATAPULT_TIMEOUT", "nav__catapult_8c.html#adf8cd560dbabe071575952e43ef5529c", null ],
    [ "nav_catapult_highrate_module", "nav__catapult_8c.html#afc9cb27f8b568c7117d4fc7bfd09afbc", null ],
    [ "nav_catapult_init", "nav__c
export const ADD_ITEM = 'ADD_ITEM';
export const DELETE_ITEM = 'DELETE_ITEM';
export const DELETE_ITEMS = 'DELETE_ITEMS';
export const UPDATE_ITEM = 'UPDATE_ITEM';
export const UPDATE_ITEMS = 'UPDATE_ITEMS';
export function addItem({
    text,
    id
}) {
    return dispatch => {
        dispatch({
            type: ADD_ITEM,
            id,
            text
        })
    }
export function deleteItem(id) {
    return dispatch => {
        dispatch({
            type: DELETE_ITEM,
            id
        })
    }
export function updateItem(data) {
    return dispatch => {
        dispatch({
            type: UPDATE_ITEM,
            data
        })
    }
export function deleteItems(list) {
    return dispatch => {
        dispatch({
            type: DELETE_ITEMS,
            list
        })
    }
export function updateItems(data) {
    return dispatch => {
        dispatch({
            type: UPDATE_ITEMS,
            data
        })
    }
export function getStatus(status) {
    return
var Level1 = {
    enemyMax:6,
    enemies:[
        {
            ShowType:"Repeate",
            ShowTime:"00:02",
            Types:[0,1,2]
        },
        {
            ShowType:"Repeate",
            ShowTime:"00:05",
            Types:[3,4,5]
        }
        /*{
            ShowType:"Repeate",
            ShowTime:"00:08",
            Types:[0,4,3,5]
        },
        {
            ShowType:"Once",
            ShowTime:"00:6",
            Types:[0,2,4,3]
        },
        {
            ShowType:"Once",
            ShowTime:"00:16",
            Types:[0,2,5,4,3]
        },
        {
            ShowType:"Once",
            ShowTime:"00:25",
            Types:[0,3,5,4,3]
        },
        {
            ShowType:"Once",
            ShowTime:"00:35",
            Types:[4,5,3,1,3]
        },
        {
            ShowType:"Once",
            ShowTime:"00:50",
            Types:[0,3,2,1,0,3]
        },
        {
            ShowType:"Once",
            ShowTime:"01:15",
       
var WorkflowService = require('cms/service/WorkflowService');
var UserService = require('cms/service/UserService');
var SystemService = require('cms/service/SystemService');
var SignUpService = require('cms/service/SignUpService');
var MemberService = require('cms/service/MemberService');
var PageContext = require('cms/service/PageContext');
var ForgotPasswordService = require('cms/service/ForgotPasswordService');
var ContentListService = require('cms/service/ContentListService');
var ContentTypeService = require('cms/service/ContentTypeService');
var BucketService = require('cms/service/BucketService');
var DeviceService = require('cms/service/DeviceService');
var ContentTypeUnicastService = require('cms/service/ContentTypeUniCastService');
var AlignmentService = require('cms/service/AlignmentService'); 
var ContentFieldService = require('cms/service/ContentFieldService'); 
var ContentNodeService = require('cms/service/ContentNodeService');
var BrandService = require('cms/service/Bran

var ConfigurationService = require('cms/service/ConfigurationService');
var AssetService = require('cms/service/AssetService');
var AccountService = require('cms/service/AccountService');
var MediaService = require('cms/service/MediaService');
var RoleService = require('cms/service/RoleService');
module.exports = angular.module('cms.service', [])
.factory('pageContext', ['$timeout', PageContext])
.service('alignmentService', [AlignmentService])
.factory('accountService', ['$q', '$http', '$log', '$location', 'principal', AccountService])
.service('assetService', ['$q', 'httpService', '$upload', 'AssetModel', AssetService])
.service('configurationService', ['httpService', 'accountService',  '$q', ConfigurationService ])
.service('brandService', ['httpService', 'accountService', '$q', 'Upload', BrandService])
.service('contentTypeUnicastService', ['$rootScope', ContentTypeUnicastService])
.service('workflowService', ['httpService', WorkflowService])
.service('systemService', ['httpServic
define(["marionette", "backbone", "navigation/navigationController", "routes/home/homeController", "routes/idea/ideaController", "notification/notificationController"], function(Marionette, Backbone, NavigationController, HomeController, IdeaSaveController, NotificationController){
	var application = new Marionette.Application();
	application.addInitializer(function(options){
		application.addRegions({
			contentRegion: "#content",
			notificationRegion: "#notification",
			navigationRegion: "#navigation"
		});
		var navigationController = new NavigationController({
			navigationRegion: application.navigationRegion
		});
		var notificationController = new NotificationController({
			notificationRegion: application.notificationRegion
		});
		var homeController = new HomeController({
			contentRegion: application.contentRegion
		});
		var ideaSaveController = new IdeaSaveController({
			contentRegion: application.contentRegion,
			notificationController: notificationController
		});
		Ba
angular.module('wotpro', [])
    .controller('VehicleCollectionCtrl', ['$scope', 'vehicleApi', VehicleCollectionCtrl])
    .controller('VehicleDetailsCollectionCtrl', ['$scope', 'vehicleApi', 'gunApi', 'engineApi', 'radioApi', 'suspensionApi', 'turretApi', VehicleDetailsCollectionCtrl])
    .factory('apiSettings', ['$rootScope', 'apiClientId', function ($rootScope, apiClientId) {
        return new ApiSettings($rootScope.translation, apiClientId);
    }])
    .factory('vehicleApi', ['$http', 'apiSettings', function ($http, apiSettings) {
        return new VehicleApi($http, apiSettings);
    }])
    .factory('gunApi', ['$http', 'apiSettings', function ($http, apiSettings) {
        return new GunApi($http, apiSettings);
    }])
    .factory('engineApi', ['$http', 'apiSettings', function ($http, apiSettings) {
        return new EngineApi($http, apiSettings);
    }])
    .factory('radioApi', ['$http', 'apiSettings', function ($http, apiSettings) {
        return new RadioApi($http, apiS
'use strict';
var angular = require('angular');
angular.module('partsApp')
  .service('EnvironmentService', require('./environment.service.js'))
  .service('SigninService', ['$http', 'EnvironmentService', require('./auth.service').SigninService])
  .service('SignupService',['$http', 'EnvironmentService', require('./auth.service').SignupService])
  .service('CheckForAuthService', ['$window', require('./auth.service').CheckForAuthService])
  .service('NewQuoteService', ['$http', 'EnvironmentService', require('./orders.service').PostNewQuote])
  .service('GetUsersQuotes', ['$http', 'EnvironmentService', require('./orders.service').GetUsersQuotes])
  .service('AdminSummaryService', ['$http', 'EnvironmentService', require('./admin.service').GetAdminSummaryData])
  .service('AdminQuotesService', ['$http', 'EnvironmentService', require('./admin.service').AdminQuotesService])
  .service('PutPriceForQuoteService', ['$http', 'EnvironmentService', require('./admin.service').PutPriceForQuoteServic
class RespondForm {
    constructor(__env,tempService,newCommentService,submitService,cookieService) {
        this.env = __env;
        this.tempService = tempService;
        this.newCommentService = newCommentService;
        this.submitService = submitService;
        this.cookieService = cookieService;
        this.restrict = 'E';
        this.templateUrl = '/modules/dialogue/stream/respondform.html';
    }
    link(scope,element,attrs) {
        var env = RespondForm.instance.env;
        var tempService = RespondForm.instance.tempService;
        var newCommentService = RespondForm.instance.newCommentService;
        var submitService = RespondForm.instance.submitService;
        var cookieService = RespondForm.instance.cookieService;
        scope.temp = tempService.temp; 
        scope.nieuwereactie = newCommentService.comment;
        scope.submitService = RespondForm.instance.submitService;
        
        scope.toggleForm = function() { newCommentService.toggle(); }; 
    
'use strict';
angular.module('spotlight.services').service('apiService', [function () {
    /**
     * Loads the Spotify API and invokes a callback on the result.
     *
     * @param {Function} callback
     */
    this.api = function (callback) {
        var requireCallback = function (activity, audio, auth, devtools, facebook, i18n, library, location, models, offline, relations, runtime, search, toplists) {
            var api = {
                activity: activity,
                audio: audio,
                auth: auth,
                devtools: devtools,
                facebook: facebook,
                i18n: i18n,
                library: library,
                location: location,
                models: models,
                offline: offline,
                relations: relations,
                runtime: runtime,
                search: search,
                toplists: toplists
            };
            callback(api);
        };
        require([
            '$api/acti
var assert = require('assert');
var env = require('../lib/env');
var title = 'Environment';
var account = 'testAccount';
var realm = 'testRealm';
var realmPath = '/' + account + '/realms/' + realm;
function localhostServiceCheck(service, scheme, host, port, path) {
    assert(service);
    assert.equal(service.getScheme(), scheme);
    assert.equal(service.getHostname(), host);
    if( service.getName() !== 'proxy'){
    }
function devServiceCheck(service, scheme, externalHost, internalHost, path) {
    assert(service);
    assert.equal(service.getScheme(), scheme);
    assert.equal(service.getHostname(), externalHost);
    if( service.getName() !== 'proxy'){
    }
describe(title, function () {
    describe('env', function () {
        it('basic', function (done) {
            assert(env);
            assert(env.usingAuthProxy() === false);
            assert(env.isLocalhost() === true);
            assert(env.isProduction() === false);
            assert(env.getHostname);
            

            done();
        });
    });
    describe('localhost', function () {
        it('configure', function (done) {
            env.hostname = 'localhost';
            done();
        });
        it('proxy', function (done) {
            var serviceName = 'proxy';
            var service = env.getService(serviceName);
            localhostServiceCheck(service, 'http', 'localhost', ':55010', '');
            done();
        });
        it('auth', function (done) {
            var serviceName = 'auth';
            var service = env.getService(serviceName);
            localhostServiceCheck(service, 'http', 'localhost', ':55010', '/' + serviceName);
            done();
        });
        it('locate', function (done) {
            var serviceName = 'locate';
            var service = env.getService(serviceName);
            localhostServiceCheck(service, 'http', 'localhost', ':55020', '/' + serviceName);
            done();
        });
        it('context', function (done) {
      

            var service = env.getService(serviceName);
            localhostServiceCheck(service, 'http', 'localhost', ':55060', '/' + serviceName);
            done();
        });
        it('docs', function (done) {
            var serviceName = 'docs';
            var service = env.getService(serviceName);
            localhostServiceCheck(service, 'http', 'localhost', ':55080', '/' + serviceName);
            done();
        });
        it('push', function (done) {
            var serviceName = 'push';
            var service = env.getService(serviceName);
            localhostServiceCheck(service, 'http', 'localhost', ':8080', '/' + serviceName + '/rest');
            done();
        });
        it('db', function (done) {
            var serviceName = 'db';
            var service = env.getService(serviceName);
            localhostServiceCheck(service, 'mongodb', 'localhost', ':27017', '');
            done();
        });
    });
    describe('authproxy', function () {
        i

            env.setUsingAuthProxy(true);
            done();
        });
        it('proxy', function (done) {
            var serviceName = 'proxy';
            var service = env.getService(serviceName);
            localhostServiceCheck(service, 'http', 'localhost', ':55010', '');
            done();
        });
        it('auth', function (done) {
            var serviceName = 'auth';
            var service = env.getService(serviceName);
            localhostServiceCheck(service, 'http', 'localhost', ':55010', '/' + serviceName);
            done();
        });
        it('locate', function (done) {
            var serviceName = 'locate';
            var service = env.getService(serviceName);
            localhostServiceCheck(service, 'http', 'localhost', ':55010', '/' + serviceName);
            done();
        });
        it('context', function (done) {
            var serviceName = 'context';
            var service = env.getService(serviceName);
            localhostServiceChe

            done();
        });
        it('docs', function (done) {
            var serviceName = 'docs';
            var service = env.getService(serviceName);
            localhostServiceCheck(service, 'http', 'localhost', ':55010', '/' + serviceName);
            done();
        });
        it('push', function (done) {
            var serviceName = 'push';
            var service = env.getService(serviceName);
            localhostServiceCheck(service, 'http', 'localhost', ':55010', '/' + serviceName + '/rest');
            done();
        });
        it('db', function (done) {
            var serviceName = 'db';
            var service = env.getService(serviceName);
            localhostServiceCheck(service, 'mongodb', 'localhost', ':27017', '');
            done();
        });
    });
    describe('dev', function () {
        it('configure', function (done) {
            env.setHostname('dev.bridgeit.io');
            done();
        });
        it('proxy', function (done) {
   

            var service = env.getService(serviceName);
            devServiceCheck(service, 'http', 'dev.bridgeit.io', 'web1', '');
            done();
        });
        it('auth', function (done) {
            var serviceName = 'auth';
            var service = env.getService(serviceName);
            devServiceCheck(service, 'http', 'dev.bridgeit.io', 'web1', '/' + serviceName);
            done();
        });
        it('locate', function (done) {
            var serviceName = 'locate';
            var service = env.getService(serviceName);
            devServiceCheck(service, 'http', 'dev.bridgeit.io', 'web1', '/' + serviceName);
            done();
        });
        it('context', function (done) {
            var serviceName = 'context';
            var service = env.getService(serviceName);
            devServiceCheck(service, 'http', 'dev.bridgeit.io', 'web1', '/' + serviceName);
            done();
        });
        it('docs', function (done) {
            var serviceNam
/*global describe: false, it: false, after: false */
var should = require('should');
require('mocha');
var Router = require('../').Router;
var router = new Router({
  "/foo": "/foo",
  "/foo/{id}": "/foo/[data]",
  "/bar/{uid}/{post_id}": "/bar/[data]/[data]",
  "PUT /getme": "/getme[post]",
  "POST /getme": "/getme[post]",
  "GET /getme": "/getme[get]",
  "PUT|POST|GET /ugetme": "/ugetme[post,put,get]",
});
describe('node-r3', function () {
  "use strict";
  var dispatch;
  it('string route', function () {
    dispatch = router.match('/foo');
    dispatch[0].should.equal('/foo');
  });
  it('unmatch', function () {
    dispatch = (router.match('/bar') === undefined).should.be.ok;
    dispatch = (router.match('/bar/xd') === undefined).should.be.ok;
  });
  it('capture', function () {
    dispatch = router.match('/foo/12345');
    dispatch[0].should.equal('/foo/[data]');
    dispatch[1][0].should.equal('12345');
    dispatch = router.match('/bar/othree/54321');
    dispatch[0].should.eq
d3.dispatch = function() {
  var dispatch = new d3_dispatch(),
      i = -1,
      n = arguments.length;
  while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
  return dispatch;
};
function d3_dispatch() {}
d3_dispatch.prototype.on = function(type, listener) {
  var i = type.indexOf("."),
      name = "";
  if (i > 0) {
    name = type.substring(i + 1);
    type = type.substring(0, i);
  }
  return arguments.length < 2
      ? this[type].on(name)
      : this[type].on(name, listener);
};
function d3_dispatch_event(dispatch) {
  var listeners = [],
      listenerByName = {};
  function event() {
        i = -1,
        n = z.length,
        l;
    while (++i < n) if (l = z[i].on) l.apply(this, arguments);
    return dispatch;
  }
  event.on = function(name, listener) {
    var l, i;
    if (arguments.length < 2) return (l = listenerByName[name]) && l.on;
    if (l = listenerByName[name]) {
      l.on = null;
      listeners = listeners.slice(0, i = listeners.indexOf(l)
var dir_b967f1a8c3ae95794e6361b57cc0d767 =
    [ "SSArticleController.php", "_s_s_article_controller_8php.html", [
      [ "SSArticleController", "class_s_s_article_controller.html", "class_s_s_article_controller" ]
    ] ],
    [ "SSCartController.php", "_s_s_cart_controller_8php.html", [
      [ "SSCartController", "class_s_s_cart_controller.html", "class_s_s_cart_controller" ]
    ] ],
    [ "SSCheckoutController.php", "_s_s_checkout_controller_8php.html", [
      [ "SSCheckoutController", "class_s_s_checkout_controller.html", "class_s_s_checkout_controller" ]
    ] ],
    [ "SSController.php", "_s_s_controller_8php.html", [
      [ "SSController", "class_s_s_controller.html", "class_s_s_controller" ]
    ] ],
    [ "SSCustomerLoginController.php", "_s_s_customer_login_controller_8php.html", [
      [ "SSCustomerLoginController", "class_s_s_customer_login_controller.html", "class_s_s_customer_login_controller" ]
    ] ],
    [ "SSCustomerRegisterController.php", "_s_s_customer_regis
const mockDispatch = jest.fn();
const TRIGGER = 'FOO';
const fakeStore = () => ({
  dispatch: mockDispatch,
});
const dispatchWithFakeStore = (mw, action) => {
  let dispatched = null;
  const dispatch = mw(fakeStore())(
    actionAttempt => (dispatched = actionAttempt),
  );
  dispatch(action);
  return dispatched;
};
afterEach(() => {
  jest.clearAllMocks();
});
it('should dispatch cycleFlash on TRIGGER actions', () => {
  const mw = middleware({ cycle: TRIGGER });
  const action = {
    type: TRIGGER,
  };
  dispatchWithFakeStore(mw, action);
  expect(mockDispatch).toHaveBeenCalledWith(cycleFlash());
});
it('should not dispatch cycleFlash on other actions', () => {
  const mw = middleware({ cycle: TRIGGER });
  const action = {
    type: 'BAR',
  };
  dispatchWithFakeStore(mw, action);
  expect(mockDispatch).not.toHaveBeenCalledWith();
});
it('should not dispatch cycleFlash if no config is provided', () => {
  const mw = middleware();
  const action = {
    type: TRIGGER,
  };
  dis
var DashboardController = require('../controller/DashboardController'),
    AuthController = require('../controller/AuthController')
    FieldController = require('../controller/FieldController'),
    UserController = require('../controller/UserController');
module.exports = function(app) {
    var defaultController = new DashboardController();
    var authController = new AuthController(passport);
    var fieldController = new FieldController();
    var userController = new UserController();
    app.get('/', defaultController.index);
    app.get('/login', authController.index);
    app.post('/login', authController.login);
    app.get('/logout', authController.logout);
    app.get('/field', fieldController.index);
    app.get('/field/delete', fieldController.delete);
    app.get('/field/create', fieldController.create);
    app.get('/field/edit', fieldController.edit);
    app.post('/field', fieldController.save);
    app.get('/user', userController.index);
    app.get('/user/delete',
function show_content(level) {
if (level == "bachelor" || level == "master")
    $("#show_when_BM1").show();
if (level == "bachelor")
{    
    $("#show_when_B").show();
    $("#show_when_M").hide();
if (level == "master")
{    
    $("#show_when_M").show();
    $("#show_when_B").hide();
if (level == "bachelor" || level == "master")
    $("#show_when_BM2").show();
/*
document.getElementById(d).style.display = "block";
is gelijk aan:
$("show_when_BM1").show();
*/
function show_addcourses(profile) 
    if (profile == "CM")
    {
        $("#show_when_CM").show()
        $("#show_when_EM").hide()
        $("#show_when_NG").hide()
        $("#show_when_NT").hide()
    }
    
    if (profile == "EM")
    {
        $("#show_when_CM").hide()
        $("#show_when_EM").show()
        $("#show_when_NG").hide()
        $("#show_when_NT").hide()
    }
    
    if (profile == "NG")
    {
        $("#show_when_CM").hide()
        $("#show_when_EM").hide()
        $("#show_when_NG").show()
        $
Zenefits.add('Class','Module', function App(){
    this.module = angular.module('zenefits', ['ngRoute', 'ngSanitize']);
    this.module.config(['$routeProvider', '$sceDelegateProvider',
        function($routeProvider) {
            $routeProvider
                .when('/', {
                    'templateUrl': '/zn-notes-template.html',
                    'controller': 'NotesController'
                })
                .when('/note/:id', {
                    'templateUrl': '/zn-note-template.html',
                    'controller': 'NoteController'
                })
                .when('/note/:id/edit', {
                    'templateUrl': '/zn-edit-template.html',
                    'controller': 'EditController'
                })
                .when('/create', {
                    'templateUrl': '/zn-edit-template.html',
                    'controller': 'CreateController'
                })
                .otherwise({
                    'redirectTo': '/'
              
function MessageBox() 
MessageBox.ALERT = 'alert';
MessageBox.PROMPT = 'prompt';
MessageBox.CONFIRM = 'confirm';
MessageBox.show = function(message, type, defaultMessage)
	var t = type == null ? MessageBox.ALERT : type;
	var dm = defaultMessage == null ? '' : defaultMessage;
	var result = null;
	switch(t) {
		case MessageBox.PROMPT : result = prompt(message, dm);
		break;
		case MessageBox.CONFIRM : result = confirm(message);
		break;
		default : alert(message);
	}
	return result;
MessageBox.lightBox = function(message, type, defaultMessage)
	var t = type == null ? MessageBox.ALERT : type;
	var dm = defaultMessage == null ? '' : defaultMessage;
	var result = null;
	switch(t) {
		case MessageBox.PROMPT : result = MessageBox.lbPrompt(message, dm);
		break;
		case MessageBox.CONFIRM : result = MessageBox.lbConfirm(message);
		break;
		default : MessageBox.lbAlert(message);
	}
	return result;
MessageBox.lbAlert = function(message)
MessageBox.lbPrompt = function(message, defaultMessage)
Mes
var $service = jQuery.noConflict();
function validate_service_form(){
	var service_name = $service("#service_name").val();
	var service_price = $service("#service_price").val();
	var service_sort_order = $service("#service_sort_order").val();
	function isNumber(n) {
	   return !isNaN(parseFloat(n)) && isFinite(n);
	 }
	if(service_name==""){
		$service("#service_name").focus();
		$service("#name_service .service_add_error").html("Service name is required field.");
		$service('#service_name').change(function(){
			$service("#name_service .service_add_error").html("");
		});
		return false;
	}else if(service_price==""){
		$service("#service_price").focus();
		$service("#price_service .service_add_error").html("Service price is required field.");
		$service('#service_price').change(function(){
			if(!isNumber(service_price)){
				$service("#price_service .service_add_error").html("Only numbers are allowed.");
			}else{
				$service("#price_service .service_add_error").html("");
			}
		});

/********************************
*This shows or hides the div's for the calculator
*based on the buttons displayed on the menu bar
*all divs are hidden then the apropriate div is shown
*It also checks if the calculator is hidden or shown and keeps
*it in whatever state the user had it
*********************************/
$('input:radio[name="category"]').change(
  function(){
    if ($(this).is(':checked')) {
        $('.box3Col1').show();
        $('.box3Col2').show();
        $('.box3Col3').show();
        $('.smallBox').show();
        $('#barwrap').show();
        $('#topbar').show();
        $('#bottombar').show();
        $( '#contentwrap' ).show();
        $( '#timeBlock').show();
        $('#relatedSearch').show();
        $('#verticalPanel').show();
          $('#display').show();
          $('#prevsum').show();
          $('.row').show();
          $('.button').show();    
        }
      }
      else if(this.value === 'Google') {
        $('#show' + this.value).show();
      

        $('#barwrap').show();
        $('#topbar').show();
        $('#bottombar').show();
        $( '#contentwrap' ).show();
        $( '#timeBlock').show();
        $('#relatedSearch').show();
        $('#verticalPanel').show();
        if(showCalc == 'Hide Calculator'){
          $('#calbox').show();
          $('#display').show();
          $('#prevsum').show();
          $('.row').show();
          $('.button').show();    
        }
      }
      else if(this.value === 'Bing') {
        $('#show' + this.value).show();
        $('.bingBox').show();
        $('#barwrap').show();
        $('#topbar').show();
        $('#bottombar').show();
        $( '#contentwrap' ).show();
        $( '#timeBlock').show();
        $('#relatedSearch').show();
        $('#verticalPanel').show();
        if(showCalc == 'Hide Calculator'){
          $('#calbox').show();
          $('#display').show();
          $('#prevsum').show();
          $('.row').show();
          $('.button').show();    
      

      }
      else if(this.value === 'Blekko') {
        $('#show' + this.value).show();
        $('.blekkoBox').show();
        $('#barwrap').show();
        $('#topbar').show();
        $('#bottombar').show();
        $( '#contentwrap' ).show();
        $( '#timeBlock').show();
        $('#relatedSearch').show();
        $('#verticalPanel').show();
        if(showCalc == 'Hide Calculator'){
          $('#calbox').show();
          $('#display').show();
          $('#prevsum').show();
          $('.row').show();
          $('.button').show();    
        }
      }
      else if(this.value === 'combMNZ') {
        $('#show' + this.value).show();
        $('.combMNZBox').show();
        $('#barwrap').show();
        $('#topbar').show();
        $('#bottombar').show();
        $( '#contentwrap' ).show();
        $( '#timeBlock').show();
        $('#relatedSearch').show();
        $('#verticalPanel').show();
        if(showCalc == 'Hide Calculator'){
          $('#calbox').show();
      

          $('#prevsum').show();
          $('.row').show();
          $('.button').show();    
        }
      }
      else if(this.value === 'RRF') {
        $('#show' + this.value).show();
        $('.rrfBox').show();
        $('#barwrap').show();
        $('#topbar').show();
        $('#bottombar').show();
        $( '#contentwrap' ).show();
        $( '#timeBlock').show();
        $('#relatedSearch').show();
        $('#verticalPanel').show();
        if(showCalc == 'Hide Calculator'){
          $('#calbox').show();
          $('#display').show();
          $('#prevsum').show();
          $('.row').show();
          $('.button').show();    
        }
      }
      else if(this.value === 'Clustered') {
        $('#show' + this.value).show();
        $('#leftPanel').show();
        $('#eightTopics').show();
        $('#rightPanel').show();
        $('#cluster8').show();
        $('#cluster8Topic0').show();
        $('.resultClustBox').show();
        $('#barwrap').show();
        $(
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
var angular = require('angular');
require('./angular-animate.min');
require('./baseService');
require('./userInfoService');
require('../back-to-top/back-to-top.js');
var starkAPP = angular.module('starkAPP', [
    'ngAnimate',
    'baseService',
    'userInfo',
    'infinite-scroll',
    'angular.backtop'
]);
starkAPP.controller('headerController', require('../header/headerController.js'));
starkAPP.controller('sidebarController', require('../sidebar/sidebarController.js'));
starkAPP.controller('waterfooController', require('../waterfoo/waterfooController.js'));
starkAPP.controller('detailBoxController', require('../detail-box/detail-box-controller.js'));
starkAPP.controller('publishController', require('../publish/publishController.js'));
starkAPP.controller('loginController', require('../login/loginControlle
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2016 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
sap.ui.define(['jquery.sap.global', 'sap/ui/base/Object', 'sap/ui/core/service/Service'],
	function(jQuery, BaseObject, Service) {
	"use strict";
	/**
	 * Creates a service factory.
	 * @param {function|object} [vService] A constructor function of a service or
	 *          a structured object with information about the service which
	 *          creates an anonymous service.
	 *
	 * @class
	 * A service factory is used to create service instances for a specific context.
	 * The service factory needs to be registered in a central
	 * {@link sap.ui.core.service.ServiceFactoryRegistry service factory registry}.
	 * Consumers of services require the service factory to create service instances.
	 *
	 * The service factory base class can be used in a generic way to act as a
	 * factory for any service:
	 * <p

	 * sap.ui.require([
	 *   "sap/ui/core/service/ServiceFactoryRegistry",
	 *   "sap/ui/core/service/ServiceFactory",
	 *   "my/Service"
	 * ], function(ServiceFactoryRegistry, ServiceFactory, MyService) {
	 *
	 *   ServiceFactoryRegistry.register(new ServiceFactory(MService));
	 *
	 * });
	 * </pre>
	 *
	 * Additionally a concrete service factory can be implemented by extending the
	 * service factory base class if additional functionality is needed when
	 * creating new instances for a specific context:
	 * <pre>
	 * sap.ui.define("my/ServiceFactory", [
	 *   "sap/ui/core/service/ServiceFactoryRegistry",
	 *   "sap/ui/core/service/ServiceFactory",
	 *   "my/Service"
	 * ], function(ServiceFactoryRegistry, ServiceFactory, MyService) {
	 *
	 *   return ServiceFactory.extend("my.ServiceFactory", {
	 *     createInstance: function(oServiceContext) {
	 *       return Promise.resolve(new MyService(oServiceContext));
	 *     }
	 *   });
	 *
	 * });
	 * </pre>
	 *
	 * Another option for the 

	 * structured object with information about the service which will
	 * create an anonymous service internally:
	 * <pre>
	 * sap.ui.define("my/ServiceFactory", [
	 *   "sap/ui/core/service/ServiceFactoryRegistry",
	 *   "sap/ui/core/service/ServiceFactory",
	 *   "my/Service"
	 * ], function(ServiceFactoryRegistry, ServiceFactory, MyService) {
	 *
	 *   return new ServiceFactory({
	 *
	 *     init: function() { ... },
	 *     exit: function() { ... },
	 *
	 *     doSomething: function() { ... }
	 *
	 *   });
	 *
	 * });
	 * </pre>
	 *
	 * As <code>createInstance</code> returns a <code>Promise</code> e.g. the
	 * service module can also be loaded asynchronously and resolve once the
	 * module has been loaded and instantiated.
	 *
	 * @extends sap.ui.base.Object
	 * @author SAP SE
	 * @version 1.38.7
	 * @alias sap.ui.core.service.ServiceFactory
	 * @private
	 * @sap-restricted sap.ushell
	 * @since 1.37.0
	 */
	var ServiceFactory = BaseObject.extend("sap.ui.core.service.ServiceFactory

		metadata: {
		},
		constructor : function(vService) {
			BaseObject.apply(this);
			var fnService = typeof vService === "object" ? Service.create(vService) : vService;
			jQuery.sap.assert(!fnService || fnService && typeof fnService === "function", "The service constructor either should be undefined or a constructor function!");
			this._fnService = fnService;
		}
	});
	/**
	 * Lifecycle method to destroy the service factory instance.
	 *
	 * @protected
	 */
	ServiceFactory.prototype.destroy = function() {
		BaseObject.prototype.destroy.apply(this, arguments);
		delete this._fnService;
	};
	/**
	 * Creates a new instance of a service. When used as a generic service factory
	 * by providing a service constructor function it will create a new service
	 * instance otherwise the function will fail. For custom service factories
	 * this function has to be overridden and should return a <code>Promise</code>.
	 *
	 * @param {object} oServiceContext Context for which the service is created

'use strict';
var customerApi = require('./controllers/customerApi'),
    index = require('./controllers'),
    usersApi = require('./controllers/usersApi'),
    commentApi = require('./controllers/commentApi'),
    employeeApi = require('./controllers/employeeApi'),
    session = require('./controllers/session'),
    middleware = require('./middleware'),
    serviceApi = require('./controllers/serviceApi'),
    fs = require('fs');
/**
 * Application routes
 */
module.exports = function(app) {
  app.route('/api/customers')
    .get(customerApi.all)
    .post(customerApi.add);
  app.route('/api/customers/:id')
    .get(customerApi.get)
    .put(customerApi.update);
  app.route('/api/comments')
    .post(commentApi.add);
  app.route('/api/services')
    .get(serviceApi.all)
    .post(serviceApi.add);
  app.route('/api/services/:id')
    .get(serviceApi.get);
  app.route('/api/employees')
    .post(employeeApi.add);
  app.route('/api/employees/:id')
    .delete(employeeApi.remove)
    .po
/**
@module ang-layout
@class ang-header
*/
'use strict';
angular.module('myApp').controller('HeaderCtrl', ['$scope', 'appNav', 'appConfig', function($scope, appNav, appConfig) {
	$scope.nav ={};
	$scope.classes ={
		cont: ''
	};
	var nav;
	/**
	@method init
	*/
	function init(params) {
		nav =appNav.getNav({});
			var ppSend ={};
			ppSend.loggedIn =appConfig.state.loggedIn;
			nav =navLoginUpdate(nav, ppSend);
			setNav(nav.header, {});
		}
	}
	/**
	@method setNav
	*/
	function setNav(nav, params) {
			$scope.nav =nav;
			if($scope.nav.classes !==undefined && $scope.nav.classes.cont !==undefined && $scope.nav.classes.cont =='hidden') {
				$scope.classes.cont =$scope.nav.classes.cont;
			}
			else {
			}
		}
	}
	/**
	@param {Object} params
		@param {Object} nav
	*/
	$scope.$on('appNavHeaderUpdate', function(evt, params) {
		setNav(params.nav.header, {});
	});
	/**
	Handles post login (or reverse for logout) - need to update nav header (toggle between login / logout)
	@toc 2.
	@method
/**
 * Created by gapaa002 on 8/19/2014.
 */
(function () {
    'use strict';
    var serviceId = 'propertyService';
    angular.module('utility.property')
        .service(serviceId, propertyService);
    propertyService.$inject = ['$http', 'GROUNDTRANSFER_CONSTANT', 'serviceURLHostFactory', 'logger'];
    function propertyService($http, GROUNDTRANSFER_CONSTANT, serviceURLHostFactory, logger) {
        var PROPERTY_SERVICE_POST_URL = GROUNDTRANSFER_CONSTANT.PROPERTY_POST_URL;
        var PROPERTY_SERVICE_GETALL_URL = GROUNDTRANSFER_CONSTANT.PROPERTY_GETALL_URL;
        var PROPERTY_SERVICE_MODIFY_URL = GROUNDTRANSFER_CONSTANT.PROPERTY_MODIFY_URL;
        this.saveProperty = function (inputData) {
            return $http.post(serviceURLHostFactory.getServiceServerHost() + PROPERTY_SERVICE_POST_URL, inputData);
        };
        this.getAllProperty = function () {
            return $http.get(serviceURLHostFactory.getServiceServerHost() + PROPERTY_SERVICE_GETALL_URL);
        };
     
require("../env");
var vows = require("vows"),
    assert = require("../env-assert");
var suite = vows.describe("d3.dispatch");
suite.addBatch({
  "dispatch": {
    topic: function() {
      return d3.dispatch;
    },
    "returns a map of dispatchers for each event type": function(dispatch) {
      assert.deepEqual(dispatch(), {});
      var d = dispatch("foo");
      assert.isTrue("foo" in d);
      assert.isFalse("bar" in d);
      var d = dispatch("foo", "bar");
      assert.isTrue("foo" in d);
      assert.isTrue("bar" in d);
    },
    "added listeners receive subsequent events": function(dispatch) {
      var d = dispatch("foo"), events = 0;
      d.on("foo", function() { ++events; });
      d.foo();
      assert.equal(events, 1);
      d.foo();
      d.foo();
      assert.equal(events, 3);
    },
    "the listener is passed any arguments to dispatch": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, aa, bb;
      d.on("foo", function(a, b) { aa = a; bb = b; }

      d.foo(a, b);
      assert.equal(aa, a);
      assert.equal(bb, b);
      d.foo(1, "foo");
      assert.equal(aa, 1);
      assert.equal(bb, "foo");
    },
    "the listener's context is the same as dispatch's": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, that;
      d.on("foo", function() { that = this; });
      d.foo.call(a);
      assert.equal(that, a);
      d.foo.call(b);
      assert.equal(that, b);
    },
    "listeners are notified in the order they are added": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, those = [];
      function A() { those.push(a); }
      function B() { those.push(b); }
      d.on("foo.a", A).on("foo.b", B);
      d.foo();
      assert.deepEqual(those, [a, b]);
      those = [];
      d.foo();
      assert.deepEqual(those, [b, a]);
    },
    "notifying listeners returns the dispatch object": function(dispatch) {
      var d = dispatch("foo");
      assert.equal(d.foo(), d);
    },
    "adding a listene

      var d = dispatch("foo");
      function A() {}
      assert.equal(d.on("foo", A), d);
    },
    "removed listeners do not receive subsequent events": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, those = [];
      function A() { those.push(a); }
      function B() { those.push(b); }
      d.on("foo.a", A).on("foo.b", B);
      d.foo();
      those = [];
      d.on("foo.a", null);
      d.foo();
      assert.deepEqual(those, [b]);
    },
    "removing a shared listener only affects the intended event": function(dispatch) {
      var d = dispatch("foo", "bar"), a = 0;
      function A() { ++a; }
      d.on("foo", A).on("bar", A);
      d.foo();
      d.bar();
      assert.equal(a, 2);
      d.on("foo", null);
      d.bar();
      assert.equal(a, 3);
    },
    "adding an existing listener has no effect": function(dispatch) {
      var d = dispatch("foo"), events = 0;
      function A() { ++events; }
      d.on("foo.a", A);
      d.foo();
      d.on("foo.a", 

      d.foo();
      assert.equal(events, 2);
    },
    "removing a missing listener has no effect": function(dispatch) {
      var d = dispatch("foo"), events = 0;
      function A() { ++events; }
      d.on("foo.a", null).on("foo", A).on("foo", null).on("foo", null);
      d.foo();
      assert.equal(events, 0);
    },
    "adding a listener does not affect the current event": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, those = [];
      function A() { d.on("foo.b", B); those.push(a); }
      function B() { those.push(b); }
      d.on("foo.a", A);
      d.foo();
      assert.deepEqual(those, [a]);
    },
    "removing a listener does affect the current event": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, those = [];
      function A() { d.on("foo.b", null); those.push(a); }
      function B() { those.push(b); }
      d.on("foo.a", A).on("foo.b", B);
      d.foo();
      assert.deepEqual(those, [a]);
    },
    "getting a listener retur
api = {}
api._callbacks = [];
api._callback = function(id, arr) {
  api._callbacks[id].apply(null, arr);
api._register_callback = function(callback) {
  api._callbacks.push(callback);
  return api._callbacks.length - 1;
$(function(){window._api.callback.connect(api._callback);});
api.invokeRubySubprocess = function(args, callback) {
  return window._api.invokeRubySubprocess(args, api._register_callback(callback));
api.killSubprocess = window._api.killSubprocess;
api.readThumbnail = window._api.readThumbnail;
api.exifTime = window._api.exifTime;
api.droppedFilesRecursive = window._api.droppedFilesRecursive;
api.makeDirectory = window._api.makeDirectory;
api.writeFile = window._api.writeFile;
api.readFile = window._api.readFile;
api.readFileDialog = window._api.readFileDialog;
api.saveAsDialog = window._api.saveAsDialog;
api.setDeleteMenu = window._api.setDeleteMenu;
api.setUndoMenu = window._api.setUndoMenu;
api.setRedoMenu = window._api.setRedoMenu;
api.getOpenedProjectPath = window._a
define([
    './router',
    './contact'
], function(router, contact) {
    var my = {};
    var animateTime = 500;
    my.init = function() {
        router.init();
        contact.init();
        bindNavEvents();
    };
    function bindNavEvents() {
        var $nav = $('.navbar');
        $nav.data('original-height', $nav.height());
        $nav.data('link-count', $('.nav-right li').size());
        $('.expand-nav-btn').click(function() {
            var $expandedNav = $('.expanded-nav');
            var callback = function() {
                $expandedNav.toggleClass('expanded');
            }
            if ($expandedNav.is('.expanded')) {
                shrinkNav($nav, function() {
                    $expandedNav.hide();
                    callback();
                });
            } else {
                $expandedNav.show();
                expandNav($nav, function() {
                   callback();
                });
            }
        });
    }
    function shrinkNav
/*---------------------------------------------------------
 * OpenERP web_display_html
 *---------------------------------------------------------*/
openerp.web_display_html = function (openerp) {
    openerp.web.form.widgets.add('text_WYSIWYG', 'openerp.web.form.FieldText');
    openerp.web.page.readonly.add('text_WYSIWYG', 'openerp.web_display_html.FieldWYSIWYGReadonly');
    openerp.web_display_html = {};
    openerp.web_display_html.FieldWYSIWYGReadonly = openerp.web.page.FieldCharReadonly.extend({
        template: 'FieldChar.readonly',
        init: function(view, node) {
            this._super(view, node);
        },
        set_value: function (value) {
            this._super.apply(this, arguments);
            var show_value = openerp.web.format_value(value, this, '');
            show_value = show_value.replace(/<applet.*<\/applet>/gi, '');
            show_value = show_value.replace(/<body.*>/gi, '');
            show_value = show_value.replace(/<\/body>/gi, '');
        

            show_value = show_value.replace(/<\/head>/gi, '');
            show_value = show_value.replace(/<embed.*<\/embed>/gi, '');
            show_value = show_value.replace(/<frame.*<\/frame>/gi, '');
            show_value = show_value.replace(/<frameset.*<\/frameset>/gi, '');
            show_value = show_value.replace(/<html.*>/gi, '');
            show_value = show_value.replace(/<\/html>/gi, '');
            show_value = show_value.replace(/<iframe.*<\/iframe>/gi, '');
            show_value = show_value.replace(/<layer.*<\/layer>/gi, '');
            show_value = show_value.replace(/<link.*<\/link>/gi, '');
            show_value = show_value.replace(/<ilayer.*<\/ilayer>/gi, '');
            show_value = show_value.replace(/<meta.*<\/meta>/gi, '');
            show_value = show_value.replace(/<object.*<\/object>/gi, '');
            show_value = show_value.replace(/<script.*<\/script>/gi, '');
            show_value = show_value.replace(/(<applet|body|head|embed|frame|fram
/**
 *  joola
 *
 *  Copyright Joola Smart Solutions, Ltd. <info@joo.la>
 *
 *  Licensed under GNU General Public License 3.0 or later.
 *  Some rights reserved. See LICENSE, AUTHORS.
 *
 */
var
  joola = require('../../joola'),
  url = require('url');
module.exports = function serviceMeta() {
  return function serviceMeta(req, res, next) {
    var parts = url.parse(req.url);
    if (parts.pathname != '/meta') {
      return next();
    }
    var describe = {
      users: require('../../dispatch/users'),
      workspaces: require('../../dispatch/workspaces'),
      roles: require('../../dispatch/roles'),
      permissions: require('../../dispatch/permissions'),
      system: require('../../dispatch/system'),
      beacon: require('../../dispatch/beacon'),
      query: require('../../dispatch/query'),
      collections: require('../../dispatch/collections'),
      dimensions: require('../../dispatch/dimensions'),
      metrics: require('../../dispatch/metrics'),
      config: require('.
export const askToken = (username, password) => (dispatch) => {
  const data = {login: username, password: password};
  return postReferential(schema.token, '/api/tokens', data)(dispatch).then(data => {
    dispatch({type: Constants.IDENTITY_LOGIN_SUCCESS, payload: data});
  })  
export const fetchToken = () => (dispatch, getState) => {
  return getReferential(schema.token, '/api/tokens/' + getState().app.logged.token)(dispatch)
export const fetchWorkerStatus = () => (dispatch) => {
  return api().get('/api/worker_status').then(function (response) {
    dispatch({type: Constants.DATA_FETCH_WORKER_STATUS, payload: response.data})
  }).catch(function () {
    dispatch({type: Constants.DATA_FETCH_WORKER_STATUS, payload: {status: 'ERROR'}});
  })
export const logout = () => (dispatch, getState) => {
  let token_id = getState().app.logged.token
  return delReferential('/api/tokens/' + token_id, 'tokens', token_id)(dispatch).then(() => {
    dispatch({type: Constants.IDENTITY_LOGOUT_SUCCESS}

  })
export const toggleLeftBar = () => (dispatch) => {
  dispatch({type: Constants.APPLICATION_NAVBAR_LEFT_TOGGLE_SUBMITTED});
export const savedDismiss = () => (dispatch) => {
  dispatch({type: Constants.DATA_SAVED_DISMISS});
export const redirectToHome  = () => (dispatch) => {
  dispatch(push('/'))
export const redirectToAdmin  = () => (dispatch) => {
  dispatch(push('/private/admin/index'))
export const redirectToExercise = (exerciseId) => (dispatch) => {
  dispatch(push('/private/exercise/' + exerciseId))
export const redirectToScenario = (exerciseId) => (dispatch) => {
  dispatch(push('/private/exercise/' + exerciseId + '/scenario'))
export const redirectToAudiences = (exerciseId) => (dispatch) => {
  dispatch(push('/private/exercise/' + exerciseId + '/audiences'))
export const redirectToEvent = (exerciseId, eventId) => (dispatch) => {
  dispatch(push('/private/exercise/' + exerciseId + '/scenario/' + eventId))
export const redirectToChecks = (exerciseId) => (dispatch) => {
  di
"use strict";
app.config(['crudRoutesProvider', function (crudRoutesProvider) {
        crudRoutesProvider.addAllRoutes({
            entity:"ExperienciaLaboral",
            crudName:"curriculum.ExperienciaLaboral"
        });
    }]);
app.controller("CurriculumExperienciaLaboralSearchController", ['$scope', 'genericControllerCrudList', 'controllerParams', function ($scope, genericControllerCrudList, controllerParams) {
        genericControllerCrudList.extendScope($scope, controllerParams);
        $scope.orderby=[
            {fieldName:"fechaInicio",orderDirection:"ASC"}
        ];
        $scope.search();
    }]);
app.controller("CurriculumExperienciaLaboralNewEditController", ['$scope', 'genericControllerCrudDetail', 'controllerParams', function ($scope, genericControllerCrudDetail, controllerParams) {
        genericControllerCrudDetail.extendScope($scope, controllerParams);
    }]);
app.controller("CurriculumExperienciaLaboralViewController", ['$scope', 'genericControllerCrudDe
var $i;
var ActivityRoute = function(di) {
  $i = di;
  $i.graoExpress.get('/service/activity/count',
    $i.controllers.passport.service.validateJson, 
  	$i.controllers.activity.service.count);
  $i.graoExpress.get('/service/activity/:id', 
    $i.controllers.passport.service.validateJson,
  	$i.controllers.activity.service.get);
  $i.graoExpress.put('/service/activity/:id', 
    $i.controllers.passport.service.validateJson,
  	$i.controllers.activity.service.validate, 
    $i.controllers.activity.service.update);
  $i.graoExpress.del('/service/activity/:id', 
    $i.controllers.passport.service.validateJson,
  	$i.controllers.activity.service.destroy);
  $i.graoExpress.get('/service/activity', 
    $i.controllers.passport.service.validateJson,
  	$i.controllers.activity.service.query);
  $i.graoExpress.post('/service/activity/validate', 
    $i.controllers.passport.service.validateJson,
  	$i.controllers.activity.service.validate, 
  	function(req, res){ 
  	  res.json($i.event.newS
var nav__catapult_8h =
    [ "nav_catapult", "nav__catapult_8h.html#ac645a1e3e664261c7550eb4051f4efe6", null ],
    [ "nav_catapult_arm", "nav__catapult_8h.html#ae43ce3ea92332fe6fc738a508702039c", null ],
    [ "nav_catapult_disarm", "nav__catapult_8h.html#a0d69b9016da0e5461ea6b85c95329c51", null ],
    [ "nav_catapult_highrate_module", "nav__catapult_8h.html#afc9cb27f8b568c7117d4fc7bfd09afbc", null ],
    [ "nav_catapult_init", "nav__catapult_8h.html#a5f1c9ada9f5651d5cd3324b22f869c4b", null ],
    [ "nav_select_touch_down", "nav__catapult_8h.html#a93764b8ee0dbc837ad7c46d752d9299b", null ],
    [ "nav_catapult_acceleration_threshold", "nav__catapult_8h.html#a6803958747912a7e558830cfa0a83016", null ],
    [ "nav_catapult_heading_delay", "nav__catapult_8h.html#a42bc1a22fca1daa815853c7c7ca0b6cc", null ],
    [ "nav_catapult_initial_pitch", "nav__catapult_8h.html#aa26f9a9c248db58f29f546944be2cf4c", null ],
    [ "nav_catapult_initial_throttle", "nav__catapult_8h.html#aee421b9216367f9e94954
angular.module('openproject.services')
  .service('ActivityService', ['HALAPIResource',
    '$http',
    'PathHelper', require('./activity-service')
  ])
  .service('AuthorisationService', require('./authorisation-service'))
  .service('GroupService', ['$http', 'PathHelper', require('./group-service')])
  .service('HookService', require('./hook-service'))
  .service('KeyboardShortcutService', [
    '$window',
    '$rootScope',
    '$timeout',
    'PathHelper',
    require('./keyboard-shortcut-service')])
  .service('PaginationService', ['DEFAULT_PAGINATION_OPTIONS', require(
    './pagination-service')])
  .service('PriorityService', ['$http', 'PathHelper', require(
    './priority-service')])
  .service('ProjectService', ['$http', 'PathHelper', 'FiltersHelper', require(
    './project-service')])
  .service('QueryService', [
    'Query',
    'Sortation',
    '$http',
    'PathHelper',
    '$q',
    'AVAILABLE_WORK_PACKAGE_FILTERS',
    'StatusService',
    'TypeService',
    'Priority

    'UserService',
    'VersionService',
    'CategoryService',
    'RoleService',
    'GroupService',
    'ProjectService',
    'WorkPackagesTableHelper',
    'I18n',
    'queryMenuItemFactory',
    '$rootScope',
    'QUERY_MENU_ITEM_TYPE',
    require('./query-service')
  ])
  .service('RoleService', ['$http', 'PathHelper', require('./role-service')])
  .service('SortService', require('./sort-service'))
  .service('StatusService', ['$http', 'PathHelper', require('./status-service')])
  .factory('TextileService', ['$http', 'PathHelper', require('./textile-service')])
  .service('TimezoneService', ['ConfigurationService', 'I18n', require(
    './timezone-service')])
  .service('TypeService', ['$http', 'PathHelper', require('./type-service')])
  .service('UserService', [
    'HALAPIResource',
    '$http',
    'PathHelper',
    require('./user-service')
  ])
  .service('VersionService', ['$http', 'PathHelper', require(
    './version-service')])
  .service('CategoryService', ['$http', '
var navList = new Object();
function createNavList(table, data){
	navList.table = table;
	navList.data = data;
	navListRefresh();
function navListMoveUp(event){
	var i = parseInt(event.target.name);
	if(i == 0)
		return;
	var tmp = navList.data[i - 1];
	navList.data[i - 1] = navList.data[i];
	navList.data[i] = tmp;
	navListRefresh();
function navListMoveDown(event){
	var i = parseInt(event.target.name);
	if(i == navList.data.length - 1)
		return;
	var tmp = navList.data[i + 1];
	navList.data[i + 1] = navList.data[i];
	navList.data[i] = tmp;
	navListRefresh();
function navListRemove(event){
	var i = parseInt(event.target.name);
	for(var t = i; t < navList.data.length - 1; t ++)
		navList.data[i] = navList.data[i + 1];
	-- navList.data.length;
	navListRefresh();
function navListAddItem(label, url){
	navList.data.push({
		label: label,
		url: url
	});
	navListRefresh();
function navListGetData(){
	return navList.data;
function navListRefresh(){
	navList.table.empty();
	navList.table.appen
$(document).ready(function() {
    var username;
    $('#show_button').hide();
    $('#show_messsage').hide();
    
    var complete = function(){
        $("#show_messsage").fadeOut(2600, function(){$('#edit_username').show();});            
    }
    
    $('#edit_username').click(function() {
        console.log('Handler for .click() called.');
        username = $('#show_username').text(); 
        var show_html = '<input type="text" name="username" id="username" value="'+username+'" />';
        $('#show_username').html(show_html);
        $('#show_button').show();
        $(this).hide();
    });
    
    $('#save_username').click(function() {
        username = $('#username').val();
        $('#show_button').hide();
        $('#username').attr("disabled", true);
        console.log(username);
        $.ajax({
            type: "POST",
            url: "/auth/change_username",
            data: {
                "username": username,
            },
            success: function(re
'use strict';
var NavStore = require('../../../../src/scripts/stores/NavStore');
describe('NavStore', function () {
    it('should notify listeners on emitNavigate', function () {
        var navListener1 = {
            callback: function() {}
        };
        spyOn(navListener1, 'callback');
        var navListener2 = {
            callback: function() {}
        };
        spyOn(navListener2, 'callback');
        var navListener3 = {
            callback: function() {}
        };
        spyOn(navListener3, 'callback');
        NavStore.addNavigateListener(navListener1.callback);
        NavStore.addNavigateListener(navListener2.callback);
        NavStore.addNavigateListener(navListener3.callback);
        NavStore.removeNavigateListener(navListener2.callback);
        NavStore.emitNavigate();
        expect(navListener1.callback.calls.count()).toEqual(1);
        expect(navListener2.callback.calls.count()).toEqual(0);
        expect(navListener3.callback.calls.count()).toEqual(1
Ext.define('plat.model.business.OrderModel',{
 	extend: 'Ext.data.Model',
    fields: [
    			'id',
    			'orderNumber',
    			'orderStatus',
    			'transactionPrice',
    			'userName',
    			'phone',
    			'email',
    			'remark',
    			'createTime',
    			'orderSource',
    			'serviceName',
    			{name:'buyer.enterprise.name',type:'String'},
    			{name:'service.enterprise.name',type:'String'},
    			{name:'service.id',type:'int'},
    			{name:'service.serviceNo',type:'String'},
    			{name:'service.serviceSource',type:'Integer'},
    			{name:'service.serviceName',type:'String'},
    			{name:'service.category.id',type:'int'},
    			{name:'service.category.text',type:'String'},
    			{name:'service.registerTime',type:'String'},
    			{name:'service.serviceNum',type:'Integer'},
    			{name:'service.linkMan',type:'String'},
    			{name:'service.tel',type:'String'},
    			{name:'service.email',type:'String'},
    			{name:'service.serviceMethod',type:'String'},
  

    			{name:'service.chargeMethod',type:'String'},
    			{name:'service.costPrice',type:'Integer'},
    			{name:'service.currentStatus',type:'Integer'},
    			{name:'service.lastStatus',type:'Integer'},
    			{name:'service.picture',type:'String'},
    			{name:'service.totalScore',type:'double'},
    			{name:'service.evaluateScore',type:'double'},
    			{name:'biddingService.id',type:'int'},
    			{name:'biddingService.bidNo',type:'String'},
    			{name:'biddingService.createTime',type:'String'},
    			{name:'biddingService.name',type:'String'},
    			{name:'biddingService.minPrice',type:'Integer'},
    			{name:'biddingService.maxPrice',type:'Integer'},
    			{name:'biddingService.attachment',type:'String'},
    			{name:'biddingService.description',type:'String'},
    			{name:'biddingService.linkMan',type:'String'},
    			{name:'biddingService.tel',type:'String'},
    			{name:'biddingService.email',type:'String'},
    			{name:'biddingService.status',type:'Integer'},
/**
* @jsx React.DOM
*/
'use strict';
var React = require('react');
module.exports = React.createClass({
  displayName: 'ConditionalComponent',
  render: function render() {
    var value = this.props.value;
    var shown = [];
    React.Children.forEach(this.props.children, function (child) {
      var show = true;
      if (show && child.props.showIfDefined) {
        show = typeof value !== 'undefined';
      }
      if (show && child.props.showIfUndefined) {
        show = typeof value === 'undefined';
      }
      if (show && child.props.showIfTrue) {
        show = value === true;
      }
      if (show && child.props.showIfTruthy) {
        show = !!value;
      }
      if (show && child.props.showIfFalse) {
        show = value === false;
      }
      if (show && child.props.showIfFalsy) {
        show = !value;
      }
      if (show && typeof child.props.showIfEquals !== 'undefined') {
        show = value == child.props.showIfEquals;
      }
      if (show && typeof child.
/**
 * Created by Viktoria on 14.11.2014.
 */
'use strict';
$(function(){
    var $navBar = $('#navbar'),
        articlesSubMenuClass = 'articles',
        navBarIsHide = false,
        showFlagClass = 'showFlag',
        mainContentClass = '.main-content',
        mainContentMargin = $(mainContentClass).css('margin-top').replace('px','');
    function showFullNavBar($nav) {
        if (navBarIsHide) {
            navBarIsHide = false;
            $nav.css({ top: '0'});
            $nav.removeClass(showFlagClass);
        }
    }
    function hideNavBar($nav) {
        var height = Math.max($nav.outerHeight(), $nav.find('.container-fluid').outerHeight());
        if (!navBarIsHide) {
            navBarIsHide = true;
            $nav.css({ top: '-' + height + 'px' });
            $nav.addClass(showFlagClass);
        }
    }
    function showArticlesSubMenu(){
        if($navBar.hasClass(articlesSubMenuClass)){
            $navBar.removeClass(articlesSubMenuClass);
        }else{
     
define(function (require) {
   
  var angular = require('angular'),
      Controllers = angular.module('controllers', ['ui.bootstrap']);
   
  Controllers.controller('angEmpController', require('controllers/angEmployeeController'));
  Controllers.controller('userController', require('controllers/userController'));
  Controllers.controller('authController', require('controllers/authController'));
  Controllers.controller('mybibleController', require('controllers/mybibleController'));
  Controllers.controller('groupController', require('controllers/groupController'));
  Controllers.controller('modalGroupEditController', require('controllers/modalGroupEditController'));
  Controllers.controller('modalGroupDeleteController', require('controllers/modalGroupDeleteController'));
  Controllers.controller('questionController', require('controllers/questionController'));
  Controllers.controller('modalQuestionEditController', require('controllers/modalQuestionEditController'));
  Controllers.con
﻿(function ($, undefined) {
    var nav,
        navHeight,
        $window,
        doc,
        boundTop,
        boundBottom;
    $(function () {
        cacheElements();
        $window.scroll(function () {
            var left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
            var top = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
            var navTop = nav.offset().top,
                navBottom = navTop + navHeight;
            
            nav.css('top', top - navHeight);
            navTop = nav.offset().top;
            navBottom = navTop + navHeight;
            if (navTop < boundTop)
                nav.css('top', 0);
            if(navBottom > boundBottom)
                nav.css('top', boundBottom - navHeight);
        });
    });
    function cacheElements() {
        nav = $('.lq-fixed-sidenav');
        navHeight = nav.outerHeight();
        boundTop = $('.lq-fixed-sidenav-container').offset().top;
        boundBottom = $('
var Level1 = {
    enemyMax:6,
    enemies:[
        {
            ShowType:"Repeat",
            ShowTime:"00:02",
            Types:[0,1,2]
        },
        {
            ShowType:"Repeat",
            ShowTime:"00:05",
            Types:[3,4,5]
        }
        /*{
            ShowType:"Repeat",
            ShowTime:"00:08",
            Types:[0,4,3,5]
        },
        {
            ShowType:"Once",
            ShowTime:"00:6",
            Types:[0,2,4,3]
        },
        {
            ShowType:"Once",
            ShowTime:"00:16",
            Types:[0,2,5,4,3]
        },
        {
            ShowType:"Once",
            ShowTime:"00:25",
            Types:[0,3,5,4,3]
        },
        {
            ShowType:"Once",
            ShowTime:"00:35",
            Types:[4,5,3,1,3]
        },
        {
            ShowType:"Once",
            ShowTime:"00:50",
            Types:[0,3,2,1,0,3]
        },
        {
            ShowType:"Once",
            ShowTime:"01:15",
          
angular.module('app', ['ngRoute'])
        .factory('sessionFactory', sessionFactory)
        .service('userService', userService)
        .service('todoService', todoService)
        .service('microsPoussinsService', microsPoussinsService)
        .service('miniPoussinsService', miniPoussinsService)
        .service('poussinsService', poussinsService)
        .service('minimesService', minimesService)
        .service('benjaminsService', benjaminsService)
        .service('cadetsService', cadetsService)
        .service('juniorsService', juniorsService)
        .service('seniorsService', seniorsService)
        .controller('microsPoussinsController', microsPoussinsController)
        .controller('miniPoussinsController', miniPoussinsController)
        .controller('poussinsController', poussinsController)
        .controller('minimesController', minimesController)
        .controller('benjaminsController', benjaminsController)
        .controller('cadetsController', cadetsController)

var express = require('express');
var fs = require('fs');
var Api = require('./api');
var router = express.Router();
var api = new Api();
router.all('/api/Dns.Record.Create', api.dnsRecordCreate.bind(api));
router.all('/api/Dns.Record.List', api.dnsRecordList.bind(api));
router.all('/api/Dns.Record.Remove', api.dnsRecordRemove.bind(api));
router.all('/api/Dns.Record.Cached', api.dnsRecordCached.bind(api));
router.all('/api/Dns.Record.Clean', api.dnsRecordClean.bind(api));
router.all('/api/Dns.Record.Info', api.dnsRecordInfo.bind(api));
router.all('/api/Proxy.Rule.Info', api.proxyRuleInfo.bind(api));
router.all('/api/Proxy.Rule.List', api.proxyRuleList.bind(api));
router.all('/api/Proxy.Rule.Create', api.proxyRuleCreate.bind(api));
router.all('/api/Proxy.Rule.Remove', api.proxyRuleRemove.bind(api));
router.all('/api/Service.Notice.Status', api.serviceNoticeStatus.bind(api));
router.all('/api/Service.Notice.List', api.serviceNoticeList.bind(api));
router.all('/api/Service.Notice.Read', a
module.exports.routes = {
  
  
  'GET /': { controller: 'MainController', action: 'index' },
  'GET /login': {controller: 'AuthController', action: 'printLogin'},
  'GET /signup': {controller: 'AuthController', action: 'printSignUp'},
  'POST /login': {controller: 'AuthController', action: 'login'},
  'GET /logout': {controller: 'AuthController', action: 'logout'},
  
  'GET /collections/:slug': {controller: 'ProductController', action: 'index'},
  'GET /product/:slug': {controller: 'ProductController', action: 'show'},
  'POST /product/:id': {controller: 'ProductController', action: 'info'},
  
  'GET /cart/checkout': { controller: 'CartController', action: 'viewCheckOut'},
  
  'POST /payment' : {controller: 'PaymentController', action: 'payment'},
  'GET /payment/execute': { controller: 'PaymentController', action: 'execute' },
  'GET /payment/cancel': { controller: 'PaymentController', action: 'cancel' },
  'POST /payment/transport': { controller: 'PaymentController', action: 'red

  'GET /payment/ok': { controller: 'PaymentController', action: 'redsysOk' },
  'GET /payment/ko': { controller: 'PaymentController', action: 'redsysCancel' },
  'GET /test': { controller: 'PaymentController', action: 'redsysCallback' },
  'GET /cart/show': { controller: 'CartController', action: 'viewCartDetails'},
  'GET /account': { controller: 'UserController', action: 'account'},
  'POST /account': { controller: 'UserController', action: 'update'},
  'GET /account/orders': { controller: 'OrderController', action: 'myorders'},
  'GET /account/orders/:id': { controller: 'OrderController', action: 'showmyorder'},
  'GET /user/success': {controller: 'UserController', action: 'success'},
  'GET /pages/:slug': {controller: 'PageController', action: 'show'},
  
  'GET /admin/cart': {controller: 'admin/CartController', action: 'index'},
  
  'GET /admin': {controller: 'admin/AdminController', action: 'index'},
  'GET /admin/settings': {controller: 'SettingsController', action: 'indexAdmi

  'GET /admin/settings/add': {controller: 'SettingsController', action: 'addAdmin'},
  'GET /admin/settings/edit/:id': {controller: 'SettingsController', action: 'editAdmin'},
  
  'GET /admin/category': {controller: 'admin/CategoryController', action: 'index'},
  'GET /admin/category/add': {controller: 'admin/CategoryController', action: 'add'},
  'POST /admin/category/create': {controller: 'admin/CategoryController', action: 'create'},
  'GET /admin/category/:id': {controller: 'admin/CategoryController', action: 'show'},
  'GET /admin/category/edit/:id': {controller: 'admin/CategoryController', action: 'edit'},
  'POST /admin/category/update/:id': {controller: 'admin/CategoryController', action: 'update'},
  'GET /admin/category/destroy/:id': {controller: 'admin/CategoryController', action: 'destroy'},
  
  'GET /admin/product': {controller: 'admin/ProductController', action: 'index'},
  'GET /admin/product/add': {controller: 'admin/ProductController', action: 'add'},
  'POST /admin
$(function() {
	var resumeAnchor = $("#resume-wrapper").offset().top - 80;
	var educationAnchor = $("#education-wrapper").offset().top - 80;
	var experienceAnchor = $("#experience-wrapper").offset().top - 80;
	var skillsAnchor = $("#skills-wrapper").offset().top - 80;
	var contactAnchor = $("#contact-wrapper").offset().top - 80;
	var $w = $(window).scroll(function(){
		if( $w.scrollTop() > resumeAnchor){ 
			$("#nav-2").addClass("nav-selected");
			$("#nav-2 a").addClass("bold-text");
			
			$("#nav-3").removeClass("nav-selected");
			$("#nav-3 a").removeClass("bold-text");
			
			$("#nav-4").removeClass("nav-selected");
			$("#nav-4 a").removeClass("bold-text");
			
			$("#nav-5").removeClass("nav-selected");
			$("#nav-5 a").removeClass("bold-text");
			
			$("#nav-6").removeClass("nav-selected");
			$("#nav-6 a").removeClass("bold-text");
		}
		else{
			$("#nav-2").removeClass("nav-selected");
			$("#nav-2 a").removeClass("bold-text");
		}
		
		if( $w.scrollTop() > educationAnchor){

			$("#nav-3").addClass("nav-selected");
			$("#nav-3 a").addClass("bold-text");
			
			$("#nav-2").removeClass("nav-selected");
			$("#nav-2 a").removeClass("bold-text");
			
			$("#nav-4").removeClass("nav-selected");
			$("#nav-4 a").removeClass("bold-text");
			
			$("#nav-5").removeClass("nav-selected");
			$("#nav-5 a").removeClass("bold-text");
			
			$("#nav-6").removeClass("nav-selected");
			$("#nav-6 a").removeClass("bold-text");			
		}
		else{
			$("#nav-3").removeClass("nav-selected");
			$("#nav-3 a").removeClass("bold-text");
		}
		
		if( $w.scrollTop() > experienceAnchor){ 
			$("#nav-4").addClass("nav-selected");
			$("#nav-4 a").addClass("bold-text");
			
			$("#nav-3").removeClass("nav-selected");
			$("#nav-3 a").removeClass("bold-text");
			
			$("#nav-2").removeClass("nav-selected");
			$("#nav-2 a").removeClass("bold-text");
			
			$("#nav-6").removeClass("nav-selected");
			$("#nav-6 a").removeClass("bold-text");			
		}
		else{
			$("#nav-4").removeClass("nav-s

			$("#nav-4 a").removeClass("bold-text");
		}
		
		if( $w.scrollTop() > skillsAnchor){ 
			$("#nav-5").addClass("nav-selected");
			$("#nav-5 a").addClass("bold-text");
			
			$("#nav-3").removeClass("nav-selected");
			$("#nav-3 a").removeClass("bold-text");
			
			$("#nav-2").removeClass("nav-selected");
			$("#nav-2 a").removeClass("bold-text");
			
			$("#nav-6").removeClass("nav-selected");
			$("#nav-6 a").removeClass("bold-text");			
		}
		else{
			$("#nav-5").removeClass("nav-selected");
			$("#nav-5 a").removeClass("bold-text");
		}
		
		if( $w.scrollTop() > contactAnchor){ 
			$("#nav-6").addClass("nav-selected");
			$("#nav-6 a").addClass("bold-text");
			
			$("#nav-3").removeClass("nav-selected");
			$("#nav-3 a").removeClass("bold-text");
			
			$("#nav-4").removeClass("nav-selected");
			$("#nav-4 a").removeClass("bold-text");
			
			$("#nav-5").removeClass("nav-selected");
			$("#nav-5 a").removeClass("bold-text");
			
			$("#nav-2").removeClass("nav-selected");
			$(
var middleware  = require('../middleware').middleware,
    api         = require('../api');
module.exports = function (server) {
    /* TODO: auth should be public auth not user auth */
    server.get('/ghost/api/v0.1/posts', middleware.authAPI, api.requestHandler(api.posts.browse));
    server.post('/ghost/api/v0.1/posts', middleware.authAPI, api.requestHandler(api.posts.add));
    server.get('/ghost/api/v0.1/posts/:id', middleware.authAPI, api.requestHandler(api.posts.read));
    server.put('/ghost/api/v0.1/posts/:id', middleware.authAPI, api.requestHandler(api.posts.edit));
    server.del('/ghost/api/v0.1/posts/:id', middleware.authAPI, api.requestHandler(api.posts.destroy));
    server.get('/ghost/api/v0.1/posts/getSlug/:title', middleware.authAPI, api.requestHandler(api.posts.getSlug));
    server.get('/ghost/api/v0.1/settings/', middleware.authAPI, api.requestHandler(api.settings.browse));
    server.get('/ghost/api/v0.1/settings/:key/', middleware.authAPI, api.requestHandler(api
/**
 * Main application routes
 */
'use strict';
var errors = require('./components/errors');
function logger(req,res,next){
  console.log(new Date(), req.method, req.url);
  next();
module.exports = function(app) {
  app.use(logger);
  app.use('/api/patient', require('./api/patient'));
  app.use('/api/totalRiskByVAMCPieChart', require('./api/totalRiskByVAMCPieChart'));
  app.use('/api/getListOfVAMC', require('./api/getListOfVAMC'));
  app.use('/api/clinicalDecisionSupport', require('./api/clinicalDecisionSupport'));
  app.use('/api/suicideData', require('./api/suicideData'));
  app.use('/api/topMidRiskMetrics', require('./api/topMidRiskMetrics'));
  app.use('/api/genderDistributionMetrics', require('./api/genderDistributionMetrics'));
  app.use('/api/ageGroupsMetrics', require('./api/ageGroupsMetrics'));
  app.use('/api/militaryBranchMetrics', require('./api/militaryBranchMetrics'));
  app.use('/api/VAMCMetrics', require('./api/VAMCMetrics'))
  app.use('/api/outReachStatusMetrics', re

  app.use('/api/prediction', require('./api/prediction'));
  app.use('/api/enterdata', require('./api/enterdata')); 
  app.use('/api/patientContact', require('./api/patientContact'));
  app.use('/api/emergencyContact', require('./api/emergencyContact'));
  app.use('/api/patientFlagData', require('./api/patientFlagData'));
  app.use('/api/medicationData', require('./api/medicationData'));
  app.use('/api/diagnosesData', require('./api/diagnosesData'));
  app.use('/api/appointmentData', require('./api/appointmentData'));
  app.use('/api/visnRoster', require('./api/visnRoster'));
  app.use('/api/facilityRoster', require('./api/facilityRoster'));
  app.use('/api/audit', require('./api/audit'));
  app.use('/api/communityResource', require('./api/communityResource'));
  app.use('/api/CDSQuestionnaire', require('./api/CDSQuestionnaire'));
  app.use('/api/dashboard', require('./api/dashboard'));
  app.use('/auth', require('./auth'));
  app.use('/api/user', require('./api/user'));
  app.use('/
var message = require('./message.js');
var entity = require('./entity.js');
var moment = require('moment');
var ResLoginMessage = function() {
	message.Message.apply(this, arguments);
	this.uid = undefined;
	this.is_ok = undefined;
	this.error_msg = undefined;
	this.public_ip = undefined;
	this.public_port = undefined;
};
ResLoginMessage.prototype = new message.Message();
ResLoginMessage.prototype.constructor = ResLoginMessage;
exports.ResLoginMessage = ResLoginMessage;
var ResLogoutMessage = function() {
	message.Message.apply(this, arguments);
	this.uid = undefined;
	this.is_ok = undefined;
	this.error_msg = undefined;
};
ResLogoutMessage.prototype = new message.Message();
ResLogoutMessage.prototype.constructor = ResLogoutMessage;
exports.ResLogoutMessage = ResLogoutMessage;
var ResJoinMessage = function() {
	message.Message.apply(this, arguments);
	this.uid = undefined;
	this.is_ok = undefined;
	this.error_msg = undefined;
};
ResJoinMessage.prototype = new message.Message();
ResJoin

exports.ResJoinMessage = ResJoinMessage;
var NotifyJoinMessage = function() {
	message.Message.apply(this, arguments);
	this.uid = undefined;
	this.group = undefined;
	this.public_ip = undefined;
	this.public_port = undefined;
};
NotifyJoinMessage.prototype = new message.Message();
NotifyJoinMessage.prototype.constructor = NotifyJoinMessage;
exports.NotifyJoinMessage = NotifyJoinMessage;
var ResLeaveMessage = function() {
	message.Message.apply(this, arguments);
	this.uid = undefined;
	this.is_ok = undefined;
	this.error_msg = undefined;
};
ResLeaveMessage.prototype = new message.Message();
ResLeaveMessage.prototype.constructor = ResLeaveMessage;
exports.ResLeaveMessage = ResLeaveMessage;
var NotifyLeaveMessage = function() {
	message.Message.apply(this, arguments);
	this.uid = undefined;
	this.group = undefined;
};
NotifyLeaveMessage.prototype = new message.Message();
NotifyLeaveMessage.prototype.constructor = NotifyLeaveMessage;
exports.NotifyLeaveMessage = NotifyLeaveMessage;
var R
$(function () {
    $('form#perform').on('submit', function (event) {
        $('#ajax-loader').show();
        $.post("/perform", $("#perform").serialize(), function(data) {
            $('#results').prepend(data);
            if ($('#show_output').is(':checked')) { $('.result').show(); }
            if ($('#show_command').is(':checked')) { $('.command').show(); }
            if ($('#show_response').is(':checked')) { $('.response').show(); }
            $('#results').effect('highlight', 'slow');
            $('#ajax-loader').hide();
        });
        return false;
    });
    $('#show_output').change(function(){
        if ($('#show_output').is(':checked')) {
            $('.result').show();
        } else {
            $('.result').hide();
        }
    });
    $('#show_command').change(function(){
        if ($('#show_command').is(':checked')) {
            $('.command').show();
        } else {
            $('.command').hide();
        }
    });
    $('#show_response').change(fun
var classboost_1_1locale_1_1basic__message =
    [ "char_type", "group__message.html#gaa5d8dcf9d7aa01abbe73c841299345db", null ],
    [ "facet_type", "group__message.html#gaa63527cb368d0bcd4cb0809138c927df", null ],
    [ "string_type", "group__message.html#ga529423e08fc9a8ca9ceef5c56181c6d3", null ],
    [ "basic_message", "group__message.html#ga33bdf7fbb164a96a8685b5747afc2b45", null ],
    [ "basic_message", "group__message.html#gae32d7f89d5f268e8d6bae662d8008bae", null ],
    [ "basic_message", "group__message.html#ga40bf56415a235f13ee666d51f645f280", null ],
    [ "basic_message", "group__message.html#ga4d78f8f45467984d7244e2ddbb9e0f6e", null ],
    [ "basic_message", "group__message.html#gabf9afe77f0254397389289c386bf8a73", null ],
    [ "basic_message", "group__message.html#gabbb4365d621a33442ae34ac7c17a9d74", null ],
    [ "basic_message", "group__message.html#ga380f3a258b3b28929bbf01f4e622e71a", null ],
    [ "basic_message", "group__message.html#ga8c2fab962e10a46ea85f0188d08e
/**
 * Main application routes
 */
'use strict';
var errors = require('./components/errors');
module.exports = function(app) {
  app.use('/api/currencies', require('./api/currency'));
  app.use('/api/shipping', require('./api/shipping'));
  app.use('/api/images', require('./api/image'));
  app.use('/api/brands', require('./api/brand'));
  app.use('/api/taxes', require('./api/tax'));
  app.use('/api/orders', require('./api/order'));
  app.use('/api/customers', require('./api/customer'));
  app.use('/api/categories', require('./api/category'));
  app.use('/api/carts', require('./api/cart'));
  app.use('/api/addresses', require('./api/address'));
  app.use('/api/products', require('./api/product'));
  app.use('/api/things', require('./api/thing'));
  app.use('/api/users', require('./api/user'));
  app.use('/auth', require('./auth'));
  
  app.route('/:url(api|auth|components|app|bower_components|assets)/*')
   .get(errors[404]);
  app.route('/*')
    .get(function(req, res) {
      res.se
$( document ).ready(function() {
    $('#viewPass').on('change', function () {
        if ($(this).is(':checked')) {
            $('.txtPass').attr('type', 'text');
        }
        else {
            $('.txtPass').attr('type', 'password');
        }
    });
    function showSuccessMessage(_message) {
        prepareMessage();
        $('#alertMessage').addClass('alert-success');
        $('#paragrahpMessage').text(_message);
    }
    function showInfoMessage(_message) {
        prepareMessage();
        $('#alertMessage').addClass('alert-info');
        $('#paragrahpMessage').text(_message);
    }
    function showDangerMessage(_message) {
        prepareMessage();
        $('#alertMessage').addClass('alert-danger');
        $('#paragrahpMessage').text(_message);
    }
    function prepareMessage() {
        $('#alertMessage').removeClass('alert-success').removeClass('alert-danger').removeClass('alert-info');
        $('#alertMessage').removeClass('hideAlert').addClass('showAlert');
﻿'use strict';
class ShowStore extends ChangeEventEmitter {
    constructor(){
        super();
        this.shows = [];
        var self = this;
        this.setShows = function(shows){
            self.shows = shows;
            self.emitChange();
        };
        this.pushShows = function(_shows){
            for (var i = 0; i < _shows.length; i++){
                this.pushShow(_shows[i]);
            }
        };
        this.pushShow = function(show){
            var clonedShows = Clone(self.shows);
            var remainingShows = clonedShows.filter((s) => s.Id != show.Id);
            remainingShows.push(show);
            self.setShows(remainingShows);
        };
        this.removeShow = function(showId){
            var clonedShows = Clone(self.shows);
            var remainingShows = clonedShows.filter((s) => s.Id != showId);
            self.setShows(remainingShows);
        };
        this.getShows = function(){
            return self.shows.sort((a, b) => a.Id - b.Id);

        };
        this.get = function(showId){
            if(self.shows.find){
                return Clone(self.shows.find((show) => show.Id == showId));
                for (var i = 0; i < self.shows.length; i++) {
                    var show = self.shows[i];
                    if(show.Id == showId){
                        return Clone(show);
                    }
                }
            }
            return null;
        };
        this.handleAction = function(action){
            switch(action.type){
                case "LOAD_SHOWS":
                    break;
                case "LOAD_SHOWS_SUCCESS":
                    self.pushShows(action.shows);
                    break;
                case "LOAD_SHOWS_FAIL":
                    break;
                case "LOAD_SHOW":
                    break;
                case "LOAD_SHOW_SUCCESS":
                    self.pushShow(action.show);
                    break;
                case "LOAD_SHOW_FAIL":
            

                case "ADD_SHOW":
                    break;
                case "ADD_SHOW_SUCCESS":
                    self.pushShow(action.show);
                    BroadcastUtil.broadcastShowChange(action.groupName);
                    break;
                case "ADD_SHOW_FAIL":
                    break;
                case "UPDATE_SHOW":
                    break;
                case "UPDATE_SHOW_SUCCESS":
                    self.pushShow(action.show);
                    BroadcastUtil.broadcastShowChange(action.groupName);
                    break;
                case "UPDATE_SHOW_FAIL":
                    break;
                case "REMOVE_SHOW":
                    break;
                case "REMOVE_SHOW_SUCCESS":
                    self.removeShow(action.showId);
                    BroadcastUtil.broadcastShowChange(action.groupName);
                    break;
                case "REMOVE_SHOW_FAIL":
                    break;
            }
        };
        Di
/**
 * Created by vincentfxz on 15/7/1.
 */
/**
 * 服务表单处理
 *
 */
/**
 * 服务新增弹出表单
 */
var parentId;
$(function(){
    var node = $('.mxservicetree').tree('getSelected');
    if(node.serviceCategory !=null){
        parentId = node.serviceCategory.categoryId;
    }
    if(node.service != null){
        parentId = node.service.categoryId;
    }
    /**
     * 服务新增保持按钮事件
     */
    var saveService = function saveService(){
        var service = {};
        service.serviceId = $('#serviceId').val();
        service.serviceName = $('#serviceName').val();
        service.desc = $('#discription').val();
        service.categoryId = parentId;
        service.version = $('#version').val();
        service.state = $('#state').val();
        if(PROCESS_INFO && PROCESS_INFO.processId){
            service.processId = PROCESS_INFO.processId;
        }
        serviceManager.add(service,function(result){
            $('#w').window('close');
            $('.mxservicetree').tree('reload');
        });
$(document).ready(function(){
	$('#account_nav').hide();
	$('#inbox').hide();
	$('#profile_sub_nav').hide();
	$('#networks_sub_nav').hide();
	$('#interests_sub_nav').hide();
	$('#services_sub_nav').hide();
	$('#messages').mouseenter(function(){
		$('#invitations_count').hide();
	});
	$('#messages').mouseleave(function(){
		$('#invitations_count').show();
	});
	$('#profile_pic').mouseenter(function(){
		$('#account_nav').show();
		$('#business_nav').hide();
	});
	$('#profile_actions').mouseleave(function(){
		$('#account_nav').hide();
		$('#business_nav').show();
	});
	$('#messages').mouseenter(function(){
		$('#inbox').show();
		$('#business_nav').hide();
	});
	$('#messages').mouseleave(function(){
		$('#inbox').hide();
		$('#business_nav').show();
	});
	$('#profile_nav').mouseenter(function(){
		$('#profile_sub_nav').fadeIn("fast");
	});
	$('#profile_nav').mouseleave(function(){
		$('#profile_sub_nav').hide();
	});
	$('#networks_nav').mouseenter(function(){
		$('#networks_sub_nav').fa
var nav__catapult_8h =
    [ "nav_catapult", "nav__catapult_8h.html#ac645a1e3e664261c7550eb4051f4efe6", null ],
    [ "nav_catapult_arm", "nav__catapult_8h.html#ae43ce3ea92332fe6fc738a508702039c", null ],
    [ "nav_catapult_disarm", "nav__catapult_8h.html#a0d69b9016da0e5461ea6b85c95329c51", null ],
    [ "nav_catapult_highrate_module", "nav__catapult_8h.html#afc9cb27f8b568c7117d4fc7bfd09afbc", null ],
    [ "nav_catapult_init", "nav__catapult_8h.html#a5f1c9ada9f5651d5cd3324b22f869c4b", null ],
    [ "nav_select_touch_down", "nav__catapult_8h.html#a93764b8ee0dbc837ad7c46d752d9299b", null ],
    [ "nav_catapult_acceleration_threshold", "nav__catapult_8h.html#a6803958747912a7e558830cfa0a83016", null ],
    [ "nav_catapult_heading_delay", "nav__catapult_8h.html#abf1646b21522836957567318ffaefd2d", null ],
    [ "nav_catapult_initial_pitch", "nav__catapult_8h.html#aa26f9a9c248db58f29f546944be2cf4c", null ],
    [ "nav_catapult_initial_throttle", "nav__catapult_8h.html#aee421b9216367f9e94954
"use strict";
/********************************************************************
 * This thing will just bundle the classes in ./lib/message_classes *
 ********************************************************************/
/************************
 * Requires and exports *
 ************************/
module.exports = {
	Message: require("./message"),
	FileMessage: require("./file_message"),
	LocationMessage: require("./location_message"),
	ContactMessage: require("./contact_message"),
	TextMessage: require("./text_message"),
	ForwardedMessage: require("./forwarded_message"),
	ReplyMessage: require("./reply_message"),
	CommandMessage: require("./command_message"),
	AudioMessage: require("./audio_message"),
	DocumentMessage: require("./document_message"),
	PhotoMessage: require("./photo_message"),
	StickerMessage: require("./sticker_message"),
	VideoMessage: require("./video_message"),
	VoiceMessage: require("./voice_message"),
	NewChatParticipantMessage: require("./new_chat_participan
(function(){
  var jobHandler = document.getElementById("jobs");
  var $jobForm = $("form"),
      $measurements = $(".dnc"),
      $filemp3 = $("#filemp3"),
      $filemp4 = $("#filemp4"),
      $website = $("#website");
  $jobForm.hide();
  function jobSelection(){
    jobHandler.onchange = function(){
      var selectedJob = jobHandler.selectedIndex;
      switch(selectedJob){
        case 1:
          console.log("Dancers");
          $jobForm.show();
          $measurements.show();
          $filemp3.show();
          $filemp4.show();
          $website.show();
          break;
        case 2:
          console.log("DJ");
          $jobForm.show();
          $measurements.hide();
          $filemp3.show();
          $filemp4.show();
          $website.show();
          break;
        case 3:
          console.log("Band");
          $jobForm.show();
          $measurements.hide();
          $filemp3.show();
          $filemp4.show();
          $website.show();
          break;
    
/* */ 
"format cjs";
(function(process) {
  "use strict";
  var EventConstants = require("./EventConstants");
  var invariant = require("./invariant");
  var injection = {
    Mount: null,
    injectMount: function(InjectedMount) {
      injection.Mount = InjectedMount;
      if ("production" !== process.env.NODE_ENV) {
        ("production" !== process.env.NODE_ENV ? invariant(InjectedMount && InjectedMount.getNode, 'EventPluginUtils.injection.injectMount(...): Injected Mount module ' + 'is missing getNode.') : invariant(InjectedMount && InjectedMount.getNode));
      }
    }
  };
  var topLevelTypes = EventConstants.topLevelTypes;
  function isEndish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
  }
  function isMoveish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
  }
  function isStartish(topL

    return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
  }
  var validateEventDispatches;
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches = function(event) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchIDs = event._dispatchIDs;
      var listenersIsArr = Array.isArray(dispatchListeners);
      var idsIsArr = Array.isArray(dispatchIDs);
      var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
      var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
      ("production" !== process.env.NODE_ENV ? invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
    };
  }
  function forEachEventDispatch(event, cb) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;
    if ("produ

      validateEventDispatches(event);
    }
    if (Array.isArray(dispatchListeners)) {
      for (var i = 0; i < dispatchListeners.length; i++) {
        if (event.isPropagationStopped()) {
          break;
        }
        cb(event, dispatchListeners[i], dispatchIDs[i]);
      }
    } else if (dispatchListeners) {
      cb(event, dispatchListeners, dispatchIDs);
    }
  }
  function executeDispatch(event, listener, domID) {
    event.currentTarget = injection.Mount.getNode(domID);
    var returnValue = listener(event, domID);
    event.currentTarget = null;
    return returnValue;
  }
  function executeDispatchesInOrder(event, executeDispatch) {
    forEachEventDispatch(event, executeDispatch);
    event._dispatchListeners = null;
    event._dispatchIDs = null;
  }
  function executeDispatchesInOrderStopAtTrueImpl(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;
    if ("production" !== process.env.NODE_ENV) {
      validateEv

    }
    if (Array.isArray(dispatchListeners)) {
      for (var i = 0; i < dispatchListeners.length; i++) {
        if (event.isPropagationStopped()) {
          break;
        }
        if (dispatchListeners[i](event, dispatchIDs[i])) {
          return dispatchIDs[i];
        }
      }
    } else if (dispatchListeners) {
      if (dispatchListeners(event, dispatchIDs)) {
        return dispatchIDs;
      }
    }
    return null;
  }
  function executeDispatchesInOrderStopAtTrue(event) {
    var ret = executeDispatchesInOrderStopAtTrueImpl(event);
    event._dispatchIDs = null;
    event._dispatchListeners = null;
    return ret;
  }
  function executeDirectDispatch(event) {
    if ("production" !== process.env.NODE_ENV) {
      validateEventDispatches(event);
    }
    var dispatchListener = event._dispatchListeners;
    var dispatchID = event._dispatchIDs;
    ("production" !== process.env.NODE_ENV ? invariant(!Array.isArray(dispatchListener), 'executeDirectDispatch(...): Invalid 
/**
 * Created by @raulanatol on 29/05/15.
 */
var slackConnector = require('../slack/connector');
function parseMessageToJSON(message) {
    var jsonMessage;
    try {
        jsonMessage = JSON.parse(message.Message);
    } catch (exception) {
        jsonMessage = {
            "message": message,
            "notificationType": "nonJSONMessage"
        };
    }
    return jsonMessage;
function generateDefaultSlackMessage(slackMessage, jsonMessage) {
    slackMessage['text'] = jsonMessage.message;
    slackMessage['attachments'] = [{
        'fallback': jsonMessage.message,
        'text': jsonMessage.message,
        'color': '#000077'
    }];
    return slackMessage;
function generateSlackMessageFromNonJson(slackMessage, jsonMessage) {
    slackMessage['text'] = jsonMessage.message;
    slackMessage['attachments'] = {
        'fallback': jsonMessage.message,
        'text': jsonMessage.message,
        'color': '#000077'
    };
    return slackMessage;
function generateSlackMessag

    slackMessage['text'] = jsonMessage.message;
    slackMessage['attachments'] = [{
        "fallback": jsonMessage.message,
        "text": jsonMessage.message,
        "color": jsonMessage.NewStateValue == "ALARM" ? "warning" : "good",
        "fields": [{
            "title": "Alarm",
            "value": jsonMessage.AlarmName,
            "short": true
        }, {
            "title": "Status",
            "value": jsonMessage.NewStateValue,
            "short": true
        }, {
            "title": "Reason",
            "value": jsonMessage.NewStateReason,
            "short": false
        }]
    }];
    return slackMessage;
exports.cloudWatch = function (req, res) {
    var request = require('request');
    var message = JSON.parse(req.text);
    if (message['Type'] == 'SubscriptionConfirmation') {
        request(message['SubscribeURL'], function (err, result, body) {
            if (err || body.match(/Error/)) {
                res.send('Error: Impossible confirm subscript
app.service('logoutUtility', ['policyDataDbService', 'personalDataDbService', 'advisorDataDbService', 'clientListDbService', 'notificationDbService', 'policyDataService', 'barChartService', 'reminderService', 'loadingService', 'tutorialManager', 'credentialManager', function(policyDataDbService,personalDataDbService,advisorDataDbService,clientListDbService,notificationDbService,
                                     policyDataService,barChartService,reminderService,loadingService,tutorialManager,credentialManager) {
    var modal = {};
    return {
        destroyScope : function() {
            advisorDataDbService.destroy();
            barChartService.destroy();
            clientListDbService.destroy();
            credentialManager.destroy();
            notificationDbService.destroy();
            personalDataDbService.destroy();
            policyDataDbService.destroy();
            policyDataService.destroy();
            reminderService.destroy();
            tutorialManager.de
/*
Boomstrap Navigation Links and Navigation Link Blocks
*/
(function($) {
  $.fn.btNavLinks = function() {
    var handleNavLinksBar = function(el) {
      var $nav = $(el) || $(this);
        $nav.addClass('nav-links-init');
      }
      var $activeLink = $nav.find('li.active');
      var $navLinksBar = $nav.find('.nav-links__bar');
      
        if ($activeLink.length > 0) {
          $navLinksBar.css({
            transform: 'translateX(' + $activeLink.position().left + 'px)',
            width: $activeLink.width()
          });
        } else {
          $navLinksBar.css({
            width: 0
          });
        }
        if ($activeLink.length > 0) {
          $navLinksBar.css({
            transform: 'translateY(' + $activeLink.position().top + 'px)',
            height: $activeLink.height()
          });
        } else {
          $navLinksBar.css({
            height: 0
          });
        }
      }
    }
    var handleNavLinksClick = function(e) {
      e.preventDefaul
﻿$(function () {
    var $navTop = $('#topNav'), $navMain = $navTop.find('#navMain'), $navSub = $navMain.find('#navSub'), $navIndex = $navMain.find('#navIndex'), de = 200;
    $navIndex.mouseenter(function () {
        $navSub.show().stop().animate({
            'height': '187px'
        }, de);
        $navTop.stop().animate({
            'height': '242px'
        }, de);
    });
    $navMain.mouseleave(function () {
        $navSub.stop().animate({
            'height': '3px'
        }, de, function () {
            $navSub.hide();
        });
        $navTop.stop().animate({
            'height': '75px'
        }, de);
    });
    $navIndex.find('li:not(:eq(0))').mouseenter(function () {
        var $this = $(this), i = $this.index() - 1;
        $(this).addClass('nav3').siblings().removeClass('nav3');
        $navSub.find('dt:eq(' + i + ')').show();
    }).mouseleave(function () {
        var $this = $(this), i = $this.index() - 1;
        $this.removeClass('nav3');
        $navSub
'use strict';
var angular = require('angular');
var LoginController = require('./login-controller');
var DashboardController = require('./dashboard-controller');
var SplashController = require('./splash-controller');
var ContactsController = require('./contacts-controller');
var WorkController = require('./work-controller');
var WorksController = require('./works-controller');
var AboutController = require('./About-controller');
module.exports = angular.module('rtcRoom.controllers', [])
    .controller('LoginController', ['$scope', '$state', LoginController])
    .controller('DashboardController', DashboardController)
    .controller('SplashController', ['$scope', SplashController])
    .controller('ContactsController', ['$scope', ContactsController])
    .controller('WorkController', ['$scope', '$stateParams', '$state', '$sce', '$timeout', WorkController])
    .controller('WorksController', ['$scope', '$state', WorksController])
    .controller('AboutController', ['$scope', AboutContr
'use strict';
describe('Calculator Service', function () {
    var service;
    beforeEach(function () {
        service = new CalculatorService();
    });
    it('should display 0 when loaded', function () {
        expect(service.getDisplay()).toEqual('0');
    });
    it('should display 15 when calculate 12 + 3', function () {
        service.enterDigit('one');
        expect(service.getDisplay()).toEqual('1');
        service.enterDigit('two');
        expect(service.getDisplay()).toEqual('12');
        service.enterOperation('+');
        expect(service.getDisplay()).toEqual('12');
        service.enterDigit('three');
        expect(service.getDisplay()).toEqual('3');
        service.enterEquals();
        expect(service.getDisplay()).toEqual('15');
    });
    it('should automatic enter when chain operation : 12 + 3 % 5', function () {
        service.enterDigit('one');
        expect(service.getDisplay()).toEqual('1');
        service.enterDigit('two');
        expect(service.ge

        service.enterOperation('+');
        expect(service.getDisplay()).toEqual('12');
        service.enterDigit('three');
        expect(service.getDisplay()).toEqual('3');
        service.enterOperation('%');
        expect(service.getDisplay()).toEqual('15');
        service.enterDigit('five');
        expect(service.getDisplay()).toEqual('5');
        service.enterEquals();
        expect(service.getDisplay()).toEqual('0');
    });
    it('should handle dot : 5 / 2 = 2.5', function () {
        service.enterDigit('five');
        expect(service.getDisplay()).toEqual('5');
        service.enterOperation('/');
        expect(service.getDisplay()).toEqual('5');
        service.enterDigit('two');
        expect(service.getDisplay()).toEqual('2');
        service.enterEquals();
        expect(service.getDisplay()).toEqual('2.5');
    });
    it('should handle decimal on enterDot() : 12.34 + 1', function () {
        service.enterDigit('one');
        expect(service.getDisplay()).toE
(function() {
  'use strict';
  module.exports = function() {
    var routesApi = global.io.rootPath + 'back-end/routes/restApi/api/';
    var serviceApi = io.rootPath + 'back-end/routes/restApi/apImpl/services/';
    var useApi = {
      salesRepresentativeRegistrationApi  : require(routesApi + 'salesRepresentativeRegistrationApi'),
      salesRepresentativeListingApi       : require(routesApi + 'salesRepresentativeListingApi'),
      customerRegistrationApi             : require(routesApi + 'customerRegistrationApi'),
      customerListApi                     : require(routesApi + 'customerListApi'),
      quotationRegistrationApi            : require(routesApi + 'quotationRegistrationApi'),
      quotationListApi                    : require(routesApi + 'quotationListApi'),
      invoice                             : require(routesApi + 'invoice'),
      emailTakenApi                       : require(routesApi + 'register'),
      userSignUpApi                       : require(routesA
﻿/**
 * services.
 * @file services.js.
 * @copyright Copyright ©
 */
define(
    [
        'angular',
        'admin/sales/services/adminSalesService',
        'admin/sales/services/adminSalesApiService',
        'admin/sales/services/adminSalesApiMappingService',
        'admin/sales/services/adminSalesCardReaderService',
        'admin/sales/services/adminSalesQueueApiService',
        'admin/sales/services/adminSalesDateWatcherService'
    ],
    function (angular, adminSalesService, adminSalesApiService, adminSalesApiMappingService, adminSalesCardReaderService, adminSalesQueueApiService, adminSalesDateWatcherService) {
        'use strict';
        var dependencies = [];
        var services = angular.module('lunchtime.admin.sales.services', dependencies);
        services.service('adminSalesService', adminSalesService);
        services.service('adminSalesApiService', adminSalesApiService);
        services.service('adminSalesApiMappingService', adminSalesApiMappingService);
    
var class_leap_1_1_controller =
    [ "PolicyFlag", "class_leap_1_1_controller.html#a0bdb49fa94aa2da8b098c1ac296528d6", [
      [ "POLICY_DEFAULT", "class_leap_1_1_controller.html#a0bdb49fa94aa2da8b098c1ac296528d6a94886192cfa6f6f94cd2e20b68aeca97", null ],
      [ "POLICY_BACKGROUND_FRAMES", "class_leap_1_1_controller.html#a0bdb49fa94aa2da8b098c1ac296528d6a1e34f1992444deee3b4c905d2a765329", null ]
    ] ],
    [ "Controller", "class_leap_1_1_controller.html#a356eee86e8cd232b3f6829986a64add5", null ],
    [ "Controller", "class_leap_1_1_controller.html#a0f4287953473ead9c0db559370a6be9d", null ],
    [ "~Controller", "class_leap_1_1_controller.html#a6def9fc3e0d85c9a6d4efee3c988c7e1", null ],
    [ "Controller", "class_leap_1_1_controller.html#a6a3a060e4fcb31ce385f219e44199b1f", null ],
    [ "addListener", "class_leap_1_1_controller.html#ab9a4ba4a4cd6558173a201617d9722d1", null ],
    [ "calibratedScreens", "class_leap_1_1_controller.html#ab8d9bb5313ac7f3d8931d035dd30a6fd", null ],
    [
'use strict';
openData.directive("datasheet", function() {
    return {
        restrict: "A",
        templateUrl: "templates/directives/datasheet.html",
        scope: {
            columns: "=columns",
            data: "=data",
            title: "=title"
        },
        controller: function($scope) {
            $scope.showRange = 10;
            $scope.showRanges = [10, 20, 50, 100];
            $scope.minShow = 0;
            $scope.maxShow= $scope.minShow + $scope.showRange;
            $scope.reverse = false;
            $scope.sortOrder = "";
            $scope.totalPag = $scope.data.length/$scope.showRange;
            $scope.crtPag = 1;
            $scope.$watch('showRange', function() {
                $scope.maxShow= $scope.minShow + (+$scope.showRange);
            }, true);
            $scope.showRow = function(index){
                if(index< $scope.maxShow && index >= $scope.minShow) return true;
                return false;
            }
            $scope.navig
var url = require("url");
var serviceListener = require("../model/serviceListener");
var Service = require("../model/service").Service;
function handleRequest(req, res) {
    var queryString = url.parse(req.url, true).query;
    if (req.method === "POST") {
        queryString = req.body;
    }
    var service;
    var action;
    if (queryString.action === "add") {
        service = new Service(0, '', 60, new Date(), new Date(), '', "enabled", '', '');
        action = "/addService";
    } else {
		if (!queryString.id) {
		    res.redirect('/viewServices');
			return;
		}
        var services = serviceListener.getServices();
        service = services[queryString.id];
        if (!service) {
            res.redirect('/viewServices');
            return;
        }
        action = "/editService";
    }
    res.render("services/viewService.jade", {
        service: service,
        title: "Health Dashboard -" + queryString.name + " Service",
        action: action
    });
exports.handle
var AppTypeService = require('appstudio/service/appType/AppTypeService');
var AppService = require('appstudio/service/app/AppService');
var BrandDataService = require('appstudio/service/brand/BrandDataService');
var UIConfigurationService = require('appstudio/service/uiConfigurationService/UIConfigurationService');
var MediaGalleryService = require('appstudio/service/mediaGallery/MediaGalleryService');
var ScreenService = require('appstudio/service/screen/ScreenService');
var AppNavService = require('appstudio/service/appNavigation/AppNavService');
var ToastService = require('appstudio/service/toast/ToastService');
angular.module('appstudio.services', []).run(function(){
})
.service('appService', ['$q', 'httpService', 'modelFactory', AppService])
.service('brandDataService', ['$q', 'httpUploadService', 'appService', BrandDataService])
.service('uiConfigurationService', ['httpService', '$q', 'modelFactory', UIConfigurationService])
.service('appTypeService', ['httpService', '$q', AppTyp
var ServicesIntegration;
(function (ServicesIntegration) {
    ServicesIntegration.integrate = function () {
        /*******************************************************************/
        angular.module("toastService", []);
        angular.module("toastService").factory("ToastService", Toast);
        Toast.$inject = [
            "$q",
            "$mdToast"
        ];
        function Toast($q, $mdToast) {
            return new ToastService.Service($q, $mdToast);
        }
        /*******************************************************************/
        angular.module("dialogService", []);
        angular.module("dialogService").factory("DialogService", Dialog);
        Dialog.$inject = [
            "$q",
            "$mdDialog"
        ];
        function Dialog($q, $mdDialog) {
            return new DialogService.Service($q, $mdDialog);
        }
        /*******************************************************************/
        angular.module("contextsService", [])
var SlideShow = {};
SlideShow.DEBUG = true;
SlideShow.slideImageList  = new Array();
SlideShow.slideTitleList = new Array();
SlideShow.index = 0;
SlideShow.nSlides = 0;
SlideShow.MAX_SLIDES = 20;
SlideShow.timerID = null;
SlideShow.ChangeUpdateInterval = function(){
  try{
    var theRefresh  = document.getElementById("update_slideshow");
    if (theRefresh == null) {
      SlideShow.slideShowSpeed = 10000;
    } else { 
      SlideShow.slideShowSpeed = theRefresh.options[theRefresh.selectedIndex].value;
    }
  }catch(e){
    alert("[SlideShow::ChangeUpdateInterval] " + e.message);
  }
SlideShow.StartSlideShow = function()
  try{
    SlideShow.ChangeUpdateInterval();
    SlideShow.setSlide(SlideShow.index);
    SlideShow.index = (SlideShow.index + 1) % SlideShow.nSlides;
    SlideShow.timerID = setTimeout('SlideShow.StartSlideShow()', SlideShow.slideShowSpeed);
  }catch(e){
    alert("[SlideShow::StartSlideShow] " + e.message);
  } 
SlideShow.StopSlideShow = function()
  try{
    if (

      clearTimeout(SlideShow.timerID);
    }
  }catch(e){
   alert("[SlideShow::StopSlideShow] " + e.message);
  }
SlideShow.ShowFirst  = function()
  try{
  
   SlideShow.setSlide(0);
  }catch(e){
   alert("[SlideShow::ShowFirst] " + e.message);
  }
SlideShow.ShowLast = function()
  try{
   SlideShow.setSlide(SlideShow.nSlides-1);
  }catch(e){
   alert("[SlideShow::setSlide] " + e.message);
  }
SlideShow.ShowPrev = function()
 try{
   SlideShow.index = (SlideShow.index-1) % nSlides;
   if (SlideShow.index < 0) SlideShow.index = SlideShow.nSlides - 1;
   SlideShow.setSlide(SlideShow.index);
  }catch(e){
   alert("[SlideShow::setSlide] " + e.message);
  }
SlideShow.ShowNext = function()
 try{
   SlideShow.index = (SlideShow.index + 1) % nSlides;
   SlideShow.setSlide(SlideShow.index);
  }catch(e){
   alert("[SlideShow::setSlide] " + e.message);
  }
SlideShow.setSlide = function(index) 
 try{
   if (SlideShow.nSlides == 0) {
     if (SlideShow.DEBUG) alert("[SlideShow::setSlide] " + "[S
var classboost_1_1locale_1_1basic__message =
    [ "char_type", "group__message.html#gaa5d8dcf9d7aa01abbe73c841299345db", null ],
    [ "facet_type", "group__message.html#gaa63527cb368d0bcd4cb0809138c927df", null ],
    [ "string_type", "group__message.html#ga529423e08fc9a8ca9ceef5c56181c6d3", null ],
    [ "basic_message", "group__message.html#ga33bdf7fbb164a96a8685b5747afc2b45", null ],
    [ "basic_message", "group__message.html#gae32d7f89d5f268e8d6bae662d8008bae", null ],
    [ "basic_message", "group__message.html#ga40bf56415a235f13ee666d51f645f280", null ],
    [ "basic_message", "group__message.html#ga4d78f8f45467984d7244e2ddbb9e0f6e", null ],
    [ "basic_message", "group__message.html#gabf9afe77f0254397389289c386bf8a73", null ],
    [ "basic_message", "group__message.html#gabbb4365d621a33442ae34ac7c17a9d74", null ],
    [ "basic_message", "group__message.html#ga380f3a258b3b28929bbf01f4e622e71a", null ],
    [ "basic_message", "group__message.html#ga8c2fab962e10a46ea85f0188d08e
var searchData=
  ['green',['Green',['../controller_enums_8h.html#aac6fa7b0395b95cc528deaad0ce884a2ad0784a3f969fe736e8b271a5a161d106',1,'controllerEnums.h']]],
  ['gx',['gX',['../controller_enums_8h.html#a00d5030559c481763282483889597d51a1370f1d20e9df77568c74681daf4a19a',1,'controllerEnums.h']]],
  ['gxmove',['gXmove',['../controller_enums_8h.html#a00d5030559c481763282483889597d51a1851ce90f7a3f6acb062de46e78ca731',1,'controllerEnums.h']]],
  ['gy',['gY',['../controller_enums_8h.html#a00d5030559c481763282483889597d51a031e6b960909353e732db224bcf597af',1,'controllerEnums.h']]],
  ['gymove',['gYmove',['../controller_enums_8h.html#a00d5030559c481763282483889597d51a9c538a78bbc03fb258e1141acdc69a91',1,'controllerEnums.h']]],
  ['gz',['gZ',['../controller_enums_8h.html#a00d5030559c481763282483889597d51a644a4a198e3cf90bfe918a147cd5d675',1,'controllerEnums.h']]],
  ['gzmove',['gZmove',['../controller_enums_8h.html#a00d5030559c481763282483889597d51a9ea1d99ce7ddecd65fcb39f30c77037d',1,'controllerE
var React = require('react');
var UI = require('UI');
var View = UI.View;
var Message = UI.Message;
var MessageDate= Message.MessageDate;
var MessageText= Message.MessageText;
function getImage(i) {
    return 'img/app/photo/'+i+'.jpg';
module.exports = React.createClass({
	render() {
		return (
				<Message.Messages>
					<MessageDate>Sunday, Feb 9,<span>12:58</span></MessageDate>
					<MessageText sent>Hi, Kate</MessageText>
					<MessageText tail sent>How are you?</MessageText>
					<MessageText tail name="Kate Johnson" avatar={1}>Hi, i am good</MessageText>
					<MessageText tail name="Blue Ninja" avatar={2}>Hi there, I am also fine, thanks! And how are you?</MessageText>
	        <MessageText sent>Hey, Blue Ninja! Glad to see you ;)</MessageText>
	        <MessageText tail sent>What do you think about my new logo?</MessageText>
	        <MessageDate>Wednesday, Feb 12,<span>19:33</span></MessageDate>
	        <MessageText tail sent>Hey? Any thoughts about my new logo?</MessageText>
angular
	.module('horde', [])
	.controller('incomingAttackPanelController',['$scope', 'resourceService', 'hordeService', 'featureLockService', function ($scope, resourceService, hordeService, featureLockService) {
		$scope.refresh = function () {
			$scope.attackProgress = hordeService.attackProgress;
			$scope.horde = hordeService.horde;
			$scope.defense = resourceService.defense;
			$scope.featureLockService = featureLockService;
		}
		$scope.refresh();
	}])
	.controller('threatPanelController',['$scope', 'resourceService', 'hordeService', 'featureLockService', function ($scope, resourceService, hordeService, featureLockService) {
		$scope.refresh = function () {
			$scope.horde = hordeService.horde;
			$scope.threat = resourceService.threat;
			$scope.featureLockService = featureLockService;
		}
		$scope.refresh();
	}])
	.service('hordeService', ['resourceService', 'infoService', function (resourceService, infoService) {
		var hordeService = this;
		this.attackProgress = {
			attac

		}
		this.horde = {
			size: 0,
			nextZombieProgress: 0,
			percentFull: 0,
			text: "Zombies Gathering",
		}
		this.init = function () {
			this.attackProgress.attackIn = 100;
			this.horde.size = 0;
			this.horde.nextZombieProgress = 0;
		}
		this.tick = function () {
			processThreat();
			advanceAttack();
		}
		function processThreat () {
			var threat = resourceService.threat.totalChangePerSecond;
			hordeService.horde.nextZombieProgress += threat;
			if (hordeService.horde.nextZombieProgress > 100) {
				hordeService.horde.size += 1;
				hordeService.horde.nextZombieProgress = 0;
			} else if (hordeService.horde.nextZombieProgress < 0) {
				if (hordeService.horde.size > 0) {
					hordeService.horde.nextZombieProgress = 100;
					hordeService.horde.size -= 1;
				} else {
					hordeService.horde.nextZombieProgress = 0;
				}
			}
		}
		function advanceAttack () {
			hordeService.attackProgress.attackIn -= 1;
			if (hordeService.attackProgress.attackIn <= 0) {
				hordeService.
var Utils = require('cloud/UtilitiesCC.js');
exports.seteDispatch = function (TheCall)
{    
    var eDispatch = new Object();
    pDispatch = TheCall.pDispatch;
    eDispatch.IsStandBy = false;
    var ErrorList = [];
    if (pDispatch.HasDataSet == false) 
    {
        var Error = new Object();
        Error.Level = "SECTION";
        Error.Type = "MAN";
        Error.Text = " eDispatch Null or Undefined"
        ErrorList.push(Error);
        eDispatch.Errors = ErrorList;
        return eDispatch;
    };
    
    if (typeof pDispatch.attributes.elements == 'undefined')
    {
        var Error = new Object();
        Error.Level = "SECTION";
        Error.Type = "MAN";
        Error.Text = " eDispatch Null or Undefined"
        ErrorList.push(Error);
        eDispatch.Errors = ErrorList;
        return eDispatch;
    };
    var _elementList = [];
    _elementList = pDispatch.attributes.elements;
    if (_elementList.length == 0)
    {
        var Error = new Object();
        Error.

        Error.Type = "MAN";
        Error.Text = " eDispatch Missing Element List"
        ErrorList.push(Error);
        eDispatch.Errors = ErrorList;
        return eDispatch;
    };
        var _val = [];
        var _text = [];
        var _dispatch = [];
        var valObj = {};
        valObj.IsNull = true;
        _dispatch = Utils.getValue(_elementList, "eDispatch.01");
        if (_dispatch.IsNull == false) {
            _val.push(_dispatch.ValueArray[0].val);
            {
                eDispatch.IsStandBy = true;
            };
            valObj.IsNull = false;
            eDispatch["IsValid"] = true;
            _text.push(_dispatch.ValueArray[0].text);
            valObj.CodeText = _text.slice(0);
            valObj.vSet = _val.slice(0);
            eDispatch["eDispatch.01"] = valObj;
            delete valObj;
        }
        else {
            Error.Level = "ELEM";
            Error.Type = "MAN";
            Error.Att = "eDispatch.01"
            Error.Text = " Com

            ErrorList.push(Error)
        };
        var _val = [];
        var _text = [];
        var _dispatch = [];
        var valObj = {};
        valObj.IsNull = true;
        _dispatch = Utils.getValue(_elementList, "eDispatch.02");
        if (_dispatch.IsNull == false)
        {
            _val.push(_dispatch.ValueArray[0].val);
            valObj.IsNull = false;
            _text.push(_dispatch.ValueArray[0].text);
        }
        else
        {
            if (eDispatch.IsStandBy == true)
            {
                _val.push(NOTAPPLICABLE);
                valObj.NV = true;
            }
            else
            {
                _val.push(NOTRECORDED);
                valObj.NV = true;
            }
        };
        valObj.CodeText = _text.slice(0);
        valObj.vSet = _val.slice(0);
        eDispatch["eDispatch.02"] = valObj;
        delete valObj;
        var _val = [];
        var _dispatch = [];
        var valObj = {};
        valObj.IsNull = true;
    

        if (_dispatch.IsNull == false)
        {
            _val.push(_dispatch.ValueArray[0].val);
            valObj.IsNull = false;
            valObj.vSet = _val.slice(0);
            eDispatch["eDispatch.03"] = valObj;
            delete valObj;
        };
        var _val = [];
        var _dispatch = [];
        var valObj = {};
        valObj.IsNull = true;
        _dispatch = Utils.getValue(_elementList, "eDispatch.04");
        if (_dispatch.IsNull == false)
        {
            _val.push(_dispatch.ValueArray[0].val);
            valObj.IsNull = false;
            valObj.vSet = _val.slice(0);
            eDispatch["eDispatch.04"] = valObj;
            delete valObj;
        };
        var _val = [];
        var _text = [];
        var _dispatch = [];
        var valObj = {};
        valObj.IsNull = true;
        _dispatch = Utils.getValue(_elementList, "eDispatch.05");
        if (_dispatch.IsNull == false)
        {
            valObj.IsNull = false;
            _val.push
define([
    "Controller",
    "scripts/js/headerController/headerController.js",
    "scripts/js/sidebarController/sidebarController.js",
    "scripts/js/footerController/footerController.js",
    "scripts/js/contentController/contentController.js",
    "text!appController/applicationController.html",
    "text!appController/applicationController.css",
], function (Controller, HeaderController, SidebarController, FooterController, ContentController, html, css) {
    return Controller.extend({
        users: null,
        _headerController: null,
        _sidebarController: null,
        _footerController: null,
        _contentController: null,
        initialize: function () {
            Controller.prototype.initialize.call(this, html, css);
            this._headerController = new HeaderController();
            this._sidebarController = new SidebarController();
            this._footerController = new FooterController();
            this._contentController = new ContentController(
window.addEvent('domready', function() {
    if ( !$('navBar') ) {
        if( $('inlineNavMenu') ) {
            $('inlineNavMenu').addClass('inactiveMenu');
        }
    } else {
        var navBarLocked = ( Cookie.read('iHRIS_NavMenuLock') ? 1 : 0 );
        var navBarSeen = ( Cookie.read('iHRIS_NavMenuShow') ? 1 : 0 ) && navBarLocked;
        processNavLock = function() {
            var lockElement = $('inlineNavMenuLock');
            if ( lockElement ) {
                if ( navBarLocked ) {
                    lockElement.addClass('open');
                    Cookie.write('iHRIS_NavMenuLock', 1, { duration: 30 });
                } else {
                    lockElement.removeClass('open');
                    Cookie.dispose('iHRIS_NavMenuLock');
                    Cookie.dispose('iHRIS_NavMenuShow');
                }
            }
        }
        processNavMenu = function() {
            var outerElement = $('siteOuterWrap');
            var inlineMenu = $('inlineNavMenu'

            if ( outerElement && inlineMenu ) {
                if ( navBarSeen ) {
                    outerElement.removeClass('autoHideNav');
                    inlineMenu.addClass('open');
                } else {
                    outerElement.addClass('autoHideNav');
                    inlineMenu.removeClass('open');
                }
            }
        }
        toggleLock = function() {
            navBarLocked = !navBarLocked;
            processNavLock();
        }
        toggleMenu = function() {
            navBarSeen = !navBarSeen;
            processNavMenu();
            Cookie.dispose('iHRIS_NavMenuShow');
            if ( navBarLocked ) {
                Cookie.write('iHRIS_NavMenuShow', navBarSeen, { duration: 30 });
            }
        }
        processNavLock();
        processNavMenu();
        if ( $('inlineNavMenu') ) {
            $('inlineNavMenu').addEvent('click', toggleMenu );
            if ( $('inlineNavMenuLock') ) {
                $('inlineNa
var logger = require("./Logger");
var Dispatch = require('./Dispatch');
var events = require('events');
var util = require('util');
var Dispatcher = function(connHandler) {
    this.ConnectionHandler = connHandler;
    logger.debug("Dispatcher created");
    events.EventEmitter.call(this);
util.inherits(Dispatcher, events.EventEmitter);
/**
 * Takes a dispatch paket, resolves all recipients and forwards it for delivery
 * @param dispatch
 * @returns {boolean}
 */
Dispatcher.prototype.dispatch = function(dispatch) {
    logger.debug("Now I'm resolving it!");
    this.ConnectionHandler.resolve(dispatch);
    logger.debug("Now I'm dispatchin it!");
    var targetConnections = dispatch.getTargetConnections();
    for (var connId in targetConnections) {
        var conn = targetConnections[connId];
        conn.send("EVENT", {
            event: dispatch._event,
            payload: dispatch._payload
        });
    }
    this.emit(dispatch._event, dispatch._payload);
    return true;
};
Di
/**
 * Main application routes
 */
'use strict';
var errors = require('./components/errors');
var path = require('path');
module.exports = function(app) {
  app.use('/api/things', require('./api/thing'));
  app.use('/api/aFash', require('./api/aFash'));
  app.use('/api/bFash', require('./api/bFash'));
  app.use('/api/cFash', require('./api/cFash'));
  app.use('/api/mesurment', require('./api/mesurment'));
  app.use('/api/plant', require('./api/plant'));
  app.use('/api/sort', require('./api/sort'));
  app.use('/api/machine', require('./api/machine'));
  app.use('/api/marketer', require('./api/marketer'));
  app.use('/api/raw', require('./api/raw'));
  app.use('/api/store', require('./api/store'));
  app.use('/api/parapono', require('./api/parapono'));
  app.use('/api/evaluation', require('./api/evaluation'));
  app.use('/api/menu', require('./api/menu'));
  app.use('/api/techInfo', require('./api/techInfo'));
  app.use('/api/worker', require('./api/worker'));
  app.use('/api/advice', r
var searchData=
  ['b',['b',['../class_radar_controller.html#abd1f97e3345954539ed9f2d64fa2ea8a',1,'RadarController']]],
  ['bin',['bin',['../class_radar_controller.html#ac1faf27510539e961f7a6ff465049ea1',1,'RadarController']]],
  ['blobnode',['blobNode',['../struct_top_view_1_1blob_node.html',1,'TopView']]],
  ['bridge_5fobject',['BRIDGE_OBJECT',['../struct_radar_controller_1_1_e_s_r___s_t_a_t_1_1_b_r_i_d_g_e___o_b_j_e_c_t.html',1,'RadarController::ESR_STAT']]],
  ['bridge_5fobject',['bridge_object',['../struct_radar_controller_1_1object_tracking_info.html#a35f6e4d0a62549c38398b7a0ed62790e',1,'RadarController::objectTrackingInfo']]],
  ['buf',['buf',['../classlrf__controller.html#a5b3e6126b5bf7eddf5b6fa1c1a555cae',1,'lrf_controller']]],
  ['bufenoughset',['bufEnoughSet',['../classlrf__controller.html#a864a9f00f905ed2f24d2dc8b12566e4a',1,'lrf_controller']]],
  ['bufnotfull',['bufNotFull',['../classlrf__controller.html#a677dd52d83706b5b4a1a2eae9298c4c7',1,'lrf_controller']]],
  ['bug_20l
const decorateWorker = worker => {
  const hashMap = new Map();
  worker.addEventListener('message', ({data}) => {
    const promise = hashMap.get(data.messageHash);
    if (promise) {
      if (data.type === MessageTypes.RESPONSE_AS_PROMISED) {
        promise.resolve(data);
      } else if (data.type === MessageTypes.ERROR_AS_PROMISED) {
        promise.error(data);
      } else {
        console.warn(`Unknown message type ${data.type}`, data);
      }
      hashMap.delete(data.messageHash);
    }
  });
  worker.sendMessage = (type, data) => {
    return new Promise((resolve, error) => {
      const messageHash = uuid();
      worker.postMessage({
        type: MessageTypes.MESSAGE_AS_PROMISED,
        messageHash,
        data
      });
      hashMap.set(messageHash, {resolve, error});
    });
  };
  worker.addMessageListener = handler => {
    worker.addEventListener('message', ({data}) => {
      if (data.type === MessageTypes.RESPONSE_AS_PROMISED || data.type === MessageTypes.ERR
var dir_31c71e64f38695d3bdea8df96d66b634 =
    [ "CourseController.cs", "_course_controller_8cs.html", [
      [ "CourseController", "class_uni_enrollment___m_v_c_1_1_controllers_1_1_course_controller.html", "class_uni_enrollment___m_v_c_1_1_controllers_1_1_course_controller" ]
    ] ],
    [ "EnrollmentController.cs", "_enrollment_controller_8cs.html", [
      [ "EnrollmentController", "class_uni_enrollment___m_v_c_1_1_controllers_1_1_enrollment_controller.html", "class_uni_enrollment___m_v_c_1_1_controllers_1_1_enrollment_controller" ]
    ] ],
    [ "HomeController.cs", "_home_controller_8cs.html", [
      [ "HomeController", "class_uni_enrollment___m_v_c_1_1_controllers_1_1_home_controller.html", "class_uni_enrollment___m_v_c_1_1_controllers_1_1_home_controller" ]
    ] ],
    [ "LoginController.cs", "_login_controller_8cs.html", [
      [ "LoginController", "class_uni_enrollment___m_v_c_1_1_controllers_1_1_login_controller.html", "class_uni_enrollment___m_v_c_1_1_controllers_1_1_l
/**
 * Created by king on 1/4/15.
 */
appService.factory('shareService',['$rootScope',function($rootscope){
    var pService={};
    pService.logindata={};
    pService.setlogin=function(data){
        pService.logindata=data;
        if(window.localStorage) {
            window.localStorage.setItem('loginfiremages',JSON.stringify(data));
        }
        $rootscope.$broadcast("loginEvent");
    };
    pService.getlogin=function(){
        if(window.localStorage) {
            return JSON.parse(window.localStorage.getItem('loginfiremages'));
        } else {
            return pService.logindata;
        }
        };
    pService.userdata=[];
    pService.setusers=function(data){
        pService.userdata=data;
    };
    pService.getusers=function(){
        return pService.userdata;
    };
    pService.enhanceblog=function(blog,users){
        var temp=[];
        var i=0;
        for(var j=0; j < blog.length; j++){
            for(var k=0; k < users.length; k++){
                if

                    temp[i]=blog[j];
                    temp[i].myphoto=users[k].photo;
                    temp[i].status=users[k].status;
                    i++;
                }
            }
        }
        return temp;
    };
    pService.validateEmail=function(email) {
        var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return re.test(email);
    };
    pService.validateUsername=function(username){
        var regexp=/[\{\(\)\}\$\%\^\!\~\`\#\&\=\+\,\?\<\>\[\]]/;
        return regexp.test(username);
    };
    pService.getImageType=function(imagetype){
        switch (imagetype){
            case 'image/png':
                return'.png';
            break;
            case 'image/jpg':
                return'.jpg';
            break;
            case 'image/jpeg':
                return'.jpeg';
            break;
            case 'image/gif':
  

            break;
            case 'image/pdf':
                return'.pdf';
            break;
        }
    };
    pService.forum={};
    pService.setForum=function(data){
        pService.forum=data;
    };
    pService.getForum=function(){
        return pService.forum;
    };
    pService.topic={};
    pService.setTopic=function(data){
        pService.topic=data;
        $rootscope.$broadcast('topicEvent');
    };
    pService.getTopic=function(){
        return pService.topic;
    };
    pService.alert="";
    pService.setAlert=function(msg){
        pService.alert=msg;
        $rootscope.$broadcast('alertEvent')
    };
    pService.getAlert=function(){
        return pService.alert;
    };
    pService.mystatus="";
    pService.setStatus=function(status){
        pService.mystatus=status;
    };
    pService.getStatus=function(){
        return pService.mystatus;
    };
    pService.mstatus="";
    pService.setmstatus=function(msg){
        pService.mstatus=msg;
        $roo

    };
    pService.mstatus=function(){
        return pService.mstatus;
    };
    pService.pin="";
    pService.setpin=function(msg){
        pService.pin=msg;
        $rootscope.$broadcast('pinEvent')
    };
    pService.getpin=function(){
        return pService.pin;
    };
    pService.item={};
    pService.setItem=function(data){
        pService.item=data;
    };
    pService.getItem=function(){
        return pService.item;
    };
    pService.font="";
    pService.setfont=function(msg){
        pService.font=msg;
        $rootscope.$broadcast('fontEvent')
    };
    pService.getfont=function(){
        return pService.font;
    };
    pService.tag="";
    pService.settag=function(msg){
        pService.tag=msg;
        $rootscope.$broadcast('tagEvent')
    };
    pService.gettag=function(){
        return pService.tag;
    };
    pService.statefrom="";
    pService.setStatefrom=function(msg){
        pService.statefrom=msg;
        $rootscope.$broadcast('statefromEvent')
    
var dir_b31b8027737d3d5aa8e199b88f56ed36 =
    [ "Events", "dir_5d351fcc8310157c7461495755fbfc7c.html", "dir_5d351fcc8310157c7461495755fbfc7c" ],
    [ "InputOutput", "dir_d3d1b061b72ca4d600488014f1e02c47.html", "dir_d3d1b061b72ca4d600488014f1e02c47" ],
    [ "Sprites", "dir_15dd8198bce9949fb2ee9e0d3f6420e1.html", "dir_15dd8198bce9949fb2ee9e0d3f6420e1" ],
    [ "GameController.cs", "_game_controller_8cs.html", [
      [ "GameController", "class_game_controller.html", "class_game_controller" ]
    ] ],
    [ "MainMenuController.cs", "_main_menu_controller_8cs.html", [
      [ "MainMenuController", "class_main_menu_controller.html", "class_main_menu_controller" ]
    ] ],
    [ "SceneController.cs", "_scene_controller_8cs.html", null ],
    [ "ShipSpriteController.cs", "_ship_sprite_controller_8cs.html", [
      [ "ShipSpriteController", "class_ship_sprite_controller.html", "class_ship_sprite_controller" ]
    ] ],
    [ "WorldController.cs", "_world_controller_8cs.html", "_world_control
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var imjcart;
(function (imjcart) {
    (function (logic) {
        (function (controller) {
            var Controller = (function (_super) {
                __extends(Controller, _super);
                function Controller() {
                    var _this = this;
                    _super.call(this);
                    Controller._instance = this;
                    $(document).keydown(function (evt) {
                        if (evt.keyCode == controller.value.ControllerConst.KEYCODE_UP || evt.keyCode == controller.value.ControllerConst.KEYCODE_W) {
                            _this.startEngine({
                                value: 1
                            });
                        }
                        if (evt.keyCode == controller.value.ControllerCo

                            _this.startEngine({
                                value: -1
                            });
                        }
                        if (evt.keyCode == controller.value.ControllerConst.KEYCODE_LEFT || evt.keyCode == controller.value.ControllerConst.KEYCODE_A) {
                            _this.setSteeringAngle({
                                value: 0.75
                            });
                        }
                        if (evt.keyCode == controller.value.ControllerConst.KEYCODE_RIGHT || evt.keyCode == controller.value.ControllerConst.KEYCODE_D) {
                            _this.setSteeringAngle({
                                value: -0.75
                            });
                        }
                        if (evt.keyCode == controller.value.ControllerConst.KEYCODE_SPACE) {
                            _this.changeCameraAngle();
                        }
                        if (evt.keyCode == controller.value

                            _this.changeCameraAngle();
                        }
                    });
                    $(document).keyup(function (evt) {
                        if (evt.keyCode == controller.value.ControllerConst.KEYCODE_LEFT || evt.keyCode == controller.value.ControllerConst.KEYCODE_RIGHT || evt.keyCode == controller.value.ControllerConst.KEYCODE_A || evt.keyCode == controller.value.ControllerConst.KEYCODE_D) {
                            _this.clearSteeringAngle();
                        }
                        if (evt.keyCode == controller.value.ControllerConst.KEYCODE_UP || evt.keyCode == controller.value.ControllerConst.KEYCODE_DOWN || evt.keyCode == controller.value.ControllerConst.KEYCODE_W || evt.keyCode == controller.value.ControllerConst.KEYCODE_S) {
                            _this.stopEngine();
                        }
                    });
                }
                Controller.getInstance = function () {
                    if (Control

                        Controller._instance = new Controller();
                    }
                    return Controller._instance;
                };
                Controller.prototype.startEngine = function (params) {
                    var value = params.value;
                    this.dispatchEvent(controller.event.ControllerEvent.START_ENGINE_EVENT, { value: value });
                };
                Controller.prototype.setSteeringAngle = function (params) {
                    var value = params.value;
                    this.dispatchEvent(controller.event.ControllerEvent.SET_STEERING_ANGLE_EVENT, { value: value });
                };
                Controller.prototype.clearSteeringAngle = function () {
                    this.dispatchEvent(controller.event.ControllerEvent.CLEAR_STEERING_ANGLE_EVENT);
                };
                Controller.prototype.stopEngine = function () {
                    this.dispatchEvent(controller.event.ControllerEvent.STOP_ENGINE
$(document).ready(function(){ 
    $("input").hide();
	$(".num").hide();
	$(".btn-primary").hide();
	var n =0;
   $("#newAdress").click(function(event){
     
	 
       switch(n){
	   case 0:
	   $(".num:lt(1)").show("slow");
	   $("input:lt(1)").show("slow");
	   $(".btn-primary:lt(1)").show("slow");
	   n++;
	   break;
	   case 1:  
	   $(".num:lt(2)").show("slow");
	   $("input:lt(2)").show("slow");
	   $(".btn-primary:lt(2)").show("slow");
	   n++;
	   break;
	   case 2:  
	   $("input:lt(3)").show("slow");
	   $(".num:lt(3)").show("slow");
	   $(".btn-primary:lt(3)").show("slow");
	   n++;
	   break;
	   case 3: 
	   $("input:lt(4)").show("slow");
	   $(".num:lt(4)").show("slow");
	   $(".btn-primary:lt(4)").show("slow");
	   n++;
	   break;
	   case 4: 
	   $(".num:lt(5)").show("slow");
	   $("input:lt(5)").show("slow");
	   $(".btn-primary:lt(5)").show("slow");
	   n++;
	   break;
	   case 5: 
       $(".num:lt(6)").show("slow");
	   $("input:lt(6)").show("slow");
	   $(".btn-pr

	   n++;
	   break;
	   case 6:
       $(".num:lt(7)").show("slow");
	   $("input:lt(7)").show("slow");
	   $(".btn-primary:lt(7)").show("slow");
	   n++;
	   break;
	   case 7:  
	   $(".num:lt(8)").show("slow");
	   $("input:lt(8)").show("slow");
	   $(".btn-primary:lt(8)").show("slow");
	   n++;
	   break;
	   case 8:  
	   $(".num:lt(9)").show("slow");
	   $("input:lt(9)").show("slow");
	   $(".btn-primary:lt(9)").show("slow");
	   n++;
	   break;
	   case 9:
       $(".num:lt(10)").show("slow");
	   $("input:lt(10)").show("slow");
	   $(".btn-primary:lt(10)").show("slow");
	   n++;
	   break;
	   case 10: 
       $(".num:lt(11)").show("slow");
	   $("input:lt(11)").show("slow");
	   $(".btn-primary:lt(11)").show("slow");
	   n++;
	   break;
	   case 11: 
       $(".num:lt(12)").show("slow");
	   $("input:lt(12)").show("slow");
	   $(".btn-primary:lt(12)").show("slow");
	   n++;
	   break;
	   case 12: 
       $(".num:lt(13)").show("slow");
	   $("input:lt(13)").show("slow");
	   
$navOverlayTrigger = $(".nav-overlay-trigger");
$navOverlayTriggerQuiz = $(".nav-overlay-trigger-quiz");
$navOverlayTriggerIndex = $(".nav-index-trigger");
$navOverlay = $(".nav-overlay");
$navOverlayTriggerClose = $(".nav-overlay-trigger-close");
$body = $("body");
$floatingButton = $(".button");
$navLectures = $(".nav-lectures");
$navExercises = $(".nav-exercises");
$navQuiz = $(".nav-quizzes");
$navIndex = $(".nav-index");
$($navOverlayTrigger).click(function() {
	$navLectures.addClass('nav-open');
	$navLectures.addClass('.bounceOutUp');
	$body.css('overflow', 'hidden');
});
$($navOverlayTriggerQuiz).click(function() {
  $navQuiz.addClass('nav-open');
  $navQuiz.addClass('.bounceOutUp');
  $body.css('overflow', 'hidden');
});
$($navOverlayTriggerIndex).click(function() {
  $navIndex.addClass('nav-open');
  $navIndex.addClass('.bounceOutUp');
  $body.css('overflow', 'hidden');
});
$($navOverlayTriggerClose).click(function() {
	$navLectures.removeClass('nav-open');
	$navExercises.remo

  $navQuiz.removeClass('nav-open');
  $navIndex.removeClass('nav-open');
	$body.css('overflow', 'auto');
});
$($floatingButton).click(function() {
	$navExercises.addClass('nav-open');
	$body.css('overflow', 'hidden');
});
$(".scroll-and-overlay-close").click(function(event){
       event.preventDefault();
       var dest=0;
       if($(this.hash).offset().top > $(document).height()-$(window).height()){
            dest=$(document).height()-$(window).height();
       }else{
            dest=$(this.hash).offset().top;
       }
        $navLectures.removeClass('nav-open');
        $navExercises.removeClass('nav-open');
        $navQuiz.removeClass('nav-open');
        $navIndex.removeClass('nav-open');
        $body.css('overflow', 'auto');
       $('html,body').animate({scrollTop:dest}, 1000,'swing');
 });
$(".scroll").click(function(event){
       event.preventDefault();
       var dest=0;
       if($(this.hash).offset().top > $(document).height()-$(window).height()){
            dest=
 [{
     "IdService": 1,
     "CodeService": "SPIR",
     "LibelleService": "Spir Communication",
     "IdServiceParent": ""  ,
     "CodeServiceParent": "",
     "LibelleServiceParent": ""
 }, {
     "IdService": 2,
     "CodeService": "ADX",
     "LibelleService": "Adrexo",
     "IdServiceParent": 1,
     "CodeServiceParent": "SPIR",
     "LibelleServiceParent": "Spir Communication"
 }, {
     "IdService": 3,
     "CodeService": "REG",
     "LibelleService": "Regicom",
     "IdServiceParent": 1,
     "CodeServiceParent": "SPIR",
     "LibelleServiceParent": "Spir Communication"
 }, {
     "IdService": 4,
     "CodeService": "DZ1",
     "LibelleService": "Direction Zone Nord",
     "IdServiceParent": 2,
     "CodeServiceParent": "ADX",
     "LibelleServiceParent": "Adrexo"
 }, {
     "IdService": 5,
     "CodeService": "DZ2",
     "LibelleService": "Direction Zone Sud",
     "IdServiceParent": 2,
     "CodeServiceParent": "ADX",
     "LibelleServiceParent": "Adrexo"
 }, {
     "IdServ

     "CodeService": "DR1",
     "LibelleService": "Region Nord",
     "IdServiceParent": 4,
     "CodeServiceParent": "DZ1",
     "LibelleServiceParent": "Direction Zone Nord"
 }, {
     "IdService": 7,
     "CodeService": "DR2",
     "LibelleService": "Region Picardie",
     "IdServiceParent": 4,
     "CodeServiceParent": "DZ1",
     "LibelleServiceParent": "Direction Zone Nord"
 }, {
     "IdService": 8,
     "CodeService": "DR3",
     "LibelleService": "Region Normandie",
     "IdServiceParent": 4,
     "CodeServiceParent": "DZ1",
     "LibelleServiceParent": "Direction Zone Nord"
 }, {
     "IdService": 9,
     "CodeService": "ADX101",
     "LibelleService": "Centre Adx 101",
     "IdServiceParent": 7,
     "CodeServiceParent": "DR2",
     "LibelleServiceParent": "Region Picardie"
 }, {
     "IdService": 10,
     "CodeService": "ADX101",
     "LibelleService": "Centre Adx 102",
     "IdServiceParent": 7,
     "CodeServiceParent": "DR2",
     "LibelleServiceParent": "Region Picardi
/**
 * Service to manage quiz
 */
angular.module('trainer').factory('quizService', ['$http', '$q',
    function($http, $q) {
    
    var service = {};
    
    service.words = [];
    
    service.index = -1;
    
    service.score = 0;
    
    service.finalScore = null;
    
    service.loadQuiz = function(lexiconId) {
        var deferred = $q.defer();
        $http.post("/quiz/generate", {lexiconId: lexiconId, number: 20, tags: []})
            .success(function(data) {
                service.words = data;
                service.index = 0;
                service.score = 0;
                deferred.resolve(data[0]); 
            })
            .error(function(error) {
                deferred.reject(error);
            });
        return deferred.promise;
    };
    
    service.nextWord = function() {
        service.index++;
        if(service.index >= service.words.length) {
            service.finalScore = service.score * (20 / service.words.length);
            return null;
factoryModule.factory('DeviceService', function () {
    var DeviceService = {};
    DeviceService.devices = [];
    DeviceService.currentDevice = {};
    DeviceService.getDevice = function (index) {
        return DeviceService.devices[index];
    }
    DeviceService.addDevice = function (item) {
        DeviceService.devices.push(item);
    }
    DeviceService.removeItem = function (item) {
        DeviceService.devices.splice(DeviceService.devices.indexOf(item), 1)
    }
    DeviceService.size = function () {
        return DeviceService.devices.length;
    }
    DeviceService.clear = function () {
        DeviceService.devices = [];
    }
    DeviceService.getDevices = function () {
        return DeviceService.devices;
    }
    DeviceService.setCurrentDevice = function (device) {
        DeviceService.currentDevice = device;
    }
    DeviceService.getCurrentDevice = function () {
        return DeviceService.currentDevice;
    }
    DeviceService.closeConnections = function () {
/**
 * ******************************************************************************************************
 *
 *   
 *
 *   Defines controllers and services for the TeacherModule 
 *
 *
 * ******************************************************************************************************
 */
(function ( define, angular ) {
    "use strict";
    define([
           "user/controllers/MainController",
           "school/controllers/RegionalMasterController",
           "school/controllers/BranchMasterController",
           "school/controllers/ClassMasterController",
           "school/controllers/SectionMasterController",
           "school/controllers/StudentController",
           "school/controllers/SMSComunicationController"
           
            
        ],
        function ( MainController, RegionalMasterController,BranchMasterController, ClassMasterController,
        		  SectionMasterController, StudentController,SMSComunicationController)
        {
            var module
define(['underscore'], function(_) {
    var controllerPathMap = {
            desktop: {
                'desktopController' : 'controllers/globalController',
                'loginController' : 'views/common/login/LoginController',
                'warehouseController' : 'views/warehouse_old/controller/WarehouseController',
                'warehouseDocumentController' : 'views/warehouse_old/controller/WarehouseDocumentController',
                'warehouseSetupController' : 'views/warehouse/setup/controller/WarehouseSetupController',
                'assignDCController' : 'views/deliverycontrol/assign/controller/AssignDCController',
                'myOrderOverviewController' : 'views/deliverycontrol/myorderoverview/controller/MyOrderOverviewController', 
                'orderOverviewDetailsController' : 'views/deliverycontrol/myorderoverview/details/controller/OrderOverviewDetailsController',
                'unassignedRequestController' : 'views/procurement/unassigned/controller

                'procurementOverviewController' : 'views/procurement/overview/controller/ProcurementOverviewController',
                'procurementDetailController' : 'views/procurement/detail/controller/ProcurementDetailController',
                'modifyDetailsController' : 'views/procurement/overview/modifydetail/controller/ModifyDetailsController',
                'changeDetailsController' : 'views/procurement/changedetails/controller/ChangeDetailsController',
                'materialRequestOverviewController' : 'views/materialrequest/overview/controller/OverviewController',
                'materialRequestDetailController' : 'views/materialrequest/details/controller/DetailsController',
                'testingUtilityController' : 'views/testingutility/controller/TestingUtilityController',
                'dataMigrationController' : 'views/testingutility/controller/DataMigrationController',
                'startpageController' : 'views/common/startpage/StartpageController',
 

                'materialRequestsController' : 'views/material/requests/controller/MaterialRequestsController',
                'materialDetailsController' : 'views/material/details/controller/MaterialDetailsController',
                'warehouseToReceiveController': 'views/warehouse/receive/controller/ToReceiveController',
                'warehouseNotReceivedController': 'views/warehouse/receive/controller/NotReceivedController',
                'warehouseReceivedController': 'views/warehouse/receive/controller/ReceivedController',
                'warehouseReceiveDetailsController': 'views/warehouse/receive/details/controller/WarehouseReceiveDetailsController',
                'warehouseStoreController': 'views/warehouse/store/controller/StoreController',
                'warehousePickController' :  'views/warehouse/pick/controller/PickController',
                'warehouseShipController' :  'views/warehouse/pick/controller/ShipController',
                'warehouseInventoryCont

                'warehouseQISettingsController' : 'views/warehouse/qisettings/controller/QISettingsController',
                'qualityInspectionOverviewController': 'views/warehouse/qualityinspection/overview/controller/QualityInspectionOverviewController',
                'qualityInspectionDetailsController' : 'views/warehouse/qualityinspection/details/controller/QualityInspectionDetailsController',
                'adminTeamController' : 'views/admin/controller/AdminTeamController',
                'reportsController' : 'views/reports/controller/ReportsController',
                'applicationStatusController' : 'views/applicationstatus/controller/ApplicationStatusController'
            },
            mobile: {
                'mobileController' : 'controllers/globalController.mobile',
                'loginController' : 'views/common/login/LoginController',
                'mobileStartpageController' : 'views/mobile/startpage/StartpageController',
                'receiveControl

                'storeController' : 'views/mobile/warehouse/controller/StoreController',
                'pickController' : 'views/mobile/warehouse/controller/PickController',
                'moveController' : 'views/mobile/warehouse/controller/MoveController'
            }
    };
    
    controllerPathMap = _.extend(controllerPathMap.desktop, controllerPathMap.mobile);
    
    var ControllerManager = function() {
        this.controllers = this.controllers || {};
    };
    
    _.extend(ControllerManager.prototype, {
        getController : function(name, callback) {            
            if(!name || !callback) return;
            
            var that = this;
            var args = Array.prototype.slice.call(arguments, 2); 
            var controller = this.controllers[name];  
            
            if (typeof controller === 'undefined') {
                
                require([controllerPathMap[name]], function(TheController) {
                    controller = new TheCo

                    that.controllers[name] = controller;
                    args.push(controller);                    
                    var returnValue = callback.apply(callback, args);
                    that.closeUnusedControllers(name);
                    return returnValue;
                });
                
            } else {                
                args.push(controller);                
                var returnValue = callback.apply(callback, args);
                this.closeUnusedControllers(name);
                return returnValue;
            }
        },
        
        /**
         * First find the unused controllers and then close and remove them.
         */
        closeUnusedControllers: function(inuseControllerName) {
            var unusedControllers = this.getUnusedControllers(inuseControllerName);
            this.colseControllers(unusedControllers);
        },
        
        /**
         * @return an array of controller names which are exist

         * except the controller namr which is passed  to this method.
         */
        getUnusedControllers: function(inuseControllerName) {
            var unusedControllers = [];
            for(var controller in this.controllers) {
                if(inuseControllerName !== controller)
                    unusedControllers.push(controller);
            }           
            return unusedControllers;
        },
        
        /**
         * controllers parameter is an array which contains name of controllers as string 
         * This method close and remove all controllers which is passed to it
         * except 'desktopController' and 'mobileController' which are global controllers.
         */
        colseControllers: function(controllers) {
            _.each(controllers, function(controllerName) {
                if(controllerName !== 'desktopController' && controllerName !== 'mobileController') {                    
                    try {
                        t
d3.dispatch = function() {
  var dispatch = new d3_dispatch(),
      i = -1,
      n = arguments.length;
  while (++i < n) dispatch[arguments[i]] = d3_dispatch_event();
  return dispatch;
};
function d3_dispatch() {}
d3_dispatch.prototype.on = function(type, listener) {
  var i = type.indexOf("."),
      name = "";
  if (i > 0) {
    name = type.substring(i + 1);
    type = type.substring(0, i);
  }
  this[type].on(name, listener);
};
function d3_dispatch_event() {
  var listeners = [],
      listenerByName = {};
  function dispatch() {
        i = -1,
        n = z.length,
        l;
    while (++i < n) if ((l = z[i])._on) l.apply(this, arguments);
  }
  dispatch.on = function(name, listener) {
    var l, i;
    if (l = listenerByName[name]) {
      l._on = false;
      listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
      delete listenerByName[name];
    }
    if (listener) {
      listener._on = true;
      listeners.push(listener);
      lis
/**
 * Created by jiachiliu on 12/31/14.
 */
var serviceApp = angular.module('serviceApp', []);
serviceApp
/**
 * A factory that returns a string instance
 */
    .factory('clientId', function () {
        return "ax30234023";
    })
/**
 * A factory that use another service
 */
    .factory('apiToken', ['clientId', function (clientId) {
        var encrypt = function (part1, part2) {
            return part1 + ":" + part2;
        };
        var secret = "secret";
        var service = {};
        service.encrypt = function () {
            return encrypt(clientId, secret);
        };
        return service;
    }]);
/**
 * A user-defined service that uses a existed service
 */
function UserService(apiToken) {
    this.name = "User Service";
    this.apiToken = apiToken;
    this.service = function () {
        return "user service called on " + this.apiToken.encrypt();
    }
serviceApp.service('UserService', ['apiToken', UserService]);
serviceApp.controller('factoryController', funct
var express     = require('express'),
    api         = require('../api'),
    apiRoutes;
apiRoutes = function apiRoutes(middleware) {
    var router = express.Router();
    router.del = router.delete;
    router.get('/configuration', api.http(api.configuration.browse));
    router.get('/configuration/:key', api.http(api.configuration.read));
    router.get('/posts', api.http(api.posts.browse));
    router.post('/posts', api.http(api.posts.add));
    router.get('/posts/:id', api.http(api.posts.read));
    router.get('/posts/slug/:slug', api.http(api.posts.read));
    router.put('/posts/:id', api.http(api.posts.edit));
    router.del('/posts/:id', api.http(api.posts.destroy));
    router.get('/settings', api.http(api.settings.browse));
    router.get('/settings/:key', api.http(api.settings.read));
    router.put('/settings', api.http(api.settings.edit));
    router.get('/users', api.http(api.users.browse));
    router.get('/users/:id', api.http(api.users.read));
    router.get('/users/s

    router.get('/users/email/:email', api.http(api.users.read));
    router.put('/users/password', api.http(api.users.changePassword));
    router.put('/users/owner', api.http(api.users.transferOwnership));
    router.put('/users/:id', api.http(api.users.edit));
    router.post('/users', api.http(api.users.add));
    router.del('/users/:id', api.http(api.users.destroy));
    router.get('/tags', api.http(api.tags.browse));
    router.get('/tags/:id', api.http(api.tags.read));
    router.get('/tags/slug/:slug', api.http(api.tags.read));
    router.post('/tags', api.http(api.tags.add));
    router.put('/tags/:id', api.http(api.tags.edit));
    router.del('/tags/:id', api.http(api.tags.destroy));
    router.get('/roles/', api.http(api.roles.browse));
    router.get('/slugs/:type/:name', api.http(api.slugs.generate));
    router.get('/themes', api.http(api.themes.browse));
    router.put('/themes/:name', api.http(api.themes.edit));
    router.get('/notifications', api.http(api.notification

    router.post('/notifications', api.http(api.notifications.add));
    router.del('/notifications/:id', api.http(api.notifications.destroy));
    router.get('/db', api.http(api.db.exportContent));
    router.del('/db', api.http(api.db.deleteAllContent));
    router.post('/mail', api.http(api.mail.send));
    router.post('/mail/test', api.http(api.mail.sendTest));
    router.post('/authentication/passwordreset',
        middleware.spamPrevention.forgotten,
        api.http(api.authentication.generateResetToken)
    );
    router.put('/authentication/passwordreset', api.http(api.authentication.resetPassword));
    router.post('/authentication/invitation', api.http(api.authentication.acceptInvitation));
    router.get('/authentication/invitation', api.http(api.authentication.isInvitation));
    router.post('/authentication/setup', api.http(api.authentication.setup));
    router.put('/authentication/setup', api.http(api.authentication.updateSetup));
    router.get('/authentication/setup'
var _clone = require("lodash/lang/clone"),
    _mapValues = require("lodash/object/mapValues"),
    _forOwn = require("lodash/object/forOwn"),
    _intersection = require("lodash/array/intersection"),
    _keys = require("lodash/object/keys"),
    _map = require("lodash/collection/map"),
    _each = require("lodash/collection/forEach"),
    _size = require("lodash/collection/size"),
    _findKey = require("lodash/object/findKey"),
    _uniq = require("lodash/array/uniq");
var defaultDispatchInterceptor = function(action, dispatch) {
  dispatch(action);
};
var Dispatcher = function(stores) {
  this.stores = {};
  this.currentDispatch = null;
  this.currentActionType = null;
  this.waitingToDispatch = [];
  this.dispatchInterceptor = defaultDispatchInterceptor;
  this._boundDispatch = this._dispatch.bind(this);
  for (var key in stores) {
    if (stores.hasOwnProperty(key)) {
      this.addStore(key, stores[key]);
    }
  }
};
Dispatcher.prototype.addStore = function(name, store) {
  sto

  this.stores[name] = store;
};
Dispatcher.prototype.dispatch = function(action) {
  this.dispatchInterceptor(action, this._boundDispatch);
};
Dispatcher.prototype._dispatch = function(action) {
  if (!action || !action.type) {
    throw new Error("Can only dispatch actions with a 'type' property");
  }
  if (this.currentDispatch) {
    var complaint = "Cannot dispatch an action ('" + action.type + "') while another action ('" +
                    this.currentActionType + "') is being dispatched";
    throw new Error(complaint);
  }
  this.waitingToDispatch = _clone(this.stores);
  this.currentActionType = action.type;
  this.currentDispatch = _mapValues(this.stores, function() {
    return { resolved: false, waitingOn: [], waitCallback: null };
  });
  try {
    this.doDispatchLoop(action);
  } finally {
    this.currentActionType = null;
    this.currentDispatch = null;
  }
};
Dispatcher.prototype.doDispatchLoop = function(action) {
  var dispatch, canBeDispatchedTo, wasHandled = f

      removeFromDispatchQueue = [], dispatchedThisLoop = [];
  _forOwn(this.waitingToDispatch, function(value, key) {
    dispatch = this.currentDispatch[key];
    canBeDispatchedTo = !dispatch.waitingOn.length ||
      !_intersection(dispatch.waitingOn, _keys(this.waitingToDispatch)).length;
    if (canBeDispatchedTo) {
      if (dispatch.waitCallback) {
        var stores = _map(dispatch.waitingOn, function(key) {
          return this.stores[key];
        }, this);
        var fn = dispatch.waitCallback;
        dispatch.waitCallback = null;
        dispatch.waitingOn = [];
        dispatch.resolved = true;
        fn.apply(null, stores);
        wasHandled = true;
      } else {
        dispatch.resolved = true;
        var handled = this.stores[key].__handleAction__(action);
        if (handled) {
          wasHandled = true;
        }
      }
      dispatchedThisLoop.push(key);
      if (this.currentDispatch[key].resolved) {
        removeFromDispatchQueue.push(key);
      }
   

  }, this);
  if (_keys(this.waitingToDispatch).length && !dispatchedThisLoop.length) {
    var storesWithCircularWaits = _keys(this.waitingToDispatch).join(", ");
    throw new Error("Indirect circular wait detected among: " + storesWithCircularWaits);
  }
  _each(removeFromDispatchQueue, function(key) {
    delete this.waitingToDispatch[key];
  }, this);
  if (_size(this.waitingToDispatch)) {
    this.doDispatchLoop(action);
  }
  if (!wasHandled && console && console.warn) {
    console.warn("An action of type " + action.type + " was dispatched, but no store handled it");
  }
};
Dispatcher.prototype.waitForStores = function(store, stores, fn) {
  if (!this.currentDispatch) {
    throw new Error("Cannot wait unless an action is being dispatched");
  }
  var waitingStoreName = _findKey(this.stores, function(val) {
    return val === store;
  });
  if (stores.indexOf(waitingStoreName) > -1) {
    throw new Error("A store cannot wait on itself");
  }
  var dispatch = this.currentDispat
'use strict';
define(function(require, exports) {
var messageTemplate = require("./templates/message.html");
angular.module('ecgMessage', [])
.factory("MessageService", function() {
    var items = [];
    return {
        all: function() {
          return items;
        },
        create: function() {
          items.push(arguments[0]);
        }
    };
})
.controller('MessageController', ['$scope', '$filter', '$timeout', 'MessageService', function ($scope, $filter, $timeout, MessageService) {
    $scope.message = {};
    $scope.message.total = 0;
    $scope.message.msgs = [];
    $scope.message.currents = [];
    $scope.message.current = null;
    $scope.message.show = function(message) {
        message.id = (new Date()).getTime();
        message.date = $filter('date')(message.id, 'HH:mm:ss');
        $scope.message.current = message;
        $scope.message.currents.push(message);
        $scope.message.msgs.push(message);
        MessageService.create(message);
        $(document

        $timeout(function() {
            $(document.body).removeClass("msging");
            $scope.message.close();
        }, 5000);
    };
    $scope.message.close = function() {
        $scope.message.currents.pop();
        if ($scope.message.currents.length > 0) {
            $scope.message.current = $scope.message.currents[$scope.message.currents.length - 1];
        }
    };
    $scope.message.closeAll = function() {
        $(document.body).removeClass("msging");
        $scope.message.currents = [];
        $scope.message.current = null;
    };
    $scope.message.success = function(msg) {
        var message = {
            type: 'success',
            text: msg,
            show: true
        };
        $scope.message.show(message);
    };
    $scope.message.info = function(msg) {
        var message = {
            type: 'info',
            text: msg,
            show: true
        };
        $scope.message.show(message);
    };
    $scope.message.error = function(msg) {

'use strict';
const m = require('./dummy-api');
function logFactory(prefix){
  const st = process.hrtime();
  return (msg) => {
    const end = process.hrtime(st);
    return console.log(`${prefix}${end[0]}.${end[1]}\n${prefix}\t${msg.split("\n").join(`\n${prefix}\t`)}`);
  };
function captureAPI(log, prefix) {
  return (result) => {
    prefix = prefix || result.api;
    {
      let data = Object.assign({}, result);
      delete data.api;
      log(`${prefix}: ${JSON.stringify(data)}`);
    }
    return result;
  };
  const dummyAPI = new m.DummyAPIFactory().dummyAPI(300);
  const log = logFactory("*");
  log("start");
  Promise.resolve(1)
    .then((i) => dummyAPI(i))
    .then(captureAPI(log))
    .then((data) => dummyAPI(10, data))
    .then(captureAPI(log))
    .then(() => {
      log("finish");
    });
  log("end");
  const factory = new m.DummyAPIFactory();
  const dummyAPI = factory.dummyAPI(300);
  const log = logFactory("$");
  Promise.all([
    dummyAPI(100).then(captureAPI(

    dummyAPI(100).then(captureAPI(log))
  ])
    .then(captureAPI(log, "merged"));
  const factory = new m.DummyAPIFactory();
  const dummyAPI = factory.dummyAPI(300);
  const cachedAPI = factory.cachedAPI(dummyAPI);
  const log = logFactory("@");
  Promise.all([
    cachedAPI(100).then(captureAPI(log)),
    cachedAPI(100).then(captureAPI(log))
  ])
    .then(captureAPI(log, "merged"));
  const factory = new m.DummyAPIFactory();
  const dummyAPI = factory.dummyAPI(300);
  const cachedAPI = factory.badCachedAPI(dummyAPI);
  const log = logFactory("#");
  Promise.all([
    cachedAPI(100).then(captureAPI(log)),
    cachedAPI(100).then(captureAPI(log))
  ])
    .then(captureAPI(log, "merged"));
  const factory = new m.DummyAPIFactory();
  const dummyAPI = factory.dummyAPI(300);
  const mergeAPI = factory.mergeAPI(300);
  const cachedAPI = factory.cachedAPI(dummyAPI);
  const log = logFactory("%");
  const ps = dummyAPI(1).then(captureAPI(log));
  Promise.all([
    ps.then((data) => cached
  $(document).ready(function(){
    $(".slidingDiv").hide();
	$(".show_hide").show();
	$('.show_hide').click(function(){
	$(".slidingDiv").slideToggle();
	});
	$(".slidingDiv_2").hide();
	$(".show_hide_2").show();
	$('.show_hide_2').click(function(){
	$(".slidingDiv_2").slideToggle();
	});
	$(".slidingDiv_3").hide();
	$(".show_hide_3").show();
	$('.show_hide_3').click(function(){
	$(".slidingDiv_3").slideToggle();
	});
	$(".slidingDiv_4").hide();
	$(".show_hide_4").show();
	$('.show_hide_4').click(function(){
	$(".slidingDiv_4").slideToggle();
	});	
	$(".slidingDiv_5").hide();
	$(".show_hide_5").show();
	$('.show_hide_5').click(function(){
	$(".slidingDiv_5").slideToggle();
	});	
	$(".slidingDiv_v1").hide();
	$(".show_hide_v1").show();
	$('.show_hide_v1').click(function(){
	$(".slidingDiv_v1").slideToggle();
	});	
	$(".slidingDiv_v2").hide();
	$(".show_hide_v2").show();
	$('.show_hide_v2').click(function(){
	$(".slidingDiv_v2").slideToggle();
	});	
	$(".slidingDiv_v3").hide();
	$(".sho

	$('.show_hide_v3').click(function(){
	$(".slidingDiv_v3").slideToggle();
	});	
	$(".slidingDiv_v4").hide();
	$(".show_hide_v4").show();
	$('.show_hide_v4').click(function(){
	$(".slidingDiv_v4").slideToggle();
	});	
	$(".slidingDiv_v5").hide();
	$(".show_hide_v5").show();
	$('.show_hide_v5').click(function(){
	$(".slidingDiv_v5").slideToggle();
	});	
	$(".slidingDiv_v6").hide();
	$(".show_hide_v6").show();
	$('.show_hide_v6').click(function(){
	$(".slidingDiv_v6").slideToggle();
	});	
	$(".slidingDiv_v7").hide();
	$(".show_hide_v7").show();
	$('.show_hide_v7').click(function(){
	$(".slidingDiv_v7").slideToggle();
	});	
	$(".slidingDiv_v8").hide();
	$(".show_hide_v8").show();
	$('.show_hide_v8').click(function(){
	$(".slidingDiv_v8").slideToggle();
	});	
	$(".slidingDiv_v9").hide();
	$(".show_hide_v9").show();
	$('.show_hide_v9').click(function(){
	$(".slidingDiv_v9").slideToggle();
	});	
	$(".slidingDiv_v10").hide();
	$(".show_hide_v10").show();
	$('.show_hide_v10').click(function(){
$(document).ready(function() {
  dpd.messages.on('create', function(message) {
    renderMessage(message);
  });
  dpd.messages.get(function(messages) {
    if (messages) {
      messages.forEach(function(m) {
        renderMessage(m);
      });
    }
  });
  $('#send-btn').click(sendMessage);
  function renderMessage(message) {
    var $el = $('<li>');
    $el.append('<strong>' + message.sender + ': </strong>');
    $el.append(message.message);
    $el.appendTo('#chatbox');
  }
  function sendMessage() {
    var sender = $('#screen-name').val();
    var message = $('#message').val();
    dpd.messages.post({
      sender: sender,
      message: message
    }, function(message, err) {
      if (err) {
        if (err.message) {
          alert(err.message);
        } else if (err.errors) {
          var errors = "";
          if (err.errors.sender) {
            errors += err.errors.sender + "\n";
          } 
          if (err.errors.message) {
            errors += err.errors.message 
requirejs([
    'modernizr',
    'jquery',
    'brandsController',
    'responceController',
    'menuController',
    'inspirationController',
    'featuredController',
    'compareController',
    'favoritesController',
    'incDecController',
    'cardController',
    'loginController',
    'PasswordController',
    'UpScrollController'
  ],function(
    modernizr, 
    jquery, 
    brandsController, 
    responceController, 
    menuController, 
    inspirationController, 
    featuredController, 
    compareController, 
    favoritesController,
    incDecController,
    cardController,
    loginController,
    PasswordController,
    UpScrollController
  ){
  $(document).ready(function(){
    
        new PasswordController();
    new brandsController();
    new responceController();
    new inspirationController();
    new menuController();
    new compareController();
    new favoritesController();
    new loginController();
    $('.inc-dec-widget').each(function(index, widget){
export const controllers = {
  AppController,
  CarrierDetailController,
  CarrierListController,
  CustomerDetailController,
  CustomerListController,
  DrawingDetailController,
  DrawingListController,
  JobDetailController,
  JobListController,
  LoginController,
  ManufacturerDetailController,
  ManufacturerListController,
  MarkDetailController,
  MarkListController,
  MarkZoneDetailController,
  PartDetailController,
  PartListController,
  PartOrderDetailController,
  PartOrderListController,
  SalespersonDetailController,
  SalespersonListController,
  ShipmentDetailController,
  ShipmentListController,
  ShipmentItemDetailController,
  ShipmentItemListController,
  ShippingGroupDetailController,
  ShippingGroupListController,
  ShippingGroupItemDetailController,
  ShippingGroupItemZoneDetailController,
  ShippingGroupItemListController,
  ShopDetailController,
  ShopListController,
  SpecialtyItemDetailController,
  SpecialtyItemListController,
  SystemTypeDetailController,
  

  UserDetailController,
  UserListController,
  VendorDetailController,
  VendorListController,
  ZoneDetailController,
  ZoneListController,
  ReportController,
  ModalJobReportController,
  ResetController
export default
  angular
    .module('ssi.controllers.old', [])
      .controller('AppController', AppController)
      .controller('CarrierDetailController', CarrierDetailController)
      .controller('CarrierListController', CarrierListController)
      .controller('CustomerDetailController', CustomerDetailController)
      .controller('CustomerListController', CustomerListController)
      .controller('DrawingDetailController', DrawingDetailController)
      .controller('DrawingListController', DrawingListController)
      .controller('JobDetailController', JobDetailController)
      .controller('JobListController', JobListController)
      .controller('LoginController', LoginController)
      .controller('ManufacturerDetailController', ManufacturerDetailController)
      .cont

      .controller('MarkDetailController', MarkDetailController)
      .controller('MarkZoneDetailController', MarkZoneDetailController)
      .controller('MarkListController', MarkListController)
      .controller('PartDetailController', PartDetailController)
      .controller('PartListController', PartListController)
      .controller('PartOrderDetailController', PartOrderDetailController)
      .controller('PartOrderListController', PartOrderListController)
      .controller('SalespersonDetailController', SalespersonDetailController)
      .controller('SalespersonListController', SalespersonListController)
      .controller('ShipmentDetailController', ShipmentDetailController)
      .controller('ShipmentListController', ShipmentListController)
      .controller('ShipmentItemDetailController', ShipmentItemDetailController)
      .controller('ShipmentItemListController', ShipmentItemListController)
      .controller('ShippingGroupDetailController', ShippingGroupDetailController)
     

      .controller('ShippingGroupItemDetailController', ShippingGroupItemDetailController)
      .controller('ShippingGroupItemZoneDetailController', ShippingGroupItemZoneDetailController)
      .controller('ShippingGroupItemListController', ShippingGroupItemListController)
      .controller('ShopDetailController', ShopDetailController)
      .controller('ShopListController', ShopListController)
      .controller('SpecialtyItemDetailController', SpecialtyItemDetailController)
      .controller('SpecialtyItemListController', SpecialtyItemListController)
      .controller('SystemTypeDetailController', SystemTypeDetailController)
      .controller('SystemTypeListController', SystemTypeListController)
      .controller('UserDetailController', UserDetailController)
      .controller('UserListController', UserListController)
      .controller('VendorDetailController', VendorDetailController)
      .controller('VendorListController', VendorListController)
      .controller('ZoneDetailControll
var dir_984e899df90dd104b2eabcdbb76ec71f =
    [ "nav_airspeed.c", "nav__airspeed_8c.html", "nav__airspeed_8c" ],
    [ "nav_airspeed.h", "nav__airspeed_8h.html", "nav__airspeed_8h" ],
    [ "nav_bungee_takeoff.c", "nav__bungee__takeoff_8c.html", "nav__bungee__takeoff_8c" ],
    [ "nav_bungee_takeoff.h", "nav__bungee__takeoff_8h.html", "nav__bungee__takeoff_8h" ],
    [ "nav_catapult.c", "nav__catapult_8c.html", "nav__catapult_8c" ],
    [ "nav_catapult.h", "nav__catapult_8h.html", "nav__catapult_8h" ],
    [ "nav_cube.c", "nav__cube_8c.html", "nav__cube_8c" ],
    [ "nav_cube.h", "nav__cube_8h.html", "nav__cube_8h" ],
    [ "nav_drop.c", "nav__drop_8c.html", null ],
    [ "nav_drop.h", "nav__drop_8h.html", "nav__drop_8h" ],
    [ "nav_flower.c", "nav__flower_8c.html", "nav__flower_8c" ],
    [ "nav_flower.h", "nav__flower_8h.html", "nav__flower_8h" ],
    [ "nav_gls.c", "nav__gls_8c.html", "nav__gls_8c" ],
    [ "nav_gls.h", "nav__gls_8h.html", "nav__gls_8h" ],
    [ "nav_line.c", "na

    [ "nav_line.h", "nav__line_8h.html", "nav__line_8h" ],
    [ "nav_line_border.c", "nav__line__border_8c.html", "nav__line__border_8c" ],
    [ "nav_line_border.h", "nav__line__border_8h.html", "nav__line__border_8h" ],
    [ "nav_line_osam.c", "nav__line__osam_8c.html", "nav__line__osam_8c" ],
    [ "nav_line_osam.h", "nav__line__osam_8h.html", "nav__line__osam_8h" ],
    [ "nav_poles.c", "nav__poles_8c.html", "nav__poles_8c" ],
    [ "nav_poles.h", "nav__poles_8h.html", "nav__poles_8h" ],
    [ "nav_smooth.c", "nav__smooth_8c.html", "nav__smooth_8c" ],
    [ "nav_smooth.h", "nav__smooth_8h.html", "nav__smooth_8h" ],
    [ "nav_spiral.c", "nav__spiral_8c.html", "nav__spiral_8c" ],
    [ "nav_spiral.h", "nav__spiral_8h.html", "nav__spiral_8h" ],
    [ "nav_survey_disc.c", "nav__survey__disc_8c.html", "nav__survey__disc_8c" ],
    [ "nav_survey_disc.h", "nav__survey__disc_8h.html", "nav__survey__disc_8h" ],
    [ "nav_survey_poly_osam.c", "nav__survey__poly__osam_8c.html", "nav__sur

    [ "nav_survey_poly_osam.h", "nav__survey__poly__osam_8h.html", "nav__survey__poly__osam_8h" ],
    [ "nav_survey_polygon.c", "nav__survey__polygon_8c.html", "nav__survey__polygon_8c" ],
    [ "nav_survey_polygon.h", "nav__survey__polygon_8h.html", "nav__survey__polygon_8h" ],
    [ "nav_survey_rectangle_rotorcraft.c", "nav__survey__rectangle__rotorcraft_8c.html", "nav__survey__rectangle__rotorcraft_8c" ],
    [ "nav_survey_rectangle_rotorcraft.h", "nav__survey__rectangle__rotorcraft_8h.html", "nav__survey__rectangle__rotorcraft_8h" ],
    [ "nav_survey_zamboni.c", "nav__survey__zamboni_8c.html", "nav__survey__zamboni_8c" ],
    [ "nav_survey_zamboni.h", "nav__survey__zamboni_8h.html", "nav__survey__zamboni_8h" ],
    [ "nav_vertical_raster.c", "nav__vertical__raster_8c.html", "nav__vertical__raster_8c" ],
    [ "nav_vertical_raster.h", "nav__vertical__raster_8h.html", "nav__vertical__raster_8h" ],
    [ "takeoff_detect.c", "takeoff__detect_8c.html", "takeoff__detect_8c" ],
    [ "
var app = angular.module('minecraftApp', ['ngRoute']);
app.config (function ($routeProvider) {
	$routeProvider
		.when('/general',
			{
				controller: 'GeneralController',
				templateUrl: 'app/partials/general.html'
			})
		.when('/players',
			{
				controller: 'PlayersController',
				templateUrl: 'app/partials/players.html'
			})
		.when('/rewards',
			{
				controller: 'RewardsController',
				templateUrl: 'app/partials/rewards.html'
			})
		.when('/events',
			{
				controller: 'EventsController',
				templateUrl: 'app/partials/events.html'
			})
		.when('/forum',
			{
				controller: 'EmptyController',
				templateUrl: 'app/partials/forum.html'
			})
		.when('/structures',
			{
				controller: 'StructuresController',
				templateUrl: 'app/partials/structures.html'
			})
		.when('/map',
			{
				controller: 'MapController',
				templateUrl: 'app/partials/map.html'
			})
		.when('/statistics',
			{
				controller: 'StatisticsController',
				templateUrl: 'app/partials/statistics.
(function () {
  'use strict';
  angular
  .module('theme.core.services')
  .factory('DispatchService', DispatchService)
  DispatchService.$inject = [ '$http', '$rootScope', 'shamanConfiguration', 'UtilsService', '$log'];
  /* jshint ignore:start */
  function DispatchService($http, $rootScope, shamanConfiguration, UtilsService, $log) {
    function getDispatchPopupInformation(id, dispatch) {
      var sel = dispatch.dispatchingOptionSelected.id;
      var grade = dispatch.incident.grade;
      var loc = dispatch.incident.locality;
      return UtilsService.getPromise('api/travelincidents/getdespachopopupinformation?id=' + id +
      '&psel=' + sel +
      '&grade=' + grade +
      '&loc=' + loc);
    }
    function dispatch(dispatchData, isDispatching) {
      var travelIncidentVm = {
        id           : dispatchData.incident.travelIncidentId,
        incidentId   : dispatchData.incident.id,
        selectedView : dispatchData.dispatchingOptionSelected,
        movAptoGrado : dispa
/**
 * Main application routes
 */
'use strict';
var errors = require('./components/errors');
module.exports = function(app) {
  app.use('/api/proveedors', require('./api/proveedor'));
  app.use('/api/categorias', require('./api/categoria'));
  app.use('/api/ubicacions', require('./api/ubicacion'));
  app.use('/api/ejemplars', require('./api/ejemplar'));
  app.use('/api/estadoejemplars', require('./api/estadoejemplar'));
  app.use('/api/prestamos', require('./api/prestamo'));
  app.use('/api/estadoprestamos', require('./api/estadoprestamo'));
  app.use('/api/reservas', require('./api/reserva'));
  app.use('/api/subscripcions', require('./api/subscripcion'));
  app.use('/api/rols', require('./api/rol'));
  app.use('/api/articulos', require('./api/articulo'));
  app.use('/api/things', require('./api/thing'));
  app.use('/api/users', require('./api/user'));
  app.use('/auth', require('./auth'));
  
  app.route('/:url(api|auth|components|app|bower_components|assets)/*')
   .get(errors[404]
var middleware  = require('../middleware').middleware,
    api         = require('../api');
module.exports = function (server) {
    server.get('/ghost/api/v0.1/posts', middleware.authAPI, api.requestHandler(api.posts.browse));
    server.post('/ghost/api/v0.1/posts', middleware.authAPI, api.requestHandler(api.posts.add));
    server.get('/ghost/api/v0.1/posts/:id', middleware.authAPI, api.requestHandler(api.posts.read));
    server.put('/ghost/api/v0.1/posts/:id', middleware.authAPI, api.requestHandler(api.posts.edit));
    server.del('/ghost/api/v0.1/posts/:id', middleware.authAPI, api.requestHandler(api.posts.destroy));
    server.get('/ghost/api/v0.1/posts/getSlug/:title', middleware.authAPI, api.requestHandler(api.posts.getSlug));
    server.get('/ghost/api/v0.1/settings/', middleware.authAPI, api.requestHandler(api.settings.browse));
    server.get('/ghost/api/v0.1/settings/:key/', middleware.authAPI, api.requestHandler(api.settings.read));
    server.put('/ghost/api/v0.1/setting
var class_o_r_m_1_1_controller_1_1_base_controller =
    [ "__construct", "class_o_r_m_1_1_controller_1_1_base_controller.html#affa81b5f89667fddea56f31bfe9bf4ab", null ],
    [ "afterAction", "class_o_r_m_1_1_controller_1_1_base_controller.html#a228bc908202baa077859ed61ced32e0b", null ],
    [ "beforeAction", "class_o_r_m_1_1_controller_1_1_base_controller.html#a87e1a608fb2887b1a942297b1e2e1187", null ],
    [ "ControllerName", "class_o_r_m_1_1_controller_1_1_base_controller.html#add6fb43f2a0b5b20e944056893206c0b", null ],
    [ "getRequest", "class_o_r_m_1_1_controller_1_1_base_controller.html#adf1a35ad20e475c59cc0967d5764aa22", null ],
    [ "getTemplate", "class_o_r_m_1_1_controller_1_1_base_controller.html#a5d9dc4ee2d6563ea86a5d8f4d450d124", null ],
    [ "performAction", "class_o_r_m_1_1_controller_1_1_base_controller.html#a054920f63ab345c41a55f251652553d5", null ],
    [ "redirectTo", "class_o_r_m_1_1_controller_1_1_base_controller.html#a431f86128eb77d92640de25e477b8822", null ],

    [ "setRequest", "class_o_r_m_1_1_controller_1_1_base_controller.html#aef50276ab6bca9ee5b2e223a6af1cd5a", null ],
    [ "setTemplate", "class_o_r_m_1_1_controller_1_1_base_controller.html#a47fbc07cfcc0763eccbc73f797166c49", null ],
    [ "URL", "class_o_r_m_1_1_controller_1_1_base_controller.html#ae18b550b29240e442b4cca47d3f89cff", null ],
    [ "$_actionName", "class_o_r_m_1_1_controller_1_1_base_controller.html#ab374bcebe2df6f774a3051671478c7d7", null ],
    [ "$_request", "class_o_r_m_1_1_controller_1_1_base_controller.html#aadc3f3fe1ee8d615e233878dece93399", null ],
    [ "$_template", "class_o_r_m_1_1_controller_1_1_base_controller.html#aa4793dbeffb7732ab48e5c4cb93f407e", null ],
    [ "$_templateName", "class_o_r_m_1_1_controller_1_1_base_controller.html#af19c9e612d79af117eb788f1e2050186", null ],
    [ "$_useLayout", "class_o_r_m_1_1_controller_1_1_base_controller.html#ac167cdffe1eaf6292dc2577fae40a42e", null ],
    [ "$actionName", "class_o_r_m_1_1_controller_1_1_base_contr
var api = require('../api');
module.exports = function(server) {
	server.get('/admin/api/v0.1/posts/', api.requestHandler(api.posts.browse));
	server.get('/admin/api/v0.1/posts/:id', api.requestHandler(api.posts.read));
	server.put('/admin/api/v0.1/posts/:id', api.requestHandler(api.posts.edit));
	server.post('/admin/api/v0.1/posts/', api.requestHandler(api.posts.add));
	server.delete('/admin/api/v0.1/posts/:id', api.requestHandler(api.posts.destroy));
    server.get('/admin/api/v0.1/settings/', api.requestHandler(api.settings.browse));
    server.get('/admin/api/v0.1/settings/:name/', api.requestHandler(api.settings.read));
    server.put('/admin/api/v0.1/settings/', api.requestHandler(api.settings.edit));
    server.get('/admin/api/v0.1/users/', api.requestHandler(api.users.browse));
    server.get('/admin/api/v0.1/users/:id/', api.requestHandler(api.users.read));
    server.put('/admin/api/v0.1/users/:id/', api.requestHandler(api.users.edit));
    server.post('/admin/api/v0.1/users/
;(function() {
    "use strict";
    module.exports = function aliasServices(service) {
        return  service === "Wood"                                      ? "Christmas Trees"
                : service === "Batteries"                               ? "Household batteries"
                : service === "Cardboard and paper"                     ? "Cardboard"
                : service === "Clothing and textiles"                   ? "Textiles and shoes"
                : service === "Nappies"                                 ? "Nappies"
                : service === "Furniture"                                ? "Furniture (not reusable)"
                : service === "Garden waste"                            ? "Grass cuttings and leaves"
                : service === "Light bulbs"                             ? "Light bulbs"
                : service === "Glass"                                   ? "Glass bottles and jars (all colours)"
                : service === "Clinical waste"        

                : service === "Paint"                                   ? "Paint"
                : service === "Chemical and hazardous waste"            ? "Household chemicals"
                : service === "Aluminium cans"                          ? "Aluminium cans"
                : service === "Vehicles"                                ? "Cars and end of life vehicles"
                : service === "Foil"                                    ? "Foil"
                : service === "Scrap metal"                             ? "Scrap metal"
                : service === "Spectacles"                              ? "Spectacles"
                : service === "Cooking oil"                             ? "Cooking oil"
                : service === "Plastic"                                 ? "Plastic containers"
                : service === "Residents and tenants association"       ? "Residents%2Ftenants association"
                : service === "Marriage and civil partnership venues"   ? "Ma
var searchData=
  ['calibrate_2ec',['calibrate.c',['../a00050.html',1,'']]],
  ['calibrate_2eh',['calibrate.h',['../a00051.html',1,'']]],
  ['chronometer_2ec',['chronometer.c',['../a00052.html',1,'']]],
  ['chronometer_2eh',['chronometer.h',['../a00053.html',1,'']]],
  ['consolemanager_2ec',['consolemanager.c',['../a00054.html',1,'']]],
  ['consolemanager_2eh',['consolemanager.h',['../a00055.html',1,'']]],
  ['controller_2ec',['controller.c',['../a00056.html',1,'']]],
  ['controller_2eh',['controller.h',['../a00057.html',1,'']]],
  ['controller_5fbattleship_2ec',['controller_battleship.c',['../a00058.html',1,'']]],
  ['controller_5fbattleship_2eh',['controller_battleship.h',['../a00059.html',1,'']]],
  ['controller_5fhome_2ec',['controller_home.c',['../a00060.html',1,'']]],
  ['controller_5fhome_2eh',['controller_home.h',['../a00061.html',1,'']]],
  ['controller_5fscore_2ec',['controller_score.c',['../a00062.html',1,'']]],
  ['controller_5fscore_2eh',['controller_score.h',['../a00063.h
var dir_1cbfbd4346a9f804a2d9cf80ad208696 =
    [ "accessService.php", "d1/daa/access_service_8php.html", [
      [ "accessService", "d1/d73/classaccess_service.html", "d1/d73/classaccess_service" ],
      [ "RestrictedRole", "d4/d69/class_restricted_role.html", "d4/d69/class_restricted_role" ],
      [ "RestrictedView", "df/d54/class_restricted_view.html", "df/d54/class_restricted_view" ]
    ] ],
    [ "aclService.php", "dc/de0/acl_service_8php.html", "dc/de0/acl_service_8php" ],
    [ "auditService.php", "df/db7/audit_service_8php.html", [
      [ "auditService", "dc/d88/classaudit_service.html", "dc/d88/classaudit_service" ]
    ] ],
    [ "authService.php", "d2/d38/auth_service_8php.html", [
      [ "authService", "d9/d94/classauth_service.html", "d9/d94/classauth_service" ]
    ] ],
    [ "cacheService.php", "db/dcd/cache_service_8php.html", [
      [ "cacheService", "db/d43/classcache_service.html", "db/d43/classcache_service" ]
    ] ],
    [ "chartService.php", "df/d88/chart_se

      [ "chartService", "de/d97/classchart_service.html", "de/d97/classchart_service" ]
    ] ],
    [ "compileService.php", "dd/d8e/compile_service_8php.html", [
      [ "compileService", "de/d18/classcompile_service.html", "de/d18/classcompile_service" ]
    ] ],
    [ "cryptService.php", "d4/d82/crypt_service_8php.html", [
      [ "cryptService", "db/d31/classcrypt_service.html", "db/d31/classcrypt_service" ]
    ] ],
    [ "doTriggerService.php", "d5/de9/do_trigger_service_8php.html", [
      [ "DOTrigger", "dc/dc8/class_d_o_trigger.html", "dc/dc8/class_d_o_trigger" ],
      [ "doTriggerService", "dd/df1/classdo_trigger_service.html", "dd/df1/classdo_trigger_service" ],
      [ "TriggerAction", "d4/dfd/class_trigger_action.html", "d4/dfd/class_trigger_action" ]
    ] ],
    [ "emailService.php", "dc/d38/email_service_8php.html", [
      [ "EmailAccount", "db/de7/class_email_account.html", "db/de7/class_email_account" ],
      [ "emailService", "de/dfa/classemail_service.html", "de

    ] ],
    [ "excelService.php", "de/d2c/excel_service_8php.html", [
      [ "excelService", "d9/dd4/classexcel_service.html", "d9/dd4/classexcel_service" ]
    ] ],
    [ "genIdService.php", "d7/d58/gen_id_service_8php.html", [
      [ "genIdService", "da/d73/classgen_id_service.html", "da/d73/classgen_id_service" ]
    ] ],
    [ "ioService.php", "dc/da5/io_service_8php.html", [
      [ "ioService", "df/d27/classio_service.html", "df/d27/classio_service" ]
    ] ],
    [ "localeInfoService.php", "d4/dc6/locale_info_service_8php.html", [
      [ "localeInfoService", "d4/d44/classlocale_info_service.html", "d4/d44/classlocale_info_service" ]
    ] ],
    [ "logService.php", "d5/d84/log_service_8php.html", [
      [ "logService", "db/d75/classlog_service.html", "db/d75/classlog_service" ]
    ] ],
    [ "pdfService.php", "da/d9a/pdf_service_8php.html", [
      [ "pdfService", "d3/d43/classpdf_service.html", "d3/d43/classpdf_service" ]
    ] ],
    [ "profileService.php", "d6/da8/prof

      [ "profileService", "d6/d59/classprofile_service.html", "d6/d59/classprofile_service" ]
    ] ],
    [ "queryService.php", "d5/d06/query_service_8php.html", [
      [ "queryService", "d0/df8/classquery_service.html", "d0/df8/classquery_service" ]
    ] ],
    [ "reportService.php", "dc/d81/report_service_8php.html", [
      [ "reportService", "d0/d6b/classreport_service.html", "d0/d6b/classreport_service" ]
    ] ],
    [ "securityService.php", "d5/d85/security_service_8php.html", [
      [ "AgentFilterRule", "da/dd4/class_agent_filter_rule.html", "da/dd4/class_agent_filter_rule" ],
      [ "DomainFilterRule", "d0/da5/class_domain_filter_rule.html", "d0/da5/class_domain_filter_rule" ],
      [ "GetFilterRule", "da/d94/class_get_filter_rule.html", "da/d94/class_get_filter_rule" ],
      [ "IPFilterRule", "d8/d6a/class_i_p_filter_rule.html", "d8/d6a/class_i_p_filter_rule" ],
      [ "iSecurityRule", "d6/d38/interfacei_security_rule.html", "d6/d38/interfacei_security_rule" ],
     
var searchData=
  ['app',['App',['../namespace_thecallr_api_1_1_objects_1_1_app.html',1,'ThecallrApi::Objects']]],
  ['calltracking',['CallTracking',['../namespace_thecallr_api_1_1_objects_1_1_call_tracking.html',1,'ThecallrApi::Objects']]],
  ['cdr',['Cdr',['../namespace_thecallr_api_1_1_objects_1_1_cdr.html',1,'ThecallrApi::Objects']]],
  ['clicktocall',['ClickToCall',['../namespace_thecallr_api_1_1_objects_1_1_click_to_call.html',1,'ThecallrApi::Objects']]],
  ['client',['Client',['../namespace_thecallr_api_1_1_services_1_1_client.html',1,'ThecallrApi::Services']]],
  ['did',['Did',['../namespace_thecallr_api_1_1_objects_1_1_did.html',1,'ThecallrApi::Objects']]],
  ['enums',['Enums',['../namespace_thecallr_api_1_1_enums.html',1,'ThecallrApi']]],
  ['exception',['Exception',['../namespace_thecallr_api_1_1_exception.html',1,'ThecallrApi']]],
  ['helper',['Helper',['../namespace_thecallr_api_1_1_helper.html',1,'ThecallrApi']]],
  ['json',['Json',['../namespace_thecallr_api_1_1_json.htm
/**
 * channel_routes.js
 */
'use strict';
var routeFindMiddleware = dependency('middleware', 'route_find');
var apiPath = dependency('lib', 'helpers').apiPath;
/**
 * Channel routes
 * @param  {Object} app Express app
 */
module.exports = function(app, controller) {
    /**
     * @api {get} /channels/ Find Channels
     * @apiName FindChannels
     * @apiGroup Channel
     * @apiPermission all
     *
     * @apiStructure ResourceFind
     *
     * @apiSuccess {Array}  channels       List of all the found channels
     * @apiErrorStructure ResourceError
     */
    app.get(apiPath('channels'), controller.find.bind(controller) );
    /**
     * @api {get} /channels/:_ids Retrieve Channels by id
     * @apiName RetrieveChannels
     * @apiGroup Channel
     * @apiPermission all
     *
     * @apiStructure ResourceFindByIds
     *
     * @apiSuccess {Array}  channels       List of all the found channels
     * @apiErrorStructure ResourceError
     */
    app.get(apiPath('channels/:_ids')

    /**
     * @api {post} /channels/ Create Channel
     * @apiName CreateChannel
     * @apiGroup Channel
     * @apiPermission admin
     *
     * @apiParam {String} name     Name
     * @apiParam {String} slug     Slug
     *
     * @apiSuccess (201) {Array}  channels       The created channel
     * @apiErrorStructure ResourceError
     */
    app.post(apiPath('channels'), controller.create.bind(controller) );
    /**
     * @api {put} /channels/:_id Update Channel
     * @apiName UpdateChannel
     * @apiGroup Channel
     * @apiPermission admin
     *
     * @apiSuccess {Array}  channels       The updated channel
     * @apiErrorStructure ResourceError
     */
    app.put(apiPath('channels/:_id'), controller.update.bind(controller) );
    /**
     * @api {delete} /channels/:_id Delete Channel
     * @apiName DeleteChannel
     * @apiGroup Channel
     * @apiPermission admin
     *
     * @apiStructure ResourceDelete
     *
     * @apiErrorStructure ResourceError
     */
    app
/**
 * message_routes.js
 */
'use strict';
var routeFindMiddleware = dependency('middleware', 'route_find');
var apiPath = dependency('lib', 'helpers').apiPath;
/**
 * Message routes
 * @param  {Object} app Express app
 */
module.exports = function(app, controller) {
    /**
     * @api {get} /messages/ Find Messages
     * @apiName FindMessages
     * @apiGroup Message
     * @apiPermission all
     *
     * @apiStructure ResourceFind
     *
     * @apiSuccess {Array}  messages       List of all the found messages
     * @apiErrorStructure ResourceError
     */
    app.get(apiPath('messages'), controller.find.bind(controller) );
    /**
     * @api {get} /messages/:_ids Retrieve Messages by id
     * @apiName RetrieveMessages
     * @apiGroup Message
     * @apiPermission all
     *
     * @apiStructure ResourceFindByIds
     *
     * @apiSuccess {Array}  messages       List of all the found messages
     * @apiErrorStructure ResourceError
     */
    app.get(apiPath('messages/:_ids')

    /**
     * @api {post} /messages/ Create Message
     * @apiName CreateMessage
     * @apiGroup Message
     * @apiPermission admin
     *
     * @apiParam {String} name     Name
     * @apiParam {String} slug     Slug
     *
     * @apiSuccess (201) {Array}  messages       The created message
     * @apiErrorStructure ResourceError
     */
    app.post(apiPath('messages'), controller.create.bind(controller) );
    /**
     * @api {put} /messages/:_id Update Message
     * @apiName UpdateMessage
     * @apiGroup Message
     * @apiPermission admin
     *
     * @apiSuccess {Array}  messages       The updated message
     * @apiErrorStructure ResourceError
     */
    app.put(apiPath('messages/:_id'), controller.update.bind(controller) );
    /**
     * @api {delete} /messages/:_id Delete Message
     * @apiName DeleteMessage
     * @apiGroup Message
     * @apiPermission admin
     *
     * @apiStructure ResourceDelete
     *
     * @apiErrorStructure ResourceError
     */
    app
if (typeof define !== 'function') {
  var define = require('amdefine')(module);
define(function(require) {
  var common = require('./common'),
      _  = require('underscore');
  var toJson = JSON.stringify;
  var Dispatch = function(on, exec) {
    this.on = on;
    this.exec = exec;
  };
  Dispatch.prototype = {
    is: function(v) {
      return this.on == toJson(v);
    },
    isNot: function(v) {
      return !this.is(v);
    },
    invoke: function(args) {
      return common.apply(this.exec, args);
    }
  };
  Dispatch.create = function(on, exec) {
    return new Dispatch(on, exec);
  };
  Dispatch.fromPair = function(pair) {
    return Dispatch.create(toJson(pair[0]), pair[1]);
  };
  Dispatch.is = _.partial(common.invoke, 'is');
  Dispatch.isNot = _.partial(common.invoke, 'isNot');
  Dispatch.find = function(many, v) {
    return _.find(many, Dispatch.is(v));
  };
  Dispatch.reject = function(many, v) {
    return _.reject(many, Dispatch.is(v));
  };
  Dispatch.add = function
function show_alert(msg, seconds, failure, under) {
	clearTimeout(show_alert.timer);
	show_alert.under = under;
	if (typeof show_alert.div == 'undefined') {
		show_alert.div = $(document.createElement('div'));
		show_alert.div.addClass("alert");
		$('body').append(show_alert.div);
		show_alert.div.css('line-height', '20px');
		show_alert.div.click(function () {
			clearTimeout(show_alert.timer);
			show_alert.div.hide();
		});
	}
	show_alert.div.hide();
	show_alert.div.css('left', '0px');
	show_alert.div.css('top', '0px');
	show_alert.div.html(msg);
	if (failure) show_alert.div.addClass('failed');
	else show_alert.div.removeClass('failed');
	show_alert.div.show();
	show_alert_adjustorigin();
			
	if (seconds > 0) {
		show_alert.timer = setTimeout(function () { show_alert.div.hide(); }, seconds*1000);
	}
function show_alert_adjustorigin() {
	if (typeof show_alert.div == 'undefined' || show_alert.div.is(':hidden')) return;
	var under = show_alert.under;
	show_alert.div.css('left', (under
function show_message(message,message_type){
    
    noty({
        text: message,
        type: message_type        
    });
function show_success_message(message){
    show_message(message,'success');
function show_warning_message(message){
    show_message(message,'warning');
function show_error_message(message){
    show_message(message,'error');
function show_information_message(message){
    show_message(message,'information');
function show_alert_message(message){
    show_message(message,'alert');
$(document).ready(function(){
    if ($('#notification-message').length>0) {
        var message_type=$('#notification-message').data('message-type');
        var message=$('#notification-message').html();
        
        if (message_type=='success'){
            show_success_message(message);
        }else if (message_type=='warning'){
            show_warning_message(message);
        }else if (message_type=='error'){
            show_error_message(message);
        }else if (mess
var searchData=
  ['nav_2ec',['nav.c',['../nav_8c.html',1,'']]],
  ['nav_2eh',['nav.h',['../nav_8h.html',1,'']]],
  ['nav_5fbungee_5ftakeoff_2ec',['nav_bungee_takeoff.c',['../nav__bungee__takeoff_8c.html',1,'']]],
  ['nav_5fbungee_5ftakeoff_2eh',['nav_bungee_takeoff.h',['../nav__bungee__takeoff_8h.html',1,'']]],
  ['nav_5fcatapult_2ec',['nav_catapult.c',['../nav__catapult_8c.html',1,'']]],
  ['nav_5fcatapult_2eh',['nav_catapult.h',['../nav__catapult_8h.html',1,'']]],
  ['nav_5fcube_2ec',['nav_cube.c',['../nav__cube_8c.html',1,'']]],
  ['nav_5fcube_2eh',['nav_cube.h',['../nav__cube_8h.html',1,'']]],
  ['nav_5fdrop_2ec',['nav_drop.c',['../nav__drop_8c.html',1,'']]],
  ['nav_5fdrop_2eh',['nav_drop.h',['../nav__drop_8h.html',1,'']]],
  ['nav_5fflower_2ec',['nav_flower.c',['../nav__flower_8c.html',1,'']]],
  ['nav_5fflower_2eh',['nav_flower.h',['../nav__flower_8h.html',1,'']]],
  ['nav_5fgls_2ec',['nav_gls.c',['../nav__gls_8c.html',1,'']]],
  ['nav_5fgls_2eh',['nav_gls.h',['../nav__gls_8h.h

  ['nav_5fline_2ec',['nav_line.c',['../nav__line_8c.html',1,'']]],
  ['nav_5fline_2eh',['nav_line.h',['../nav__line_8h.html',1,'']]],
  ['nav_5fline_5fborder_2ec',['nav_line_border.c',['../nav__line__border_8c.html',1,'']]],
  ['nav_5fline_5fborder_2eh',['nav_line_border.h',['../nav__line__border_8h.html',1,'']]],
  ['nav_5fline_5fosam_2ec',['nav_line_osam.c',['../nav__line__osam_8c.html',1,'']]],
  ['nav_5fline_5fosam_2eh',['nav_line_osam.h',['../nav__line__osam_8h.html',1,'']]],
  ['nav_5fpoles_2ec',['nav_poles.c',['../nav__poles_8c.html',1,'']]],
  ['nav_5fpoles_2eh',['nav_poles.h',['../nav__poles_8h.html',1,'']]],
  ['nav_5fsmooth_2ec',['nav_smooth.c',['../nav__smooth_8c.html',1,'']]],
  ['nav_5fsmooth_2eh',['nav_smooth.h',['../nav__smooth_8h.html',1,'']]],
  ['nav_5fspiral_2ec',['nav_spiral.c',['../nav__spiral_8c.html',1,'']]],
  ['nav_5fspiral_2eh',['nav_spiral.h',['../nav__spiral_8h.html',1,'']]],
  ['nav_5fsurvey_5fdisc_2ec',['nav_survey_disc.c',['../nav__survey__disc_8c.html'

  ['nav_5fsurvey_5fdisc_2eh',['nav_survey_disc.h',['../nav__survey__disc_8h.html',1,'']]],
  ['nav_5fsurvey_5fpoly_5fosam_2ec',['nav_survey_poly_osam.c',['../nav__survey__poly__osam_8c.html',1,'']]],
  ['nav_5fsurvey_5fpoly_5fosam_2eh',['nav_survey_poly_osam.h',['../nav__survey__poly__osam_8h.html',1,'']]],
  ['nav_5fsurvey_5fpolygon_2ec',['nav_survey_polygon.c',['../nav__survey__polygon_8c.html',1,'']]],
  ['nav_5fsurvey_5fpolygon_2eh',['nav_survey_polygon.h',['../nav__survey__polygon_8h.html',1,'']]],
  ['nav_5fsurvey_5frectangle_2ec',['nav_survey_rectangle.c',['../nav__survey__rectangle_8c.html',1,'']]],
  ['nav_5fsurvey_5frectangle_2eh',['nav_survey_rectangle.h',['../nav__survey__rectangle_8h.html',1,'']]],
  ['nav_5fsurvey_5fzamboni_2ec',['nav_survey_zamboni.c',['../nav__survey__zamboni_8c.html',1,'']]],
  ['nav_5fsurvey_5fzamboni_2eh',['nav_survey_zamboni.h',['../nav__survey__zamboni_8h.html',1,'']]],
  ['nav_5fvertical_5fraster_2ec',['nav_vertical_raster.c',['../nav__vertical__
'use strict';
GitLog.NavigationBar = React.createClass({
    render: function () {
        var Navbar = ReactBootstrap.Navbar;
        var CollapsibleNav = ReactBootstrap.CollapsibleNav;
        var Nav = ReactBootstrap.Nav;
        var NavItem = ReactBootstrap.NavItem;
        var DropdownButton = ReactBootstrap.DropdownButton;
        var MenuItem = ReactBootstrap.MenuItem;
        var Input = ReactBootstrap.Input;
        var userLink = '#/Users/' + username;
        return (
            <Navbar brand={GitLog.name} toggleNavKey={0} href="#/">
                <CollapsibleNav eventKey={0}> {/* This is the eventKey referenced */}
                    <Nav navbar>
                        <NavItem eventKey={1} href='#/Home'>Home</NavItem>
                        <NavItem eventKey={2} href='#/Dashboard'>Dashboard</NavItem>
                    </Nav>
                    <Nav navbar right>
                        <NavItem eventKey={1} href={userLink}>{username}</NavItem>
                    
var express     = require('express'),
    api         = require('../api'),
    apiRoutes;
apiRoutes = function apiRoutes(middleware) {
    var router = express.Router(),
        authenticatePublic = [
            middleware.api.authenticateClient,
            middleware.api.authenticateUser,
            middleware.api.requiresAuthorizedUserPublicAPI,
            middleware.api.cors
        ],
        authenticatePrivate = [
            middleware.api.authenticateClient,
            middleware.api.authenticateUser,
            middleware.api.requiresAuthorizedUser,
            middleware.api.cors
        ];
    router.del = router.delete;
    router.use(middleware.api.maintenance);
    router.use(middleware.api.versionMatch);
    router.options('*', middleware.api.cors);
    router.get('/configuration', authenticatePrivate, api.http(api.configuration.read));
    router.get('/configuration/:key', authenticatePrivate, api.http(api.configuration.read));
    router.get('/configuration/timez

    router.get('/posts', authenticatePublic, api.http(api.posts.browse));
    router.post('/posts', authenticatePrivate, api.http(api.posts.add));
    router.get('/posts/:id', authenticatePublic, api.http(api.posts.read));
    router.get('/posts/slug/:slug', authenticatePublic, api.http(api.posts.read));
    router.put('/posts/:id', authenticatePrivate, api.http(api.posts.edit));
    router.del('/posts/:id', authenticatePrivate, api.http(api.posts.destroy));
    router.put('/schedules/posts/:id', [middleware.api.authenticateClient, middleware.api.authenticateUser], api.http(api.schedules.publishPost));
    router.get('/settings', authenticatePrivate, api.http(api.settings.browse));
    router.get('/settings/:key', authenticatePrivate, api.http(api.settings.read));
    router.put('/settings', authenticatePrivate, api.http(api.settings.edit));
    router.get('/users', authenticatePublic, api.http(api.users.browse));
    router.get('/users/:id', authenticatePublic, api.http(api.users.rea

    router.get('/users/slug/:slug', authenticatePublic, api.http(api.users.read));
    router.get('/users/email/:email', authenticatePublic, api.http(api.users.read));
    router.put('/users/password', authenticatePrivate, api.http(api.users.changePassword));
    router.put('/users/owner', authenticatePrivate, api.http(api.users.transferOwnership));
    router.put('/users/:id', authenticatePrivate, api.http(api.users.edit));
    router.post('/users', authenticatePrivate, api.http(api.users.add));
    router.del('/users/:id', authenticatePrivate, api.http(api.users.destroy));
    router.get('/tags', authenticatePublic, api.http(api.tags.browse));
    router.get('/tags/:id', authenticatePublic, api.http(api.tags.read));
    router.get('/tags/slug/:slug', authenticatePublic, api.http(api.tags.read));
    router.post('/tags', authenticatePrivate, api.http(api.tags.add));
    router.put('/tags/:id', authenticatePrivate, api.http(api.tags.edit));
    router.del('/tags/:id', authenticatePriv

    router.get('/subscribers', middleware.api.labs.subscribers, authenticatePrivate, api.http(api.subscribers.browse));
    router.get('/subscribers/csv', middleware.api.labs.subscribers, authenticatePrivate, api.http(api.subscribers.exportCSV));
    router.post('/subscribers/csv',
        middleware.api.labs.subscribers,
        authenticatePrivate,
        middleware.upload.single('subscribersfile'),
        middleware.validation.upload({type: 'subscribers'}),
    );
    router.get('/subscribers/:id', middleware.api.labs.subscribers, authenticatePrivate, api.http(api.subscribers.read));
    router.post('/subscribers', middleware.api.labs.subscribers, authenticatePublic, api.http(api.subscribers.add));
    router.put('/subscribers/:id', middleware.api.labs.subscribers, authenticatePrivate, api.http(api.subscribers.edit));
    router.del('/subscribers/:id',  middleware.api.labs.subscribers, authenticatePrivate, api.http(api.subscribers.destroy));
    router.get('/roles/', authenticate

    router.get('/clients/slug/:slug', api.http(api.clients.read));
    router.get('/slugs/:type/:name', authenticatePrivate, api.http(api.slugs.generate));
    router.get('/themes/:name/download',
        authenticatePrivate,
        api.http(api.themes.download)
    );
    router.post('/themes/upload',
        authenticatePrivate,
        middleware.upload.single('theme'),
        middleware.validation.upload({type: 'themes'}),
        api.http(api.themes.upload)
    );
    router.del('/themes/:name',
        authenticatePrivate,
        api.http(api.themes.destroy)
    );
    router.get('/notifications', authenticatePrivate, api.http(api.notifications.browse));
    router.post('/notifications', authenticatePrivate, api.http(api.notifications.add));
    router.del('/notifications/:id', authenticatePrivate, api.http(api.notifications.destroy));
    router.get('/db', authenticatePrivate, api.http(api.db.exportContent));
    router.post('/db',
        authenticatePrivate,
        middle

    );
    router.del('/db', authenticatePrivate, api.http(api.db.deleteAllContent));
    router.post('/mail', authenticatePrivate, api.http(api.mail.send));
    router.post('/mail/test', authenticatePrivate, api.http(api.mail.sendTest));
    router.post('/slack/test', authenticatePrivate, api.http(api.slack.sendTest));
    router.post('/authentication/passwordreset',
        middleware.spamPrevention.forgotten,
        api.http(api.authentication.generateResetToken)
    );
    router.put('/authentication/passwordreset', api.http(api.authentication.resetPassword));
    router.post('/authentication/invitation', api.http(api.authentication.acceptInvitation));
    router.get('/authentication/invitation', api.http(api.authentication.isInvitation));
    router.post('/authentication/setup', api.http(api.authentication.setup));
    router.put('/authentication/setup', authenticatePrivate, api.http(api.authentication.updateSetup));
    router.get('/authentication/setup', api.http(api.authentic
var _forEachPair = function(array, fn) {
    if (array.length % 2 !== 0) {
        throw "Cannot iterate pairs on array with odd number of members";
    }
    for (var i=0;i<array.length;i+=2) {
        fn(array[i], array[i+1]);
    }
};
/*
 * Function to create multi-methods that perform arbitrary value dispatch.
 * Now dispatch mapping is an array whose values are alternating value/function pairs
 * [v1, f1, v2, f2, v3, f3...,vn,fn]
 */
var defMulti = function(dispatchFn, defaultFn, dispatchMapping) {
    var dm = dispatchMapping || [];
    var result = function() {
        var dispatchValue = dispatchFn.apply(null, arguments);
        var dispatchTarget = defaultFn;
        _forEachPair(dm, function(v,f) {
            if (v === dispatchValue) {
                dispatchTarget = f;
            }
        });
        if (dispatchTarget === undefined) {
            throw "No dispatch target for value " + dispatchValue + ", and no default specified";
        }
        return dispatchTarge
'use strict';
var fs = require('fs');
module.exports = angular.module('app.patterns', [
  'ui.router',
  require('../../../_shared/angular/resources/spaces/spaces').name
])
.config(
  function($stateProvider) {
    $stateProvider
      .state('app.pattern', {
        url: '/patterns',
        views: {
          '@': {
            controller: 'PatternController',
            template: fs.readFileSync(__dirname + '/templates/_patterns.html')
          }
        }
      })
      .state('app.pattern.styleguide', {
        url: '/styleguide',
          controller: 'PatternController',
          controllerAs: 'styleguide',
          template: fs.readFileSync(__dirname + '/templates/styleguide.html')
      })
      .state('app.pattern.accordion', {
        url: '/accordion',
          controller: 'DemoAccordionController',
          controllerAs: 'accordionDemo',
          template: fs.readFileSync(__dirname + '/templates/accordion-demo.html')
      })
      .state('app.pattern.alert', {
    

          controller: 'DemoAlertController',
          controllerAs: 'alertDemo',
          template: fs.readFileSync(__dirname + '/templates/alert-demo.html')
      })
      .state('app.pattern.buttons', {
        url: '/buttons',
          controller: 'DemoButtonsController',
          controllerAs: 'buttonDemo',
          template: fs.readFileSync(__dirname + '/templates/buttons-demo.html')
      })
      .state('app.pattern.carousel', {
        url: '/carousel',
          controller: 'DemoCarouselController',
          controllerAs: 'carouselDemo',
          template: fs.readFileSync(__dirname + '/templates/carousel-demo.html')
      })
      .state('app.pattern.collapse', {
        url: '/collapse',
          controller: 'DemoCollapseController',
          controllerAs: 'collapseDemo',
          template: fs.readFileSync(__dirname + '/templates/collapse-demo.html')
      })
      .state('app.pattern.datepicker', {
        url: '/datepicker',
          controller: 'DemoDatepickerC

          controllerAs: 'datepickerDemo',
          template: fs.readFileSync(__dirname + '/templates/datepicker-demo.html')
      })
      .state('app.pattern.dropdown', {
        url: '/dropdown',
          controller: 'DemoDropdownController',
          controllerAs: 'dropdownDemo',
          template: fs.readFileSync(__dirname + '/templates/dropdown-demo.html')
      })
      .state('app.pattern.input', {
        url: '/input',
          controller: 'DemoInputController',
          controllerAs: 'inputDemo',
          template: fs.readFileSync(__dirname + '/templates/input-demo.html')
      })
      .state('app.pattern.modal', {
        url: '/modal',
          controller: 'DemoModalController',
          controllerAs: 'modalDemo',
          template: fs.readFileSync(__dirname + '/templates/modal-demo.html')
      })
      .state('app.pattern.pagination', {
        url: '/pagination',
          controller: 'DemoPaginationController',
          controllerAs: 'paginationDemo',
     

      })
      .state('app.pattern.popover', {
        url: '/popover',
          controller: 'DemoPopoverController',
          controllerAs: 'popoverDemo',
          template: fs.readFileSync(__dirname + '/templates/popover-demo.html')
      })
      .state('app.pattern.progressbar', {
        url: '/progressbar',
          controller: 'DemoProgressbarController',
          controllerAs: 'progressbarDemo',
          template: fs.readFileSync(__dirname + '/templates/progressbar-demo.html')
      })
      .state('app.pattern.rating', {
        url: '/rating',
          controller: 'DemoRatingController',
          controllerAs: 'ratingDemo',
          template: fs.readFileSync(__dirname + '/templates/rating-demo.html')
      })
      .state('app.pattern.tabs', {
        url: '/tabs',
          controller: 'DemoTabsController',
          controllerAs: 'tabsDemo',
          template: fs.readFileSync(__dirname + '/templates/tabs-demo.html')
      })
      .state('app.pattern.timepicker',

        url: '/timepicker',
          controller: 'DemoTimepickerController',
          controllerAs: 'timepickerDemo',
          template: fs.readFileSync(__dirname + '/templates/timepicker-demo.html')
      })
      .state('app.pattern.tooltip', {
        url: '/tooltip',
          controller: 'DemoTooltipController',
          controllerAs: 'tooltipDemo',
          template: fs.readFileSync(__dirname + '/templates/tooltip-demo.html')
      })
      .state('app.pattern.typeahead', {
        url: '/typeahead',
          controller: 'DemoTypeaheadController',
          controllerAs: 'typeaheadDemo',
          template: fs.readFileSync(__dirname + '/templates/typeahead-demo.html')
      });
  }
.controller('PatternController', require('./controllers/_pattern_controller'))
.controller('DemoAccordionController', require('./controllers/accordion_controller'))
.controller('DemoAlertController', require('./controllers/alert_controller'))
.controller('DemoButtonsController', require('./contr

.controller('DemoCarouselController', require('./controllers/carousel_controller'))
.controller('DemoCollapseController', require('./controllers/collapse_controller'))
.controller('DemoDatepickerController', require('./controllers/datepicker_controller'))
.controller('DemoDropdownController', require('./controllers/dropdown_controller'))
.controller('DemoInputController', require('./controllers/input_controller'))
.controller('DemoModalController', require('./controllers/modal_controller'))
.controller('ModalInstanceController', require('./controllers/modal_instance_controller'))
.controller('DemoPaginationController', require('./controllers/pagination_controller'))
.controller('DemoPopoverController', require('./controllers/popover_controller'))
.controller('DemoProgressbarController', require('./controllers/progressbar_controller'))
.controller('DemoRatingController', require('./controllers/rating_controller'))
.controller('DemoTabsController', require('./controllers/tabs_controller
/**
 * Created by lingjianfeng on 14-8-31.
 */
var Level1 = {
    enemyMax: 6,
    enemies: [
        {
            ShowType: "Repeate",
            ShowTime: "00:02",
            Types: [0, 1, 2]
        },
        {
            ShowType: "Repeate",
            ShowTime: "00:05",
            Types: [3, 4, 5]
        }
        /*{
         ShowType:"Repeate",
         ShowTime:"00:08",
         Types:[0,4,3,5]
         },
         {
         ShowType:"Once",
         ShowTime:"00:6",
         Types:[0,2,4,3]
         },
         {
         ShowType:"Once",
         ShowTime:"00:16",
         Types:[0,2,5,4,3]
         },
         {
         ShowType:"Once",
         ShowTime:"00:25",
         Types:[0,3,5,4,3]
         },
         {
         ShowType:"Once",
         ShowTime:"00:35",
         Types:[4,5,3,1,3]
         },
         {
         ShowType:"Once",
         ShowTime:"00:50",
         Types:[0,3,2,1,0,3]
         },
         {
         ShowType:"Once",
         ShowTime:"01:1
var phonecatControllers = angular.module('phonecatControllers', ['templateservicemod', 'navigationservice']);
phonecatControllers.controller('homeCtrl', ['$scope', 'TemplateService', 'NavigationService',
  function ($scope, TemplateService, NavigationService) {
        $scope.template = TemplateService;
        $scope.menutitle = NavigationService.makeactive("Home");
        TemplateService.title = $scope.menutitle;
        $scope.navigation = NavigationService.getnav();
      
        $scope.data = [{"id":1, "name":"omkar"},{"id":2, "name":"abhay"} ];
  }]);
phonecatControllers.controller('aboutCtrl', ['$scope', 'TemplateService', 'NavigationService',
  function ($scope, TemplateService, NavigationService) {
        $scope.template = TemplateService;
        $scope.menutitle = NavigationService.makeactive("About");
        TemplateService.title = $scope.menutitle;
        $scope.navigation = NavigationService.getnav();
  }]);
phonecatControllers.controller('faqCtrl', ['$scope', 'Templ

  function ($scope, TemplateService, NavigationService) {
        $scope.template = TemplateService;
        $scope.menutitle = NavigationService.makeactive("Services");
        TemplateService.title = $scope.menutitle;
        $scope.navigation = NavigationService.getnav();
  }]);
phonecatControllers.controller('contactCtrl', ['$scope', 'TemplateService', 'NavigationService',
  function ($scope, TemplateService, NavigationService) {
        $scope.template = TemplateService;
        $scope.menutitle = NavigationService.makeactive("Portfolio");
        TemplateService.title = $scope.menutitle;
        $scope.navigation = NavigationService.getnav();
  }]);
phonecatControllers.controller('voterregiisterCtrl', ['$scope', 'TemplateService', 'NavigationService',
  function ($scope, TemplateService, NavigationService) {
        $scope.template = TemplateService;
        $scope.menutitle = NavigationService.makeactive("Contact");
        TemplateService.title = $scope.menutitle;
        $sco

  }]);
phonecatControllers.controller('voterloginCtrl', ['$scope', 'TemplateService', 'NavigationService',
  function ($scope, TemplateService, NavigationService) {
        $scope.template = TemplateService;
        $scope.menutitle = NavigationService.makeactive("Contact");
        TemplateService.title = $scope.menutitle;
        $scope.navigation = NavigationService.getnav();
  }]);
phonecatControllers.controller('voteCtrl', ['$scope', 'TemplateService', 'NavigationService',
  function ($scope, TemplateService, NavigationService) {
        $scope.template = TemplateService;
        $scope.menutitle = NavigationService.makeactive("Contact");
        TemplateService.title = $scope.menutitle;
        $scope.navigation = NavigationService.getnav();
  }]);
phonecatControllers.controller('candidatesCtrl', ['$scope', 'TemplateService', 'NavigationService',
  function ($scope, TemplateService, NavigationService) {
        $scope.template = TemplateService;
        $scope.menutitle = Naviga

        TemplateService.title = $scope.menutitle;
        $scope.navigation = NavigationService.getnav();
  }]);
phonecatControllers.controller('candidateprofileCtrl', ['$scope', 'TemplateService', 'NavigationService',
  function ($scope, TemplateService, NavigationService) {
        $scope.template = TemplateService;
        $scope.menutitle = NavigationService.makeactive("Contact");
        TemplateService.title = $scope.menutitle;
        $scope.navigation = NavigationService.getnav();
  }]);
phonecatControllers.controller('candidateregisterCtrl', ['$scope', 'TemplateService', 'NavigationService',
  function ($scope, TemplateService, NavigationService) {
        $scope.template = TemplateService;
        $scope.menutitle = NavigationService.makeactive("Contact");
        TemplateService.title = $scope.menutitle;
        $scope.navigation = NavigationService.getnav();
  }]);
phonecatControllers.controller('candidateloginCtrl', ['$scope', 'TemplateService', 'NavigationService',
  fun
/**
 * Created by chen on 2015/2/18.
 */
$(function () {
    var obj = {};
    var test = -Infinity;
    console.log(test);
    var n = 13578578.54878978;
    console.log('n: ' + n);
    $.fn.extend({
        test: function () {
            console.log(this);
            console.log('haha');
        }
    });
    $.fn.extend({
        header: function (header) {
            this.append('<p class="header h '+ header.replace(/ /,'Spac').toLowerCase()+'">' + header+ '</p>');
            $('.head').append('<div class="h-'+ header.replace(/ /,'Spac').toLowerCase() +'">'+ header +'</div>');
            return this
        },
        show: function (com,type) {
            result = eval(com);
            var model = $('<span class="commander">' +
                com +'&nbsp;--&gt; '+
                '</span><span class="result">' +
                result +
                '</span><br>');
            if (type) {model.addClass(type)}
            this.append(model);
            return this;
    

        log: function (message) {
            this.append('<p class="log">'+ message.replace(/\n/g,'<br>') +'</p>');
            return this;
        },
        row: function () {
            this.append('<div class="row" style="display: block;">&nbsp;</div>');
            return this;
        }
    });
    var object = new Object(Number);
    var testA ={a:1};
    var valueOf  = {valueOf: function () {
        return 1;
    }};
    var toString = {toString: function () {
        return 2;
    }};
    var testConvert = {} +{};
    var testSequence = {
        valueOf: function () {
            return 1;
        },
        toString: function () {
            return 2;
        }
    }
    $('.javascript-exercise')
        .header('Number')
        .show('Number.MAX_VALUE')
        .show('Number.MIN_VALUE')
        .show('Number.NaN')
        .show('Number.NEGATIVE_INFINITY')
        .show('Number.POSITIVE_INFINITY')
        .row()
        .show('n')
        .show('n.toExponential()')
  

        .show('n.toFixed()')
        .show('n.toFixed(2)')
        .show('n.toString()')
        .show('n.toLocaleString()')
        .show('n.toPrecision()')
        .show('n.toPrecision(1)')
        .show('n.valueOf(n.toPrecision())')
        .log('整数以浮点数形式存储')
        .show('1 === 1.0')
        .show('1 + 1.0')
        .log('浮点数不是精确的值')
        .show('0.1 + 0.2 === 0.3')
        .show('0.3 / 0.1')
        .show('(0.3 - 0.2) === (0.2- 0.1)')
        .log('大于2的53次方后，整数运算结果出错')
        .show('Math.pow(2,53)')
        .show('Math.pow(2,53) + 1')
        .show('Math.pow(2,53) + 2')
        .show('Math.pow(2,53) + 3')
        .show('Math.pow(2,53) + 4')
        .log('大于2的53次方后，多出来的有效数字无法保存')
        .show('9007199254740992111')
        .row()
        .show('588e+6')
        .show('126e-3')
        .show('1234567890123456789012')
        .show('123456789012345678901')
        .show('0.0000003 ')
        .show('0.000003 ')
        .show('0xff')
        .show('0377')
        .row()
        .

        .show('NaN == NaN')
        .show('NaN === NaN')
        .show('isNaN(NaN)')
        .log('isNaN(\'Hello\') Same To isNaN(Number(\'Hello\'))')
        .show('isNaN(\'Hello\')')
        .show('isNaN({})')
        .show('isNaN(["array"])')
        .log('数组内部indexOf 使用严格相等运算符')
        .show('[NaN].indexOf(NaN)')
        .row()
        .show('6.5 % 2.1')
        .row()
        .log('原始数据类型转换成数值类型再进行比较')
        .show('"true" == true')
        .show('"" == false')
        .show('1 == true')
        .show('2 == true')
        .show('2 == false')
        .show('"\\n   123  \\t" == 123')
        .log('对象转换为基本类型的值再比较')
        .show('[1] == 1')
        .show('[1] == true')
        .show('[1] == "true"')
        .show('[1] == "1"')
        .show('undefined == null')
        .row()
        .show('"" == "0"')
        .show('0 == ""')
        .show('0 == "0"')
        .row()
        .show('false == "false"')
        .show('false == "0"')
        .show('false == undefined')
        .show('

        .show('null == undefined')
        .show('"\\t\\r\\n" == 0')
        .log('~ 等于 取反-1')
        .show('~ -1')
        .show('~ -2')
        .show('~ -848')
        .show('~ 1')
        .show('~ 2')
        .show('~ 848')
        .log('~~ 最快取整')
        .show('~~ 2.9')
        .log('Same To-->~Number(\'011\')')
        .show('~ "011"')
        .show('~ "42 cats"')
        .show('~ "0xcafebabe"')
        .show('~ "deadbeef"')
        .log('Same To-->~~Number("011")')
        .show('~~ "011"')
        .show('~~ "42 cats"')
        .show('~~ "0xcafebabe"')
        .show('~~ "deadbeef"')
        .log('^ 结果不同为1，结果相同为0')
        .show('0 ^ 3')
        .log('连续对a, b进行3次异或可交换两个数的值')
        .header('String')
        .log('\\251  \\xA9 \\u00A9')
        .show('"\251"')
        .show('"\xA9"')
        .show('"\u00A9"')
        .log('base 64 不适用于非ASCII码的字符')
        .show('window.btoa("Hello World")')
        .show('window.atob("SGVsbG8gV29ybGQ=")')
        .header('Object')
        .log('

        .show('object')
        .show('object.prototype')
        .show('object.constructor()')
        .show('object.toLocalString')
        .show('object.toString()')
        .header('data type')
        .log('var testA = {a:1}')
        .show('Number(testA)')
        .log('var valueOf = {valueOf: function(){return 1;}}')
        .show('Number(valueOf)')
        .log('var toString = {toString: function(){return 2;}}')
        .show('Number(toString)')
        .log('var testSequence = {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valueOf: function(){return 1;},\n' +
            '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toString: function(){return: 2;}}')
        .show('Number(testSequence)')
        .row()
        .show('parseInt(testA)')
        .show('parseInt(valueOf)')
        .show('parseInt(toString)')
        .show('parseInt(testSequence)')
        .row()
        .show('Boolean(new Boolean(false))')
        .row()
        .show('

        .show('-false')
        .row()
        .show('5 + true')
        .show('true + true')
        .row()
        .show('1 + [1,2]')
        .show('1+{}')
        .show('1+{a:1}')
        .show('{a: 1} + 1','primary')
        .show('({a: 1}) + 1')
        .row()
        .log('[]+[]')
        .show('[]+{}')
        .show('{} + []')
        .show('({}) + []')
        .show('{} + {}')
        .show('({}) + {}')
        .show('({} + {})')
        .log('var testConvert = {} + {}')
        .show('testConvert')
        .row()
        .show('parseFloat("3.14")')
        .show('parseFloat("314e-2")')
        .show('parseFloat("0.0314E+2")')
        .show('parseFloat("3.14more no-digit characters")')
        .row()
        .show('parseFloat("\\t\\v\\r3.14\\n")')
        .show('parseFloat("\\r\\v\\n3.14\\t")')
        .show('parseFloat("String")')
        .show('parseFloat("String555.88")')
        .show('Number("")')
        .row()
        .show('parseFloat(true)')
        .show('parseInt(tr
'use strict';
/* global sofa */
describe('sofa.StateResolverService', function () {
    var stateResolverService,
        qService,
        configService,
        httpService;
    beforeEach(function () {
        configService        = new sofa.ConfigService();
        qService             = new sofa.QService();
        httpService          = new sofa.mocks.httpService(qService);
        stateResolverService = new sofa.StateResolverService(qService, httpService, configService);
    });
    it('should be defined', function () {
        expect(stateResolverService).toBeDefined();
    });
    it('should resolve state', function (done) {
        var state = {
            url: 'some-url'
        };
        stateResolverService.registerState(state);
        stateResolverService
            .resolveState(state.url)
            .then(function (resolvedState) {
                expect(resolvedState).toEqual(state);
                done();
            });
    });
    
});
describe('sofa.StateReso
var express     = require('express'),
    api         = require('../api'),
    apiRoutes;
apiRoutes = function apiRoutes(middleware) {
    var router = express.Router();
    router.del = router.delete;
    router.get('/configuration', api.http(api.configuration.browse));
    router.get('/configuration/:key', api.http(api.configuration.read));
    router.get('/posts', api.http(api.posts.browse));
    router.post('/posts', api.http(api.posts.add));
    router.get('/posts/:id', api.http(api.posts.read));
    router.get('/posts/slug/:slug', api.http(api.posts.read));
    router.put('/posts/:id', api.http(api.posts.edit));
    router.del('/posts/:id', api.http(api.posts.destroy));
    router.get('/settings', api.http(api.settings.browse));
    router.get('/settings/:key', api.http(api.settings.read));
    router.put('/settings', api.http(api.settings.edit));
    router.get('/users', api.http(api.users.browse));
    router.get('/users/:id', api.http(api.users.read));
    router.get('/users/s

    router.get('/users/email/:email', api.http(api.users.read));
    router.put('/users/password', api.http(api.users.changePassword));
    router.put('/users/owner', api.http(api.users.transferOwnership));
    router.put('/users/:id', api.http(api.users.edit));
    router.post('/users', api.http(api.users.add));
    router.del('/users/:id', api.http(api.users.destroy));
    router.get('/tags', api.http(api.tags.browse));
    router.get('/tags/:id', api.http(api.tags.read));
    router.get('/tags/slug/:slug', api.http(api.tags.read));
    router.post('/tags', api.http(api.tags.add));
    router.put('/tags/:id', api.http(api.tags.edit));
    router.del('/tags/:id', api.http(api.tags.destroy));
    router.get('/roles/', api.http(api.roles.browse));
    router.get('/slugs/:type/:name', api.http(api.slugs.generate));
    router.get('/themes', api.http(api.themes.browse));
    router.put('/themes/:name', api.http(api.themes.edit));
    router.get('/notifications', api.http(api.notification

    router.post('/notifications', api.http(api.notifications.add));
    router.del('/notifications/:id', api.http(api.notifications.destroy));
    router.get('/db', api.http(api.db.exportContent));
    router.del('/db', api.http(api.db.deleteAllContent));
    router.post('/mail', api.http(api.mail.send));
    router.post('/mail/test', api.http(api.mail.sendTest));
    router.post('/authentication/passwordreset',
        middleware.spamPrevention.forgotten,
        api.http(api.authentication.generateResetToken)
    );
    router.put('/authentication/passwordreset', api.http(api.authentication.resetPassword));
    router.post('/authentication/invitation', api.http(api.authentication.acceptInvitation));
    router.get('/authentication/invitation', api.http(api.authentication.isInvitation));
    router.post('/authentication/setup', api.http(api.authentication.setup));
    router.get('/authentication/setup', api.http(api.authentication.isSetup));
    router.post('/authentication/token',
 
(function() {
    'use strict';
    angular
        .module('app.core')
        .factory('refreshService', refreshService);
    refreshService.$inject = ['songsService', 'profileService', 'libraryService', 'thumbsService'];
    function refreshService(songsService, profileService, libraryService, thumbsService) {
        
        var service = {
            resolve: resolve,
            resolveProfile: resolveProfile
        };
        return service;
        function resolve(uid) {
            return profileService.get(uid)
                .then(function() {
                    return libraryService.setReference();
                })
                .then(function() {
                    return songsService.set();
                })
                .then(function() {
                    return thumbsService.set();
                })
                .catch(function(error) {
                    console.error(error);
                });
        }
        function resolveProfile(uid) {
  
module.exports = function(Como) {
    var _ = require('/lib/Underscore/underscore.min'),
        UI = Como.loadUI(),
        $ = require('/lib/Como/Utils'),
        
        showCalendar, showCamera,
        showChat, showGraph, showMap,
        showDirectory, showNote, showUniversity;
        
    showCalendar = function() {
        var Calendar = require('/app/views/Calendar'),
            calendar = new Calendar(Como);
            
        calendar.create().open();
    };
    
    showCamera = function() {
        Ti.API.info('camera');
    };
    
    showChat = function() {
        Ti.API.info('chat');
    };
    
    showDirectory = function() {
        Ti.API.info('directory');
    };
    
    showGraph = function() {
        Ti.API.info('graph');
    };
    
    showMap = function() {
        Ti.API.info('map');
    };
    
    showNote = function() {
        Ti.API.info('note');
    };
    
    showUniversity = function() {
        Ti.API.info('university');
    };
    
    re
module("BacklogController", {
	setup: function() {
		addBacklogAndTestDataCreationMethods(this);
		$('#test-container').append('<div class="main" id="backlog"/>');
	},
	teardown: function() {
		BacklogController.callbacksForDidLoad = [];
		BacklogController.callbacksForAfterRendering = [];
		$('#test-container')[0].innerHTML = '';
	}
});
test("gets error message when an error happen during loading with BacklogServerCommunicator", function() {
	expect(1);
	var controller = new BacklogController();
	controller.setMessage = function(errorMessage) {
		equals('fnord', errorMessage);
	};
	controller.model.loader.showError('fnord');
});
test("can register for callback after backlog loading", function() {
	var firstSensedController = null;
	BacklogController.registerForCallbackAfterLoad(function(controller){
		firstSensedController = controller;
	});
	var secondSensedController = null;
	BacklogController.registerForCallbackAfterLoad(function(controller){
		secondSensedController = controller;

var dispatch_8h =
    [ "task", "structtask.html", "structtask" ],
    [ "LSHED", "dispatch_8h.html#ab672aa997e23009f0bf01f237aac15ed", null ],
    [ "MAXnTASKS", "dispatch_8h.html#af6b099574c54d63872fc626dcdeef94a", null ],
    [ "UBRRvalue", "dispatch_8h.html#a91bb4c23e04ae594c94c4b4b9fd9fffc", null ],
    [ "task", "dispatch_8h.html#ae088ef945347f6bd3af65b806a0c3acf", null ],
    [ "AddTask", "dispatch_8h.html#a20948c9b12c543546cdca3c5419d14b2", null ],
    [ "DeleteTask", "dispatch_8h.html#af9614f9097c425adde3c7154c962173a", null ],
    [ "DispatchTask", "dispatch_8h.html#aa46f19a6d870d46a2749a8c623a7ef68", null ],
    [ "Idle", "dispatch_8h.html#a2242f9428023ff0aacadb5fa210a6686", null ],
    [ "InitScheduler", "dispatch_8h.html#a8ed2d8ac7de1973e6084fcbbdabe7256", null ],
    [ "delay_time", "dispatch_8h.html#a3ca83343e7d0b2a5c87e67e7a37d1580", null ],
    [ "dt", "dispatch_8h.html#a7f5f503663caaac1aba5da597ea15416", null ],
    [ "TaskArray", "dispatch_8h.html#a101bcdad0194b88df2
kindling.module(function () {
  'use strict';
  var $lastTimestampMessage = null;
  function isLeaveMessage($message) {
    return $message.hasClass('leave_message') || $message.hasClass('kick_message');
  }
  function isEnterMessage($message) {
    return $message.hasClass('enter_message');
  }
  function isTimestampMessage($message) {
    return $message.hasClass('timestamp_message');
  }
  function showMessage($message) {
    if ($message) {
      $message.removeClass('hidden_message');
    }
  }
  function hideMessage($message) {
    if ($message) {
      $message.addClass('hidden_message');
    }
  }
  function shouldHideThisMessage($message, options) {
    return (options.leaveRoom === 'false' && isLeaveMessage($message)) ||
           (options.enterRoom === 'false' && isEnterMessage($message)) ||
           (options.timeStamps === 'false' && isTimestampMessage($message));
  }
  function filterMessage(e, options, username, message) {
    var $message = $(message);
    if (options
/* global setTimeout */
'use strict';
var util = require('./util');
var _ = require('lodash');
var iconFilenameMappings = require('./icon-filename-mapping');
var nameMappingPl = require('./nameMappingPl');
var apiHelperFactory = require('./apiHelper');
var eraService = require('./common/EraService');
var createService = function(userData) {
	var paused = false;
	var apiHelper = apiHelperFactory.get(userData);
	const wls = util.writeLogService(userData);
	let afterStartGameCallback = (result) => {
		userData.worldObj = result.world;
		userData.worldName = userData.worldObj.name;
		return invokeGetData();
	};
	const serviceArray = [];
	const definitionService = require('./server/DefinitionService').get(userData); serviceArray.push(definitionService);
	const staticDataService = require('./server/StaticDataService').get(userData, apiHelper); serviceArray.push(staticDataService);
	const resourceService = require('./server/ResourceService').get(userData, apiService, definitionService); servi

	const cityResourcesService = require('./server/CityResourcesService').get(userData, apiService, resourceService); serviceArray.push(cityResourcesService);
	const cityMapService = require('./server/CityMapService').get(userData, definitionService, cityResourcesService, apiService); serviceArray.push(cityMapService);
	const treasureHuntService = require('./server/TreasureHuntService').get(userData, apiService); serviceArray.push(treasureHuntService);
	const otherPlayerService = require('./server/OtherPlayerService').get(userData, apiService, definitionService); serviceArray.push(otherPlayerService);
	const cityProductionService = require('./server/CityProductionService').get(userData, apiService, cityMapService, definitionService, cityResourcesService); serviceArray.push(cityProductionService);
	const researchService = require('./server/ResearchService').get(userData, apiService, cityResourcesService); serviceArray.push(researchService);
	const friendsTavernService = require('./server/

	const friendService = require('./server/FriendService').get(userData, apiService, otherPlayerService); serviceArray.push(friendService);
	const hiddenRewardService = require('./server/HiddenRewardService').get(userData, apiService); serviceArray.push(hiddenRewardService);
	const startupService = require('./server/StartupService').get(userData, apiService, cityMapService, definitionService, cityResourcesService, resourceService); serviceArray.push(startupService);
	const campaignService = require('./server/CampaignService').get(userData, apiService, cityResourcesService, eraService); serviceArray.push(campaignService);
	const greatBuildingsService = require('./server/GreatBuildingsService').get(userData, apiService, definitionService, cityResourcesService, cityMapService, otherPlayerService); serviceArray.push(greatBuildingsService);
	const tradeService = require('./server/TradeService').get(userData, apiService, definitionService, cityResourcesService, eraService, campaignService); s

	apiService.setServiceArray(serviceArray);
	var startAccount = function() {
		return apiHelper.startAccount(userData).then(result => {
			if (result && result.status && result.status === 'ACCOUNT_STARTED') {
				return afterStartGameCallback(result);
			}
			return result;
		});
	};
	var isLogged = false;
	var user_data = null;
	var timeoutInterval = 5;
	var setAutoTimeout = function() {
		setTimeout(timeoutFunction, timeoutInterval * 1000);
	};
	var timeoutFunction = function() {
		if (isLogged && !paused) {
			processAutomaticActions().then(() => {
				setAutoTimeout();
			}, (reason) => {
				wls.writeLog('Automatyczne przetwarzanie zgłosiło wyjątek');
				if (reason instanceof Error) {
					wls.writeLog(reason.stack);
				} else {
					wls.writeLog(reason);
				}
				setAutoTimeout();
			});
			return;
		}
		setAutoTimeout();
	};
	setAutoTimeout();
	var invokeGetData = function() {
		wls.writeLog('Wywołanie invokeGetData');
		return startupService.getData().then(result => {
			use

			userData.era = user_data.era.era;
			userData.eraName = eraService.getEraName(user_data.era.era);
			isLogged = true;
			return staticDataService.retrieveMetaData('city_entities').then(bldDefArray => {
				definitionService.setBuildingDefinitions(bldDefArray);
				return result;
			});
		});
	};
	var deleteBuilding = (query) => {
		return cityMapService.removeBuilding(query.bldId).then(() => ({status: 'OK'}));
	};
	var processAutomaticActions = function() {
		return util.getEmptyPromise({})
			.then(cityProductionService.process)
			.then(otherPlayerService.process)
			.then(hiddenRewardService.process)
			.then(researchService.process)
			.then(greatBuildingsService.process)
			.then(tradeService.process)
			.then(campaignService.process)
			.then(cityMapService.process)
			.then(resourceService.process)
			.then(treasureHuntService.process)
			.then(friendsTavernService.process)
			.then(cityResourcesService.process);
	};
	var resumeAccount = function() {
		wls.writeLog('Wyłączam

		paused = false;
		return util.getEmptyPromise({
			status: 'OK'
		});
	};
	var pauseAccount = function() {
		wls.writeLog('Włączam pauzę');
		paused = true;
		return util.getEmptyPromise({
			status: 'OK'
		});
	};
	var getBasePath = () => {
		return apiHelper.getBasePath();
	};
	var getDefinitions = function() {
		if (!userData) {
			return util.getEmptyPromise({});
		}
		return util.getEmptyPromise({
			city_entities: definitionService.getDefinitions().buildings,
			resDefinitions: definitionService.getDefinitions().resources,
			basePath: getBasePath(),
			iconFilenameMappings: iconFilenameMappings.data,
			nameMappingPl: nameMappingPl.data
		});
	};
	var getAccountData = function() {
		if (!userData) {
			return util.getEmptyPromise({});
		}
		return util.getEmptyPromise({
			buildingList: cityMapService.getBuildingList(),
			resourceList: cityResourcesService.getResourceListUnion(),
			settings: userData.settings || {},
			paused: paused,
			researchArray: researchService.getRe
function ViewShowList(rpc) {
	this.rpc = rpc;
	this.showItemList = new ViewShowItemList(rpc);
	this.$showSelectDropdown = $( "#showselect" );
	this.selectedShow = "";
	this.$containerHtmlPart = $("#agenda");
	this.$htmlPart = $("#showselect");
	this.rpcProxy = this.rpc.ViewShowListRpc;
	this.activateView();
ViewShowList.prototype.initView = function() {
	var me = this;
	this.$showSelectDropdown.multiselect({
		multiple: false,
		header: false,
		noneSelectedText: "- Select Show -",
		selectedList: 1
	});
	this.$showSelectDropdown.bind("multiselectclick", function(event, ui){
		me.selectShow(ui.value);
	});
	this.showItemList.initView();
ViewShowList.prototype.activateView = function() {
	this.$containerHtmlPart.append(this.$htmlPart);
	this.$htmlPart.show();
ViewShowList.prototype.selectShow = function(id) {
	this.showItemList.displayShow(id);
ViewShowList.prototype.reloadShowList = function() {
	var me = this;
	this.rpcProxy.getAllShows('', function(jsonRpcObj) {
		console.log(jsonRpc
angular.module('messageCenter', []).
factory('messageService', function ($rootScope) {
    var messageCenter = {};
    messageCenter.counter = 0;
    messageCenter.messageItems = [];
    messageCenter.prepForBroadcast = function (msg) {
        this.counter++;
        var messageItem = {};
        messageItem.message = msg;
        messageItem.id = this.counter;
        this.messageItems.push(messageItem);
        this.broadcastItem();
    };
    messageCenter.broadcastItem = function () {
        $rootScope.$broadcast('handleBroadcast');
    };
    messageCenter.removeItem = function (messageItem) {
        this.messageItems.splice(messageItem, 1);
    };
    return messageCenter;
}).
directive('messageCenter', function (messageService) {
    return {
        restrict: 'E',
        scope: {},
        template: '<message ng-repeat="messageItem in messageItems"></message>',
        controller: function ($scope, $attrs, messageService) {
            $scope.$on('handleBroadcast', function
ndexApp.controller('apiController',
    [ 'ndexService', 'sharedProperties', '$scope', '$location', '$modal',
        function (ndexService, sharedProperties, $scope, $location, $modal) {
            $scope.api = {};
            var api = $scope.api;
            api.network = false;
            api.networkApiError = false;
            api.getNetworkApi = function()
            {
                ndexService.getNetworkApi(
                    function(methods)
                    {
                        api.network = methods;
                    },
                    function(error, data)
                    {
                        api.networkApiError = "Error while retrieving Network API";
                    })
            };
            api.getNetworkApi();
            api.user = false;
            api.userApiError = false;
            api.getUserApi = function()
            {
                ndexService.getUserApi(
                    function(methods)
                    {
    

                    },
                    function(error, data)
                    {
                        api.userApiError = "Error while retrieving User API";
                    })
            };
            api.getUserApi();
            api.group = false;
            api.groupApiError = false;
            api.getGroupApi = function()
            {
                ndexService.getGroupApi(
                    function(methods)
                    {
                        api.group = methods;
                    },
                    function(error, data)
                    {
                        api.userGroupError = "Error while retrieving User API";
                    })
            }
            api.getGroupApi();
            api.request = false;
            api.requestApiError = false;
            api.getRequestApi = function()
            {
                ndexService.getRequestApi(
                    function(methods)
                    {
                        ap
﻿var express = require('express');
var router = express.Router();
console.log(__dirname);
var homeController = require('../controllers/home_controller');
var adminController = require('../controllers/admin_controller');
var accountController = require('../controllers/account_controller');
var companyController = require('../controllers/company_controller');
var hardwareController = require('../controllers/hardware_controller');
var posController = require('../controllers/pos_controller');
var reportController = require('../controllers/report_controller');
var restaurantController = require('../controllers/restaurant_controller');
var systemController = require('../controllers/system_controller');
var userController = require('../controllers/user_controller');
router.use('/', homeController);
router.use('/account', accountController);
router.use('/admin', adminController);
router.use('/company', companyController);
router.use('/hardware', hardwareController);
router.use('/pos', posContr
Fields.SlideShow={
    edit:function(slideShowModel){
        ModalSlideShow.open(slideShowModel.id());
        
        ModalSlideShow.onSave=function(slideShowId){
            slideShowModel.jq.attr(Model.CTRL.DATA_MODEL_ID,slideShowId);
            slideShowModel.refresh();
            }
    }
Fields.SlideShow.CTRL={
    EDIT:"a[href='#Fields.SlideShow.edit']"
JQ.bo.on("click",Fields.SlideShow.CTRL.EDIT,function(e){
    e.preventDefault();
    var slideShowModel=Model.getParent($(this));
    Fields.SlideShow.edit(slideShowModel);
})
/*
*  this content it will be the new sldieshow later without ajax request and data insertion 
*  @author : francois
*/
/*
Fields.SlideShow={
    edit:function(block){
        
            
        var slideShow = block.find('[data-model-type]');
                
        var slideShowId = slideShow.attr("data-model-id");
        ModalSlideShow.open(slideShowId);
        
        ModalSlideShow.onSave=function(slideShowId){
            
            var sl

            
            if( slideShowContent.length > 0 ) {                        
                var blockType = $("<div/>", {
                "data-model-type":"SlideShow",
                "data-model-id":slideShowId
                })
                slideShowContent.html("");
                
                blockType.appendTo(slideShowContent);
                ModalSlideShow.ajaxTarget.find(".data-block-menu").clone().appendTo(slideShowContent);
                ModalSlideShow.ajaxTarget.find(".slideshow-edit-button").clone().appendTo(blockType);                        
                ModalSlideShow.ajaxTarget.find(".slides_container").clone().appendTo(blockType)
                blockType.find(".slides_container").find(".block-menu").addClass("hidden");
                blockType.find(".slideshow-edit-button").removeClass("hidden");                        
                blockType.appendTo(slideShowContent);                        
                slideShowContent.find(".data-
/**
* The main TodoMVC app module.
* @type {angular.Module}
*/
var forum;
(function (forum) {
    var forumApp = angular.module('forum', ['ngRoute', 'ngCookies', 'ngAnimate']).controller("HomeController", forum.HomeController).controller("LoginController", forum.LoginController).controller("ThreadController", forum.ThreadController).controller("StatisticController", forum.StatisticController);
    forumApp.config(function ($routeProvider) {
        $routeProvider.when('/', {
            templateUrl: 'partials/home.html',
            controller: 'HomeController'
        }).when('/login', {
            templateUrl: 'partials/login.html',
            controller: 'LoginController'
        }).when('/thread/:threadId', {
            templateUrl: 'partials/thread.html',
            controller: 'ThreadController'
        }).when('/statistic', {
            templateUrl: 'partials/statistic.html',
            controller: 'StatisticController'
        }).otherwise({
            redirectTo: '/logi
var express     = require('express'),
    api         = require('../api'),
    apiRoutes;
apiRoutes = function (middleware) {
    var router = express.Router();
    router.del = router.delete;
    router.get('/posts', api.http(api.posts.browse));
    router.post('/posts', api.http(api.posts.add));
    router.get('/posts/:id', api.http(api.posts.read));
    router.get('/posts/slug/:slug', api.http(api.posts.read));
    router.put('/posts/:id', api.http(api.posts.edit));
    router.del('/posts/:id', api.http(api.posts.destroy));
    router.get('/settings', api.http(api.settings.browse));
    router.get('/settings/:key', api.http(api.settings.read));
    router.put('/settings', api.http(api.settings.edit));
    router.get('/users', api.http(api.users.browse));
    router.get('/users/:id', api.http(api.users.read));
    router.get('/users/slug/:slug', api.http(api.users.read));
    router.get('/users/email/:email', api.http(api.users.read));
    router.put('/users/password', api.http(api.u

    router.put('/users/owner', api.http(api.users.transferOwnership));
    router.put('/users/:id', api.http(api.users.edit));
    router.post('/users', api.http(api.users.add));
    router.del('/users/:id', api.http(api.users.destroy));
    router.get('/tags', api.http(api.tags.browse));
    router.get('/roles/', api.http(api.roles.browse));
    router.get('/slugs/:type/:name', api.http(api.slugs.generate));
    router.get('/themes', api.http(api.themes.browse));
    router.put('/themes/:name', api.http(api.themes.edit));
    router.get('/notifications', api.http(api.notifications.browse));
    router.post('/notifications', api.http(api.notifications.add));
    router.del('/notifications/:id', api.http(api.notifications.destroy));
    router.get('/db', api.http(api.db.exportContent));
    router.del('/db', api.http(api.db.deleteAllContent));
    router.post('/mail', api.http(api.mail.send));
    router.post('/mail/test', function (req, res) {
        api.settings.read('email').then(f

            req.body = { to: result.settings[0].value };
            api.http(api.mail.sendTest)(req, res);
        }).catch(function () {
            api.http(api.mail.sendTest)(req, res);
        });
    });
    router.post('/authentication/passwordreset',
        middleware.spamPrevention,
        api.http(api.authentication.generateResetToken)
    );
    router.put('/authentication/passwordreset', api.http(api.authentication.resetPassword));
    router.post('/authentication/invitation', api.http(api.authentication.acceptInvitation));
    router.post('/authentication/setup', api.http(api.authentication.setup));
    router.get('/authentication/setup', api.http(api.authentication.isSetup));
    router.post('/authentication/token',
        middleware.spamPrevention,
        middleware.addClientSecret,
        middleware.authenticateClient,
        middleware.generateAccessToken
    );
    router.post('/uploads', middleware.busboy, api.http(api.uploads.add));
    return router;
};
modu
		
		var oNav=document.querySelector('.nav');
		
		setInterval(
			function(){
				var os_Top = document.documentElement.scrollTop || document.body.scrollTop;
				if(os_Top>183){
					oNav.style.position='fixed';
					oNav.style.top=0;
					$('.main-banner').css({'margin-top':'52px'});
				}else{
					oNav.style.position='static';
					$('.main-banner').css({'margin-top':'0px'});
				}
				},10
		);
							
		
		(
			window.onresize=function(){
				var nav_menu=document.querySelector('.nav-menu');
				var nav_menu_li_a=document.querySelectorAll('.nav-menu li a');
				var nav_front=document.querySelectorAll('.nav .front');
				var nav_back=document.querySelectorAll('.nav .back');
				
				var nav_padding_l_r=nav_menu.offsetWidth*0.0124+'px';
				
				var nav_width=nav_menu.offsetWidth*0.1+'px';
				
				for(var i=0,len=nav_menu_li_a.length;i<len;i++){
					
					nav_menu_li_a[i].style.width=nav_width;
					
					nav_menu_li_a[i].style.paddingLeft=nav_padding_l_r;
					nav_menu_li_a[i].s
var HideNSFW = (function ($) {
	var show_nsfw = false, link,
		linkText = function () {
			return (show_nsfw ? 'Hide' : 'Show') + ' NSFW';
		},
		getClass = function () {
			return show_nsfw ? '.down' : '.up';
		};
	kango.invokeAsync('kango.storage.getItem', 'show_nsfw', function (show) {
		var old_show = show_nsfw;
		if (show !== null) {
			show_nsfw = show;
			if (old_show !== show_nsfw && link) {
				link.text(linkText());
			}
		}
	});
	return {
		init: function (app) {
			var items = document.getElementsByClassName('nsfw-stream-item'),
				item_count = items.length,
				toggle_nsfw = function (items) {
					$(items).find(getClass() + ':first').each(function () {
						this.click();
					});
				};
			link = $('<a href="#" id="toggle_nsfw" />')
					.text(linkText());
			link.click(function (e) {
				e.preventDefault();
				show_nsfw = !show_nsfw;
				kango.invokeAsync('kango.storage.setItem', 'show_nsfw', show_nsfw);
				$(this).text((show_nsfw ? 'Hide' : 'Show') + ' NSFW');
				t
﻿(function () {
  'use strict';
  var express = require('express');
  var router = express.Router();
  var UserController = require('./../controller/UserController');
  var PostController = require('./../controller/PostController');
  var RatingController = require('./../controller/RatingController');
  var CommentController = require('./../controller/CommentController');
  var CommentRatingController = require('./../controller/CommentRatingController');
  var routeController = function (path, Controller, io) {
    Controller.repository.handleUpdates(io.of(path));
    router.get(path, function (req, res) {
      var controller = new Controller();
      controller.req = req;
      controller.res = res;
      controller.getAll();
    });
    router.post(path, function (req, res) {
      var controller = new Controller();
      controller.req = req;
      controller.res = res;
      controller.post(req.body.data);
    });
    router.get(path + '/:id', function (req, res) {
      var id = 
/*
 * 	@author Tapani Jamsa
 */
Director = function() {
	this.setScreen(DirectorScreens.menu);
};
DirectorScreens = {
	menu: 0,
	setup: 1,
	roomBrowser: 2,
	lobby: 3,
	controls: 4,
	game: 5,
	gameMenu: 6,
	gameover: 7
};
Director.prototype.setScreen = function(newScreen) {
	if (this.screen != newScreen) {
		$("#onlineButton").hide();
		$("#offlineButton").hide();
		$("#title").hide();
		$("#okButton").hide();
		$("#helpOnline").hide();
		$("#helpOffline").hide();
		$("#gameMenuButton").hide();
		$("#infoButton").hide();
		$("#continueButton").hide();
		$("#replayButton").hide();
		$("#menuButton").hide();
		$("#playersInfo").hide();
		this.currentScreen = newScreen;
		switch (this.currentScreen) {
				$("#onlineButton").show();
				$("#offlineButton").show();
				$("#title").show();
				$("#infoButton").show();
				break;
				break;
				break;
				break;
				console.log("controls");
				$("#okButton").show();
				if (p2pCtrl.netRole === null) {
					$("#helpOffline").show();
					gui.o
var LookupServiceUtils = require('../service/LookupServiceUtils');
var LookupServiceConst = require('../service/lookup_service/LookupServiceConst');
var LookupServiceTransform = require('../service/lookup_service/LookupServiceTransform');
var ListServiceAugmenter = require('../service/list_service/ListServiceAugmenter');
var AugmenterLookup = require('../service/list_service/AugmenterLookup');
var BestLabelConfig = require('../sparql/BestLabelConfig');
var ListServiceBbox = require('./ListServiceBbox');
var DataServiceBboxCache = require('./DataServiceBboxCache');
var LookupServiceUtils = require('../sponate/LookupServiceUtils');
var MappedConceptUtils = require('../sponate/MappedConceptUtils');
var GeoDataSourceUtils = {
    /**
     *
     * @param attrs Additional static attributes, such as style information
     */
    createGeoDataSourceLabels: function(sparqlService, geoMapFactory, concept, attrs) {
        if(attrs == null) {
            attrs = {};
        }
        var bboxLis
define(function(){
    'use strict';
    return {
        INFO                        : 'INFO',
        WARNING                     : 'WARNING',
        ERROR                       : 'ERROR',
        YES_NO                      : 'YES_NO',
        RETRY_CANCEL                : 'RETRY_CANCEL',
        RETRY_ABORT_CANCEL          : 'RETRY_ABORT_CANCEL',
        CUSTOM                      : 'CUSTOM',
        CUSTOM_CANCEL               : 'CUSTOM_CANCEL',
        SHOW_INFO                   : 'SHOW_INFO',
        SHOW_WARNING                : 'SHOW_WARNING',
        SHOW_ERROR                  : 'SHOW_ERROR',
        SHOW_POPUP_INFO             : 'SHOW_POPUP_INFO',
        SHOW_POPUP_WARNING          : 'SHOW_POPUP_WARNING',
        SHOW_POPUP_ERROR            : 'SHOW_POPUP_ERROR',
        SHOW_POPUP_RETRY            : 'SHOW_POPUP_RETRY',
        SHOW_POPUP_RETRY_ABORT      : 'SHOW_POPUP_RETRY_ABORT',
        SHOW_POPUP_YES_NO           : 'SHOW_POPUP_YES_NO',
        SHOW_POPUP_CUSTOM     
var express     = require('express'),
    api         = require('../api'),
    apiRoutes;
apiRoutes = function (middleware) {
    var router = express.Router();
    router.del = router.delete;
    router.get('/posts', api.http(api.posts.browse));
    router.post('/posts', api.http(api.posts.add));
    router.get('/posts/:id', api.http(api.posts.read));
    router.get('/posts/slug/:slug', api.http(api.posts.read));
    router.put('/posts/:id', api.http(api.posts.edit));
    router.del('/posts/:id', api.http(api.posts.destroy));
    router.get('/settings', api.http(api.settings.browse));
    router.get('/settings/:key', api.http(api.settings.read));
    router.put('/settings', api.http(api.settings.edit));
    router.get('/users', api.http(api.users.browse));
    router.get('/users/:id', api.http(api.users.read));
    router.get('/users/slug/:slug', api.http(api.users.read));
    router.get('/users/email/:email', api.http(api.users.read));
    router.put('/users/password', api.http(api.u

    router.put('/users/owner', api.http(api.users.transferOwnership));
    router.put('/users/:id', api.http(api.users.edit));
    router.post('/users', api.http(api.users.add));
    router.del('/users/:id', api.http(api.users.destroy));
    router.get('/postType', api.http(api.postType.browse));
    router.get('/tags', api.http(api.tags.browse));
    router.get('/postTypes', api.http(api.postType.browse));
    router.get('/roles/', api.http(api.roles.browse));
    router.get('/slugs/:type/:name', api.http(api.slugs.generate));
    router.get('/themes', api.http(api.themes.browse));
    router.put('/themes/:name', api.http(api.themes.edit));
    router.get('/notifications', api.http(api.notifications.browse));
    router.post('/notifications', api.http(api.notifications.add));
    router.del('/notifications/:id', api.http(api.notifications.destroy));
    router.get('/db', api.http(api.db.exportContent));
    router.del('/db', api.http(api.db.deleteAllContent));
    router.post('/mail'
(function($, ko) {
	'use strict';
	function navMenuItem(text, url, subNavMenu) {
		var self = {
			text: ko.observable(text),
			url: ko.observable(url ? url : '#'),
			subNavMenu: ko.observable(subNavMenu)
		};
		return self;
	};
	function navMenu(navMenuItems) {
		return {
			navMenuItems: ko.observableArray(navMenuItems),
			displayTemplate: function(navMenuItem) {
				return (navMenuItem.subNavMenu() && navMenuItem.subNavMenu().navMenuItems() && navMenuItem.subNavMenu().navMenuItems().length > 0) ? "complexNavMenuTemplate" : "singleNavMenuTemplate";
			}
		};
	};
	/*
	var globalNavMenu = navMenu([
		new navMenuItem("MVC"),
		new navMenuItem("Client", "#", navMenu([
			new navMenuItem("CSS"),
			new navMenuItem("JavaScript", "#", navMenu([
				new navMenuItem("jQuery"),
				new navMenuItem("knockout.js")
			])),
			new navMenuItem("HTML")
		]))
	]);
 	*/
	var globalNavMenu = navMenu([
		new navMenuItem("MVC"),
		new navMenuItem("Client", "#", navMenu([
			new navMenuItem("CSS"),
			
window.serviceCodes = [ 
{ code:"1", service: "Medical Care" },
{ code:"2", service: "Surgical" },
{ code:"3", service: "Consultation" },
{ code:"4", service: "Diagnostic X-Ray" },
{ code:"5", service: "Diagnostic Lab" },
{ code:"6", service: "Radiation Therapy" },
{ code:"7", service: "Anesthesia" },
{ code:"8", service: "Surgical Assistance" },
{ code:"9", service: "Other Medical" },
{ code:"10", service: "Blood Charges" },
{ code:"11", service: "Used Durable Medical Equipment" },
{ code:"12", service: "Durable Medical Equipment Purchase" },
{ code:"13", service: "Ambulatory Service Center Facility" },
{ code:"14", service: "Renal Supplies in the Home" },
{ code:"15", service: "Alternate Method Dialysis" },
{ code:"16", service: "Chronic Renal Disease (CRD) Equipment" },
{ code:"17", service: "Pre-Admission Testing" },
{ code:"18", service: "Durable Medical Equipment Rental" },
{ code:"19", service: "Pneumonia Vaccine" },
{ code:"20", service: "Second Surgical Opinion" },
{ code:"21"

{ code:"22", service: "Social Work" },
{ code:"23", service: "Diagnostic Dental" },
{ code:"24", service: "Periodontics" },
{ code:"25", service: "Restorative" },
{ code:"26", service: "Endodontics" },
{ code:"27", service: "Maxillofacial Prosthetics" },
{ code:"28", service: "Adjunctive Dental Services" },
{ code:"30", service: "Health Benefit Plan Coverage" },
{ code:"31", service: "Benefit Disclaimer" },
{ code:"32", service: "Plan Waiting Period" },
{ code:"33", service: "Chiropractic" },
{ code:"34", service: "Chiropractic Office Visits" },
{ code:"35", service: "Dental Care" },
{ code:"36", service: "Dental Crowns" },
{ code:"37", service: "Dental Accident" },
{ code:"38", service: "Orthodontics" },
{ code:"39", service: "Prosthodontics" },
{ code:"40", service: "Oral Surgery" },
{ code:"41", service: "Routine Preventive Dental" },
{ code:"42", service: "Home Health Care" },
{ code:"43", service: "Home Health Prescriptions" },
{ code:"44", service: "Home Health Visits" },
{ code

{ code:"46", service: "Respite Care" },
{ code:"47", service: "Hospital" },
{ code:"48", service: "Hospital - Inpatient" },
{ code:"49", service: "Hospital - Room and Board" },
{ code:"50", service: "Hospital - Outpatient" },
{ code:"51", service: "Hospital - Emergency Accident" },
{ code:"52", service: "Hospital - Emergency Medical" },
{ code:"53", service: "Hospital - Ambulatory Surgical" },
{ code:"54", service: "Long Term Care" },
{ code:"55", service: "Major Medical" },
{ code:"56", service: "Medically Related Transportation" },
{ code:"57", service: "Air Transportation" },
{ code:"58", service: "Cabulance" },
{ code:"59", service: "Licensed Ambulance" },
{ code:"60", service: "General Benefits" },
{ code:"61", service: "In-vitro Fertilization" },
{ code:"62", service: "MRI/CAT Scan" },
{ code:"63", service: "Donor Procedure" },
{ code:"64", service: "Acupuncture" },
{ code:"65", service: "Newborn Care" },
{ code:"66", service: "Pathology" },
{ code:"67", service: "Smoking Cessat

{ code:"68", service: "Well Baby Care" },
{ code:"69", service: "Maternity" },
{ code:"70", service: "Transplants" },
{ code:"71", service: "Audiology Exam" },
{ code:"72", service: "Inhalation Therapy" },
{ code:"73", service: "Diagnostic Medical" },
{ code:"74", service: "Private Duty Nursing" },
{ code:"75", service: "Prosthetic Device" },
{ code:"76", service: "Dialysis" },
{ code:"77", service: "Otological Exam" },
{ code:"78", service: "Chemotherapy" },
{ code:"79", service: "Allergy Testing" },
{ code:"80", service: "Immunizations" },
{ code:"81", service: "Routine Physical" },
{ code:"82", service: "Family Planning" },
{ code:"83", service: "Infertility" },
{ code:"84", service: "Abortion" },
{ code:"85", service: "HIV - AIDS Treatment" },
{ code:"86", service: "Emergency Services" },
{ code:"87", service: "Cancer Treatment" },
{ code:"88", service: "Pharmacy" },
{ code:"89", service: "Free Standing Prescription Drug" },
{ code:"90", service: "Mail Order Prescription Drug" },


{ code:"92", service: "Generic Prescription Drug" },
{ code:"93", service: "Podiatry" },
{ code:"94", service: "Podiatry - Office Visits" },
{ code:"95", service: "Podiatry - Nursing Home Visits" },
{ code:"96", service: "Professional (Physician)" },
{ code:"97", service: "Anesthesiologist" },
{ code:"98", service: "Professional (Physician) Visit - Office" },
{ code:"99", service: "Professional (Physician) Visit - Inpatient" },
{ code:"A0", service: "Professional (Physician) Visit - Outpatient" },
{ code:"A1", service: "Professional (Physician) Visit - Nursing Home" },
{ code:"A2", service: "Professional (Physician) Visit - Skilled Nursing Facility" },
{ code:"A3", service: "Professional (Physician) Visit - Home" },
{ code:"A4", service: "Psychiatric" },
{ code:"A5", service: "Psychiatric - Room and Board" },
{ code:"A6", service: "Psychotherapy" },
{ code:"A7", service: "Psychiatric - Inpatient" },
{ code:"A8", service: "Psychiatric - Outpatient" },
{ code:"A9", service: "Rehabilitat

{ code:"AA", service: "Rehabilitation - Room and Board" },
{ code:"AB", service: "Rehabilitation - Inpatient" },
{ code:"AC", service: "Rehabilitation - Outpatient" },
{ code:"AD", service: "Occupational Therapy" },
{ code:"AE", service: "Physical Medicine" },
{ code:"AF", service: "Speech Therapy" },
{ code:"AG", service: "Skilled Nursing Care" },
{ code:"AH", service: "Skilled Nursing Care - Room and Board" },
{ code:"AI", service: "Substance Abuse" },
{ code:"AJ", service: "Alcoholism Treatment" },
{ code:"AK", service: "Drug Addiction" },
{ code:"AL", service: "Optometry Vision" },
{ code:"AM", service: "Frames" },
{ code:"AN", service: "Routine Exam" },
{ code:"AO", service: "Lenses" },
{ code:"AP", service: "Routine Eye Exam" },
{ code:"AQ", service: "Nonmedically Necessary Physical" },
{ code:"AR", service: "Experimental Drug Therapy" },
{ code:"B1", service: "Burn Care" },
{ code:"B2", service: "Brand Name Prescription Drug - Formulary" },
{ code:"B3", service: "Brand Name Pre

{ code:"BA", service: "Independent Medical Evaluation" },
{ code:"BB", service: "Psychiatric Treatment Partial Hospitalization" },
{ code:"BC", service: "Day Care (Psychiatric)" },
{ code:"BD", service: "Cognitive Therapy" },
{ code:"BE", service: "Massage Therapy" },
{ code:"BF", service: "Pulmonary Rehabilitation" },
{ code:"BG", service: "Cardiac Rehabilitation" },
{ code:"BH", service: "Pediatric" },
{ code:"BI", service: "Nursery Room and Board" },
{ code:"BJ", service: "Skin" },
{ code:"BK", service: "Orthopedic" },
{ code:"BL", service: "Cardiac" },
{ code:"BM", service: "Lymphatic" },
{ code:"BN", service: "Gastrointestinal" },
{ code:"BP", service: "Endocrine" },
{ code:"BQ", service: "Neurology" },
{ code:"BR", service: "Eye" },
{ code:"BS", service: "Invasive Procedures" },
{ code:"BT", service: "Gynecological" },
{ code:"BU", service: "Obstetrical" },
{ code:"BV", service: "Obstetrical/Gynecological" },
{ code:"BW", service: "Mail Order Prescription Drug: Brand Name" },
{ 

{ code:"BY", service: "Physician Visit - Sick" },
{ code:"BZ", service: "Physician Visit - Well" },
{ code:"C1", service: "Coronary Care" },
{ code:"CA", service: "Private Duty Nursing - Inpatient" },
{ code:"CB", service: "Private Duty Nursing - Home" },
{ code:"CC", service: "Surgical Benefits - Professional (Physician)" },
{ code:"CD", service: "Surgical Benefits - Facility" },
{ code:"CE", service: "Mental Health Provider - Inpatient" },
{ code:"CF", service: "Mental Health Provider - Outpatient" },
{ code:"CG", service: "Mental Health Facility - Inpatient" },
{ code:"CH", service: "Mental Health Facility - Outpatient" },
{ code:"CI", service: "Substance Abuse Facility - Inpatient" },
{ code:"CJ", service: "Substance Abuse Facility - Outpatient" },
{ code:"CK", service: "Screening X-ray" },
{ code:"CL", service: "Screening laboratory" },
{ code:"CM", service: "Mammogram, High Risk Patient" },
{ code:"CN", service: "Mammogram, Low Risk Patient" },
{ code:"CO", service: "Flu Vaccina

{ code:"CP", service: "Eyewear Accessories" },
{ code:"CQ", service: "Case Management" },
{ code:"DG", service: "Dermatology" },
{ code:"DM", service: "Durable Medical Equipment" },
{ code:"DS", service: "Diabetic Supplies" },
{ code:"GF", service: "Generic Prescription Drug - Formulary" },
{ code:"GN", service: "Generic Prescription Drug - Non-Formulary" },
{ code:"GY", service: "Allergy" },
{ code:"IC", service: "Intensive Care" },
{ code:"MH", service: "Mental Health" },
{ code:"NI", service: "Neonatal Intensive Care" },
{ code:"ON", service: "Oncology" },
{ code:"PT", service: "Physical Therapy" },
{ code:"PU", service: "Pulmonary" },
{ code:"RN", service: "Renal" },
{ code:"RT", service: "Residential Psychiatric treatment" },
{ code:"TC", service: "Transitional Care" },
{ code:"TN", service: "Transitional Nursery Care" },
{ code:"UC", service: "Urgent Care" },
{ code:"E0", service: "Allied Behavioral Analysis Therapy" },
{ code:"E1", service: "Non-Medical Equipment (non DME)" },

'use strict';
tatool
  .controller('letterKeepTrackCtrl', [ '$scope', 'service',
    function ($scope, service) {
    $scope.gridService = service.gridService;
    $scope.inputService = service.inputService;
    $scope.start = function() {
      service.setPhase('ENCODING');
      service.gridService.clear().refresh();
      service.gridService.resize(1,5).redraw();
      encodingPhase();
    };
    function encodingPhase() {
      service.setPhase('UPDATING');
      service.createStimulus();
      service.setEncodingStimuli();
      service.gridService.refresh();
      service.gridService.show();
      service.timerDisplayEncoding.start(encodingTimeUp);
    }
    function encodingTimeUp() {
      service.gridService.clear().refresh();
      service.timerIntervalEncoding.start(updatingPhase);
    }
    function updatingPhase() {
      service.createStimulus();
      if (parseInt(service.stimulus['phase']) === 1 && parseInt(service.stimulus['step']) === 0) {
        service.setPhase('RE

        recallPhase();
      } else {
        service.setUpdatingStimuli();
        service.gridService.refresh();
        service.timerDisplayUpdating.start(updatingTimeUp);
      }
    }
    function updatingTimeUp() {
      service.gridService.clear().refresh();
      if (service.getPhase() === 'UPDATING') {
        service.timerIntervalUpdating.start(updatingPhase);
      } else {
        service.timerIntervalUpdating.start(recallPhase);
      }
    }
    function recallPhase() {
      service.createStimulus();
      service.setRecallStimuli();
      service.gridService.refresh();
      service.inputService.enable();
      service.startTime = service.gridService.show();
    }
    $scope.inputAction = function(input, timing, event) {
      service.inputService.disable();
      service.gridService.clear().refresh();
      service.processResponse(input.givenResponse, timing).then(nextStep);
    };
    function nextStep() {
      if (service.getPhase() === 'RECALL') {
        recallPh
define("api",[],function(require, exports, module) {
    require('jquery');
    API.URL = {};
    API.URL.host = "";
    API.URL.url_api = API.URL.host+"api/";
    API.URL.api_appendix = ".json";
    API.URL.url_web = API.URL.host+"";
    API.URL.url_get_templete = API.URL.url_api+"get_templete"+API.URL.api_appendix;
    API.URL.url_get_templete_category = API.URL.url_api+"get_templete_category"+API.URL.api_appendix;
    API.URL.url_get_templete_list = API.URL.url_api+"get_templete_list"+API.URL.api_appendix;
    API.URL.url_get_picture_category = API.URL.url_api+"get_picture_category"+API.URL.api_appendix;
    API.URL.url_get_picture_list = API.URL.url_api+"get_picture_list"+API.URL.api_appendix;
    API.URL.url_upload_picture = API.URL.url_api+"upload_picture"+API.URL.api_appendix;
    API.URL.url_generate_templete = API.URL.url_api+"generate_templete"+API.URL.api_appendix;
    function API() {
        this._init();
    }
    module.exports = API;
    API.prototype._init = function()
(function() {
    $(document).ready(function() {
        var body, content, nav, nav_closed_width, nav_open, nav_toggler;
        nav_toggler = $("header .toggle-nav");
        nav = $("#main-nav");
        content = $("#content");
        body = $("body");
        nav_closed_width = 50;
        nav_open = body.hasClass("main-nav-opened") || nav.width() > nav_closed_width;
        $("#main-nav .dropdown-collapse").on("click", function(e) {
            var link, list;
            e.preventDefault();
            link = $(this);
            list = link.parent().find("> ul");
            if (list.is(":visible")) {
                if (body.hasClass("main-nav-closed") && link.parents("li").length === 1) {
                    false;
                } else {
                    link.removeClass("in");
                    list.slideUp(300, function() {
                        return $(this).removeClass("in");
                    });
                }
            } else {
                link.ad

                list.slideDown(300, function() {
                    return $(this).addClass("in");
                });
            }
            return false;
        });
        /*
            nav.swiperight(function(event, touch) {
                return $(document).trigger("nav-open");
            });
            nav.swipeleft(function(event, touch) {
                return $(document).trigger("nav-close");
            });
        */
        nav_toggler.on("click", function() {
            if (nav_open) {
                $(document).trigger("nav-close");
            } else {
                $(document).trigger("nav-open");
            }
            return false;
        });
        $(document).bind("nav-close", function(event, params) {
            body.removeClass("main-nav-opened").addClass("main-nav-closed");
            return nav_open = false;
        });
        return $(document).bind("nav-open", function(event, params) {
            body.addClass("main-nav-opened").removeC
var searchData=
  ['facebookviewcontrollercancelwaspressed_3a',['facebookViewControllerCancelWasPressed:',['../protocol_f_b_view_controller_delegate-p.html#a74a71b01c98e6911975873de662da099',1,'FBViewControllerDelegate-p']]],
  ['facebookviewcontrollerdonewaspressed_3a',['facebookViewControllerDoneWasPressed:',['../protocol_f_b_view_controller_delegate-p.html#a1848f29fbf5c4c4deacc8e1e85f07980',1,'FBViewControllerDelegate-p']]],
  ['fblogin_3a',['fbLogin:',['../interface_f_l_view_controller.html#a1440d266d380812ff1ee4fd5f0e25b5a',1,'FLViewController']]],
  ['fblogout_3a',['fbLogout:',['../interface_f_l_did_login_view_controller.html#a9b4240cb61a559e6595c3c994391b127',1,'FLDidLoginViewController']]],
  ['fbviewcontroller',['FBViewController',['../interface_f_b_view_controller.html',1,'']]],
  ['fbviewcontrollerdelegate_2dp',['FBViewControllerDelegate-p',['../protocol_f_b_view_controller_delegate-p.html',1,'']]],
  ['flappdelegate',['FLAppDelegate',['../interface_f_l_app_delegate.html',1,
var searchData=
  ['nav_2ec',['nav.c',['../nav_8c.html',1,'']]],
  ['nav_2eh',['nav.h',['../nav_8h.html',1,'']]],
  ['nav_5fcatapult_2ec',['nav_catapult.c',['../nav__catapult_8c.html',1,'']]],
  ['nav_5fcatapult_2eh',['nav_catapult.h',['../nav__catapult_8h.html',1,'']]],
  ['nav_5fcube_2ec',['nav_cube.c',['../nav__cube_8c.html',1,'']]],
  ['nav_5fcube_2eh',['nav_cube.h',['../nav__cube_8h.html',1,'']]],
  ['nav_5fline_2ec',['nav_line.c',['../nav__line_8c.html',1,'']]],
  ['nav_5fline_2eh',['nav_line.h',['../nav__line_8h.html',1,'']]],
  ['nav_5fpoles_2ec',['nav_poles.c',['../nav__poles_8c.html',1,'']]],
  ['nav_5fpoles_2eh',['nav_poles.h',['../nav__poles_8h.html',1,'']]],
  ['nav_5fsurvey_5frectangle_2ec',['nav_survey_rectangle.c',['../nav__survey__rectangle_8c.html',1,'']]],
  ['nav_5fsurvey_5frectangle_2eh',['nav_survey_rectangle.h',['../nav__survey__rectangle_8h.html',1,'']]],
  ['navdata_2ec',['navdata.c',['../navdata_8c.html',1,'']]],
  ['navdata_2eh',['navdata.h',['../navdata_8h.h
var express     = require('express'),
    api         = require('../api'),
    apiRoutes;
apiRoutes = function apiRoutes(middleware) {
    var router = express.Router(),
        authenticatePublic = [
            middleware.api.authenticateClient,
            middleware.api.authenticateUser,
            middleware.api.requiresAuthorizedUserPublicAPI
        ],
        authenticatePrivate = [
            middleware.api.authenticateClient,
            middleware.api.authenticateUser,
            middleware.api.requiresAuthorizedUser
        ];
    router.del = router.delete;
    router.get('/configuration', authenticatePrivate, api.http(api.configuration.browse));
    router.get('/configuration/:key', authenticatePrivate, api.http(api.configuration.read));
    router.get('/posts', authenticatePublic, api.http(api.posts.browse));
    router.post('/posts', authenticatePrivate, api.http(api.posts.add));
    router.get('/posts/:id', authenticatePublic, api.http(api.posts.read));
    router.g

    router.put('/posts/:id', authenticatePrivate, api.http(api.posts.edit));
    router.del('/posts/:id', authenticatePrivate, api.http(api.posts.destroy));
    router.get('/settings', authenticatePrivate, api.http(api.settings.browse));
    router.get('/settings/:key', authenticatePrivate, api.http(api.settings.read));
    router.put('/settings', authenticatePrivate, api.http(api.settings.edit));
    router.get('/users', authenticatePublic, api.http(api.users.browse));
    router.get('/users/:id', authenticatePublic, api.http(api.users.read));
    router.get('/users/slug/:slug', authenticatePublic, api.http(api.users.read));
    router.get('/users/email/:email', authenticatePublic, api.http(api.users.read));
    router.put('/users/password', authenticatePrivate, api.http(api.users.changePassword));
    router.put('/users/owner', authenticatePrivate, api.http(api.users.transferOwnership));
    router.put('/users/:id', authenticatePrivate, api.http(api.users.edit));
    router.post('/u

    router.del('/users/:id', authenticatePrivate, api.http(api.users.destroy));
    router.get('/tags', authenticatePublic, api.http(api.tags.browse));
    router.get('/tags/:id', authenticatePublic, api.http(api.tags.read));
    router.get('/tags/slug/:slug', authenticatePublic, api.http(api.tags.read));
    router.post('/tags', authenticatePrivate, api.http(api.tags.add));
    router.put('/tags/:id', authenticatePrivate, api.http(api.tags.edit));
    router.del('/tags/:id', authenticatePrivate, api.http(api.tags.destroy));
    router.get('/roles/', authenticatePrivate, api.http(api.roles.browse));
    router.get('/clients/slug/:slug', api.http(api.clients.read));
    router.get('/slugs/:type/:name', authenticatePrivate, api.http(api.slugs.generate));
    router.get('/themes', authenticatePrivate, api.http(api.themes.browse));
    router.put('/themes/:name', authenticatePrivate, api.http(api.themes.edit));
    router.get('/notifications', authenticatePrivate, api.http(api.notificatio

    router.post('/notifications', authenticatePrivate, api.http(api.notifications.add));
    router.del('/notifications/:id', authenticatePrivate, api.http(api.notifications.destroy));
    router.get('/db', authenticatePrivate, api.http(api.db.exportContent));
    router.del('/db', authenticatePrivate, api.http(api.db.deleteAllContent));
    router.post('/mail', authenticatePrivate, api.http(api.mail.send));
    router.post('/mail/test', authenticatePrivate, api.http(api.mail.sendTest));
    router.post('/authentication/passwordreset',
        middleware.spamPrevention.forgotten,
        api.http(api.authentication.generateResetToken)
    );
    router.put('/authentication/passwordreset', api.http(api.authentication.resetPassword));
    router.post('/authentication/invitation', api.http(api.authentication.acceptInvitation));
    router.get('/authentication/invitation', api.http(api.authentication.isInvitation));
    router.post('/authentication/setup', api.http(api.authentication.setu
function slideIn(pixelsPerMs, speedInMs) {
	var nav = document.getElementById("nav-container");
	var navPos = getStyleIntPxValue(nav, "right");
	nav.style.right = navPos + "px";
	var intervalId = setInterval(function() {
		if (navPos < 0) {
			navPos += pixelsPerMs;
			nav.style.right = navPos + "px";
		}
		else {
			clearInterval(intervalId);
			console.log("slideIn interval cleared");
		}
	}, speedInMs);
	disableScrollModule.disableScroll();
function slideOut(pixelsPerMs, speedInMs) {
	var nav = document.getElementById("nav-container");
	var navPos = getStyleIntPxValue(nav, "right");
	nav.style.right = navPos + "px";
	var intervalId = setInterval(function() {
		if (navPos > -(nav.clientWidth)) {
			navPos -= pixelsPerMs;
			nav.style.right = navPos + "px";
		}
		else {
			clearInterval(intervalId);
			console.log("slideOut interval cleared");
		}
	}, speedInMs);
	disableScrollModule.enableScroll();
function toggleNavSlide() {
	var nav = document.getElementById("nav-container");
	if (
var test_PrefsContentTab = function() {
  var controller = mozmill.getPreferencesController();
  controller.click(new elementslib.Elem( controller.tabs.Content.button ));
  controller.sleep(1000);
  e = new elementslib.ID(controller.window.document, 'popupPolicy')
  controller.waitForElement(e);
  controller.click(e);
  controller.sleep(1000);
  controller.click(new elementslib.ID(controller.window.document, 'loadImages'));
  controller.sleep(1000);
  controller.click(new elementslib.ID(controller.window.document, 'enableJavaScript'));
  controller.sleep(1000);
  controller.click(new elementslib.ID(controller.window.document, 'enableJava'));
  controller.sleep(1000);
var test_GoogleDotCom = function () {
  var controller = mozmill.getBrowserController();
  controller.window.focus();
  controller.sleep(2000);
  controller.type(new elementslib.Name(controller.window.content.document, 'q'), 'Mozilla');
  controller.assertValue(new elementslib.Name(controller.window.content.document, 'q'),

  controller.sleep(2000);
  controller.click(new elementslib.Name(controller.window.content.document, 'btnG'));
  controller.sleep(2000);
var test_mozillaorg = function () {
  var controller = mozmill.getBrowserController();
  controller.window.focus();
  controller.sleep(5000);
  controller.type(new elementslib.Name(controller.window.content.document, 'q'), 'QA');
  controller.waitForElement(new elementslib.Name(controller.window.content.document, 'q'));
  controller.click(new elementslib.ID(controller.window.content.document, 'submit'));
  controller.sleep(3000);
  controller.click(new elementslib.Link(controller.window.content.document, 'Mozilla'));
  controller.sleep(2000);
  controller.waitForElement(new elementslib.Link(controller.window.content.document, 'Tools'));
  controller.click(new elementslib.Link(controller.window.content.document, 'Tools'));
  controller.waitForElement(new elementslib.ID(controller.window.content.document, 'searchInput'));
  controller.type(new element
goog.provide('cljs.core.async.impl.dispatch');
goog.require('cljs.core');
goog.require('cljs.core.constants');
goog.require('cljs.core.async.impl.buffers');
goog.require('goog.async.nextTick');
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer((32));
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = (1024);
cljs.core.async.impl.dispatch.process_messages = (function cljs$core$async$impl$dispatch$process_messages(){
cljs.core.async.impl.dispatch.running_QMARK_ = true;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
var count_12962 = (0);
while(true){
var m_12963 = cljs.core.async.impl.dispatch.tasks.pop();
if((m_12963 == null)){
} else {
(m_12963.cljs$core$IFn$_invoke$arity$0 ? m_12963.cljs$core$IFn$_invoke$arity$0() : m_12963.call(null));
if((count_12962 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE)){
var G__12964 = (count_12962 + (1));
count_1296

continue;
} else {
break;
cljs.core.async.impl.dispatch.running_QMARK_ = false;
if((cljs.core.async.impl.dispatch.tasks.length > (0))){
return (cljs.core.async.impl.dispatch.queue_dispatcher.cljs$core$IFn$_invoke$arity$0 ? cljs.core.async.impl.dispatch.queue_dispatcher.cljs$core$IFn$_invoke$arity$0() : cljs.core.async.impl.dispatch.queue_dispatcher.call(null));
} else {
return null;
});
cljs.core.async.impl.dispatch.queue_dispatcher = (function cljs$core$async$impl$dispatch$queue_dispatcher(){
if((cljs.core.async.impl.dispatch.queued_QMARK_) && (cljs.core.async.impl.dispatch.running_QMARK_)){
return null;
} else {
cljs.core.async.impl.dispatch.queued_QMARK_ = true;
return goog.async.nextTick(cljs.core.async.impl.dispatch.process_messages);
});
cljs.core.async.impl.dispatch.run = (function cljs$core$async$impl$dispatch$run(f){
cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
return cljs.core.async.impl.dispatch.queue_dispatcher();
});
cljs.core.async.impl.dispatch.queue_delay 
/**
 * Main application routes
 */
'use strict';
var errors = require('./components/errors');
module.exports = function(app) {
  app.use('/api/productionDesigners', require('./api/productionDesigner'));
  app.use('/api/laserdiscs', require('./api/laserdisc'));
  app.use('/api/literature', require('./api/literature'));
  app.use('/api/quotes', require('./api/quote'));
  app.use('/api/releaseDates', require('./api/releaseDate'));
  app.use('/api/productioncompanies', require('./api/productionCompany'));
  app.use('/api/plots', require('./api/plot'));
  app.use('/api/movieLinks', require('./api/movieLink'));
  app.use('/api/miscellaneous', require('./api/miscellaneous'));
  app.use('/api/soundMixes', require('./api/soundMix'));
  app.use('/api/soundtracks', require('./api/soundtrack'));
  app.use('/api/specialEffectsCompanies', require('./api/specialEffectsCompany'));
  app.use('/api/trivia', require('./api/trivia'));
  app.use('/api/taglines', require('./api/tagline'));
  app.use('/api/i

  app.use('/api/isoAkaTitles', require('./api/isoAkaTitle'));
  app.use('/api/germanAkaTitles', require('./api/germanAkaTitle'));
  app.use('/api/goofs', require('./api/goof'));
  app.use('/api/editors', require('./api/editor'));
  app.use('/api/distributors', require('./api/distributor'));
  app.use('/api/crazyCredits', require('./api/crazyCredit'));
  app.use('/api/costumeDesigners', require('./api/costumeDesigner'));
  app.use('/api/composers', require('./api/composer'));
  app.use('/api/completeCrew', require('./api/completeCrew'));
  app.use('/api/completeCast', require('./api/completeCast'));
  app.use('/api/cinematographers', require('./api/cinematographer'));
  app.use('/api/certificates', require('./api/certificate'));
  app.use('/api/alternateVersions', require('./api/alternateVersion'));
  app.use('/api/akaNames', require('./api/akaName'));
  app.use('/api/akaTitles', require('./api/akaTitle'));
  app.use('/api/writers', require('./api/writer'));
  app.use('/api/locations',

  app.use('/api/runningTimes', require('./api/runningTime'));
  app.use('/api/technicals', require('./api/technical'));
  app.use('/api/languages', require('./api/language'));
  app.use('/api/colors', require('./api/color'));
  app.use('/api/genres', require('./api/genre'));
  app.use('/api/countries', require('./api/country'));
  app.use('/api/businesses', require('./api/business'));
  app.use('/api/keywords', require('./api/keyword'));
  app.use('/api/producers', require('./api/producer'));
  app.use('/api/ratings', require('./api/rating'));
  app.use('/api/directors', require('./api/director'));
  app.use('/api/actors', require('./api/actor'));
  app.use('/api/actresses', require('./api/actress'));
  app.use('/api/mpaaRatingsReasons', require('./api/mpaaRatingsReason'));
  app.use('/api/movies', require('./api/movie'));
  app.use('/api/things', require('./api/thing'));
  app.use('/api/users', require('./api/user'));
  app.use('/auth', require('./auth'));
  
  app.route('/:url(api|a
d3.dispatch = function() {
  var dispatch = new d3_dispatch(),
      i = -1,
      n = arguments.length;
  while (++i < n) dispatch[arguments[i]] = d3_dispatch_event();
  return dispatch;
};
function d3_dispatch() {}
d3_dispatch.prototype.on = function(type, listener) {
  var i = type.indexOf("."),
      name = "";
  if (i > 0) {
    name = type.substring(i + 1);
    type = type.substring(0, i);
  }
  return arguments.length < 2
      ? this[type].on(name)
      : (this[type].on(name, listener), this);
};
function d3_dispatch_event() {
  var listeners = [],
      listenerByName = {};
  function dispatch() {
        i = -1,
        n = z.length,
        l;
    while (++i < n) if (l = z[i].on) l.apply(this, arguments);
  }
  dispatch.on = function(name, listener) {
    var l, i;
    if (arguments.length < 2) return (l = listenerByName[name]) && l.on;
    if (l = listenerByName[name]) {
      l.on = null;
      listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slic
var initialized = false;
var options = {};
var showSteps = 'on';
var showSeconds = 'off';
var showBattery = 'on';
var updateInterval = 5;
Pebble.addEventListener("ready", function() {
  
  showSteps   = window.localStorage.getItem('showSteps')   ? window.localStorage.getItem('showSteps')   : 'on';
  showSeconds = window.localStorage.getItem('showSeconds') ? window.localStorage.getItem('showSeconds') : 'off';
  showBattery = window.localStorage.getItem('showBattery') ? window.localStorage.getItem('showBattery') : 'on';
  updateInterval = window.localStorage.getItem('updateInterval') ? window.localStorage.getItem('updateInterval') : 5;
  updateInterval = parseInt(updateInterval);
  initialized = true;
  console.log("ready called!" + showSteps + " - "+showSeconds+ " - "+updateInterval);
});
Pebble.addEventListener("showConfiguration", function() {
  console.log("showing configurationshowSteps="+showSteps+' &showSeconds='+showSeconds+' &showBattery='+showBattery);
});
Pebble.addEventListen

  console.log("configuration closed");
  
  if (e.response.charAt(0) == "{" && e.response.slice(-1) == "}" && e.response.length > 5) {
    options = JSON.parse(decodeURIComponent(e.response));
    
    showSteps = encodeURIComponent(options.SHOW_STEPS);
    window.localStorage.setItem('showSteps', showSteps);
    
    showSeconds = encodeURIComponent(options.SHOW_SECONDS);
    window.localStorage.setItem('showSeconds', showSeconds);
    
    showBattery = encodeURIComponent(options.SHOW_BATTERY);
    window.localStorage.setItem('showBattery', showBattery);
    
    updateInterval = parseInt(encodeURIComponent(options.UPDATE_INTERVAL));
    window.localStorage.setItem('updateInterval', updateInterval);
    var newOptions = {SHOW_STEPS:showSteps, SHOW_SECONDS:showSeconds, UPDATE_INTERVAL:updateInterval, SHOW_BATTERY:showBattery};
    
    console.log("Options = " + JSON.stringify(newOptions));
    
    Pebble.sendAppMessage(
      newOptions,
      function(e) {
        console.log("Sen
/**
 * Main application routes
 */
'use strict';
var errors = require('./components/errors');
var path = require('path');
var express = require('express');
var router = express.Router();
var controller = require('./api/message/message.controller');
module.exports = function(app) {
  app.use('/api/vikings', require('./api/viking'));
  app.use('/api/titans', require('./api/titan'));
  app.use('/api/texans', require('./api/texan'));
  app.use('/api/steelers', require('./api/steeler'));
  app.use('/api/seahawks', require('./api/seahawk'));
  app.use('/api/saints', require('./api/saint'));
  app.use('/api/redskins', require('./api/redskin'));
  app.use('/api/ravens', require('./api/raven'));
  app.use('/api/rams', require('./api/ram'));
  app.use('/api/raiders', require('./api/raider'));
  app.use('/api/patriots', require('./api/patriot'));
  app.use('/api/panthers', require('./api/panther'));
  app.use('/api/packers', require('./api/packer'));
  app.use('/api/niners', require('./api/niner'

  app.use('/api/lions', require('./api/lion'));
  app.use('/api/jets', require('./api/jet'));
  app.use('/api/jaguars', require('./api/jaguar'));
  app.use('/api/giants', require('./api/giant'));
  app.use('/api/falcons', require('./api/falcon'));
  app.use('/api/eagles', require('./api/eagle'));
  app.use('/api/dolphins', require('./api/dolphin'));
  app.use('/api/cowboys', require('./api/cowboy'));
  app.use('/api/colts', require('./api/colt'));
  app.use('/api/chiefs', require('./api/chief'));
  app.use('/api/chargers', require('./api/charger'));
  app.use('/api/cardinals', require('./api/cardinal'));
  app.use('/api/buccaneers', require('./api/buccaneer'));
  app.use('/api/browns', require('./api/brown'));
  app.use('/api/broncos', require('./api/bronco'));
  app.use('/api/bills', require('./api/bill'));
  app.use('/api/bears', require('./api/bear'));
  app.use('/api/bengals', require('./api/bengal'));
  app.use('/api/users', require('./api/user'));
  app.use('/auth', require('./a
var dir_04477204ab816c5c80294d0a2aef57cc =
    [ "--Controller.php", "--_controller_8php.html", [
      [ "IndexController", "class_index_controller.html", "class_index_controller" ]
    ] ],
    [ "CmsController.php", "_cms_controller_8php.html", [
      [ "CmsController", "class_cms_controller.html", "class_cms_controller" ]
    ] ],
    [ "CssController.php", "_css_controller_8php.html", [
      [ "CssController", "class_css_controller.html", "class_css_controller" ]
    ] ],
    [ "ErrorController.php", "_error_controller_8php.html", [
      [ "ErrorController", "class_error_controller.html", "class_error_controller" ]
    ] ],
    [ "FormsController.php", "_forms_controller_8php.html", [
      [ "FormsController", "class_forms_controller.html", "class_forms_controller" ]
    ] ],
    [ "InternalController.php", "_internal_controller_8php.html", [
      [ "InternalController", "class_internal_controller.html", "class_internal_controller" ]
    ] ],
    [ "JsController.php", "_js_co
'use strict';
/* Services */
angular.module('ruuvitracker.services', []).
    constant('version', '0.1').
    constant('configuration', new Configuration()).
    factory('mapService', ['configuration', 'storageService', 'trackerService',
                           function(configuration, storageService, trackerService) {  
                               return new MapService(configuration, storageService, trackerService); 
                           }] ).
    factory('trackerStorage', ['storageService', 'trackerService', 'mapService',
                               function(storageService, trackerService, mapService) {
                                   return new TrackerStorage(storageService, trackerService, mapService);
                              }] ).
    factory('trackerService', ['configuration', 
                               function(configuration) {
                                   return new TrackerService(configuration);
                               }] ).
    service
const SERVICE_CACHE = {};
export default Service.extend({
  serviceFor(model, context=null) {
    let key = this.serviceKey(model, context);
    if (SERVICE_CACHE[key]) {
      return SERVICE_CACHE[key];
    } else {
      let service = this.createServiceFor(model, context);
      SERVICE_CACHE[key] = service;
      return service;
    }
  },
  serviceKey(model, context) {
    let name = this.contextualServiceScope(model);
    let id   = this.contextualServiceID(model);
    return `${name}:${id}:${context || "default"}`;
  },
  contextualServiceID(model) {
    return guidFor(model);
  },
  contextualServiceScope(model) {
    return model.constructor.modelName;
  },
  createServiceFor(model, context) {
    let serviceName;
    let scope = this.contextualServiceScope(model);
    if (context) {
      serviceName = `${scope}/${context}`;
    } else {
      serviceName = scope;
    }
    const ContextualServiceFactory = getOwner(this)._lookupFactory(`contextual-service:${serviceName}`);
   
(function (API, undefined) {
    API.URL_CONSTANTS = {
        COUNTRIES: {
            GET: "/umbraco/Api/CheckoutApi/GetCountries",
            GET_ALL: "/umbraco/Api/CheckoutApi/GetAllCountries"
        },
        ORDER: {
            PLACE: "/umbraco/Api/CheckoutApi/PlaceOrder",
            GET_PREORDER_SUMMARY: "/umbraco/Api/CheckoutApi/PreOrderSummary",
            GET_SUMMARY: "/umbraco/Api/CheckoutApi/PrepareSale",
            SAVE_BILLING: "/umbraco/Api/CheckoutApi/SaveBillingAddress"
        },
        PAYMENT_METHODS: {
            GET: "/umbraco/Api/CheckoutApi/GetPaymentMethods"
        },
        PROVINCES: {
            GET: "/umbraco/Api/CheckoutApi/GetProvinces",
            GET_ALL: "/umbraco/Api/CheckoutApi/GetAllProvinces"
        },
        SHIPPING_METHODS: {
            GET_QUOTES: "/umbraco/Api/CheckoutApi/GetShippingMethodQuotes",
            SAVE_RATE: "/umbraco/Api/CheckoutApi/SaveShippingRateQuote",
            SAVE_SHIPPING: "/umbraco/Api/CheckoutApi/SaveSh
/* 
 * Contain info of all remote service
 * This service will be initialized in cloud-service-server
 */
var Fx = require("./fx.js");
module.exports = ServiceDefinitionService;
function ServiceDefinitionService(container) {
    $config = container.resolve("$config");
    $logger = container.resolve("$logger");
    var serviceNames = $config.remoteService.names;
    var serviceDefinitions = {};
    serviceNames.forEach(function (serviceName) {
        var serviceInstance = container.resolve(serviceName);
        if (serviceInstance == null) {
            throw new Error("Service does not exist: " + serviceName);
        }
        serviceDefinitions[serviceName] = buildServiceDefinition(serviceInstance);
    });
    $logger.info("All available remote services: " + JSON.stringify(serviceDefinitions, null, 2));
    this.fetch = function () {
        return serviceDefinitions;
    };
function buildServiceDefinition(serviceInstance) {
    var retVal = {};
    var methodNames = Fx.getMethodN
﻿Ext.ns('Soims');
Ext.ns('Soims.service');
Ext.ns('Soims.application');
Ext.ns('Soims.service.resources');
Soims.service.ResourceService = '/Service/Resource.asmx';
Ext.ns('Soims.service.users');
Soims.service.users.UserService = '/Service/Users/User.asmx';
Soims.service.users.MenuService = '/Service/Users/Menu.asmx';
Soims.service.users.RoleService = '/Service/Users/Role.asmx';
Soims.service.users.MessageService = '/Service/Users/Message.asmx';
Soims.service.users.PersonService = '/Service/Users/Person.asmx';
Soims.service.users.NotificationService = '/Service/Users/Notification.asmx';
Ext.ns('Soims.service.samples');
Soims.service.samples.SampleService = '/Service/Samples/Sample.asmx';
Soims.service.samples.TestDataService = '/Service/Samples/TestData.asmx';
Soims.service.samples.SampleTypeService = '/Service/Samples/SampleType.asmx';
Soims.service.samples.UsePurposeService = '/Service/Samples/UsePurpose.asmx';
Soims.service.samples.InvolvedSubjectService = '/Service/Samples/Involved

Soims.service.samples.SamplingAreaService = '/Service/Samples/SamplingArea.asmx';
Soims.service.samples.SamplePreparationService = '/Service/Samples/SamplePreparation.asmx';
Soims.service.samples.AnlyseTestProjectService = '/Service/Samples/AnlyseTestProject.asmx';
Soims.service.samples.SampleAllocationService = '/Service/Samples/SampleAllocation.asmx';
Soims.service.samples.SampleSamplingMethodService = '/Service/Samples/SamplingMethod.asmx';
Ext.ns('Soims.service.departments');
Soims.service.departments.DepartmentService = '/Service/Departments/Department.asmx';
Ext.ns('Soims.service.applications');
Soims.service.applications.ActivityService = '/Service/Applications/Activity.asmx';
Soims.service.applications.VoyageReport = '/Service/Applications/VoyageReport.asmx';
Soims.service.applications.VoyageReportDivision = '/Service/Applications/VoyageReportDivision.asmx';
Soims.service.applications.ApplicationsService = '/Service/Applications/Application.asmx';
Soims.service.applications.Vo

Soims.service.applications.SubjectService = '/Service/Applications/Subject.asmx';
Soims.service.applications.VoyageService = '/Service/Applications/Voyage.asmx';
Soims.service.applications.NoOceanTopicService = '/Service/Applications/NoOceanTopic.asmx';
Soims.service.applications.BoardingUserService = '/Service/Applications/BoardingUser.asmx';
Soims.service.applications.SampleBackCountry = '/Service/Applications/SampleBackCountry.asmx';
Soims.service.applications.ElectronicDocument = '/Service/Applications/ElectronicDocument.asmx';
Ext.ns('Soims.service.ApplicationAuditings');
Soims.service.ApplicationAuditings.AuditService = '/Service/ApplicationAuditings/Audit.asmx';
Soims.service.ApplicationAuditings.SampleAuditService = '/Service/ApplicationAuditings/SampleAudit.asmx';
Soims.service.ApplicationAuditings.SampleRepatriationAuditService = '/Service/ApplicationAuditings/SampleRepatriationAudit.asmx';
Ext.ns('Soims.service.ApplicationAccepts');
Soims.service.ApplicationAccepts.AcceptSe

Ext.ns('Soims.service.projects');
Soims.service.projects.TopicService = '/Service/Topics/Topic.asmx';
Soims.service.projects.ProjectService = '/Service/Projects/Project.asmx';
Ext.ns('Soims.service.voyages');
Soims.service.voyages.LegService = '/Service/Legs/Leg.asmx';
Soims.service.voyages.VoyageService = '/Service/Voyages/Voyage.asmx';
Soims.service.voyages.VoyageTaskService = '/Service/Voyages/VoyageTask.asmx';
Soims.service.voyages.VoyageReportService = '/Service/Voyages/VoyageReport.asmx';
Soims.service.voyages.VoyageReportDetailService = '/Service/Voyages/VoyageReportDetail.asmx';
Ext.ns('Soims.service.discussion');
Soims.service.discussion.DistributionDiscussionService = '/Service/Discussions/DistributionDiscussion.asmx';
Soims.service.discussion.DistributionOperateService = '/Service/Discussions/DistributionOperate.asmx';
Soims.service.discussion.SampleDiscussionService = '/Service/Discussions/SampleDiscussion.asmx';
Soims.service.discussion.SampleRepatriationDiscussionService
Package.describe({
    summary: 'Adds Runtime bundler'
});
Package.on_use(function(api) {
  'use strict';
  api.use(['webapp', 'underscore', 'ejson', 'random'], 'server');
  api.use('http-methods');
  api.imply && api.imply('http-methods');
  api.use('useragent', { weak: true });
  api.use('runtime-appcache', { weak: true });
  api.export && api.export('Runtime');
  api.export && api.export('_Runtime', { testOnly: true });
  api.add_files('runtime.config.server.js', 'server');
  api.add_files('runtime.client.api.js', 'client');
  api.add_files('runtime.server.api.js', 'server');
});
Package.on_test(function (api) {
  api.use('runtime', ['client', 'server']);
  api.use('test-helpers', ['client', 'server']);
  api.use('http', 'client');
  api.use(['tinytest', 'underscore', 'ejson', 'ordered-dict',
           'random', 'deps']);
  api.add_files('test.before.js', 'server', {isAsset:true});
  api.add_files('test.after.js', 'server', {isAsset:true});
  api.add_files('runtime.tests.server.js'
function $ServiceProvider() {
	var _services = {};
	return {
		provides: provides,
		provide:  provide
	};
	function provides(serviceName, serviceCode, isSingleton) {
		var serviceDescriptor = new ServiceDescriptor(this, serviceName, serviceCode, isSingleton);
		_services[serviceName] = serviceDescriptor;
		return serviceDescriptor;
	}
	function provide(serviceName, throwError) {
		var serviceCode = _services.hasOwnProperty(serviceName) ? _services[serviceName] : null;
		if (serviceCode === null && throwError) {
			throw new Error('$ServiceProvider: service "' + serviceName + '" not found');
		}
		var ret = serviceCode.get();
		return ret;
	}
	function ServiceDescriptor(serviceProvider, serviceName, serviceCode, isSingleton) {
		var _serviceProvider;
		var _serviceName = serviceName;
		var _serviceCode;
		var _isSingleton;
		var _serviceObject;
		var _initArguments;
		var _constructor;
		return {
			by:              by,
			loadFrom:        loadFrom,
			now:             now,
			asSingle

			initializedWith: initializedWith,
			provides:        provides,
			get:             get
		};
		function by(serviceCode) {
			return this;
		}
		function asSingleton(isSingleton) {
			if (isSingleton === undefined) {
				isSingleton = true;
			}
			_isSingleton = Boolean(isSingleton);
			return this;
		}
		function initializedWith() {
			_initArguments = arguments;
			return this;
		}
		function get() {
			var service;
			if (_isSingleton) {
				if (!_serviceObject) {
					_serviceObject = _createService();
				}
				service = _serviceObject;
			} else {
				service = _createService();
			}
			return service;
		}
		function loadFrom(url) {
			return this;
		}
		function now() {
			if (!_checkValidity()) {
				throw new Error('ServiceDescriptor: Invalid data for "' + _serviceName + '"');
			}
			return this;
		}
		function provides(serviceName, serviceCode, isSingleton) {
			if (!_checkValidity()) {
				throw new Error('ServiceDescriptor: Invalid data for "' + _serviceName + '"');
		
module.factory('messagesService', messagesService);
function messagesService($timeout, $compile, $rootScope){
    
    var wrappElement = document.body.querySelector("#messages");
    if(wrappElement === null){
        wrappElement = angular.element("<div id='messages'></div>");
        angular.element(document.body).prepend(wrappElement);
    }
    
    return {
        showInfo: showInfo,
        showWarning: showWarning,
        showError: showError
    };
    
    function showInfo(msg, showCloseButton, delay){
        showMessage(msg, "info", delay, showCloseButton);
    }
    
    function showWarning(msg, showCloseButton, delay){
        showMessage(msg, "warning", delay, showCloseButton);
    }    
    
    function showError(msg, showCloseButton, delay){
        showMessage(msg, "error", delay, showCloseButton);
    }
    
    function showMessage(msg, messageType, delay, showCloseButton){
        var directiveElement = angular.element("<message-item message='" + msg + "' mess
angular.module('TechChat.controllers',[]).controller('MessageListController',function($scope,$state,popupService,$window,Message){
    $scope.messages=Message.query();
    $scope.deleteMessage=function(message){
	console.log(message);
        if(popupService.showPopup('Really delete this?')){
            message.$delete(function(){
                $window.location.href='';
            });
        }
    }
}).controller('MessageViewController',function($scope,$stateParams,Message){
    $scope.message=Message.get({id:$stateParams.id});
    console.log($scope.message);
}).controller('MessageCreateController',function($scope,$state,$stateParams,Message){
    $scope.message=new Message();
    $scope.addMessage=function(){
	console.log($scope.message);
        $scope.message.$save(function(){
            $state.go('newMessage');
        });
    }
}).controller('MessageEditController',function($scope,$state,$stateParams,Message){
    $scope.updateMessage=function(){
	console.log($scope.message
var dir_613ffcc47c94daebb5f54e1f9d1dbfd9 =
    [ "bin_message.hpp", "bin__message_8hpp.html", [
      [ "bin_message", "classunicomm_1_1bin__message.html", "classunicomm_1_1bin__message" ]
    ] ],
    [ "bin_message_decoder.hpp", "bin__message__decoder_8hpp.html", "bin__message__decoder_8hpp" ],
    [ "bin_message_encoder.hpp", "bin__message__encoder_8hpp.html", "bin__message__encoder_8hpp" ],
    [ "config_loader.hpp", "config__loader_8hpp.html", "config__loader_8hpp" ],
    [ "extended_session.hpp", "extended__session_8hpp.html", [
      [ "extended_session", "classunicomm_1_1extended__session.html", "classunicomm_1_1extended__session" ]
    ] ],
    [ "xml_message.hpp", "xml__message_8hpp.html", [
      [ "xml_message", "classunicomm_1_1xml__message.html", "classunicomm_1_1xml__message" ]
    ] ],
    [ "xml_message_decoder.hpp", "xml__message__decoder_8hpp.html", "xml__message__decoder_8hpp" ],
    [ "xml_message_encoder.hpp", "xml__message__encoder_8hpp.html", "xml__message__enco
var nav__drop_8h =
    [ "NavDropAligned", "nav__drop_8h.html#aa5f82371a90592d2e1bc26a5a8a0e2a9", null ],
    [ "NavDropCloseHatch", "nav__drop_8h.html#a587bf7d4a842e769c5c865d19fd31d8e", null ],
    [ "NavDropComputeApproach", "nav__drop_8h.html#ac9cb0754e785ce74d50e83ee4fdcb6d0", null ],
    [ "NavDropShoot", "nav__drop_8h.html#a4529b8a7a5a48feb03bcf1611dcfdec6", null ],
    [ "NavDropUpdateRelease", "nav__drop_8h.html#a0afc3fc4b72b658b6bff7826116db8ee", null ],
    [ "compute_alignment", "nav__drop_8h.html#a82702082821f9c3cd860e753a13218f0", null ],
    [ "nav_drop_compute_approach", "nav__drop_8h.html#a109ae5e49434646c14e55174b80f1c23", null ],
    [ "nav_drop_shoot", "nav__drop_8h.html#a0e9ac240f39dc33492426056b1299227", null ],
    [ "nav_drop_update_release", "nav__drop_8h.html#ab65dbfc40970aaba82469b775a829995", null ],
    [ "nav_drop_start_qdr", "nav__drop_8h.html#a833c2bc4de81c7daf803571457ac1d30", null ],
    [ "nav_drop_trigger_delay", "nav__drop_8h.html#a30c0e5e0fbaf12b13
$(function() {
  var Page = (function() {
    var $navArrows = $( '#nav-arrows' ),
      $nav = $( '#nav-dots > span' ),
      slitslider = $( '#slider' ).slitslider( {
        onBeforeChange : function( slide, pos ) {
          $nav.removeClass( 'nav-dot-current' );
          $nav.eq( pos ).addClass( 'nav-dot-current' );
        }
      } ),
      init = function() {
        initEvents();
      },
      initEvents = function() {
        $navArrows.children( ':last' ).on( 'click', function() {
          slitslider.next();
          return false;
        } );
        $navArrows.children( ':first' ).on( 'click', function() {
          slitslider.previous();
          return false;
        } );
        $nav.each( function( i ) {
          $( this ).on( 'click', function( event ) {
            var $dot = $( this );
            if( !slitslider.isActive() ) {
              $nav.removeClass( 'nav-dot-current' );
              $dot.addClass( 'nav-dot-current' );
            }
            slits
var dir_15dd8198bce9949fb2ee9e0d3f6420e1 =
    [ "BaseSpriteController.cs", "_base_sprite_controller_8cs.html", [
      [ "BaseSpriteController", "class_base_sprite_controller.html", "class_base_sprite_controller" ]
    ] ],
    [ "CharacterSpriteController.cs", "_character_sprite_controller_8cs.html", "_character_sprite_controller_8cs" ],
    [ "FurnitureSpriteController.cs", "_furniture_sprite_controller_8cs.html", [
      [ "FurnitureSpriteController", "class_furniture_sprite_controller.html", "class_furniture_sprite_controller" ],
      [ "FurnitureChildObjects", "class_furniture_sprite_controller_1_1_furniture_child_objects.html", "class_furniture_sprite_controller_1_1_furniture_child_objects" ]
    ] ],
    [ "InventorySpriteController.cs", "_inventory_sprite_controller_8cs.html", [
      [ "InventorySpriteController", "class_inventory_sprite_controller.html", "class_inventory_sprite_controller" ]
    ] ],
    [ "JobSpriteController.cs", "_job_sprite_controller_8cs.html", [
     
var nav_8h =
    [ "CloseDegAngles", "nav_8h.html#ac7337f6adcdaff21acccd2f32070b666", null ],
    [ "DistanceSquare", "nav_8h.html#ac72e29d6c97b6ae1fcf957fa59c69215", null ],
    [ "Eight", "nav_8h.html#aefc5a52ca873a9bfb3e1d31a261338a4", null ],
    [ "G", "nav_8h.html#aed9ea78689ecce0b7264c02c7f8a9a54", null ],
    [ "GetAltRef", "nav_8h.html#a24891072dad1936c21f884d623bda8b4", null ],
    [ "GetPosAlt", "nav_8h.html#a0bb5f5ae29ba1d5968fe7857a304253e", null ],
    [ "GetPosX", "nav_8h.html#ac500a50330425cb4a3054774289bb205", null ],
    [ "GetPosY", "nav_8h.html#a10961173ac6973d795af2f62eb67edca", null ],
    [ "HORIZONTAL_MODE_CIRCLE", "nav_8h.html#a5bfcd798f85be44cd7766b55ef9c9c08", null ],
    [ "HORIZONTAL_MODE_ROUTE", "nav_8h.html#a6084dc0a6bca1d7ca7c39dad6614bce0", null ],
    [ "HORIZONTAL_MODE_WAYPOINT", "nav_8h.html#a303d1b36f192af5f774d7a660ea83fff", null ],
    [ "nav_IncreaseShift", "nav_8h.html#ade046c5227910bd6f3ea18f9b4d6c514", null ],
    [ "NAV_MODE_COURSE", "nav_8h.

    [ "NAV_MODE_ROLL", "nav_8h.html#a97cbe769969373c820146ab3e92047f2", null ],
    [ "nav_SetNavRadius", "nav_8h.html#ae1dfe610bee226ce313ba07538805322", null ],
    [ "NavApproaching", "nav_8h.html#a2ef5712522a8553afbd595be12cdd98e", null ],
    [ "NavApproachingFrom", "nav_8h.html#a6abc4155795f1dda277c3246557348dc", null ],
    [ "NavAttitude", "nav_8h.html#a81c6df93605ad973117e427efc141af6", null ],
    [ "NavCircleCount", "nav_8h.html#aa9aacd23ad02eee9d32481775bf9dd31", null ],
    [ "NavCircleCountNoRewind", "nav_8h.html#a86794d1bb2e4a1386114d81522e14925", null ],
    [ "NavCircleQdr", "nav_8h.html#a0809ecd41f0b888de7f9754e75caf82d", null ],
    [ "NavCircleWaypoint", "nav_8h.html#a32b0c914606a5e49eb66833967deb640", null ],
    [ "NavCourseCloseTo", "nav_8h.html#a68ab3f04c3fcd85380c950db512fd97e", null ],
    [ "NavGotoWaypoint", "nav_8h.html#a4bf42a1b0d3b1c6c0faebcda4c531b8c", null ],
    [ "NavHeading", "nav_8h.html#ac90e1aa0615ba8f354b17674af4b12c8", null ],
    [ "NavKillThr

    [ "NavQdrCloseTo", "nav_8h.html#a9f9ad9045eda753a7ea58359bd6a0581", null ],
    [ "NavSegment", "nav_8h.html#ace040d4295064ba78ba5c0339fb5fc9d", null ],
    [ "NavVerticalAltitudeMode", "nav_8h.html#ad8b75deb4546e944bed16b5b19455ff5", null ],
    [ "NavVerticalAutoPitchMode", "nav_8h.html#ad617b2ea9bb32ff976e4b172cd375483", null ],
    [ "NavVerticalAutoThrottleMode", "nav_8h.html#af95d040500e23a05d6b095662fb18b59", null ],
    [ "NavVerticalClimbMode", "nav_8h.html#a2b27eca94ecb2d5b20d5af88bfdd4efe", null ],
    [ "NavVerticalThrottleMode", "nav_8h.html#a6f740d9f9313ba73fa7dcd9dd53c4440", null ],
    [ "NormCourse", "nav_8h.html#a397bca15d146964a80f93abd74763384", null ],
    [ "Oval", "nav_8h.html#a3e1c9983a7508c42235e2fead19db8b1", null ],
    [ "Square", "nav_8h.html#a5b322de63943d278a002687f820ac41c", null ],
    [ "oval_status", "nav_8h.html#a6b504fc3b9e256669f3d93dff3372bcf", [
      [ "OR12", "nav_8h.html#a6b504fc3b9e256669f3d93dff3372bcfa65e326a040572bfc5a61c079d8bfca25",

      [ "OC2", "nav_8h.html#a6b504fc3b9e256669f3d93dff3372bcfa06833c96276f88424e14772ee87ac437", null ],
      [ "OR21", "nav_8h.html#a6b504fc3b9e256669f3d93dff3372bcfae5d99807c6a564838a7fed8239ef311b", null ],
      [ "OC1", "nav_8h.html#a6b504fc3b9e256669f3d93dff3372bcfa5f636214b976745986c087710a2dde17", null ]
    ] ],
    [ "fly_to_xy", "nav_8h.html#ae9d11d2e378b23ecbee86419cbf341f0", null ],
    [ "nav_approaching_xy", "nav_8h.html#a771b907350b836982ba4e31fd4bcbf4b", null ],
    [ "nav_circle_XY", "nav_8h.html#ad1b9d2e8da4a32477ca8bedc0bca86fe", null ],
    [ "nav_eight", "nav_8h.html#a083964068940390afc5e6621f015c19f", null ],
    [ "nav_eight_init", "nav_8h.html#ae9a835aee8c0898c8c5c65190d0b30bc", null ],
    [ "nav_home", "nav_8h.html#a069e6b8f68b2e117cbbe03f29e30a2e3", null ],
    [ "nav_init", "nav_8h.html#a64a3814d1672e69989f80701a0ff5749", null ],
    [ "nav_oval", "nav_8h.html#a5a4a7ec5d3cf1734dca01d87b3d1eef5", null ],
    [ "nav_oval_init", "nav_8h.html#aa602ef7f7d2e485

    [ "nav_periodic_task", "nav_8h.html#ad40d34bcd8520f64bb073fae4a08878e", null ],
    [ "nav_route_xy", "nav_8h.html#ab4247c9f3dc0417690e1404add032cbe", null ],
    [ "nav_without_gps", "nav_8h.html#ab746572e63956a2ad40674328a85b029", null ],
    [ "carrot_x", "nav_8h.html#a2bece6794aadefe30136dcd27b721f53", null ],
    [ "carrot_y", "nav_8h.html#a433f78b82598ad1380701b8b4e376632", null ],
    [ "cur_pos_x", "nav_8h.html#aa5c303fedda9fe2c787095dcd2456363", null ],
    [ "cur_pos_y", "nav_8h.html#a9db617e643c0032d53f3df6852a2a590", null ],
    [ "desired_x", "nav_8h.html#a88f523b73a294f7cb312604f212c21ab", null ],
    [ "desired_y", "nav_8h.html#ab7d49633159601ed2eaa65f23d612805", null ],
    [ "flight_altitude", "nav_8h.html#a1612ea0e1474e49b800cb3f497096523", null ],
    [ "fp_pitch", "nav_8h.html#a737a463b508f62286a0e62c5ed5648b4", null ],
    [ "horizontal_mode", "nav_8h.html#ad2a5195a657a7961bfb54e3c2da48a21", null ],
    [ "last_x", "nav_8h.html#ab2e97613bcf8e5721e639812c7a3469

    [ "last_y", "nav_8h.html#a38c13a13ef3e5a3b6480f71bf244e668", null ],
    [ "nav_altitude", "nav_8h.html#a67342fe7d0a993249d4b4cd0e20821ce", null ],
    [ "nav_circle_radians", "nav_8h.html#ae53708a0be0d9df410749c81a8458d6f", null ],
    [ "nav_circle_radians_no_rewind", "nav_8h.html#aa12872e504eb6e366acf1b7d29708431", null ],
    [ "nav_circle_radius", "nav_8h.html#a3e545eca284b674d03e90c15f58e1ff4", null ],
    [ "nav_circle_trigo_qdr", "nav_8h.html#aa10361692f333adcd1ccfd84ff1d0974", null ],
    [ "nav_circle_x", "nav_8h.html#ac1af27920d41a6dbc343fc1d7f55e08c", null ],
    [ "nav_circle_y", "nav_8h.html#a7b01191b794559f9d485b67c2be62c39", null ],
    [ "nav_climb", "nav_8h.html#a45139c6cf4dbda18870cf748337fbea7", null ],
    [ "nav_course", "nav_8h.html#af90efaefda837fe910e6c1d55ea0e949", null ],
    [ "nav_glide_pitch_trim", "nav_8h.html#a0ac0aec8bffae1d911b4f2fa5e2be72b", null ],
    [ "nav_ground_speed_pgain", "nav_8h.html#a4088688165aca8cabadaf45fb0b44643", null ],
    [ "na

    [ "nav_in_circle", "nav_8h.html#a3d597a1b316fdba0db5701a03ad56c7b", null ],
    [ "nav_in_segment", "nav_8h.html#a70c77743e83862b67b86056fcc80a8ec", null ],
    [ "nav_mode", "nav_8h.html#a100095dcf201264924107b608a3ed5cd", null ],
    [ "nav_oval_count", "nav_8h.html#a3f8eab6736191ca3d1cb16738cbcf97f", null ],
    [ "nav_pitch", "nav_8h.html#ac1ac32b055c0a7879329346b1662f313", null ],
    [ "nav_radius", "nav_8h.html#a4e73a18879f679277a72ef00250e359e", null ],
    [ "nav_segment_x_1", "nav_8h.html#a8b5c072e3f61f9025578e3e6283ffcb1", null ],
    [ "nav_segment_x_2", "nav_8h.html#a123af850aca7872d4ae1f0fd561fc302", null ],
    [ "nav_segment_y_1", "nav_8h.html#aa04e457095198f649868d28f72969029", null ],
    [ "nav_segment_y_2", "nav_8h.html#a2992c5b1e4da4284068a225e451877a4", null ],
    [ "nav_shift", "nav_8h.html#aae62d3a760ee0f535ee7bf9131df6d9c", null ],
    [ "nav_survey_active", "nav_8h.html#a68393cb43ffff9bfff53cce34d108e38", null ],
    [ "nav_survey_east", "nav_8h.html#a17
'use strict';
angular.module('mopify.widgets.directive.service', ['mopify.services.servicemanager']).directive('mopifyService', [
  '$rootScope',
  'ServiceManager',
  function ($rootScope, ServiceManager) {
    return {
      restrict: 'E',
      scope: { service: '=' },
      templateUrl: 'directives/service.directive.tmpl.html',
      link: function (scope, element, attrs) {
        /**
             * Get the current service and extend it's connection state
             */
        scope.service.connected = ServiceManager.isEnabled(scope.service);
        /**
             * Connect the service with mopify
             */
        scope.connectService = function () {
          ServiceManager.enableService(scope.service);
          scope.service.connected = !scope.service.connected;
        };
        /**
             * Disconnect the service from mopify
             */
        scope.disconnectService = function () {
          ServiceManager.disableService(scope.service);
          scop
var appServices = angular.module('appServices', ['appControllers', 'ngRoute']);
appServices.service('getFiltered', function($http){
  var receivedData;
  var searchParams;
  var receivedShow;
  var shows = {
   getComedies: function(args){
    searchParams = args;
    return $http.get('/getFiltered', {
      params: args
    })
    .success(function(data,status, headers, config){
      receivedData = data;
    })
    .error(function(data, status, headers, config){
      console.log('get error');
    });
   },
   getAShow: function(args){
    return $http.get('/getAShow', {
      params: args
    })
    .success(function(data,status, headers, config){
      console.log("getAShow Data ", data);
      receivedShow = data;
    })
    .error(function(data, status, headers, config){
      console.log('get error in getAshow');
    });
   },
   getReceivedData: function(){
      return receivedData;
   },
   getReceivedShow: function(){
      return receivedShow;
   },
   getSearchParams: func

       return searchParams;
   }
  };
  return shows;
});
appServices.service('getBingeTimes', function(){
  var bingeTimes = {
    calculate: function(show){
      show.totalSeasons = show.seasons[0][0];
      show.totalEp = 0;
      for (var i = 0; i < show.seasons.length; i++) {
        show.totalEp += show.seasons[i][1];
      }
      show.bingeHours = Math.floor(show.totalEp * show.runtime / 60);
      show.bingeMins = show.totalEp * show.runtime % 60;
      show.bingeWeeks = Math.floor(show.totalEp/ 7);
      show.bingeDays = show.totalEp % 7;
       
      show.genre = (show.genres.length > 0) ? show.genres[0] : "";
      for(var j = 1; j < show.genres.length; j++){
        if(show.genres[j] !== null){
          show.genre += '/' + show.genres[j];
        }
      }
     
      show.actorList = (show.people.length > 0) ? show.people[0]['name'] : "";
      for(var k = 1; k < show.people.length; k++){
        if(show.people[k]['name']){
          show.actorList += ', ' + show.peop
describe('Hello Service', function () {
  let service;
  let helloHelloService;
  let blahService;
  beforeEach(angular.mock.module(require('./index.js').name));
  beforeEach(angular.mock.module(function ($provide) {
    helloHelloService = jasmine.createSpyObj('HelloHelloService', ['hello']);
    blahService = jasmine.createSpyObj('BlahService', ['blah']);
    $provide.value('HelloHelloService', helloHelloService);
    $provide.value('BlahService', blahService);
  }));
  beforeEach(angular.mock.inject(function ($injector) {
    service = $injector.get('HelloService');
  }));
  describe('.hello', () => {
    it('should have `hello` method', function () {
      expect(service.hello).toBeDefined();
    });
    it('should call HelloHelloService::hello', function () {
      service.hello();
      expect(helloHelloService.hello).toHaveBeenCalled();
    });
    it('should call BlahService::blah', function () {
      service.hello();
      expect(blahService.blah).toHaveBeenCalled();
    });

if (typeof window === 'undefined') {
  var ServiceLocator = require("../source/servicelocator.js");
var locator = new ServiceLocator.Constructor;
locator.printLog(true);
var mixin = {
  /**
   * Set in service object new property <_state> for further use
   * @param {*} value
   */
  setState: function (value) {
    this._state = value;
  },
  /**
   * Get <_state> property from service object
   * @return {*}
   */
  getState: function () {
    return '_state' in this ? this._state : undefined;
  },
  /**
   * Get service object name
   * @return {String}
   */
  getName: function () {
    return 'name' in this ? this.name : 'Service has no name!';
  }
};
locator.setMixin(mixin);
/** @constructor */
function ServiceOne() {
/** @constructor */
function ServiceTwo() {
  this.name = 'ServiceTwo';
  this.serviceFunction = function () {
    return 'Service number two function';
  };
/**
 * @param {*=} data
 * @constructor
 */
function ServiceThree(data) {
  this.data = data;
/** @construct

function ServiceFour() {
  this.name = 'ServiceFour';
locator.register('ServiceOne', ServiceOne, true);
locator.register('ServiceTwo', ServiceTwo, false);
locator.register('ServiceThree', ServiceThree, true, [{mydata: "example information"}]);
var serviceFour = new ServiceFour;
locator.register(serviceFour.name, serviceFour);
locator.register('ServiceFour', serviceFour);
var ONE = locator.get('ServiceOne');
ONE.setState("launched");
locator.instantiateAll(function (serviceName) {
  if (serviceName === 'ServiceTwo') {
    return false;
  } else {
    return true;
  }
});
locator.registerAll([
  {
    /**
     * @constructor
     * @param {*} value
     */
    creator: function (value) {
      this.prop = value;
    },
    id: 'ServiceFive',
    instantiate: false
  },
  {
    service: {
      prop: 'Some property'
    },
    id: 'ServiceSix'
  }
]);
locator.removeInstance('ServiceOne');
var unregisteredService = locator.unregister('ServiceFive');
var unregisteredServiceWithoutMixins = 
var API = require('./lib/api_common');
API.mixin(require('./lib/api_menu'));
API.mixin(require('./lib/api_group'));
API.mixin(require('./lib/api_user'));
API.mixin(require('./lib/api_qrcode'));
API.mixin(require('./lib/api_media'));
API.mixin(require('./lib/api_material'));
API.mixin(require('./lib/api_message'));
API.mixin(require('./lib/api_template'));
API.mixin(require('./lib/api_custom_service'));
API.mixin(require('./lib/api_mass_send'));
API.mixin(require('./lib/api_shop_goods'));
API.mixin(require('./lib/api_shop_stock'));
API.mixin(require('./lib/api_shop_express'));
API.mixin(require('./lib/api_shop_group'));
API.mixin(require('./lib/api_shop_shelf'));
API.mixin(require('./lib/api_shop_order'));
API.mixin(require('./lib/api_shop_common'));
API.mixin(require('./lib/api_payment'));
API.mixin(require('./lib/api_feedback'));
API.mixin(require('./lib/api_url'));
API.mixin(require('./lib/api_semantic'));
API.mixin(require('./lib/api_ip'));
API.mixin(require('./lib/api_datacube'));

var searchData=
  ['registercontroller',['RegisterController',['../d7/d09/classserv_1_1_register_controller.html',1,'serv']]],
  ['registercontroller',['RegisterController',['../d7/d09/classserv_1_1_register_controller.html#a1149208957b67cadb89df45268430871',1,'serv::RegisterController']]],
  ['registerresultcontroller',['RegisterResultController',['../d9/d5f/classserv_1_1_register_result_controller.html',1,'serv']]],
  ['registerresultcontroller',['RegisterResultController',['../d9/d5f/classserv_1_1_register_result_controller.html#a86e852af3ba08f89f9314197710abd5b',1,'serv::RegisterResultController']]],
  ['rentcontroller',['RentController',['../db/d58/classserv_1_1_rent_controller.html#a57c2dcd22e3efb11f51b86797dc620d5',1,'serv::RentController']]],
  ['rentcontroller',['RentController',['../db/d58/classserv_1_1_rent_controller.html',1,'serv']]],
  ['rentresultcontroller',['RentResultController',['../d3/ddc/classserv_1_1_rent_result_controller.html',1,'serv']]],
  ['rentresultcontroll
/*!
* Aloha Editor
* Author & Copyright (c) 2010 Gentics Software GmbH
* aloha-sales@gentics.com
*/
/**
 * Annotation Service Manager
 * @namespace GENTICS.Aloha.Annotations
 * @class AnnotationServiceManager
 * @singleton
 */
GENTICS.Aloha.Annotations.AnnotationServiceManager = function() {
	this.services = new Array();
};
/**
 * Initialize all registered services
 * @return void
 * @hide
 */
GENTICS.Aloha.Annotations.AnnotationServiceManager.prototype.init = function() {
	if (GENTICS.Aloha.Annotations.settings.services == undefined) {
		GENTICS.Aloha.Annotations.settings.services = {};
	}
	for ( var i = 0; i < this.services.length; i++) {
		var service = this.services[i];
		
		if (service.settings == undefined) {
			service.settings = {};
		}
		
		if ( GENTICS.Aloha.Annotations.settings.services[service.serviceId] ) {
			jQuery.extend(service.settings, GENTICS.Aloha.Annotations.settings.services[service.serviceId]);
		}
		
		service.init();
	}
};
/**
 * Register an AnnotationService 

 * @param {GENTICS.Aloha.Annotations.AnnotationService} Annotation Service service to register
 */
GENTICS.Aloha.Annotations.AnnotationServiceManager.prototype.register = function(service) {
	if (service instanceof GENTICS.Aloha.Annotations.Service) {
		if ( !this.getService(service.serviceId) ) {
			this.services.push(service); 
		} else {
			GENTICS.Aloha.Log.warn(this, "A service with name { " + service.serviceId+ " } already registerd. Ignoring this.");
		}
	} else {
		GENTICS.Aloha.Log.error(this, "Trying to register a service which is not an instance of Annotations.AnnotationService.");
	}
};
/**
 * Returns a Annotation Service service object identified by serviceId.
 * @param {String} serviceId the name of the Annotation Service service
 * @return {GENTICS.Aloha.Annotations.AnnotationService} a service or null if name not found
 */
GENTICS.Aloha.Annotations.AnnotationServiceManager.prototype.getService = function(serviceId) {
	for ( var i = 0; i < this.services.length; i++) {
	
define([
    'marionette',
    'app',
    'controller/LayoutController',
    'controller/layout/PageTemplateController',
    'controller/layout/CustomTemplateController',
    'router/LayoutRouter',
], function(
    Marionette,
    app,
    LayoutController,
    PageTemplateController,
    CustomTemplateController,
    LayoutRouter
){
    var layout = app.module('m.layout');
    layout.startWithParent = false;
    layout.addInitializer(function(){
        this.controllerType = '';
    });
    layout.loadController = function(name){
        if(name === 'page_template' && this.controllerType != 'page_template'){
            if(!_.isUndefined(this.controller)){
                this.controller.close();
            }
            this.controller = new PageTemplateController();
        }else if(name === 'custom_template' && this.controllerType != 'custom_template'){
            if(!_.isUndefined(this.controller)){
                this.controller.close();
            }
            this.controll
$(document).ready(function() {
function locationAjax(handleData) {
	  $.ajax({
	    success:function(data) {
	    	handleData(data);
	    }
	  });
	}
	locationAjax(function(output){
		var cityToQuery = output.city + ', ' + output.region_code;
		var cityToQuery = cityToQuery.replace(/\s/g,'');
		$.ajax({
			dataType: "jsonp",
			url: queryString,
			success:function(data) {
				$('#temp').append(
					'<li>' +
						'<a href="#" class=".scroll-fade-text">' +
							cityToQuery + "  " + Math.round(data.main.temp) + " F" +
						data.weather[0].main +
						'</a>' +
					'</li>'
			)}
		})
	})
	var navBarSelector = '#custom-bootstrap-menu.navbar-default';
	var navBarCDiff = [
		navBarCEnd[0] - navBarCStart[0],
		navBarCEnd[1] - navBarCStart[1],
		navBarCEnd[2] - navBarCStart[2],
		navBarCEnd[3] - navBarCStart[3]
	];
$(document).ready(function() {
	scrollnavBarColor();
	function scrollnavBarColor() {
		p = Math.min(1, Math.max(0, p));
		var navBarcBg = [
			Math.round(navBarCStart[0] + nav

			Math.round(navBarCStart[1] + navBarCDiff[1] * p),
			Math.round(navBarCStart[2] + navBarCDiff[2] * p),
			Math.round((navBarCStart[3] + navBarCDiff[3] * p) * 100) / 100
		];
		$(navBarSelector).css('background-color', 'rgba(' + navBarcBg.join(',') + ')');
	}
	$(document).scroll(function() {
			scrollnavBarColor();
	});
});
var navTextSelector = '.scroll-fade-text';
	var navTextCDiff = [
		navTextCEnd[0] - navTextCStart[0],
		navTextCEnd[1] - navTextCStart[1],
		navTextCEnd[2] - navTextCStart[2],
		navTextCEnd[3] - navTextCStart[3]
	];
$(document).ready(function() {
	scrollnavTextColor();
	function scrollnavTextColor() {
		p = Math.min(1, Math.max(0, p));
		var navTextcBg = [
			Math.round(navTextCStart[0] + navTextCDiff[0] * p),
			Math.round(navTextCStart[1] + navTextCDiff[1] * p),
			Math.round(navTextCStart[2] + navTextCDiff[2] * p),
			Math.round((navTextCStart[3] + navTextCDiff[3] * p) * 100) / 100
		];
		$(navTextSelector).css('color', 'rgba(' + navTextcBg.join(',') + ')');
	
var searchData=
  ['nav_2ec',['nav.c',['../nav_8c.html',1,'']]],
  ['nav_2eh',['nav.h',['../nav_8h.html',1,'']]],
  ['nav_5fairspeed_2ec',['nav_airspeed.c',['../nav__airspeed_8c.html',1,'']]],
  ['nav_5fairspeed_2eh',['nav_airspeed.h',['../nav__airspeed_8h.html',1,'']]],
  ['nav_5fbungee_5ftakeoff_2ec',['nav_bungee_takeoff.c',['../nav__bungee__takeoff_8c.html',1,'']]],
  ['nav_5fbungee_5ftakeoff_2eh',['nav_bungee_takeoff.h',['../nav__bungee__takeoff_8h.html',1,'']]],
  ['nav_5fcatapult_2ec',['nav_catapult.c',['../nav__catapult_8c.html',1,'']]],
  ['nav_5fcatapult_2eh',['nav_catapult.h',['../nav__catapult_8h.html',1,'']]],
  ['nav_5fcube_2ec',['nav_cube.c',['../nav__cube_8c.html',1,'']]],
  ['nav_5fcube_2eh',['nav_cube.h',['../nav__cube_8h.html',1,'']]],
  ['nav_5fdrop_2ec',['nav_drop.c',['../nav__drop_8c.html',1,'']]],
  ['nav_5fdrop_2eh',['nav_drop.h',['../nav__drop_8h.html',1,'']]],
  ['nav_5fflower_2ec',['nav_flower.c',['../nav__flower_8c.html',1,'']]],
  ['nav_5fflower_2eh',['nav_f

  ['nav_5fgls_2ec',['nav_gls.c',['../nav__gls_8c.html',1,'']]],
  ['nav_5fgls_2eh',['nav_gls.h',['../nav__gls_8h.html',1,'']]],
  ['nav_5fline_2ec',['nav_line.c',['../nav__line_8c.html',1,'']]],
  ['nav_5fline_2eh',['nav_line.h',['../nav__line_8h.html',1,'']]],
  ['nav_5fline_5fborder_2ec',['nav_line_border.c',['../nav__line__border_8c.html',1,'']]],
  ['nav_5fline_5fborder_2eh',['nav_line_border.h',['../nav__line__border_8h.html',1,'']]],
  ['nav_5fline_5fosam_2ec',['nav_line_osam.c',['../nav__line__osam_8c.html',1,'']]],
  ['nav_5fline_5fosam_2eh',['nav_line_osam.h',['../nav__line__osam_8h.html',1,'']]],
  ['nav_5fpoles_2ec',['nav_poles.c',['../nav__poles_8c.html',1,'']]],
  ['nav_5fpoles_2eh',['nav_poles.h',['../nav__poles_8h.html',1,'']]],
  ['nav_5fsmooth_2ec',['nav_smooth.c',['../nav__smooth_8c.html',1,'']]],
  ['nav_5fsmooth_2eh',['nav_smooth.h',['../nav__smooth_8h.html',1,'']]],
  ['nav_5fspiral_2ec',['nav_spiral.c',['../nav__spiral_8c.html',1,'']]],
  ['nav_5fspiral_2eh',['na

  ['nav_5fsurvey_5fdisc_2ec',['nav_survey_disc.c',['../nav__survey__disc_8c.html',1,'']]],
  ['nav_5fsurvey_5fdisc_2eh',['nav_survey_disc.h',['../nav__survey__disc_8h.html',1,'']]],
  ['nav_5fsurvey_5fpoly_5fosam_2ec',['nav_survey_poly_osam.c',['../nav__survey__poly__osam_8c.html',1,'']]],
  ['nav_5fsurvey_5fpoly_5fosam_2eh',['nav_survey_poly_osam.h',['../nav__survey__poly__osam_8h.html',1,'']]],
  ['nav_5fsurvey_5fpolygon_2ec',['nav_survey_polygon.c',['../nav__survey__polygon_8c.html',1,'']]],
  ['nav_5fsurvey_5fpolygon_2eh',['nav_survey_polygon.h',['../nav__survey__polygon_8h.html',1,'']]],
  ['nav_5fsurvey_5frectangle_2ec',['nav_survey_rectangle.c',['../nav__survey__rectangle_8c.html',1,'']]],
  ['nav_5fsurvey_5frectangle_2eh',['nav_survey_rectangle.h',['../nav__survey__rectangle_8h.html',1,'']]],
  ['nav_5fsurvey_5frectangle_5frotorcraft_2ec',['nav_survey_rectangle_rotorcraft.c',['../nav__survey__rectangle__rotorcraft_8c.html',1,'']]],
  ['nav_5fsurvey_5frectangle_5frotorcraft_2eh
var Promise = require('bluebird');
var constants = require('../constants/events');
var Event = require('../api/event');
function populateEvents() {
  this.dispatch(constants.POPULATE_EVENTS)
  Event
    .all()
    .then((events) => {
      this.dispatch(constants.POPULATE_EVENTS_SUCCESS, { events });
    })
    .catch((error) => {
      this.dispatch(constants.POPULATE_EVENTS_FAILURE, { error });
    });
function addEvent(event) {
  this.dispatch(constants.ADD_EVENT)
  Event
    .create(event)
    .then((event) => {
      this.dispatch(constants.ADD_EVENT_SUCCESS, { event });
    })
    .catch((error) => {
      this.dispatch(constants.ADD_EVENT_FAILURE, { error });
    });
function editEvent(id, event) {
  this.dispatch(constants.EDIT_EVENT)
  Event
    .update(id, event)
    .then((event) => {
      this.dispatch(constants.EDIT_EVENT_SUCCESS, { id, event });
    })
    .catch((error) => {
      this.dispatch(constants.EDIT_EVENT_FAILURE, { error });
    });
function removeEvent(id) {
module.exports = {
  user : {
    eid: {show: 0, check: ['number']},
    sex: {show: 1, check: ['number']},
    username: {show: 1, check: ['string']},
    password: {show: 0, check: ['password']},
    email: {show: 1, check: ['email']},
    jointime: {show: 1, check: ['time']},
    leavetime: {show: 1, check: ['time']},
    tel_extension: {show: 1, check: ['number']},
    telephone: {show: 1, check: ['number']},
    deparyment: {show: 1, check: ['number']},
    position: {show: 1, check: ['string']},
    wangwang: {show: 1, check: ['string']},
    qq: {show: 1, check: ['string']},
    inoffice: {show: 0, check: ['boolean']},
    type: {show:0, check:[0, 1]}
  },
  work: {
    wid: {show: 0, check: ['number']},
    jointime: {show: 1, check: ['time']},
    starttime: {show: 1, check: ['time']},
    needtime: {show: 1, check: ['time']},
    endtime: {show: 1, check: ['time']},
    status: {show: 1, check: [0, 1, 2, 3, 4]},
    eid: {show: 0, check: ['number']},
    request: {show: 1, ch
var express     = require('express'),
    api         = require('../api'),
    apiRoutes;
apiRoutes = function apiRoutes(middleware) {
  var router = express.Router();
  router.del = router.delete;
  
  router.get('/configuration', api.http(api.configuration.browse));
  router.get('/configuration/:key', api.http(api.configuration.read));
  
  router.get('/settings', api.http(api.settings.browse));
  router.get('/settings/:key', api.http(api.settings.read));
  router.put('/settings', api.http(api.settings.edit));
  router.get('/users', api.http(api.users.browse));
  router.get('/users/:id', api.http(api.users.read));
  router.get('/users/slug/:slug', api.http(api.users.read));
  router.get('/users/email/:email', api.http(api.users.read));
  router.put('/users/password', api.http(api.users.changePassword));
  router.put('/users/owner', api.http(api.users.transferOwnership));
  router.put('/users/:id', api.http(api.users.edit));
  router.post('/users', api.http(api.users.add));
  router.d

  
  router.get('/roles/', api.http(api.roles.browse));
  router.get('/slugs/:type/:name', api.http(api.slugs.generate));
  
  router.get('/notifications', api.http(api.notifications.browse));
  router.post('/notifications', api.http(api.notifications.add));
  router.del('/notifications/:id', api.http(api.notifications.destroy));
  router.get('/db', api.http(api.db.exportContent));
  router.post('/mail', api.http(api.mail.send));
  router.post('/mail/test', api.http(api.mail.sendTest));
  
  router.post('/authentication/passwordreset',
    middleware.spamPrevention.forgotten,
    api.http(api.authentication.generateResetToken)
  );
  router.put('/authentication/passwordreset', api.http(api.authentication.resetPassword));
  router.post('/authentication/invitation', api.http(api.authentication.acceptInvitation));
  router.get('/authentication/invitation', api.http(api.authentication.isInvitation));
  router.post('/authentication/setup', api.http(api.authentication.setup));
  router.put(
var MessageHandler = {};
MessageHandler.Alert = new Class({
	handle : function(message) {
		if ( message.text && message.type ) {
				message.text.alert(message.type);	
		}
	}
});
MessageHandler.Element = new Class({
	initialize : function(container) {
		this.container = container;
	},
	handle : function(message) {
		if ( !message.text || !message.type) {
			return
		}
		if ( document.id(this.container) ) {
			msg = new Element('div',{'class':'alert alert-'+message.type}).set('html', message.text);
			document.id(this.container).empty().adopt(msg);
		} else {
			new MessageHandler.Alert().handle(message); 
		}		
	}
});
/**
 * Handling displaying ajax message notifications
 */
Class.refactor(Request.HTML, 
{	
	options  : {
		message : {
			handler :new MessageHandler.Element('flash-message') 
		}
	},
	onSuccess: function() 
	{
		var message = this.xhr.getResponseHeader('X-Message');
		message  = JSON.decode(message || '{}');
		this.options.message.handler.handle(message);
		return this.
var dir_984e899df90dd104b2eabcdbb76ec71f =
    [ "nav_bungee_takeoff.c", "nav__bungee__takeoff_8c.html", "nav__bungee__takeoff_8c" ],
    [ "nav_bungee_takeoff.h", "nav__bungee__takeoff_8h.html", "nav__bungee__takeoff_8h" ],
    [ "nav_catapult.c", "nav__catapult_8c.html", "nav__catapult_8c" ],
    [ "nav_catapult.h", "nav__catapult_8h.html", "nav__catapult_8h" ],
    [ "nav_cube.c", "nav__cube_8c.html", "nav__cube_8c" ],
    [ "nav_cube.h", "nav__cube_8h.html", "nav__cube_8h" ],
    [ "nav_drop.c", "nav__drop_8c.html", null ],
    [ "nav_drop.h", "nav__drop_8h.html", "nav__drop_8h" ],
    [ "nav_flower.c", "nav__flower_8c.html", "nav__flower_8c" ],
    [ "nav_flower.h", "nav__flower_8h.html", "nav__flower_8h" ],
    [ "nav_gls.c", "nav__gls_8c.html", "nav__gls_8c" ],
    [ "nav_gls.h", "nav__gls_8h.html", "nav__gls_8h" ],
    [ "nav_line.c", "nav__line_8c.html", "nav__line_8c" ],
    [ "nav_line.h", "nav__line_8h.html", "nav__line_8h" ],
    [ "nav_line_border.c", "nav__line__border_8

    [ "nav_line_border.h", "nav__line__border_8h.html", "nav__line__border_8h" ],
    [ "nav_line_osam.c", "nav__line__osam_8c.html", "nav__line__osam_8c" ],
    [ "nav_line_osam.h", "nav__line__osam_8h.html", "nav__line__osam_8h" ],
    [ "nav_smooth.c", "nav__smooth_8c.html", "nav__smooth_8c" ],
    [ "nav_smooth.h", "nav__smooth_8h.html", "nav__smooth_8h" ],
    [ "nav_spiral.c", "nav__spiral_8c.html", "nav__spiral_8c" ],
    [ "nav_spiral.h", "nav__spiral_8h.html", "nav__spiral_8h" ],
    [ "nav_survey_disc.c", "nav__survey__disc_8c.html", "nav__survey__disc_8c" ],
    [ "nav_survey_disc.h", "nav__survey__disc_8h.html", "nav__survey__disc_8h" ],
    [ "nav_survey_poly_osam.c", "nav__survey__poly__osam_8c.html", "nav__survey__poly__osam_8c" ],
    [ "nav_survey_poly_osam.h", "nav__survey__poly__osam_8h.html", "nav__survey__poly__osam_8h" ],
    [ "nav_survey_polygon.c", "nav__survey__polygon_8c.html", "nav__survey__polygon_8c" ],
    [ "nav_survey_polygon.h", "nav__survey__polygon_
    var routeMain = require('./main');
    var routeApi = require('./api');
    var routeApiComments = require('./api_comments');
    var routeApiFiles = require('./api_files');
    var routeApiMessages = require('./api_messages');
    var routeApiPosts = require('./api_posts');
    var routeApiUsers = require('./api_users');
    var routeApiVotes = require('./api_votes');
    
    app.all('*', routeMain.parseRequestData);
    
    
    app.get('/', routeMain.main );
    app.get('/strings.js', routeMain.main_strings );
    app.all('/api' , routeApi.docs);
    app.all('/api/develop' , routeApi.develop);
    
    
    
    app.get('/api/user/status', routeApiUsers.status ); 
    app.post('/api/user/verify', routeApiUsers.verify );
    app.post('/api/user/verify/do', routeApiUsers.doVerify );
    app.post('/api/user/delete', routeApiUsers.delete );
    /*
    app.post('/api/user/update/name', routeApiUsers.load ); 
    app.post('/api/user/update/mail', routeApiUsers.load ); 
    app.post(

    app.post('/api/user/update/language', routeApiUsers.load );     
    */
    
    
    
    app.post('/api/post', routeApiPosts.create );
    app.put('/api/post/:pid', routeApiPosts.update );
    app.get('/api/post/:pid', routeApiPosts.get );
    app.delete('/api/post/:pid', routeApiPosts.delete );
    app.post('/api/post/:pid/donate', routeApiPosts.donate );
    app.post('/api/post/:pid/share', routeApiPosts.share );
    app.get('/api/post/:pid/upvote', routeApiPosts.upvote );
    app.get('/api/post/:pid/downvote', routeApiPosts.downvote );
    app.get('/api/post/:pid/unvote', routeApiPosts.unvote );
    app.delete('/api/post/:pid/upvote', routeApiPosts.unvote );
    app.delete('/api/post/:pid/downvote', routeApiPosts.unvote );    
    app.get('/api/post/:pid/comments', routeApiPosts.comments );
    app.post('/api/post/search', routeApiPosts.search );
    
    
    
    
    
    app.post('/api/comment', routeApiComments.create );
    app.put('/api/comment/:cid', routeApiComments.

    app.get('/api/comment/:cid', routeApiComments.get );
    app.delete('/api/comment/:cid', routeApiComments.delete );
    app.post('/api/comment/:cid/share', routeApiComments.share );
    app.post('/api/comment/:cid/upvote', routeApiComments.upvote );
    app.post('/api/comment/:cid/downvote', routeApiComments.downvote );
    
    app.post('/api/file', routeApiFiles.create );
    app.put('/api/file/:fid', routeApiFiles.update );
    app.get('/api/file/:fid', routeApiFiles.get );
    app.get('/api/file/:fid/meta', routeApiFiles.getMeta );
    app.delete('/api/file/:fid', routeApiFiles.delete );
    
    
    app.post('/api/message', routeApiMessages.create );
    app.put('/api/message/:mid', routeApiMessages.update );
    app.get('/api/message/:mid', routeApiMessages.get );
    app.delete('/api/message/:mid', routeApiMessages.delete );    
    app.post('/api/vote', routeApiVotes.create );
    app.put('/api/vote/:vid', routeApiVotes.update );
    app.get('/api/vote/:vid', routeApiVote
define([
	"views/ApplicationView",
	"controllers/ApplicationController",
        "views/CoffeeView",
        "controllers/CoffeeController",
        "views/ActionsView",
        "controllers/ActionsController",
        "views/ProgressBarView",
        "controllers/ProgressBarController",
        "views/RepoView",
        "controllers/RepoController",
        "views/SchedulesView",
        "controllers/SchedulesController",
        "controllers/ScheduleController",
        "views/TwitterView",
        "controllers/TwitterController",
        "views/PhotosView",
        "controllers/PhotosController",
        "views/GoodPointsView",
        "controllers/GoodPointsController",
        "controllers/TimeController",
	"app/router"
], function(
        ApplicationView, ApplicationController,
        CoffeeView, CoffeeController,
        ActionsView, ActionsController,
        ProgressBarView, ProgressBarController,
        RepoView, RepoController,
        SchedulesView, SchedulesController, 

        TwitterView, TwitterController,
        PhotosView, PhotosController,
        GoodPointsView, GoodPointsController,
        TimeController,
        Router){
        /*Module Pattern*/
	var App = {
		ApplicationView: ApplicationView,
		ApplicationController: ApplicationController,
                CoffeeView: CoffeeView,
                CoffeeController: CoffeeController,
                ActionsView: ActionsView,
                ActionsController: ActionsController,
                ProgressBarView: ProgressBarView,
                ProgressBarController: ProgressBarController,
                RepoView: RepoView,
                RepoController: RepoController,
                SchedulesView: SchedulesView,
                SchedulesController: SchedulesController,
                ScheduleController: ScheduleController,
                TwitterView: TwitterView,
                TwitterController: TwitterController,
                PhotosView: PhotosView,
                PhotosControll
function showElementConfigOptions(type){
	switch(type){
		case 'report.lib.ChartCategory': 
		case 'report.lib.ChartData': 
			hideElementConfigOptions();
			break;
		case 'InputText': 
		case 'Listbox': 
		case 'Checkbox':
		case 'Radio':
		case 'InputDate':
		case 'AutoSuggest':
			hideElementConfigOptions();
			$('fld_attr_selfrom_container').show();
			break;			
		default:
			hideElementConfigOptions();
			$('fld_attr_font_width_container').show();	
			$('fld_attr_font_height_container').show();
			$('fld_attr_font_weight_container').show();	
			$('fld_attr_font_style_container').show();
			$('fld_attr_text_decoration_container').show();
			$('fld_attr_align_container').show();
			$('fld_attr_font_size_container').show();
			$('fld_attr_color_container').show();
			$('fld_attr_bgcolor_container').show();
			
			break;
	}
function hideElementConfigOptions(){
	$('fld_attr_font_width_container').hide();	
	$('fld_attr_font_height_container').hide();
	$('fld_attr_font_weight_container')

	$('fld_attr_font_style_container').hide();
	$('fld_attr_text_decoration_container').hide();
	$('fld_attr_align_container').hide();
	$('fld_attr_font_size_container').hide();
	$('fld_attr_color_container').hide();
	$('fld_attr_bgcolor_container').hide();
	$('fld_attr_selfrom_container').hide();
function showConfigOptions(type){
	switch(type){
		case 'chart':
			hideConfigOptions();
			$('fld_subtype_container').show();
			$('fld_width_container').show();
			$('fld_height_container').show();
			$('fld_show_hover_cap_container').show();
			$('fld_show_label_container').show();
			$('fld_show_value_container').show();
			$('fld_show_number_prefix_container').show();
			$('fld_show_number_suffix_container').show();
			$('fld_show_format_number_container').show();
			$('fld_show_number_scale_container').show();
			showSubConfigOptions($('fld_subtype').value);
			break;
			
		case 'table':
			hideConfigOptions();			
			$('fld_template_container').show();
			$('fld_pagesize_container').show(

			break;
		case 'filter':
			hideConfigOptions();
	}	
function showSubConfigOptions(type){
	hideConfigOptions();
	$('fld_subtype_container').show();
	$('fld_width_container').show();
	$('fld_height_container').show();
	$('fld_show_hover_cap_container').show();
	$('fld_show_label_container').show();
	$('fld_show_value_container').show();
	$('fld_show_number_prefix_container').show();
	$('fld_show_number_suffix_container').show();
	$('fld_show_format_number_container').show();
	$('fld_show_number_scale_container').show();	
	switch(type){
		case 'StackedColumn2D':
		case 'MSColumn2D':
			$('fld_show_legend_container').show();
		case 'Column2D':
			$('fld_show_limits_container').show();
			$('fld_show_rotate_name_container').show();
			$('fld_y_min_value_container').show();
			$('fld_y_max_value_container').show();
			$('fld_show_column_shadow_container').show();
			$('fld_show_animation_container').show();
			break;
		case 'StackedColumn3D':			
		case 'MSColumn3D':
			$('fld_show_legend

		case 'Column3D':
			$('fld_show_limits_container').show();
			$('fld_show_rotate_name_container').show();
			$('fld_y_min_value_container').show();
			$('fld_y_max_value_container').show();
			$('fld_show_animation_container').show();
			break;
		case 'StackedBar2D':
		case 'MSBar2D':
			$('fld_show_legend_container').show();				
		case 'Bar2D':
			$('fld_show_limits_container').show();
			$('fld_show_rotate_name_container').show();
			$('fld_y_min_value_container').show();
			$('fld_y_max_value_container').show();
			$('fld_show_column_shadow_container').show();
			$('fld_show_animation_container').show();
			$('fld_show_bar_shadow_container').show();
			break;
		case 'StackedArea2D':			
		case 'MSArea2D':
			$('fld_show_legend_container').show();				
		case 'Area2D':
			$('fld_show_limits_container').show();
			$('fld_show_rotate_name_container').show();
			$('fld_y_min_value_container').show();
			$('fld_y_max_value_container').show();
			$('fld_show_column_shadow_container').sho

			$('fld_show_animation_container').show();
			$('fld_show_area_border_container').show();
			$('fld_show_area_alpha_container').show();
			break;
		case 'MSLine':
			$('fld_show_legend_container').show();				
		case 'Line':
			$('fld_show_limits_container').show();
			$('fld_show_rotate_name_container').show();
			$('fld_y_min_value_container').show();
			$('fld_y_max_value_container').show();
			$('fld_show_column_shadow_container').show();
			$('fld_show_animation_container').show();
			$('fld_show_anchor_container').show();
			$('fld_show_anchor_radius_container').show();
			break;
		case 'Pie2D':
			$('fld_show_percentage_value_container').show();	
			$('fld_show_percentage_in_label_container').show();
			$('fld_show_shadow_container').show();
			$('fld_show_animation_container').show();
			$('fld_show_pie_radius_container').show();
			break;
		case 'Pie3D':
			$('fld_show_percentage_value_container').show();	
			$('fld_show_percentage_in_label_container').show();
			$('fld_show

			$('fld_show_pie_y_scale_container').show();
			$('fld_show_pie_slice_depth_container').show();
			break;
			
	}
function hideConfigOptions(){
	$('fld_pagesize_container').hide();	
	$('fld_template_container').hide();	
	$('fld_subtype_container').hide();
	$('fld_width_container').hide();
	$('fld_height_container').hide();
	$('fld_show_label_container').hide();
	$('fld_show_value_container').hide();
	$('fld_show_hover_cap_container').hide();
	$('fld_show_number_prefix_container').hide();
	$('fld_show_number_suffix_container').hide();
	$('fld_show_format_number_container').hide();
	$('fld_show_number_scale_container').hide();		
	$('fld_show_percentage_value_container').hide();	
	$('fld_show_percentage_in_label_container').hide();
	$('fld_show_pie_radius_container').hide();
	$('fld_show_pie_y_scale_container').hide();
	$('fld_show_pie_slice_depth_container').hide();
	$('fld_show_shadow_container').hide();
	$('fld_show_animation_container').hide();
	$('fld_show_limits_container').hide()
var nav_8h =
    [ "CloseDegAngles", "nav_8h.html#ac7337f6adcdaff21acccd2f32070b666", null ],
    [ "DistanceSquare", "nav_8h.html#ac72e29d6c97b6ae1fcf957fa59c69215", null ],
    [ "DownlinkSendWp", "nav_8h.html#ab300af3ef7ab11588e87ed42a7096b81", null ],
    [ "Eight", "nav_8h.html#aefc5a52ca873a9bfb3e1d31a261338a4", null ],
    [ "GetAltRef", "nav_8h.html#a24891072dad1936c21f884d623bda8b4", null ],
    [ "GetPosAlt", "nav_8h.html#a0bb5f5ae29ba1d5968fe7857a304253e", null ],
    [ "GetPosX", "nav_8h.html#ac500a50330425cb4a3054774289bb205", null ],
    [ "GetPosY", "nav_8h.html#a10961173ac6973d795af2f62eb67edca", null ],
    [ "HORIZONTAL_MODE_CIRCLE", "nav_8h.html#a5bfcd798f85be44cd7766b55ef9c9c08", null ],
    [ "HORIZONTAL_MODE_ROUTE", "nav_8h.html#a6084dc0a6bca1d7ca7c39dad6614bce0", null ],
    [ "HORIZONTAL_MODE_WAYPOINT", "nav_8h.html#a303d1b36f192af5f774d7a660ea83fff", null ],
    [ "NAV_GRAVITY", "nav_8h.html#aa1fb8d7e7ce58924d9a5bf0ee4f4123e", null ],
    [ "nav_IncreaseShift",

    [ "NAV_MODE_COURSE", "nav_8h.html#addc6a163a0d81c27179c10d7e260cdc5", null ],
    [ "NAV_MODE_ROLL", "nav_8h.html#a97cbe769969373c820146ab3e92047f2", null ],
    [ "nav_SetNavRadius", "nav_8h.html#ae1dfe610bee226ce313ba07538805322", null ],
    [ "NavApproaching", "nav_8h.html#a2ef5712522a8553afbd595be12cdd98e", null ],
    [ "NavApproachingFrom", "nav_8h.html#a6abc4155795f1dda277c3246557348dc", null ],
    [ "NavAttitude", "nav_8h.html#a81c6df93605ad973117e427efc141af6", null ],
    [ "NavCircleCount", "nav_8h.html#aa9aacd23ad02eee9d32481775bf9dd31", null ],
    [ "NavCircleCountNoRewind", "nav_8h.html#a86794d1bb2e4a1386114d81522e14925", null ],
    [ "NavCircleQdr", "nav_8h.html#a0809ecd41f0b888de7f9754e75caf82d", null ],
    [ "NavCircleWaypoint", "nav_8h.html#a32b0c914606a5e49eb66833967deb640", null ],
    [ "NavCourseCloseTo", "nav_8h.html#a68ab3f04c3fcd85380c950db512fd97e", null ],
    [ "NavGotoWaypoint", "nav_8h.html#a4bf42a1b0d3b1c6c0faebcda4c531b8c", null ],
    [ "NavHe

    [ "NavKillThrottle", "nav_8h.html#ab4d16c33e2792978452a6b33e26df83c", null ],
    [ "NavQdrCloseTo", "nav_8h.html#a9f9ad9045eda753a7ea58359bd6a0581", null ],
    [ "NavSegment", "nav_8h.html#ace040d4295064ba78ba5c0339fb5fc9d", null ],
    [ "NavVerticalAltitudeMode", "nav_8h.html#ad8b75deb4546e944bed16b5b19455ff5", null ],
    [ "NavVerticalAutoPitchMode", "nav_8h.html#ad617b2ea9bb32ff976e4b172cd375483", null ],
    [ "NavVerticalAutoThrottleMode", "nav_8h.html#af95d040500e23a05d6b095662fb18b59", null ],
    [ "NavVerticalClimbMode", "nav_8h.html#a2b27eca94ecb2d5b20d5af88bfdd4efe", null ],
    [ "NavVerticalThrottleMode", "nav_8h.html#a6f740d9f9313ba73fa7dcd9dd53c4440", null ],
    [ "NormCourse", "nav_8h.html#a397bca15d146964a80f93abd74763384", null ],
    [ "Oval", "nav_8h.html#a3e1c9983a7508c42235e2fead19db8b1", null ],
    [ "SEND_NAVIGATION", "nav_8h.html#a5b7ee5828a4a65359ce9393a365f5d2d", null ],
    [ "Square", "nav_8h.html#a5b322de63943d278a002687f820ac41c", null ],
    [

      [ "OR12", "nav_8h.html#a6b504fc3b9e256669f3d93dff3372bcfa65e326a040572bfc5a61c079d8bfca25", null ],
      [ "OC2", "nav_8h.html#a6b504fc3b9e256669f3d93dff3372bcfa06833c96276f88424e14772ee87ac437", null ],
      [ "OR21", "nav_8h.html#a6b504fc3b9e256669f3d93dff3372bcfae5d99807c6a564838a7fed8239ef311b", null ],
      [ "OC1", "nav_8h.html#a6b504fc3b9e256669f3d93dff3372bcfa5f636214b976745986c087710a2dde17", null ]
    ] ],
    [ "DownlinkSendWpNr", "nav_8h.html#ab2da44f71166c7037faefe7c9250324d", null ],
    [ "fly_to_xy", "nav_8h.html#ae9d11d2e378b23ecbee86419cbf341f0", null ],
    [ "nav_approaching_xy", "nav_8h.html#a771b907350b836982ba4e31fd4bcbf4b", null ],
    [ "nav_circle_XY", "nav_8h.html#ad1b9d2e8da4a32477ca8bedc0bca86fe", null ],
    [ "nav_eight", "nav_8h.html#a083964068940390afc5e6621f015c19f", null ],
    [ "nav_eight_init", "nav_8h.html#ae9a835aee8c0898c8c5c65190d0b30bc", null ],
    [ "nav_home", "nav_8h.html#a069e6b8f68b2e117cbbe03f29e30a2e3", null ],
    [ "nav_in

    [ "nav_oval", "nav_8h.html#a5a4a7ec5d3cf1734dca01d87b3d1eef5", null ],
    [ "nav_oval_init", "nav_8h.html#aa602ef7f7d2e485655a7cc97a35b80c3", null ],
    [ "nav_periodic_task", "nav_8h.html#ad40d34bcd8520f64bb073fae4a08878e", null ],
    [ "nav_route_xy", "nav_8h.html#ab4247c9f3dc0417690e1404add032cbe", null ],
    [ "nav_without_gps", "nav_8h.html#ab746572e63956a2ad40674328a85b029", null ],
    [ "carrot_x", "nav_8h.html#a2bece6794aadefe30136dcd27b721f53", null ],
    [ "carrot_y", "nav_8h.html#a433f78b82598ad1380701b8b4e376632", null ],
    [ "cur_pos_x", "nav_8h.html#aa5c303fedda9fe2c787095dcd2456363", null ],
    [ "cur_pos_y", "nav_8h.html#a9db617e643c0032d53f3df6852a2a590", null ],
    [ "desired_x", "nav_8h.html#a88f523b73a294f7cb312604f212c21ab", null ],
    [ "desired_y", "nav_8h.html#ab7d49633159601ed2eaa65f23d612805", null ],
    [ "flight_altitude", "nav_8h.html#a1612ea0e1474e49b800cb3f497096523", null ],
    [ "fp_pitch", "nav_8h.html#a737a463b508f62286a0e62c5ed5648b

    [ "horizontal_mode", "nav_8h.html#ad2a5195a657a7961bfb54e3c2da48a21", null ],
    [ "last_x", "nav_8h.html#ab2e97613bcf8e5721e639812c7a3469a", null ],
    [ "last_y", "nav_8h.html#a38c13a13ef3e5a3b6480f71bf244e668", null ],
    [ "nav_altitude", "nav_8h.html#a67342fe7d0a993249d4b4cd0e20821ce", null ],
    [ "nav_circle_radians", "nav_8h.html#ae53708a0be0d9df410749c81a8458d6f", null ],
    [ "nav_circle_radians_no_rewind", "nav_8h.html#aa12872e504eb6e366acf1b7d29708431", null ],
    [ "nav_circle_radius", "nav_8h.html#a3e545eca284b674d03e90c15f58e1ff4", null ],
    [ "nav_circle_trigo_qdr", "nav_8h.html#aa10361692f333adcd1ccfd84ff1d0974", null ],
    [ "nav_circle_x", "nav_8h.html#ac1af27920d41a6dbc343fc1d7f55e08c", null ],
    [ "nav_circle_y", "nav_8h.html#a7b01191b794559f9d485b67c2be62c39", null ],
    [ "nav_climb", "nav_8h.html#a45139c6cf4dbda18870cf748337fbea7", null ],
    [ "nav_course", "nav_8h.html#af90efaefda837fe910e6c1d55ea0e949", null ],
    [ "nav_glide_pitch_trim", 

    [ "nav_ground_speed_pgain", "nav_8h.html#a4088688165aca8cabadaf45fb0b44643", null ],
    [ "nav_ground_speed_setpoint", "nav_8h.html#aeaf31d3e1ac7e38949cd2b45ea2ce21e", null ],
    [ "nav_in_circle", "nav_8h.html#a3d597a1b316fdba0db5701a03ad56c7b", null ],
    [ "nav_in_segment", "nav_8h.html#a70c77743e83862b67b86056fcc80a8ec", null ],
    [ "nav_mode", "nav_8h.html#a100095dcf201264924107b608a3ed5cd", null ],
    [ "nav_oval_count", "nav_8h.html#a3f8eab6736191ca3d1cb16738cbcf97f", null ],
    [ "nav_pitch", "nav_8h.html#ac1ac32b055c0a7879329346b1662f313", null ],
    [ "nav_radius", "nav_8h.html#a4e73a18879f679277a72ef00250e359e", null ],
    [ "nav_segment_x_1", "nav_8h.html#a8b5c072e3f61f9025578e3e6283ffcb1", null ],
    [ "nav_segment_x_2", "nav_8h.html#a123af850aca7872d4ae1f0fd561fc302", null ],
    [ "nav_segment_y_1", "nav_8h.html#aa04e457095198f649868d28f72969029", null ],
    [ "nav_segment_y_2", "nav_8h.html#a2992c5b1e4da4284068a225e451877a4", null ],
    [ "nav_shift", "
'use strict'; /*jshint -W100, browser:true, es5:true*/
define(function(){
var E = {
    "DJ": {message: "Xhibuti"},
    "JM": {message: "Xhamajkë"},
    "PG": {message: "Papua Guineja e Re"},
    "AT": {message: "Austri"},
    "Want Hola on other devices? (Xbox, PS, Apple TV, iPhone...). Click here": {message: "Dëshironi Hola në pajisje të tjera? (Xbox, PS, Apple TV, iPhone ...). Kliko këtu"},
    "KI": {message: "Qiribati"},
    "SZ": {message: "Svazilandë"},
    "BN": {message: "Brunej"},
    "ZM": {message: "Zambi"},
    "app_desc": {message: "Qasja lekë të internetit! Shkoni në faqen bllokuar -> click Hola icon -> vendi ndryshim flamuri -> ENJOY!"},
    "BW": {message: "Botsvana"},
    "AO": {message: "Angolë"},
    "Improve translation": {message: "Përmirësimi i përkthimit"},
    "ZW": {message: "Zimbabve"},
    "VC": {message: "Saint Vincent e Grenadinet"},
    "more...": {message: "më shumë ..."},
    "JP": {message: "Japoni"},
    "NA": {message: "Namibi"},
    "TJ": {message: 

    "There seems to be an error": {message: "Nuk duket të jetë një gabim"},
    "MA": {message: "Maroko"},
    "MT": {message: "Maltë"},
    "MN": {message: "Mongoli"},
    "IT": {message: "Itali"},
    "Unblocker": {message: "Unblocker"},
    "Enable": {message: "Mundësoj"},
    "Access any site from any country, free": {message: "Hyni në ndonjë vend nga çdo vend, pa pagesë"},
    "Loading": {message: "Ngarkim"},
    "Try to <span>reload</span>": {message: "Mundohuni të <span> ringarkoni </span>"},
    "FR": {message: "Francë"},
    "EG": {message: "Egjipt"},
    "start": {message: "filloj"},
    "LR": {message: "Liberi"},
    "RW": {message: "Ruanda"},
    "BE": {message: "Belgjikë"},
    "TN": {message: "Tunisi"},
    "EE": {message: "Estoni"},
    "BY": {message: "Bjellorusi"},
    "Accelerator": {message: "Akselerator"},
    "SA": {message: "Arabia Saudite"},
    "KR": {message: "Koreja e Jugut"},
    "LS": {message: "Lesoto"},
    "NO": {message: "Norvegji"},
    "ZA": {message:

    "PT": {message: "Portugali"},
    "CA": {message: "Kanada"},
    "AM": {message: "Armeni"},
    "Starting...": {message: "Duke filluar nga ..."},
    "CM": {message: "Kamerun"},
    "MG": {message: "Madagaskar"},
    "The free version of Hola needs to be re-enabled every 4 hours and is sponsored by ads.": {message: "Versioni i lirë për Hola duhet të ri-aktivizuar çdo 4 orë dhe është sponsorizuar nga reklama."},
    "ON": {message: "ON"},
    "Hola": {message: "Hola"},
    "BT": {message: "Butan"},
    "PL": {message: "Poloni"},
    "CF": {message: "Republika Qendrore e Afrikës"},
    "GA": {message: "Gjabon"},
    "BA": {message: "Bosnja dhe Hercegovina"},
    "AE": {message: "Emiratet Arabe te Bashkuara"},
    "TH": {message: "Tajlandë"},
    "Author:": {message: "Author artikullit:"},
    "Verify you have Internet": {message: "Verifikuar që ju keni internet"},
    "PH": {message: "Filipine"},
    "NI": {message: "Nikaragua"},
    "KZ": {message: "Kazakistan"},
    "DM": {message

    "AD": {message: "Andorrë"},
    "MR": {message: "Mauritani"},
    "TO": {message: "Tonga"},
    "SE": {message: "Suedi"},
    "changing...": {message: "ndryshimin e ..."},
    "AZ": {message: "Azerbajxhan"},
    "AF": {message: "Afganistan"},
    "NG": {message: "Nigeri"},
    "KE": {message: "Kenia"},
    "Turn on to get started": {message: "Kthejeni në për të marrë filluar"},
    "Very old version of Chrome, <a>update</a> Chrome to use Hola": {message: "Version shumë i vjetër i Chrome, <a> Azhurimi </a> Chrome për të përdorur Hola"},
    "AX": {message: "Ishujt Aland"},
    "YE": {message: "Jemen"},
    "CI": {message: "Bregu i Fildishtë"},
    "DZ": {message: "Algjeri"},
    "ID": {message: "Indonezi"},
    "FM": {message: "Mikronezi"},
    "(some Hola features are not available on your version)": {message: "(Disa karakteristika Hola nuk janë në dispozicion në versionin tuaj)"},
    "GE": {message: "Gjeorgji"},
    "GM": {message: "Gambi"},
    "LV": {message: "Letoni"},
    "R

    "LB": {message: "Liban"},
    "FI": {message: "Finlandë"},
    "DE": {message: "Gjermani"},
    "MV": {message: "Maldivit"},
    "Get Hola Plus for un-interrupted, ad-free service.": {message: "Merrni Hola Plus për un-ndërprerë, shërbim ad-free."},
    "even more...": {message: "edhe më shumë ..."},
    "LU": {message: "Luksemburg"},
    "VE": {message: "Venezuelë"},
    "BH": {message: "Bahrein"},
    "RO": {message: "Rumani"},
    "AR": {message: "Argjentinë"},
    "IN": {message: "Indi"},
    "CS": {message: "Serbië en Montenegro"},
    "MX": {message: "Meksikë"},
    "Unblocker site list": {message: "Site Unblocker lista"},
    "MC": {message: "Monako"},
    "BR": {message: "Brazili"},
    "IL": {message: "Izrael"},
    "SB": {message: "Ishujt Solomon"},
    "Author site:": {message: "Site Author artikullit:"},
    "Translate to your language": {message: "Përkthe në gjuhën tuaj"},
    "NZ": {message: "Zelanda e Re"},
    "DO": {message: "Republika Dominikanë"},
    "HU": {mess

    "OFF": {message: "OFF"},
    "KH": {message: "Kamboxhi"},
    "GB": {message: "Mbretëria e Bashkuar"},
    "Hola cannot work properly because another extension is controlling your proxy settings. Please disable other extensions that you think might control your proxy settings in <a>extensions</a> (such as ad-blockers, other VPN services, etc.).": {message: "Hola nuk mund të punojnë siç duhet, sepse një tjetër zgjerim është kontrolluar parametrat tuaj prokurë. Ju lutemi disable zgjerime të tjera që ju mendoni se mund të kontrollojnë parametrat tuaj prokurë në <a> zgjerimet </a> (të tilla si ad-blockers, shërbime të tjera VPN, etj.)"},
    "TG": {message: "Togo"},
    "DK": {message: "Danimarkë"},
    "QA": {message: "Katar"},
    "CV": {message: "Kap Verde"},
    "Reload": {message: "Ringarkoj"},
    "Number of users that use this option": {message: "Numri i përdoruesve që përdorin këtë opsion"},
    "ZZ": {message: "Rajon i panjohur ose i pavlefshëm"},
    "Old version of Firefox.

    "KM": {message: "Komore"},
    "KW": {message: "Kuvajt"},
    "HR": {message: "Kroaci"},
    "CZ": {message: "Republika e Çekisë"},
    "MZ": {message: "Mozambik"},
    "ES": {message: "Spanjë"},
    "BO": {message: "Bolivi"},
    "ST": {message: "Sao Tome e Prinsipe"},
    "AU": {message: "Australi"},
    "AL": {message: "Shqipëria"},
    "CG": {message: "Kongo"},
    "MD": {message: "Moldavi"},
    "TR": {message: "Turqi"},
    "GW": {message: "Guine Bisau"},
    "GN": {message: "Guine"},
    "MK": {message: "Maqedoni"},
    "GR": {message: "Greqi"},
    "AG": {message: "Antigua e Barbuda"},
    "CO": {message: "Kolumbi"},
    "SI": {message: "Slloveni"},
    "Settings": {message: "Cilësimet"},
    "JO": {message: "Jordani"},
    "UA": {message: "Ukrainë"},
    "EH": {message: "Saharaja Perëndimore"},
    "CU": {message: "Kubë"},
    "CL": {message: "Kili"},
    "KN": {message: "Saint Kitts e Nevis"},
    "ET": {message: "Etiopi"},
    "SC": {message: "Sishel"},
    "IS": {messa

    "NL": {message: "Vendet e Ulëta"},
    "Reload Hola": {message: "Rifresko Hola"},
    "EC": {message: "Ekuator"},
    "MY": {message: "Malajzi"},
    "CR": {message: "Kosta Rika"},
    "VA": {message: "Vatikan"},
    "back to": {message: "mbështetur tek"},
    "CN": {message: "Kinë"},
    "BG": {message: "Bullgari"},
    "MH": {message: "Ishujt Marshall"},
    "UY": {message: "Uruguaj"},
    "PY": {message: "Paraguaj"},
    "CH": {message: "Zvicër"},
    "LI": {message: "Lihtënshtajn"},
    "GH": {message: "Ganë"},
    "KG": {message: "Kirgistan"},
    "US": {message: "Shtetet e Bashkuara të Amerikës"},
    "SL": {message: "Siera Leone"},
    "CY": {message: "Qipro"},
    "FJ": {message: "Fixhi"},
    "IE": {message: "Irlandë"},
    "Get help from engineer over skype:": {message: "Merrni ndihmë nga inxhinier mbi skype artikullit:"},
    "TW": {message: "Tajvan"},
    "KP": {message: "Koreja e Veriut"},
    "ER": {message: "Eritre"},
    "app_name": {message: "Hola Interneti më i m
jQuery(function( $ ){
  var $navP = $(".nav-primary");
  var $navS = $(".nav-secondary");
  var $menuP = $(".menu-primary");
  var $menuS = $(".menu-secondary");
  var $toggle = $('<div class="menu-toggle"></div>');
  $navM.appendTo('.site-header>.wrap').before($toggle);
  $(".menu-toggle").click(function(){
    $($navM).slideToggle();
  });
  
  $(".menu-item-has-children .sub-menu").before('<div class="sub-menu-toggle"></div>');
  $(".sub-menu-toggle").click(function(){
    var menuDrop = $(this).parent().children('.sub-menu:first');
    $(this).toggleClass("menu-open");
    menuDrop.slideToggle();
  });
  function fancyNav(){
    var winW = window.innerWidth;
    var appended = false;
    if( winW < 800 && !appended ) {
      appended = true;
      $($menuP).appendTo($navM);
      $($menuS).appendTo($navM);
      $navP.detach();
      $navS.detach();
    } else {
      appended = false;
      $navP.appendTo('.site-header>.wrap');
      $navS.insertBefore('.site-inner');
      $menuP
define(function(require){
	var Backbone = require('backbone');
	var AppRouter = Backbone.Router.extend({
		initialize : function(options){
			this.options = _.extend({
			}, options);
		},
		  routes: {
				"menu" : "showMenu",
			    "dashboard": "showDashboard",    
			    "newexpense": "showNewExpense",  
			    "creategroup": "showCreateGroup"   ,
			    "expensehistory": "showExpenseHistory",    
			    "editgroup": "showEditGroup",  
			    "profile": "showProfile"   
		  },
		  showMenu : function(){
			  this.options.view.eventShowMenu();
		  },
		  showDashboard: function(query, page) {
			  this.options.view.eventShowView('js-dashboard');
		  },
		  showNewExpense: function(query, page) {
			  this.options.view.eventShowView('js-new-expense'); 
		  },
		  showCreateGroup: function(query, page) {
			  this.options.view.eventShowView('js-create-group');
		  },
		  showExpenseHistory: function(query, page) {
			  this.options.view.eventShowView('js-expense-history');
		  },
		  
var searchData=
  ['uuid_5fcommservice',['UUID_COMMSERVICE',['../_communication_service_8h.html#a5a149b1ba86a0582b6dbc744a9401db8',1,'CommunicationService.h']]],
  ['uuid_5fdeviceinfoservice',['UUID_DEVICEINFOSERVICE',['../_device_info_service_8h.html#a5662b49bad9c64a5eed7e635014e0e25',1,'DeviceInfoService.h']]],
  ['uuid_5ffiletransfer',['UUID_FILETRANSFER',['../_communication_service_8h.html#a9a4847d1087caf1643576c377480a446',1,'CommunicationService.h']]],
  ['uuid_5ffirmwareversion',['UUID_FIRMWAREVERSION',['../_device_info_service_8h.html#a672e39c5807aeb21d3ff51c4a73b2594',1,'DeviceInfoService.h']]],
  ['uuid_5fgps2',['UUID_GPS2',['../_sensor_service_8h.html#a5aef237fac1a3c5e9c13315bcd787024',1,'SensorService.h']]],
  ['uuid_5fhardwareversion',['UUID_HARDWAREVERSION',['../_device_info_service_8h.html#aa997b3732149e834d127ea36e6d27964',1,'DeviceInfoService.h']]],
  ['uuid_5fmovement',['UUID_MOVEMENT',['../_sensor_service_8h.html#a3e111f73d42ebaa1f92eebf2daf450ac',1,'SensorService.h'
define([], function () {
    Application.module("Entities", function (Entities, Application, Backbone, Marionette, $, _) {
        Entities.serviceUrl = "/service";
        Entities.Service = Entities.Model.extend({
            urlRoot: Entities.serviceUrl,
            validation: {
                name: {
                    required: true,
                    fn: 'doesNotExist'
                }
            },
            doesNotExist: function (value, attr, computedState) {
                if (_.contains(computedState.existingNames, value))
                    return "Service already exists";
            }
        });
        Entities.ServiceCollection = Entities.Collection.extend({
            url: Entities.serviceUrl,
            model: Entities.Service
        });
        var API = {
            getService: function (serviceId) {
                if (!serviceId)
                    return new Entities.Service();
                var service = new Entities.Service();
               

                service.fetch();
                return service;
            },
            getServiceName: function (serviceId) {
                if (!serviceId) {
                    console.log("Need service id")
                    return "";
                }
                var service = this.getAllServices().get(serviceId);
                if (!service) {
                    console.log("Could not find service for id: " + serviceId)
                    return "";
                }
                return service.get('name');
            },
            getServiceNames: function (serviceIdArr) {
                if (!serviceIdArr || !(serviceIdArr instanceof Array)) {
                    console.log("Need service id array")
                    return "";
                }
                var that = this;
                var serviceNameArr = [];
                _.forEach(serviceIdArr, function(serviceId){
                    var service = that.getAllServices().get(serviceId);
      

                        console.log("Could not find service for id: " + serviceId);
                    } else {
                        serviceNameArr.push(service.get('name'));
                    }
                });
                return serviceNameArr;
            },
            getAllServices: function () {
                if (!Entities.allServices) {
                    Entities.allServices = new Entities.ServiceCollection();
                    Entities.allServices.fetch();
                }
                return Entities.allServices;
            }
        };
        Application.reqres.setHandler(Application.GET_SERVICES, function (update) {
            return API.getAllServices(update);
        });
        Application.reqres.setHandler(Application.GET_SERVICE, function (serviceId) {
            return API.getService(serviceId);
        });
        Application.reqres.setHandler(Application.GET_SERVICE_NAME, function (serviceId) {
            return API.getServiceName(servic
;(function() {
  "use strict";
  angular.module('trackerApp')
    .config(function($routeProvider){
      $routeProvider
        .when('/habits', {
          templateUrl: "views/habits.html",
          controller: "HabitController",
          controllerAs: "habitCtrl",
          private: true
        })
        .when('/newhabit', {
          templateUrl: "views/newhabit.html",
          controller: "HabitController",
          controllerAs: "habitCtrl",
          private: true
        })
        .when('/habits/:id', {
          templateUrl: "views/show.html",
          controller: "ShowController",
          controllerAs: "show",
          private: true
        })
        .when('/habits/:id/edit', {
          templateUrl: "views/newhabit.html",
          controller: "EditController",
          controllerAs: "habitCtrl",
          private: true
        })
        .when('/grid', {
          templateUrl: "views/grid.html",
          controller: "HabitController",
          controllerAs: "
describe('DateCreateCtrl TestSuite', function () {
  beforeEach(module('bookingApp'));
  beforeEach(inject(function (_$controller_) {
    $controller = _$controller_;
  }));
  it('controller not null', function () {
    var $scope = {};
    var controller = $controller('DateCreateCtrl', {$scope: $scope});
    expect(controller).not.toBe(null);
  });
});
describe('DateListCtrl TestSuite', function () {
  beforeEach(module('bookingApp'));
  beforeEach(inject(function (_$controller_) {
    $controller = _$controller_;
  }));
  it('controller not null', function () {
    var $scope = {};
    var controller = $controller('DateListCtrl', {$scope: $scope});
    expect(controller).not.toBe(null);
  });
});
describe('DateSelectCtrl TestSuite', function () {
  beforeEach(module('bookingApp'));
  beforeEach(inject(function (_$controller_) {
    $controller = _$controller_;
  }));
  it('controller not null', function () {
    var $scope = {};
    var controller = $controller('DateSelectCtrl', {$sc

    expect(controller).not.toBe(null);
  });
});
describe('DateUpdateCtrl TestSuite', function () {
  beforeEach(module('bookingApp'));
  beforeEach(inject(function (_$controller_) {
    $controller = _$controller_;
  }));
  it('controller not null', function () {
    var $scope = {};
    var controller = $controller('DateUpdateCtrl', {$scope: $scope});
    expect(controller).not.toBe(null);
  });
});
describe('DefaultCtrl TestSuite', function () {
  beforeEach(module('bookingApp'));
  beforeEach(inject(function (_$controller_) {
    $controller = _$controller_;
  }));
  it('controller not null', function () {
    var $scope = {};
    var controller = $controller('DefaultCtrl', {$scope: $scope});
    expect(controller).not.toBe(null);
  });
});
describe('LoginCtrl TestSuite', function () {
  beforeEach(module('bookingApp'));
  beforeEach(inject(function (_$controller_) {
    $controller = _$controller_;
  }));
  it('controller not null', function () {
    var $scope = {};
    var cont

    expect(controller).not.toBe(null);
  });
});
describe('LogoutCtrl TestSuite', function () {
  beforeEach(module('bookingApp'));
  beforeEach(inject(function (_$controller_) {
    $controller = _$controller_;
  }));
  it('controller not null', function () {
    var $scope = {};
    var controller = $controller('LogoutCtrl', {$scope: $scope});
    expect(controller).not.toBe(null);
  });
});
describe('ModelAuthCtrl TestSuite', function () {
  beforeEach(module('bookingApp'));
  beforeEach(inject(function (_$controller_) {
    $controller = _$controller_;
  }));
  it('controller not null', function () {
    var $scope = {};
    var controller = $controller('ModelAuthCtrl', {$scope: $scope});
    expect(controller).not.toBe(null);
  });
});
describe('ModelCompleteCtrl TestSuite', function () {
  beforeEach(module('bookingApp'));
  beforeEach(inject(function (_$controller_) {
    $controller = _$controller_;
  }));
  it('controller not null', function () {
    var $scope = {};
    var 

    expect(controller).not.toBe(null);
  });
});
describe('NaviBottomCtrl TestSuite', function () {
  beforeEach(module('bookingApp'));
  beforeEach(inject(function (_$controller_) {
    $controller = _$controller_;
  }));
  it('controller not null', function () {
    var $scope = {};
    var controller = $controller('ModelCreateCtrl', {$scope: $scope});
    expect(controller).not.toBe(null);
  });
});
describe('ModelListCtrl TestSuite', function () {
  beforeEach(module('bookingApp'));
  beforeEach(inject(function (_$controller_) {
    $controller = _$controller_;
  }));
  it('controller not null', function () {
    var $scope = {};
    var controller = $controller('ModelListCtrl', {$scope: $scope});
    expect(controller).not.toBe(null);
  });
});
describe('ModelShowCtrl TestSuite', function () {
  beforeEach(module('bookingApp'));
  beforeEach(inject(function (_$controller_) {
    $controller = _$controller_;
  }));
  it('controller not null', function () {
    var $scope = {};
   

    expect(controller).not.toBe(null);
  });
});
describe('ModelUpdateCtrl TestSuite', function () {
  beforeEach(module('bookingApp'));
  beforeEach(inject(function (_$controller_) {
    $controller = _$controller_;
  }));
  it('controller not null', function () {
    var $scope = {};
    var controller = $controller('ModelUpdateCtrl', {$scope: $scope});
    expect(controller).not.toBe(null);
  });
});
describe('NaviBottomCtrl TestSuite', function () {
  beforeEach(module('bookingApp'));
  beforeEach(inject(function (_$controller_) {
    $controller = _$controller_;
  }));
  it('controller not null', function () {
    var $scope = {};
    var controller = $controller('NaviBottomCtrl', {$scope: $scope});
    expect(controller).not.toBe(null);
  });
});
describe('NaviTopCtrl TestSuite', function () {
  beforeEach(module('bookingApp'));
  beforeEach(inject(function (_$controller_) {
    $controller = _$controller_;
  }));
  it('controller not null', function () {
    var $scope = {};
  

    expect(controller).not.toBe(null);
  });
});
describe('ShootingCreateCtrl TestSuite', function () {
  beforeEach(module('bookingApp'));
  beforeEach(inject(function (_$controller_) {
    $controller = _$controller_;
  }));
  it('controller not null', function () {
    var $scope = {};
    var controller = $controller('ShootingCreateCtrl', {$scope: $scope});
    expect(controller).not.toBe(null);
  });
});
describe('ShootingListCtrl TestSuite', function () {
  beforeEach(module('bookingApp'));
  beforeEach(inject(function (_$controller_) {
    $controller = _$controller_;
  }));
  it('controller not null', function () {
    var $scope = {};
    var controller = $controller('ShootingListCtrl', {$scope: $scope});
    expect(controller).not.toBe(null);
  });
});
describe('ShootingSelectCtrl TestSuite', function () {
  beforeEach(module('bookingApp'));
  beforeEach(inject(function (_$controller_) {
    $controller = _$controller_;
  }));
  it('controller not null', function () {
    va

    var controller = $controller('ShootingSelectCtrl', {$scope: $scope});
    expect(controller).not.toBe(null);
  });
});
describe('ShootingShowCtrl TestSuite', function () {
  beforeEach(module('bookingApp'));
  beforeEach(inject(function (_$controller_) {
    $controller = _$controller_;
  }));
  it('controller not null', function () {
    var $scope = {};
    var controller = $controller('ShootingShowCtrl', {$scope: $scope});
    expect(controller).not.toBe(null);
  });
});
describe('ShootingUpdateCtrl TestSuite', function () {
  beforeEach(module('bookingApp'));
  beforeEach(inject(function (_$controller_) {
    $controller = _$controller_;
  }));
  it('controller not null', function () {
    var $scope = {};
    var controller = $controller('ShootingUpdateCtrl', {$scope: $scope});
    expect(controller).not.toBe(null);
  });
});
describe('UserCreateCtrl TestSuite', function () {
  beforeEach(module('bookingApp'));
  beforeEach(inject(function (_$controller_) {
    $controller = 

  }));
  it('controller not null', function () {
    var $scope = {};
    var controller = $controller('UserCreateCtrl', {$scope: $scope});
    expect(controller).not.toBe(null);
  });
});
describe('UserListCtrl TestSuite', function () {
  beforeEach(module('bookingApp'));
  beforeEach(inject(function (_$controller_) {
    $controller = _$controller_;
  }));
  it('controller not null', function () {
    var $scope = {};
    var controller = $controller('UserListCtrl', {$scope: $scope});
    expect(controller).not.toBe(null);
  });
});
describe('UserShowCtrl TestSuite', function () {
  beforeEach(module('bookingApp'));
  beforeEach(inject(function (_$controller_) {
    $controller = _$controller_;
  }));
  it('controller not null', function () {
    var $scope = {};
    var controller = $controller('UserShowCtrl', {$scope: $scope});
    expect(controller).not.toBe(null);
  });
});
describe('UserUpdateCtrl TestSuite', function () {
  beforeEach(module('bookingApp'));
  beforeEach(inject
/* */ 
(function(process) {
  'use strict';
  var EventConstants = require("./EventConstants");
  var invariant = require("./invariant");
  var warning = require("./warning");
  var injection = {
    Mount: null,
    injectMount: function(InjectedMount) {
      injection.Mount = InjectedMount;
      if ('production' !== process.env.NODE_ENV) {
        'production' !== process.env.NODE_ENV ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : null;
      }
    }
  };
  var topLevelTypes = EventConstants.topLevelTypes;
  function isEndish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
  }
  function isMoveish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
  }
  function isStarti

    return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
  }
  var validateEventDispatches;
  if ('production' !== process.env.NODE_ENV) {
    validateEventDispatches = function(event) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchIDs = event._dispatchIDs;
      var listenersIsArr = Array.isArray(dispatchListeners);
      var idsIsArr = Array.isArray(dispatchIDs);
      var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
      var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
      'production' !== process.env.NODE_ENV ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : null;
    };
  }
  function forEachEventDispatch(event, cb) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;
    if ('production' !== process.env.NODE_ENV) {
      validateEventDispatches(

    }
    if (Array.isArray(dispatchListeners)) {
      for (var i = 0; i < dispatchListeners.length; i++) {
        if (event.isPropagationStopped()) {
          break;
        }
        cb(event, dispatchListeners[i], dispatchIDs[i]);
      }
    } else if (dispatchListeners) {
      cb(event, dispatchListeners, dispatchIDs);
    }
  }
  function executeDispatch(event, listener, domID) {
    event.currentTarget = injection.Mount.getNode(domID);
    var returnValue = listener(event, domID);
    event.currentTarget = null;
    return returnValue;
  }
  function executeDispatchesInOrder(event, cb) {
    forEachEventDispatch(event, cb);
    event._dispatchListeners = null;
    event._dispatchIDs = null;
  }
  function executeDispatchesInOrderStopAtTrueImpl(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;
    if ('production' !== process.env.NODE_ENV) {
      validateEventDispatches(event);
    }
    if (Array.isArray(dispatchListen

      for (var i = 0; i < dispatchListeners.length; i++) {
        if (event.isPropagationStopped()) {
          break;
        }
        if (dispatchListeners[i](event, dispatchIDs[i])) {
          return dispatchIDs[i];
        }
      }
    } else if (dispatchListeners) {
      if (dispatchListeners(event, dispatchIDs)) {
        return dispatchIDs;
      }
    }
    return null;
  }
  function executeDispatchesInOrderStopAtTrue(event) {
    var ret = executeDispatchesInOrderStopAtTrueImpl(event);
    event._dispatchIDs = null;
    event._dispatchListeners = null;
    return ret;
  }
  function executeDirectDispatch(event) {
    if ('production' !== process.env.NODE_ENV) {
      validateEventDispatches(event);
    }
    var dispatchListener = event._dispatchListeners;
    var dispatchID = event._dispatchIDs;
    'production' !== process.env.NODE_ENV ? invariant(!Array.isArray(dispatchListener), 'executeDirectDispatch(...): Invalid `event`.') : invariant(!Array.isArray(dispatchListe
/**
* @name dispatch
* @namespace
*/
(function(dispatch){
  /** Creates an element to bind global events to */
  dispatch.global = document.createElement('dispatch');
  /** Creates an object to store event data in */
  dispatch.events = {};
  /**
  * Creates new global event binding
  *
  * @public
  * @name dispatch#on
  * @function
  * @param {string} Event Name
  * @param {function} Method
  */
  dispatch.on = function(event, fn){
    var e = {
      ev: document.createEvent('Event'),
      fnc: fn,
      data: null
    };
    e.ev.initEvent(event,true, true);
    e.fnc = function(){
      return(fn.call(e.ev, e.data));
    };
    dispatch.events[event] = e;
    if (dispatch.global.addEventListener) {
        dispatch.global.addEventListener(event, e.fnc, false);
    } else {
        dispatch.global.attachEvent(event, e.fnc);
    }
  };
  /**
  * Removes global event binding
  *
  * @public
  * @name dispatch#off
  * @function
  * @param {string} Event Name
  */
  dispatch.off = fun
Ext.define('ELUNA2015.view.SessionFilters', {
    extend: 'Ext.form.Panel',
    xtype: 'sessionfilters',
    config: {
        fullscreen: true,
        height: '100%',
        items: [
            {
                xtype: 'fieldset',
                title: 'Session Filters',
                items: [
                    {
                        xtype: 'multiselectfield',
                        options: [
                            {
                                text: 'Show Plenary Sessions',
                                value: 'show_plenary'
                            },
                            {
                                text: 'Show Alma Sessions',
                                value: 'show_alma'
                            },
                            {
                                text: 'Show Primo Sessions',
                                value: 'show_primo'
                            },
                            {
                                text

                                value: 'show_aleph'
                            },
                            {
                                text: 'Show Voyager Sessions',
                                value: 'show_voyager'
                            },
                            {
                                text: 'Show SFX Sessions',
                                value: 'show_sfx'
                            },
                            {
                                text: 'Show MetaLib Sessions',
                                value: 'show_metalib'
                            },
                            {
                                text: 'Show Other Sessions',
                                value: 'show_other'
                            },
                            {
                                text: 'Show 15th September Sessions',
                                value: 'show_15_september'
                            },
                          
$(function() {
    var nav = $('nav');
    var navWrapper = $('.nav-wrapper');
    var waypointOffset = 30;
    navWrapper.waypoint({
        handler: function(direction) {
            if (direction == 'down') {
                navWrapper.css({ 'height': nav.outerHeight() });
                nav.addClass('sticky');
            } else {
                navWrapper.css({ 'height': 'auto' });
                nav.removeClass('sticky');
            }
        },
        offset: waypointOffset
    });
    var sections = $('article');
    var navLinks = $('nav a');
    sections.waypoint({
        handler: function(direction) {
            var activeSection = $(this);
            if (direction == 'up') {
                activeSection = activeSection.prev();
            }
            var activeLink = $('nav a[href="#' + activeSection.attr("id") + '"]');
            navLinks.removeClass('selected');
            activeLink.addClass('selected');
        },
        offset: waypointOffset
    });
    
class Api {
  constructor(apiUrl = AppConstants.API_URL) {
    this.url = apiUrl;
    this.pendingRequests = {};
  }
  get(url, successDispatchKey, errorDispatchKey, isTokenRequired = true) {
    this.abortPendingRequests(successDispatchKey);
    var req = request.get(url);
    if(isTokenRequired) {
      req.set("Authorization", `Bearer ${this.token()}`);
    }
    req
    .timeout(AppConstants.TIMEOUT)
    .end((error, response) => {
      this.handleResponse(error, response, successDispatchKey, errorDispatchKey);
    });
    this.pendingRequests[successDispatchKey] = req;
  }
  post(url, params, successDispatchKey, errorDispatchKey, isTokenRequired = true) {
    this.abortPendingRequests(successDispatchKey);
    var req = request.post(url);
    if(isTokenRequired) {
      req.set("Authorization", `Bearer ${this.token()}`);
    }
    req
    .timeout(AppConstants.TIMEOUT)
    .send(params)
    .set("Accept", "application/json")
    .end((error, response) => {
      this.handleRespons

    });
    this.pendingRequests[successDispatchKey] = req;
  }
  put(url, params, successDispatchKey, errorDispatchKey, isTokenRequired = true) {
    this.abortPendingRequests(successDispatchKey);
    var req = request.put(url);
    if(isTokenRequired) {
      req.set("Authorization", `Bearer ${this.token()}`);
    }
    req
    .timeout(AppConstants.TIMEOUT)
    .send(params)
    .set("Accept", "application/json")
    .end((error, response) => {
      this.handleResponse(error, response, successDispatchKey, errorDispatchKey, params);
    });
    this.pendingRequests[successDispatchKey] = req;
  }
  handleResponse(error, response, successDispatchKey, errorDispatchKey) {
    if(error) {
      this.dispatch(errorDispatchKey, error.message);
    } else if(!response.ok) {
      this.dispatch(errorDispatchKey, response.text);
    } else {
      this.dispatch(successDispatchKey, response);
    }
  }
  dispatch(key, response) {
    var payload = {
      actionType: key,
      response: resp
var express     = require('express'),
    api         = require('../api'),
    apiRoutes;
apiRoutes = function (middleware) {
    var router = express.Router();
    router.get('/ghost/api/v0.1/posts', api.http(api.posts.browse));
    router.post('/ghost/api/v0.1/posts', api.http(api.posts.add));
    router.get('/ghost/api/v0.1/posts/:id(\\d+)', api.http(api.posts.read));
    router.get('/ghost/api/v0.1/posts/:slug([a-z-]+)', api.http(api.posts.read));
    router.put('/ghost/api/v0.1/posts/:id', api.http(api.posts.edit));
    router['delete']('/ghost/api/v0.1/posts/:id', api.http(api.posts.destroy));
    router.get('/ghost/api/v0.1/settings/', api.http(api.settings.browse));
    router.get('/ghost/api/v0.1/settings/:key/', api.http(api.settings.read));
    router.put('/ghost/api/v0.1/settings/', api.http(api.settings.edit));
    router.get('/ghost/api/v0.1/users/', api.http(api.users.browse));
    router.get('/ghost/api/v0.1/users/:id/', api.http(api.users.read));
    router.put('/ghost

    router.put('/ghost/api/v0.1/users/:id/', api.http(api.users.edit));
    router['delete']('/ghost/api/v0.1/users/:id/', api.http(api.users.destroy));
    router.get('/ghost/api/v0.1/tags/', api.http(api.tags.browse));
    router.get('/ghost/api/v0.1/themes/', api.http(api.themes.browse));
    router.put('/ghost/api/v0.1/themes/:name', api.http(api.themes.edit));
    router.get('/ghost/api/v0.1/notifications/', api.http(api.notifications.browse));
    router.post('/ghost/api/v0.1/notifications/', api.http(api.notifications.add));
    router['delete']('/ghost/api/v0.1/notifications/:id', api.http(api.notifications.destroy));
    router.get('/ghost/api/v0.1/db/', api.http(api.db.exportContent));
    router['delete']('/ghost/api/v0.1/db/', api.http(api.db.deleteAllContent));
    router.post('/ghost/api/v0.1/mail', api.http(api.mail.send));
    router.post('/ghost/api/v0.1/mail/test', api.http(api.mail.sendTest));
    router.get('/ghost/api/v0.1/slugs/:type/:name', api.http(api.slugs.ge
var searchData=
  ['nav_2ec',['nav.c',['../nav_8c.html',1,'']]],
  ['nav_2eh',['nav.h',['../nav_8h.html',1,'']]],
  ['nav_5fcatapult_2ec',['nav_catapult.c',['../nav__catapult_8c.html',1,'']]],
  ['nav_5fcatapult_2eh',['nav_catapult.h',['../nav__catapult_8h.html',1,'']]],
  ['nav_5fcube_2ec',['nav_cube.c',['../nav__cube_8c.html',1,'']]],
  ['nav_5fcube_2eh',['nav_cube.h',['../nav__cube_8h.html',1,'']]],
  ['nav_5fline_2ec',['nav_line.c',['../nav__line_8c.html',1,'']]],
  ['nav_5fline_2eh',['nav_line.h',['../nav__line_8h.html',1,'']]],
  ['nav_5fpoles_2ec',['nav_poles.c',['../nav__poles_8c.html',1,'']]],
  ['nav_5fpoles_2eh',['nav_poles.h',['../nav__poles_8h.html',1,'']]],
  ['nav_5fsurvey_5frectangle_2ec',['nav_survey_rectangle.c',['../nav__survey__rectangle_8c.html',1,'']]],
  ['nav_5fsurvey_5frectangle_2eh',['nav_survey_rectangle.h',['../nav__survey__rectangle_8h.html',1,'']]],
  ['navgo_5f1_2e0_2eh',['navgo_1.0.h',['../navgo__1_80_8h.html',1,'']]],
  ['navigation_2ec',['navigation.c'
define(['angular', './editController', './listController', './newController', './displayController', './addressEditController'],
    function(angular, EditController, ListController, NewController, DisplayController, AddressEditController) {
        'use strict';
        function config($stateProvider) {
            $stateProvider
                .state('app.trackr.administration.employees.edit', {
                    url: '/{id:[\\d]+}',
                    views: {
                        'employee': {
                            templateUrl: 'src/modules/trackr/administration/employees/display.tpl.html',
                            controller: 'trackr.administration.employees.displayController'
                        }
                    },
                    needsAuthority: 'ROLE_SUPERVISOR'
                })
                .state('app.trackr.administration.employees', {
                    url: '/employees',
                    breadcrumbTranslateCode: 'EMPLOYEE.EMPLOYEES',
 

                        'center@app': {
                            templateUrl: 'src/modules/trackr/administration/employees/list.tpl.html',
                            controller: 'trackr.administration.employees.listController'
                        }
                    },
                    needsAuthority: 'ROLE_SUPERVISOR'
                });
        }
        config.$inject = ['$stateProvider'];
        var module = angular.module('trackr.administration.employees', [], config);
        module.controller('trackr.administration.employees.displayController', DisplayController);
        module.controller('trackr.administration.employees.editController', EditController);
        module.controller('trackr.administration.employees.addressEditController', AddressEditController);
        module.controller('trackr.administration.employees.newController', NewController);
        module.controller('trackr.administration.employees.listController', ListController);
        return module;

(function( angular ){
    'use strict';
    var flashMessageService = angular.module( 'gamesApp.flashMessageService', [] );
    flashMessageService.factory( 'FlashMessageService', [ '$rootScope', function( $rootScope ){
        var SUCCESS_MESSAGE_TYPE = 'flash-success';
        var ERROR_MESSAGE_TYPE   = 'flash-error';
        var INFO_MESSAGE_TYPE    = 'flash-info';
        var message;
        var setMessage = function( messageDetail ){
            message = messageDetail;
            $rootScope.$broadcast( 'flash:message' );
        };
        return {
            setSuccessMessage: function( message ){
                if( message ){
                    setMessage( { type: SUCCESS_MESSAGE_TYPE, msg: message } );
                }
            },
            setErrorMessage: function( message ){
                if( message ){
                    setMessage( { type: ERROR_MESSAGE_TYPE, msg: message } );
                }
            },
            setInformationMessage: function( mess
'use strict';
exports.__esModule = true;
var _skeletonService = require('./skeleton-service');
var _accountService = require('./account-service');
var _accountDeviceService = require('./account-device-service');
var _contactService = require('./contact-service');
var _deliveryAddressService = require('./delivery-address-service');
var _fileAccessService = require('./file-access-service');
var _merchantService = require('./merchant-service');
var _newsService = require('./news-service');
var _notificationService = require('./notification-service');
var _publicMerchantService = require('./public-merchant-service');
var _storeService = require('./store-service');
var _transactionService = require('./transaction-service');
var _storeGroupService = require('./store-group-service');
var General = {};
exports.General = General;
General.SkeletonService = _skeletonService.SkeletonService;
General.AccountService = _accountService.AccountService;
General.AccountDeviceService = _accountDeviceServi
(function() {
    'use strict';
    angular.module('triggerWarningsApp.tvdb')
        .factory('tvdb', [
            'Restangular',
            function(Restangular) {
                var o = {
                    showList: [],
                    show: {},
                    episode: {}
                };
                var andSetEpisode;
                o.findShow = function(name) {
                    return Restangular.all('tvdb')
                        .all('shows').getList({
                            name: name
                        }).then(function(data) {
                            o.showList = data;
                        });
                };
                o.getShow = function(id) {
                    if (o.show.tvShow === undefined || o.show.tvShow.id !== id) {
                        return Restangular.all('tvdb')
                            .one('shows', id).get()
                            .then(function(data) {
                                o.show = data;
var dir_e0f2ff7a7260cb178251da88c43cf670 =
    [ "Auth", "dir_544774bcf2d41001fe4f60f9eaa884c6.html", "dir_544774bcf2d41001fe4f60f9eaa884c6" ],
    [ "Controller.php", "app_2_http_2_controllers_2_controller_8php.html", [
      [ "Controller", "class_app_1_1_http_1_1_controllers_1_1_controller.html", null ]
    ] ],
    [ "HomeController.php", "_home_controller_8php.html", [
      [ "HomeController", "class_app_1_1_http_1_1_controllers_1_1_home_controller.html", "class_app_1_1_http_1_1_controllers_1_1_home_controller" ]
    ] ],
    [ "ModuleController.php", "_module_controller_8php.html", [
      [ "ModuleController", "class_app_1_1_http_1_1_controllers_1_1_module_controller.html", "class_app_1_1_http_1_1_controllers_1_1_module_controller" ]
    ] ],
    [ "ProjectController.php", "_project_controller_8php.html", [
      [ "ProjectController", "class_app_1_1_http_1_1_controllers_1_1_project_controller.html", "class_app_1_1_http_1_1_controllers_1_1_project_controller" ]
    ] ],
    [ "
var middleware  = require('../middleware').middleware,
    api         = require('../api');
module.exports = function (server) {
    /* TODO: auth should be public auth not user auth */
    server.get('/ghost/api/v0.1/posts', middleware.authAPI, api.requestHandler(api.posts.browse));
    server.post('/ghost/api/v0.1/posts', middleware.authAPI, api.requestHandler(api.posts.add));
    server.get('/ghost/api/v0.1/posts/:id', middleware.authAPI, api.requestHandler(api.posts.read));
    server.put('/ghost/api/v0.1/posts/:id', middleware.authAPI, api.requestHandler(api.posts.edit));
    server.del('/ghost/api/v0.1/posts/:id', middleware.authAPI, api.requestHandler(api.posts.destroy));
    server.get('/ghost/api/v0.1/posts/getSlug/:title', middleware.authAPI, api.requestHandler(api.posts.getSlug));
    server.get('/ghost/api/v0.1/settings/', middleware.authAPI, api.requestHandler(api.settings.browse));
    server.get('/ghost/api/v0.1/settings/:key/', middleware.authAPI, api.requestHandler(api
BhProducts = function (productService, currencyService, pricingSchemaService){
    var self = this;
    if(!(productService instanceof ProductService))
        throw new Meteor.Error("Given product service is not instance of ProductService");
    if(!(currencyService instanceof CurrencyService))
        throw new Meteor.Error("Given product service is not instance of CurrencyService");
    if(!(pricingSchemaService instanceof PricingSchemaService))
        throw new Meteor.Error("Given product service is not instance of PricingSchemaService");
    this.productService = productService;	
    this.currencyService = currencyService;
    this.pricingSchemaService = pricingSchemaService;
    if(Meteor.isServer){
    	this.publish();
    }
    if(Meteor.isClient){
    	this.subscribe();
    }
BhProducts.prototype.constructor = BhProducts;
BhProducts.prototype.subscribe = function(){
	this.currencyService.subscribe();
	this.productService.subscribe();
    this.pricingSchemaService.subscribe();
/* globals NAMESPACE */
/* eslint-disable fecs-camelcase */
/**
 * @file nav 组件
 * @author wanghongliang02
 */
$.widget('blend.nav', {
    /**
     * 组件的默认选项，可以由多重覆盖关系
     */
    options: {
        column: 3,
        animate: true,
        time: 500,
        expand: '<i>更多</i>',
        pack: '<i>收起</i>',
        itemClass: NAMESPACE + 'nav-item',
        row: false,
        rowHeight: 30
    },
    /**
     * _create 创建组件时调用一次
     */
    _create: function () {
        var nav = this;
        var $el = nav.element;
        nav.$items = $el.find('.' + nav.options.itemClass);
        nav.expandClass = NAMESPACE + 'nav-expand';
        nav.animateClass = NAMESPACE + 'nav-animation';
        nav.expandedClass = NAMESPACE + 'nav-expanded';
        nav.columnClassPre = NAMESPACE + 'nav-column-';
        nav.hideClass = NAMESPACE + 'nav-item-hide';
        nav.noborderClass = NAMESPACE + 'nav-item-no-border';
        nav.columnRange = [2, 3, 4, 5, 6];
        nav.expandTaped = false;
    },

    /**
     * _init 初始化的时候调用
     */
    _init: function () {
        var nav = this;
        nav._setColumn();
        nav._setRow();
        FastClick.attach(nav.element[0]);
        /*
        setTimeout(function (){
            if (nav.options.animate) {
                nav.element.addClass(nav.animateClass);
            }
            else {
                nav.element.removeClass(nav.animateClass);
            }
        }, 100);
        */
        if (!nav.inited) {
            nav._initEvent();
            nav.inited = true;
        }
    },
    /**
     *
     * @private
     */
    _initEvent: function () {
        var nav = this;
        nav.element.on('click.nav', '.' + nav.expandClass, function (e) {
            nav.expandTaped = true;
            setTimeout(function (){
                nav.expandTaped = false;
            }, 500);
            /*
            if (!new RegExp(nav.expandClass).test(e.target.parentNode.className)){
                return ;
            }*/
    

            if ($this.hasClass(nav.expandedClass)) {
                var height = nav.$items.eq(0).height();
                
                if (nav.options.animate){
                    nav.element.animate({'height': height * nav.options.row}, 300, "ease-in");
                }else{
                    nav.element.css('height', height * nav.options.row);
                }
                
                var max = nav.options.row * nav.options.column;
                nav.$items.each(function (i) {
                    var $navItem = $(this);
                    if (i >= max - 1) {
                        if (nav.options.animate) {
                            setTimeout(function () {
                                $navItem.addClass(nav.hideClass);
                            }, nav.options.time);
                        }
                        else {
                            $navItem.addClass(nav.hideClass);
                        }
                    }
                    if 

                        if (nav.options.animate) {
                            setTimeout(function () {
                                $navItem.addClass(nav.noborderClass);
                            }, nav.options.time);
                        }
                        else {
                            $navItem.addClass(nav.noborderClass);
                        }
                    } else {
                        if (nav.options.animate) {
                            setTimeout(function () {
                                $navItem.removeClass(nav.noborderClass);
                            }, nav.options.time);
                        }
                        else {
                            $navItem.removeClass(nav.noborderClass);
                        }
                    }
                });
                if (nav.options.animate) {
                    setTimeout(function () {
                        $this.html(nav.options.expand);
                        $this.re

                    }, nav.options.time);
                }
                else {
                    $this.html(nav.options.expand);
                    $this.removeClass(nav.expandedClass);
                }
            }
            else {
                var len = nav.$items.length;
                var row = Math.ceil(len / nav.options.column) + (len % nav.options.column ? 0 : 1);
                height = nav.$items.eq(0).height() * row;
                if (nav.options.animate){
                    nav.element.animate({'height': height}, 300, "ease-in");
                }else{
                    nav.element.css('height', height);
                }
                $this.addClass(nav.expandedClass);
                
                nav.$items.removeClass(nav.hideClass);
                $this.html(nav.options.pack);
                var offset = len % nav.options.column || nav.options.column;
                var max = len - offset;
                nav.$items.each(function (i) {
    

                    if (i >= max) {
                        $this.addClass(nav.noborderClass);
                    } else {
                        $this.removeClass(nav.noborderClass);
                    }
                });
            }
            if (nav.options.expandHandle && $.isFunction(nav.options.expandHandle)) {
                nav.options.expandHandle(e);
            }
        });
        nav.element.on('click.nav', "." + nav.options.itemClass, function (e){
            if (nav.expandTaped){
                e.preventDefault();
                return false;
            }
            
        });
    },
    /**
     * _setColumn 自定义的成员函数，
     * 所有以下划线开头的函数不可在外部调用
     */
    _setColumn: function () {
        var nav = this;
        var $el = nav.element;
        /**
         * 处理column范围
         */
        var columnNum = ($el[0].className).match(/blend\-nav\-column\-(\d{1})/);
        
        if (columnNum){
            nav.options.column = parseInt(columnNum[1], 10);

        }
        
        if (nav.options.column && $.inArray(nav.options.column, nav.columnRange) === -1) {
            nav.options.column = 3;
        }
        var columnClass = [];
        for (var i = 0; i < nav.columnRange.length; i++) {
            columnClass.push(nav.columnClassPre + nav.columnRange[i]);
        }
        $el.removeClass(columnClass.join(' ')).addClass(nav.columnClassPre + nav.options.column);
    },
    /**
     * _setRow 自定义的成员函数，
     * @private
     */
    _setRow: function () {
        var nav = this;
        var option = nav.options;
        if (option.row === false) {
            nav._removeExpand();
            return;
        }
        option.row = parseInt(option.row, 10);
        if (option.row < 1) {
            option.row = false;
            nav._removeExpand();
            return;
        }
        var length = nav.$items.length;
        var max = option.column * option.row;
        if (max >= length) {
            nav._removeExpand();
       

        }
        nav._addExpand(max);
    },
    /**
     * remove expand
     * @private
     */
    _removeExpand: function () {
        var nav = this;
        var option = nav.options;
        var $el = nav.element;
        var len = nav.$items.length;
        var row = Math.ceil(len / nav.options.column);
        var rowHeight = nav.$items.eq(0).height() > 0 ? nav.$items.eq(0).height() : option.rowHeight;
        var height = rowHeight * row ;
        $el.css('height', height);
        $el.find('.' + nav.expandClass).remove();
        nav.$items.removeClass(this.hideClass);
        var max = (option.column - 1) * option.row;
        nav.$items.each(function (i) {
            var $this = $(this);
            if (i >= max) {
                $this.addClass(nav.noborderClass);
            } else {
                $this.removeClass(nav.noborderClass);
            }
        });
    },
    /**
     * @param {number} max 最大行数
     * @private
     */
    _addExpand: function (max) {
    

        var option = nav.options;
        nav.$items.each(function (i) {
            var $this = $(this);
            if (i >= max - nav.options.column) {
                $this.addClass(nav.noborderClass);
            } else {
                $this.removeClass(nav.noborderClass);
            }
            if (i >= max - 1) {
                $this.addClass(nav.hideClass);
            }
            else {
                $this.removeClass(nav.hideClass);
            }
        });
        var height = nav.$items.eq(0).height() > 0 ? nav.$items.eq(0).height() : option.rowHeight;
        
        nav.element.css('height', height * nav.options.row);
        if (nav.element.find('.' + nav.expandClass).length === 1) {
            nav.element.find('.' + nav.expandClass).removeClass(nav.expandedClass).html(nav.options.expand);
        }
        else {
            nav.element.append('<span class="' +
                nav.options.itemClass + ' ' + nav.expandClass + '">' + nav.options.expand + '</s
$(document).ready(function () {
    var header_open = false;
    $(".nav-brand").hover(function () {
        if ($(window).width() > 768) {
            $(".nav-contents div").removeClass("nav-open");
            $(".nav-contents .nav-brand").addClass("nav-open");
            $("body").addClass("body-pushdown");
            $(".nav-brand").addClass("hover-current");
            header_open = true;
        }
    }, function () {
        if ($(window).width() > 768) {
        	$(".nav-brand").removeClass("hover-current");
        }
    });
    $(".nav-about").hover(function () {
        if ($(window).width() > 768) {
            $(".nav-contents div").removeClass("nav-open");
            $(".nav-contents .nav-about").addClass("nav-open");
            $("body").addClass("body-pushdown");
            $(".nav-about").addClass("hover-current");
            header_open = true;
        }
    }, function () {
        if ($(window).width() > 768) {
        	$(".nav-about").removeClass("hover-curr

        }
    });
    $(".nav-academics").hover(function () {
        if ($(window).width() > 768) {
            $(".nav-contents div").removeClass("nav-open");
            $(".nav-contents .nav-academics").addClass("nav-open");
            $("body").addClass("body-pushdown");
            $(".nav-academics").addClass("hover-current");
            header_open = true;
        }
    }, function () {
        if ($(window).width() > 768) {
        	$(".nav-academics").removeClass("hover-current");
        }
    });
    $(".nav-research").hover(function () {
        if ($(window).width() > 768) {
            $(".nav-contents div").removeClass("nav-open");
            $(".nav-contents .nav-research").addClass("nav-open");
            $("body").addClass("body-pushdown");
            $(".nav-research").addClass("hover-current");
            header_open = true;
        }
    }, function () {
        if ($(window).width() > 768) {
        	$(".nav-research").removeClass("hover-current");
       

    });
    $(".nav-portfolio").hover(function () {
        if ($(window).width() > 768) {
            $(".nav-contents div").removeClass("nav-open");
            $(".nav-contents .nav-portfolio").addClass("nav-open");
            $("body").addClass("body-pushdown");
            $(".nav-portfolio").addClass("hover-current");
            header_open = true;
        }
    }, function () {
        if ($(window).width() > 768) {
        	$(".nav-portfolio").removeClass("hover-current");
        }
    });
    $(".nav-people").hover(function () {
        if ($(window).width() > 768) {
            $(".nav-contents div").removeClass("nav-open");
            $(".nav-contents .nav-people").addClass("nav-open");
            $("body").addClass("body-pushdown");
            $(".nav-people").addClass("hover-current");
            header_open = true;
        }
    }, function () {
        if ($(window).width() > 768) {
        	$(".nav-people").removeClass("hover-current");
        }
    });
    $("

        if ($(window).width() > 768) {
            $(".nav-contents div").removeClass("nav-open");
            $(".nav-contents .nav-news").addClass("nav-open");
            $("body").addClass("body-pushdown");
            $(".nav-news").addClass("hover-current");
            header_open = true;
        }
    }, function () {
        if ($(window).width() > 768) {
        	$(".nav-news").removeClass("hover-current");
        }
    });
    $("nav").hover(function () {
        if ($(window).width() > 768) {
            $(".nav-contents").addClass("nav-open");
            $("body").addClass("body-pushdown");
            if (header_open == false) {
                $(".nav-contents .nav-brand").addClass("nav-open");
            }
            header_open = true;
        }
    }, function () {
        if ($(window).width() > 768) {
            $(".nav-contents div").removeClass("nav-open");
            $("body").removeClass("body-pushdown");
            $(".nav-contents").removeClass("nav-op
export const getClass = (classId) => (dispatch) => api.getClass(classId)
  .then(res => dispatch({ type: 'class:set', clazz: res.data }))
  .catch(res => {
    if (res.status === 404) {
      return showError(F.map(res.data, d => d.code), 'クラスが見つかりませんでした。')(dispatch);
    } else {
      return showError(F.map(res.data, d => d.code))(dispatch);
    }
  });
export const clearClass = (dispatch) => {
  dispatch({ type: 'class:clear' });
  return Promise.resolve(true);
};
export const getReviews = (classId) => (dispatch) => api.getReviews(classId)
  .then(res => {
    dispatch({ type: 'class:reviews:set', items: res.data, of: classId });
    return true;
  })
  .catch(res => {
    return showError(F.map(res.data, d => d.code))(dispatch);
  });
export const clearReviews = (dispatch) => {
  dispatch({ type: 'class:reviews:clear' });
  return Promise.resolve(true);
};
export const getClassArticles = (classId) => (dispatch) => api.getClassArticles(classId)
  .then(res => {
    dispatch({ type: 

    return true;
  })
  .catch(res => {
    return showError(F.map(res.data, d => d.code))(dispatch);
  });
export const clearClassArticles = (dispatch) => {
  dispatch({ type: 'class:articles:clear' });
  return Promise.resolve(true);
};
export const getClassArticle = (id) => (dispatch) => api.getClassArticle(id)
  .then(res => {
    dispatch({ type: 'class:article:set', article: res.data });
    return true;
  })
  .catch(res => {
    return showError(F.map(res.data, d => d.code))(dispatch);
  });
export const clearClassArticle = (dispatch) => {
  dispatch({ type: 'class:article:clear' });
  return Promise.resolve(true);
};
export const getClassResources = (classId) => (dispatch) => api.getClassResources(classId)
  .then(res => {
    dispatch({ type: 'class:resources:set', items: res.data, of: classId });
    return true;
  })
  .catch(res => {
    return showError(F.map(res.data, d => d.code))(dispatch);
  });
export const clearClassResources = (dispatch) => {
  dispatch({ type: 'c
(function() {'use strict';
angular.module('ag-admin').controller(
    'ApiVersionController',
    function($scope, $state, $stateParams, flash, ApiRepository) {
        ApiRepository.getApi($stateParams.apiName, $stateParams.version).then(
            function (api) {
                $scope.api = api;
                $scope.currentVersion = api.version;
                $scope.defaultApiVersion = api.default_version;
            }
        );
        $scope.createNewApiVersion = function () {
            ApiRepository.createNewVersion($scope.api.name).then(
                function (data) {
                    flash.success = 'A new version of this API was created';
                    $state.go('ag.api.version', {apiName: $scope.api.name, version: data.version});
                }
            );
        };
        $scope.setDefaultApiVersion = function () {
            flash.info = 'Setting the default API version to ' + $scope.defaultApiVersion;
            ApiRepository.setDefaultApiV
var group__message =
    [ "PN_DEFAULT_PRIORITY", "group__message.html#ga732b155202644a5c5be75a651a3c4fac", null ],
    [ "pn_message_t", "group__message.html#gad9259fa9271e8844c8e05a7e8978e3b2", null ],
    [ "pn_format_t", "group__message.html#gac9e19f8c1ae0fe614cb69d9c54758661", [
      [ "PN_DATA", "group__message.html#ggac9e19f8c1ae0fe614cb69d9c54758661aa983003846efcbca9f2a1b154f59ca41", null ],
      [ "PN_TEXT", "group__message.html#ggac9e19f8c1ae0fe614cb69d9c54758661a9a681b2a0a7edf057d27ba0e5d2417c6", null ],
      [ "PN_AMQP", "group__message.html#ggac9e19f8c1ae0fe614cb69d9c54758661aed7d939aba698a423b5b5f5414cf6dbb", null ],
      [ "PN_JSON", "group__message.html#ggac9e19f8c1ae0fe614cb69d9c54758661acaf1e8c8d8d87978454d36ceaef687ed", null ]
    ] ],
    [ "pn_message", "group__message.html#ga29b1ebb0e3d0f4663e679eb92b5dfdb9", null ],
    [ "pn_message_annotations", "group__message.html#gac41af78e905b660a8df54baad6499a2d", null ],
    [ "pn_message_body", "group__message.html#g

    [ "pn_message_clear", "group__message.html#gad82108b69076e73f9a413297eb0fe93a", null ],
    [ "pn_message_correlation_id", "group__message.html#gaa030d35726172445701c3abd365717b3", null ],
    [ "pn_message_data", "group__message.html#ga52f6698684a9aaf377388060a95cef20", null ],
    [ "pn_message_decode", "group__message.html#ga8e14c80d737f01e2a54b8198c48910d4", null ],
    [ "pn_message_encode", "group__message.html#ga9b9e3322a64a594001f1d97f7cf2affa", null ],
    [ "pn_message_errno", "group__message.html#ga98c45926c58fabb1465c59d9aa4056ff", null ],
    [ "pn_message_error", "group__message.html#ga87bacde8d1733671663832dbb9fd097c", null ],
    [ "pn_message_free", "group__message.html#ga02854827986ba1b0e36d0005674661c4", null ],
    [ "pn_message_get_address", "group__message.html#ga8cb345cb31c3a3349688799b6b4f2006", null ],
    [ "pn_message_get_content_encoding", "group__message.html#ga9ec4d67e6527397023d119ae81f57c03", null ],
    [ "pn_message_get_content_type", "group__mess

    [ "pn_message_get_correlation_id", "group__message.html#ga85500c85e451bb223084a5261be4f107", null ],
    [ "pn_message_get_creation_time", "group__message.html#gaaac9bf53b47cbfba119f47ecd08c6bc6", null ],
    [ "pn_message_get_delivery_count", "group__message.html#gae6061ca4cd91f35db285ad4e736b4880", null ],
    [ "pn_message_get_expiry_time", "group__message.html#gab79cc8c5eb7352d82e8f5bbfbe06234c", null ],
    [ "pn_message_get_format", "group__message.html#ga6aba2961550148af88953bef1358d558", null ],
    [ "pn_message_get_group_id", "group__message.html#gaac9c32067e50f3279fe17b17a3b0cc7f", null ],
    [ "pn_message_get_group_sequence", "group__message.html#ga7820752b1c9d5f88e74d291e48fc1638", null ],
    [ "pn_message_get_id", "group__message.html#ga6dc34192b0b265792e80b909733fc446", null ],
    [ "pn_message_get_priority", "group__message.html#gaf0df7d607fb85c78ada340df52db745c", null ],
    [ "pn_message_get_reply_to", "group__message.html#gafe7577a90ec17ff77af79e1b544557d7",

    [ "pn_message_get_reply_to_group_id", "group__message.html#ga165beee02cfa76912ec7eb89e3869135", null ],
    [ "pn_message_get_subject", "group__message.html#gaf5a583d0cc1ee1a91d02e3f772a25771", null ],
    [ "pn_message_get_ttl", "group__message.html#ga9bc059be1b3f8b48e3e02d03bd0e31cf", null ],
    [ "pn_message_get_user_id", "group__message.html#gab420ee7f0d06a3771e27b3bc0d97ded2", null ],
    [ "pn_message_id", "group__message.html#gad63613b52062ab477ac9c32f7131cda4", null ],
    [ "pn_message_instructions", "group__message.html#gae22d080b9928ac446349117783e5e1e7", null ],
    [ "pn_message_is_durable", "group__message.html#ga0639e7686a2fdaabec64e26675fa805a", null ],
    [ "pn_message_is_first_acquirer", "group__message.html#ga147807825163b84d9fdd7556fad42608", null ],
    [ "pn_message_is_inferred", "group__message.html#ga19e41e8cfac95c2cd0f77a92c4ec85eb", null ],
    [ "pn_message_load", "group__message.html#gaaa526d6ec1cde05df7e23d3ba516edbd", null ],
    [ "pn_message_load_

    [ "pn_message_load_data", "group__message.html#gaeb4329a67ed4f857f6c0bab4c31f0f10", null ],
    [ "pn_message_load_json", "group__message.html#ga1e07103c4f6f17dc7f6daba411a504ab", null ],
    [ "pn_message_load_text", "group__message.html#ga936104959a6c268aab93f507e83236c2", null ],
    [ "pn_message_properties", "group__message.html#ga197f2c80f13dbfc5ee5527d387a0beab", null ],
    [ "pn_message_save", "group__message.html#gaf9a8e26c94501562806b91b985dca02f", null ],
    [ "pn_message_save_amqp", "group__message.html#ga7a7d5f7c16bf75f8d4eda60df9ec0821", null ],
    [ "pn_message_save_data", "group__message.html#ga68267321d36422c4e583493c7069ef5c", null ],
    [ "pn_message_save_json", "group__message.html#ga3b4aea1fc262bf1c919de24f5ce116ab", null ],
    [ "pn_message_save_text", "group__message.html#ga9bcfe640de138e846a3c7c36ec9b82ed", null ],
    [ "pn_message_set_address", "group__message.html#gadae5d992568a088c561e5ddcdde13705", null ],
    [ "pn_message_set_content_encoding", 

    [ "pn_message_set_content_type", "group__message.html#ga8881958619bd06d75c0c6cfffc59ee07", null ],
    [ "pn_message_set_correlation_id", "group__message.html#gad8cc824cf918cec1a53816c15527322a", null ],
    [ "pn_message_set_creation_time", "group__message.html#ga7f328d0874a181f508b0af9eece5e95d", null ],
    [ "pn_message_set_delivery_count", "group__message.html#ga9e29a74bbaf88a38d488df17940f637a", null ],
    [ "pn_message_set_durable", "group__message.html#ga29d5812830f4379461472761cd5e056b", null ],
    [ "pn_message_set_expiry_time", "group__message.html#gad5044e606189589abafd65890d8824d8", null ],
    [ "pn_message_set_first_acquirer", "group__message.html#ga00b7a4b62de07b070191398e1f1cff02", null ],
    [ "pn_message_set_format", "group__message.html#gae413b93fd4f1282e304fed7d6e25f6c5", null ],
    [ "pn_message_set_group_id", "group__message.html#ga0ba2c671c5db93e8c7321ef6e66c962e", null ],
    [ "pn_message_set_group_sequence", "group__message.html#ga31d881ca2663b0903f9
/*jshint node: true */
module.exports = function(app, logControllerApi, tokenSecurityControllerApi, authControllerApi, notifyControllerApi){
    
    app.post('/api/log/*(:token){0,1}', logControllerApi.log);
    app.post('/api/auditlog/*(:token){0,1}', logControllerApi.auditLog);
    
    app.get('/api/log/type/:type',authControllerApi.isAuthenticated,  logControllerApi.getLogs);
    app.get('/api/log',authControllerApi.isAuthenticated,  logControllerApi.getLogs);
    
    app.get('/api/auditlog',authControllerApi.isAuthenticated,  logControllerApi.getAllAuditLogs);
    app.get('/api/auditlog/type/:type',authControllerApi.isAuthenticated,  logControllerApi.getAuditLogsByType);
    app.get('/api/auditlog/type/:type/userid/:userid',authControllerApi.isAuthenticated,  logControllerApi.getAuditLogs);
    app.get('/api/auditlog/ip/:ip',authControllerApi.isAuthenticated,  logControllerApi.getAuditLogsIp);
    app.get('/api/auditlog/userid/:userid',authControllerApi.isAuthenticated,  logCont
define('wikipedia_game_data', [], 
	function () {
	'use strict';
	var WikipediaBoard = function() {};
	WikipediaBoard.generateData = function(){
		return [
					{val: 5, show: true}, {val: 3, show: true}, {val: 4, show:false},
					{val: 6, show: false}, {val: 7, show: true}, {val: 8, show:false},
					{val: 9, show: false}, {val: 1, show: false}, {val: 2, show: false},
					{val: 6, show: true}, {val: 7, show: false}, {val: 2, show: false},
					{val: 1, show: true}, {val: 9, show: true}, {val: 5, show: true},
					{val: 3, show: false}, {val: 4, show: false}, {val: 8, show: false},
					{val: 1, show: false}, {val: 9, show: true}, {val: 8, show: true},
					{val: 3, show: false}, {val: 4, show: false}, {val: 2, show: false},
					{val: 5, show: false}, {val: 6, show: true}, {val: 7, show: false},
					{val: 8, show: true}, {val: 5, show: false}, {val: 9, show:false},
					{val: 7, show: false}, {val: 6, show: true}, {val: 1, show: false},
					{val: 4, show: false}, {val: 2, show: fa

					{val: 4, show: true}, {val: 2, show: false}, {val: 6, show:false},
					{val: 8, show: true}, {val: 5, show: false}, {val: 3, show: true},
					{val: 7, show: false}, {val: 9, show: false}, {val: 1, show: true},
					{val: 7, show: true}, {val: 1, show: false}, {val: 3, show:false},
					{val: 9, show: false}, {val: 2, show: true}, {val: 4, show: false},
					{val: 8, show: false}, {val: 5, show: false}, {val: 6, show: true},
					{val: 9, show: false}, {val: 6, show: true}, {val: 1, show:false},
					{val: 5, show: false}, {val: 3, show: false}, {val: 7, show: false},
					{val: 2, show: true}, {val: 8, show: true}, {val: 4, show: false},
					{val: 2, show: false}, {val: 8, show: false}, {val: 7, show:false},
					{val: 4, show: true}, {val: 1, show: true}, {val: 9, show: true},
					{val: 6, show: false}, {val: 3, show: false}, {val: 5, show: true},
					{val: 3, show: false}, {val: 4, show: false}, {val: 5, show: false},
					{val: 2, show: false}, {val: 8, show: true}, {val:
/*jslint node: true, vars: true, white: true */
"use strict";
var apiSettings = require('./api-settings');
var apiGroup = require('./api-group');
var apiMasks = require('./api-masks');
var apiUtilities = require('./api-utilities');
var agtApiRoutes = require('./api-routes/agt-api');
var certApiRoutes = require('./api-routes/cert-api');
var chrApiRoutes = require('./api-routes/chr-api');
var crpApiRoutes = require('./api-routes/crp-api');
var dgmApiRoutes = require('./api-routes/dgm-api');
var eveApiRoutes = require('./api-routes/eve-api');
var invApiRoutes = require('./api-routes/inv-api');
var mapApiRoutes = require('./api-routes/map-api');
module.exports = function(db, app) {
	var APIGroup = apiGroup(db, app, apiMasks);
	var agtApiGroup = new APIGroup(apiSettings.apiPrefix, apiSettings.agtApiPrefix);
	var certApiGroup = new APIGroup(apiSettings.apiPrefix, apiSettings.certApiPrefix);
	var chrApiGroup = new APIGroup(apiSettings.apiPrefix, apiSettings.chrApiPrefix);
	var crpApiGroup = n
agbeServices.factory('dataService', ['$log','persistenceService', function ($log,persistenceService) {
    var dataService = {
        CHARACTER_DATA_KEY : 'CHARACTER_DATA_KEY',
        characterData : undefined,
        INVENTORY_DATA_KEY : 'INVENTORY_DATA_KEY',
        inventoryData : undefined,
        STORY_DATA_KEY : 'STORY_DATA_KEY',
        storyData : undefined,
        WORLD_DATA_KEY : 'WORLD_DATA_KEY',
        worldData : undefined,
        load : function() {
            $log.log("dataService.load");
            dataService.characterData = persistenceService.objectFromPersistence(dataService.CHARACTER_DATA_KEY);
            dataService.inventoryData = persistenceService.objectFromPersistence(dataService.INVENTORY_DATA_KEY);
            dataService.storyData = persistenceService.objectFromPersistence(dataService.STORY_DATA_KEY);
        },
        save : function() {
            $log.log("dataService.save");
            persistenceService.objectToPersistence(dataService.CHARA
(function() {
    $(document).ready(function() {
        var body, content, nav, nav_closed_width, nav_open, nav_toggler;
        nav_toggler = $("header .toggle-nav");
        nav = $("#main-nav");
        content = $("#content");
        body = $("body");
        nav_closed_width = 50;
        nav_open = body.hasClass("main-nav-opened") || nav.width() > nav_closed_width;
        $("#main-nav .dropdown-collapse").on("click", function(e) {
            var link, list;
            e.preventDefault();
            link = $(this);
            list = link.parent().find("> ul");
            if (list.is(":visible")) {
                if (body.hasClass("main-nav-closed") && link.parents("li").length === 1) {
                    false;
                } else {
                    link.removeClass("in");
                    list.slideUp(300, function() {
                        return $(this).removeClass("in");
                    });
                }
            } else {
                link.ad

                list.slideDown(300, function() {
                    return $(this).addClass("in");
                });
            }
            return false;
        });
        nav.swiperight(function(event, touch) {
            return $(document).trigger("nav-open");
        });
        nav.swipeleft(function(event, touch) {
            return $(document).trigger("nav-close");
        });
        nav_toggler.on("click", function() {
            if (nav_open) {
                $(document).trigger("nav-close");
            } else {
                $(document).trigger("nav-open");
            }
            return false;
        });
        $(document).bind("nav-close", function(event, params) {
            body.removeClass("main-nav-opened").addClass("main-nav-closed");
            return nav_open = false;
        });
        return $(document).bind("nav-open", function(event, params) {
            body.addClass("main-nav-opened").removeClass("main-nav-closed");
            return na
currencyApp.config(function($routeProvider){
                                $routeProvider
                                    .when('/home',{templateUrl: 'partials/home.html', controller: 'currencyController'})
                                    .when('/currency',{templateUrl: 'partials/currencyList.html', controller: 'currencyController'})
                                    .when('/news',{templateUrl: 'partials/news.html', controller: 'currencyController'})
                                    .when('/links',{templateUrl: 'partials/links.html', controller: 'currencyController'})
                                    .when('/contacts',{templateUrl: 'partials/email.html', controller: 'currencyController'})
                                    .when('/single/:id',{templateUrl: 'partials/singleCurency.html', controller: 'currencyController'})
                                    .otherwise({redirectTo : '/home', templateUrl: 'partials/home.html', controller:'currencyController'});
        
/* */ 
(function(process) {
  'use strict';
  var EventConstants = require('./EventConstants');
  var ReactErrorUtils = require('./ReactErrorUtils');
  var invariant = require('fbjs/lib/invariant');
  var warning = require('fbjs/lib/warning');
  var injection = {
    Mount: null,
    injectMount: function(InjectedMount) {
      injection.Mount = InjectedMount;
      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
      }
    }
  };
  var topLevelTypes = EventConstants.topLevelTypes;
  function isEndish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
  }
  function isMoveish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseMov

  }
  function isStartish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
  }
  var validateEventDispatches;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches = function(event) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchIDs = event._dispatchIDs;
      var listenersIsArr = Array.isArray(dispatchListeners);
      var idsIsArr = Array.isArray(dispatchIDs);
      var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
      var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
      process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
    };
  }
  function executeDispatch(event, simulated, listener, domID) {
    var type = event.type || 'unknown-event';
    event.currentTarget = injection.Mount.getNode(domID);
    i

      ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
    } else {
      ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
    }
    event.currentTarget = null;
  }
  function executeDispatchesInOrder(event, simulated) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;
    if (process.env.NODE_ENV !== 'production') {
      validateEventDispatches(event);
    }
    if (Array.isArray(dispatchListeners)) {
      for (var i = 0; i < dispatchListeners.length; i++) {
        if (event.isPropagationStopped()) {
          break;
        }
        executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
      }
    } else if (dispatchListeners) {
      executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
    }
    event._dispatchListeners = null;
    event._dispatchIDs = null;
  }
  function executeDispatchesInOrderStopAtTrueImpl(event) {
    var dispatchListeners = eve

    var dispatchIDs = event._dispatchIDs;
    if (process.env.NODE_ENV !== 'production') {
      validateEventDispatches(event);
    }
    if (Array.isArray(dispatchListeners)) {
      for (var i = 0; i < dispatchListeners.length; i++) {
        if (event.isPropagationStopped()) {
          break;
        }
        if (dispatchListeners[i](event, dispatchIDs[i])) {
          return dispatchIDs[i];
        }
      }
    } else if (dispatchListeners) {
      if (dispatchListeners(event, dispatchIDs)) {
        return dispatchIDs;
      }
    }
    return null;
  }
  function executeDispatchesInOrderStopAtTrue(event) {
    var ret = executeDispatchesInOrderStopAtTrueImpl(event);
    event._dispatchIDs = null;
    event._dispatchListeners = null;
    return ret;
  }
  function executeDirectDispatch(event) {
    if (process.env.NODE_ENV !== 'production') {
      validateEventDispatches(event);
    }
    var dispatchListener = event._dispatchListeners;
    var dispatchID = event._dispatchID
var _services = {};
var _service;
$(document).ready(start);
$(document).on("click","#serviceList a", function() { bindService(this.id); });
function start() {
	function serviceFoundCB(service) {
		_services[service.id] = service;
		var serviceDiv = $("<div>");
		serviceDiv.attr("id", "div-" + service.id);
		var serviceAnchor = $("<a>");
		serviceAnchor.attr("id",service.id);
		serviceAnchor.attr("href","#");
		serviceAnchor.text(service.serviceAddress);
		serviceDiv.append(serviceAnchor);
		var serviceAnswer = $("<span>");
		serviceAnswer.attr("id","ans-" + service.id);
		serviceDiv.append(serviceAnswer);
		$(serviceList).append(serviceDiv.clone());
        }
	function serviceLostCB(service) {
		_services[service.id] = null;
	}
	function error(discoveryError) {
		alert("Discovery error: " + discoveryError.message + " (Code: #" + discoveryError.code + ")");
	}
	webinos.discovery.findServices(
			{onFound:serviceFoundCB, onLost:serviceLostCB, onError:error}, null, null);
function bindSer
var class_snowflake_1_1_controller_1_1_controller_profile_store =
    [ "ControllerProfileStore", "class_snowflake_1_1_controller_1_1_controller_profile_store.html#a6004eae687a65457cdf0c3eccd7c0dfd", null ],
    [ "ControllerProfileStore", "class_snowflake_1_1_controller_1_1_controller_profile_store.html#aa77c800485bfdaa73c4af26f3b648df9", null ],
    [ "GetControllerProfile", "class_snowflake_1_1_controller_1_1_controller_profile_store.html#ae734baf269fef01f5edbc82ab11ffdab", null ],
    [ "SetControllerProfile", "class_snowflake_1_1_controller_1_1_controller_profile_store.html#afe17a0f6ce3efd1ba7eb760c0d91d4c2", null ],
    [ "AvailableProfiles", "class_snowflake_1_1_controller_1_1_controller_profile_store.html#a53819617296697a20927c831ceb1419e", null ],
    [ "ControllerID", "class_snowflake_1_1_controller_1_1_controller_profile_store.html#af2a1e93cfabff117267c9499ad20f1fd", null ],
    [ "this[string deviceName]", "class_snowflake_1_1_controller_1_1_controller_profile_store.html#a0
/**
 * Created by alex on 29.04.15.
 */
var showedMessage = 0;
var countMessage = $('.flash-message').length;
var currentMessage;
var currentHeight;
$('.flash-message').on('click', function(event){
    $(this).stop().slideUp();
    event.preventDefault();
});
function showMessage(index) {
    currentMessage = $('.flash-message').eq(index);
    setTimeout(function(){
        currentMessage.slideDown(function() {
            currentHeight = $(this).height();
            if(++showedMessage < countMessage) {
                showMessage(showedMessage);
            } else {
                showedMessage = 0;
                setTimeout(function() {
                    hideMessage(showedMessage);
                }, 3000);
            }
        });
    }, 500);
function hideMessage(index) {
    currentMessage = $('.flash-message').eq(index);
    currentMessage.slideUp(function(){
        if(++showedMessage < countMessage) {
            setTimeout(function(){
                hideMessage(showedMe
export function preMain(username) {
    return (dispatch) => {
        return Promise.all([
            dispatch(UpdateProfile()),
            dispatch(getHeadline(username)),
            dispatch(getFollowers()),
            dispatch(getArticles())
        ]).then(() => {
            dispatch(nav2Main())
        })
    }
export function loginAction(username, password) {
    return (dispatch) => {
        return resource('POST', 'login', { username, password })
            .then((response) => {
                dispatch({ type: Action.LOGIN, username: response.username })
                dispatch(preMain(username))
            }).catch((err) => {
                dispatch(displayErrorMsg(`Invalid logging in as user: ${username}`))
            })
    }
export function logoutAction() {
    return (dispatch) => {
        return resource('PUT', 'logout')
            .then((response) => {
                dispatch({ type: Action.LOGOUT })
                dispatch(nav2Index())
            }).ca
'use strict';
angular.module('apiListDirective', [])
.constant('apiListTemplatePath', document.baseURI + '/dist/templates/components/api-list/api-list.html')
/**
 * @ngdoc directive
 * @name apiList
 * @requires HackApi
 * @requires apiListTemplatePath
 * @description
 *
 * A footer list used for displaying a list of navigation links.
 */
.directive('apiList', function ($rootScope, HackApi, apiListTemplatePath) {
  return {
    restrict: 'E',
    scope: {
      category: '='
    },
    templateUrl: apiListTemplatePath,
    link: function (scope, element, attrs) {
      scope.apiListState = {};
      scope.apiListState.apiData = [];
      scope.apiListState.selectedItemId = null;
      HackApi.getAllApiData()
          .then(function (apiData) {
            scope.apiListState.apiData = apiData;
              scope.apiListState.selectedItemId = $rootScope.selectedApi.replace(/_/g, '.');
              console.log(scope.apiListState.selectedItemId);
            }
          });
      scope.
QUnit.module("Ember.View - controller property");
test("controller property should be inherited from nearest ancestor with controller", function() {
  var grandparent = ContainerView.create();
  var parent = ContainerView.create();
  var child = ContainerView.create();
  var grandchild = ContainerView.create();
  var grandparentController = {};
  var parentController = {};
  run(function() {
    grandparent.set('controller', grandparentController);
    parent.set('controller', parentController);
    grandparent.pushObject(parent);
    parent.pushObject(child);
  });
  strictEqual(grandparent.get('controller'), grandparentController);
  strictEqual(parent.get('controller'), parentController);
  strictEqual(child.get('controller'), parentController);
  strictEqual(grandchild.get('controller'), null);
  run(function() {
    child.pushObject(grandchild);
  });
  strictEqual(grandchild.get('controller'), parentController);
  var newController = {};
  run(function() {
    parent.set('control
ToyotaFriend.Navigation = function() {
	this.backUtil = {
		dispatchQueue: []
	};
};
ToyotaFriend.Navigation.prototype.updateRouteObject = function(routeObj) {
	if(this.dispatchQueue && this.dispatchQueue.length) {
		var currentDispatch = this.dispatchQueue.pop();
		this.registerRouteObject(routeObj);
	}
};
ToyotaFriend.Navigation.prototype.isRepeatDispatch = function(routeObj) {
	var isRepeatDispatch = false;
	var currentDispatchIndex = this.dispatchQueue.length - 1;
	if(currentDispatchIndex >= 0) {
		var currentDispatch = this.dispatchQueue[currentDispatchIndex];
		if(currentDispatch) {
			if((currentDispatch.controller) &&
				(routeObj.controller) &&
				(routeObj.controller.id == currentDispatch.controller.id) &&
				(currentDispatch.action) &&
				(routeObj.action) &&
				(currentDispatch.action == routeObj.action)) {
					isRepeatDispatch = true;
				}
		}
	}
	return isRepeatDispatch;
};
ToyotaFriend.Navigation.prototype.registerRouteObject = function(routeObj) {
	if(this.dispat

		var isDuplicateDispatch = false;
		
		var currentDispatchIndex = this.dispatchQueue.length - 1;
		if(currentDispatchIndex >= 0) {
			var currentDispatch = this.dispatchQueue[currentDispatchIndex];
			if(currentDispatch) {
				if((currentDispatch.controller) &&
					(routeObj.controller) &&
					(routeObj.controller.id == currentDispatch.controller.id) &&
					(currentDispatch.action) &&
					(routeObj.action) &&
					(currentDispatch.action == routeObj.action)) {
						isDuplicateDispatch = true;
						if(currentDispatch.parameter &&
							routeObj.parameter &&
							(routeObj.parameter != currentDispatch.parameter)) {
								isDuplicateDispatch = false;
							}
					}
			}
		}
		
		if(!isDuplicateDispatch) {
			routeObj.activeTab = ToyotaFriend.viewport.getActiveItem();
			this.dispatchQueue.push(routeObj);
		}
	}
};
ToyotaFriend.Navigation.prototype.goBack = function(refresh) {
	if(this.dispatchQueue) {
		var currentDispatch = this.dispatchQueue.pop();
		if(currentDispatch) {

define(function (require){
	var Backbone = require('backbone'),
			AnnouncementsController = require('controllers/announcements.controller'),
			ContactsController = require('controllers/contacts.controller'),
			ShiftsController = require('controllers/shifts.controller'),
			ResourcesController = require('controllers/resources.controller'),
			LoginController = require('controllers/login.controller'),
			LogoutController = require('controllers/logout.controller'),
			SignupController = require('controllers/signup.controller');
	var AppRouter = Backbone.Router.extend({
		_currentController: null,
		_updateCurrentController: function(currentController){
			if(this._currentController){
	  		this._currentController.destroy();
	  	}
			this._currentController = currentController;
		},
		routes: {
			"home": 					"announcements",
			"announcements":  "announcements", 
	    "signup":         "signup",
	    "logout":         "logout"
	  },
	  announcements: function(){
	  	this._updateCurrent
describe('$controller', function () {
  beforeEach(function () {
    delete window.angular;
    publishExternalAPI();
  });
  it('instantiates controller functions', function () {
    var injector = createInjector(['ng']);
    var $controller = injector.get('$controller');
    function MyController () {
      this.invoked = true;
    }
    var controller = $controller(MyController);
    expect(controller).toBeDefined();
    expect(controller instanceof MyController).toBe(true);
    expect(controller.invoked).toBe(true);
  });
  it('injects dependencies to controller functions', function () {
    var injector = createInjector(['ng', function ($provide) {
      $provide.constant('aDep', 42);
    }]);
    var $controller = injector.get('$controller');
    function MyController (aDep) {
      this.theDep = aDep;
    }
    var controller = $controller(MyController);
    expect(controller.theDep).toBe(42);
  });
  it('allows injecting locals to controller functions', function () {
    var in

    var $controller = injector.get('$controller');
    function MyController (aDep) {
      this.theDep = aDep;
    }
    var controller = $controller(MyController, {aDep: 42});
    expect(controller.theDep).toBe(42);
  });
  it('allows registering controllers at config time', function () {
    function MyController () {}
    var injector = createInjector(['ng', function ($controllerProvider) {
      $controllerProvider.register('MyController', MyController);
    }]);
    var $controller = injector.get('$controller');
    var controller = $controller('MyController');
    expect(controller).toBeDefined();
    expect(controller instanceof MyController).toBe(true);
  });
  it('allows registering several controllers in an object', function () {
    function MyController () {}
    function MyOtherController () {}
    var injector = createInjector(['ng', function ($controllerProvider) {
      $controllerProvider.register({
        MyController: MyController,
        MyOtherController: MyOth

      });
    }]);
    var $controller = injector.get('$controller');
    var controller = $controller('MyController');
    var otherController = $controller('MyOtherController');
    expect(controller instanceof MyController).toBe(true);
    expect(otherController instanceof MyOtherController).toBe(true);
  });
  it('allows registering controllers through modules', function () {
    var module = angular.module('myModule', []);
    module.controller('MyController', function MyController () {});
    var injector = createInjector(['ng', 'myModule']);
    var $controller = injector.get('$controller');
    var controller = $controller('MyController');
    expect(controller).toBeDefined();
  });
  it('does not normally look controllers up from window', function () {
    window.MyController = function MyController () {};
    var injector = createInjector(['ng']);
    var $controller = injector.get('$controller');
    expect(function () {
      $controller('MyController');
    }).toThrow();


  it('looks up controllers from window when so configured', function () {
    window.MyController = function MyController () {};
    var injector = createInjector(['ng', function ($controllerProvider) {
      $controllerProvider.allowGlobals();
    }]);
    var $controller = injector.get('$controller');
    var controller = $controller('MyController');
    expect(controller).toBeDefined();
    expect(controller instanceof window.MyController).toBe(true);
  });
  it('can return a semi-constructed controller', function () {
    var injector = createInjector(['ng']);
    var $controller = injector.get('$controller');
    function MyController () {
      this.constructed = true;
      this.myAttrWhenContstructed = this.myAttr;
    }
    var controller = $controller(MyController, null, true);
    expect(controller.constructed).toBeUndefined();
    expect(controller.instance).toBeDefined();
    controller.instance.myAttr = 42;
    var actualController = controller();
    expect(actualContro

    expect(actualController.myAttrWhenContstructed).toBe(42);
  });
  it('can return a semi-constructed ctrl when using array injection', function () {
    var injector = createInjector(['ng', function ($provide) {
      $provide.constant('aDep', 42);
    }]);
    var $controller = injector.get('$controller');
    function MyController(aDep) {
      this.aDep = aDep;
      this.constructed = true;
    }
    var controller = $controller(['aDep', MyController], null, true);
    expect(controller.constructed).toBeUndefined();
    var actualController = controller();
    expect(actualController.constructed).toBeDefined();
    expect(actualController.aDep).toBe(42);
  });
  it('can bind semi-constructed controller to scope', function () {
    var injector = createInjector(['ng']);
    var $controller = injector.get('$controller');
    function MyController () {}
    var scope = {};
    var controller = $controller(MyController, {$scope: scope}, true, 'myCtrl');
    expect(scope.myCtrl).toB
(function() {
    var NavBarController = function($scope, jimhubFactory, $routeParams) {
        $scope.navBarItems = [];
        $scope.showNavBarSelector = false;
        $scope.navBarSelectorPos = 0;
        $scope.navBarItemWidth = 0;
        $scope.slideMeNow = false;
        function init() {
            jimhubFactory.getNavBarItems()
                .success(function(navBarItems) {
                    var itemWidth = 800 / navBarItems.length;
                    for(var i=0; i < navBarItems.length; i++) {
                        if(navBarItems[i].link[0] != '#') {
                            navBarItems[i].target = "_blank";
                        }
                        navBarItems[i].xPos = itemWidth * i;
                    }
                    $scope.navBarItems = navBarItems;
                    $scope.navBarItemWidth = itemWidth;
                })
                .error(function(data, status, headers, config) {
                    console.error("No get navBarItems :( 
/*
 Copyright 2015 hp.weber GmbH & Co secucard KG (www.secucard.com)
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
export const General = {};
General.SkeletonService = SkeletonService;
General.AccountService = AccountService;
General.AccountDeviceService = AccountDeviceService;
General.ContactService = ContactService;
General.DeliveryAddressService = DeliveryAddressService;
General.FileAccessService = FileAccessService;
General.MerchantService = MerchantService;
General.NewsService = NewsService;
General.NotificationService = NotificationService;
General.PublicMerchantService = PublicMerchantS
var closeNav, insideNav, navBtn, navLinks, navTop, openNav, toggleNav, waitToCloseNav;
navTop = $('.nav-top');
navBtn = $('.nav-btn');
navLinks = $('.nav-top a');
insideNav = false;
openNav = function() {
  navTop.setAttribute('data-state', 'expanded');
  return navBtn.setAttribute('data-state', 'active');
};
closeNav = function() {
  navTop.setAttribute('data-state', 'collapsed');
  return navBtn.setAttribute('data-state', 'inactive');
};
toggleNav = function() {
  if (navTop.getAttribute('data-state') === 'expanded') {
    return closeNav();
  } else {
    return openNav();
  }
};
waitToCloseNav = function() {
  return setTimeout(function() {
    if (!insideNav) {
      return closeNav();
    }
  }, 100);
};
navBtn.on('click', function(e) {
  e.preventDefault();
  return toggleNav();
});
navBtn.on('focus', function(e) {
  insideNav = true;
  return openNav();
});
navBtn.on('blur', function(e) {
  insideNav = false;
  return waitToCloseNav();
});
navLinks.on('focus', function(e) {
  i
var vows = require('vows'),
    assert = require('./assert'),
    Artsy = require('../'),
    macros = require('./macros'),
    debug = require('diagnostics')('artsy:test:show');
vows.describe('artsy/show').addBatch({
  'Using node-artsy': {
    'show.get': macros.call('aca-galleries-peter-blume', {
      'should return a show': function (show) {
        assert.isObject(show);
        assert.isArray(show.artists);
        assert.isObject(show.partner);
        assert.isObject(show.location);
        debug('show.get', show);
      }
    }),
    'with partner and show': {
      'show.get': macros.call({
        partner: 'aca-galleries',
        show: 'aca-galleries-peter-blume'
      }, {
        'should return a show': function (show) {
          assert.isObject(show);
          assert.isArray(show.artists);
          assert.isObject(show.partner);
          assert.isObject(show.location);
          debug('show.get', show);
        }
      }),
      'show.artworks': macros.call({
      

        show: 'aca-galleries-peter-blume'
      }, {
        'should return artworks from the show': function (artworks) {
          assert.isArray(artworks);
          assert.ok(artworks.length);
          debug('show.artworks', artworks);
        }
      }),
      'show.documents': macros.call({
        partner: 'aca-galleries',
        show: 'aca-galleries-peter-blume'
      }, {
        'should return documents from the show': function (documents) {
          assert.isArray(documents);
          assert.lengthOf(documents, 2);
          documents.forEach(function (document) {
            assert.ok(document.title.indexOf('Peter Blume') !== -1);
          });
          debug('show.documents', documents);
        }
      })
    },
    'show.images': macros.call('aca-galleries-peter-blume', {
      'should return images from the show': function (images) {
        assert.isArray(images);
        assert.ok(images.length);
        debug('show.images', images);
      }
    })
  }
}).export
/**
 * App Actions
 */
export const openConfirmExitEditor = cb => (
  dispatch =>
    Promise.resolve()
    .then(() => dispatch({ type: types.OPEN_CONFIRM_EXIT_EDITOR, cb }))
);
export const closeConfirmExitEditor = () => (
  dispatch =>
    dispatch({ type: types.CLOSE_CONFIRM_EXIT_EDITOR })
);
export const confirmExitEditor = () => (
  (dispatch, getState) =>
    Promise.resolve()
    .then(() => dispatch(closeConfirmExitEditor()))
    .then(() => {
      const state = getState() && getState().app;
      dispatch(state.confirmCallback(state.currentSection));
    })
);
export const showLoader = () => (
  dispatch =>
   dispatch({ type: types.SHOW_LOADER })
);
export const hideLoader = () => (
  dispatch =>
    dispatch({ type: types.HIDE_LOADER })
);
export const loadDemos = id => (
  dispatch => (
    Promise.resolve()
    .then(() => dispatch(showLoader()))
    .then(() => dispatch({ type: types.LOAD_DEMOS, id }))
    .then(() => browserHistory.push(`/${id}`))
    .then(() => setTi

  )
);
export const newDemo = () => (
  (dispatch) => {
    browserHistory.push(`/${options.PATH_NEW_DEMO}`);
    dispatch({ type: types.NEW_DEMO });
  }
);
export const editDemo = name => (
  dispatch => (
    Promise.resolve()
    .then(() => dispatch(showLoader()))
    .then(() => dispatch({ type: types.EDIT_DEMO, name }))
    .then(() => browserHistory.push(`/${options.PATH_EDIT_DEMO}/${name}`))
    .then(() => setTimeout(() => dispatch(hideLoader()), (Math.random() * 1000) + 100))
  )
);
export const setTopBarTitle = (title, titleIndex = null) => {
  document.title = `${title} ${strings.FOOTPRINT_DEMO}`;
  return ({
    type: types.SET_TOPBAR_TITLE,
    title,
    titleIndex,
  });
};
export const signOut = () => (
  dispatch => (
    Promise.resolve()
    .then(() => new Promise(resolve => auth.signOut(resolve)))
    .then(() => dispatch(setAuthState(false)))
    .then(() => browserHistory.push(`/${options.PATH_SIGN_IN}`))
  )
);
export const changeTopBarMenu = id => (
  (dispat
'use strict';
/**
 * Logger class. For the time being it appends everything to a file.
 */
const log = function(message) {
    message += '\n';
    if (false) {
        fs.appendFile(config.log.file, message + '\n', function(err) {
            if (err) {
                throw 'Error writing log to file: ' + err;
            }
        });        
    } else {
        fs.appendFileSync(config.log.file, message);
    }
};
class Logger {
    constructor() {
        console.log(`Temp dir is ${config.log.file}`);
    }
    _sanitize(message) {
        if (!message) {
            return 'undefined';
        } else if (message.constructor === Array ||
            message.constructor === Object) {
                return JSON.stringify(message);
        } else {
            return String(message);
        }
    }
    warn(message) {
        message = this._sanitize(message);
        log('W: ' + message);
    }
    info(message) {
        message = this._sanitize(message);
        log('I: ' + mes
app.controller('AppNavigationController',
    ['$scope', '$routeParams', '$location', '$rootScope',
        function ($scope, $routeParams, $location, $rootScope) {
            /** testing start */
            $scope.toggleContentNavCard = function () {
                if($scope.ContentNavCard == true){
                    $scope.ContentNavCard = false;
                    $scope.deactivateNavigation();
                } else {
                    $scope.ContentNavCard = true;
                    $scope.activateNavigation();
                }
            };
            $scope.toggleTaxonomyNavCard = function () {
                if($scope.TaxonomyNavCard == true){
                    $scope.TaxonomyNavCard = false;
                    $scope.deactivateNavigation();
                } else {
                    $scope.TaxonomyNavCard = true;
                    $scope.activateNavigation();
                }
            };
            $scope.toggleFormulaNavCard = function () {
          

                    $scope.FormulaNavCard = false;
                    $scope.deactivateNavigation();
                } else {
                    $scope.FormulaNavCard = true;
                    $scope.activateNavigation();
                }
            };
            $scope.toggleNameNavCard = function () {
                if($scope.NameNavCard == true){
                    $scope.NameNavCard = false;
                    $scope.deactivateNavigation();
                } else {
                    $scope.NameNavCard = true;
                    $scope.activateNavigation();
                }
            };
            $scope.toggleDatabaseNavCard = function () {
                if($scope.DatabaseNavCard == true){
                    $scope.DatabaseNavCard = false;
                    $scope.deactivateNavigation();
                } else {
                    $scope.DatabaseNavCard = true;
                    $scope.activateNavigation();
                }
            };
            $sco

                $scope.toggleContentNavCard();
                $scope.toggleTaxonomyNavCard();
                $scope.toggleFormulaNavCard();
                $scope.toggleNameNavCard();
            };
            $rootScope.closeAllNavCards = function () {
                $scope.FormulaNavCard = false;
                $scope.TaxonomyNavCard = false;
                $scope.ContentNavCard = false;
                $scope.NameNavCard = false;
                $scope.DatabaseNavCard = false;
                $rootScope.navOn = false;
            };
            /**
             * This is for showing the navigation overlay
             */
            $scope.activateNavigation = function () {
                $rootScope.navOn = true;
            };
            /**
             * This is for hiding the navigation overlay if all the menus are closed
             */
            $scope.deactivateNavigation = function () {
                if(
                    ($scope.ContentNavCard == false || typ
spoke.controller = {
  def : {},
  
  define : function( controller_def ){
    var controller;
    if (!controller_def.name) throw new Error('Controller name not defined.');
    controller_def.target = controller_def.target || 'body';
    controller_def.server_events = controller_def.server_events || {};
    
    if ( !spoke.controller[controller_def.name] ){
      controller = jQuery.sammy();
    }
      
    controller.element_selector = controller_def.target;
    
    jQuery.each( controller_def.actions, function( name, definition){
      if( typeof( definition ) == 'function'){
        controller.bind( controller_def.name+'::'+name, definition);
      }
    });
    jQuery.each( controller_def.server_events, function( name, definition){
      if( typeof( definition ) == 'function'){
        controller.bind( controller_def.name+'::'+name, definition);
      }
    });
    
    /*
    var filters = ['before_filters','after_filters','around_filters'];
    
    jQuery.each(filters, funct
"use strict";
function init() {
    var s = require("events").EventEmitter,
        o = require("../common/log/log.js"),
        e = {},
        t = { showMask: !1, showFooter: !1, showShare: !1, showTabbar: !1 },
        i = Object.assign({}, s.prototype, {
            hideAll: function(s) {
                e[s] || (e[s] = Object.assign({}, t));
                var i = e[s];
                i.showFooter = !1, i.showMask = !1, i.showShare = !1, i.showTabbar = !1, o.info("leftviewStores.js hideAll " + s + " " + JSON.stringify(i)), this.emit("LEFT_STATUS_UP_" + s, s, e[s], !0)
            },
            clickRightHeader: function(s) { e[s] || (e[s] = Object.assign({}, t)), e[s].showShare || (e[s].showFooter = !e[s].showFooter, e[s].showMask = e[s].showFooter, o.info("leftviewStores.js clickRightHeader " + s + " " + JSON.stringify(e)), this.emit("LEFT_STATUS_UP_" + s, s, e[s])) },
            upShareStatus: function(s, t) {
                var i = e[s];
                e[s].showShare = t,
'use strict';
require('angular');
require('angular-route');
var Log                   = require('./config/Log');
var Route                 = require('./config/Route');
var snippet               = require('./directives/snippet');
var PageController        = require('./controllers/PageController');
var MainController        = require('./controllers/MainController');
var FrontMvcController    = require('./controllers/FrontMvcController');
var SpaController         = require('./controllers/SpaController');
var FrameworkController   = require('./controllers/FrameworkController');
var ProsConsController    = require('./controllers/ProsConsController');
var DataBindingController = require('./controllers/DataBindingController');
var ServiceController     = require('./controllers/ServiceController');
var DiController          = require('./controllers/DiController');
angular.module('app.sharing', [ 'ngRoute' ])
    .config(Log)
    .config(Route)
    .directive('snippet', snippet)
    .controlle
/*
 * Licensed under the Apache License, Version 2.0
 * See accompanying LICENSE file.
 */
angular.module('dashboard')
/**
 * The service will continuously contact service endpoint. A dialog will be shown, when the service is unreachable.
 */
  .service('HealthCheckService', ['$http', function ($http) {
    'use strict';
    var service = this;
    service._available = true;
    service.config = function (checkUrl, checkInterval, showDialogFn, hideDialogFn) {
      this.checkUrl = checkUrl;
      this.checkInterval = checkInterval;
      this.showDialogFn = showDialogFn;
      this.hideDialogFn = hideDialogFn;
    };
    service.isServiceAvailable = function () {
      return service._available;
    };
    service.checkForever = function () {
      var fn = function () {
        service._check().finally(
          function retry() {
            _.delay(fn, service.checkInterval);
          });
      };
      fn();
    };
    service._check = function () {
      return $http.get(service
_menuCloseDelay=0
_subOffsetLeft=-15
_menuCloseDelay=300
_menuOpenDelay=0
_followSpeed=0
_followRate=0
_subOffsetTop=3
_subOffsetLeft=-1
_scrollAmount=3
_scrollDelay=20
with(navStyle1=new mm_style()){
offclass="nav";
onclass="nav nav_hover";
pageclass="nav nav_hover nav_selected";
with(subNavStyle1=new mm_style()){
offclass="nav subnav"
onclass="nav nav_hover subnav subnav_hover"
pageclass="nav nav_hover subnav subnav_hover nav_selected subnav_selected"
offcolor="#ffffff";
offbgcolor="#1daaca";
oncolor="#ffffff";
onbgcolor="#1daaca";
with(navStyle2=new mm_style()){
offclass="nav";
onclass="nav nav_hover";
pageclass="nav nav_hover nav_selected";
with(subNavStyle2=new mm_style()){
offclass="nav subnav"
onclass="nav nav_hover subnav subnav_hover"
pageclass="nav nav_hover subnav subnav_hover nav_selected subnav_selected"
with(navStyle3=new mm_style()){
offclass="nav";
onclass="nav nav_hover";
pageclass="nav nav_hover nav_selected";
with(subNavStyle3=new mm_style()){
offclass="nav subnav"
o

pageclass="nav nav_hover subnav subnav_hover nav_selected subnav_selected"
with(navStyle4=new mm_style()){
offclass="nav";
onclass="nav nav_hover";
pageclass="nav nav_hover nav_selected";
with(subNavStyle4=new mm_style()){
offclass="nav subnav"
onclass="nav nav_hover subnav subnav_hover"
pageclass="nav nav_hover subnav subnav_hover nav_selected subnav_selected"
with(navStyle5=new mm_style()){
offclass="nav";
onclass="nav nav_hover";
pageclass="nav nav_hover nav_selected";
with(subNavStyle5=new mm_style()){
offclass="nav subnav"
onclass="nav nav_hover subnav subnav_hover"
pageclass="nav nav_hover subnav subnav_hover nav_selected subnav_selected"
with(navStyle6=new mm_style()){
offclass="nav";
onclass="nav nav_hover";
pageclass="nav nav_hover nav_selected";
with(subNavStyle6=new mm_style()){
offclass="nav subnav"
onclass="nav nav_hover subnav subnav_hover"
pageclass="nav nav_hover subnav subnav_hover nav_selected subnav_selected"
with(navStyle7=new mm_style()){
offclass="nav";
onclass="
var api = require('../../api');
/**
 * Categories API Routes.
 */
module.exports = function(app) {
  /**
   * @apiDefineSuccessStructure Category
   * @apiSuccess {String} key   Key of the category.
   * @apiSuccess {String} label Label of the category.
   * @apiSuccess {String} color Color (only for user category).
   *
   * @apiSuccessExample Success-Response:
   *     HTTP/1.1 200 OK
   *     {
   *        "key": "user-foo",
   *        "label": "Foo category",
   *        "color": "#FE2EC8"
   *     }
   */
  /**
   * @api {get} /api/category Request all user's categories
   * @apiVersion 0.0.1
   * @apiName GetAllCategories
   * @apiGroup category
   * @apiPermission user
   *
   * @apiSuccessStructure Category
   *
   * @apiSuccessExample Success-Response:
   *     HTTP/1.1 200 OK
   *     [{
   *        "key": "system-trash",
   *        "label": "Trash bin"
   *     },
   *     {
   *        "key": "user-foo",
   *        "label": "Foo category",
   *        "color": "#FE2EC8"


   *     {...}
   *     ]
   */
  app.get('/api/category', api.categories.all);
  /**
   * @api {get} /api/category/:key Request category details
   * @apiVersion 0.0.1
   * @apiName GetCategoryDetails
   * @apiGroup category
   * @apiPermission user
   *
   * @apiParam {String}  key Key of the category.
   *
   * @apiSuccessStructure Category
   */
  app.get('/api/category/:key', api.categories.get);
  /**
   * @api {put} /api/category/:key Update user category details
   * @apiVersion 0.0.1
   * @apiName UpdateCategory
   * @apiGroup category
   * @apiPermission user
   *
   * @apiParam {String} key Key of the category.
   * @apiParam {Object} category Category to update.
   * @apiParam {String} category.label Labe of the category.
   * @apiParam {String} category.color Color of the category.
   *
   * @apiSuccessStructure Category
   */
  app.put('/api/category/:key', api.categories.update);
  /**
   * @api {post} /api/category Create user category
   * @apiVersion 0.0.1
   * @apiN
var nav ="";
nav += '<div class="nav_header">';
nav += '<div class="nav_dh1 zz_nav">';
nav += '<div class="nav_dh11 fl"><span class="nav_zhs_col1"><strong>推荐游戏：</strong></span>';
nav += '</div>';
nav += '<div class="nav_dh12 fr">';
/*
*/
nav += '</div>';
nav += '</div>';
nav += '</div>';
nav += '<div id="topWX"></div>';
nav += '<div class="allgame_91wan" style="width:980px; margin:0 auto; z-index:100000000;  position:relative; " onmouseover="showAllGame();" onmouseout="hiddenAllGame();">';
nav += '<div class="nav_yer_1">';
nav += '<div class="nav_navBox" style="display:none;" id="all_game">';
nav += '<div class="nav_nav">';
nav += '<h2>欢迎来到91wan，现在就开始您的游戏之旅吧!</h2>';
nav += '<div class="nav_lst nav_clear">';
nav += '</div>';
nav += '</div>';
nav += '<div class="cl"></div>';
nav += '</div>';
nav += '</div>';
nav += '</div>';
document.writeln(nav);
function showAllGame(){
	var allgame=document.getElementById("all_game");
	allgame.style.display='block';
function hiddenAllGame(){
	var allga
/**
 * Copyright (C) 2017 TopCoder Inc., All Rights Reserved.
 */
/**
 * the Post Routes
 *
 * @author      TCSCODER
 * @version     1.0
 */
const Auth = require('../common/Auth');
module.exports = {
  '/posts': {
    get: {
      controller: 'PostController',
      method: 'search',
    },
    post: {
      controller: 'PostController',
      method: 'create',
      middleware: [Auth()],
    },
  },
  '/posts/:id': {
    put: {
      controller: 'PostController',
      method: 'update',
      middleware: [Auth()],
    },
    get: {
      controller: 'PostController',
      method: 'get',
    },
    delete: {
      controller: 'PostController',
      method: 'remove',
      middleware: [Auth()],
    },
  },
  '/posts/:id/email': {
    get: {
      controller: 'PostController',
      method: 'email',
      middleware: [Auth()],
    },
  },
  '/posts/:id/upload': {
    post: {
      controller: 'PostController',
      method: 'upload',
      middleware: [Auth()],
    },
  },
  '/posts/:t
define(['Route', 'queryController', 'nameController', 'insertController', 'readController'],
    function(Route, queryController, nameController, insertController, readController) {
        'use strict';
        var findRoutes = (function($routeProvider) {
            $routeProvider.when('/home', {
                templateUrl: '/home',
                controller: queryController,
                resolve: {
                    init: queryController.init
                }
            }).when('/databaseName', {
                templateUrl: '/display-default',
                controller: nameController,
                resolve: {
                    databaseName: nameController.databaseName,
                    allDbs: nameController.allDbs
                }
            }).when('/createDb', {
                templateUrl: '/display-default',
                controller: queryController,
                resolve: {
                    result: queryController.create
                }
          
export const startPlaying = () => {
  return {
    type: START_PLAYING,
  }
};
export const play = () => {
  return dispatch => {
    AUDIO.play();
    dispatch(startPlaying());
  }
export const stopPlaying = () =>{
  return {
    type: STOP_PLAYING,
  }
export const pause = () => {
  return dispatch => {
    AUDIO.pause();
    dispatch(stopPlaying())
  }
export const setCurrentSong = (currentSong) => {
  return {
    type: SET_CURRENT_SONG,
    currentSong: currentSong,
  }
export const setCurrentSongList = (currentSongList) => {
  return {
    type: SET_LIST,
    currentSongList: currentSongList
  }
export const load = (currentSong, currentSongList) => {
  return dispatch => {
    AUDIO.src = currentSong.audioUrl;
    AUDIO.load();
    dispatch(setCurrentSong(currentSong));
    dispatch(setCurrentSongList(currentSongList));
  }
export const startSong = (song, list)=>{
  return dispatch => {
    dispatch(pause());
    dispatch(load(song, list));
    dispatch(play());
  }
export const 
var NavControlMixin = Ember.Mixin.create({
  actions: {
    processNavInit: function(processNav) {
      if (this.get('navId') === processNav.get('navId')) {
        this.set('targetObject', processNav);
        this.set('target', processNav);
      }
    }
  }
});
var NavController = Ember.Object.extend(Ember.ActionHandler, Ember.Evented, NavControlMixin);
export { NavControlMixin };
export default Ember.Object.create({
  navHash: {},
  controllersHash: {},
  componentsHash: {},
  _createNavController: function(navId) {
    var navController = this.controllersHash[navId];
    if (!navController) {
      navController = NavController.create({
        navId: navId
      });
      this.controllersHash[navId] = navController;
    }
    return navController;
  },
  registerComponent: function(component) {
    var navId = component.get('navId');
    var array = this.componentsHash[navId];
    if (!array) {
      array = [];
      this.componentsHash[navId] = array;
    }
    array.push(comp
var messageLogging = require("../../../lib/extensions/message-logger");
var messageHelper = require("../../helpers/message-helper.js");
var messageWithText = messageHelper.messageWithText;
var customMessageMatchers = messageHelper.custom_matchers;
describe("The message logger wraps data storage and provides and extension", function() {
    var handler, dataStore;
    beforeEach(function() {
        jasmine.addMatchers(customMessageMatchers);
        dataStore = {
            storeMessage: function (room, message){}
        };
        handler = messageLogging(dataStore).incoming;
        spyOn(dataStore, 'storeMessage');
    });
    it("leaves messages unchanged", function() {
        var message = messageWithText("I'm a little message and I'm okay");
        var expectedMessage = messageWithText("I'm a little message and I'm okay");
        handler(message, function(updatedMessage) {
            expect(updatedMessage).toMatchMessage(expectedMessage);
        });
    });
    it("passes 
/*global Messenger window */
angular.module('notifications.services', [])
  .factory('notifications', 
    function () {
      Messenger.options = {
        extraClasses: 'messenger-fixed messenger-on-top messenger-on-right',
        theme: 'ice'
      };
      var notifications = {
        message : function (message, config) {
          message.showCloseButton = true;
          if (angular.isDefined(config) && angular.isObject(config)) {
            message = angular.extend(message, config);
          }
          new Messenger().post(message);
        },
        error : function (message, config) {
          notifications.message({message: message, type: 'error', id: 'error-message'}, config);
        },
        success : function (message, config) {
          notifications.message({message: message, type: 'success', id: 'success-message'}, config);
        },
        info: function (message, config) {
          notifications.message({message: message, type: 'info', id: 'info-message
'use strict';
tatool
  .controller('tatoolMemorySpanCtrl', [ '$scope', 'service', 
    function ($scope, service) {
    $scope.stimulusService = service.stimulusService;
    $scope.inputService = service.inputService;
    $scope.start = function() {
      service.inputService.hide();
      service.inputService.disable();
      switch (service.getPhase()) {
        case 'INIT':
          service.createStimulus();
          service.setPhase('MEMORISATION');
          memorisationPhase();
          break;
        case 'MEMORISATION':
          memorisationPhase();
          break;
        case 'RECALL':
          recallPhase();
          break;
      }
    };
    function memorisationPhase() {
      service.memCounter++;
      if (service.memCounter === service.stimulus.stimulusCount) {
        service.setPhase('RECALL');
      }
      service.setStimulus();
      if (service.timerEnabled.propertyValue === true) {
        service.timerDisplayMemoranda.start(memorisationTimeUp);
      }
  

    }
    function memorisationTimeUp() {
      service.stimulusService.hide();
      if (service.suspendAfterEachItem.propertyValue) {
        service.suspendExecution();
      } else {
        if (service.getPhase() == 'MEMORISATION') {
          if (service.timerEnabled.propertyValue === true) {
            service.timerIntervalMemoranda.start(memorisationPhase);
          }
        } else {
          service.suspendExecution();
        }
      }
    }
    function recallPhase() {
      service.respCounter++;
      var stimulusText = service.recallText + ' ' + service.respCounter + ' ?';
      service.setRecallStimulus(stimulusText);
      service.startTime = service.stimulusService.show();      
      service.inputService.show();
      service.inputService.enable();
    }
    $scope.inputAction = function(input, timing, event) {
      service.inputService.disable();
      service.inputService.hide();
      service.stimulusService.hide();
      service.endTime = timing;
      proce
require("../env");
require("../../d3");
var vows = require("vows"),
    assert = require("assert");
var suite = vows.describe("d3.dispatch");
suite.addBatch({
  "dispatch": {
    topic: function() {
      return d3.dispatch;
    },
    "returns a map of dispatchers for each event type": function(dispatch) {
      assert.deepEqual(dispatch(), {});
      var d = dispatch("foo");
      assert.isTrue("foo" in d);
      assert.isFalse("bar" in d);
      var d = dispatch("foo", "bar");
      assert.isTrue("foo" in d);
      assert.isTrue("bar" in d);
    },
    "added listeners receive subsequent events": function(dispatch) {
      var d = dispatch("foo"), events = 0;
      d.foo.add(function() { ++events; });
      d.foo.dispatch();
      assert.equal(events, 1);
      d.foo.dispatch();
      d.foo.dispatch();
      assert.equal(events, 3);
    },
    "the listener is passed any arguments to dispatch": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, aa, bb;
      d.foo.a

      d.foo.dispatch(a, b);
      assert.equal(aa, a);
      assert.equal(bb, b);
      d.foo.dispatch(1, "foo");
      assert.equal(aa, 1);
      assert.equal(bb, "foo");
    },
    "the listener's context is the same as dispatch's": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, that;
      d.foo.add(function() { that = this; });
      d.foo.dispatch.call(a);
      assert.equal(that, a);
      d.foo.dispatch.call(b);
      assert.equal(that, b);
    },
    "listeners are notified in the order they are first added": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, those = [];
      function A() { those.push(a); }
      function B() { those.push(b); }
      d.foo.add(A);
      d.foo.add(B);
      d.foo.dispatch();
      assert.deepEqual(those, [a, b]);
      those = [];
      d.foo.remove(A);
      d.foo.add(A);
      d.foo.dispatch();
      assert.deepEqual(those, [a, b]);
    },
    "removed listeners do not receive subsequent events": functio

      var d = dispatch("foo"), a = {}, b = {}, those = [];
      function A() { those.push(a); }
      function B() { those.push(b); }
      d.foo.add(A);
      d.foo.add(B);
      d.foo.dispatch();
      those = [];
      d.foo.remove(A);
      d.foo.dispatch();
      assert.deepEqual(those, [b]);
    },
    "adding an existing listener has no effect": function(dispatch) {
      var d = dispatch("foo"), events = 0;
      function A() { ++events; }
      d.foo.add(A);
      d.foo.dispatch();
      d.foo.add(A);
      d.foo.add(A);
      d.foo.dispatch();
      assert.equal(events, 2);
    },
    "removing a missing listener has no effect": function(dispatch) {
      var d = dispatch("foo"), events = 0;
      function A() { ++events; }
      d.foo.remove(A);
      d.foo.add(A);
      d.foo.remove(A);
      d.foo.remove(A);
      d.foo.dispatch();
      assert.equal(events, 0);
    },
    "adding a listener does not affect the current event": function(dispatch) {
      var d = dispatch(
/**
 * Created by QingWang on 2014/8/8.
 */
var supertest = require('supertest'),
var apid ="";
describe('#Api#AddApi', function () {
    it('api#/api/manage/SaveApi#AddApi', function (done) {
        api.post('/api/manage/SaveApi')
            .send({ router : "post /api/manage/SaveApi",value:"100",notes:"AddApi" })
            .expect(200)
            .end(function (err, res) {
                if (err) {
                    done(err);
                } else {
                    done();
                }
            });
    });
});
describe('#Api#GetApiByCondition', function () {
    it('api#/api/manage/GetApiByCondition#GetApiByCondition', function (done) {
        api.post('/api/manage/GetApiByCondition')
            .send({router:"post /api/manage/SaveApi"})
            .expect(200)
            .end(function (err, res) {
                if (err) {
                    done(err);
                } else {
                    var tx =res.text;
                    var json = JSON.parse

                    apid = json.Data[0].id;
                    done();
                }
            });
    });
});
describe('#Api#GetApiById', function () {
    it('api#/api/manage/GetApiById#GetApiById', function (done) {
        api.post('/api/manage/GetApiById')
            .send({id:apid})
            .expect(200)
            .end(function (err, res) {
                if (err) {
                    done(err);
                } else {
                    done();
                }
            });
    });
});
describe('#Api#UpdateApi', function () {
    it('api#/api/manage/SaveApi#UpdateApi', function (done) {
        api.put('/api/manage/SaveApi')
            .send({id:apid, router : "put /api/manage/SaveApi",value:"100",notes:"UpdateApi" })
            .expect(200)
            .end(function (err, res) {
                if (err) {
                    done(err);
                } else {
                    done();
                }
            });
    });
});
 describe('#Api#Delet
define(
    [
        "module/ngModule",
        "types/enums",
        "service/crudService",
        "service/jsonWebService"
    ],
    function (ngModule, enums, CrudService) {
        ngModule.service("noteService",
            [
                "jsonWebService",
                "noteServiceUrl",
                "notesByPageServiceUrl",
                function (jsonWebService, noteServiceUrl, notesByPageServiceUrl) {
                    var crudService = new CrudService(jsonWebService, noteServiceUrl);
                    function getNotesByPage(pageId, successCallback, failureCallback) {
                        var serviceUrlWithParams = notesByPageServiceUrl.replace("{pageId}", pageId);
                        jsonWebService.execute(serviceUrlWithParams, enums.HttpMethod.GET, null, successCallback,
                            failureCallback,
                            true);
                    }
                    return {
                        getNotesByPage: getNotesByP
var express     = require('express'),
    api         = require('../api'),
    apiRoutes;
apiRoutes = function (middleware) {
    var router = express.Router();
    router.del = router.delete;
    router.get('/configuration', api.http(api.configuration.browse));
    router.get('/configuration/:key', api.http(api.configuration.read));
    router.get('/posts', api.http(api.posts.browse));
    router.post('/posts', api.http(api.posts.add));
    router.get('/posts/:id', api.http(api.posts.read));
    router.get('/posts/slug/:slug', api.http(api.posts.read));
    router.put('/posts/:id', api.http(api.posts.edit));
    router.del('/posts/:id', api.http(api.posts.destroy));
    router.get('/settings', api.http(api.settings.browse));
    router.get('/settings/:key', api.http(api.settings.read));
    router.put('/settings', api.http(api.settings.edit));
    router.get('/users', api.http(api.users.browse));
    router.get('/users/:id', api.http(api.users.read));
    router.get('/users/slug/:slug

    router.get('/users/email/:email', api.http(api.users.read));
    router.put('/users/password', api.http(api.users.changePassword));
    router.put('/users/owner', api.http(api.users.transferOwnership));
    router.put('/users/:id', api.http(api.users.edit));
    router.post('/users', api.http(api.users.add));
    router.del('/users/:id', api.http(api.users.destroy));
    router.get('/tags', api.http(api.tags.browse));
    router.get('/tags/:id', api.http(api.tags.read));
    router.post('/tags', api.http(api.tags.add));
    router.put('/tags/:id', api.http(api.tags.edit));
    router.del('/tags/:id', api.http(api.tags.destroy));
    router.get('/roles/', api.http(api.roles.browse));
    router.get('/slugs/:type/:name', api.http(api.slugs.generate));
    router.get('/themes', api.http(api.themes.browse));
    router.put('/themes/:name', api.http(api.themes.edit));
    router.get('/notifications', api.http(api.notifications.browse));
    router.post('/notifications', api.http(api.no

    router.del('/notifications/:id', api.http(api.notifications.destroy));
    router.get('/db', api.http(api.db.exportContent));
    router.del('/db', api.http(api.db.deleteAllContent));
    router.post('/mail', api.http(api.mail.send));
    router.post('/mail/test', api.http(api.mail.sendTest));
    router.post('/authentication/passwordreset',
        middleware.spamForgottenPrevention,
        api.http(api.authentication.generateResetToken)
    );
    router.put('/authentication/passwordreset', api.http(api.authentication.resetPassword));
    router.post('/authentication/invitation', api.http(api.authentication.acceptInvitation));
    router.get('/authentication/invitation', api.http(api.authentication.isInvitation));
    router.post('/authentication/setup', api.http(api.authentication.setup));
    router.get('/authentication/setup', api.http(api.authentication.isSetup));
    router.post('/authentication/token',
        middleware.spamSigninPrevention,
        middleware.addClientS
var app = angular.module("app", []);
app.controller("MyController", function() {
  var vm = this;
    vm.showBackpack = false;
    vm.showMobile = false;
    vm.showCloset = false;
    vm.showGarden = false;
    vm.showSoup = false;
    vm.showGeneral = true;
    vm.setDefaults = function() {
      vm.showBackpack = false;
      vm.showMobile = false;
      vm.showCloset = false;
      vm.showGarden = false;
      vm.showSoup = false;
      vm.showGeneral = true;
    }
    vm.showProgram = function (program) {
      hideAll();
      if (program === "backpack")
        vm.showBackpack = true;
      else if (program === "mobile")
        vm.showMobile = true;
      else if (program === "closet")
        vm.showCloset = true;
      else if (program === "garden")
        vm.showGarden = true;
      else if (program === "soup")
        vm.showSoup = true;
      else
        vm.showGeneral = true;
    }
    function hideAll() {
      vm.showBackpack = false;
      vm.showMobile = false;
    
;(function(){
  'use strict';
	angular.module('languagelearningApp')
    .config(function($routeProvider){
	$routeProvider				
	.when('/home', {
		templateUrl : 'views/home.html',
		controller : 'HomeController',
		controllerAs: 'home',
		private: true
	})
	.when('/vocabulary', {
		templateUrl : 'views/vocabulary.html',
		controller : 'VocabularyController',
		controllerAs: 'vocal',
		private: true
	})
	.when('/vocabulary/Days&Months', {
		templateUrl : 'views/DaysMonths.html',
		controller : 'VocabularyController',
		controllerAs: 'vocal',
		private: true
	})
	.when('/vocabulary/animals', {
		templateUrl : 'views/animals.html',
		controller : 'VocabularyController',
		controllerAs: 'vocal',
		private: true
	})
	.when('/vocabulary/colors', {
		templateUrl : 'views/colors.html',
		controller : 'VocabularyController',
		controllerAs: 'vocal',
		private: true
	})
	.when('/vocabulary/fruits', {
		templateUrl : 'views/fruits.html',
		controller : 'VocabularyController',
		controllerAs: 'voc

		private: true
	})
	.when('/vocabulary/bodyface', {
		templateUrl : 'views/bodyface.html',
		controller : 'VocabularyController',
		controllerAs: 'vocal',
		private: true
	})
	.when('/vocabulary/VocabularyAnimals', {
		templateUrl : 'views/VocabularyAnimals.html',
		controller : 'VocabularyController',
		controllerAs: 'vocal',
		private: true
	})
	.when('/vocabulary/vocabularydaysmonth', {
		templateUrl : 'views/vocabularydaysmonth.html',
		controller : 'VocabularyController',
		controllerAs: 'vocal',
		private: true
	})
	.when('/vocabulary/vocabularybodyface', {
		templateUrl : 'views/vocabularybodyface.html',
		controller : 'VocabularyController',
		controllerAs: 'vocal',
		private: true
	})
	.when('/vocabulary/vocabularyfruits', {
		templateUrl : 'views/vocabularyfruits.html',
		controller : 'VocabularyController',
		controllerAs: 'vocal',
		private: true
	})
    .when('/greetings', {
        templateUrl : 'views/greetings.html',
        controller : 'GreetingsController',
       

        private: true
	})
	.when('/transiGreetings', {
        templateUrl : 'views/transiGreetings.html',
        controller : 'GreetingsController',
        controllerAs : 'cardCtrl',
        private: true
	})
	.when('/cards', {
        templateUrl : 'views/cards.html',
        controllerAs : 'cardCtrl',
        private: true
	})
	.when('/cards/flip', {
        templateUrl : 'views/flip.html',
        controller : 'FlipController',
        controllerAs : 'flip',
        private: true
	})
    .when('/quiz', {
		templateUrl: 'views/quiz.html',
		controller: 'QuizController',
		controllerAs: 'quiz',
		private: true
	})
	.when('/quiz/quiz1', {
		templateUrl: 'views/quiz1.html',
		controller: 'QuizController',
		controllerAs: 'quiz',
		private: true
	})
	.when('/quiz/quiz2', {
		templateUrl: 'views/quiz2.html',
		controller: 'QuizController',
		controllerAs: 'quiz',
		private: true
	})
	.when('/quiz/quiz3', {
		templateUrl: 'views/quiz3.html',
		controller: 'QuizController',
		controller

		private: true
	})
	.when('/search', {
		templateUrl: 'views/search.html',
		controller: 'SearchController',
		controllerAs: 'search',
		private: true
	})
	.when('/flashcards/FruitsCard', {
		templateUrl: 'views/FruitsCard.html',
		controller : 'CardsController',
        controllerAs : 'cardCtrl',
        private: true		
	})
	.when('/flashcards/AnimalsCard', {
		templateUrl: 'views/AnimalsCard.html',
		controller : 'CardsController',
        controllerAs : 'cardCtrl',
        private: true		
	})
	.when('/flashcards/ColorsCard', {
		templateUrl: 'views/ColorsCard.html',
		controller : 'CardsController',
        controllerAs : 'cardCtrl',
        private: true		
	})
	.when('/flashcards/BodyFaceCard', {
		templateUrl: 'views/BodyFaceCard.html',
		controller : 'CardsController',
        controllerAs : 'cardCtrl',
        private: true		
	})
	.when('/flashcards/DaysMonthsCard', {
		templateUrl: 'views/DaysMonthsCard.html',
		controller : 'CardsController',
        controllerAs : 'cardCtrl
var nav_8c =
    [ "FAILSAFE_HOME_RADIUS", "nav_8c.html#abb778e487ebe98aedea7858361496264", null ],
    [ "Goto3D", "nav_8c.html#a2a52a892a193bd2f3d2f86d1b1ded87e", null ],
    [ "LINE_START_FUNCTION", "nav_8c.html#a86a682e52e440368e6ca96062ef7563f", null ],
    [ "LINE_STOP_FUNCTION", "nav_8c.html#a2788d8683c98c074cb18680dc2eea0af", null ],
    [ "MAX_DIST_CARROT", "nav_8c.html#ab1ea324968aaab7cb5e252bd5f22e76c", null ],
    [ "MAX_HEIGHT_CARROT", "nav_8c.html#a34e95d63fe245178d74b11e75a53811d", null ],
    [ "MIN_DX", "nav_8c.html#a17976ef29f2f34221836e877f4712d19", null ],
    [ "MIN_HEIGHT_CARROT", "nav_8c.html#aa39efd810919cc75b7892bd6e6e37b44", null ],
    [ "NAV_C", "nav_8c.html#a291c0fda2fd988bf5f602f56157ab2b7", null ],
    [ "NAV_GLIDE_PITCH_TRIM", "nav_8c.html#ae41368935fe1a9081b0c663d37f227e0", null ],
    [ "NavFollow", "nav_8c.html#a8691e5b760e30c9091d5a981d3663441", null ],
    [ "NavGlide", "nav_8c.html#aa7303abf34661cdf531cce2f4fddfe86", null ],
    [ "PowerVoltage", "

    [ "RCLost", "nav_8c.html#ac3892fe123b99e805c0c5d5b1b4cd144", null ],
    [ "RcRoll", "nav_8c.html#a7c6d9ca050122212a8a269e08f8c23f2", null ],
    [ "eight_status", "nav_8c.html#aab42b8493c217be79eb8f2523b6aed32", [
      [ "R1T", "nav_8c.html#aab42b8493c217be79eb8f2523b6aed32abe183b30b1054c0977b12028d7a38ae0", null ],
      [ "RT2", "nav_8c.html#aab42b8493c217be79eb8f2523b6aed32a64f284f7c34d2b28e318b452acd38672", null ],
      [ "C2", "nav_8c.html#aab42b8493c217be79eb8f2523b6aed32a5e602f1d68586231698bda7be6af7d2e", null ],
      [ "R2T", "nav_8c.html#aab42b8493c217be79eb8f2523b6aed32ac3a5bc8a5c131d8463ba354e54b2305b", null ],
      [ "RT1", "nav_8c.html#aab42b8493c217be79eb8f2523b6aed32a6975c28de6cfc40ea7b0a60d2bad7953", null ],
      [ "C1", "nav_8c.html#aab42b8493c217be79eb8f2523b6aed32ae54c31a855b907f263d49edcdbe677bd", null ]
    ] ],
    [ "compute_TOD", "nav_8c.html#ad9cc0030bdcfa2192dda22875ca68934", null ],
    [ "fly_to_xy", "nav_8c.html#ae9d11d2e378b23ecbee86419cbf341f0"

    [ "nav_approaching_xy", "nav_8c.html#a771b907350b836982ba4e31fd4bcbf4b", null ],
    [ "nav_circle_XY", "nav_8c.html#ad1b9d2e8da4a32477ca8bedc0bca86fe", null ],
    [ "nav_compute_baseleg", "nav_8c.html#ad18f254456d7f982064ea9e36b29ed93", null ],
    [ "nav_compute_final_from_glide", "nav_8c.html#a7a738c44a399a9103371dc53dfabc9dc", null ],
    [ "nav_eight", "nav_8c.html#a289c72677bdc1d6a83aa2cd266335601", null ],
    [ "nav_eight_init", "nav_8c.html#ae9a835aee8c0898c8c5c65190d0b30bc", null ],
    [ "nav_follow", "nav_8c.html#a51583ee86b14f2a389b28f2641c4e010", null ],
    [ "nav_home", "nav_8c.html#a069e6b8f68b2e117cbbe03f29e30a2e3", null ],
    [ "nav_init", "nav_8c.html#a64a3814d1672e69989f80701a0ff5749", null ],
    [ "nav_init_stage", "nav_8c.html#a2580ee456d7dd3d157fd7c43ad2eac2d", null ],
    [ "nav_oval", "nav_8c.html#ae660519c2f89e1c5f9aac7877f1e46e6", null ],
    [ "nav_oval_init", "nav_8c.html#aa602ef7f7d2e485655a7cc97a35b80c3", null ],
    [ "nav_periodic_task", "nav_8

    [ "nav_route_xy", "nav_8c.html#ab4247c9f3dc0417690e1404add032cbe", null ],
    [ "nav_set_altitude", "nav_8c.html#afe6d4a5dd1de94f57126d27a6baac58f", null ],
    [ "nav_without_gps", "nav_8c.html#ab746572e63956a2ad40674328a85b029", null ],
    [ "baseleg_out_qdr", "nav_8c.html#a09096c05260cf7f225d988b6297168c0", null ],
    [ "carrot_x", "nav_8c.html#a2bece6794aadefe30136dcd27b721f53", null ],
    [ "carrot_y", "nav_8c.html#a433f78b82598ad1380701b8b4e376632", null ],
    [ "circle_bank", "nav_8c.html#a421ee656b2e10a372b13bddc4bf546b3", null ],
    [ "desired_x", "nav_8c.html#a88f523b73a294f7cb312604f212c21ab", null ],
    [ "desired_y", "nav_8c.html#ab7d49633159601ed2eaa65f23d612805", null ],
    [ "eight_status", "nav_8c.html#af4a85437e319605798991baf6a5c1b4b", null ],
    [ "flight_altitude", "nav_8c.html#a1612ea0e1474e49b800cb3f497096523", null ],
    [ "fp_climb", "nav_8c.html#adcc3264cc6d2b806b9f4c3f29368c281", null ],
    [ "fp_pitch", "nav_8c.html#a737a463b508f62286a0e62c5e

    [ "fp_throttle", "nav_8c.html#a2be28bd06add4db649c8a0e9f773281a", null ],
    [ "horizontal_mode", "nav_8c.html#ad2a5195a657a7961bfb54e3c2da48a21", null ],
    [ "last_wp", "nav_8c.html#a280519e0d643e2e7ec41137b887d0b31", null ],
    [ "last_x", "nav_8c.html#ab2e97613bcf8e5721e639812c7a3469a", null ],
    [ "last_y", "nav_8c.html#a38c13a13ef3e5a3b6480f71bf244e668", null ],
    [ "nav_altitude", "nav_8c.html#a67342fe7d0a993249d4b4cd0e20821ce", null ],
    [ "nav_carrot_leg_progress", "nav_8c.html#a078073ebb9597d93882d2f58d0b69ca4", null ],
    [ "nav_circle_radians", "nav_8c.html#ae53708a0be0d9df410749c81a8458d6f", null ],
    [ "nav_circle_radians_no_rewind", "nav_8c.html#aa12872e504eb6e366acf1b7d29708431", null ],
    [ "nav_circle_radius", "nav_8c.html#a3e545eca284b674d03e90c15f58e1ff4", null ],
    [ "nav_circle_trigo_qdr", "nav_8c.html#aa10361692f333adcd1ccfd84ff1d0974", null ],
    [ "nav_circle_x", "nav_8c.html#ac1af27920d41a6dbc343fc1d7f55e08c", null ],
    [ "nav_circle_y"

    [ "nav_climb", "nav_8c.html#a45139c6cf4dbda18870cf748337fbea7", null ],
    [ "nav_course", "nav_8c.html#af90efaefda837fe910e6c1d55ea0e949", null ],
    [ "nav_glide_pitch_trim", "nav_8c.html#a0ac0aec8bffae1d911b4f2fa5e2be72b", null ],
    [ "nav_ground_speed_pgain", "nav_8c.html#a4088688165aca8cabadaf45fb0b44643", null ],
    [ "nav_ground_speed_setpoint", "nav_8c.html#aeaf31d3e1ac7e38949cd2b45ea2ce21e", null ],
    [ "nav_in_circle", "nav_8c.html#a3d597a1b316fdba0db5701a03ad56c7b", null ],
    [ "nav_in_segment", "nav_8c.html#a70c77743e83862b67b86056fcc80a8ec", null ],
    [ "nav_leg_length", "nav_8c.html#aacf1866dff03a2d6eba27ddefae85636", null ],
    [ "nav_leg_progress", "nav_8c.html#a620eee3565104705439b86c0011d5ce5", null ],
    [ "nav_mode", "nav_8c.html#a100095dcf201264924107b608a3ed5cd", null ],
    [ "nav_oval_count", "nav_8c.html#a3f8eab6736191ca3d1cb16738cbcf97f", null ],
    [ "nav_pitch", "nav_8c.html#ac1ac32b055c0a7879329346b1662f313", null ],
    [ "nav_radius", "

    [ "nav_segment_x_1", "nav_8c.html#a8b5c072e3f61f9025578e3e6283ffcb1", null ],
    [ "nav_segment_x_2", "nav_8c.html#a123af850aca7872d4ae1f0fd561fc302", null ],
    [ "nav_segment_y_1", "nav_8c.html#aa04e457095198f649868d28f72969029", null ],
    [ "nav_segment_y_2", "nav_8c.html#a2992c5b1e4da4284068a225e451877a4", null ],
    [ "nav_shift", "nav_8c.html#aae62d3a760ee0f535ee7bf9131df6d9c", null ],
    [ "nav_survey_active", "nav_8c.html#a68393cb43ffff9bfff53cce34d108e38", null ],
    [ "nav_survey_east", "nav_8c.html#a1709471dbc0af61015c59e136100e118", null ],
    [ "nav_survey_north", "nav_8c.html#a4bd5ccc05012fbe9ba362b941aea7294", null ],
    [ "nav_survey_shift", "nav_8c.html#ad07af37c66417d0eac97740c696ace0d", null ],
    [ "nav_survey_south", "nav_8c.html#a5bd732618e35c5a855ef4e0549f733f0", null ],
    [ "nav_survey_west", "nav_8c.html#aeb19008e34a80086cfcb00ae5ae32fdd", null ],
    [ "nav_throttle_setpoint", "nav_8c.html#a5eb16c9d058ba78537ddf42c2ace1075", null ],
    [ "ova
function getState() {
  return {
    selectedNav: NavigationStore.getSelectedNav(),
    navOptions: NavigationStore.getNavOptions(),
    navSections: NavigationStore.getNavSections()
    
  };
export default class Navigation extends Component {
  state = getState()
  componentDidMount() {
    this._onChange = this._onChange.bind(this);
    NavigationStore.addChangeListener(this._onChange);
  }
  componentWillUnmount() {
    NavigationStore.removeChangeListener(this._onChange);
  }
  render() {
    const selectedNav = this.state.selectedNav;
    return <nav className='Navigation'>
      <ul className='Navigation__sections'>{ map(this.state.navSections, navSection =>
        <li className='Navigation__section' key={navSection.id}>
          <h3 className='Navigation__section-header'>{navSection.display}</h3>
          <ul className='Navigation__options'>{ map(this.getNavOptionsForSection(navSection), navOption =>
            <li
              className={(selectedNav === navOption.id ? 'N
var Application;
(function(Application) {
    (function(Controller) {
        var HuntController = (function() {
            function HuntController($scope, $http, $location, $sce) {
                this.$scope = $scope;
                this.$http = $http;
                this.$location = $location;
                this.$sce = $sce;
                $scope.getClass = function(path) {
                    return ($location.path().substr(0, path.length) === path) ? "active" : "";
                };
            }
            HuntController.$inject = ['$scope', '$http', '$location', '$sce'];
            return HuntController;
        })();
        Controller.HuntController = HuntController;
    })(Application.Controller || (Application.Controller = {}));
    var Controller = Application.Controller;
})(Application || (Application = {}));
var app = angular.module('Application', [
    'ngRoute'
]);
app.config(['$routeProvider', function($routeProvider) {
        $routeProvider.
                
﻿angular.module('offerScope', [])
.controller('offerController', ['$scope', function ($scope) {
    $scope.getEmployeeList = function () {
        return $.ajax({
            type: "GET",
            url: "/api/api_Employee",
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            async: false,
            success: function (html) {
                return html;
            }
        }).responseText;
    };
    $scope.employeeList = JSON.parse($scope.getEmployeeList());
	    $scope.Klikacz = function () {
console.log('Klikacz');
    };
    $scope.mock = [
            
  { serviceName: 'Wymiana oleju'
, serviceCost: 'od 35'
, },
  { serviceName: 'Wymiana oleju w skrzyni biegów'
, serviceCost: 'od 40'
, },
  { serviceName: 'Wymiana filtra paliwa'
, serviceCost: 'od 35'
, },
  { serviceName: 'Wymiana filtra powietrza'
, serviceCost: 'od 15'
, },
  { serviceName: 'Ustawienie zbieżności'
, serviceCost: 'od 80'
, },
  { serviceName: 'Wymiana klock

, serviceCost: 'od 65'
, },
  { serviceName: 'Wymiana tarcz i klocków'
, serviceCost: 'od 99'
, },
  { serviceName: 'Wymiana przewodu hamulcowego elastycznego'
, serviceCost: 'od 45'
, },
  { serviceName: 'Wymiana płynu hamulcowego'
, serviceCost: 'od 70'
, },
  { serviceName: 'Odpowietrzenie układu hamulcowego'
, serviceCost: 'od 50'
, },
  { serviceName: 'Czyszczenie zacisku hamulcowego'
, serviceCost: 'od 90'
, },
  { serviceName: 'Wymiana sworznia wahacza'
, serviceCost: 'od 55'
, },
  { serviceName: 'Wymiana wahacza'
, serviceCost: 'od 65'
, },
  { serviceName: 'Wymiana końcówki drążka kierowniczego'
, serviceCost: 'od 40'
, },
  { serviceName: 'Wymiana drążka kierowniczego'
, serviceCost: 'od 70'
, },
  { serviceName: 'Wymiana silentblocka wahacza'
, serviceCost: 'od 70'
, },
  { serviceName: 'Wymiana łącznika stabilizatora'
, serviceCost: 'od 35'
, },
  { serviceName: 'Wymiana poduszki stabilizatora'
, serviceCost: 'od 45'
, },
  { serviceName: 'Wymiana łożyska przedniego'
, se

, },
  { serviceName: 'Wymiana amortyzatorów przednich'
, serviceCost: 'od 180'
, },
  { serviceName: 'Wymiana łożyska tylnego'
, serviceCost: 'od 65'
, },
  { serviceName: 'Wymiana szczęk'
, serviceCost: 'od 95'
, },
  { serviceName: 'Wymiana silentblocków belki tylnej'
, serviceCost: 'od 280'
, },
  { serviceName: 'Wymiana amortyzatorów tylnych'
, serviceCost: 'od 85'
, },
  { serviceName: 'Wymiana przegubu napędowego'
, serviceCost: 'od 95'
, },
  { serviceName: 'Wymiana osłony przegubu napędowego'
, serviceCost: 'od 90'
, },
  { serviceName: 'Wymiana paska klinowego'
, serviceCost: 'od 30'
, },
  { serviceName: 'Wymiana płynu w układzie chłodniczym'
, serviceCost: 'od 55'
, },
  { serviceName: 'Wymiana świecy zapłonowej'
, serviceCost: 'od 15'
, },
  { serviceName: 'Wymiana kabli zapłonowych'
, serviceCost: 'od 30'
, },
  { serviceName: 'Wymiana tłumika tylnego'
, serviceCost: 'od 60'
, },
  { serviceName: 'Wymiana tłumika przedniego'
, serviceCost: 'od 80'
, },
{ serviceName: 'Wy
angular.module('JFC.controller', [])
    .constant('progressConfig', {
        urlPrefix : (function(){
        })()
    })
    .controller("ApplicationController", ["$scope", "$http", "$location", "$timeout", "$rootScope","$localStorage","$sessionStorage", "progressConfig", ApplicationController])
    .controller("HomeController", ["$scope", "$route","$http","$routeParams", "progressConfig", HomeController])
    .controller("ConfigController", ["$scope", "$route","$http","$localStorage", "$routeParams", "progressConfig", ConfigController])    
    .controller("AdminController", ["$scope", "$route","$http","$timeout", "$location", "$routeParams", "progressConfig", AdminController])
    .controller("SceneController", ["$scope", "$route","$http","$localStorage", SceneController])
    .controller("LoginController", ["$scope", "$route","$http","$localStorage", LoginController])
    .controller("UISelectController", ["$scope", "$attrs", "progressConfig", UISelectController])
    .controller
function showFB(fb) { parent.leftnav.showFB(fb); }
function showMC(mc) { parent.leftnav.showAppletMC(mc); }
function showEqn(sig) { parent.leftnav.showEqn(sig); }
function showPin(pin) { parent.leftnav.showAppletPin(pin); }
function showLegend(url) { parent.leftnav.showLegend(url, 650, 350); }
function showTop() { parent.leftnav.showTop(); }
function Sort(x) {
  switch (x) {
    case 0: parent.leftnav.showMappedLogics(0); break;
    case 1: parent.leftnav.showMappedLogics(2); break;
    case 2: parent.leftnav.showMappedLogics(4); break;
    case 10: parent.leftnav.showMappedInputs(0); break;
    case 11: parent.leftnav.showMappedInputs(2); break;
    case 12: parent.leftnav.showMappedInputs(4); break;
    case 20: parent.leftnav.showUnMappedLogics(0); break;
    case 21: parent.leftnav.showUnMappedLogics(2); break;
    case 22: parent.leftnav.showUnMappedLogics(4); break;
    case 30: parent.leftnav.showUnMappedInputs(0); break;
    case 31: parent.leftnav.showUnMappedInputs(2); break;
var moongose =require('mongoose');
var Schema =require('./mongoSchema');
var Message=moongose.model('Message',Schema.messageSchema);
var Comment=moongose.model('Comment',Schema.commentSchema);
var User=moongose.model('User',Schema.userSchema);
var Models ={
    MessageModel :Message,
    CommentModel :Comment,
    UserModel :User
module.exports =Models;
/*var messageInsert=new Message(
    {
        messageType :'T',
        messageData :'xxx',
        messageLikes:0,
        messagePostedDate :new Date()
    }
messageInsert.save(function(err,data)
    {
        console.log("data inserted");
    }
)*/
/*
Message.findById({"_id" : "55f824a863b9c6601cac0f6d"},function(err,message)
    {
message.messageLikes=message.messageLikes+1;
        message.save(function(err,data)
            {
                console.log("Updated successfully")
            }
        )
    }
)*/
/*
Message.update({"_id" : "55f824a863b9c6601cac0f6d"},{$set:{messageType:'F'}},function(err,data)
    console.log("Updat
var controller = require('../controller/controller');
module.exports = function (app) {
    app.get('/', controller.index);
    app.get('/login', controller.showLogin);
    app.get('/apply', controller.apply);
    app.post('/apply', controller.signinRequired, controller.saveApply);
    app.post('/user/signin', controller.signin);
    app.get('/user/logout', controller.logout);
    app.get('/user/msg', controller.userMsg);
    app.get('/admin', controller.adminRequired, controller.showAdmin);
    app.get('/admin/apply/num', controller.adminRequired, controller.applyNum);
    app.post('/admin/print', controller.adminRequired, controller.print);
    app.post('/admin/adduser', controller.adminRequired, controller.addUser);
    app.get('/admin/userlist', controller.adminRequired, controller.userList);
    app.post('/admin/getuserinfo', controller.adminRequired, controller.getUserInfo);
    app.post('/admin/updateuser', controller.adminRequired, controller.updateUser);
    app.get('/admin/re
$(document).ready(function(){
	/* Extended the navigation bar across the whole window and centralises the items. */
	var nav_width = parseInt($('nav').css('width'));
	var document_width = parseInt($(document).width());
	var nav_padding = (document_width - nav_width) / 2;
	var nav_items_width = 0;
	var nav_items = [];
	$('.nav_item').each(function(i){
		nav_items_width += i;
		nav_items[i] = $(this).width();
		nav_items_width += nav_items[i];
		nav_items_width += parseInt($(this).css('padding-left'));
		nav_items_width += parseInt($(this).css('padding-right'));
	});
	var nav_additional_padding = (nav_width - nav_items_width) / 2;
	$('nav').css({
		'margin-left' : '-'+nav_padding+'px',
		'padding-left' : (nav_padding + nav_additional_padding)+'px',
		'padding-right' : (nav_padding + nav_additional_padding)+'px',
		'width' : nav_items_width
	});
	if($.browser.msie && $.browser.version.substr(0,1) < 8){
		$('.nav_item').each(function(i){
			$(this).css('width', nav_items[i]);
		});
	}
	/* 
/**
 * Created by bingoogolapple on 2017/7/14.
 */
const showMessage = function (data) {
  if (data.message) {
    this.$message({
      showClose: true,
      message: data.message,
      type: data.type
    })
    let messageArr = document.querySelectorAll('div.el-message')
    if (messageArr && messageArr.length > 0) {
      let messageNode = messageArr[messageArr.length - 1]
      if (data.type === 'warning') {
        messageNode.style.backgroundColor = '#F7BA2A'
      } else if (data.type === 'error') {
        messageNode.style.backgroundColor = '#FF4949'
      } else if (data.type === 'success') {
        messageNode.style.backgroundColor = '#13CE66'
      } else {
        messageNode.style.backgroundColor = '#50BFFF'
      }
    }
  }
const successMessage = function (message) {
  this.$showMessage({
    message: message,
    type: 'success'
  })
const errorMessage = function (message) {
  this.$showMessage({
    message: message,
    type: 'error'
  })
const warningMessage = f
var Class = require('../ext/Class');
var SparqlServiceHttp = require('./sparql_service/SparqlServiceHttp');
var SparqlServicePaginate = require('./sparql_service/SparqlServicePaginate');
var SparqlServicePageExpand = require('./sparql_service/SparqlServicePageExpand');
var SparqlServiceCache = require('./sparql_service/SparqlServiceCache');
var SparqlServiceVirtFix = require('./sparql_service/SparqlServiceVirtFix');
var SparqlServiceLimit = require('./sparql_service/SparqlServiceLimit');
var SparqlServiceConsoleLog = require('./sparql_service/SparqlServiceConsoleLog');
var SparqlServiceBuilder = Class.create({
    initialize: function(sparqlService) {
        this.sparqlService = sparqlService;
    },
    create: function() {
        return this.sparqlService;
    },
    log: function() {
        this.sparqlService = new SparqlServiceConsoleLog(this.sparqlService);
        return this;
    },
    paginate: function(pageSize) {
        this.sparqlService = new SparqlServicePaginate(this

        return this;
    },
    pageExpand: function(pageSize) {
        this.sparqlService = new SparqlServicePageExpand(this.sparqlService, pageSize);
        return this;
    },
    cache: function(requestCache) {
        this.sparqlService = new SparqlServiceCache(this.sparqlService, requestCache);
        return this;
    },
    virtFix: function() {
        this.sparqlService = new SparqlServiceVirtFix(this.sparqlService);
        return this;
    },
    limit: function(limit) {
        this.sparqlService = new SparqlServiceLimit(this.sparqlService, limit);
        return this;
    },
});
SparqlServiceBuilder.from = function(sparqlService) {
    var result = new SparqlServiceBuilder(sparqlService);
    return result;
};
SparqlServiceBuilder.http = function(serviceUri, defaultGraphUris, ajaxOptions, httpArgs) {
    var sparqlService = new SparqlServiceHttp(serviceUri, defaultGraphUris, ajaxOptions, httpArgs);
    var result = SparqlServiceBuilder.from(sparqlService);
    return r
module( "core.Model", {
    setup: function() {
        Model.removeAllServices();
    }
});
var TestService = Service.extend({
    isAdded: false,
    init: function( name ) {
        this._super( name );
    },
    added: function() {
        this.isAdded = true;
    },
    removed: function() {
        this.isAdded = false;
    }
});
test( "serviceIsAdded", 4, function() {
    var service = new TestService( "testName", {});
    
    Model.addService( service );
    
    ok( Model.hasService( "testName" ), "service is added" );
    ok( service.isAdded, "service added() is called" );
    
    raises( function() {
        Model.addService( service );
    }, "raises error if service already added" );
    
    strictEqual( Model.getService( "testName" ), service, "fetched service is equal" );
});
test( "serviceIsRemoved", 2, function() {
    var service = new TestService( "testName", {});
    
    Model.addService( service );
    Model.removeService( "testName" );
    
    ok( !Model.has
var _copy_dispatch = {};
_copy_dispatch[Array] = function _copy_Array(x) { return x };
_copy_dispatch[Boolean] = function _copy_Boolean(x) { return x };
_copy_dispatch[Date] = function _copy_Date(x) { return x };
_copy_dispatch[Error] = function _copy_Error(x) { return x };
_copy_dispatch[EvalError] = function _copy_EvalError(x) { return x };
_copy_dispatch[Function] = function _copy_Function(x) { return x };
_copy_dispatch[Math] = function _copy_Math(x) { return x };
_copy_dispatch[Number] = function _copy_Number(x) { return x };
_copy_dispatch[Object] = function _copy_Object(x) { return x };
_copy_dispatch[RangeError] = function _copy_RangeError(x) { return x };
_copy_dispatch[ReferenceError] = function _copy_ReferenceError(x) { return x };
_copy_dispatch[RegExp] = function _copy_RegExp(x) { return x };
_copy_dispatch[String] = function _copy_String(x) { return x };
_copy_dispatch[SyntaxError] = function _copy_SyntaxError(x) { return x };
_copy_dispatch[TypeError] = function _copy_Ty

_copy_dispatch[URIError] = function _copy_URIError(x) { return x };
_copy_dispatch[Array] = function _copy_Array(x) {
    return x.map(function(value) {return value});
_copy_dispatch[Object] = function _copy_Object(object) {
    return extend({}, object);
_copy_dispatch['Instance'] = function _copy_Instance(o) {
    var obj = type('Empty', object);
    obj.prototype.constructor = o.constructor;
    obj = new obj();
    extend(obj, o);
    obj['__name__'] = o['__name__'];
    obj['__module__'] = o['__module__'];
    obj['__class__'] = o['__class__'];
    return obj;
function copy(x) {
    if (typeof(x) === 'undefined') return undefined;
    if (x === null) return null;
    if (callable(x['__copy__']))
        return x.__copy__(x);
    var cls = type(x);
    var copier = _copy_dispatch[cls];
    if (copier)
        return copier(x);
    
    if (x instanceof cls) return _copy_dispatch['Instance'](x);
    return x;
/* Deepcopy */
var _deepcopy_dispatch = {};
_deepcopy_dispatch[Array] = f

_deepcopy_dispatch[Boolean] = function _deepcopy_Boolean(x) { return x };
_deepcopy_dispatch[Date] = function _deepcopy_Date(x) { return x };
_deepcopy_dispatch[Error] = function _deepcopy_Error(x) { return x };
_deepcopy_dispatch[EvalError] = function _deepcopy_EvalError(x) { return x };
_deepcopy_dispatch[Function] = function _deepcopy_Function(x) { return x };
_deepcopy_dispatch[Math] = function _deepcopy_Math(x) { return x };
_deepcopy_dispatch[Number] = function _deepcopy_Number(x) { return x };
_deepcopy_dispatch[Object] = function _deepcopy_Object(x) { return x };
_deepcopy_dispatch[RangeError] = function _deepcopy_RangeError(x) { return x };
_deepcopy_dispatch[ReferenceError] = function _deepcopy_ReferenceError(x) { return x };
_deepcopy_dispatch[RegExp] = function _deepcopy_RegExp(x) { return x };
_deepcopy_dispatch[String] = function _deepcopy_String(x) { return x };
_deepcopy_dispatch[SyntaxError] = function _deepcopy_SyntaxError(x) { return x };
_deepcopy_dispatch[TypeErro
'use strict';
angular.module('StressApp').config(['$routeProvider', function($routeProvider){
  $routeProvider
    .when('/',{
      templateUrl: 'views/main.html',
      controller: 'HomeController'
    })
    .when('/login',{
      templateUrl: 'views/partials/login.html'
    })
    .when('/signup',{
      templateUrl: 'views/partials/signup.html'
    })
    .when('/resources',{
      templateUrl: 'views/resources.html',
      controller: 'ImageController',
      controllerAs: 'imageController'
    })
    .when('/profile',{
      templateUrl: 'views/profile.html',
      controller: 'ProfileController',
      controllerAs: 'profileController'
    })
    .when('/profile/create-update',{
      templateUrl: 'views/partials/profile-create-update.html',
      controller: 'ProfileController',
      controllerAs: 'profileController'
    })
     .when('/journal',{
      templateUrl: 'views/journals.html',
      controller: 'JournalController',
      controllerAs: 'journalController'
    })
  
/**
@module ang-layout
@class ang-header
*/
'use strict';
angular.module('myApp').controller('HeaderCtrl', ['$scope', 'appNav', 'appConfig', function($scope, appNav, appConfig) {
	$scope.nav ={};
	$scope.classes ={
		cont: ''
	};
	var nav;
	/**
	@method init
	*/
	function init(params) {
		nav =appNav.getNav({});
			var ppSend ={};
			ppSend.loggedIn =appConfig.state.loggedIn;
			nav =navLoginUpdate(nav, ppSend);
			setNav(nav.header, {});
		}
	}
	/**
	@method setNav
	*/
	function setNav(nav, params) {
			$scope.nav =nav;
			if($scope.nav.classes !==undefined && $scope.nav.classes.cont !==undefined && $scope.nav.classes.cont =='hidden') {
				$scope.classes.cont =$scope.nav.classes.cont;
			}
			else {
			}
		}
	}
	/**
	@param {Object} params
		@param {Object} nav
	*/
	$scope.$on('appNavHeaderUpdate', function(evt, params) {
		setNav(params.nav.header, {});
	});
	/**
	Handles post login (or reverse for logout) - need to update nav header (toggle between login / logout)
	@toc 2.
	@method
'use strict';
describe('Service: messageService', function () {
  var messageService;
  var ENV;
  beforeEach(function () {
    module('markdownNote');
    module('templates');
  });
  beforeEach(inject(function ($injector) {
    messageService = $injector.get('messageService');
  }));
  describe('Check messageService initialization', function () {
    it('should init all messages to empty string', function () {
      expect(messageService.messages['showAboutMessage']).to.equal('');
      expect(messageService.messages['loadLocalFileMessage']).to.equal('');
      expect(messageService.messages['saveLocalFileMessage']).to.equal('');
      expect(messageService.messages['dropboxWriteMessage']).to.equal('');
      expect(messageService.messages['dropboxReadMessage']).to.equal('');
    });
  });
  describe('clearing messages', function () {
    var tempMessages = {};
    beforeEach(function () {
      tempMessages = angular.copy(messageService.messages);
    });
    afterEach(function () {

      messageService.messages = tempMessages;
    });
    it('should clear clearExtrasModalMessages', function () {
      messageService.messages['showAboutMessage'] = 'test string';
      messageService.messages['loadLocalFileMessage'] = 'test string';
      messageService.messages['saveLocalFileMessage'] = 'test string';
      messageService.clearExtrasModalMessages();
      expect(messageService.messages['showAboutMessage']).to.equal('');
      expect(messageService.messages['loadLocalFileMessage']).to.equal('');
      expect(messageService.messages['saveLocalFileMessage']).to.equal('');
      expect(messageService.messages['dropboxWriteMessage']).to.equal('');
      expect(messageService.messages['dropboxReadMessage']).to.equal('');
    });
  });
  describe('apply message', function () {
    var extrasModal;
    var element;
    var scope;
    var $compile;
    var isolated;
    var modalElement;
    beforeEach(function () {
      inject(function ($injector) {
        $compile = $

        scope = $injector.get('$rootScope').$new();
      });
      element = $compile('<ion-header-bar app-header></ion-header-bar>')(scope);
      scope.$digest();
      isolated = element.isolateScope();
      extrasModal = isolated.ctrl.extrasModal;
      modalElement = extrasModal.$el;
    });
    it('should apply message', function () {
      var messageContainer = modalElement.find('#dropboxReadMessageCard div h3');
      var tempMessage = messageContainer.text();
      messageService.applyMessage({
        messageType: 'dropboxReadMessage',
        message: 'test message'
      });
      expect(messageContainer.text()).to.equal('test message');
      messageContainer.text(tempMessage);
    });
    it('should get message', function () {
      var messageType = 'dropboxReadMessage';
      var tempMessage = messageService.messages[messageType];
      messageService.messages[messageType] = 'test get message';
      expect(messageService.getMessage({messageType: messageType}))
    
$(document).ready(function()
	$("#nav-indicator-fixed").append("A");
	$("#iphone-search").fadeTo(1, 0.85);
	$("#iphone-search").hover(function()
	{
		$("#iphone-search").addClass("searchbg");
	},function()
	{
		$("#iphone-search").removeClass("searchbg");
	});
	var curb = $("#nav-b").position().top;
	var curc = $("#nav-c").position().top;
	var curd = $("#nav-d").position().top;
	var cure = $("#nav-e").position().top;
	var curf = $("#nav-f").position().top;
	var curg = $("#nav-g").position().top;
	var curi = $("#nav-i").position().top;
	var changeNavIndicator = function(value)
	{
		$("#nav-indicator-fixed").replaceWith("<div id=\"nav-indicator-fixed\">"+value+"</div>");
	}
	$("#iphone-scrollcontainer").scroll(function()
	{
		if($("#nav-a").position().top < 20 && $("#nav-a").position().top > -20)
			changeNavIndicator("A");
		
		if($("#nav-b").position().top < 20 && $("#nav-b").position().top > -20)
		{
			if(curb < $("#nav-b").position().top)
				changeNavIndicator("A");
			else
				cha

			curb = $("#nav-b").position().top;
		}
		if($("#nav-c").position().top < 20 && $("#nav-c").position().top > -20)
		{
			if(curc < $("#nav-c").position().top)
				changeNavIndicator("B");
			else
				changeNavIndicator("C");;
			curc = $("#nav-c").position().top;
		}
		if($("#nav-d").position().top < 20 && $("#nav-d").position().top > -20)
		{
			if(curd < $("#nav-d").position().top)
				changeNavIndicator("C");
			else
				changeNavIndicator("D");
			curd = $("#nav-d").position().top;
		}
		if($("#nav-e").position().top < 20 && $("#nav-e").position().top > -20)
		{
			if(cure < $("#nav-e").position().top)
				changeNavIndicator("D");
			else
				changeNavIndicator("E");
			cure = $("#nav-e").position().top;
		}
		if($("#nav-f").position().top < 20 && $("#nav-f").position().top > -20)
		{
			if(curf < $("#nav-f").position().top)
				changeNavIndicator("E");
			else
				changeNavIndicator("F");
			curf = $("#nav-f").position().top;
		}
		if($("#nav-g").position().top < 20 && $("#nav-
/*
 * Modules
 * 
 * This is where dependency injection is carried out
 * @author Dennis Höting
 */
var appModule = angular.module('app', ['filters', 'directives', 'idServices', 'servletCommunicationServices', 'simulationModule', 'mapServices', 'popupServices', 'callbackServices', 'consoleServices', 'eventLogServices']).
	/*
	 * Inject MapService
	 */
	factory('MapService', function(OpenLayersService) {
		return OpenLayersService;
	}).
	/*
	 * Inject ServletCommunicationService
	 */
	factory('ServletCommunicationService', function(WebSocketService) {
		return WebSocketService;
	}).
	/*
	 * Inject PopupService
	 */
	factory('PopupService', function(SimplePopupService) {
		return SimplePopupService;
	}).
	/*
	 * Inject ConsoleService
	 */
	factory('ConsoleService', function(SimpleConsoleService) {
		return SimpleConsoleService;
	}).
	/*
	 * Inject CallbackService
	 */
	factory('CallbackService', function(SimpleCallbackService) {
		return SimpleCallbackService;
	}).
	/*
	 * Inject EventLo
(function() {
    var app = angular.module('controllers');
    app.directive('loginForm', ['$rootScope', 'Users', function($rootScope, Users) {
        return {
            restrict: 'E',
            templateUrl: 'templates/login-form.html',
            controllerAs: 'login',
            controller: function() {
            var controller = this;
            controller.logged = false;
            controller.username = '';
            controller.password = '';
            controller.loading = false;
            controller.show = false;
            var users = new Users();
            controller.loading = true;
            users.getSession(function(data, status, headers, config) {
                controller.loading = false;
                controller.logged = data.display_name;
                $rootScope.$broadcast('loggedIn');
            }, function() {
                controller.loading = false;
            });
            controller.login = function() {
                controller.loa

                users.login(controller.username, controller.password, function(data, status, headers, config) {
                    controller.logged = data.display_name;
                    controller.loading = false;
                    controller.toggle();
                    $rootScope.$broadcast('loggedIn');
                }, function () {
                    controller.loading = false;
                });
            }
            controller.logout = function() {
                controller.loading = true;
                users.logout(function() {
                    controller.loading = false;
                    controller.logged = false;
                    controller.username = '';
                    controller.password = '';
                    controller.toggle();
                    $rootScope.$broadcast('loggedOut');
                });
            }
            controller.toggle = function () {
                controller.show = !controller.show;
            }
         
'use strict';
InspectormanApp.factory('NavService', function ($rootScope) {
    var NavService = {};
    NavService.showNav = function () {
        $rootScope.$broadcast('show_nav');
    };
    NavService.hideNav = function () {
        $rootScope.$broadcast('hide_nav');
    };
    NavService.dashboarActive = function () {
        $rootScope.$broadcast('dashboard_active');
    };
    NavService.settingsActive = function () {
        $rootScope.$broadcast('settings_active');
    };
    NavService.detailActive = function () {
        $rootScope.$broadcast('detail_active');
    };
    NavService.formsActive = function () {
        $rootScope.$broadcast('forms_active');
    };
    NavService.summaryActive = function () {
        $rootScope.$broadcast('summary_active');
    };
    NavService.complaintsActive = function () {
        $rootScope.$broadcast('complaints_active');
    };
    NavService.historyActive = function () {
        $rootScope.$broadcast('history_active');
    };
    retur
define([
       'modules/fauxton/base',
      'testUtils'
], function (Fauxton, testUtils) {
  var assert = testUtils.assert,
      NavBar = Fauxton.NavBar;
  describe('NavBar', function () {
    describe('adding links', function () {
      var navBar;
      beforeEach(function () {
        navBar = new NavBar();
        navBar.navLinks = [];
        navBar.bottomNavLinks = [];
        navBar.footerNavLinks = [];
      });
      it('Should add link to navlinks', function () {
        navBar.addLink({href: '#/test', title: 'Test Title'});
        assert.equal(navBar.navLinks.length, 1);
        assert.equal(navBar.footerNavLinks.length, 0);
        assert.equal(navBar.bottomNavLinks.length, 0);
      });
      it('Should add link to bottom links', function () {
        navBar.addLink({href: '#/test', bottomNav: true, title: 'Test Title'});
        assert.equal(navBar.bottomNavLinks.length, 1);
        assert.equal(navBar.navLinks.length, 0);
        assert.equal(navBar.footerNavLinks.le

      });
      it('Should add link to footer links', function () {
        navBar.addLink({href: '#/test', footerNav: true, title: 'Test Title'});
        assert.equal(navBar.footerNavLinks.length, 1);
        assert.equal(navBar.bottomNavLinks.length, 0);
        assert.equal(navBar.navLinks.length, 0);
      });
    });
    describe('removing links', function () {
      var navBar;
      beforeEach(function () {
        navBar = new NavBar();
        navBar.navLinks = [];
        navBar.bottomNavLinks = [];
        navBar.footerNavLinks = [];
        navBar.addLink({
          href: '#/test', 
          footerNav: true, 
          title: 'Test Title Footer'
        });
        navBar.addLink({
          href: '#/test', 
          bottomNav: true, 
          title: 'Test Title Bottom'
        });
        navBar.addLink({
          href: '#/test', 
          title: 'Test Title'
        });
      });
      it("should remove links from list", function () {
        navBar.removeLink({
 
(function() {
    'use strict';
angular.module('ag-admin').controller(
    'ApiOverviewController',
    function ($scope, $state, $timeout, flash, ApiRepository) {
    $scope.api = {};
    $scope.defaultApiVersion = 1;
    $scope.deleteApiPanelIsCollapsed = true;
    var updateApi = function (api) {
        $scope.api = api;
        $scope.defaultApiVersion = api.default_version;
    };
    $scope.setDefaultApiVersion = function () {
        flash.info = 'Setting the default API version to ' + $scope.defaultApiVersion;
        ApiRepository.setDefaultApiVersion($scope.api.name, $scope.defaultApiVersion).then(
            function (data) {
                flash.success = 'Default API version updated';
                $scope.defaultApiVersion = data.version;
            }
        );
    };
    $scope.$on('api.version.update', function () {
        ApiRepository.getApi($state.params.apiName, $state.params.version, true).then(
            function (api) {
                updateApi(api);
  
var middleware  = require('../middleware').middleware,
    api         = require('../api');
module.exports = function (server) {
    server.get('/ghost/api/v0.1/posts', api.requestHandler(api.posts.browse));
    server.post('/ghost/api/v0.1/posts', api.requestHandler(api.posts.add));
    server.get('/ghost/api/v0.1/posts/:id', api.requestHandler(api.posts.read));
    server.put('/ghost/api/v0.1/posts/:id', api.requestHandler(api.posts.edit));
    server.del('/ghost/api/v0.1/posts/:id', api.requestHandler(api.posts.destroy));
    server.get('/ghost/api/v0.1/posts/getSlug/:title', middleware.authAPI, api.requestHandler(api.posts.getSlug));
    server.get('/ghost/api/v0.1/settings/', api.requestHandler(api.settings.browse));
    server.get('/ghost/api/v0.1/settings/:key/', api.requestHandler(api.settings.read));
    server.put('/ghost/api/v0.1/settings/', api.requestHandler(api.settings.edit));
    server.get('/ghost/api/v0.1/users/', api.requestHandler(api.users.browse));
    server.get(
export const getPostsList = function ({dispatch}) {
  dispatch(types.REQUEST_POSTS_LIST)
  this.$http.get(`${API_ROOT}api/post/normal`).then(function (response) {
    dispatch(types.GET_POSTS_LIST, JSON.parse(response.body))
  }, function (error) {
    dispatch(types.GET_POST_FAILURE, error)
  })
export const getHeadline = ({dispatch}) => {
  dispatch(types.GET_HEADLINE)
export const updateHeadline = ({dispatch}, value) => {
  dispatch(types.UPDATE_HEADLINE, value)
export const getPost = function ({dispatch}, title) {
  this
    .$http
    .get(`${API_ROOT}api/post/normal/${title}`)
    .then(function (response) {
      dispatch(types.GET_POST, JSON.parse(response.body))
    }, function (error) {
      dispatch(types.GET_POST_FAILURE, error)
    })
export const clearPost = function ({dispatch}) {
  dispatch(types.CLEAR_POST)
export const getTags = function ({dispatch}) {
  this
    .$http
    .get(API_ROOT + 'api/tags')
    .then(function (response) {
      dispatch(types.GET_TAGS, JSO

    }, error => {
      dispatch(types.GET_TAGS_FAILURE, error)
    })
export const getTagPostsList = function ({dispatch}, tag) {
  this
    .$http
    .get(`${API_ROOT}api/tags/${tag}`)
    .then(function (response) {
      dispatch(types.GET_TAG_POSTS_LIST, JSON.parse(response.body), tag)
    }, function (error) {
      dispatch(types.GET_TAG_POSTS_LIST_FAILURE, error)
    })
export const submitComment = function ({dispatch}, data) {
  this
    .$http
    .post(`${API_ROOT}api/submitComment`, data)
    .then(function (response) {
      dispatch(types.SUBMIT_COMMENT, JSON.parse(response.body), error => {
        dispatch(types.SUBMIT_COMMENT_FAILURE, error)
      })
    })
export const submitResume = function ({dispatch}, data) {
  this
    .$http
    .post(`${API_ROOT}api/submitResume`, data)
    .then(function (response) {
      dispatch(types.SUBMIT_RESUME, JSON.parse(response.body), error => {
        dispatch(types.SUBMIT_RESUME_FAILURE, error)
      })
    })
export const subm
class MessageList extends React.Component {
  messageType( message ) {
    if( message.type === "usermessage" ) {
      return (
        <Message key={this.props.messages.indexOf(message)} currentUserId={this.props.currentUserId} messageData={message} />
      );
    } else if( message.type === "alert" ) {
      return (
        <Alert message={message.message} />
      );
    }
  }
  render() {
    var messages = [];
    this.props.messages.map( message => {
      var messageComponent;
      switch( message.type ) {
        case "usermessage":
          messageComponent = <Message key={this.props.messages.indexOf(message)} currentUserId={this.props.currentUserId} messageData={message} />;
          break;
        case "alert":
          messageComponent = <Alert key={this.props.messages.indexOf(message)} message={message.message} />;
          break;
      }
      messages.push( messageComponent );
    });
    return (
      <section className="container-messages">
        {
         
'use strict';
var compassDirective = require('./directives/compassDirective');
var lazyImageDirective = require('./directives/lazyImageDirective');
var StringUtilService = require('./services/StringUtilService');
var PostalOracleService = require('./services/PostalOracleService');
var PersistenceService = require('./services/PersistenceService');
var DateUtilsService = require('./services/DateUtilsService');
var RoutingService = require('./services/RoutingService');
var RandomService = require('./services/RandomService');
var ServerTime = require('./services/ServerTime');
var ItemStorageService = require('./services/ItemStorageService');
var TrayStorageService = require('./services/TrayStorageService');
var PageLockService = require('./services/PageLockService');
var LastPageService = require('./services/LastPageService');
var EnvironmentService = require('./services/EnvironmentService');
var NumberFixedLength = require('./filters/numberFixedLength');
module.exports = angular.module('c
﻿(function () {
    'use strict';
    angular
        .module('services.api')
        .service('servicesService', servicesService);
    servicesService.$inject = ['apiService'];
    function servicesService(apiService) {
        var service = {};
        service.getServicesByProjectId = function (projectId) {
            return apiService.getWithoutCaching('Services/GetServicesGrid/' + projectId);
        }
        service.getServiceByServiceId = function (serviceId) {
            return apiService.getWithoutCaching('Services/GetEditMultiple/' + serviceId);
        }
        service.getServiceByServiceIdToEditService = function (serviceId) {
            return apiService.getWithoutCaching('Services/GetEdit/' + serviceId);
        }
        service.editService = function (params) {
            return apiService.post('Services/EditServiceSingle', params);
        }
        service.createServiceTaxMapping = function (params) {
            return apiService.post('Services/CreateTaxMapping'
var class_system_1_1_dispatch_msg =
    [ "DispatchMsg", "class_system_1_1_dispatch_msg.html#ae8332c6649684d9513a11973d362e478", null ],
    [ "caller", "class_system_1_1_dispatch_msg.html#ac1bb3dd666a5aa10840922c5ee935273", null ],
    [ "m_args", "class_system_1_1_dispatch_msg.html#a06c82398b5128e8d360bbc07cac4be63", null ],
    [ "m_args_nbytes", "class_system_1_1_dispatch_msg.html#a9931f80dcf00de2a2826107246b08004", null ],
    [ "m_dispatch", "class_system_1_1_dispatch_msg.html#a4411f403daa9d51be0ae3fe4c301f390", null ],
    [ "m_exception", "class_system_1_1_dispatch_msg.html#a0815402c571a648173704d1160675b72", null ],
    [ "m_func", "class_system_1_1_dispatch_msg.html#a6455f40c9bb3307d3c67fa2798c03465", null ],
    [ "m_hThread", "class_system_1_1_dispatch_msg.html#aaf03f9cbd1b2fef1fc0ae8da082836c9", null ],
    [ "m_hWaitEvent", "class_system_1_1_dispatch_msg.html#a14aa42839f5c8c5a5b3b5df2eb98d5ae", null ],
    [ "m_kind", "class_system_1_1_dispatch_msg.html#a3074323409c4d12ea
/**
 * Created with JetBrains WebStorm.
 * User: Administrator
 * Date: 13-3-14
 * Time: 下午7:23
 * To change this template use File | Settings | File Templates.
 */
var stageShowView = {
    getOLdShow:function (type) {
        var text = $("#stageShow").text();
        if (text == "") {
            return {};
        } else {
            var all = JSON.parse(text);
            var typeValue = all[type];
            ;
            return typeValue;
        }
    },
    init:function () {
        var shows = stageShowView.getOLdShow("login");
        var content = "";
        for (var index in shows) {
            var show = shows[index];
            content = content + show + ",";
        }
        $("#stageShow").hide();
        stageShowView.viewShow(shows);
        $("#showTags").val(content);
        stageShowView.viewStatus();
    },
    viewShow:function (shows) {
        var name=stageShowView.getUserName();
        for (var index in shows) {
            var show = shows[index];


        }
    },
    getNewShow:function () {
        var content = $("#showTags").val();
        var cs = content.split(",");
        var shows = {};
        var arrays = [];
        for (var index in cs) {
            var show = cs[index];
            arrays.push(show);
        }
        shows["login"] = arrays;
        return  JSON.stringify(shows);
        ;
    },
    editStatus:function () {
        $("#showEditContainer").show();
        $("#editShow").hide();
    },
    viewStatus:function () {
        $("#showEditContainer").hide();
        $("#editShow").show();
    },
    getUserName:function(){
        return $("#name").val();
    }
var stageShowService = {
    updateShow:function (show) {
        return ajaxJson("/player/setting.do?", "post", {type:"stageShow", value:show}, null, 5000, "json");
    }
$(document).ready(function () {
    headView.highLight("person");
    leftView.highLight("leftNav_stageShow");
    stageShowView.init();
    $("#clearTag").click(function () 
var class_event_dispatch =
    [ "EventDispatch", "class_event_dispatch.html#af1a29290568bfdd435e5925bc575ab33", null ],
    [ "~EventDispatch", "class_event_dispatch.html#a3f67ce9e4defd88ac1aff0fb7de5107f", null ],
    [ "CaptureMouse", "class_event_dispatch.html#aa3c5686165ac83c09a35ab85d9200778", null ],
    [ "Close", "class_event_dispatch.html#ab3c212a15ad91a7f2663e12ef79589ac", null ],
    [ "Create", "class_event_dispatch.html#af244e896de34ee1fcf84ef7695d377b3", null ],
    [ "Dispatch", "class_event_dispatch.html#a80527943954b9c56f5cd8fee9ad1808a", null ],
    [ "GetCapture", "class_event_dispatch.html#a0a9695ceacea191641acce7f7446fbd1", null ],
    [ "GetFocus", "class_event_dispatch.html#a30a625bf541f7497c887506acd8a6ed3", null ],
    [ "GetInstance", "class_event_dispatch.html#ab53e69df3252b14737bf67afe719442d", null ],
    [ "KillFocus", "class_event_dispatch.html#a14f4b5b4146980d4dc1263ddaa184361", null ],
    [ "MouseEnter", "class_event_dispatch.html#ab759c374b63824d732d

    [ "Register", "class_event_dispatch.html#a8b27c9d3ec2c6173724817521209da6a", null ],
    [ "ReleaseMouse", "class_event_dispatch.html#a37d0e42cde8e4be574c018c48fec193a", null ],
    [ "SetFocus", "class_event_dispatch.html#a4c19c48b37851a09a52cfe2e3687d1ea", null ],
    [ "TYPENAME", "class_event_dispatch.html#a4c5c61e214ca00a6600710b932263e00", null ],
    [ "Unregister", "class_event_dispatch.html#aa113955446a1246b89f8c1a6dd121b83", null ],
    [ "capture", "class_event_dispatch.html#adf2b889b69f4d5ad97ad65c5bd376eb5", null ],
    [ "click_tgt", "class_event_dispatch.html#a84a35f80cdd68cdd0119d5ba7f90e61c", null ],
    [ "clients", "class_event_dispatch.html#a7376ac5435a695e2570cfe69284ea174", null ],
    [ "current", "class_event_dispatch.html#a2cfea5583494cb9efb81909ad4f7682e", null ],
    [ "dispatcher", "class_event_dispatch.html#abe0f80e00f159fbc0668d04047bfb9c2", null ],
    [ "focus", "class_event_dispatch.html#a61b2ed483f2a96a77a8c01da6d81b294", null ],
    [ "mouse_l", 
angular.module('autoServices')
.factory('CatalogServices', ['$routeParams',
         function($routeParams) {
           var msgService = {};
           msgService.manufacturer = '';
           msgService.model = '';
           msgService.newOrUsedData = '';
           msgService.setManufacturer = function(manufacturer) {
             msgService.manufacturer = manufacturer;
           };
           msgService.getManufacturer = function() {
             return msgService.manufacturer;
           };
           msgService.getManufacturerId = function() {
             if (!msgService.manufacturer) return 0;
             return msgService.manufacturer.id;
           };
           msgService.setModel = function(model) {
             if (model && model.id) {
               model.model_id = model.id;
             }
             msgService.model = model;
           };
           msgService.getModel = function() {
             return msgService.model;
           };
           msgService.getModel
var express = require('express');
var router = express.Router();
var OurService = require('../../../models/ourService');
var fs = require('fs');
router.post('/', (req, res, next) => {
    console.log('This is Update Service: ' + JSON.stringify(req.body));
    var serviceId = req.body.serviceId;
    var serviceName = req.body.serviceName;
    var serviceSlogan = req.body.serviceSlogan;
    var serviceShortInformation = req.body.serviceShortInformation;
    var serviceFullInformation = req.body.serviceFullInformation;
    var serviceImagePath = req.body.serviceImagePath;
    console.log('id: ' + serviceId + '\nName: ' + serviceName + '\nslogan: ' + serviceSlogan + '\ncategory: ' + '\nshort info: ' + serviceShortInformation + '\nfull Info: ' + serviceFullInformation + '\nimagePath: ' + serviceImagePath);
    OurService.findById(serviceId, (err, service) => {
        if(err) {
            console.log('Error in finding the desired service: ' + err);
            res.redirect('/adminServiceLi
!function(exports){
  'use strict';
  var scrollY = 0;
  function isScrollDown(){
    return exports.scrollY > scrollY
  }
  function Navscroll(){
    this.nav = document.getElementsByClassName('nav-main')[0];
    this.page = document.getElementById('main-content');
    this.pollifyScrollY = (exports.scrollY === undefined ? true : false) ;
    if( this.pollifyScrollY ) { console.log('Navscroll: window.scrollY use pollify') }
    this.attachEvents();
  }
  Navscroll.prototype.attachEvents = function(){
    exports.document.onscroll = function(event){
      if( this.pollifyScrollY ){
        exports.scrollY = exports.document.documentElement.scrollTop;
      }
      this.scrollEvent(event);
      scrollY = exports.scrollY;
    }.bind(this);
    scrollY = 0;
  };
  Navscroll.prototype.scrollEvent = function(e){
    var nav = this.nav.getBoundingClientRect();
    var page = this.page.getBoundingClientRect();
    if( nav.height < exports.document.documentElement.clientHeight ){
      this.s

    }else{
      this.scrollEventBigMenu(nav, page);
    }
  };
  Navscroll.prototype.scrollEventBigMenu = function(nav, page){
    if( isScrollDown() ){
      if(
        nav.top <= 0 &&
        page.bottom < exports.document.documentElement.clientHeight &&
        this.nav.classList.contains('nav-main-to-top')
      ) {
        this.nav.classList.remove('nav-main-to-top');
        this.nav.classList.add('nav-main-to-bottom');
        return;
      }
      if(
        nav.top <= 0 &&
        nav.bottom <= exports.document.documentElement.clientHeight &&
        ( this.nav.classList.contains('nav-main-to-top') ||
          this.nav.classList.contains('nav-main-to-position')
        )
      ) {
        this.nav.classList.remove('nav-main-to-top');
        this.nav.classList.remove('nav-main-to-position');
        this.nav.classList.add('nav-main-fixed-bottom');
        this.nav.style.removeProperty('top');
      }else if(
        nav.bottom >= page.bottom &&
        ( this.nav.classLis

          this.nav.classList.contains('nav-main-to-position')
        )
      ) {
        this.nav.classList.remove('nav-main-fixed-bottom');
        this.nav.classList.add('nav-main-to-bottom');
        this.nav.style.removeProperty('top');
      }else if(
        nav.bottom >= 0 &&
        this.nav.classList.contains('nav-main-fixed-top')
      ) {
        this.nav.classList.remove('nav-main-fixed-top');
        this.nav.classList.add('nav-main-to-position');
        this.nav.style.top = page.top * (-1) + nav.top + "px";
      }
    } else {
      if(
        nav.top <= 0 &&
        this.nav.classList.contains('nav-main-fixed-bottom')
      ) {
        this.nav.classList.remove('nav-main-fixed-bottom');
        this.nav.classList.add('nav-main-to-position');
        this.nav.style.top = page.top * (-1) + nav.top + "px";
      }else if(
        nav.top >= 0 &&
        this.nav.classList.contains('nav-main-to-position')
      ) {
        this.nav.classList.remove('nav-main-to-position

        this.nav.classList.add('nav-main-fixed-top');
        this.nav.style.removeProperty('top');
      }else if(
        nav.top >= 0 &&
        this.nav.classList.contains('nav-main-to-bottom')
      ) {
        this.nav.classList.remove('nav-main-to-bottom');
        this.nav.classList.add('nav-main-fixed-top');
      }else if(
        nav.top <= page.top &&
        this.nav.classList.contains('nav-main-fixed-top')
      ) {
        this.nav.classList.remove('nav-main-fixed-top');
        this.nav.classList.add('nav-main-to-top');
      }
    }
  };
  Navscroll.prototype.scrollEventSmallMenu = function(nav, page){
    if( isScrollDown() ){
      if(
        nav.top <= 0 &&
        page.bottom < exports.document.documentElement.clientHeight &&
        nav.height < page.bottom &&
        this.nav.classList.contains('nav-main-to-top')
      ) {
        this.nav.classList.remove('nav-main-to-top');
        this.nav.classList.add('nav-main-fixed-top');
        return;
      }else if(


        page.bottom < exports.document.documentElement.clientHeight &&
        this.nav.classList.contains('nav-main-to-top')
      ) {
        this.nav.classList.remove('nav-main-to-top');
        this.nav.classList.add('nav-main-to-bottom');
        return;
      }
      if(
          nav.top <= 0 &&
          this.nav.classList.contains('nav-main-to-top')
      ) {
        this.nav.classList.remove('nav-main-to-top');
        this.nav.classList.add('nav-main-fixed-top');
      }else if(
        nav.bottom >= page.bottom &&
        ( this.nav.classList.contains('nav-main-fixed-top') ||
          this.nav.classList.contains('nav-main-fixed-bottom')
        )
      ) {
        this.nav.classList.remove('nav-main-fixed-top');
        this.nav.classList.remove('nav-main-fixed-bottom');
        this.nav.classList.add('nav-main-to-bottom');
      }
    } else {
      if(
        page.top >= 0 &&
        this.nav.classList.contains('nav-main-fixed-top')
      ) {
        this.nav.classList
'use strict';
if (typeof PODB === 'undefined') {var PODB = {};}
if (typeof PODB.component === 'undefined') {PODB.component = {};}
PODB.component.NavigationBar = React.createClass({
    render: function () {
        var Navbar = ReactBootstrap.Navbar;
        var CollapsibleNav = ReactBootstrap.CollapsibleNav;
        var Nav = ReactBootstrap.Nav;
        var NavItem = ReactBootstrap.NavItem;
        var DropdownButton = ReactBootstrap.DropdownButton;
        var MenuItem = ReactBootstrap.MenuItem;
        var Input = ReactBootstrap.Input;
        return (
            <Navbar brand={PODB.name} toggleNavKey={0} href="/#/Home">
                <CollapsibleNav eventKey={0}> {/* This is the eventKey referenced */}
                    <Nav navbar>
                        <NavItem eventKey={1} href='/#/Home'>Home</NavItem>
                        <NavItem eventKey={2} href='/#/Dashboard'>Dashboard</NavItem>
                        <NavItem eventKey={2} href='/#/Users'>Users</NavItem>
        
var TillsController = new JS.Class({
  
  initialize: function() {
    this.audit_controller = new TillsAuditController('div#audit');
    this.overview_controller = new TillsOverviewController('section#overview');
    this.admin_controller = new TillsAdminController('section#admin');
    this.section_controller = new SectionController('ul#tills_nav', [
      this.overview_controller,
      this.admin_controller
    ]);
    this.reset();
    
    this.audit_controller.addObserver(this.loadTills, this);
    this.overview_controller.addObserver(this.auditTill, this);
    this.admin_controller.addObserver(this.auditTill, this);
  },
  
  reset: function() {
    this.audit_controller.reset();
    this.overview_controller.reset();
    this.admin_controller.reset();
    this.section_controller.reset();
  },
  
  loadTills: function() {
    this.overview_controller.update();
    this.admin_controller.update();
  },
  
  auditTill: function(till) {
    this.audit_controller.update(till);
    th
var express     = require('express'),
    api         = require('../api'),
    apiRoutes;
apiRoutes = function (middleware) {
    var router = express.Router();
    router.del = router.delete;
    router.get('/configuration', api.http(api.configuration.browse));
    router.get('/configuration/:key', api.http(api.configuration.read));
    router.get('/posts', api.http(api.posts.browse));
    router.post('/posts', api.http(api.posts.add));
    router.get('/posts/:id', api.http(api.posts.read));
    router.get('/posts/slug/:slug', api.http(api.posts.read));
    router.put('/posts/:id', api.http(api.posts.edit));
    router.del('/posts/:id', api.http(api.posts.destroy));
    router.get('/settings', api.http(api.settings.browse));
    router.get('/settings/:key', api.http(api.settings.read));
    router.put('/settings', api.http(api.settings.edit));
    router.get('/users', api.http(api.users.browse));
    router.get('/users/:id', api.http(api.users.read));
    router.get('/users/slug/:slug

    router.get('/users/email/:email', api.http(api.users.read));
    router.put('/users/password', api.http(api.users.changePassword));
    router.put('/users/owner', api.http(api.users.transferOwnership));
    router.put('/users/:id', api.http(api.users.edit));
    router.post('/users', api.http(api.users.add));
    router.del('/users/:id', api.http(api.users.destroy));
    router.get('/tags', api.http(api.tags.browse));
    router.get('/roles/', api.http(api.roles.browse));
    router.get('/slugs/:type/:name', api.http(api.slugs.generate));
    router.get('/themes', api.http(api.themes.browse));
    router.put('/themes/:name', api.http(api.themes.edit));
    router.get('/notifications', api.http(api.notifications.browse));
    router.post('/notifications', api.http(api.notifications.add));
    router.del('/notifications/:id', api.http(api.notifications.destroy));
    router.get('/db', api.http(api.db.exportContent));
    router.del('/db', api.http(api.db.deleteAllContent));
    rout
(function($root) {
    'use strict';
    var _messageBox = null;
    function messageBox() {
        this.id = Date.now();
        this.messages = {};
        this.post = function(message, messageData) {
            this.handleMessage(message, messageData);
        }
    }
    messageBox.prototype = {
        add: function(listener) {
            if (this.messages.hasOwnProperty(listener.message)) {
                this.handleMessage(listener.message, this.messages[listener.message]);
            }else{
                this.messages[listener.message] = listener;
            }
        },
        handleMessage: function(message, messageData) {
            if (this.messages.hasOwnProperty(message)) {
                var messageHandle = this.messages[message].messagehandle;
                if (typeof messageHandle !== "undefined" && typeof messageHandle.callback !== "undefined") {
                    var callback = messageHandle.callback;
                    var args = null;
              

                    messageHandle['messageData'] = messageData;
                    if (typeof messageHandle.args !== "undefined") {
                        args = Array.prototype.slice.call(messageHandle.args, 1);
                    }
                    callback.apply(messageHandle, args);
                }
            }
        }
    };
    if (_messageBox === null) {
        _messageBox = new messageBox();
    }
    $root['thanthi'] = {
        getId: function() {
            return _messageBox.id;
        },
        send: function(message, messageData) {
            _messageBox.post(message, messageData);
        },
        add: function(messageData) {
            _messageBox.add(messageData);
        }
    };
}).call(this, ((typeof module !== "undefined" && typeof module.exports !== "undefined") ? module.exports : window));
(function($root) {
    Function.prototype.thanthi = function(message) {
        $root.thanthi.add({
            message: message,
            messagehandle:
var kernelServices = exports
	,kernel = require('../../app')
	,fs = require('fs')
	,path = require('path')
	,services = {};
exports.getService = function(serviceName) {
	var servicePath, loadedServiceName
		,files, i = 0, availableServiceName;
			
	if(serviceName in services) {
		return services[serviceName];
	}
	servicePath = path.join(__dirname, serviceName+'.js');
	if(fs.existsSync(servicePath)) {
		return services[serviceName] = require(servicePath);
	}
	for(loadedServiceName in services) {
		if(kernelServices.serviceProvides(services[loadedServiceName], serviceName)) {
			return services[loadedServiceName];
		}
	}
	files = fs.readdirSync(__dirname);
	for(; i < files.length; i++) {
		availableServiceName = files[i];
		
		if (availableServiceName.substr(-3) === '.js') {
			availableServiceName = availableServiceName.substr(0, availableServiceName.length - 3);
		}
		
		if(availableServiceName == 'index' || availableServiceName in services) {
			console.log('skipping file', availableS
export const getalltype = () => (dispatch , getState) => {
	$.get("php/getalltype.php",function(data){
		if(typeof data != "object"){
			data = JSON.parse(data);
		}
		dispatch({"type":"GETALLTYPE" , "alltypes" : data});
	});
export const getbrief = (dongxistr,cb) => (dispatch , getState) => {
	if(dongxistr === undefined){
		dongxistr = "all";
	}
	$.get("php/gettiezibrief.php",{"type":dongxistr,"page":getState().indexReducer.page},function(data){
		if(typeof data != "object"){
			data = JSON.parse(data);
		}
		dispatch({"type":"GETALLBIAOTI" , "allbriefs" : data});
		if(cb != undefined){
		}
	});
export const showloginbox = (torf) => (dispatch , getState) => {
 	dispatch({"type":"SHOWLOGINBOX" , "v" :torf });
export const showregistbox = (torf) => (dispatch , getState) => {
 	dispatch({"type":"SHOWREGISTBOX" , "v" :torf });
export const doregist = (username,password,callback) => (dispatch , getState) =>{
	$.post("php/doregist.php",{username:username , password : password},function(data

		if(data == 1){
			dispatch({"type":"REGISTSUCCESS"});
		} 
		callback(data);
	});
export const dologin = (username,password,callback) => (dispatch , getState) => {
	$.post("php/dologin.php",{username:username , password : password},function(data){
		dispatch({"type" : "LOGINSUCCESS" , "username" : username});
		callback(data);
	});
export const logout = (username) => (dispatch , getState) => {
	dispatch({"type":"LOGOUT"})
	$.get("php/logout.php",{username:username},function(data){
		dispatch({"type" : "LOGOUT" , "username" : username});
	});
export const checklogin = () => (dispatch) => {
	$.get("php/checklogin.php",function(data){
		if(typeof data != "object"){
			data = JSON.parse(data);
		}
		dispatch({"type" : "CHECKLOGIN" , "login" : data.login , "username" : data.username});
	});
export const dofabiao = (title,content,leixing,cb) => (dispatch) => {
	$.post("php/fabiao.php",{title,content,leixing},function(data){
		 cb(data)
		dispatch({"type" : "FABIAO"});
	});
export const ge
describe('@Service Annotation', function(){
	it('should annotate a class', function(){
		@Service
		class MyService{ }
		MyService.should.have.property('$provider');
		MyService.$provider.name.should.equal('MyService');
		MyService.$provider.type.should.equal('service');
	});
	it('should adhere to inheritance', function(){
		@Service
		class BaseClass{ }
		@Service
		class MyClass extends BaseClass{ }
		BaseClass.$provider.name.should.equal('BaseClass');
		MyClass.$provider.name.should.equal('MyClass');
	});
	describe('Parser', function(){
		let parser, module;
		beforeEach(function(){
			parser = Module.getParser('service');
			module = {
				service : sinon.spy()
			};
		});
		it('should register itself with Module', function(){
			parser.should.be.defined;
		});
		it('should parse an annotated class into an ng service', function(){
			@Service
			class MyService{ }
			parser(MyService, module);
			let name = module.service.args[0][0];
			let service = module.service.args[0][1];
			n
!function() {
    $('.nav-button__holder').on('click', function(e) {
        $('body').toggleClass('js-nav--open');
        if ($(e.target).hasClass('menu')) {
            return false;
        }
        e.preventDefault();
        return false;
    });
    $('body').append('<div class="nav--mask"></div>');
    $('.section--nav').insertAfter('.section--head');
    $($('.section--head .site-title')[0].parentNode).append($('.section--nav .nav-button__holder'));
    var lastHoverOver = null,
        hovering = false,
        pauseCloseInProgress = false;
    function navSubToggle(e) {
        $('body').toggleClass('js-nav--open');
    }
    function navSubOpen(e) {
        $('body').addClass('js-nav--open');
        hovering = true;
    }
    function navSubClose(e) {
        $('body').removeClass('js-nav--open');
    }
    function navSubPauseClose() {
        hovering = false;
        if (!pauseCloseInProgress) {
            pauseCloseInProgress = true;
            setTimeout(function()
/* global describe, it */
define([
	'jquery',
	'underscore',
	'backbone',
	'backboneController',
	'controller/intro'
], function ($, _, Backbone, Controller, IntroController) {
	'use strict';
	var test = {};
	describe('controller', function () {
		describe('exists', function () {
			it('just Controller', function() {
				should.exist(Controller);
			});
			it('extented controller exists', function() {
				should.exist(Controller.extend);
			});
			it('generate new controller exists', function() {
				test.controller = new (Controller.extend());
				should.exist(test.controller);
			});
			it('generate new controller exists', function() {
				test.controller = new (Controller.extend());
				should.exist(test.controller);
			});
		});
		describe('extend and new controller', function () {
			it('intro controller', function() {
				test.introController = new IntroController();
				should.exist(test.introController);
			});
			it('run intro controller', function() {
				$('body').append('<s
AccountsOauthServer = {
  config(serviceId) {
    check(serviceId, String);
    let serviceName = serviceId.replace(/Login/g, "");
    const serviceKeys = Systems.findOne({ _id: serviceId });
    if (serviceName === "meteor") serviceName = 'meteor-developer';
    if (serviceKeys) {
      ServiceConfiguration.configurations.remove({ service: serviceName });
      if (serviceName === "facebook") {
        ServiceConfiguration.configurations.insert({
          service: "facebook",
          appId: serviceKeys.appId,
          secret: serviceKeys.secret
        });
        return;
      }
      if (serviceName === "twitter") {
        ServiceConfiguration.configurations.insert({
          service: "twitter",
          consumerKey: serviceKeys.consumerKey,
          secret: serviceKeys.secret
        });
        return;
      }
      if (serviceName === 'kakao') {
        ServiceConfiguration.configurations.insert({
          service: "kakao",
          clientId: serviceKeys.clientId
      
/*
Shows filtered tables in "View More" navigation item.
*/
			$(function(){
			
			$('#null').addClass('show').click(function(){
			$(this).addClass('show');
			});
			
			$('a.first-child-a').click(function() {
				$('#null.show').show().siblings().hide();
			});	
			
			$('a.viewall').click(function() {
				$('#null.show').show().siblings().hide();
			});	
			
			$('#tech').addClass('show').click(function(){
			$(this).addClass('show');
			});
			
			$('a.tech').click(function() {
				$('#tech.show').show().siblings().hide();
			});		
			
			
			$('#performance').addClass('show').click(function(){
			$(this).addClass('show');
			});
			
			$('a.performance').click(function() {
				$('#performance.show').show().siblings().hide();
			});		
			
			$('#learning').addClass('show').click(function(){
			$(this).addClass('show');
			});
			
			$('a.learning').click(function() {
				$('#learning.show').show().siblings().hide();
			});		
			
			$('#difficulty').addClass('show').click(function
(function() {'use strict';
angular.module('ag-admin').controller(
    'ApiVersionController',
    function($scope, $state, $stateParams, flash, ApiRepository) {
        ApiRepository.getApi($stateParams.apiName, $stateParams.version).then(function (api) {
            $scope.api = api;
            $scope.currentVersion = api.version;
            $scope.defaultApiVersion = api.default_version;
        });
        $scope.createNewApiVersion = function () {
            ApiRepository.createNewVersion($scope.api.name).then(function (data) {
                flash.success = 'A new version of this API was created';
                $state.go('ag.api.version', {apiName: $scope.api.name, version: data.version});
            });
        };
        $scope.setDefaultApiVersion = function () {
            flash.info = 'Setting the default API version to ' + $scope.defaultApiVersion;
            ApiRepository.setDefaultApiVersion($scope.api.name, $scope.defaultApiVersion).then(function (data) {
       
/**
 * Created by DELL on 2015/12/28.
 */
var navTableGrid = null;
$(function () {
    var navTableOptions = {
        ajax: "./nav_manage_fetch.action",
        "columns": [
            {"data": "nav_name"},
            {"data": "nav_par"},
            {"data": "nav_sort"},
            {"data":"nav_url"},
            {"data": "nav_createtime"},
            {"data": "nav_user"},
            {"data": "nav_operation"}
        ]
    }
    $.extend(navTableOptions, options);
    navTableGrid = $("#navTable").DataTable(navTableOptions);
    navTableGrid.on('xhr', function () {
        var result = navTableGrid.ajax.json().data;
        $.each(result, function (i, e) {
            if (e.childNavManageVoList.length > 0) {
                $.each(e.childNavManageVoList, function (j, childNav) {
                    result.push({
                        "nav_name": childNav.nav_name,
                        "nav_par": e.nav_name,
                        "nav_sort": childNav.nav_sort,
            

                        "nav_createtime": childNav.nav_createtime,
                        "nav_user": childNav.nav_user,
                        "nav_operation": "<button class=\"btn btn-info btn-sm\" onclick=\"editNav('" + childNav.nav_id + "')\">编辑 </button>" + "&nbsp;<button class=\"btn btn-primary btn-sm\" onclick=\"configNav(\'" + childNav.nav_id + "\')\">配置分类</button>" + "&nbsp;<button class=\"btn btn-danger btn-sm\" onclick=\"delNav(\'" + childNav.nav_id + "\')\">删除</button>"
                    });
                });
            }
            e.nav_par = e.nav_parent_id == "root" ? "根导航" : "";
            e.nav_operation = "<button class=\"btn btn-info btn-sm\" onclick=\"editNav('" + e.nav_id + "')\">编辑 </button>" +
            "&nbsp;<button class=\"btn btn-primary btn-sm\" onclick=\"configNav(\'" + e.nav_id + "\')\">配置分类</button>" + "&nbsp;<button class=\"btn btn-danger btn-sm\" onclick=\"delNav(\'" + e.nav_id + "\')\">删除</button>"
        });
        return result;
    })

    $("#addNavBtn").on("click", function () {
        $("#addNavDialog").modal("show");
    });
    $("#addNavLevel").on("change", function () {
        var $sel = $(event.target);
        if ($sel.val() == 1) {
            $.post("./nav_manage_root_fetch.action", function (data) {
                var optionsTemplate = "";
                $.each(data.data, function (i, e) {
                    optionsTemplate += "<option value=\"" + e.nav_id + "\">" + e.nav_name + "</option>";
                });
                $("#addParentNav").html(optionsTemplate);
                $("#addParentNavDiv").removeClass("hidden");
            });
        } else {
            $("#addParentNavDiv").addClass("hidden");
        }
    });
    $("#editNavLevel").on("change", function () {
        var $sel = $(event.target);
        if ($sel.val() == 1) {
            $.post("./nav_manage_root_fetch.action", function (data) {
                var optionsTemplate = "";
                $.each(data.data, function 

                    optionsTemplate += "<option value=\"" + e.nav_id + "\">" + e.nav_name + "</option>";
                });
                $("#editParentNav").html(optionsTemplate);
                $("#editParentNavDiv").removeClass("hidden");
            });
        } else {
            $("#editParentNavDiv").addClass("hidden");
        }
    });
});
function addNav() {
    var $navName = $("#addNavName");
    if ($.trim($navName.val()) == "") {
        alert("导航内容不能为空");
    } else {
        var params = new Object();
        params.navName = $.trim($navName.val());
        params.navParentId = $("#addNavLevel").val() == 1 ? $("#addParentNav").val() : "root";
        params.navUrl=$("#addNavUrl").val();
        params.navSort=$("#addNavSort").val();
        $.post("./nav_manage_add.action", params, function (data) {
            $("#addNavDialog").modal("hide");
            if (data.success) {
                navTableGrid.ajax.reload();
                alert("新增导航成功!");
           

                alert("新增导航失败！");
            }
            $navName.val("");
        });
    }
function editNav(idVal) {
    var $navObj = $(event.target).parent("td");
    $("#editNavName").val($navObj.siblings("td:eq(0)").html());
    $("#editNavUrl").val($navObj.siblings("td:eq(3)").html());
    $("#editNavSort").val($navObj.siblings("td:eq(2)").html());
    if ($navObj.siblings("td:eq(1)").html() != "根导航") {
        $("#editNavLevel").val("1");
        $.post("./nav_manage_root_fetch.action", function (data) {
            var optionsTemplate = "";
            $.each(data.data, function (i, e) {
                optionsTemplate += "<option value=\"" + e.nav_id + "\">" + e.nav_name + "</option>";
            });
            $("#editParentNav").html(optionsTemplate);
        });
        $("#editParentNavDiv").removeClass("hidden");
    } else {
        $("#editNavLevel").val("0");
        $("#editParentNavDiv").addClass("hidden");
    }
    $("#editNavDialog").attr("data-idVal", idVa

function updateNav() {
    var $navName = $("#editNavName");
    if ($.trim($navName.val()) == "") {
        alert("导航名称不能为空！");
    } else {
        var params = new Object();
        params.navName = $.trim($navName.val());
        params.idVal = $("#editNavDialog").attr("data-idVal");
        params.navParentId = $("#editNavLevel").val() == 0 ? "root" : $("#editParentNav").val();
        params.navUrl=$("#editNavUrl").val();
        params.navSort=$("#editNavSort").val();
        $.post("./nav_manage_update.action", params, function (data) {
            $("#editNavDialog").modal("hide");
            if (data.success) {
                navTableGrid.ajax.reload();
                alert("更新导航内容成功！");
            } else {
                alert("更新导航内容失败！");
            }
        });
    }
function delNav(idVal) {
    if (window.confirm("确定要删除该导航吗？")) {
        $.post("./nav_manage_del.action", {"navId": idVal}, function (data) {
            if (data.success) {
                navTableG

                alert("删除导航成功！");
            }
        });
    }
var zTreeObj=null;
function configNav(idVal) {
    if(zTreeObj!=null){
        zTreeObj.setting.async.otherParam= {"navId": idVal};
        zTreeObj.reAsyncChildNodes(null, "refresh");
    }else{
        setting = {
            async: {
                enable: true,
                otherParam: {"navId": idVal},
                type: 'post',
                url: './nav_manage_classify_fetch.action',
                dataFilter: function (treeId, parentNode, responseData) {
                    return responseData.data;
                }
            },
            check: {
                enable: true
            },
            view: {
                selectedMulti: false,
                txtSelectedEnable: true
            },
            callback: {}
        },
            zTreeObj = $.fn.zTree.init($("#configNavClassifyTree"), setting, null);
    }
    $("#configNavClassifyDialog").attr("data-id", idVal).modal("show");
fu
define([
  'appMarionette',
  'apps/products/list/list_controller',
  'apps/products/show/show_controller',
], function(App, ListController, ShowController ){
  'use strict';
  App.Router = Marionette.AppRouter.extend({
    appRoutes: {
      'products':                 'listProducts',
      'espresso-machines/:slug':  'showProduct',
      'espresso-grinders/:slug':  'showProduct',
      'pizza-ovens/:slug':        'showProduct',
      'pasta-machines/:slug':     'showProduct',
      'gelato/:slug':             'showProduct',
      'citrus-juicers/:slug':     'showProduct',
      'mixers/:slug':             'showProduct',
      'panini-grills/:slug':      'showProduct',
      'juicers/:slug':            'showProduct',
      'meat-slicers/:slug':       'showProduct',
      'hot-chocolate/:slug':      'showProduct',
      'pasta-cookers/:slug':      'showProduct'
    }
  });
  var API = {
    listProducts: function(target){
      ListController.listProducts(target)
      App.execute('set
/* */ 
(function(process) {
  'use strict';
  var EventConstants = require("./EventConstants");
  var invariant = require("./invariant");
  var injection = {
    Mount: null,
    injectMount: function(InjectedMount) {
      injection.Mount = InjectedMount;
      if ("production" !== process.env.NODE_ENV) {
        ("production" !== process.env.NODE_ENV ? invariant(InjectedMount && InjectedMount.getNode, 'EventPluginUtils.injection.injectMount(...): Injected Mount module ' + 'is missing getNode.') : invariant(InjectedMount && InjectedMount.getNode));
      }
    }
  };
  var topLevelTypes = EventConstants.topLevelTypes;
  function isEndish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
  }
  function isMoveish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
  }
  function isStartish(topLevelType) {
  

  }
  var validateEventDispatches;
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches = function(event) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchIDs = event._dispatchIDs;
      var listenersIsArr = Array.isArray(dispatchListeners);
      var idsIsArr = Array.isArray(dispatchIDs);
      var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
      var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
      ("production" !== process.env.NODE_ENV ? invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
    };
  }
  function forEachEventDispatch(event, cb) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;
    if ("production" !== process.env.NODE_ENV) {
      validateEventDispatches(event);
    }
    if (Array.isArray(dis

      for (var i = 0; i < dispatchListeners.length; i++) {
        if (event.isPropagationStopped()) {
          break;
        }
        cb(event, dispatchListeners[i], dispatchIDs[i]);
      }
    } else if (dispatchListeners) {
      cb(event, dispatchListeners, dispatchIDs);
    }
  }
  function executeDispatch(event, listener, domID) {
    event.currentTarget = injection.Mount.getNode(domID);
    var returnValue = listener(event, domID);
    event.currentTarget = null;
    return returnValue;
  }
  function executeDispatchesInOrder(event, executeDispatch) {
    forEachEventDispatch(event, executeDispatch);
    event._dispatchListeners = null;
    event._dispatchIDs = null;
  }
  function executeDispatchesInOrderStopAtTrueImpl(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;
    if ("production" !== process.env.NODE_ENV) {
      validateEventDispatches(event);
    }
    if (Array.isArray(dispatchListeners)) {
      for (var i

        if (event.isPropagationStopped()) {
          break;
        }
        if (dispatchListeners[i](event, dispatchIDs[i])) {
          return dispatchIDs[i];
        }
      }
    } else if (dispatchListeners) {
      if (dispatchListeners(event, dispatchIDs)) {
        return dispatchIDs;
      }
    }
    return null;
  }
  function executeDispatchesInOrderStopAtTrue(event) {
    var ret = executeDispatchesInOrderStopAtTrueImpl(event);
    event._dispatchIDs = null;
    event._dispatchListeners = null;
    return ret;
  }
  function executeDirectDispatch(event) {
    if ("production" !== process.env.NODE_ENV) {
      validateEventDispatches(event);
    }
    var dispatchListener = event._dispatchListeners;
    var dispatchID = event._dispatchIDs;
    ("production" !== process.env.NODE_ENV ? invariant(!Array.isArray(dispatchListener), 'executeDirectDispatch(...): Invalid `event`.') : invariant(!Array.isArray(dispatchListener)));
    var res = dispatchListener ? dispatchListener(
/**
 * Base interface for showing error/warning/success message 
 */
define(['jquery'], function($) {
  /**
    * @params message(String), the message you want to show.
    * @params type(String), values: 'danger', 'success', 'error', or user defined.
    * @params refresh(boolean), please set it true, if you want to show this message after freshing page.
    * @params time(int), how long you want to show this message, default value is 4000ms. 
    */
  function _message(message, type, refresh, time) {
    var _time = 4000;
    var fadeTime = 500;
    time = (undefined === time) ? _time : time;
    message = $.trim(message);
    var $messageNode = $('.alert_message');
    var $messageText = $messageNode.find('span');
    var $closeBtn = $messageNode.find('.close');
    if ((false === refresh) || (undefined === refresh)) {
      $closeBtn.on('click', function() {
        $messageNode.addClass('hide');
      });
      $messageText.text(message);
      type = 'alert-' + type;
      $messa

        $messageNode.addClass(type).removeClass('hide');
        window.setTimeout(function() {
          $messageNode.fadeOut(fadeTime, function() {
            $messageNode.addClass('hide').removeClass(type);
          });
        }, time);
      });
    } else {
      if (message) {
        var messageObj = {
          'message': message,
          'type': type,
          'time': time
        };
        window.sessionStorage.setItem('alertMessage', JSON.stringify(messageObj));
      }
    }
  };
  
  return {
    message: _message,
    error: function(message, refresh) {
      this.message(message, 'danger', refresh);
    },
    success: function(message, refresh) {
      this.message(message, 'success', refresh);
    },
    info: function(message, refresh) {
      this.message(message, 'info', refresh);
    },
    initAlertMessage: function() {
      var alertMessage = JSON.parse(window.sessionStorage.getItem('alertMessage'));
        if ((null !== alertMessage) && ('' !== alertMe
(function () {
    'use strict';
    angular
        .module('semjournals')
        .factory('SidebarService', SidebarService);
    SidebarService.$inject = ['$rootScope'];
    function SidebarService($rootScope) {
        var service = {};
        service.actions = [];
        service.LoadLoginActions = LoadLoginActions;
        service.LoadUserActions = LoadUserActions;
        service.LoadAdminActions = LoadAdminActions;
        return service;
        function LoadLoginActions() {
            service.actions = [
                {
                    name: 'login'
                }
            ];
        }
        function LoadUserActions() {
            service.actions = [
                {
                    name: 'journals'
                }, {
                    name: 'subscriptions'
                }, {
                    name: 'logout'
                }
            ];
        }
        function LoadAdminActions() {
            service.actions = [
                {
         
define(['underscore', 'backbone',
        'library/CRMApp',
        'controller/LoginController',
        'controller/HomeController',
        'controller/ListController',
        'controller/FormController',
        ],
function(_, Backbone, CRMApp,
        LoginController,
        HomeController,
        ListController,
        FormController
        ) {
    var DEFAULT_TTL = 30 * 24 * 3600;
    
    if (typeof window.crm_controller_register != 'undefined') {
        return window.crm_controller_register;
    }
    var CRMControllerRegister = function() {
    
    };
    CRMControllerRegister.getInstance = function() {
            if(typeof window.crm_controller_register == 'undefined') {
                window.crm_controller_register = CRMControllerRegister;
                var that = window.crm_controller_register;
                that.initialize();
            }
            
            return window.crm_controller_register;
    };
    
    CRMControllerRegister.initialize = functi
define(['logger','jquery', 'backbone', 'underscore',
        'text!templates/messages/standard.tpl'],
function (Logger, $, Backbone, _, AlertTemplate) {
    return {
        LOG: Logger.get('LocalMessages'),
        addMessage: function(container, type, text) {
            var message = _.template(AlertTemplate, {
                message: text
            });
            message = $(message);
            container.append(message);
        },
        addSuccessMessage: function(container, message) {
            this.addMessage(container, 'success', message);
        },
        addInfoMessage: function(container, message) {
            this.addMessage(container, 'info', message);
        },
        addWarningMessage: function(container, message) {
            this.addMessage(container, 'warning', message);
        },
        addDangerMessage: function(container, message) {
            this.addMessage(container, 'danger', message);
        },
        clearMessages: function(container) {
 
describe("Controller", function() {
  var controller;
  beforeEach(function() {
    controller = new Controller();
  });
  it("should be able to add players", function() {
    controller.addPlayer("Alex");
    controller.addPlayer("Holly");
    expect(controller.getPlayers().length).toBe(2);
  });
  it("shouldn't be able to add more than 6 players", function() {
    for(var i = 0; i < 6; i++) {
      controller.addPlayer(i.toString());
    }
    expect(controller.addPlayer("Another")).toBeFalsy();
  });
  it("shouldn't be able to add players with invalid names", function() {
    expect(controller.addPlayer()).toBeFalsy();
    expect(controller.addPlayer(null)).toBeFalsy();
    expect(controller.addPlayer("")).toBeFalsy();
    expect(controller.addPlayer("             ")).toBeFalsy();
  });
  it("should accept valid scores", function() {
    controller.addPlayer("Alex");
    controller.addPlayer("Holly");
    expect(controller.getScores(0)).toEqual([]);
    expect(controller.getScores(1

    controller.addScore(4);
    controller.addScore(5);
    controller.addScore(2);
    controller.addScore(8);
    controller.addScore(7);
    controller.addScore(0);
    expect(controller.getScores(0)).toEqual([4, 5, 7, 0]);
    expect(controller.getScores(1)).toEqual([2, 8]);
  });
  it("should reject invalid scores", function() {
    controller.addPlayer("Alex");
    controller.addPlayer("Holly");
    expect(controller.getScores(0)).toEqual([]);
    expect(controller.getScores(1)).toEqual([]);
    expect(controller.addScore(15)).toBeFalsy();
    expect(controller.addScore(-5)).toBeFalsy();
    expect(controller.addScore(4)).toBeTruthy();
    expect(controller.addScore(8)).toBeFalsy();
    expect(controller.addScore("HELLO")).toBeFalsy();
  });
  it("should increase the current roll correctly", function() {
    controller.addPlayer("Alex");
    controller.addPlayer("Holly");
    controller.addPlayer("Laura");
    expect(controller.getCurrentRoll()).toBe(0);
    controller.addScore(

    expect(controller.getCurrentRoll()).toBe(1);
    controller.addScore(3);
    expect(controller.getCurrentRoll()).toBe(0);
    controller.addScore(5);
    expect(controller.getCurrentRoll()).toBe(1);
    controller.addScore(4);
    expect(controller.getCurrentRoll()).toBe(0);
    controller.addScore(10);
    expect(controller.getCurrentRoll()).toBe(2);
    controller.addScore(3);
    expect(controller.getCurrentRoll()).toBe(3);
    controller.addScore(6);
    expect(controller.getCurrentRoll()).toBe(2);
    controller.addScore(0);
    expect(controller.getCurrentRoll()).toBe(3);
  });
  it("should increase the current player correctly", function() {
    controller.addPlayer("Alex");
    controller.addPlayer("Holly");
    controller.addPlayer("Laura");
    expect(controller.getCurrentPlayer()).toBe(0);
    controller.addScore(2);
    expect(controller.getCurrentPlayer()).toBe(0);
    controller.addScore(3);
    expect(controller.getCurrentPlayer()).toBe(1);
    controller.addScore(5
/**
 * Created by 月飞 on 14-3-14.
 */
var api=require('../api'),
    cdn=require('../lib/cdn');
function showData(req,res,next){
    res.json(req.Data);
module.exports=function(app){
    app.post('/api/basicSetting/update',api.apiAuth,api.basicSettings.setSettings,function(req,res,next){
        app.locals({blog:req.Data.settings});
        next();
    },showData);
    app.post('/api/basicSite/update',api.apiAuth,api.basicSettings.update,showData);
    app.post('/api/user/update',api.apiAuth,api.user.update,showData);
    app.post('/api/user/changePassword',api.apiAuth,api.user.changePassword,showData);
    app.post('/api/post/create',api.apiAuth,api.tag.getList,api.post.create,showData);
    app.post('/api/post/update',api.apiAuth,api.tag.getList,api.post.update,showData);
    app.post('/api/post/delete',api.apiAuth,api.post.destroy,showData);
    app.get('/api/post/get',api.apiAuth,api.post.get,showData);
    app.get('/api/post/getAll',api.apiAuth,api.post.getList,showData);
    app.g
/**
 * ******************************************************************************************************
 *
 *   QuizModule
 *
 *   Defines controllers and services for the Authentication Module Quiz
 *
 * ******************************************************************************************************
 */
(function ( define, angular ) {
    "use strict";
    define([
            'cont/LoginController',
            'utils/constants',
            'cont/HomeController',
            'cont/SaveItController',
            'cont/BartItController'
        ],
        function ( LoginController, Constants, HomeController, SaveItController,BartItController  )
        {
            var moduleName = "true.barter.Authenticate";
            angular
                .module(moduleName, [ ])
                .controller("LoginController" , LoginController )
                .controller("HomeController" , HomeController )
                .controller("SaveItController" , SaveItController )
       
(function () {
  'use strict'
  angular.module('cognitive.experiment')
    .factory('PluginService', PluginService)
  function PluginService(
    FileInputService,
    NormalizationService, ProjectionService, DuplicateRemovalService,
    MissingDataRemovalService, FormulaService, MachineLearningService) {
    var PluginService = {}
    var pluginList = {
      'file_input': FileInputService.definition,
      'formula': FormulaService.definition,
      'normalizatoin': NormalizationService.definition,
      'projection': ProjectionService.definition,
      'duplication_removal': DuplicateRemovalService.definition,
      'missing_data_removal': MissingDataRemovalService.definition,
      'machine_learning': MachineLearningService.definition
    }
    var pluginResource = {
      'file_input': FileInputService.resource,
      'formula': FormulaService.resource,
      'normalizatoin': NormalizationService.resource,
      'projection': ProjectionService.resource,
      'duplication_removal'

      'missing_data_removal': MissingDataRemovalService.resource,
      'machine_learning': MachineLearningService.resource
    }
    function getPluginList() {
      return pluginList
    }
    function fetchPluginByType(nodeType) {
      switch (nodeType) {
      case FileInputService.definition.type:
        return FileInputService
      case FormulaService.definition.type:
        return FormulaService
      case NormalizationService.definition.type:
        return NormalizationService
      case ProjectionService.definition.type:
        return ProjectionService
      case DuplicateRemovalService.definition.type:
        return DuplicateRemovalService
      case MissingDataRemovalService.definition.type:
        return MissingDataRemovalService
      case MachineLearningService.definition.type:
        return MachineLearningService
      }
    }
    function getPluginResource(pluginKey) {
      return pluginResource[pluginKey]
    }
    PluginService = {
      getPluginList: getP
var dir_8b3f65e53aa1ddc95f8f0ea70d8017c3 =
    [ "AnswerQuizController.cs", "_answer_quiz_controller_8cs.html", [
      [ "AnswerQuizController", "class_website_1_1_controllers_1_1_answer_quiz_controller.html", "class_website_1_1_controllers_1_1_answer_quiz_controller" ]
    ] ],
    [ "ConfigGroupController.cs", "_config_group_controller_8cs.html", "_config_group_controller_8cs" ],
    [ "ConfigQuizzesController.cs", "_config_quizzes_controller_8cs.html", [
      [ "ConfigQuizzesController", "class_website_1_1_controllers_1_1_config_quizzes_controller.html", "class_website_1_1_controllers_1_1_config_quizzes_controller" ]
    ] ],
    [ "ConfigUserController.cs", "_config_user_controller_8cs.html", [
      [ "ConfigUserController", "class_website_1_1_controllers_1_1_config_user_controller.html", "class_website_1_1_controllers_1_1_config_user_controller" ]
    ] ],
    [ "CreateQuizController.cs", "_create_quiz_controller_8cs.html", [
      [ "CreateQuizController", "class_website_1_1_c

    ] ],
    [ "CreateUserController.cs", "_create_user_controller_8cs.html", [
      [ "CreateUserController", "class_website_1_1_controllers_1_1_create_user_controller.html", "class_website_1_1_controllers_1_1_create_user_controller" ]
    ] ],
    [ "FacebookRegisterController.cs", "_facebook_register_controller_8cs.html", [
      [ "FacebookRegisterController", "class_website_1_1_controllers_1_1_facebook_register_controller.html", "class_website_1_1_controllers_1_1_facebook_register_controller" ]
    ] ],
    [ "FavoritesController.cs", "_favorites_controller_8cs.html", [
      [ "FavoritesController", "class_website_1_1_controllers_1_1_favorites_controller.html", "class_website_1_1_controllers_1_1_favorites_controller" ]
    ] ],
    [ "FindQuizController.cs", "_find_quiz_controller_8cs.html", [
      [ "FindQuizController", "class_website_1_1_controllers_1_1_find_quiz_controller.html", "class_website_1_1_controllers_1_1_find_quiz_controller" ]
    ] ],
    [ "GroupController.cs"

      [ "GroupController", "class_website_1_1_controllers_1_1_group_controller.html", "class_website_1_1_controllers_1_1_group_controller" ]
    ] ],
    [ "HomeController.cs", "_home_controller_8cs.html", [
      [ "HomeController", "class_website_1_1_controllers_1_1_home_controller.html", "class_website_1_1_controllers_1_1_home_controller" ]
    ] ],
    [ "IQuizModel.cs", "_i_quiz_model_8cs.html", [
      [ "IQuizModel", "interface_website_1_1_controllers_1_1_i_quiz_model.html", "interface_website_1_1_controllers_1_1_i_quiz_model" ]
    ] ],
    [ "LoginController.cs", "_login_controller_8cs.html", [
      [ "LoginController", "class_website_1_1_controllers_1_1_login_controller.html", "class_website_1_1_controllers_1_1_login_controller" ],
      [ "tempUser", "class_website_1_1_controllers_1_1temp_user.html", "class_website_1_1_controllers_1_1temp_user" ]
    ] ],
    [ "ValidationController.cs", "_validation_controller_8cs.html", [
      [ "ValidationController", "class_website_1_
var buildContainer = function(namespace) {
  var container = new Ember.Container();
  container.set = Ember.set;
  container.resolver = resolverFor(namespace);
  container.optionsForType('view', { singleton: false });
  container.register('application:main', namespace, { instantiate: false });
  container.register('controller:basic', Ember.Controller, { instantiate: false });
  container.register('controller:object', Ember.ObjectController, { instantiate: false });
  container.register('controller:array', Ember.ArrayController, { instantiate: false });
  return container;
};
function resolverFor(namespace) {
  return function(fullName) {
    var nameParts = fullName.split(":"),
        type = nameParts[0], name = nameParts[1];
    if (name === 'basic') {
      name = '';
    }
    var className = Ember.String.classify(name) + Ember.String.classify(type);
    var factory = Ember.get(namespace, className);
    if (factory) { return factory; }
  };
var container, appController, namespace;

module("Ember.controllerFor", {
  setup: function() {
    namespace = Ember.Namespace.create();
    container = buildContainer(namespace);
    container.register('controller:app', Ember.Controller.extend());
    appController = container.lookup('controller:app');
  },
  teardown: function() {
    Ember.run(function () {
      container.destroy();
      namespace.destroy();
    });
  }
});
test("controllerFor should lookup for registered controllers", function() {
  var controller = Ember.controllerFor(container, 'app');
  equal(appController, controller, 'should find app controller');
});
module("Ember.generateController", {
  setup: function() {
    namespace = Ember.Namespace.create();
    container = buildContainer(namespace);
  },
  teardown: function() {
    Ember.run(function () {
      container.destroy();
      namespace.destroy();
    });
  }
});
test("generateController should create Ember.Controller", function() {
  var controller = Ember.generateController(container, 'home

  ok(controller instanceof Ember.Controller, 'should create controller');
});
test("generateController should create Ember.ObjectController", function() {
  var context = {};
  var controller = Ember.generateController(container, 'home', context);
  ok(controller instanceof Ember.ObjectController, 'should create controller');
});
test("generateController should create Ember.ArrayController", function() {
  var context = Ember.A();
  var controller = Ember.generateController(container, 'home', context);
  ok(controller instanceof Ember.ArrayController, 'should create controller');
});
test("generateController should create App.Controller if provided", function() {
  var controller;
  namespace.Controller = Ember.Controller.extend();
  controller = Ember.generateController(container, 'home');
  ok(controller instanceof namespace.Controller, 'should create controller');
});
test("generateController should create App.ObjectController if provided", function() {
  var context = {}, controll
hits_api = {
	api: undefined,
	rest: function() {
		if (! hits_api.api) {
			hits_api.api = new $.RestClient(
				hits_config.endpoint,
				{
					cache: 10,
					stripTrailingSlash: true,
					stringifyData: true,
					request: function(resource, options) {
						return $.ajax(options);
					},
					ajax: {
						contentType:"application/json; charset=utf-8"
					},
					fail: function(err) {
						if (err.status == 403)
							alert("403 Error");
							/*
							alertify.confirm("Authentication Failure: " + err.statusText, function (e) {
								if (e) {
									window.location = hits_util.getRoot() + 'login/';
								} else {
									throw("403 error - " + err.statusText);
								}
							});
							*/
						else {
							console.log(err);
							if (err.responseText) {
								alert("Unknown API Error: " + err.statusText + "<br><pre>" + err.responseText + "</pre>");
							}
						}
					}
				}
			);
			hits_api.api.add('app');
			hits_api.api.add('tag');
			hits_api.api.add(
﻿'use strict';
var constants = require('./constants.js');
var bitdog = require('./bitdog.js');
function CommonMessageSchemas() {
    this.__defineGetter__('positionMessageSchema', function () {
        var messageSchema = bitdog.getMessageSchema(constants.MESSAGE_SCHEMA_POSITION);
                                    
        if (messageSchema == null) {
            messageSchema = bitdog.createMessageSchema(constants.MESSAGE_SCHEMA_POSITION)
            .addNumberProperty('x', 0)
            .addNumberProperty('y', 0);
        }
        return messageSchema;
    });
    
    this.__defineGetter__('mapPositionMessageSchema', function () {
        var messageSchema = bitdog.getMessageSchema(constants.MESSAGE_SCHEMA_MAP_POSITION);
        
        if (messageSchema == null) {
            messageSchema = bitdog.createMessageSchema(constants.MESSAGE_SCHEMA_MAP_POSITION)
            .addNumberProperty('latitude', 42.9069)
            .addNumberProperty('longitude',-78.9055923);
        }
   

        return messageSchema;
    });
    this.__defineGetter__('onOffMessageSchema', function () {
        var messageSchema = bitdog.getMessageSchema(constants.MESSAGE_SCHEMA_ON_OFF);
        
        if (messageSchema == null) {
            messageSchema = bitdog.createMessageSchema(constants.MESSAGE_SCHEMA_ON_OFF)
            .addStringProperty('value', 'off', { values: ['on', 'off'] });
        }
        
        return messageSchema;
    });
    this.__defineGetter__('textMessageSchema', function () {
        var messageSchema = bitdog.getMessageSchema(constants.MESSAGE_SCHEMA_TEXT);
        
        if (messageSchema == null) {
            messageSchema = bitdog.createMessageSchema(constants.MESSAGE_SCHEMA_TEXT)
            .addStringProperty('text', '');
        }
        
        return messageSchema;
    });
    
    this.__defineGetter__('valueMessageSchema', function () {
        var messageSchema = bitdog.getMessageSchema(constants.MESSAGE_SCHEMA_VALUE);
        
        

            messageSchema = bitdog.createMessageSchema(constants.MESSAGE_SCHEMA_VALUE)
            .addNumberProperty('value', 0);
        }
        
        return messageSchema;
    });
    this.__defineGetter__('rotationMessageSchema', function () {
        var messageSchema = bitdog.getMessageSchema(constants.MESSAGE_SCHEMA_ROTATION);
        
        if (messageSchema == null) {
            messageSchema = bitdog.createMessageSchema(constants.MESSAGE_SCHEMA_ROTATION)
            .addNumberProperty('rotation', 0, {max:360, min:0});
        }
        
        return messageSchema;
    });
    this.__defineGetter__('iftttMessageSchema', function () {
        var messageSchema = bitdog.getMessageSchema(constants.MESSAGE_SCHEMA_IFTTT);
        
        if (messageSchema == null) {
            messageSchema = bitdog.createMessageSchema(constants.MESSAGE_SCHEMA_IFTTT)
            .addStringProperty('value1', '')
            .addStringProperty('value2', '')
            .addStringProperty
var mongoose = require('mongoose'),
	autoIncrement = require('mongoose-auto-increment');
var MODULE_NAME = 'ServicePartners';
var schema = mongoose.Schema({
		_id: Number,
		ServiceProvider: { type: Number, ref: 'service-provider' },
		Service: { type: Number, ref: 'service' },
		Partners: [{ type: Number, ref: 'service-provider' }]
	});
schema.plugin(autoIncrement.plugin, 'service-partners');
schema.statics.findByServiceAndPopulate = function(filter, callback) {
	this.find( filter )
		.populate(populateService)
		.populate(populatePartners)
		.exec(function(err, dbServicePartners){
			callback(err, dbServicePartners);
		});
};
/*schema.statics.findByServiceAndPopulate = function(serviceProviderId, serviceId, callback) {
	var populateService = { path: 'Service', match: { isEnabled: true } };
	var populatePartners = { path: 'Partners', match: { isEnabled: true } };
	this.find( {
			$and: [
			       { Service: serviceId },
			       { $or: [
			               { ServicePartners: serviceP
/* eslint-disable */
/**
  * @module Educatify
  */
var configuration = require('./configuration'),
  UserController = require('./Controllers/UserController'),
  DocumentController = require('./Controllers/DocumentController'),
  PersonController = require('./Controllers/PersonController'),
  StudentController = require('./Controllers/StudentController'),
  CourseController = require('./Controllers/CourseController'),
  BatchController = require('./Controllers/BatchController'),
  InstitutionController = require('./Controllers/InstitutionController'),
  NetworkController = require('./Controllers/NetworkController'),
  AuthController = require('./Controllers/AuthController');
function initializer() {
initializer.configuration = configuration;
initializer.UserController = UserController;
initializer.DocumentController = DocumentController;
initializer.PersonController = PersonController;
initializer.StudentController = StudentController;
initializer.CourseController = CourseController;
i
_subOffsetTop=3
_scrollAmount=3
_menuCloseDelay=0
_subOffsetLeft=-15
_menuCloseDelay=300
_menuOpenDelay=0
_followSpeed=0
_followRate=0
_subOffsetTop=1
_subOffsetLeft=0
_scrollAmount=0
_scrollDelay=20
with(navStyle1=new mm_style()){
offclass="nav";
onclass="nav nav_hover";
pageclass="nav nav_hover nav_selected";
bordercolor="#000000";
borderstyle="solid";
borderwidth=0;
separatorcolor="#3d3f39";
separatorsize="1";
with(subNavStyle1=new mm_style()){
offclass="nav subnav"
onclass="nav nav_hover subnav subnav_hover"
pageclass="nav nav_hover subnav subnav_hover nav_selected subnav_selected"
bordercolor="#fff";
borderstyle="solid";
borderwidth=0;
separatorcolor="#fff";
separatorsize="1";
with(navStyle2=new mm_style()){
offclass="nav";
onclass="nav nav_hover";
pageclass="nav nav_hover nav_selected";
bordercolor="#000000";
borderstyle="solid";
borderwidth=0;
separatorcolor="#000000";
separatorsize="0";
with(subNavStyle2=new mm_style()){
offclass="nav subnav"
onclass="nav nav_hover subnav subna

pageclass="nav nav_hover subnav subnav_hover nav_selected subnav_selected"
bordercolor="#e5e5e5";
borderstyle="solid";
borderwidth=0;
separatorcolor="#fff";
separatorsize="1";
overflow="scroll";
with(navStyle3=new mm_style()){
offclass="nav";
onclass="nav nav_hover";
pageclass="nav nav_hover nav_selected";
bordercolor="#000000";
borderstyle="solid";
borderwidth=0;
separatorcolor="#000000";
separatorsize="0";
with(subNavStyle3=new mm_style()){
offclass="nav subnav"
onclass="nav nav_hover subnav subnav_hover"
pageclass="nav nav_hover subnav subnav_hover nav_selected subnav_selected"
bordercolor="#e5e5e5";
borderstyle="solid";
borderwidth=0;
separatorcolor="#fff";
separatorsize="1";
overflow="scroll";
with(navStyle4=new mm_style()){
offclass="nav";
onclass="nav nav_hover";
pageclass="nav nav_hover nav_selected";
bordercolor="#000000";
borderstyle="solid";
borderwidth=0;
separatorcolor="#000000";
separatorsize="0";
with(subNavStyle4=new mm_style()){
offclass="nav subnav"
onclass="nav nav_

pageclass="nav nav_hover subnav subnav_hover nav_selected subnav_selected"
bordercolor="#e5e5e5";
borderstyle="solid";
borderwidth=0;
separatorcolor="#fff";
separatorsize="1";
overflow="scroll";
with(navStyle5=new mm_style()){
offclass="nav";
onclass="nav nav_hover";
pageclass="nav nav_hover nav_selected";
bordercolor="#000000";
borderstyle="solid";
borderwidth=0;
separatorcolor="#000000";
separatorsize="0";
with(subNavStyle5=new mm_style()){
offclass="nav subnav"
onclass="nav nav_hover subnav subnav_hover"
pageclass="nav nav_hover subnav subnav_hover nav_selected subnav_selected"
bordercolor="#e5e5e5";
borderstyle="solid";
borderwidth=0;
separatorcolor="#fff";
separatorsize="1";
overflow="scroll";
with(navStyle6=new mm_style()){
offclass="nav";
onclass="nav nav_hover";
pageclass="nav nav_hover nav_selected";
bordercolor="#000000";
borderstyle="solid";
borderwidth=0;
separatorcolor="#000000";
separatorsize="0";
with(subNavStyle6=new mm_style()){
offclass="nav subnav"
onclass="nav nav_

pageclass="nav nav_hover subnav subnav_hover nav_selected subnav_selected"
bordercolor="#e5e5e5";
borderstyle="solid";
borderwidth=0;
separatorcolor="#fff";
separatorsize="1";
overflow="scroll";
with(navStyle7=new mm_style()){
offclass="nav";
onclass="nav nav_hover";
pageclass="nav nav_hover nav_selected";
bordercolor="#000000";
borderstyle="solid";
borderwidth=0;
separatorcolor="#000000";
separatorsize="0";
with(subNavStyle7=new mm_style()){
offclass="nav subnav"
onclass="nav nav_hover subnav subnav_hover"
pageclass="nav nav_hover subnav subnav_hover nav_selected subnav_selected"
bordercolor="#e5e5e5";
borderstyle="solid";
borderwidth=0;
separatorcolor="#fff";
separatorsize="1";
overflow="scroll";
with(navStyle8=new mm_style()){
offclass="nav";
onclass="nav nav_hover";
pageclass="nav nav_hover nav_selected";
bordercolor="#000000";
borderstyle="solid";
borderwidth=0;
separatorcolor="#000000";
separatorsize="0";
with(subNavStyle8=new mm_style()){
offclass="nav subnav"
onclass="nav nav_
mAsync = {
	pgp_genKeyPair: function(callback) { mDispatch.dispatch('pgp_genKeyPair', arguments); },
	pgp_getPrivateKey: function(callback) { mDispatch.dispatch('pgp_getPrivateKey', arguments); },
	pgp_getPublicKey: function(callback) { mDispatch.dispatch('pgp_getPublicKey', arguments); },
	rsa_genKeyPair: function(callback) { mDispatch.dispatch('rsa_genKeyPair', arguments); },
	rsa_getPrivateKey: function(callback) { mDispatch.dispatch('rsa_getPrivateKey', arguments); },
	rsa_getPublicKey: function(callback) { mDispatch.dispatch('rsa_getPrivateKey', arguments); },
	sha256_hash: function(callback, bytes64) { mDispatch.dispatch('sha256_hash', arguments); },
	sha1_hash: function(callback, bytes64) { mDispatch.dispatch('sha1_hash', arguments); },
	sha1_hmac: function(callback, key64, bytes64) { mDispatch.dispatch('sha1_hmac', arguments); },
	zip_inflate: function(callback, data64) { mDispatch.dispatch('zip_inflate', arguments); },
	zip_deflate: function(callback, data64) { mDispatch.dispa

	aes_encrypt: function(callback, key64, iv64, bytes64) { mDispatch.dispatch('aes_encrypt', arguments); },
	aes_decrypt: function(callback, key64, iv64, bytes64) { mDispatch.dispatch('aes_decrypt', arguments); },
	pbe_genKey: function(callback, password, salt64, iterationCount, keyLength) { mDispatch.dispatch('pbe_genKey', arguments); },
	rsa_encrypt: function(callback, key, bytes64) { 
		if (mDispatch.mode == 'native')
			mDispatch.dispatch('rsa_encrypt_serialized_key', [callback, hex2b64(key.genX509()), bytes64]); 
		else
			mDispatch.dispatch('rsa_encrypt_serialized_key', [callback, key.serialize(), bytes64]); 
	},
	rsa_decrypt: function(callback, key, bytes64) { 
		if (mDispatch.mode == 'native')
			mDispatch.dispatch('rsa_decrypt_serialized_key', [callback, hex2b64(key.genPKCS1()), bytes64]); 
		else
			mDispatch.dispatch('rsa_decrypt_serialized_key', [callback, key.serialize(), bytes64]); 
	},
	pgp_encrypt: function(callback, key, bytes64) { 
		mDispatch.dispatch('pgp_encrypt_ser

	},
	pgp_decrypt: function(callback, key, bytes64) { 
		mDispatch.dispatch('pgp_decrypt_serialized_key', [callback, key.serialize(), bytes64]); 
	},
	srp_dispatch: function(cmd, callback, state, arg) {
		var originalCallback = callback;
		var originalState = state;
		var srpCallback = {
			invoke: function(data) {
				if (data instanceof Error)
				{
				}
				else
				{
					var newState = data;
					if (newState != originalState)
						for (var i in newState)
							originalState[i] = newState[i];
				}
				originalCallback.invoke(data);
			}
		};
		mDispatch.dispatch(cmd, [srpCallback, state, arg]);
	},
	srp_client_setSalt: function(callback, state, arg) { mAsync.srp_dispatch('srp_client_setSalt',callback, state, arg); },
	srp_client_setServerPublicKey: function(callback, state, arg) { mAsync.srp_dispatch('srp_client_setServerPublicKey',callback, state, arg); },
	srp_client_validateServerEvidence: function(callback, state, arg) { mAsync.srp_dispatch('srp_client_validateServerEviden
MessageParserTest = TestCase("MessageParserTest", {
    test_one_message_with_a_sub_message:function() {
        var messageParser = new MessageParser();
        var messages = messageParser.parse("A.Method()\n{\nB.Method()\n}");
        assertEquals(1, messages.length);
        assertEquals("", messages[0].from);
        assertEquals(messages[0].to, "A");
        assertEquals(messages[0].message, "Method()");
        assertEquals(messages[0].subMessages.length, 1);
    },
    test_one_message_with_two_sub_message:function() {
        var messageParser = new MessageParser();
        var messages = messageParser.parse("A.MethodA()\n{\nB.MethodB()\nC.MethodC()\n}");
        assertEquals(1, messages.length);
        var messageA = messages[0];
        assertEquals("", messageA.from);
        assertEquals(messageA.to, "A");
        assertEquals(messageA.message, "MethodA()");
        assertEquals(messageA.subMessages.length, 2);
        var messageB = messageA.subMessages[0];
        asser

        assertEquals(messageB.to, "B");
        assertEquals(messageB.message, "MethodB()");
        assertEquals(messageB.subMessages.length, 0);
        var messageC = messageA.subMessages[1];
        assertEquals("A", messageC.from);
        assertEquals(messageC.to, "C");
        assertEquals(messageC.message, "MethodC()");
        assertEquals(messageC.subMessages.length, 0);
    },
    test_one_message_with_more_sub_message:function() {
        var messageParser = new MessageParser();
        var messages = messageParser.parse("A.MethodA()\nA1.MethodA1\n{\nB.MethodB()\n{\nD.MethodD()\n}\nC.MethodC()\n}");
        assertEquals(1, messages.length);
        var messageA = messages[0];
        assertEquals("", messageA.from);
        assertEquals(messageA.to, "A");
        assertEquals(messageA.message, "MethodA()");
        assertEquals(messageA.subMessages.length, 2);
        var messageB = messageA.subMessages[0];
        assertEquals("A", messageB.from);
        assertEquals(mes

