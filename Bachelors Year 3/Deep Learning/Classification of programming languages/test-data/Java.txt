/**
 * 개요
 * - 포상관리에 대한 ServiceImpl 클래스를 정의한다.
 * 
 * 상세내용
 * - 포상관리에 대한 등록, 수정, 삭제, 조회, 승인처리 기능을 제공한다.
 * - 포상관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Service("egovRwardManageService")
public class EgovRwardManageServiceImpl extends EgovAbstractServiceImpl implements EgovRwardManageService {
	@Resource(name="rwardManageDAO")
    private RwardManageDAO rwardManageDAO;
    /** ID Generation */  
	@Resource(name="egovRwardManageIdGnrService")
	private EgovIdGnrService idgenRwardManageService;
	@Resource(name="EgovInfrmlSanctnService")
    protected EgovInfrmlSanctnService infrmlSanctnService;
	/**
	 * 포상관리정보를 관리하기 위해 등록된 포상관리 목록을 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return List - 포상관리 목록
	 */
	public List<RwardManageVO> selectRwardManageList(RwardManageVO rwardManageVO) throws Exception{
		rwardManageVO.setSearchFromDate(EgovStringUtil.removeMinusChar(rwardManageVO.getSearchFromDate()));
		rwardManageVO.setSearchToDate(Egov

		List<RwardManageVO> result = rwardManageDAO.selectRwardManageList(rwardManageVO);
		
		int num = result.size();
	    for (int i = 0 ; i < num ; i ++ ){
	    	RwardManageVO rwardManageVO1 = result.get(i);
	    	rwardManageVO1.setRwardDe(EgovDateUtil.formatDate(rwardManageVO1.getRwardDe(), "-"));
	    	result.set(i, rwardManageVO1);
	    }	
		return result;
	}
	/**
	 * 포상관리목록 총 갯수를 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return int - 포상관리 카운트 수
	 */
	public int selectRwardManageListTotCnt(RwardManageVO rwardManageVO) throws Exception {
		return rwardManageDAO.selectRwardManageListTotCnt(rwardManageVO);
	}
	/**
	 * 등록된 포상관리의 상세정보를 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return RwardManageVO - 포상관리 VO
	 */
	public RwardManageVO selectRwardManage(RwardManageVO rwardManageVO) throws Exception {
		RwardManageVO rwardManageVOTemp = rwardManageDAO.selectRwardManage(rwardManageVO);
		rwardManageVOTemp.setRwardDe(EgovDateUtil.formatDate(rwardManageVOTemp.getRwardDe(), "-"));		
		
	

	}
	/**
	 * 포상관리정보를 신규로 등록한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void insertRwardManage(RwardManage rwardManage) throws Exception {
		/*
		 * 포상 승인처리  신청 infrmlSanctnService.insertInfrmlSanctn("000", vcatnManage);
		 */
		rwardManage.setRwardDe(EgovStringUtil.removeMinusChar(rwardManage.getRwardDe()));
		rwardManage.setInfrmlSanctnId(infrmlSanctn.getInfrmlSanctnId());
		rwardManage.setConfmAt(infrmlSanctn.getConfmAt());
		String	sRwardId = idgenRwardManageService.getNextStringId();
		rwardManage.setRwardId(sRwardId);
		
		rwardManageDAO.insertRwardManage(rwardManage);
	}
	/**
	 * 기 등록된 포상관리정보를 수정한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void updtRwardManage(RwardManage rwardManage) throws Exception {
		rwardManage.setRwardDe(EgovStringUtil.removeMinusChar(rwardManage.getRwardDe()));
		rwardManageDAO.updtRwardManage(rwardManage);
	}
	/**
	 * 기 등록된 포상관리정보를 삭제한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void deleteRwardManage(RwardManage rwardManage) thro

		/*
		 * 포상 승인처리  삭제 infrmlSanctnService.deleteInfrmlSanctn("000", vcatnManage);
		 */
		rwardManage.setRwardDe(EgovStringUtil.removeMinusChar(rwardManage.getRwardDe()));
		rwardManageDAO.deleteRwardManage(rwardManage);
	}
	/**
	 * 포상관리정보 승인 처리를 위해 신청된 포상관리 목록을 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return List - 포상관리 목록
	 */
	public List<RwardManageVO> selectRwardManageConfmList(RwardManageVO rwardManageVO) throws Exception{
		rwardManageVO.setSearchFromDate(EgovStringUtil.removeMinusChar(rwardManageVO.getSearchFromDate()));
		rwardManageVO.setSearchToDate(EgovStringUtil.removeMinusChar(rwardManageVO.getSearchToDate()));
		List<RwardManageVO> result = rwardManageDAO.selectRwardManageConfmList(rwardManageVO);
		int num = result.size();
	    for (int i = 0 ; i < num ; i ++ ){
	    	RwardManageVO rwardManageVO1 = result.get(i);
	    	rwardManageVO1.setRwardDe(EgovDateUtil.formatDate(rwardManageVO1.getRwardDe(), "-"));
	    	result.set(i, rwardManageVO1);
	    }	
		return result;

	}
	/**
	 * 포상승인목록 총 갯수를 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return int - 포상관리 카운트 수
	 */
	public int selectRwardManageConfmListTotCnt(RwardManageVO rwardManageVO) throws Exception {
		return rwardManageDAO.selectRwardManageConfmListTotCnt(rwardManageVO);
	}
	/**
	 * 포상정보를 승인/반려처리 한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void updtRwardManageConfm(RwardManage rwardManage) throws Exception {
		 InfrmlSanctn infrmlSanctn = new InfrmlSanctn();
		 rwardManage.setRwardDe(EgovStringUtil.removeMinusChar(rwardManage.getRwardDe()));
		 if(rwardManage.getConfmAt().equals("C")){
			/*
			 * 승인처리
			 */
		 }else if(rwardManage.getConfmAt().equals("R")){
			/*
			 * 반려처리
			 */
		 }
		 rwardManage.setSanctnDt(infrmlSanctn.getSanctnDt());
		 rwardManage.setConfmAt(infrmlSanctn.getConfmAt());
		 rwardManageDAO.updtRwardManageConfm(rwardManage);
	}
	/**
	 * RwardManage model을 InfrmlSanctn model로 변환한다.
	 * @param RwardManage
	 * @return InfrmlSanctn
	 * @param rwardManage
	 */
	pr
/*
 * This is an auto-generated source file.
 */
public enum RetCode {
	RETCODE_OK,
	RETCODE_KO,
	RETCODE_KO_NULL_REQ_SOURCE,
	RETCODE_KO_UNKNOWN_REQ_SOURCE,
	RETCODE_KO_LOGIN_FAILED,
	RETCODE_KO_NOT_LOGIN_OR_SESSION_TIMEOUT,
	RETCODE_KO_DB_OPEN_CONN_FAILED,
	RETCODE_KO_DB_CLOSE_CONN_FAILED,
	RETCODE_KO_DB_CREATE_STMT_FAILED,
	RETCODE_KO_DB_CLOSE_STMT_FAILED,
	RETCODE_KO_UNKNOWN_DB_ACTION,
	RETCODE_KO_MANAGE_SCHOOL_NULL_ACTION,
	RETCODE_KO_MANAGE_SCHOOL_NULL_NAME,
	RETCODE_KO_MANAGE_SCHOOL_SELECT_FAILED,
	RETCODE_KO_MANAGE_SCHOOL_INSERT_FAILED,
	RETCODE_KO_MANAGE_SCHOOL_UPDATE_FAILED,
	RETCODE_KO_MANAGE_SCHOOL_DELETE_FAILED,
	RETCODE_KO_MANAGE_TEACHER_NULL_ACTION,
	RETCODE_KO_MANAGE_TEACHER_SELECT_FAILED,
	RETCODE_KO_MANAGE_TEACHER_INSERT_FAILED,
	RETCODE_KO_MANAGE_TEACHER_UPDATE_FAILED,
	RETCODE_KO_MANAGE_TEACHER_DELETE_FAILED,
	RETCODE_KO_MANAGE_CLASS_TABLES_NULL_ACTION,
	RETCODE_KO_MANAGE_CLASS_TABLES_NULL_SCHOOLID,
	RETCODE_KO_MANAGE_CLASS_TABLES_SELECT_FAILED,
	RETCODE_KO_MANAGE_C
/**
 * 롤관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Service("egovRoleHierarchyManageService")
public class EgovRoleHierarchyManageServiceImpl extends EgovAbstractServiceImpl implements EgovRoleHierarchyManageService {
	@Resource(name="roleRoleHierarchyManageDAO")
	public RoleHierarchyManageDAO roleRoleHierarchyManageDAO;
	/**
	 * 모든 롤 상하관계를 조회
	 * @param RoleHierarchyManageVO UserManageVO
	 * @return List<RoleHierarchyManageVO>
	 * @exception Exception
	 */
	public List<RoleHierarchyManageVO> selectRoleHierarchyList(RoleHierarchyManageVO roleHierarchyManageVO) throws Exception {
		return roleRoleHierarchyManageDAO.selectRoleHierarchyList(roleHierarchyManageVO);
	}
	/**
	 * 롤 상하관계를 등록
	 * @param roleHierarchyManage RoleHierarchy
	 * @e

	 */
	public void insertRoleHierarchyManage(RoleHierarchyManage roleHierarchyManage) throws Exception {
		roleRoleHierarchyManageDAO.insertRoleHierarchy(roleHierarchyManage);		
	}
	/**
	 * 롤 상하관계를 수정
 	 * @param roleHierarchyManage RoleHierarchy
	 * @exception Exception
	 */
	public void updateRoleHierarchy(RoleHierarchyManage roleHierarchyManage) throws Exception {
		roleRoleHierarchyManageDAO.updateRoleHierarchy(roleHierarchyManage);
	}
	/**
	 * 롤 상하관계를 삭제
	 * @param roleHierarchyManage RoleHierarchy
	 * @exception Exception
	 */
	public void deleteRoleHierarchy(RoleHierarchyManage roleHierarchyManage) throws Exception {
		roleRoleHierarchyManageDAO.deleteRoleHierarchy(roleHierarchyManage);
	}
	/**
	 * 롤 상하관계 카운트를 반환한다
	 * @param RoleHierarchyManageVO UserManageVO
	 * @return int
	 * @exception Exception
	 */
	public int selectRoleHierarchyListTotCnt(RoleHierarchyManageVO roleHierarchyManageVO) throws Exception {
		return roleRoleHierarchyManageDAO.selectRoleHierarchyListTotCnt(role
/*******************************************************************************
 * Copyright (c) 2012, 2014 Sonatype, Inc.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 *
 * Contributors:
 *    Sonatype, Inc. - initial API and implementation
 *******************************************************************************/
/**
 * Thrown when a transfer could not be performed because a remote repository is not accessible in offline mode.
 */
public class RepositoryOfflineException
    extends RepositoryException
    private final transient RemoteRepository repository;
    private static String getMessage( RemoteRepository repository )
    {
        if ( repository == null )
        {
            return "Cannot access remote repositories in offline mode";
        }
        else
        {
            return "Cannot access " + repositor

        }
    }
    /**
     * Creates a new exception with the specified repository.
     * 
     * @param repository The inaccessible remote repository, may be {@code null}.
     */
    public RepositoryOfflineException( RemoteRepository repository )
    {
        super( getMessage( repository ) );
        this.repository = repository;
    }
    /**
     * Creates a new exception with the specified repository and detail message.
     * 
     * @param repository The inaccessible remote repository, may be {@code null}.
     * @param message The detail message, may be {@code null}.
     */
    public RepositoryOfflineException( RemoteRepository repository, String message )
    {
        super( message );
        this.repository = repository;
    }
    /**
     * Gets the remote repository that could not be accessed due to offline mode.
     * 
     * @return The inaccessible remote repository or {@code null} if unknown.
     */
    public RemoteRepository getRepository()
    {
        
/**
 * 롤관리에 관한 서비스 인터페이스 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  이문준          최초 생성
 *
 * </pre>
 */
public interface EgovRoleManageService {
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception;
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception;
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception;
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 *
@Component("productProcessService")
public class ProductProcessServiceImpl implements ProductProcessService {
	@Autowired
	private ProductProcessDao productProcessDao;
	@Override
	public ProductProcess query(ProductProcess productProcess) {
		return productProcessDao.query(productProcess);
	}
	@Override
	public void update(ProductProcess productProcess) {
		productProcessDao.update(productProcess);
	}
	@Override
	public List<ProductProcess> queryList(ProductProcess productProcess) {
		return productProcessDao.queryList(productProcess);
	}
	@Override
	public List<ProductProcess> queryList(ProductProcess productProcess, Pager page) {
		return productProcessDao.queryPageList(productProcess, page);
	}
	@Override
	public Integer count(ProductProcess productProcess) {
		return productProcessDao.count(productProcess);
	}
	@Override
	public void delete(ProductProcess productProcess) {
		productProcessDao.delete(productProcess);
	}
	@Override
	public Integer insert(ProductProcess productProcess
/**
 * 
 ******************************************************************************
 * Modification log of ManageAccountVehicleController.java                                            
 ******************************************************************************
 * Date     User         Description                                           
 * -------- ------------ ------------------------------------------------------
 * 05-12-17 romerori     Initial creation & add MVC pattern.
 ******************************************************************************
 *
 */
public class ManageAccountVehicleController {
	private ManageAccountVehicleModel manageAccountVehicleModel;
	private ManageAccountVehicleView manageAccountVehicleView;
	public void addModel(ManageAccountVehicleModel manageAccountVehicleModel) {
		this.manageAccountVehicleModel = manageAccountVehicleModel;
	}
	public void addView(ManageAccountVehicleView manageAccountVehicleView) {
		this.manageAccountVehicleView = man
public class ServiceLocator {
  private static ServiceLocator INSTANCE;
  private IAnuncioService anuncioService;
  private IUserService userService;
  private IRoleService roleService;
  private IProveedorService providerService;
  private IClienteService clienteService;
  private IContractService contractService;
  private IOfertaService ofertaService;
  private IMailService mailService;
  
  private ServiceLocator() {/*Singleton*/}
  public static ServiceLocator getInstance() {
    if (INSTANCE == null) {
      INSTANCE = new ServiceLocator();
    }
    return INSTANCE;
  }
  
  public static IAnuncioService getAnuncioService() {
    return INSTANCE.anuncioService;
  }
  @Autowired
  public void setAnuncioService(IAnuncioService anuncioService) {
    this.anuncioService = anuncioService;
  }
	public static IUserService getUserService() {
		return INSTANCE.userService;
	}
	@Autowired
	public void setUserService(IUserService userService) {
		this.userService = userService;
	}
	public 

		return INSTANCE.roleService;
	}
	@Autowired
	public void setRoleService(IRoleService roleService) {
		this.roleService = roleService;
	}
	public static IProveedorService getProviderService() {
		return INSTANCE.providerService;
	}
	@Autowired
	public void setProviderService(IProveedorService providerService) {
		this.providerService = providerService;
	}
	public static IClienteService getClienteService() {
		return INSTANCE.clienteService;
	}
	@Autowired
	public void setClienteService(IClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public static IContractService getContractService() {
		return INSTANCE.contractService;
	}
	@Autowired
	public void setContractService(IContractService contractService) {
		this.contractService = contractService;
	}
	public static IOfertaService getOfertaService() {
		return INSTANCE.ofertaService;
	}
	@Autowired
	public void setOfertaService(IOfertaService ofertaService) {
		this.ofertaService = ofertaService;
	}
	public st
/** 
 * 만족도조사 문항 관리에 대한 서비스 구현클래스를 정의한다
 * <p><b>NOTE:</b> 만족도 조사 문항 관리서비스에 선언 되어있는 메소드들의 구현 클래스로 프로그램관리테이블 데이터 접근 클래스의 메소드를 호출한다
 * 메소드들 중에는 parameter를 넘기는 메소드도 있고 넘기지 않는 메소드도 존재한다
 * @author 포탈통계 이관형 
 * @since 2011.10.21 
 * @version 1.0 
 * @see 
 * 
 * <pre> 
 *  == Modification Information) == 
 *   
 *     date         author                note 
 *  -----------    --------    --------------------------- 
 *   2011.10.21     이관형      최초 생성 
 * 
 * </pre> 
 */
@Service("csnstQesitmManageService")
public class CsnstQesitmManageServiceImpl extends AbstractServiceImpl implements CsnstQesitmManageService {
	/** csnstQesitmManageDAO 서비스 호출 */ 
	@Resource(name="csnstQesitmManageDAO")
    private CsnstQesitmManageDAO csnstQesitmManageDAO;
	/**
	 * 만족도 조사 문항 삭제
	 * @param csnstManageVO CsnstManageVO
	 * @throws Exception
	 * @see TABLE NAME : TN_CSNST_QESITM_MANAGE
	 */
	public void deleteCsnstQesitm(CsnstManageVO csnstManageVO) throws Exception {
		csnstQesitmManageDAO.deleteCsnstQesitm

	}
	/**
	 * 만족도 조사 문항 등록
	 * @param csnstManageVO CsnstManageVO
	 * @throws Exception
	 * @see TABLE NAME : TN_CSNST_QESITM_MANAGE
	 */
	public void insertCsnstQesitm(CsnstManageVO csnstManageVO) throws Exception {
    	csnstQesitmManageDAO.insertCsnstQesitm(csnstManageVO);    	
	}
	/**
	 * 만족도 조사 문항 수정
	 * @param csnstManageVO CsnstManageVO
	 * @throws Exception
	 * @see TABLE NAME : TN_CSNST_QESITM_MANAGE
	 */
	public void updateCsnstQesitm(CsnstManageVO csnstManageVO) throws Exception {
    	csnstQesitmManageDAO.updateCsnstQesitm(csnstManageVO);    	
	}
	/**
	 * 만족도 조사 문항 수정
	 * @param csnstManageVO CsnstManageVO
	 * @throws Exception
	 * @see SYS_ID, CSNST_ID, CSNST_SN, QESITM_SN, QESITM_QESTN_NM, QESITM_TY, QESITM_QESTN_CO
	 * @see REGIST_DT, REGISTER_ID, REGISTER_IP, UPDT_DT, UPDTUSR_ID
	 * @see TABLE NAME : TN_CSNST_QESITM_MANAGE
	 */
	public CsnstManageVO selectCsnstQesitm(CsnstManageVO csnstManageVO) throws Exception {
    	CsnstManageVO ret = (CsnstManageVO)csnstQesitmManage
public class ServiceFactory {
	public static SecurityService createSecurityService() {
		
		SecurityService service = SessionDecorator.<SecurityService>createProxy(new SecurityServiceImpl(), SecurityService.class);
		return service;
	}
	public static UserService createUserService() {
		
		UserService service = SessionDecorator.<UserService>createProxy(new UserServiceImpl(), UserService.class);
		return service;
	}
	public static RoleService createRoleService() {
		
		RoleService service = SessionDecorator.<RoleService>createProxy(new RoleServiceImpl(), RoleService.class);
		return service;
	}
	public static PermissionService createPermissionService() {
		
		PermissionService service = SessionDecorator.<PermissionService>createProxy(new PermissionServiceImpl(), PermissionService.class);
		return service;
	}
	public static LUTService createLUTService() {
		
		LUTService service = SessionDecorator.<LUTService>createProxy(new LUTServiceImpl(), LUTService.class);
		return service;
	}
	publi
/**
 * RSS태그관리를 처리하는 ServiceImpl Class 구현
 * @author 공통서비스 장동한
 * @since 2010.06.16
 * @version 1.0
 * @see <pre>
 * &lt;&lt; 개정이력(Modification Information) &gt;&gt;
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.07.03  장동한          최초 생성
 * 
 * </pre>
 */
@Service("egovRssManageService")
public class EgovRssTagManageServiceImpl extends EgovAbstractServiceImpl 
        implements EgovRssTagManageService {
	/* RSS관리 DAO */
    @Resource(name = "rssManageDao")
    private RssTagManageDao dao;
    /* RSS ID Generator Service */
    @Resource(name = "egovRssTagManageIdGnrService")
    private EgovIdGnrService idgenService;
    /**
     * JDBC 테이블 목록을조회한다.
     * @return List -조회한목록이담긴List
     * @throws Exception
     */
    public List selectRssTagManageTableList() throws Exception {
    	return (List)dao.selectRssTagManageTableList();
    }
    /**
     * JDBC 테이블 컬럼 목록을 조회한다.
     * @param map - 컬럼조회정보
     * @return List -조회한목록이담

     * @throws Exception
     */
    public List selectRssTagManageTableColumnList(Map map) throws Exception {
    	return (List)dao.selectRssTagManageTableColumnList(map);
    }
    /**
     * RSS태그관리를(을) 목록을 조회 한다.
     * @param rssManage -조회할 정보가 담긴 객체
     * @return List -조회한목록이담긴List
     * @throws Exception
     */
    public List selectRssTagManageList(RssManage rssManage) throws Exception {
    	return dao.selectRssTagManageList(rssManage);
    }
    /**
     * RSS태그관리를(을) 목록 전체 건수를(을) 조회한다.
     * @param searchVO -조회할 정보가 담긴 객체
     * @return int -조회한건수가담긴Integer
     * @throws Exception
     */
    public int selectRssTagManageListCnt(RssManage rssManage) throws Exception {
        return dao.selectRssTagManageListCnt(rssManage);
    }
    
    /**
     * RSS태그관리를(을) 상세조회 한다.
     * @param searchVO -조회할 정보가 담긴 객체
     * @return List -조회한목록이담긴List
     * @throws Exception
     */
    public RssManage selectRssTagManageDetail(RssManage rssManage) throws Exception {
        ret
/**
 * 권한별 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Service("egovAuthorRoleManageService")
public class EgovAuthorRoleManageServiceImpl extends AbstractServiceImpl implements EgovAuthorRoleManageService {
	@Resource(name="authorRoleManageDAO")
    private AuthorRoleManageDAO authorRoleManageDAO;
	/**
	 * 권한 롤 관계정보를 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return AuthorRoleManageVO
	 * @exception Exception
	 */
	public AuthorRoleManageVO selectAuthorRole(AuthorRoleManageVO authorRoleManageVO) throws Exception {
		return authorRoleManageDAO.selectAuthorRole(authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보 목록 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return List<AuthorRoleManageVO>
	 * @exception Exception
	 */
	publ

		return authorRoleManageDAO.selectAuthorRoleList(authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보를 화면에서 입력하여 입력항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void insertAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		authorRoleManageDAO.insertAuthorRole(authorRoleManage);
	}
	/**
	 * 수정된 권한 롤 관계정보를 데이터베이스에 반영
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void updateAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		authorRoleManageDAO.updateAuthorRole(authorRoleManage);
	}
	/**
	 * 권한 롤 관계정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param authorRoleManage AuthorRoleManage
	 * @exception Exception
	 */
	public void deleteAuthorRole(AuthorRoleManage authorRoleManage) throws Exception {
		authorRoleManageDAO.deleteAuthorRole(authorRoleManage);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return int
	 * @exception Exception
	 */
	public in
/**
 * Created by xc on 16-1-14.
 */
public class Deferred<DataType, ErrorType> implements Deferrable<DataType, ErrorType> {
    private DoneHandler<DataType> doneHandler;
    private FailHandler<ErrorType> failHandler;
    private AlwaysHandler alwaysHandler;
    public Deferrable<DataType, ErrorType> done(DoneHandler<DataType> doneHandler) {
        this.doneHandler = doneHandler;
        return this;
    }
    public Deferrable<DataType, ErrorType> fail(FailHandler<ErrorType> failHandler) {
        this.failHandler = failHandler;
        return this;
    }
    public Deferrable<DataType, ErrorType> always(AlwaysHandler alwaysHandler) {
        this.alwaysHandler = alwaysHandler;
        return this;
    }
    @Override
    public void resolve(DataType data) {
        if (doneHandler != null) {
            doneHandler.done(data);
        }
        if (alwaysHandler != null) {
            alwaysHandler.always();
        }
    }
    @Override
    public void reject(ErrorType err) {
   
public class BitBucketRepositoryWrapper {
    public BitBucketRepository repository;
    public List<BitBucketRepository> repositories;
    public BitBucketRepositoryWrapper() {
        super();
    }
    public BitBucketRepositoryWrapper(BitBucketRepository repository) {
        super();
        this.repository = repository;
    }
    public BitBucketRepositoryWrapper(List<BitBucketRepository> repositories) {
        super();
        this.repositories = repositories;
    }
    public boolean hasRepository() {
        return repository != null;
    }
    public BitBucketRepository getRepository() {
        return repository;
    }
    public void setRepository(BitBucketRepository repository) {
        this.repository = repository;
    }
    public boolean hasRepositories() {
        return repositories != null;
    }
    public List<BitBucketRepository> getRepositories() {
        return repositories;
    }
    public void setRepositories(List<BitBucketRepository> repositories) {
     
/**
 * User: kevin (kevin at atmire.com)
 * Date: 2/06/14
 * Time: 10:56
 */
public class ContentServiceFactoryImpl extends ContentServiceFactory {
    @Autowired(required = true)
    private BitstreamFormatService bitstreamFormatService;
    @Autowired(required = true)
    private BitstreamService bitstreamService;
    @Autowired(required = true)
    private BundleService bundleService;
    @Autowired(required = true)
    private ItemService itemService;
    @Autowired(required = true)
    private CollectionService collectionService;
    @Autowired(required = true)
    private CommunityService communityService;
    @Autowired(required = true)
    private MetadataSchemaService metadataSchemaService;
    @Autowired(required = true)
    private MetadataFieldService metadataFieldService;
    @Autowired(required = true)
    private MetadataValueService metadataValueService;
    @Autowired(required = true)
    private WorkspaceItemService workspaceItemService;
    @Autowired(required = true

    private SubscriptionService subscriptionService;
    @Autowired(required = true)
    private InstallItemService installItemService;
    @Autowired(required = true)
    private SupervisedItemService supervisedItemService;
    @Autowired(required = true)
    private SiteService siteService;
    @Override
    public BitstreamFormatService getBitstreamFormatService()
    {
        return bitstreamFormatService;
    }
    @Override
    public BitstreamService getBitstreamService()
    {
        return bitstreamService;
    }
    @Override
    public BundleService getBundleService()
    {
        return bundleService;
    }
    @Override
    public CollectionService getCollectionService()
    {
        return collectionService;
    }
    @Override
    public CommunityService getCommunityService()
    {
        return communityService;
    }
    @Override
    public ItemService getItemService()
    {
        return itemService;
    }
    @Override
    public MetadataSchemaService getMeta
/**
 * 그룹관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Repository("groupManageDAO")
public class GroupManageDAO extends EgovComAbstractDAO {
	/**
	 * 검색조건에 따른 그룹정보를 조회
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO selectGroup(GroupManageVO groupManageVO) throws Exception {
		return (GroupManageVO) select("groupManageDAO.selectGroup", groupManageVO);
	}
	/**
	 * 시스템사용 목적별 그룹 목록 조회
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<GroupManageVO> selectGroupList(GroupManageVO groupManageVO) throws Exception {
		return (List<GroupManageVO>) list("groupManageDAO.selectGroupList", groupManage

	}
	/**
	 * 그룹 기본정보를 화면에서 입력하여 항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void insertGroup(GroupManage groupManage) throws Exception {
		insert("groupManageDAO.insertGroup", groupManage);
	}
	/**
	 * 화면에 조회된 그룹의 기본정보를 수정하여 항목의 정합성을 체크하고 수정된 데이터를 데이터베이스에 반영
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void updateGroup(GroupManage groupManage) throws Exception {
		update("groupManageDAO.updateGroup", groupManage);
	}
	/**
	 * 불필요한 그룹정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void deleteGroup(GroupManage groupManage) throws Exception {
		delete("groupManageDAO.deleteGroup", groupManage);
	}
    /**
	 * 롤목록 총 갯수를 조회한다.
	 * @param groupManageVO GroupManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectGroupListTotCnt(GroupManageVO groupManageVO) throws Exception {
        return (Integer)select("groupManageDAO.selectGroupListTotCnt
/**
 * 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Repository("roleManageDAO")
public class RoleManageDAO extends EgovComAbstractDAO {
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception {
		return (RoleManageVO) selectByPk("roleManageDAO.selectRole", roleManageVO);
	}
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception {
		return list("roleManageDAO.selectRoleList", roleManageVO);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 

	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void insertRole(RoleManage roleManage) throws Exception {
		insert("roleManageDAO.insertRole", roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void updateRole(RoleManage roleManage) throws Exception {
		update("roleManageDAO.updateRole", roleManage);
	}
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception {
		delete("roleManageDAO.deleteRole", roleManage);
	}
    /**
	 * 롤목록 총 갯수를 조회한다.
	 * @param roleManageVO RoleManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectRoleListTotCnt(RoleManageVO roleManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("roleManageDAO.selectAuthorListTotCnt", roleManageVO);
    }	
    
	/**
	 * 등록된 모든 롤 정보 목록 조회
	 * @param
/* Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Suspending and activating process definitions and process instances was added
 * in Activiti 5.11. This class tests this newly added functionality.
 * 
 * @author Joram
 */
@RunOnlyWithTestDataFromVersion(versions = {"5.7", "5.8", "5.9", "5.10"})
public class SuspendAndActivateFunctionalityTest extends UpgradeTestCase {
  @Test
  public void testSuspendProcessDefinition() {
    ProcessDefinition processDefinition = processEngine.getRepositoryService().createProcessDefinitionQue

            .singleResult();
    assertNotNull(processDefinition);
    assertFalse(processDefinition.isSuspended());
    assertEquals(5, processEngine.getRuntimeService().createProcessInstanceQuery().processDefinitionId(processDefinition.getId()).active().count());
    assertEquals(0, processEngine.getRuntimeService().createProcessInstanceQuery().processDefinitionId(processDefinition.getId()).suspended().count());
    processEngine.getRepositoryService().suspendProcessDefinitionById(processDefinition.getId(), true, null);
    try {
      processEngine.getRuntimeService().startProcessInstanceById(processDefinition.getId());
    } catch (ActivitiException e) {
      assertTrue(e.getMessage().toLowerCase().contains("suspend"));
    }
    assertEquals(0, processEngine.getRuntimeService().createProcessInstanceQuery().processDefinitionId(processDefinition.getId()).active().count());
    assertEquals(5, processEngine.getRuntimeService().createProcessInstanceQuery().processDefinitionId(proces

    processEngine.getRepositoryService().activateProcessDefinitionById(processDefinition.getId(), true, null);
    assertEquals(5, processEngine.getRuntimeService().createProcessInstanceQuery().processDefinitionId(processDefinition.getId()).active().count());
    assertEquals(0, processEngine.getRuntimeService().createProcessInstanceQuery().processDefinitionId(processDefinition.getId()).suspended().count());
  }
  @Test
  public void testSuspendProcessInstance() {
    ProcessDefinition processDefinition = processEngine.getRepositoryService().createProcessDefinitionQuery().processDefinitionKey("suspendAndActivate")
            .singleResult();
    assertNotNull(processDefinition);
    assertFalse(processDefinition.isSuspended());
    assertEquals(5, processEngine.getRuntimeService().createProcessInstanceQuery().processDefinitionId(processDefinition.getId()).active().count());
    assertEquals(0, processEngine.getRuntimeService().createProcessInstanceQuery().processDefinitionId(processD

    ProcessInstance processInstance = processEngine.getRuntimeService().createProcessInstanceQuery().processDefinitionId(processDefinition.getId()).list()
            .get(0);
    assertFalse(processInstance.isSuspended());
    processEngine.getRuntimeService().suspendProcessInstanceById(processInstance.getId());
    assertEquals(4, processEngine.getRuntimeService().createProcessInstanceQuery().processDefinitionId(processDefinition.getId()).active().count());
    assertEquals(1, processEngine.getRuntimeService().createProcessInstanceQuery().processDefinitionId(processDefinition.getId()).suspended().count());
    try {
      Task task = processEngine.getTaskService().createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
      processEngine.getTaskService().complete(task.getId());
    } catch (ActivitiException e) {
      assertTrue(e.getMessage().toLowerCase().contains("suspend"));
    }
    processEngine.getRuntimeService().activateProcessInstanceById(processIns
public class PdiConfig implements IPdiConfig, Serializable {
  String repositoryName;
  String repositoryType;
  String repositoryUserId;
  String repositoryPassword;
  String repositoryXmlFile;
  
  public PdiConfig() {
    
  }
  
  public PdiConfig(IPdiConfig pdiConfig) {
    setRepositoryName(pdiConfig.getRepositoryName());
    setRepositoryPassword(pdiConfig.getRepositoryPassword());
    setRepositoryType(pdiConfig.getRepositoryType());
    setRepositoryUserId(pdiConfig.getRepositoryUserId());
    setRepositoryXmlFile(pdiConfig.getRepositoryXmlFile());
  }
  
  public String getRepositoryName() {
    return repositoryName;
  }
  public void setRepositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
  }
  public String getRepositoryType() {
    return repositoryType;
  }
  public void setRepositoryType(String repositoryType) {
    this.repositoryType = repositoryType;
  }
  public String getRepositoryUserId() {
    return repositoryUserId;
  }
  public voi
public class ProcessManager {
	private OS os;
	public ProcessManager(OS os) {
		this.os = os;
	}
	public void execute() {
		Machine.outputArea.append("PROCESS MANAGER\n");
		
		if (os.runProcess != null) {
			Machine.outputArea.append("RUNNING: " + os.runProcess + "\n");
			checkCurrent();
		}
		else {
			Machine.outputArea.append("RUNNING: NOTHING\n");
		}
		
		Process candidate = getTopPriorityReadyProc();
		
		if (candidate != null) {
			prepareProcess(candidate);
			Machine.outputArea.append("NEW RUNNING: " + os.runProcess + "\n");
		}
		else {
			Machine.outputArea.append("NO READY PROCESSES\n");
		}
	}
	private void prepareProcess(Process newProcess) {
		os.runProcess = newProcess;
		newProcess.processDescriptor.processState = ProcessState.RUN;
		os.readyProcesses.remove(newProcess);
		newProcess.loadCPU();
	}
	private void checkCurrent() {
		Process process = os.runProcess;
		process.saveCPU();
		os.runProcess = null;
		if (process.processDescriptor.processState != ProcessState.
/**
 * 
 */
/**
 * @author hrishi
 *
 */
public class TestProcessDefReader {
	private ProcessDefReader processDefReader;
	@Test
	public void testReadProcessDefinition() throws ProcessDefinitionException {
		String name = "TestProcessDef.xml";
		ProcessDefinition processDefinition = readProcessDefinition(name);
		Assert.assertNotNull("ProcessDefinition found null..", processDefinition);
	}
	/**
	 * @param name
	 * @return
	 * @throws ProcessDefinitionException
	 */
	private ProcessDefinition readProcessDefinition(String name)
			throws ProcessDefinitionException {
		processDefReader = new ProcessDefReader(getClass().getClassLoader().getResourceAsStream(name));
		ProcessDefinition processDefinition = processDefReader.readProcessDefinition();
		return processDefinition;
	}
	@Test
	public void testReadProcessDefinitionIncorrectStartState() {
		try {
			ProcessDefinition processDefinition = readProcessDefinition("TestProcessDef_IncorrectStartState.xml");
			Assert.assertNotNull("ProcessDefi
public class ServiceManager {
	private UserService userService;
	private ArticleService articleService;
	private WebsiteService websiteService;
	private MessageService messageService;
	private PhotoService photoService;
	public UserService getUserService() {
		return userService;
	}
	public void setUserService(UserService userService) {
		this.userService = userService;
	}
	public ArticleService getArticleService() {
		return articleService;
	}
	public void setArticleService(ArticleService articleService) {
		this.articleService = articleService;
	}
	public WebsiteService getWebsiteService() {
		return websiteService;
	}
	public void setWebsiteService(WebsiteService websiteService) {
		this.websiteService = websiteService;
	}
	public MessageService getMessageService() {
		return messageService;
	}
	public void setMessageService(MessageService messageService) {
		this.messageService = messageService;
	}
	public PhotoService getPhotoService() {
		return photoService;
	}
	public void setP
/**
 * @author Rodrigo Itursarry (itursarry@gmail.com)
 */
public abstract class AbstractRepositoryFinder {
	private ItemTrackerRepositoryBI itemTrackerRepository;
	private UserRepositoryBI userRepository;
	private ProjectRepositoryBI projectRepository;
	private TeamRepositoryBI teamRepository;
	private ItemRepositoryBI itemRepository;
	private ItemTypeRepositoryBI itemTypeRepository;
	private WorkflowRepositoryBI workflowRepository;
	private ItemStateRepositoryBI itemStateRepository;
	public ItemTrackerRepositoryBI getItemTrackerRepository() {
		return this.itemTrackerRepository;
	}
	public void setItemTrackerRepository(ItemTrackerRepositoryBI itemTrackerRepository) {
		this.itemTrackerRepository = itemTrackerRepository;
	}
	public UserRepositoryBI getUserRepository() {
		return this.userRepository;
	}
	public void setUserRepository(UserRepositoryBI userRepository) {
		this.userRepository = userRepository;
	}
	public ProjectRepositoryBI getProjectRepository() {
		return this.projectRe

	}
	public void setProjectRepository(ProjectRepositoryBI projectRepository) {
		this.projectRepository = projectRepository;
	}
	public TeamRepositoryBI getTeamRepository() {
		return this.teamRepository;
	}
	public void setTeamRepository(TeamRepositoryBI teamRepository) {
		this.teamRepository = teamRepository;
	}
	public ItemRepositoryBI getItemRepository() {
		return this.itemRepository;
	}
	public void setItemRepository(ItemRepositoryBI itemRepository) {
		this.itemRepository = itemRepository;
	}
	public WorkflowRepositoryBI getWorkflowRepository() {
		return this.workflowRepository;
	}
	public void setWorkflowRepository(WorkflowRepositoryBI workflowRepository) {
		this.workflowRepository = workflowRepository;
	}
	public ItemTypeRepositoryBI getItemTypeRepository() {
		return itemTypeRepository;
	}
	public void setItemTypeRepository(ItemTypeRepositoryBI itemTypeRepository) {
		this.itemTypeRepository = itemTypeRepository;
	}
	public ItemStateRepositoryBI getItemStateRepository() {

public class NetworkService {
	private String serviceName;
	private String serviceHost;
	private int servicePort;
	private int serviceType;
	public NetworkService() {
		serviceName = new String();
		serviceHost = null;
		servicePort = -1;
		serviceType = -1;
	}
	public NetworkService(
			String serviceName,
			String serviceHost,
			int servicePort,
			int serviceType) {
		this.serviceName = serviceName;
		this.serviceHost = serviceHost;
		if(this.serviceHost != null && this.serviceHost.startsWith("/")) {
			this.serviceHost = this.serviceHost.substring(1);
		}
		this.servicePort = servicePort;
		this.serviceType = serviceType;
	}
	public void setServiceName(String serviceName) {
		this.serviceName = serviceName;
	}
	public String getServiceName() {
		return serviceName;
	}
	public void setServiceHost(String serviceHost) {
		this.serviceHost = serviceHost;
		if(this.serviceHost.startsWith("/")) {
			this.serviceHost = this.serviceHost.substring(1);
		}
	}
	public String getServiceHost(
public class ServiceManager {
	/*
	 * 这里是所有Service的集合。并提供Getter 和 Setter
	 */
	private LogService logService = null;
	private AboutService aboutService = null;
	private ContactService contactService = null;
	private CityServcie cityServcie = null;
	private ProgramService programService = null;
	private PaymentService paymentService = null;
	private SpecialService specialService = null;
	private LinkService linkService = null;
	private PicService picService = null;
	private UserService userService = null;
	private ArticleService articleService = null;
	private FeedbackService feedbackService = null;
	private ReservationService reservationService = null;
	private HotelService hotelService = null;
	public ReservationService getReservationService() {
		return reservationService;
	}
	public void setReservationService(ReservationService reservationService) {
		this.reservationService = reservationService;
	}
	public FeedbackService getFeedbackService() {
		return feedbackService;
	}
	public 

		this.feedbackService = feedbackService;
	}
	public LinkService getLinkService() {
		return linkService;
	}
	public void setLinkService(LinkService linkService) {
		this.linkService = linkService;
	}
	public SpecialService getSpecialService() {
		return specialService;
	}
	public void setSpecialService(SpecialService specialService) {
		this.specialService = specialService;
	}
	public PaymentService getPaymentService() {
		return paymentService;
	}
	public void setPaymentService(PaymentService paymentService) {
		this.paymentService = paymentService;
	}
	public ProgramService getProgramService() {
		return programService;
	}
	public void setProgramService(ProgramService programService) {
		this.programService = programService;
	}
	public CityServcie getCityServcie() {
		return cityServcie;
	}
	public void setCityServcie(CityServcie cityServcie) {
		this.cityServcie = cityServcie;
	}
	public ContactService getContactService() {
		return contactService;
	}
	public void setContactServic

		this.contactService = contactService;
	}
	public AboutService getAboutService() {
		return aboutService;
	}
	public void setAboutService(AboutService aboutService) {
		this.aboutService = aboutService;
	}
	public LogService getLogService() {
		return logService;
	}
	public void setLogService(LogService logService) {
		this.logService = logService;
	}
	public PicService getPicService() {
		return picService;
	}
	public void setPicService(PicService picService) {
		this.picService = picService;
	}
	public UserService getUserService() {
		return userService;
	}
	public void setUserService(UserService userService) {
		this.userService = userService;
	}
	public ArticleService getArticleService() {
		return articleService;
	}
	public void setArticleService(ArticleService articleService) {
		this.articleService = articleService;
	}
	public HotelService getHotelService() {
		return hotelService;
	}
	public void setHotelService(HotelService hotelService) {
		this.hotelService = hotelService;
/**
 * Handler container for managing all client handler. Activates the handler
 * chain
 * 
 * @author Mirjam Bayatloo
 * 
 */
public class ClientHandlerManager extends AbstractHandlerManager {
	private FileChooserFormHandler fileChooserFormHandler;
	private DroppedFileMetadataHandler droppedFileMetadataHander;
	private UnknownFileformatHandler unknownFileFormatHandler;
	private MultipleFiletypesHandler multipleFiletypesHandler;
	private FileDataHandler fileDataHandler;
	public ClientHandlerManager() {
		super();
		fileChooserFormHandler = new FileChooserFormHandler();
		droppedFileMetadataHander = new DroppedFileMetadataHandler();
		unknownFileFormatHandler = new UnknownFileformatHandler();
		multipleFiletypesHandler = new MultipleFiletypesHandler();
		fileDataHandler = new FileDataHandler();
		fileChooserFormHandler.setNext(droppedFileMetadataHander);
		droppedFileMetadataHander.setNext(unknownFileFormatHandler);
		unknownFileFormatHandler.setNext(multipleFiletypesHandler);
		multip

		handler.add(fileChooserFormHandler);
		handler.add(droppedFileMetadataHander);
		handler.add(unknownFileFormatHandler);
		handler.add(multipleFiletypesHandler);
		handler.add(fileDataHandler);
	}
	/**
	 * @return the fileChooserFormHandler
	 */
	public FileChooserFormHandler getFileChooserFormHandler() {
		return fileChooserFormHandler;
	}
	/**
	 * @return the droppedFileMetadataHander
	 */
	public DroppedFileMetadataHandler getDroppedFileMetadataHander() {
		return droppedFileMetadataHander;
	}
	/**
	 * @return the unknownFileFormatHandler
	 */
	public UnknownFileformatHandler getUnknownFileFormatHandler() {
		return unknownFileFormatHandler;
	}
	/**
	 * @return the multipleFiletypesHandler
	 */
	public MultipleFiletypesHandler getMultipleFiletypesHandler() {
		return multipleFiletypesHandler;
	}
	/**
	 * @return the fileDataHandler
	 */
	public FileDataHandler getFileDataHandler() {
		return fileDataHandler;
	}
	public void handle(FileUploadData data) throws ProcessingException {

/**
 * Created by vintselovich on 29.01.14.
 */
public enum AddressParserOperation {
    UNKNOWN,
    PROCESS_OPERATION_1,
    PROCESS_SERVICES_REGION_2,
    PROCESS_SERVICES_DISTRICT_2,
    PROCESS_SERVICES_CITY_PREV_FOUND_2,
    PROCESS_SERVICES_CITY_PREV_NOT_FOUND_2,
    PROCESS_SERVICES_CITY_NEXT_FOUND_2,
    PROCESS_SERVICES_CITY_NEXT_NOT_FOUND_2,
    PROCESS_SERVICES_STREET_PREV_FOUND_2,
    PROCESS_SERVICES_STREET_PREV_NOT_FOUND_2,
    PROCESS_SERVICES_STREET_NEXT_FOUND_2,
    PROCESS_SERVICES_STREET_NEXT_NOT_FOUND_2,
    PROCESS_SERVICES_HOUSE_FOUND_2,
    PROCESS_SERVICES_BUILD_FOUND_2,
    PROCESS_SERVICES_FLAT_FOUND_2,
    PROCESS_COUNTRY_NOT_3,
    PROCESS_COUNTRY_3,
    PROCESS_REGION_DISTRICT_4,
    PROCESS_HOUSE_BUILD_FLAT_5,
    PROCESS_STREET_ONLY_6,
    PROCESS_REST_CITY_STREET_PREV_7,
    PROCESS_REST_CITY_STREET_NEXT_7,
    PROCESS_CITY_STREET_WITH_PREV_AND_NEXT_8,
    PROCESS_INDEX_85_1,
    PROCESS_INDEX_85_MANY,
    PROCESS_INDEX_85_PASS,
    PROCESS_EMPTY_REGION
public class GenericEvent<T> implements IEvent<T>
    private IEventHandler<T> _handler;
    private IEventHandler<IEventHandler<T>> _onHandlerStateChanged;
    public GenericEvent(IEventHandler<T> handler)
    {
        _handler = handler;
    }
    public GenericEvent()
    {
    }
    public void invoke(Object sender, IEventHandlerArgs<T> arg)
    {
        if (_handler != null)
            _handler.invoke(sender, arg);
    }
    public void setEventHandler(IEventHandler<T> handler)
    {
        _handler = handler;
        triggerEventHandlerChanged(_handler);
    }
    public IEventHandler<T> removeEventHandler()
    {
        IEventHandler<T> hand = _handler;
        _handler = null;
        triggerEventHandlerChanged(_handler);
        return hand;
    }
    @Override
    public void setOnEventHandlerChanged(IEventHandler<IEventHandler<T>> handler)
    {
        _onHandlerStateChanged = handler;
    }
    private void triggerEventHandlerChanged(IEventHandler<T> handler)
    {
  
/**
 * @author riste.jovanoski
 * @since 6/20/2017
 */
@ApplicationScoped
public class ServiceEntityServiceImpl implements ServiceEntityService {
    @Inject
    private ServiceEntityRepository serviceEntityRepository;
    @Override
    public ServiceEntity findById(Long id) {
        return serviceEntityRepository.findById(id);
    }
    @Override
    public ServiceEntity findByServiceId(String serviceId) {
        return serviceEntityRepository.findByServiceId(serviceId);
    }
    @Override
    public List<ServiceEntity> findAll() {
        return serviceEntityRepository.list();
    }
    @Override
    public void save(String serviceId, String serviceHost, String secondaryServiceHost, String healthCheck) {
        serviceEntityRepository.save(new ServiceEntity(serviceId, serviceHost, secondaryServiceHost, healthCheck));
    }
    @Override
    public void update(Long id, String serviceId, String serviceHost, String secondaryServiceHost, String healthCheck) {
        ServiceEntity se

        serviceEntity.setServiceId(serviceId);
        serviceEntity.setServiceHost(serviceHost);
        serviceEntity.setHealthCheck(healthCheck);
        serviceEntityRepository.update(serviceEntity);
    }
    @Override
    public void delete(Long id) {
        serviceEntityRepository.delete(serviceEntityRepository.findById(id));
    }
    @Override
    public void notifyForRegistration(String... parameters) {
        String serviceId = parameters[0];
        if (!checkIfServiceWithServiceIdExists(serviceId)) {
            serviceEntityRepository.save(new ServiceEntity(serviceId, parameters[1], parameters[3], parameters[2]));
        }
    }
    @Override
    public void notifyForDeregistration(String... parameters) {
        serviceEntityRepository.delete(serviceEntityRepository.findByServiceId(parameters[0]));
    }
    private boolean checkIfServiceWithServiceIdExists(String serviceId) {
        ServiceEntity serviceEntity = serviceEntityRepository.findByServiceId(serviceId);
 
/**
 * @Class Name : BkmkMenuManageDAO.java
 * @Description : 바로가기메뉴를 관리하는 서비스를 정의하기위한 데이터 접근 클래스
 * @Modification Information
 *
 *    수정일       수정자         수정내용
 *    -------        -------     -------------------
 *    2009. 9. 25.     윤성록
 *
 * @author 공통 컴포넌트 개발팀 윤성록
 * @since 2009. 9. 25.
 * @version
 * @see
 *
 */
@Repository("bkmkMenuManageDAO")
public class BkmkMenuManageDAO extends EgovComAbstractDAO{
    
    /**
     * 바로가기메뉴관리 정보를 삭제한다.
     * 
     * @param BkmkMenuManage
     * @return
     * @throws Exception
     */
    public void deleteBkmkMenuManage(BkmkMenuManage bkmkMenuManage) throws Exception {
        delete("BkmkMenuManageDAO.deleteBkmkMenuManage", bkmkMenuManage);
    }
    
    /**
     * 바로가기메뉴관리 정보를 등록한다.
     * 
     * @param BkmkMenuManage
     * @return
     * @throws Exception
     */
    public void insertBkmkMenuManage(BkmkMenuManage bkmkMenuManage) throws Exception {
        insert("BkmkMenuManageDAO.insertBkmkMenuManage", bkmkMenuManage);
    }
   

    /**
     * 바로가기메뉴관리 정보를 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public BkmkMenuManageVO selectBkmkMenuManageResult(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        BkmkMenuManageVO vo = new BkmkMenuManageVO();
        vo = (BkmkMenuManageVO)selectByPk("BkmkMenuManageDAO.selectBkmkMenuManage", bkmkMenuManageVO);
        return vo;
    }
    /**
     * 조건에 맞는 바로가기메뉴관리 정보 목록을 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public List<BkmkMenuManageVO> selectBkmkMenuManageList(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        return list("BkmkMenuManageDAO.selectBkmkMenuManageList", bkmkMenuManageVO);
    }    
    
    /**
     * 조건에 맞는 바로가기메뉴관리 정보 목록의 건수를 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public int selectBkmkMenuManageListCnt(BkmkMenuManageVO bkmkMenuManageVO) throws

        return (Integer)getSqlMapClientTemplate().queryForObject("BkmkMenuManageDAO.selectBkmkMenuManageListCnt", bkmkMenuManageVO);
    }
    
    /**
     * 등록할  메뉴정보 목록을 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public List<BkmkMenuManageVO> selectBkmkMenuList(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        return list("BkmkMenuManageDAO.selectBkmkMenuList", bkmkMenuManageVO);
    }    
    /**
     * 등록할  메뉴정보 목록의 건수를 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public int selectBkmkMenuListCnt(BkmkMenuManageVO bkmkMenuManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("BkmkMenuManageDAO.selectBkmkMenuListCnt", bkmkMenuManageVO);
    }
    
    /**
     * 미리보기를 할 바로가기메뉴관리의 목록을 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public List<MenuManageVO> selectBkmk
/**
 * @Project Meituan
 * @Name ProcessUtil
 * @User Slbw
 * @Time 2015-1-28 下午3:23:40
 * @Version 1.0
 * @describe 
 */
/**
 * @author F
 *
 */
public class ProcessUtil {
	private static ProcessUtil processUtil;
	private HttpSession session;
	private HashMap<String,ProcessStatus> map;
	private ProcessUtil(HttpSession session)
	{
		map=new HashMap<String, ProcessStatus>();
		this.session=session;
	}
	public static ProcessUtil newInstance(HttpSession session)
	{
		if(processUtil==null)
		{
			processUtil=new ProcessUtil(session);
		}
		return processUtil;
	}
	public void setProcess(String cityId,String process,String status)
	{
		XLog.d(status+" "+process);
		ProcessStatus processStatus=new ProcessStatus();
		processStatus.setProcess(process);
		processStatus.setStatus(status);
		if(map.containsKey(cityId))
		{
			map.remove(cityId);
			map.put(cityId,processStatus);
		}
		else
		{
			map.put(cityId,processStatus);
		}
		if(session!=null)
		{
			session.setAttribute("updateStatus",map)
/**
 * 롤관리에 대한 Vo 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  이문준          최초 생성
 *
 * </pre>
 */
public class RoleManageVO extends RoleManage {
	/**
	 * serialVersionUID
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * 롤 목록
	 */	
	List <RoleManageVO> roleManageList;
	/**
	 * 삭제대상 목록
	 */		
    String[] delYn;
	/**
	 * roleManageList attribute 를 리턴한다.
	 * @return List<RoleManageVO>
	 */
	public List<RoleManageVO> getRoleManageList() {
		return roleManageList;
	}
	/**
	 * roleManageList attribute 값을 설정한다.
	 * @param roleManageList List<RoleManageVO> 
	 */
	public void setRoleManageList(List<RoleManageVO> roleManageList) {
		this.roleManageList = roleManageList;
	}
	/**
	 * delYn attribute 를 리턴한다.
	 * @return String[]
	 */
	public String[] getDelYn() {
		return delYn;
	}
	/**

/**
 * Copyright (c) 2009 Aurora Software Technology Studio. All rights reserved.
 */
/**
 * <p> </p>
 *
 * @author $Author$
 * @version $Id$
 */
public interface ProcessManager {
	/**
	 * @param stream the input stream
	 * @throws ProcessException if fail to install definition file
	 */
	void install(InputStream stream) throws ProcessException;
	/**
	 * @param resource the resource file of definition
	 * @throws ProcessException if fail to install definition file
	 */
	void install(String resource) throws ProcessException;
	/**
	 * @param name the process name
	 * @return the new process
	 */
	Process createProcess(final String name);
	/**
	 * @param id the process id
	 * @return the active process or <code>null</code> if does not exist
	 * @exception ProcessException if fail to load process
	 */
	Process getActiveProcess(Long id) throws ProcessException;
	/**
	 * @param name the process name
	 * @return all active processes
	 * @exception ProcessException if fail to load processes
	 
/**
 * 개요
 * - 팝업창에 대한 ServiceImpl을 정의한다.
 *
 * 상세내용
 * - 팝업창에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 팝업창의 조회기능은 목록조회, 상세조회로, 사용자화면 보기로 구분된다.
 * @author 이창원
 * @version 1.0
 * @created 05-8-2009 오후 2:19:58
 */
@Service("egovPopupManageService")
public class EgovPopupManageServiceImpl extends EgovAbstractServiceImpl implements EgovPopupManageService {
	@Resource(name = "popupManageDAO")
	public PopupManageDAO dao;
	@Resource(name = "egovPopupManageIdGnrService")
	private EgovIdGnrService idgenService;
	public EgovPopupManageServiceImpl() {
	}
	/**
	 * 기 등록된 팝업창정보를 삭제한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 *
	 * @param popupManage
	 */
	@Override
	public void deletePopup(PopupManageVO popupManageVO) throws Exception {
		dao.deletePopup(popupManageVO);
	}
	/**
	 * 팝업창정보를 신규로 등록한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 *
	 * @param popupManage
	 */
	@Override
	public void insertPopup(PopupManageVO popupManageVO) throws Exception {

		String sMakeId = idgenService.getNextStringId();
		popupManageVO.setPopupId(sMakeId);
		dao.insertPopup(popupManageVO);
	}
	/**
	 * 기 등록된 팝업창정보를 수정한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 *
	 * @param popupManage
	 */
	@Override
	public void updatePopup(PopupManageVO popupManageVO) throws Exception {
		dao.updatePopup(popupManageVO);
	}
	/**
	 * 팝업창을 사용자 화면에서 볼수 있는 정보들을 조회한다.
	 * @param popupManageVO - 팝업창 Vo
	 * @return popupManageVO - 팝업창 Vo
	 *
	 * @param popupManageVO
	 */
	@Override
	public PopupManageVO selectPopup(PopupManageVO popupManageVO) throws Exception {
		return dao.selectPopup(popupManageVO);
	}
	/**
	 * 팝업창를 관리하기 위해 등록된 팝업창목록을 조회한다.
	 * @param popupManageVO - 팝업창 Vo
	 * @return List - 팝업창 목록
	 *
	 * @param popupManageVO
	 */
	@Override
	public List<?> selectPopupList(PopupManageVO popupManageVO) throws Exception {
		return dao.selectPopupList(popupManageVO);
	}
	/**
	 * 팝업창를 관리하기 위해 등록된 팝업창목록을 조회한다.
	 * @param popupManageVO - 팝업창 Vo
	 *
/**
 * 바로가기메뉴관리 정보를 관리하기 위한 서비스 인터페이스 클래스
 * @author 공통컴포넌트팀 윤성록
 * @since 2009.09.25
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.9.25  윤성록          최초 생성
 *
 * </pre>
 */
public interface EgovBkmkMenuManageservice {
    /**
     * 바로가기메뉴관리 정보를 삭제한다.
     * @param BkmkMenuManage
     * @return
     * @exception Exception
     */
    public void deleteBkmkMenuManage(BkmkMenuManage BkmkMenuManage) throws Exception ;
    /**
     * 바로가기메뉴관리 정보를 등록한다.
     * @param BkmkMenuManage
     * @return
     * @exception Exception
     */
    public void insertBkmkMenuManage(BkmkMenuManage bkmkMenuManage)throws Exception ;
    /**
     * 바로가기메뉴관리 정보의 전체목록을 조회한다.
     * @param BkmkMenuManage
     * @return  Map<String, Object>
     * @exception Exception
     */
    public Map<String, Object> selectBkmkMenuManageList(BkmkMenuManageVO bkmkMenuManageVO) throws Exception 
/**
 * 개요
 * - 휴가관리에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - 휴가관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 휴가관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Repository("vcatnManageDAO")
public class VcatnManageDAO extends EgovComAbstractDAO {
	/**
	 * 휴가관리정보를 관리하기 위해 등록된 휴가관리 목록을 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return List - 휴가관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<VcatnManageVO> selectVcatnManageList(VcatnManageVO vcatnManageVO) throws Exception {
		return list("vcatnManageDAO.selectVcatnManageList", vcatnManageVO);
	}
    /**
	 * 휴가관리목록 총 갯수를 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectVcatnManageListTotCnt(VcatnManageVO vcatnManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("vcatnManageDAO.selectVcatnManageListTotCnt", vcatnManageVO);
    }
	/**
	 * 등록된 휴가관리의 상세정보를 조회한다.
	 * @param vcatnManageVO - 휴가관리 V

	 * @return VcatnManageVO - 휴가관리 VO
	 */
	public VcatnManageVO selectVcatnManage(VcatnManageVO vcatnManageVO)  throws Exception {
		return (VcatnManageVO) selectByPk("vcatnManageDAO.selectVcatnManage", vcatnManageVO);
	}
	/**
	 * 휴가관리정보를 신규로 등록한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public void insertVcatnManage(VcatnManage vcatnManage) throws Exception {
		insert("vcatnManageDAO.insertVcatnManage", vcatnManage);
	}
	/**
	 * 기 등록된 휴가관리정보를 수정한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public void updtVcatnManage(VcatnManage vcatnManage) throws Exception {
		update("vcatnManageDAO.updateVcatnManage", vcatnManage);
	}
	/**
	 * 기 등록된 휴가관리정보를 삭제한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public void deleteVcatnManage(VcatnManage vcatnManage) throws Exception {
        delete("vcatnManageDAO.deleteVcatnManage",vcatnManage);
	}
    /**
	 * 휴가일자 중복여부 체크
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectVcatnManageDplctAt(VcatnManag

        return (Integer)getSqlMapClientTemplate().queryForObject("vcatnManageDAO.selectVcatnManageDplctAt", vcatnManageVO);
    }
    /*** 승인관련 ***/	
	/**
	 * 휴가관리정보 승인 처리를 위해 신청된 휴가관리 목록을 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return List - 휴가관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<VcatnManageVO> selectVcatnManageConfmList(VcatnManageVO vcatnManageVO) throws Exception {
		return list("vcatnManageDAO.selectVcatnManageConfmList", vcatnManageVO);
	}
    /**
	 * 휴가관리정보 승인 처리를 위해 신청된 휴가관리 목록 총 갯수를 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectVcatnManageConfmListTotCnt(VcatnManageVO vcatnManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("vcatnManageDAO.selectVcatnManageConfmListTotCnt", vcatnManageVO);
    }
	/**
	 * 신청된 휴가를 승인처리한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public void updtVcatnManageConfm(VcatnManage vcatnManage) throws Exception {
		update("vc
public class DefaultHandlerRegistryTest {
    private static interface HandlerInterface {}
    private static class A {}
    private static class B {}
    private static class C extends B {}
    private static class D extends B {}
    private HandlerRegistry<Class<?>, HandlerInterface> handlerRegistry;
    @Before
    public void setup(){
    }
    @Test(expected=IllegalArgumentException.class)
    public void shouldNotCreateWithNullHandlerLookupStrategy()
    {
        new DefaultHandlerRegistry<Class<?>, HandlerInterface>(null);
    }
    @Test(expected=IllegalArgumentException.class)
    public void findHandlerShouldNotAllowNullClass() {
        handlerRegistry = HandlerRegistries.typeHandlerRegistry(ImmutableMap.<Class<?>, HandlerInterface>of());
        handlerRegistry.findHandlerFor(null);
    }
    @Test(expected=IllegalArgumentException.class)
    public void addHandlerShouldNotAllowNullClass() {
        HandlerRegistries
            .typeHandlerRegistry(HandlerInterface.class)

            .addHandler(null, anyHandler());
    }
    @Test(expected=IllegalArgumentException.class)
    public void addHandlerShouldNotAllowNullHandler() {
        HandlerRegistries
            .typeHandlerRegistry(HandlerInterface.class)
            .addHandler(A.class, null);
    }
    @Test(expected=IllegalArgumentException.class)
    public void addHandlerForSeveralClassesShouldNotAllowNullHandler() {
        HandlerRegistries
            .typeHandlerRegistry(HandlerInterface.class)
            .addHandlerForSeveralKeys(ImmutableSet.of(A.class), null);
    }
    private HandlerInterface anyHandler()
    {
        return mock(HandlerInterface.class);
    }
    @Test
    public void shouldFindHandler() {
        HandlerInterface aHandler = mock(HandlerInterface.class);
        HandlerInterface bHandler = mock(HandlerInterface.class);
        HandlerRegistry<Class<?>, HandlerInterface> handlerRegistry =
            HandlerRegistries
                .typeHandlerRegistry(HandlerInter

                .addHandler(A.class, aHandler)
                .addHandler(B.class, bHandler)
                .buildTypeRegistry();
        Assert.assertSame(handlerRegistry.findHandlerFor(A.class), aHandler);
        Assert.assertSame(handlerRegistry.findHandlerFor(B.class), bHandler);
    }
    @Test
    public void shouldThrowExceptionWhenHandlerNotFound() {
        HandlerRegistry<Class<?>, HandlerInterface> handlerRegistry =
            HandlerRegistries
                .typeHandlerRegistry(HandlerInterface.class)
                .buildTypeRegistry();
        try {
            handlerRegistry.findHandlerFor(A.class);
        } catch(NoMatchingHandlerFoundException e) {
            Assert.assertEquals(e.getKey(), A.class);
        }
    }
    @Test
    public void shouldFindHandlerAddedForSeveralClasses() {
        HandlerInterface aHandler = mock(HandlerInterface.class);
        HandlerInterface bHandler = mock(HandlerInterface.class);
        HandlerRegistry<Class<?>, HandlerInt

            HandlerRegistries
                .typeHandlerRegistry(HandlerInterface.class)
                .addHandlerForSeveralKeys(ImmutableSet.of(A.class, C.class), aHandler)
                .addHandler(B.class, bHandler)
                .buildTypeRegistry();
        Assert.assertSame(handlerRegistry.findHandlerFor(A.class), aHandler) ;
        Assert.assertSame(handlerRegistry.findHandlerFor(C.class), aHandler) ;
        Assert.assertSame(handlerRegistry.findHandlerFor(B.class), bHandler) ;
    }
    @Test
    public void shouldFindMostSpecificHandler() {
        HandlerInterface aHandler = mock(HandlerInterface.class);
        HandlerInterface bHandler = mock(HandlerInterface.class);
        HandlerInterface cHandler = mock(HandlerInterface.class);
        HandlerInterface dHandler = mock(HandlerInterface.class);
        HandlerRegistry<Class<?>, HandlerInterface> handlerRegistry =
            HandlerRegistries
                .typeHandlerRegistry(HandlerInterface.class)
        
/*
 * Licensed to the Sakai Foundation (SF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The SF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
public class JcrProcessInstanceManager implements ProcessInstanceManager {
  private static final Logger LOGGER = LoggerFactory
      .getLogger(JcrProcessInstanceManager.class);
  private WorkingMemory workingMemory;
  private transient Map<Long, ProcessInst

  private Session session;
  /**
   * 
   */
  public JcrProcessInstanceManager(WorkingMemory workingMemory) {
    this.workingMemory = workingMemory;
    session = (Session) this.workingMemory.getEnvironment().get(
        WorkflowConstants.SESSION_IDENTIFIER);
  }
  public void addProcessInstance(ProcessInstance processInstance) {
    try {
      ProcessInstanceInfo processInstanceInfo = new ProcessInstanceInfo(session,
          processInstance);
      processInstanceInfo.save();
      processInstance = (ProcessInstance) processInstanceInfo
          .getProcessInstance(workingMemory);
      processInstanceInfo.getProcessInstance(workingMemory);
      processInstanceInfo.updateLastReadDate();
      internalAddProcessInstance(processInstance);
    } catch (Exception e) {
      LOGGER.info("failed to add process instance " + processInstance, e);
      throw new RuntimeException("failed to add process instance " + processInstance, e);
    }
  }
  public void internalAddProcessInstance

    if (this.processInstances == null) {
      this.processInstances = new HashMap<Long, ProcessInstance>();
    }
    processInstances.put(processInstance.getId(), processInstance);
  }
  public ProcessInstance getProcessInstance(long id) {
    ProcessInstance processInstance = null;
    if (this.processInstances != null) {
      processInstance = this.processInstances.get(id);
      if (processInstance != null) {
        return processInstance;
      }
    }
    try {
      ProcessInstanceInfo processInstanceInfo = new ProcessInstanceInfo(session, id);
      processInstanceInfo.updateLastReadDate();
      processInstance = (ProcessInstance) processInstanceInfo
          .getProcessInstance(workingMemory);
      Process process = ((InternalRuleBase) workingMemory.getRuleBase())
          .getProcess(processInstance.getProcessId());
      if (process == null) {
        throw new IllegalArgumentException("Could not find process "
            + processInstance.getProcessId());
      }
 

      if (processInstance.getWorkingMemory() == null) {
        processInstance.setWorkingMemory((InternalWorkingMemory) workingMemory);
        ((ProcessInstanceImpl) processInstance).reconnect();
      }
      return processInstance;
    } catch (Exception e) {
      LOGGER.info("Could Not find process " + id, e);
      throw new IllegalArgumentException("Could Not find process " + id, e);
    }
  }
  public Collection<ProcessInstance> getProcessInstances() {
    return new ArrayList<ProcessInstance>();
  }
  public void removeProcessInstance(ProcessInstance processInstance) {
    try {
      ProcessInstanceInfo processInstanceInfo = new ProcessInstanceInfo(session,
          processInstance);
      processInstanceInfo.remove();
      internalRemoveProcessInstance(processInstance);
    } catch (Exception e) {
      LOGGER.info("Could Not remove process " + processInstance, e);
      throw new IllegalArgumentException("Could Not remove process " + processInstance, e);
    }
  }
  pub
public class ServiceFactory {
    private static final IUtilService utilService = new UtilService();
    public static IUtilService getUtilService() {
        return utilService;
    }
    private static final IConcessionariaService concessionariaService = new ConcessionariaService();
    public static IConcessionariaService getConcessionariaService() {
        return concessionariaService;
    }
    private static final IEmpreiteiraService empreiteiraService = new EmpreiteiraService();
    public static IEmpreiteiraService getEmpreiteiraService() {
        return empreiteiraService;
    }
    private static final IEmpresaUsuarioService empresaUsuarioService = new EmpresaUsuarioService();
    public static IEmpresaUsuarioService getEmpresaUsuarioService() {
        return empresaUsuarioService;
    }
    private static final IEntregaService entregaService = new EntregaService();
    public static IEntregaService getEntregaService() {
        return entregaService;
    }
    private sta

    public static IErroService getErroService() {
        return erroService;
    }
    public static IImportacaoService getImportacaoService() {
    }
    private static final ILeituristaService leituristaService = new LeituristaService();
    public static ILeituristaService getLeituristaService() {
        return leituristaService;
    }
    private static final ILocalidadeService localidadeService = new LocalidadeService();
    public static ILocalidadeService getLocalidadeService() {
        return localidadeService;
    }
    private static final IOcorrenciaService ocorrenciaService = new OcorrenciaService();
    public static IOcorrenciaService getOcorrenciaService() {
        return ocorrenciaService;
    }
    private static final IReclamacaoService reclamacaoService = new ReclamacaoService();
    public static IReclamacaoService getReclamacaoService() {
        return reclamacaoService;
    }
    private static final IReferenciaLivroService referenciaLivroService = new Refer

    public static IReferenciaLivroService getReferenciaLivroService() {
        return referenciaLivroService;
    }
    private static final IRetornoService retornoService = new RetornoService();
    public static IRetornoService getRetornoService() {
        return retornoService;
    }
    private static final IServicoService servicoService = new ServicoService();
    public static IServicoService getServicoService() {
        return servicoService;
    }
    private static final ISituacaoService situacaoService = new SituacaoService();
    public static ISituacaoService getSituacaoService() {
        return situacaoService;
    }
    private static final ITipoLocalidadeService tipoLocalidadeService = new TipoLocalidadeService();
    public static ITipoLocalidadeService getTipoLocalidadeService() {
        return tipoLocalidadeService;
    }
    private static final IUsuarioService usuarioService = new UsuarioService();
    public static IUsuarioService getUsuarioService() {
      
public class Main {
	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				GameService gameService = new GameService();
				SubscriptionService subscriptionService = new SubscriptionService();
				ClientService clientService = new ClientService();
				SubscriptionGameService subscriptionGameService = new SubscriptionGameService();
				
				ManageGameGUIController manageGameGUIController = new ManageGameGUIController(gameService);
				ManageSubscriptionGUIController manageSubscriptionGUIController = new ManageSubscriptionGUIController(subscriptionService);
				ManageSubscriptionGameGUIController manageClientGUIController = new ManageSubscriptionGameGUIController(clientService, subscriptionGameService);
				
				ManageGameGUI manageGameGUI = new ManageGameGUI(manageGameGUIController);
				manageGameGUI.setSubscriptionController(manageSubscriptionGUIController);
				manageGameGUI.setClientController(manageClientGUIController);
		
/**
 * 
 */
/**
 * Persistence service for CERIF 2nd Level Entities.
 * 
 */
@Component
public class SecondPersistenceService {
	/**
	 * The citation repository.
	 */
	@Autowired
	private CitationRepository citationRepository;
	/**
	 * The country repository.
	 */
	@Autowired
	private CountryRepository countryRepository;
	/**
	 * The currency repository.
	 */
	@Autowired
	private CurrencyRepository currencyRepository;
	/**
	 * The curriculum vitae repository.
	 */
	@Autowired
	private CurriculumVitaeRepository curriculumVitaeRepository;
	/**
	 * The electronic address repository.
	 */
	@Autowired
	private ElectronicAddressRepository electronicAddressRepository;
	/**
	 * The event repository.
	 */
	@Autowired
	private EventRepository eventRepository;
	/**
	 * The expertise and skills repository.
	 */
	@Autowired
	private ExpertiseAndSkillsRepository expertiseAndSkillsRepository;
	/**
	 * The federated identifier repository.
	 */
	@Autowired
	private FederatedIdentifierRepository federat

	/**
	 * The funding repository.
	 */
	@Autowired
	private FundingRepository fundingRepository;
	/**
	 * The geographic bounding box repository.
	 */
	@Autowired
	private GeographicBoundingBoxRepository geographicBoundingBoxRepository;
	/**
	 * The indicator repository.
	 */
	@Autowired
	private IndicatorRepository indicatorRepository;
	/**
	 * The language repository.
	 */
	@Autowired
	private LanguageRepository languageRepository;
	/**
	 * The measurement repository.
	 */
	@Autowired
	private MeasurementRepository measurementRepository;
	/**
	 * The medium repository.
	 */
	@Autowired
	private MediumRepository mediumRepository;
	/**
	 * The metrics repository.
	 */
	@Autowired
	private MetricsRepository metricsRepository;
	/**
	 * The postal address repository.
	 */
	@Autowired
	private PostalAddressRepository postalAddressRepository;
	/**
	 * The prize repository.
	 */
	@Autowired
	private PrizeRepository prizeRepository;
	/**
	 * The qualification repository.
	 */
	@Autowired
	pri

	/**
	 * Service for links between federated identifiers and services.
	 */
	@Autowired
	private LinkServiceFederatedIdentifierRepository serviceFederatedIdentifierRepository;
	/**
	 * Service for links between federated identifiers and classes.
	 */
	@Autowired
	private LinkFederatedIdentifierClassRepository federatedIdentifierClassRepository;
	/**
	 * Retrieves the federated identifiers of an entity, including the class and service links.
	 * @param uuidType The entity type UUID.
	 * @param instanceId The entity id.
	 * @return a list of federated identifiers.
	 */
	public List<FederatedIdentifier> getFederatedIdentifiersForEntity(String uuidType, Long instanceId) {
		List<FederatedIdentifier> fedIds = getFederatedIdentifierRepository().findFedIdByClassUuidAndInstId(uuidType, instanceId);
		for (FederatedIdentifier fedId: fedIds) {
			List<FederatedIdentifier_Class> federatedIdentifierClasses = federatedIdentifierClassRepository.findByFederatedIdentifier(fedId);
			Set<FederatedIden

			fedId.setFederatedIdentifiers_classes(fedClasses);
				
			List<Service_FederatedIdentifier> federatedIdentifierServices = serviceFederatedIdentifierRepository.findByFederatedIdentifier(fedId);
			Set<Service_FederatedIdentifier> fedServices = new HashSet<Service_FederatedIdentifier>(federatedIdentifierServices);
			fedId.setServices_federatedIdentifiers(fedServices);
		}
		return fedIds;
	}
	/**
	 * @return the citationRepository
	 */
	public CitationRepository getCitationRepository() {
		return citationRepository;
	}
	/**
	 * @return the countryRepository
	 */
	public CountryRepository getCountryRepository() {
		return countryRepository;
	}
	/**
	 * @return the currencyRepository
	 */
	public CurrencyRepository getCurrencyRepository() {
		return currencyRepository;
	}
	/**
	 * @return the curriculumVitaeRepository
	 */
	public CurriculumVitaeRepository getCurriculumVitaeRepository() {
		return curriculumVitaeRepository;
	}
	/**
	 * @return the serviceFederatedIdentifierRepository

	 */
	public LinkServiceFederatedIdentifierRepository getServiceFederatedIdentifierRepository() {
		return serviceFederatedIdentifierRepository;
	}
	/**
	 * @return the federatedIdentifierClassRepository
	 */
	public LinkFederatedIdentifierClassRepository getFederatedIdentifierClassRepository() {
		return federatedIdentifierClassRepository;
	}
	/**
	 * @return the electronicRepository
	 */
	public ElectronicAddressRepository getElectronicAddressRepository() {
		return electronicAddressRepository;
	}
	/**
	 * @return the eventRepository
	 */
	public EventRepository getEventRepository() {
		return eventRepository;
	}
	/**
	 * @return the expertiseAndSkillsRepository
	 */
	public ExpertiseAndSkillsRepository getExpertiseAndSkillsRepository() {
		return expertiseAndSkillsRepository;
	}
	public FederatedIdentifierRepository getFederatedIdentifierRepository() {
		return federatedIdentifierRepository;
	}
	/**
	 * @return the fundingRepository
	 */
	public FundingRepository getFundingReposito

		return fundingRepository;
	}
	/**
	 * @return the geographicBoundingBoxRepository
	 */
	public GeographicBoundingBoxRepository getGeographicBoundingBoxRepository() {
		return geographicBoundingBoxRepository;
	}
	/**
	 * @return the indicatorRepository
	 */
	public IndicatorRepository getIndicatorRepository() {
		return indicatorRepository;
	}
	/**
	 * @return the languageRepository
	 */
	public LanguageRepository getLanguageRepository() {
		return languageRepository;
	}
	/**
	 * @return the measurementRepository
	 */
	public MeasurementRepository getMeasurementRepository() {
		return measurementRepository;
	}
	/**
	 * @return the mediumRepository
	 */
	public MediumRepository getMediumRepository() {
		return mediumRepository;
	}
	/**
	 * @return the metricsRepository
	 */
	public MetricsRepository getMetricsRepository() {
		return metricsRepository;
	}
	/**
	 * @return the postalRepository
	 */
	public PostalAddressRepository getPostalAddressRepository() {
		return postalAddressRepo
public class ProcessInstanceMonitorPanel {
	ProcessInstanceNavigator processInstanceNavigator; 
		public ProcessInstanceNavigator getProcessInstanceNavigator() {
			return processInstanceNavigator;
		}
		public void setProcessInstanceNavigator(
				ProcessInstanceNavigator processInstanceNavigator) {
			this.processInstanceNavigator = processInstanceNavigator;
		}
		
	ProcessInstanceMonitor processInstanceMonitor;	
		public ProcessInstanceMonitor getProcessInstanceMonitor() {
			return processInstanceMonitor;
		}
		public void setProcessInstanceMonitor(
				ProcessInstanceMonitor processInstanceMonitor) {
			this.processInstanceMonitor = processInstanceMonitor;
		}
		
	@AutowiredFromClient
	public Session session;
		
	Layout lay;
		
	public Layout getLay() {
		return lay;
	}
	public void setLay(Layout lay) {
		this.lay = lay;
	}
	public void load(String instanceId)
			throws Exception {
		
		
		processInstanceMonitor = new ProcessInstanceMonitor();
		processInstanceMonitor.setInstanceI
public class HudHandler {
    private ShotsHandler shotsHandler;
    private ScoreHandler scoreHandler;
    private EnemyHandler enemyHandler;
    private PlayerHandler playerHandler;
    private HudTextHandler hudTextHandler;
    private HudVisualHandler hudVisualHandler;
    public HudHandler(ScoreHandler scoreHandler,
                      ShotsHandler shotsHandler,
                      EnemyHandler enemyHandler,
                      PlayerHandler playerHandler,
                      TextureHandler textureHandler) {
        hudTextHandler = new HudTextHandler();
        hudVisualHandler = new HudVisualHandler(textureHandler);
        this.scoreHandler = scoreHandler;
        this.shotsHandler = shotsHandler;
        this.enemyHandler = enemyHandler;
        this.playerHandler = playerHandler;
    }
    public void drawHud() {
        hudTextHandler.drawShotsRemaining(shotsHandler.getShotsRemaining());
        hudTextHandler.drawPoints(scoreHandler.getPoints());
        hudTextHand
/**
 * Process Details DTO class for containing process related details
 * 
 * @author Shirish Singh
 */
public class ProcessDetailsDTO {
    private String processId;
    private String processDescription;
    private List<String> processVariables;
    /**
     * @return processId
     */
    public String getProcessId() {
        return processId;
    }
    
    /**
     * @param processId
     */
    public void setProcessId(String processId) {
        this.processId = processId;
    }
    /**
     * @return processDescription
     */
    public String getProcessDescription() {
        return processDescription;
    }
    /**
     * @param processDescription
     */
    public void setProcessDescription(String processDescription) {
        this.processDescription = processDescription;
    }
    
    /**
     * @return processVariables
     */
    public List<String> getProcessVariables() {
        return processVariables;
    }
    
    /**
     * @param processVariables
     */
   
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
/**
 * @author Adolfo Pérez
 */
public class DefaultCapabilityRegistry
	extends BaseCapabilityProvider
	implements CapabilityRegistry<DocumentRepository>, CapabilityProvider {
	public DefaultCapabilityRegistry(DocumentRepository documentRepository) {
		_documentRepository = documentRepository;
	}
	@Override
	public <S extends Capability> void addExportedCapability(
		Class<S> capabilityClass, S capability

		super.addExportedCapability(capabilityClass, capability);
	}
	@Override
	public <S extends Capability> void addSupportedCapability(
		Class<S> capabilityClass, S capability) {
		super.addSupportedCapability(capabilityClass, capability);
	}
	@Override
	public DocumentRepository getTarget() {
		return _documentRepository;
	}
	public LocalRepository invokeCapabilityWrappers(
		LocalRepository localRepository) {
		Map<Class<? extends Capability>, Capability> capabilities =
			getCapabilities();
		for (Capability capability : capabilities.values()) {
			if (capability instanceof RepositoryWrapperAware) {
				RepositoryWrapperAware repositoryWrapperAware =
					(RepositoryWrapperAware)capability;
				localRepository = repositoryWrapperAware.wrapLocalRepository(
					localRepository);
			}
		}
		return localRepository;
	}
	public Repository invokeCapabilityWrappers(Repository repository) {
		Map<Class<? extends Capability>, Capability> capabilities =
			getCapabilities();
		for (Capability
/**
 * User: chjp
 * Date: 11-10-11
 * Time: 下午4:10
 */
public class ManagerService {
    private ManageUserDAO manageUserDAO;
    private ManageNodeDAO manageNodeDAO;
    private ManageChannelDAO manageChannelDAO;
    public void setManageUserDAO(ManageUserDAO manageUserDAO) {
        this.manageUserDAO = manageUserDAO;
    }
    public void setManageNodeDAO(ManageNodeDAO manageNodeDAO) {
        this.manageNodeDAO = manageNodeDAO;
    }
    public void setManageChannelDAO(ManageChannelDAO manageChannelDAO) {
        this.manageChannelDAO = manageChannelDAO;
    }
    public ManageUser getManageUser(String username, String password) {
        return manageUserDAO.getManageUser(username, password);
    }
    public List<ManageChannel> getManageChannels() {
        return manageChannelDAO.getManageChannels();
    }
    public List<ManageUser> getManageUsers() {
        return manageUserDAO.getManageUsers();
    }
    public ManageUser getManageUser(long manage_id) {
        return manag
/*******************************************************************************
 * Copyright (c) 2010-2011 Sonatype, Inc.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 *******************************************************************************/
/**
 * Thrown in case of an unsupported local repository type.
 */
public class NoLocalRepositoryManagerException
    extends RepositoryException
    private final LocalRepository repository;
    public NoLocalRepositoryManagerException( LocalRepository repository )
    {
        this( repository, toMessage( repository ) );
    }
    public NoLocalRepositoryManagerException( LocalRepository repository, String message )
    {
        super( message );
        this.repository = repository;
    }
    public NoLocalRepositoryManagerException( LocalRepository repository, Throwable cause )
   
/**
 * RSS태그관리를 처리하는 ServiceImpl Class 구현
 * @author 공통서비스 장동한
 * @since 2010.06.16
 * @version 1.0
 * @see <pre>
 * &lt;&lt; 개정이력(Modification Information) &gt;&gt;
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.07.03  장동한          최초 생성
 * 
 * </pre>
 */
@Service("egovRssManageService")
public class EgovRssTagManageServiceImpl extends AbstractServiceImpl 
        implements EgovRssTagManageService {
	/* RSS관리 DAO */
    @Resource(name = "rssManageDao")
    private RssTagManageDao dao;
    /* RSS ID Generator Service */
    @Resource(name = "egovRssTagManageIdGnrService")
    private EgovIdGnrService idgenService;
    /**
     * JDBC 테이블 목록을조회한다.
     * @return List -조회한목록이담긴List
     * @throws Exception
     */
    public List selectRssTagManageTableList() throws Exception {
    	return (List)dao.selectRssTagManageTableList();
    }
    /**
     * JDBC 테이블 컬럼 목록을 조회한다.
     * @param map - 컬럼조회정보
     * @return List -조회한목록이담긴Lis

     * @throws Exception
     */
    public List selectRssTagManageTableColumnList(Map map) throws Exception {
    	return (List)dao.selectRssTagManageTableColumnList(map);
    }
    /**
     * RSS태그관리를(을) 목록을 조회 한다.
     * @param rssManage -조회할 정보가 담긴 객체
     * @return List -조회한목록이담긴List
     * @throws Exception
     */
    public List selectRssTagManageList(RssManage rssManage) throws Exception {
    	return dao.selectRssTagManageList(rssManage);
    }
    /**
     * RSS태그관리를(을) 목록 전체 건수를(을) 조회한다.
     * @param searchVO -조회할 정보가 담긴 객체
     * @return int -조회한건수가담긴Integer
     * @throws Exception
     */
    public int selectRssTagManageListCnt(RssManage rssManage) throws Exception {
        return dao.selectRssTagManageListCnt(rssManage);
    }
    
    /**
     * RSS태그관리를(을) 상세조회 한다.
     * @param searchVO -조회할 정보가 담긴 객체
     * @return List -조회한목록이담긴List
     * @throws Exception
     */
    public RssManage selectRssTagManageDetail(RssManage rssManage) throws Exception {
        ret
@XmlRootElement
@JsonIgnoreProperties(ignoreUnknown = true)
public class UserPermissions implements Serializable  {
	private static final long serialVersionUID = 1L;
	public UserPermissions() {
		super();
	}
	private boolean manageApplication;
    private boolean manageRepo;
    private boolean updateRepo;
    private boolean managePdfReports;
    private boolean manageCodeValidation;
    private boolean manageConfiguration;
    private boolean manageBuilds;
    private boolean manageTests;
    private boolean manageCIJobs;
    private boolean executeCIJobs;
    private boolean manageMavenReports;
    private boolean viewRepo;
    private boolean manageDash;
    private boolean releseRepo;
  
	public boolean isManageApplication() {
		return manageApplication;
	}
	public void setManageApplication(boolean manageApplication) {
		this.manageApplication = manageApplication;
	}
	public boolean isImportApplication() {
	}
	}
	public boolean isManageRepo() {
		return manageRepo;
	}
	public void

		this.manageRepo = manageRepo;
	}
	public boolean isUpdateRepo() {
		return updateRepo;
	}
	public void setUpdateRepo(boolean updateRepo) {
		this.updateRepo = updateRepo;
	}
	public boolean isManagePdfReports() {
		return managePdfReports;
	}
	public void setManagePdfReports(boolean managePdfReports) {
		this.managePdfReports = managePdfReports;
	}
	public boolean isManageCodeValidation() {
		return manageCodeValidation;
	}
	public void setManageCodeValidation(boolean manageCodeValidation) {
		this.manageCodeValidation = manageCodeValidation;
	}
	public boolean isManageConfiguration() {
		return manageConfiguration;
	}
	public void setManageConfiguration(boolean manageConfiguration) {
		this.manageConfiguration = manageConfiguration;
	}
	public boolean isManageBuilds() {
		return manageBuilds;
	}
	public void setManageBuilds(boolean manageBuilds) {
		this.manageBuilds = manageBuilds;
	}
	public boolean isManageTests() {
		return manageTests;
	}
	public void setManageTests(boolean ma

		this.manageTests = manageTests;
	}
	public boolean isManageCIJobs() {
		return manageCIJobs;
	}
	public void setManageCIJobs(boolean manageCIJobs) {
		this.manageCIJobs = manageCIJobs;
	}
	public boolean isExecuteCIJobs() {
		return executeCIJobs;
	}
	public void setExecuteCIJobs(boolean executeCIJobs) {
		this.executeCIJobs = executeCIJobs;
	}
	public boolean isManageMavenReports() {
		return manageMavenReports;
	}
	public void setManageMavenReports(boolean manageMavenReports) {
		this.manageMavenReports = manageMavenReports;
	}
	public boolean isViewRepo() {
		return viewRepo;
	}
	public void setViewRepo(boolean viewRepo) {
		this.viewRepo = viewRepo;
	}
	public boolean isManageDash() {
		return manageDash;
	}
	public void setManageDash(boolean manageDash) {
		this.manageDash = manageDash;
	}
	public boolean isReleseRepo() {
		return releseRepo;
	}
	public void setReleseRepo(boolean releseRepo) {
		this.releseRepo = releseRepo;
	}
	public String toString() {
        return new ToS
/**
 * FTP연동관리에 대한 DAO 클래스
 * @ftpIntrl 배치운영환경 김지완
 * @since 2012.07.16
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2012.07.16  김지완          최초 생성
 *
 * </pre>
 */
@Repository("ftpIntrlManageDAO")
public class FtpIntrlManageDAO extends EgovAbstractDAO {
	 /**
	 * 모든 FtpIntrl 조회
	 * @param ftpIntrlManageVO FtpIntrlManageVO
	 * @return List<FtpIntrlManageVO>
	 * @exception Exception
	 */
    @SuppressWarnings("unchecked")
	public List<FtpIntrlManageVO> selectFtpIntrlList(FtpIntrlManageVO ftpIntrlManageVO) throws Exception {
        return (List<FtpIntrlManageVO>) list("ftpIntrlManageDAO.selectFtpIntrlList", ftpIntrlManageVO);
    }
	/**
	 * FtpIntrl 등록
	 * @param ftpIntrlManage FtpIntrlManage
	 * @exception Exception
	 */
    public void insertFtpIntrl(FtpIntrlManage ftpIntrlManage) throws Exception {
        insert("ftpIntrlManageDAO.insertFtpIntrl", ftpIntrlMa

    }
    /**
	 * FtpIntrl 수정
	 * @param ftpIntrlManage FtpIntrlManage
	 * @exception Exception
	 */
    public void updateFtpIntrl(FtpIntrlManage ftpIntrlManage) throws Exception {
        update("ftpIntrlManageDAO.updateFtpIntrl", ftpIntrlManage);
    }
    /**
	 * FtpIntrl 삭제
	 * @param ftpIntrlManage FtpIntrlManage
	 * @exception Exception
	 */
    public void deleteFtpIntrl(FtpIntrlManage ftpIntrlManage) throws Exception {
        delete("ftpIntrlManageDAO.deleteFtpIntrl", ftpIntrlManage);
    }
    /**
	 * FtpIntrl 총 갯수 조회
	 * @param ftpIntrlManageVO FtpIntrlManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectFtpIntrlListTotCnt(FtpIntrlManageVO ftpIntrlManageVO)  throws Exception {
        return (Integer)select("ftpIntrlManageDAO.selectFtpIntrlListTotCnt", ftpIntrlManageVO);
    }
    /**
	 * FtpIntrl 조회
	 * @param ftpIntrlManageVO FtpIntrlManageVO
	 * @return FtpIntrlManageVO
	 * @exception Exception
	 */
    public FtpIntrlManageVO selectFtpIntrl(FtpIn
public class ServiceComponent {
    private IEncryptionService encryptionService;
    private IReportService reportService;
    
    private static ServiceComponent instance;
    
    /**
     * The constructor
     */
    public ServiceComponent() {
    	instance = this; 
    }
    
    public static ServiceComponent getDefault()
    {
    	return instance;
    }
    public IEncryptionService getEncryptionService()
    {
    	return encryptionService;
    }
    
    public void bindEncryptionService(IEncryptionService encryptionService)
    {
    	this.encryptionService = encryptionService;
    }
    
    public void unbindEncryptionService(IEncryptionService encryptionService)
    {
    	if (this.encryptionService == encryptionService){
    		this.encryptionService = null;
    	}
    }
    
    public IReportService getReportService()
    {
        return reportService;
    }
    
    public void bindReportService(IReportService reportService)
    {
        this.reportService = repor
/* 
 * This software is in public domain worldwide, pursuant to the CC0 Public Domain Dedication. 
 * It is distributed without any warranty.  
 */
/**
 * A regular ManagedBeans scoped in HttpSession used to wrap ProcessService
 * It is inject in ProcessController (request scope) by faces-config.xml
 * 
 * @author lazarotti
 *
 */
public class ProcessInstanceController {
	private ProcessService processService;
	private Collection<ProcessInstance> processInstances;	
	public ProcessInstanceController() {
		this.processService = new ProcessService(true);
		processInstances = new ArrayList<ProcessInstance>();
	}
	public ProcessService getProcessService() {
		return processService;
	}
	public void setProcessService(ProcessService processService) {
		this.processService = processService;
	}
	public Collection<ProcessInstance> getProcessInstances() {
		return processInstances;
	}
	public void setProcessInstances(Collection<ProcessInstance> processInstances) {
		this.processInstances = process
/**
 * 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Repository("roleManageDAO")
public class RoleManageDAO extends EgovComAbstractDAO {
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception {
		return (RoleManageVO) select("roleManageDAO.selectRole", roleManageVO);
	}
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception {
		return (List<RoleManageVO>) list("roleManageDAO.selectRoleList", roleManageVO);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한

	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void insertRole(RoleManage roleManage) throws Exception {
		insert("roleManageDAO.insertRole", roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void updateRole(RoleManage roleManage) throws Exception {
		update("roleManageDAO.updateRole", roleManage);
	}
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception {
		delete("roleManageDAO.deleteRole", roleManage);
	}
    /**
	 * 롤목록 총 갯수를 조회한다.
	 * @param roleManageVO RoleManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectRoleListTotCnt(RoleManageVO roleManageVO) throws Exception {
        return (Integer)select("roleManageDAO.selectAuthorListTotCnt", roleManageVO);
    }
	/**
	 * 등록된 모든 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return L
@Repository("deptManageDAO")
public class DeptManageDAO extends EgovComAbstractDAO {
	/**
	 * 부서를 관리하기 위해 등록된 부서목록을 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return List - 부서 목록
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<DeptManageVO> selectDeptManageList(DeptManageVO deptManageVO) throws Exception {
		return (List<DeptManageVO>) list("deptManageDAO.selectDeptManageList", deptManageVO);
	}
    /**
	 * 부서목록 총 갯수를 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return int - 부서 카운트 수
	 * @exception Exception
	 */
    public int selectDeptManageListTotCnt(DeptManageVO deptManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("deptManageDAO.selectDeptManageListTotCnt", deptManageVO);
    }
	/**
	 * 등록된 부서의 상세정보를 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return deptManageVO - 부서 Vo
	 * 
	 * @param bannerVO
	 */
	public DeptManageVO selectDeptManage(DeptManageVO deptManageVO) throws Exception {
		return (DeptManageVO) select
/**
 * 개요
 * - 기념일관리에 대한 DAO 클래스를 정의한다.
 *
 * 상세내용
 * - 기념일관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 기념일관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Repository("annvrsryManageDAO")
public class AnnvrsryManageDAO extends EgovComAbstractDAO {
	/**
	 * 기념일관리정보를 관리하기 위해 등록된 기념일관리 목록을 조회한다.
	 * @param annvrsryManageVO - 기념일관리 VO
	 * @return List - 기념일관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<AnnvrsryManageVO> selectAnnvrsryManageList(AnnvrsryManageVO annvrsryManageVO) throws Exception {
		return (List<AnnvrsryManageVO>) list("annvrsryManageDAO.selectAnnvrsryManageList", annvrsryManageVO);
	}
    /**
	 * 기념일관리목록 총 갯수를 조회한다.
	 * @param annvrsryManageVO - 기념일관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectAnnvrsryManageListTotCnt(AnnvrsryManageVO annvrsryManageVO) throws Exception {
        return (Integer)select("annvrsryManageDAO.selectAnnvrsryManageListTotCnt", annvrsryManageVO);
    }
	/**
	 * 등록된 기

	 * @param annvrsryManageVO - 기념일관리 VO
	 * @return AnnvrsryManageVO - 기념일관리 VO
	 */
	public AnnvrsryManageVO selectAnnvrsryManage(AnnvrsryManageVO annvrsryManageVO)  throws Exception {
		return (AnnvrsryManageVO) select("annvrsryManageDAO.selectAnnvrsryManage", annvrsryManageVO);
	}
	/**
	 * 기념일관리정보를 신규로 등록한다.
	 * @param annvrsryManage - 기념일관리 model
	 */
	public void insertAnnvrsryManage(AnnvrsryManage annvrsryManage) throws Exception {
		insert("annvrsryManageDAO.insertAnnvrsryManage", annvrsryManage);
	}
	/**
	 * 기 등록된 기념일관리정보를 수정한다.
	 * @param annvrsryManage - 기념일관리 model
	 */
	public void updateAnnvrsryManage(AnnvrsryManage annvrsryManage) throws Exception {
		update("annvrsryManageDAO.updateAnnvrsryManage", annvrsryManage);
	}
	/**
	 * 기 등록된 기념일관리정보를 삭제한다.
	 * @param annvrsryManage - 기념일관리 model
	 */
	public void deleteAnnvrsryManage(AnnvrsryManage annvrsryManage) throws Exception {
        delete("annvrsryManageDAO.deleteAnnvrsryManage",annvrsryManage);
	}
	/**
	 * 등록된 기념일관리의 상세
/*
 * ***** BEGIN LICENSE BLOCK *****
 * Zimbra Collaboration Suite Server
 * Copyright (C) 2010 Zimbra, Inc.
 *
 * The contents of this file are subject to the Zimbra Public License
 * Version 1.3 ("License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of the License at
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
 * ***** END LICENSE BLOCK *****
 */
/**
 * Unit test for {@link MimeHandlerManager}.
 *
 * @author ysasaki
 */
public class MimeHandlerManagerTest {
    @BeforeClass
    public static void init() {
        MockProvisioning prov = new MockProvisioning();
        prov.clearMimeHandlers();
        MockMimeTypeInfo mime = new MockMimeTypeInfo();
        mime.setMimeTypes("text/html");
        mime.setFileExtensions("html", "htm");
        mime.setHandlerClass(TextHtmlHandler.class.getName());
        prov.addMimeType("text/html", mime);

        mime = new MockMimeTypeInfo();
        mime.setMimeTypes("text/enriched");
        mime.setFileExtensions("txe");
        mime.setHandlerClass(TextEnrichedHandler.class.getName());
        prov.addMimeType("text/enriched", mime);
        mime = new MockMimeTypeInfo();
        mime.setHandlerClass(UnknownTypeHandler.class.getName());
        prov.addMimeType("all", mime);
        mime = new MockMimeTypeInfo();
        mime.setMimeTypes("not/exist");
        mime.setFileExtensions("NotExist");
        mime.setHandlerClass("com.zimbra.cs.mime.handler.NotExist");
        prov.addMimeType("not/exist", mime);
        Provisioning.setInstance(prov);
    }
    @Test
    public void html() throws Exception {
        MimeHandler handler = MimeHandlerManager.getMimeHandler(
                "text/html", "filename.html");
        Assert.assertEquals(TextHtmlHandler.class, handler.getClass());
        handler = MimeHandlerManager.getMimeHandler(
                "text/html", null);
        A

        handler = MimeHandlerManager.getMimeHandler(
                "text/html", "filename.bogus");
        Assert.assertEquals(TextHtmlHandler.class, handler.getClass());
        handler = MimeHandlerManager.getMimeHandler(
                null, "filename.html");
        Assert.assertEquals(TextHtmlHandler.class, handler.getClass());
        handler = MimeHandlerManager.getMimeHandler(
                "bogus/type", "filename.html");
        Assert.assertEquals(TextHtmlHandler.class, handler.getClass());
    }
    @Test
    public void htm() throws Exception {
        MimeHandler handler = MimeHandlerManager.getMimeHandler(
                "text/html", "filename.htm");
        Assert.assertEquals(TextHtmlHandler.class, handler.getClass());
        handler = MimeHandlerManager.getMimeHandler(
                "text/html", null);
        Assert.assertEquals(TextHtmlHandler.class, handler.getClass());
        handler = MimeHandlerManager.getMimeHandler(
                "text/html", "file

        Assert.assertEquals(TextHtmlHandler.class, handler.getClass());
        handler = MimeHandlerManager.getMimeHandler(
                null, "filename.htm");
        Assert.assertEquals(TextHtmlHandler.class, handler.getClass());
        handler = MimeHandlerManager.getMimeHandler(
                "bogus/type", "filename.htm");
        Assert.assertEquals(TextHtmlHandler.class, handler.getClass());
    }
    @Test
    public void textEnriched() throws Exception {
        MimeHandler handler = MimeHandlerManager.getMimeHandler(
                "text/enriched", "filename.txe");
        Assert.assertEquals(TextEnrichedHandler.class, handler.getClass());
        handler = MimeHandlerManager.getMimeHandler(
                "text/enriched", null);
        Assert.assertEquals(TextEnrichedHandler.class, handler.getClass());
        handler = MimeHandlerManager.getMimeHandler(
                "text/enriched", "filename.bogus");
        Assert.assertEquals(TextEnrichedHandler.class, handl

        handler = MimeHandlerManager.getMimeHandler(
                null, "filename.txe");
        Assert.assertEquals(TextEnrichedHandler.class, handler.getClass());
        handler = MimeHandlerManager.getMimeHandler(
                "bogus/type", "filename.txe");
        Assert.assertEquals(TextEnrichedHandler.class, handler.getClass());
    }
    @Test
    public void applicationOctetStream() throws Exception {
        MimeHandler handler = MimeHandlerManager.getMimeHandler(
                "application/octet-stream", "filename.exe");
        Assert.assertEquals(UnknownTypeHandler.class, handler.getClass());
        handler = MimeHandlerManager.getMimeHandler(
                "application/octet-stream", null);
        Assert.assertEquals(UnknownTypeHandler.class, handler.getClass());
        handler = MimeHandlerManager.getMimeHandler(
                "application/octet-stream", "filename.bogus");
        Assert.assertEquals(UnknownTypeHandler.class, handler.getClass());
        

                null, "filename.exe");
        Assert.assertEquals(UnknownTypeHandler.class, handler.getClass());
        handler = MimeHandlerManager.getMimeHandler(
                "bogus/type", "filename.exe");
        Assert.assertEquals(UnknownTypeHandler.class, handler.getClass());
    }
    @Test
    public void nil() throws Exception {
        MimeHandler handler = MimeHandlerManager.getMimeHandler(null, null);
        Assert.assertEquals(UnknownTypeHandler.class, handler.getClass());
        handler = MimeHandlerManager.getMimeHandler(null, "filename.bogus");
        Assert.assertEquals(UnknownTypeHandler.class, handler.getClass());
        handler = MimeHandlerManager.getMimeHandler("bogus/type", null);
        Assert.assertEquals(UnknownTypeHandler.class, handler.getClass());
    }
    @Test
    public void empty() throws Exception {
        MimeHandler handler = MimeHandlerManager.getMimeHandler("", "");
        Assert.assertEquals(UnknownTypeHandler.class, handler.getClas
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author mike
 */
public class Services {
    private static ProcessEngine processEngine;
    static {
        instantiateProcessEngine();
        for (String process : ProcessTestMyProcess.PROCESSES) {
            getRepositoryService().createDeployment()
                    .addClasspathResource(ProcessTestMyProcess.PROCESS_FILE_LOCATION + process + ProcessTestMyProcess.SUFFIX)
                    .deploy();
            System.out.println("Process "+process+" deployed");
        }
    }
    
    public static void testProcess() {
        Services.getRuntimeService().createProcessInstanceQuery().processInstanceId("83923").singleResult();
        
        System.out.println("Process tested");
    }
    private static void instantiateProcessEngine() {
        processEngine = ProcessEngineConfiguration.createProcessEngineConfigurationFromResourceDefault().buildProcessEngine();
   
public class ManagerVo {
	private int id;
	private String manage_name;
	private String manage_pass;
	private String create_date;
	private String manage_role;
	/**
	 * @return the id
	 */
	public int getId() {
		return id;
	}
	/**
	 * @param id the id to set
	 */
	public void setId(int id) {
		this.id = id;
	}
	/**
	 * @return the manage_name
	 */
	public String getManage_name() {
		return manage_name;
	}
	/**
	 * @param manage_name the manage_name to set
	 */
	public void setManage_name(String manage_name) {
		this.manage_name = manage_name;
	}
	/**
	 * @return the manage_role
	 */
	public String getManage_role() {
		return manage_role;
	}
	/**
	 * @param manage_name the manage_name to set
	 */
	public void setManage_role(String manage_role) {
		this.manage_role = manage_role;
	}
	/**
	 * @return the manage_pass
	 */
	public String getManage_pass() {
		return manage_pass;
	}
	/**
	 * @param manage_pass the manage_pass to set
	 */
	public void setManage_pass(String manage_pass) {
		this
@ManagedBean
@RequestScoped
public class ServiceCrudBean extends CrudBean {
    private Service service = new Service();
    private static ServiceBo serviceBo;
    public ServiceCrudBean() {
        crudName = "service";
    }
    /**
     * Add Service
     */
    public void add() {
        ServiceCrudBean.serviceBo.createNewService(this.service);
        this.setAddState();
    }
    /**
     * Edit Service
     */
    public void edit() {
        ServiceCrudBean.serviceBo.modifyService(this.service);
        this.setAddState();
    }
    /**
     * Prepare view to edit
     */
    public void prepareEdit(Service service) {
        this.service = service;
        this.setCurrentState(EDIT_STATE);
    }
    /**
     * List of users
     */
    public List<Service> list() {
        return serviceBo.getServicesList();
    }
    /**
     * Remove Service
     */
    public void delete(Service service) {
        ServiceCrudBean.serviceBo.deleteService(service);
        this.setAddState(
/**
 * Created with IntelliJ IDEA.
 * User: yxdave
 * Date: 13-5-24
 * Time: 下午6:46
 */
public class CharacterBean implements DatabaseEntity {
    private int id;
    private String name;
    private boolean systemConfig = false;
    private boolean userManage = false;
    private boolean adminManage = false;
    private boolean articleManage = false;
    private boolean commentManage = false;
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public boolean isSystemConfig() {
        return systemConfig;
    }
    public void setSystemConfig(boolean systemConfig) {
        this.systemConfig = systemConfig;
    }
    public boolean isUserManage() {
        return userManage;
    }
    public void setUserManage(boolean userManage) {
        this.userManage = userManage;
    }
    public boolean isAd
public class DefaultJbpmSimulationModel extends JbpmSimulationModel {
  
  private ProcessDefinition[] processDefinitions;
  
  public DefaultJbpmSimulationModel(String processXml) {
    readFromXml( new String[] { processXml } );
  }
  
  public DefaultJbpmSimulationModel(String[] processXml) {
    readFromXml( processXml );
  }
  
  public DefaultJbpmSimulationModel(ProcessDefinition processDefinition) {
    this.processDefinitions = new ProcessDefinition[] {processDefinition};
  }
  public DefaultJbpmSimulationModel(ProcessDefinition[] processDefinitions) {
    this.processDefinitions = processDefinitions;
  }
  public ProcessDefinition[] getProcessDefinitions() {
    return processDefinitions;
  }
  
  private ProcessDefinition[] readFromXml(String[] processXml) {
    processDefinitions = new ProcessDefinition[processXml.length];
    for (int i = 0; i < processXml.length; i++) {
      SimulationJpdlXmlReader reader = new SimulationJpdlXmlReader(processXml[i]);
      processDefiniti
public class ServiceFactory {
    private static LoginService loginService = null;
    private static RegistrationService registrationService=null;
    
    private static GuideRegistrationService guideregistrationService=null;
    private static UserService userService=null;
    private static ViewQuestionService  viewQuestionService=null;
    private static ViewAnswerService viewAnswerService=null;
    private static GuideService guideService=null;
    private static FeedbackService feedbackService=null;
    private static ViewAwardsService viewAwardsService=null;
    private static ViewPaymentsService viewPaymentsService=null;
    
    public static LoginService getLoginService( )
    {
    	
        if(loginService==null)
        {
            loginService= new LoginService( );
        }
        else{
            return loginService;
        }
        return loginService;
    }
    
    public static RegistrationService getRegistrationService( ){
    	
        if(registrationServic

            registrationService= new RegistrationService( );
        }
        else{
            return registrationService;
        }
        return registrationService;
    }
    
   
    
    public static GuideRegistrationService getGuideRegistrationService( ){
        if(guideregistrationService==null){
            guideregistrationService= new GuideRegistrationService( );
        }
        else{
            return guideregistrationService;
        }
        return guideregistrationService;
    }
    
 public static UserService getUserService()
 {
	 if(userService==null)
	 {
		 userService=new UserService();
	}
	 else
	 {
      return userService;
	 }
     return userService;
 public static GuideService getGuideService()
 {
	 if(guideService==null)
	 {
		 guideService=new GuideService();
	}
	 else
	 {
      return guideService;
	 }
     return guideService;
    public static ViewQuestionService getViewQuestionService()
    {
           if(viewQuestionService==null)
           {
 

           }
           else
      	 {
            return viewQuestionService;
      	 }       
           return viewQuestionService;
    }
    
    public static ViewAnswerService getAnswerService()
    {
    	if(viewAnswerService==null)
    	{
    		viewAnswerService = new ViewAnswerService();
    	}
    	else
    	{
    		return viewAnswerService;
    	}
    	return viewAnswerService;
    }
    public static FeedbackService getFeedBackService()
    {
    	if(feedbackService==null)
    	{
             feedbackService=new FeedbackService();
    	}
    	else
    	{
    		return feedbackService;
    	}
    	
    	return feedbackService;
    public static ViewAwardsService getAwardService()
    {
    	if(viewAwardsService==null)
    	{
    		viewAwardsService = new ViewAwardsService();
    	}
    	else
    	{
    		return viewAwardsService;
    	}
    	return viewAwardsService;
    }
    public static ViewPaymentsService getviewPaymentsService()
    {
    	if(viewPaymentsService==null)
/**
 * Auto generated code
 */
/**
 */
public class ManageRecurringPaymentsProfileStatusReq {
	/**
	 */
	private ManageRecurringPaymentsProfileStatusRequestType ManageRecurringPaymentsProfileStatusRequest;
	public ManageRecurringPaymentsProfileStatusRequestType getManageRecurringPaymentsProfileStatusRequest() {
		return ManageRecurringPaymentsProfileStatusRequest;
	}
	public void setManageRecurringPaymentsProfileStatusRequest(ManageRecurringPaymentsProfileStatusRequestType value) {
		this.ManageRecurringPaymentsProfileStatusRequest = value;
	}
	public String toXMLString()  {
		StringBuilder sb = new StringBuilder();
sb.append("<urn:ManageRecurringPaymentsProfileStatusReq>");
		if( ManageRecurringPaymentsProfileStatusRequest != null ) {
			sb.append("<urn:ManageRecurringPaymentsProfileStatusRequest>");
			sb.append(ManageRecurringPaymentsProfileStatusRequest.toXMLString());
			sb.append("</urn:ManageRecurringPaymentsProfileStatusRequest>");
		}
sb.append("</urn:ManageRecurringPaymentsPr
public class ServiceManager {
	private UserService userService;
	private UserTypeService userTypeService;
	private UserResourceService userResourceService;
	private ProgramService programService;
	private TestAssetService testAssetService;
	private ActivityService activityService;
	private TargetMilestoneService targetMilestoneService;
	private TargetLaunchService targetLaunchService;
	private ResponsibleManagerService responsibleManagerService;
	private HPCostLocationService hpCostLocationService;
	private CountryLocaleService countryLocaleService;
	private VendorRateService vendorRateService;
	private RateMultService rateMultService;
	private BudgetTrackingService budgetTrackingService;
	private ChargeByProjectService chargeByProjectService;
	public ChargeByProjectService getChargeByProjectService() {
		return chargeByProjectService;
	}
	public void setChargeByProjectService(
			ChargeByProjectService chargeByProjectService) {
		this.chargeByProjectService = chargeByProjectService;
	

	public BudgetTrackingService getBudgetTrackingService() {
		return budgetTrackingService;
	}
	public void setBudgetTrackingService(BudgetTrackingService budgetTrackingService) {
		this.budgetTrackingService = budgetTrackingService;
	}
	public RateMultService getRateMultService() {
		return rateMultService;
	}
	public void setRateMultService(RateMultService rateMultService) {
		this.rateMultService = rateMultService;
	}
	public VendorRateService getVendorRateService() {
		return vendorRateService;
	}
	public void setVendorRateService(VendorRateService vendorRateService) {
		this.vendorRateService = vendorRateService;
	}
	public CountryLocaleService getCountryLocaleService() {
		return countryLocaleService;
	}
	public void setCountryLocaleService(CountryLocaleService countryLocaleService) {
		this.countryLocaleService = countryLocaleService;
	}
	public HPCostLocationService getHpCostLocationService() {
		return hpCostLocationService;
	}
	public void setHpCostLocationService(HPCostLocat

		this.hpCostLocationService = hpCostLocationService;
	}
	public ResponsibleManagerService getResponsibleManagerService() {
		return responsibleManagerService;
	}
	public void setResponsibleManagerService(
			ResponsibleManagerService responsibleManagerService) {
		this.responsibleManagerService = responsibleManagerService;
	}
	public TargetLaunchService getTargetLaunchService() {
		return targetLaunchService;
	}
	public void setTargetLaunchService(TargetLaunchService targetLaunchService) {
		this.targetLaunchService = targetLaunchService;
	}
	public TargetMilestoneService getTargetMilestoneService() {
		return targetMilestoneService;
	}
	public void setTargetMilestoneService(
			TargetMilestoneService targetMilestoneService) {
		this.targetMilestoneService = targetMilestoneService;
	}
	public ActivityService getActivityService() {
		return activityService;
	}
	public void setActivityService(ActivityService activityService) {
		this.activityService = activityService;
	}
	public TestAs
/**
 * @author Jacky.gao
 * @since 2013年7月31日
 */
public class SaveHistoryProcessInstanceCommand implements Command<HistoryProcessInstance> {
	private ProcessInstance processInstance;
	public SaveHistoryProcessInstanceCommand(ProcessInstance processInstance){
		this.processInstance=processInstance;
	}
	public HistoryProcessInstance execute(Context context) {
		Session session=context.getSession();
		HistoryProcessInstance hisProcessInstance=null;
		if(processInstance.getState().equals(ProcessInstanceState.Start)){
			hisProcessInstance=new HistoryProcessInstance();
			hisProcessInstance.setId(processInstance.getHistoryProcessInstanceId());
			hisProcessInstance.setCreateDate(processInstance.getCreateDate());
			hisProcessInstance.setProcessId(processInstance.getProcessId());
			hisProcessInstance.setProcessInstanceId(processInstance.getId());
			hisProcessInstance.setTag(processInstance.getTag());
			hisProcessInstance.setBusinessId(processInstance.getBusinessId());
			hisProcessInstan
/**
 * A gateway class which holds several repository classes.
 */
public class RepositoryGateway {
  @NotNull
  private final SerializerClassRepository mSerializerClassRepository;
  @NotNull
  private final TableClassRepository mTableClassRepository;
  @NotNull
  private final ColumnMethodRepository mColumnMethodRepository;
  @NotNull
  private final RepositoryClassRepository mRepositoryClassRepository;
  public RepositoryGateway() {
    mSerializerClassRepository = new SerializerClassRepository();
    mTableClassRepository = new TableClassRepository();
    mColumnMethodRepository = new ColumnMethodRepository();
    mRepositoryClassRepository = new RepositoryClassRepository();
  }
  @NotNull
  public SerializerClassRepository getSerializerClassRepository() {
    return mSerializerClassRepository;
  }
  @NotNull
  public TableClassRepository getTableClassRepository() {
    return mTableClassRepository;
  }
  @NotNull
  public ColumnMethodRepository getColumnMethodRepository() {
    ret
/*******************************************************************************
 * Copyright (c) 2015 Eclipse RDF4J contributors, Aduna, and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Distribution License v1.0
 * which accompanies this distribution, and is available at
 *******************************************************************************/
public class RepositoryConfigUtil {
	public static Set<String> getRepositoryIDs(Repository repository)
		throws RepositoryException
	{
		RepositoryConnection con = repository.getConnection();
		try {
			Set<String> idSet = new LinkedHashSet<String>();
			RepositoryResult<Statement> idStatementIter = con.getStatements(null, REPOSITORYID, null, true);
			try {
				while (idStatementIter.hasNext()) {
					Statement idStatement = idStatementIter.next();
					if (idStatement.getObject() instanceof Literal) {
						Literal idLiteral = (Literal)idStatement.getOb

						idSet.add(idLiteral.getLabel());
					}
				}
			}
			finally {
				idStatementIter.close();
			}
			return idSet;
		}
		finally {
			con.close();
		}
	}
	/**
	 * Is configuration information for the specified repository ID present in the (system) repository?
	 * 
	 * @param repository
	 *        the repository to look in
	 * @param repositoryID
	 *        the repositoryID to look for
	 * @return true if configurion information for the specified repository ID was found, false otherwise
	 * @throws RepositoryException
	 *         if an error occurred while trying to retrieve information from the (system) repository
	 * @throws RepositoryConfigException
	 */
	public static boolean hasRepositoryConfig(Repository repository, String repositoryID)
		throws RepositoryException, RepositoryConfigException
	{
		RepositoryConnection con = repository.getConnection();
		try {
			return getIDStatement(con, repositoryID) != null;
		}
		finally {
			con.close();
		}
	}
	public static Repository

		throws RepositoryConfigException, RepositoryException
	{
		RepositoryConnection con = repository.getConnection();
		try {
			Statement idStatement = getIDStatement(con, repositoryID);
			if (idStatement == null) {
				return null;
			}
			Resource repositoryNode = idStatement.getSubject();
			Resource context = idStatement.getContext();
			if (context == null) {
				throw new RepositoryException("No configuration context for repository " + repositoryID);
			}
			Model contextGraph = QueryResults.asModel(con.getStatements(null, null, null, true, context));
			return RepositoryConfig.create(contextGraph, repositoryNode);
		}
		finally {
			con.close();
		}
	}
	/**
	 * Update the specified Repository with the specified set of RepositoryConfigs. This will overwrite all
	 * existing configurations in the Repository that have a Repository ID occurring in these
	 * RepositoryConfigs.
	 * 
	 * @param repository
	 *        The Repository whose contents will be modified.
	 * @param configs
	 

	 *        RepositoryConfig's ID may already occur in the Repository, in which case all previous
	 *        configuration data for that Repository will be cleared before the RepositoryConfig is added.
	 * @throws RepositoryException
	 *         When access to the Repository's RepositoryConnection causes a RepositoryException.
	 * @throws RepositoryConfigException
	 */
	public static void updateRepositoryConfigs(Repository repository, RepositoryConfig... configs)
		throws RepositoryException, RepositoryConfigException
	{
		RepositoryConnection con = repository.getConnection();
		try {
			updateRepositoryConfigs(con, configs);
		}
		finally {
			con.close();
		}
	}
	/**
	 * Update the specified RepositoryConnection with the specified set of RepositoryConfigs. This will
	 * overwrite all existing configurations in the Repository that have a Repository ID occurring in these
	 * RepositoryConfigs. Note: this method does NOT commit the updates on the connection.
	 * 
	 * @param con
	 *     

	 * @param configs
	 *        The RepositoryConfigs that should be added to or updated in the Repository. The
	 *        RepositoryConfig's ID may already occur in the Repository, in which case all previous
	 *        configuration data for that Repository will be cleared before the RepositoryConfig is added.
	 * @throws RepositoryException
	 * @throws RepositoryConfigException
	 */
	public static void updateRepositoryConfigs(RepositoryConnection con, RepositoryConfig... configs)
		throws RepositoryException, RepositoryConfigException
	{
		ValueFactory vf = con.getRepository().getValueFactory();
		con.begin();
		for (RepositoryConfig config : configs) {
			Resource context = getContext(con, config.getID());
			if (context != null) {
				con.clear(context);
			}
			else {
				context = vf.createBNode();
			}
			con.add(context, RDF.TYPE, REPOSITORY_CONTEXT);
			Model graph = new LinkedHashModel();
			config.export(graph);
			con.add(graph, context);
		}
		con.commit();
	}
	/**
	 * Remo

	 * does not contain configurations for these Repository IDs.
	 * 
	 * @param repository
	 *        The Repository to remove the configurations from.
	 * @param repositoryIDs
	 *        The IDs of the Repositories whose configurations need to be removed.
	 * @throws RepositoryException
	 *         Whenever access to the Repository's RepositoryConnection causes a RepositoryException.
	 * @throws RepositoryConfigException
	 */
	public static boolean removeRepositoryConfigs(Repository repository, String... repositoryIDs)
		throws RepositoryException, RepositoryConfigException
	{
		boolean changed = false;
		RepositoryConnection con = repository.getConnection();
		try {
			con.begin();
			for (String id : repositoryIDs) {
				Resource context = getContext(con, id);
				if (context != null) {
					con.clear(context);
					con.remove(context, RDF.TYPE, REPOSITORY_CONTEXT);
					changed = true;
				}
			}
			con.commit();
		}
		finally {
			con.close();
		}
		return changed;
	}
	public stati
public class ApplicationActivator implements BundleActivator {
    private ServiceTracker<Service, Service> serviceTracker = null;
    public void start(BundleContext context) throws Exception {
        serviceTracker = new ServiceTracker<Service, Service>(context, Service.class, new MyServiceTrackerCustomizer());
        serviceTracker.open();
    }
    public void stop(BundleContext context) throws Exception {
        serviceTracker.close();
    }
    private class MyServiceTrackerCustomizer implements ServiceTrackerCustomizer<Service, Service> {
        public Service addingService(ServiceReference<Service> reference) {
            Bundle bundle = reference.getBundle();
            BundleContext context = bundle.getBundleContext();
            Service service = context.getService(reference);
            service.sayHello();
            return service;
        }
        public void modifiedService(ServiceReference<Service> reference, Service service) {
        }
        public void re
/**
 * @author LH
 * 
 */
public class ServiceManager {
	private UserService userService;
	private GroupService groupService;
	private NewsService newsService;
	private EventService eventService;
	private AdminProjectService adminProjectService;
	private CultureService cultureService;
	private ZhaopinService zhaopinService;
	private HonourService honourService;
	private TypeService typeService;
	private ContactService contactService;
	private AboutService aboutService;
	private LinkService linkService;
	private SysService sysService;
	public SysService getSysService() {
		return sysService;
	}
	public void setSysService(SysService sysService) {
		this.sysService = sysService;
	}
	public LinkService getLinkService() {
		return linkService;
	}
	public void setLinkService(LinkService linkService) {
		this.linkService = linkService;
	}
	public AboutService getAboutService() {
		return aboutService;
	}
	public void setAboutService(AboutService aboutService) {
		this.aboutService = aboutServ

	}
	public ContactService getContactService() {
		return contactService;
	}
	public void setContactService(ContactService contactService) {
		this.contactService = contactService;
	}
	public TypeService getTypeService() {
		return typeService;
	}
	public void setTypeService(TypeService typeService) {
		this.typeService = typeService;
	}
	public HonourService getHonourService() {
		return honourService;
	}
	public void setHonourService(HonourService honourService) {
		this.honourService = honourService;
	}
	public ZhaopinService getZhaopinService() {
		return zhaopinService;
	}
	public void setZhaopinService(ZhaopinService zhaopinService) {
		this.zhaopinService = zhaopinService;
	}
	public CultureService getCultureService() {
		return cultureService;
	}
	public void setCultureService(CultureService cultureService) {
		this.cultureService = cultureService;
	}
	public AdminProjectService getAdminProjectService() {
		return adminProjectService;
	}
	public void setAdminProjectService(Admi
/**
 * The persistent class for the PROCESS_TYPE database table.
 * 
 */
@Entity
@Table(name="PROCESS_TYPE")
@NamedQuery(name="ProcessType.findAll", query="SELECT p FROM ProcessType p")
public class ProcessType implements Serializable {
	private static final long serialVersionUID = 1L;
	private long id;
	private String description;
	private String name;
	private String publishStatus;
	private boolean deployed;
	private BlobData iconData;
	private List<ProcessInstance> processInstances;
	private List<ProcessTypeData> processTypeData;
	private List<ProcessTypeState> processTypeStates;
	public ProcessType() {
	}
	@GenericGenerator(name = "generator", strategy = "org.hibernate.id.enhanced.TableGenerator",parameters={@Parameter(name="segment_value",value="ProcessType")})
	@Id
	@GeneratedValue(generator="generator")
	public long getId() {
		return this.id;
	}
	public void setId(long id) {
		this.id = id;
	}
	public String getDescription() {
		return this.description;
	}
	public void setDescr

		this.description = description;
	}
	public String getName() {
		return this.name;
	}
	public void setName(String name) {
		this.name = name;
	}
	@Column(name="PUBLISH_STATUS")
	public String getPublishStatus() {
		return this.publishStatus;
	}
	public void setPublishStatus(String publishStatus) {
		this.publishStatus = publishStatus;
	}
	public boolean isDeployed() {
		return deployed;
	}
	public void setDeployed(boolean deployed) {
		this.deployed = deployed;
	}
	@ManyToOne
	@JoinColumn(name="ICON_ID")
	public BlobData getIconData() {
		return this.iconData;
	}
	public void setIconData(BlobData iconData) {
		this.iconData = iconData;
	}
	@OneToMany(mappedBy="processType")
	public List<ProcessInstance> getProcessInstances() {
		return this.processInstances;
	}
	public void setProcessInstances(List<ProcessInstance> processInstances) {
		this.processInstances = processInstances;
	}
	public ProcessInstance addProcessInstance(ProcessInstance processInstance) {
		getProcessInstances().ad

		processInstance.setProcessType(this);
		return processInstance;
	}
	public ProcessInstance removeProcessInstance(ProcessInstance processInstance) {
		getProcessInstances().remove(processInstance);
		processInstance.setProcessType(null);
		return processInstance;
	}
	@OneToMany(mappedBy="processType")
	public List<ProcessTypeData> getProcessTypeData() {
		return this.processTypeData;
	}
	public void setProcessTypeData(List<ProcessTypeData> processTypeData) {
		this.processTypeData = processTypeData;
	}
	public ProcessTypeData addProcessTypeData(ProcessTypeData processTypeData) {
		getProcessTypeData().add(processTypeData);
		processTypeData.setProcessType(this);
		return processTypeData;
	}
	public ProcessTypeData removeProcessTypeData(ProcessTypeData processTypeData) {
		getProcessTypeData().remove(processTypeData);
		processTypeData.setProcessType(null);
		return processTypeData;
	}
	@OneToMany(mappedBy="processType")
	public List<ProcessTypeState> getProcessTypeStates() {
		return
/**
 * 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성
 *
 * </pre>
 */
@Repository("roleManageDAO")
public class RoleManageDAO extends EgovAbstractDAO {
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception {
		return (RoleManageVO) select("roleManageDAO.selectRole", roleManageVO);
	}
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception {
		return (List<RoleManageVO>) list("roleManageDAO.selectRol

	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 등록
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void insertRole(RoleManage roleManage) throws Exception {
		insert("roleManageDAO.insertRole", roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void updateRole(RoleManage roleManage) throws Exception {
		update("roleManageDAO.updateRole", roleManage);
	}
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception {
		delete("roleManageDAO.deleteRole", roleManage);
	}
    /**
	 * 롤목록 총 갯수를 조회한다.
	 * @param roleManageVO RoleManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectRoleListTotCnt(RoleManageVO roleManageVO) throws Exception {
        return (Integer)select("roleManageDAO.selectAuthorListTotCnt", roleManageVO);
    }
	/**
	 * 등록된 모든 롤 정보 목록
public class ProcessInstanceManagerImpl implements ProcessInstanceManager {
    private transient Map<Long, ProcessInstance> processInstances;
    private WorkingMemory workingMemory;
    private InternalKnowledgeRuntime internalKnowledgeRuntime;
    private PersistenceManager cm;
    public ProcessInstanceManagerImpl(InternalKnowledgeRuntime runtime, PersistenceManager cm) {
        this.workingMemory = ((InternalWorkingMemoryEntryPoint)runtime).getInternalWorkingMemory();
        this.internalKnowledgeRuntime = runtime;
        this.cm = cm;
    }
    @Override
    public ProcessInstance getProcessInstance(long id) {
        ProcessInstance processInstance = null;
        Environment environment = this.workingMemory.getEnvironment();
        if (this.processInstances != null) {
            processInstance = this.processInstances.get(id);
            if (processInstance != null) {
                return processInstance;
            }
        }
        ProcessInstanceInfo processInstan

        
        if (processInstanceInfo == null)
            return null;
        processInstanceInfo.updateLastReadDate();
        processInstance = getProcessInstance(processInstanceInfo, workingMemory, environment);
        org.drools.definition.process.Process process = ((InternalRuleBase) workingMemory.getRuleBase()).getProcess(processInstance.getProcessId());
        if (process == null) {
            throw new IllegalArgumentException("Could not find process " + processInstance.getProcessId());
        }
        processInstance.setProcess(process);
        if (processInstance.getKnowledgeRuntime() == null) {
            processInstance.setKnowledgeRuntime(internalKnowledgeRuntime);
            ((ProcessInstanceImpl) processInstance).reconnect();
        }
        return processInstance;
    }
    @Override
    public Collection<org.drools.runtime.process.ProcessInstance> getProcessInstances() {
        return new ArrayList<org.drools.runtime.process.ProcessInstance>();
    }
 

    public void addProcessInstance(org.drools.runtime.process.ProcessInstance processInstance) {
        Long pID = cm.generateIdentity();
        ((org.jbpm.process.instance.ProcessInstance)processInstance).setId(pID);
        handleCachedProcessInfo(pID, (ProcessInstance)processInstance);
        internalAddProcessInstance(processInstance);
    }
    @Override
    public void internalAddProcessInstance(org.drools.runtime.process.ProcessInstance processInstance) {
        if (this.processInstances == null) {
            this.processInstances = new ConcurrentHashMap<Long, ProcessInstance>();
        }
        processInstances.put(processInstance.getId(), (ProcessInstance)processInstance);
    }
    @Override
    public void removeProcessInstance(org.drools.runtime.process.ProcessInstance processInstance) {
        cm.removeById(processInstance.getId());
        internalRemoveProcessInstance(processInstance);
    }
    @Override
    public void internalRemoveProcessInstance(org.drools.

        if (this.processInstances != null) {
            processInstances.remove(processInstance.getId());
        }
    }
    public void clearProcessInstances() {
        if (processInstances != null) {
            for (Map.Entry<Long, ProcessInstance> e : processInstances.entrySet()) {
                handleCachedProcessInfo(e.getKey(), e.getValue());
                ((ProcessInstanceImpl) e.getValue()).disconnect();
            }
        }
    }
    private ProcessInstanceInfo handleCachedProcessInfo(long id, ProcessInstance processInstance) {
        ProcessInstanceInfo pi = new ProcessInstanceInfo();
        pi.updateLastReadDate();
        pi.setId(id);
        update(pi, processInstance);
        cm.saveOrUpdate(pi, id);
        return pi;
    }
    public ProcessInstance getProcessInstance(ProcessInstanceInfo info, WorkingMemory workingMemory, Environment env) {
        ProcessInstance processInstance = null;
        try {
            ByteArrayInputStream bais = new ByteArray

            MarshallerReaderContext context = new MarshallerReaderContext(bais,
                    (InternalRuleBase) workingMemory.getRuleBase(), null, null,workingMemory.getEnvironment());
            context.wm = (InternalWorkingMemory) workingMemory;
            ProcessInstanceMarshaller marshaller = getMarshallerFromContext(context);
            processInstance = (ProcessInstance) marshaller.readProcessInstance(context);
            context.close();
        } catch (IOException e) {
            e.printStackTrace();
            throw new IllegalArgumentException("IOException while loading process instance: " + e.getMessage(), e);
        }
        return processInstance;
    }
    private ProcessInstanceMarshaller getMarshallerFromContext(MarshallerReaderContext context) throws IOException {
        ObjectInputStream stream = context.stream;
        String processInstanceType = stream.readUTF();
        return ProcessMarshallerRegistry.INSTANCE.getMarshaller(processInstanceType);

    }
    private void saveProcessInstanceType(MarshallerWriteContext context, ProcessInstance processInstance,
            String processInstanceType) throws IOException {
        ObjectOutputStream stream = context.stream;
        stream.writeUTF(processInstanceType);
    }
    private void update(ProcessInstanceInfo info, ProcessInstance processInstance) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        boolean variablesChanged = false;
        try {
            MarshallerWriteContext context = new MarshallerWriteContext(baos, null, null, null, null,workingMemory.getEnvironment());
            String processType = ((ProcessInstanceImpl) processInstance).getProcess().getType();
            saveProcessInstanceType(context, processInstance, processType);
            ProcessInstanceMarshaller marshaller = ProcessMarshallerRegistry.INSTANCE.getMarshaller(processType);
            marshaller.writeProcessInstance(context, processInstance);
            context.clo
/**
 * 개요
 * - 회의실관리에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - 회의실관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 회의실관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Repository("mtgPlaceManageDAO")
public class MtgPlaceManageDAO extends EgovComAbstractDAO {
	/**
	 * 회의실관리정보를 관리하기 위해 등록된 회의실관리 목록을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return List - 회의실관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<MtgPlaceManageVO> selectMtgPlaceManageList(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
		return list("mtgPlaceManageDAO.selectMtgPlaceManageList", mtgPlaceManageVO);
	}
    /**
	 * 회의실관리목록 총 갯수를 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectMtgPlaceManageListTotCnt(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("mtgPlaceManageDAO.selectMtgPlaceManageListTotCnt", mtgPlaceManageVO);
    }
	/**

	 * 등록된 회의실관리의 상세정보를 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	public MtgPlaceManage selectMtgPlaceManage(MtgPlaceManageVO mtgPlaceManageVO)  throws Exception {
		return (MtgPlaceManage) selectByPk("mtgPlaceManageDAO.selectMtgPlaceManage", mtgPlaceManageVO);
	}
	/**
	 * 회의실관리정보를 신규로 등록한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void insertMtgPlaceManage(MtgPlaceManage mtgPlaceManage) throws Exception {
		insert("mtgPlaceManageDAO.insertMtgPlaceManage", mtgPlaceManage);
	}
	/**
	 * 기 등록된 회의실관리정보를 수정한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void updtMtgPlaceManage(MtgPlaceManage mtgPlaceManage) throws Exception {
		update("mtgPlaceManageDAO.updtMtgPlaceManage", mtgPlaceManage);
	}
	/**
	 * 기 등록된 회의실관리정보를 삭제한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void deleteMtgPlaceManage(MtgPlaceManage mtgPlaceManage) throws Exception {
        delete("mtgPlaceManageDAO.deleteMtgPlaceManage",mtgPlaceManage);
	}

	/******** 회의실 예약 관리 *************/
	/** 
	 * 회의실 ID 정보 목록을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return List - 회의실관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<MtgPlaceManageVO> selectMtgPlaceIDList(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
		return list("mtgPlaceManageDAO.selectMtgPlaceIDList", mtgPlaceManageVO);
	}
	/** 
	 * 회의실 예약정보를 관리하기 위해 등록된 회의실예약을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 목록
	 */
	public MtgPlaceManageVO selectMtgPlaceResveManageList(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
		return (MtgPlaceManageVO) selectByPk("mtgPlaceManageDAO.selectMtgPlaceResveManageList", mtgPlaceManageVO);
	}
	/**
	 * 회의실예약 신청화면을 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	public MtgPlaceManageVO selectMtgPlaceResve(MtgPlaceManageVO mtgPlaceManageVO)  throws Exception {
		return (MtgPlaceManageVO) selectByPk("mtgPlaceManageDAO.selectMtgPlaceResve", mtgP

	}
	/**
	 * 등록된 회의실예약 상세정보를 조회한다.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return MtgPlaceManageVO - 회의실관리 VO
	 */
	public MtgPlaceManageVO selectMtgPlaceResveDetail(MtgPlaceManageVO mtgPlaceManageVO)  throws Exception {
		return (MtgPlaceManageVO) selectByPk("mtgPlaceManageDAO.selectMtgPlaceResveDetail", mtgPlaceManageVO);
	}
	/**
	 * 회의실예약 정보를 신규로 등록한다.
	 * @param mtgPlaceResve - 회의실예약 model
	 */
	public void insertMtgPlaceResve(MtgPlaceResve mtgPlaceResve) throws Exception {
		insert("mtgPlaceManageDAO.insertMtgPlaceResve", mtgPlaceResve);
	}
	/**
	 * 기 등록된 회의실예약 정보를 수정한다.
	 * @param mtgPlaceResve - 회의실예약 model
	 */
	public void updtMtgPlaceResve(MtgPlaceResve mtgPlaceResve) throws Exception {
		update("mtgPlaceManageDAO.updtMtgPlaceResve", mtgPlaceResve);
	}
	/**
	 * 기 등록된 회의실예약 정보를 삭제한다.
	 * @param mtgPlaceResve - 회의실예약 model
	 */
	public void deleteMtgPlaceResve(MtgPlaceResve mtgPlaceResve) throws Exception {
        delete("mtgPlaceManageDAO.deleteMtgPlaceResve",mtgPlaceResv

	}	
	/**
	 * 회의실 중복여부 체크.
	 * @param mtgPlaceManageVO - 회의실관리 VO
	 * @return int - 중복건수
	 */
	public int mtgPlaceResveDplactCeck(MtgPlaceManageVO mtgPlaceManageVO) throws Exception {
		return (Integer)getSqlMapClientTemplate().queryForObject("mtgPlaceManageDAO.mtgPlaceResveDplactCeck", mtgPlaceManageVO);
	}
	/******** 회의실 비품 관리 *************/
	/**
	 * 비품정보 목록을 조회한다
	 * @param fxtrsManageVO - 비품관리 VO
	 * @return List - 비품관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<MtgPlaceFxtrsVO> selectFxtrsManageList(MtgPlaceFxtrsVO mtgPlaceFxtrsVO) throws Exception {
		return list("mtgPlaceManageDAO.selectFxtrsManageList", mtgPlaceFxtrsVO);
	}
	/**
	 * 회의실관리 비품정보를 신규로 등록한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void insertMtgPlaceFxtrs(MtgPlaceFxtrs mtgPlaceFxtrs) throws Exception {
		insert("mtgPlaceManageDAO.insertMtgPlaceFxtrs", mtgPlaceFxtrs);
	}
	/**
	 * 회의실관리 비품정보를 삭제한다.
	 * @param mtgPlaceManage - 회의실관리 model
	 */
	public void deleteMtgPlaceFxtrs(MtgPlaceFxtrs mtgPl
/**
 * @Class Name : EgovBkmkMenuManageServiceImpl.java
 * @Description : 바로가기메뉴를 관리하는 서비스 구현 클래스
 * @Modification Information
 *
 *    수정일       수정자         수정내용
 *    -------        -------     -------------------
 *    2009. 9. 25.     윤성록
 *
 * @author 공통 컴포넌트 개발팀 윤성록
 * @since 2009. 9. 25.
 * @version
 * @see
 *
 */
@Service("bkmkMenuManageservice")
public class EgovBkmkMenuManageServiceImpl extends AbstractServiceImpl implements EgovBkmkMenuManageservice{
    
    @Resource(name = "bkmkMenuManageDAO")
    private BkmkMenuManageDAO bkmkMenuManageDAO;
       
    /**
     * 바로가기메뉴관리 정보를 삭제한다.
     * @param BkmkMenuManage
     * @return  
     * @exception Exception
     */
    public void deleteBkmkMenuManage(BkmkMenuManage bkmkMenuManage) throws Exception  {
        bkmkMenuManageDAO.deleteBkmkMenuManage(bkmkMenuManage);        
    }
    /**
     * 바로가기메뉴관리 정보를 등록한다.
     * @param BkmkMenuManage
     * @return  
     * @exception Exception
     */
    public void insertBkmkMenuMa

        bkmkMenuManageDAO.insertBkmkMenuManage(bkmkMenuManage);        
    }
    /**
     * 바로가기메뉴관리 정보의 전체목록을 조회한다.
     * @param BkmkMenuManage
     * @return  Map<String, Object>
     * @exception Exception
     */
    public Map<String, Object> selectBkmkMenuManageList(
            BkmkMenuManageVO bkmkMenuManageVO)  throws Exception{
        
        List<BkmkMenuManageVO> result = bkmkMenuManageDAO.selectBkmkMenuManageList(bkmkMenuManageVO);
        
        int cnt = bkmkMenuManageDAO.selectBkmkMenuManageListCnt(bkmkMenuManageVO);
        Map<String, Object> map = new HashMap<String, Object>();
        
        map.put("resultList", result);
        map.put("resultCnt", Integer.toString(cnt));
        return map;  
    }
    /**
     * 바로가기메뉴관리 정보를 조회한다.
     * @param BkmkMenuManageVO
     * @return  BkmkMenuManageVO
     * @exception Exception
     */
    public BkmkMenuManageVO selectBkmkMenuManageResult(
            BkmkMenuManageVO bkmkMenuManageVO) throws Exception {
    

    }
    /**
     * 등록할  메뉴정보 목록을 조회한다.
     * @param BkmkMenuManageVO
     * @return  Map<String, Object>
     * @exception Exception
     */
    public  Map<String, Object> selectMenuList(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        
        List<BkmkMenuManageVO> result = bkmkMenuManageDAO.selectBkmkMenuList(bkmkMenuManageVO);
        
        int cnt = bkmkMenuManageDAO.selectBkmkMenuListCnt(bkmkMenuManageVO);
        Map<String, Object> map = new HashMap<String, Object>();
        
        map.put("resultList", result);
        map.put("resultCnt", Integer.toString(cnt));
        return map;  
        
    }
    /**
     * 미리보기를 할 바로가기메뉴관리의 목록을 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return  List<MenuManageVO> 
     * @throws Exception
     */
    public List<MenuManageVO>  selectBkmkPreviewList(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        
                
        List<MenuManageVO> result = bkmkMenuManageDA
public class ConfigurationFixture {
   private static ProcessPuzzleContext config;
   private static DefaultArtifactRepository artifactRepository;
   private static ArtifactFolderRepository artifactFolderRepository;
   private static ZipCodeRepository zipCodeRepository;
   private static CountryRepository countryRepository;
   private static SettlementRepository settlementRepository;
   private static ResourceTypeRepository resourceTypeRepository;
   private static ArtifactTypeRepository artifactTypeRepository;
   private static ArtifactTypeGroupRepository artifactTypeGroupRepository;
   private static PartyRepository partyRepository;
   private static ProtocolRepository protocolRepository;
   private static WorkflowRepository actionRepository;
   private static PartyRelationshipTypeRepository partyRelationshipTypeRepository;
   private static PartyRoleTypeRepository partyRoleTypeRepository;
   private static InternalizationContext localeRepository;
   private static UserRepository use

   private static ConfigurationFixture fixtureInstance;
   @Mock
   private Application mockApplication;
   public static ConfigurationFixture getInstance() {
      if( fixtureInstance == null ){
         return new ConfigurationFixture();
      }
      return fixtureInstance;
   }
   public void setUp() {
      MockitoAnnotations.initMocks( ConfigurationFixture.class );
      config = ApplicationContextFactory.create( mockApplication, ConfigurationConstants.CONFIGURATION_PROPERTY_FILE );
      try{
         config.setUp( Application.Action.start );
         artifactRepository = config.getRepository( DefaultArtifactRepository.class );
         artifactFolderRepository = config.getRepository( ArtifactFolderRepository.class );
         zipCodeRepository = config.getRepository( ZipCodeRepository.class );
         countryRepository = config.getRepository( CountryRepository.class );
         settlementRepository = config.getRepository( SettlementRepository.class );
         resourceTypeRep

         artifactTypeRepository = config.getRepository( ArtifactTypeRepository.class );
         artifactTypeGroupRepository = config.getRepository( ArtifactTypeGroupRepository.class );
         partyRepository = config.getRepository( PartyRepository.class );
         protocolRepository = config.getRepository( ProtocolRepository.class );
         actionRepository = config.getRepository( WorkflowRepository.class );
         partyRelationshipTypeRepository = config.getRepository( PartyRelationshipTypeRepository.class );
         partyRoleTypeRepository = config.getRepository( PartyRoleTypeRepository.class );
         localeRepository = config.getInternalizationContext();
         userRepository = config.getRepository( UserRepository.class );
      }catch( ConfigurationSetUpException e ){
         e.printStackTrace();
      }
   }
   public void tearDown() {
      config = null;
      artifactRepository = null;
      zipCodeRepository = null;
      countryRepository = null;
      settlem

      resourceTypeRepository = null;
      artifactTypeRepository = null;
      artifactTypeGroupRepository = null;
      partyRepository = null;
      protocolRepository = null;
      actionRepository = null;
      partyRelationshipTypeRepository = null;
      partyRoleTypeRepository = null;
      localeRepository = null;
      userRepository = null;
      fixtureInstance = null;
   }
   public static WorkflowRepository getActionRepository() {
      return actionRepository;
   }
   public static DefaultArtifactRepository getArtifactRepository() {
      return artifactRepository;
   }
   public static ArtifactFolderRepository getArtifactFolderRepository() {
      return artifactFolderRepository;
   }
   public static ArtifactTypeGroupRepository getArtifactTypeGroupRepository() {
      return artifactTypeGroupRepository;
   }
   public static ArtifactTypeRepository getArtifactTypeRepository() {
      return artifactTypeRepository;
   }
   public static ProcessPuzzleContext getConfig() 

      return config;
   }
   public static CountryRepository getCountryRepository() {
      return countryRepository;
   }
   public static InternalizationContext getLocaleRepository() {
      return localeRepository;
   }
   public static PartyRelationshipTypeRepository getPartyRelationshipTypeRepository() {
      return partyRelationshipTypeRepository;
   }
   public static PartyRepository getPartyRepository() {
      return partyRepository;
   }
   public static PartyRoleTypeRepository getPartyRoleTypeRepository() {
      return partyRoleTypeRepository;
   }
   public static ProtocolRepository getProtocolRepository() {
      return protocolRepository;
   }
   public static ResourceTypeRepository getResourceTypeRepository() {
      return resourceTypeRepository;
   }
   public static SettlementRepository getSettlementRepository() {
      return settlementRepository;
   }
   public static UserRepository getUserRepository() {
      return userRepository;
   }
   public static ZipCodeR
public class OSWorkflowSemanticModule extends DefaultSemanticModule {
    
    public OSWorkflowSemanticModule() {
        addHandler( "process",
                           new ProcessHandler() );
        addHandler( "start",
                           new StartNodeHandler() );
        addHandler( "end",
                           new EndNodeHandler() );
        addHandler( "ruleSet",
                           new RuleSetNodeHandler() );
        addHandler( "subProcess",
                           new SubProcessNodeHandler() );
        addHandler( "workItem",
                           new WorkItemNodeHandler() );
        addHandler( "split",
                           new SplitNodeHandler() );
        addHandler( "join",
                           new JoinNodeHandler() );
        addHandler( "milestone",
                           new MilestoneNodeHandler() );
        addHandler( "timer",
                           new TimerNodeHandler() );
        addHandler( "composite",
          

        addHandler( "step",
                           new StepNodeHandler() );
        addHandler( "connection",
                           new ConnectionHandler() );
                           new ImportHandler() );
        addHandler( "global",
                           new GlobalHandler() );        
        addHandler( "variable",
                           new VariableHandler() );        
        addHandler( "type",
                           new TypeHandler() );        
        addHandler( "value",
                           new ValueHandler() );        
        addHandler( "work",
                           new WorkHandler() );        
        addHandler( "parameter",
                           new ParameterHandler() );        
        addHandler( "mapping",
                           new MappingHandler() );        
        addHandler( "constraint",
                           new ConstraintHandler() );        
        addHandler( "in-port",
                           new InPor
public class ServiceContainer {
	private static ServiceContainer instance;
	private ItemTrackerServiceBI itemTrackerService;
	private UserServiceBI userService;
	private ProjectServiceBI projectService;
	private TeamServiceBI teamService;
	private WorkflowServiceBI workflowService;
	private ItemServiceBI itemService;
	/**
	 * Método estático que permite acceder a la única instancia de esta clase.
	 * 
	 * @return la única instancia de esta clase.
	 */
	public static ServiceContainer getInstance() {
		if (instance == null) {
			instance = new ServiceContainer();
		}
		return instance;
	}
	public ItemTrackerServiceBI getItemTrackerService() {
		return itemTrackerService;
	}
	public void setItemTrackerService(ItemTrackerServiceBI itemTrackerService) {
		this.itemTrackerService = itemTrackerService;
	}
	public UserServiceBI getUserService() {
		return userService;
	}
	public void setUserService(UserServiceBI userService) {
		this.userService = userService;
	}
	public ProjectServiceBI getPr
/**
 * Author: ellios
 * Date: 12-11-1 Time: 下午5:02
 *
 * @deprecated please use {@link me.ellios.hedwig.rpc.core.ServiceConfig.Builder} instead.
 */
public class ServiceConfigFactory {
    /**
     * 创建pb的服务配置
     *
     * @param serviceFace
     * @param serviceImpl
     * @return
     */
    public static ServiceConfig createPbServiceConfig(Class serviceFace, Class serviceImpl) {
        return createPbServiceConfig(serviceFace, serviceImpl, ServiceConfig.DEFAULT_SERVICE_PORT);
    }
    /**
     * 创建pb的服务配置
     *
     * @param serviceFace
     * @param serviceImpl
     * @param port
     * @return
     */
    public static ServiceConfig createPbServiceConfig(Class serviceFace, Class serviceImpl, int port) {
        Preconditions.checkNotNull(serviceFace, "serviceFace is null");
        Preconditions.checkNotNull(serviceImpl, "serviceImpl is null");
        return ServiceConfig.newBuilder()
                .port(port)
                .type(ServiceType.PROTOBUF)
                .se

                .serviceImpl(serviceImpl)
                .build();
    }
    /**
     * 创建thrift的服务配置
     *
     * @param serviceFace
     * @param serviceImpl
     * @return
     */
    public static ServiceConfig createThriftServiceConfig(Class serviceFace, Class serviceImpl) {
        return createThriftServiceConfig(serviceFace, serviceImpl, ServiceConfig.DEFAULT_SERVICE_PORT);
    }
    /**
     * 创建thrfit的服务配置
     *
     * @param serviceFace
     * @param serviceImpl
     * @return
     */
    public static ServiceConfig createThriftServiceConfig(Class serviceFace, Class serviceImpl, int port) {
        Preconditions.checkNotNull(serviceFace, "serviceFace is null");
        Preconditions.checkNotNull(serviceImpl, "serviceImpl is null");
        return ServiceConfig.newBuilder()
                .serviceFace(serviceFace)
                .serviceImpl(serviceImpl)
                .type(ServiceType.THRIFT)
                .port(port)
                .build();
    }
    public stat

                                                    ServiceSchema schema, ServiceType type,
                                                    Class serviceFace, Class serviceImpl) {
        return createServiceConfig(serviceName, port,
                schema, type, ServiceConfig.DEFAULT_SERVICE_GROUP,
                serviceFace, serviceImpl);
    }
    public static ServiceConfig createServiceConfig(String serviceName, int port,
                                                    ServiceSchema schema, ServiceType type,
                                                    @Nullable String serviceGroup,
                                                    Class serviceFace, Class serviceImpl) {
        Preconditions.checkArgument(StringUtils.isNotEmpty(serviceName), "serviceName is empty.");
        Preconditions.checkNotNull(schema, "schema is null");
        Preconditions.checkNotNull(type, "type is null");
        Preconditions.checkNotNull(serviceFace, "serviceFace is null");
     
/**
 * 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Repository("roleManageDAO")
public class RoleManageDAO extends ComAbstractDAO {
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception {
		return (RoleManageVO) selectByPk("roleManageDAO.selectRole", roleManageVO);
	}
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception {
		return list("roleManageDAO.selectRoleList", roleManageVO);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 

	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void insertRole(RoleManage roleManage) throws Exception {
		insert("roleManageDAO.insertRole", roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void updateRole(RoleManage roleManage) throws Exception {
		update("roleManageDAO.updateRole", roleManage);
	}
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception {
		delete("roleManageDAO.deleteRole", roleManage);
	}
    /**
	 * 롤목록 총 갯수를 조회한다.
	 * @param roleManageVO RoleManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectRoleListTotCnt(RoleManageVO roleManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("roleManageDAO.selectAuthorListTotCnt", roleManageVO);
    }	
    
	/**
	 * 등록된 모든 롤 정보 목록 조회
	 * @param
/**
 * 개요
 * - 경조관리에 대한 ServiceImpl 클래스를 정의한다.
 * 
 * 상세내용
 * - 경조관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 경조관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Service("egovCtsnnManageService")
public class EgovCtsnnManageServiceImpl extends AbstractServiceImpl implements EgovCtsnnManageService {
	@Resource(name="ctsnnManageDAO")
    private CtsnnManageDAO ctsnnManageDAO;
    /** ID Generation */  
	@Resource(name="egovCtsnnManageIdGnrService")
	private EgovIdGnrService idgenCtsnnManageService;
	@Resource(name="EgovInfrmlSanctnService")
    protected EgovInfrmlSanctnService infrmlSanctnService;
	/**
	 * 경조관리정보를 관리하기 위해 등록된 경조관리 목록을 조회한다.
	 * @param ctsnnManageVO - 경조관리 VO
	 * @return List - 경조관리 목록
	 */
	public List<CtsnnManageVO> selectCtsnnManageList(CtsnnManageVO ctsnnManageVO) throws Exception{
		ctsnnManageVO.setSearchFromDate(EgovStringUtil.removeMinusChar(ctsnnManageVO.getSearchFromDate()));
		ctsnnManageVO.setSearchToDate(EgovStri

		List<CtsnnManageVO> result = ctsnnManageDAO.selectCtsnnManageList(ctsnnManageVO);
		int num = result.size();
	    for (int i = 0 ; i < num ; i ++ ){
	    	CtsnnManageVO ctsnnManageVO1 = result.get(i);
	    	ctsnnManageVO1.setReqstDe(EgovDateUtil.formatDate(ctsnnManageVO1.getReqstDe(), "-"));
	    	ctsnnManageVO1.setOccrrDe(EgovDateUtil.formatDate(ctsnnManageVO1.getOccrrDe(), "-"));		
	    	result.set(i, ctsnnManageVO1);
	    }	
		return result;
	}
	/**
	 * 경조관리목록 총 갯수를 조회한다.
	 * @param ctsnnManageVO - 경조관리 VO
	 * @return int - 경조관리 카운트 수
	 */
	public int selectCtsnnManageListTotCnt(CtsnnManageVO ctsnnManageVO) throws Exception {
		return ctsnnManageDAO.selectCtsnnManageListTotCnt(ctsnnManageVO);
	}
	/**
	 * 등록된 경조관리의 상세정보를 조회한다.
	 * @param ctsnnManageVO - 경조관리 VO
	 * @return CtsnnManageVO - 경조관리 VO
	 */
	public CtsnnManageVO selectCtsnnManage(CtsnnManageVO ctsnnManageVO) throws Exception {
		CtsnnManageVO ctsnnManageVOTemp = ctsnnManageDAO.selectCtsnnManage(ctsnnManageVO);
		ctsnnMa

		ctsnnManageVOTemp.setOccrrDe(EgovDateUtil.formatDate(ctsnnManageVOTemp.getOccrrDe(), "-"));		
		ctsnnManageVOTemp.setBrth(EgovDateUtil.formatDate(ctsnnManageVOTemp.getBrth(), "-"));		
		return ctsnnManageVOTemp;
	}
	/**
	 * 경조관리정보를 신규로 등록한다.
	 * @param ctsnnManage - 경조관리 model
	 */
	public void insertCtsnnManage(CtsnnManage ctsnnManage) throws Exception {
		java.util.Calendar cal = java.util.Calendar.getInstance();
    	String  sYear  =Integer.toString(cal.get(java.util.Calendar.YEAR));
    	String  sMonth =Integer.toString(cal.get(java.util.Calendar.MONTH)+1);
    	if(sMonth.length() == 1) sMonth = "0"+sMonth;
    	String  sDay   =Integer.toString(cal.get(java.util.Calendar.DATE));
    	if(sDay.length() == 1) sDay = "0"+sDay;
    	ctsnnManage.setReqstDe(sYear+sMonth+sDay);
    	
		/*
		 * 경조 승인처리  신청 
		 */
    	ctsnnManage.setReqstDe(EgovStringUtil.removeMinusChar(ctsnnManage.getReqstDe()));
    	ctsnnManage.setBrth(EgovStringUtil.removeMinusChar(ctsnnManage.getBrth()));
    	ctsn

		ctsnnManage.setInfrmlSanctnId(infrmlSanctn.getInfrmlSanctnId());
		ctsnnManage.setConfmAt(infrmlSanctn.getConfmAt());
		String	sCtsnnId = idgenCtsnnManageService.getNextStringId();
		ctsnnManage.setCtsnnId(sCtsnnId);
		
		ctsnnManageDAO.insertCtsnnManage(ctsnnManage);
	}
	/**
	 * 기 등록된 경조관리정보를 수정한다.
	 * @param ctsnnManage - 경조관리 model
	 */
	public void updtCtsnnManage(CtsnnManage ctsnnManage) throws Exception {
		ctsnnManage.setReqstDe(EgovStringUtil.removeMinusChar(ctsnnManage.getReqstDe()));
    	ctsnnManage.setBrth(EgovStringUtil.removeMinusChar(ctsnnManage.getBrth()));
    	ctsnnManage.setOccrrDe(EgovStringUtil.removeMinusChar(ctsnnManage.getOccrrDe()));
		ctsnnManage.setBrth(EgovStringUtil.removeMinusChar(ctsnnManage.getBrth()));
		ctsnnManage.setOccrrDe(EgovStringUtil.removeMinusChar(ctsnnManage.getOccrrDe()));
		ctsnnManageDAO.updtCtsnnManage(ctsnnManage);
	}
	/**
	 * 기 등록된 경조관리정보를 삭제한다.
	 * @param ctsnnManage - 경조관리 model
	 */
	public void deleteCtsnnManage(CtsnnManage ctsnn

		ctsnnManage.setReqstDe(EgovStringUtil.removeMinusChar(ctsnnManage.getReqstDe()));
    	ctsnnManage.setBrth(EgovStringUtil.removeMinusChar(ctsnnManage.getBrth()));
    	ctsnnManage.setOccrrDe(EgovStringUtil.removeMinusChar(ctsnnManage.getOccrrDe()));
		/*
		 * 포상 승인처리  삭제 infrmlSanctnService.deleteInfrmlSanctn("000", vcatnManage);
		 */
		ctsnnManageDAO.deleteCtsnnManage(ctsnnManage);
	}
	/**
	 * 경조관리정보 승인 처리를 위해 신청된 경조관리 목록을 조회한다.
	 * @param ctsnnManageVO - 경조관리 VO
	 * @return List - 경조관리 목록
	 */
	public List<CtsnnManageVO> selectCtsnnManageConfmList(CtsnnManageVO ctsnnManageVO) throws Exception{
		ctsnnManageVO.setSearchFromDate(EgovStringUtil.removeMinusChar(ctsnnManageVO.getSearchFromDate()));
		ctsnnManageVO.setSearchToDate(EgovStringUtil.removeMinusChar(ctsnnManageVO.getSearchToDate()));
		List<CtsnnManageVO> result = ctsnnManageDAO.selectCtsnnManageConfmList(ctsnnManageVO);
		int num = result.size();
	    for (int i = 0 ; i < num ; i ++ ){
	    	CtsnnManageVO ctsnnManageVO1 = 

	    	ctsnnManageVO1.setReqstDe(EgovDateUtil.formatDate(ctsnnManageVO1.getReqstDe(), "-"));
	    	ctsnnManageVO1.setOccrrDe(EgovDateUtil.formatDate(ctsnnManageVO1.getOccrrDe(), "-"));	
	    	result.set(i, ctsnnManageVO1);
	    }	
		return result;
	}
	/**
	 * 경조승인목록 총 갯수를 조회한다.
	 * @param ctsnnManageVO - 경조관리 VO
	 * @return int - 경조관리 카운트 수
	 */
	public int selectCtsnnManageConfmListTotCnt(CtsnnManageVO ctsnnManageVO) throws Exception {
		return ctsnnManageDAO.selectCtsnnManageConfmListTotCnt(ctsnnManageVO);
	}
	/**
	 * 경조정보를 승인처리 한다.
	 * @param ctsnnManage - 경조관리 model
	 */
	public void updtCtsnnManageConfm(CtsnnManage ctsnnManage) throws Exception {
		 InfrmlSanctn infrmlSanctn = new InfrmlSanctn();
		 ctsnnManage.setReqstDe(EgovStringUtil.removeMinusChar(ctsnnManage.getReqstDe()));
	     ctsnnManage.setBrth(EgovStringUtil.removeMinusChar(ctsnnManage.getBrth()));
	     ctsnnManage.setOccrrDe(EgovStringUtil.removeMinusChar(ctsnnManage.getOccrrDe()));
		 if(ctsnnManage.getConfmAt().equ
public class CommonAction extends BaseAction {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	protected ProcessEngine processEngine;
	protected RepositoryService repositoryService;
	protected RuntimeService runtimeService;
	protected TaskService taskService;
	protected IdentityService identityService;
	protected FormService formService;
	protected HistoryService historyService;
	protected ManagementService managementService;
	public void setProcessEngine(ProcessEngine processEngine) {
		this.processEngine = processEngine;
	}
	public void setRepositoryService(RepositoryService repositoryService) {
		this.repositoryService = repositoryService;
	}
	public void setRuntimeService(RuntimeService runtimeService) {
		this.runtimeService = runtimeService;
	}
	public void setTaskService(TaskService taskService) {
		this.taskService = taskService;
	}
	public void setIdentityService(IdentityService identityService) {
		this.identityService = identityService;
	}
	public void setF
/**
 * @Class Name : BkmkMenuManageServiceImpl.java
 * @Description : 바로가기메뉴를 관리하는 서비스 구현 클래스
 * @Modification Information
 *
 *    수정일       수정자         수정내용
 *    -------        -------     -------------------
 *    2009. 9. 25.     윤성록
 *
 * @author 공통 컴포넌트 개발팀 윤성록
 * @since 2009. 9. 25.
 * @version
 * @see
 *
 */
@Service("bkmkMenuManageservice")
public class BkmkMenuManageServiceImpl extends AbstractServiceImpl implements BkmkMenuManageservice{
    
    @Resource(name = "bkmkMenuManageDAO")
    private BkmkMenuManageDAO bkmkMenuManageDAO;
       
    /**
     * 바로가기메뉴관리 정보를 삭제한다.
     * @param BkmkMenuManage
     * @return  
     * @exception Exception
     */
    public void deleteBkmkMenuManage(BkmkMenuManage bkmkMenuManage) throws Exception  {
        bkmkMenuManageDAO.deleteBkmkMenuManage(bkmkMenuManage);        
    }
    /**
     * 바로가기메뉴관리 정보를 등록한다.
     * @param BkmkMenuManage
     * @return  
     * @exception Exception
     */
    public void insertBkmkMenuManage(BkmkMen

        bkmkMenuManageDAO.insertBkmkMenuManage(bkmkMenuManage);        
    }
    /**
     * 바로가기메뉴관리 정보의 전체목록을 조회한다.
     * @param BkmkMenuManage
     * @return  Map<String, Object>
     * @exception Exception
     */
    public Map<String, Object> selectBkmkMenuManageList(
            BkmkMenuManageVO bkmkMenuManageVO)  throws Exception{
        
        List<BkmkMenuManageVO> result = bkmkMenuManageDAO.selectBkmkMenuManageList(bkmkMenuManageVO);
        
        int cnt = bkmkMenuManageDAO.selectBkmkMenuManageListCnt(bkmkMenuManageVO);
        Map<String, Object> map = new HashMap<String, Object>();
        
        map.put("resultList", result);
        map.put("resultCnt", Integer.toString(cnt));
        return map;  
    }
    /**
     * 바로가기메뉴관리 정보를 조회한다.
     * @param BkmkMenuManageVO
     * @return  BkmkMenuManageVO
     * @exception Exception
     */
    public BkmkMenuManageVO selectBkmkMenuManageResult(
            BkmkMenuManageVO bkmkMenuManageVO) throws Exception {
    

    }
    /**
     * 등록할  메뉴정보 목록을 조회한다.
     * @param BkmkMenuManageVO
     * @return  Map<String, Object>
     * @exception Exception
     */
    public  Map<String, Object> selectMenuList(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        
        List<BkmkMenuManageVO> result = bkmkMenuManageDAO.selectBkmkMenuList(bkmkMenuManageVO);
        
        int cnt = bkmkMenuManageDAO.selectBkmkMenuListCnt(bkmkMenuManageVO);
        Map<String, Object> map = new HashMap<String, Object>();
        
        map.put("resultList", result);
        map.put("resultCnt", Integer.toString(cnt));
        return map;  
        
    }
    /**
     * 미리보기를 할 바로가기메뉴관리의 목록을 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return  List<MenuManageVO> 
     * @throws Exception
     */
    public List<MenuManageVO>  selectBkmkPreviewList(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        
                
        List<MenuManageVO> result = bkmkMenuManageDA
public enum QueueType {
	QUEUE_SYSTEM("system", 2, ProcessType.SYSTEM_PROCESS),
	QUEUE_BACKGROUND("background", 3, ProcessType.BACKGROUND_PROCESS),
	QUEUE_BATCH("batch", 4, ProcessType.BATCH_PROCESS), 
	QUEUE_INTERACTIVE("interactive", 1, ProcessType.INTERACTIVE_PROCESS);
	private String name;
	private int priority;
	private ProcessType[] processTypes;
	private QueueType(String name, int priority, ProcessType... processTypes) {
		this.name = name;
		this.priority = priority;
		this.processTypes = processTypes;
	}
	public int getPriority() {
		return priority;
	}
	public String getName() {
		return name;
	}
	public ProcessType[] getProcessTypes() {
		return processTypes;
	}
	public static QueueType getByName(String name) {
		for (QueueType queueType : values()) {
			if (queueType.name.equals(name)) {
				return queueType;
			}
		}
		return null;
	}
	public static QueueType getByProcessType(ProcessType processType) {
		for (QueueType queueType : values()) {
			if (Arrays.asList(queueType
/**
 * 
 */
/**
 * @author oded
 *
 */
public class ChainFactoryTest {
	@Test
	public void test() {
		Request request = new Request("Jack","7","8");
		
		Handler firstHandler = new OHandler();
		Handler secondHandler = new JHandler();
		Handler thirdHandler = new TomHandler();
		Handler headHandler;
		
		ChainFactory classUnderTest = new ChainFactory();
		
		classUnderTest.registerHandler(firstHandler);
		classUnderTest.registerHandler(secondHandler);
		classUnderTest.registerHandler(thirdHandler);
		
		headHandler= classUnderTest.getChain();
				
				
		
		Boolean actualOutput = headHandler.handleRequest(request);
		
		assertTrue("Handler failed to grab",actualOutput);
	}
	@Test
	public void test2() {
		Request request = new Request("Oded","9","108");
		
		Handler firstHandler = new OHandler();
		Handler headHandler;
		
		ChainFactory classUnderTest = new ChainFactory();
		
		classUnderTest.registerHandler(firstHandler);
		
		headHandler= classUnderTest.getChain();
				
				
		
		Bool

		
		assertTrue("Handler failed to grab",actualOutput);
	}
	@Test
	public void test3_tom() {
		Request request = new Request("TomHedges","6","7");
		
		Handler firstHandler = new TomHandler();
		Handler headHandler;
		
		ChainFactory classUnderTest = new ChainFactory();
		
		classUnderTest.registerHandler(firstHandler);
		
		headHandler= classUnderTest.getChain();
		
		Boolean actualOutput = headHandler.handleRequest(request);
		
		assertTrue("Handler failed to grab",actualOutput);
	}
	@Test
	public void test4_oded() {
		Request request = new Request("TomHedges","9","10");
		
		Handler firstHandler = new OHandler();
		Handler secondHandler = new JHandler();
		Handler thirdHandler = new TomHandler();
		Handler headHandler;
		
		ChainFactory classUnderTest = new ChainFactory();
		
		classUnderTest.registerHandler(firstHandler);
		classUnderTest.registerHandler(secondHandler);
		classUnderTest.registerHandler(thirdHandler);
		
		headHandler= classUnderTest.getChain();
				
				
		
		Bool
/**
 * Implementação da classe {@link Comparator} para tratar com processos.
 * O algoritmo simplemente compara os {@link Process#getComputingTime()} de cada processo.
 * */
class ProcessComparator implements Comparator<Process> {
	@Override
	public int compare(Process p1, Process p2) {
		return p1.getComputingTime() - p2.getComputingTime();
	}		
public class ShortJobFirst extends Algorithm {
	private ArrayList<Process> processes;
	public ShortJobFirst() {
		processes = new ArrayList<Process>();
	}
	public void addProcess(Process process) {
		processes.add(process);		
	}
	public void setProcess(int i, Process process) {
		processes.set(i, process);
	}
	@Override
	public void run() {
		Collections.sort(processes, new ProcessComparator());
		int terminatedProcess = 0;
		
		while(true) {
			
			for(Process process: processes) {
				if(process.isTerminated()) {
					terminatedProcess++;
				}
			}
			
			if(terminatedProcess == processes.size()) {
				break;
			}
			
			terminatedProcess =
/**
 * Created by ASUS on 2015/12/27.
 */
@Service
@Transactional
public class NavManageService {
    @Autowired
    private NavManageDao navManageDao;
    public List<HomeworkNavManageVo> fetchAllNavManage() {
        List<Homework_Nav_Manage_Entity> navManageEntities = navManageDao.fetchAllNavManageEntity();
        if (navManageEntities == null || navManageEntities.isEmpty()) {
            return null;
        } else {
            List<HomeworkNavManageVo> rootNavManageEntities = new ArrayList<HomeworkNavManageVo>(navManageEntities.size());
            List<HomeworkNavManageVo> subNavManageEntities = new ArrayList<HomeworkNavManageVo>(navManageEntities.size());
            for (Homework_Nav_Manage_Entity nav_manage_entity : navManageEntities) {
                HomeworkNavManageVo navManageVo = new HomeworkNavManageVo();
                try {
                    BeanUtils.copyProperties(navManageVo, nav_manage_entity);
                } catch (IllegalAccessException e) {
            

                } catch (InvocationTargetException e) {
                    e.printStackTrace();
                }
                if (nav_manage_entity.getNav_parent_id().equals("root")) {
                    rootNavManageEntities.add(navManageVo);
                } else {
                    subNavManageEntities.add(navManageVo);
                }
            }
            for (HomeworkNavManageVo rootEntity : rootNavManageEntities) {
                rootEntity.setChildNavManageVoList(assembleNavManage(rootEntity, subNavManageEntities));
            }
            return rootNavManageEntities;
        }
    }
    /**
     * 递归元素
     *
     * @param rootNavManageEntity
     * @param subNavManageEntities
     * @return
     */
    public List<HomeworkNavManageVo> assembleNavManage(HomeworkNavManageVo rootNavManageEntity, List<HomeworkNavManageVo> subNavManageEntities) {
        List<HomeworkNavManageVo> childNavManageList = new ArrayList<HomeworkNavManageVo>();
        for (HomeworkNa

            if (rootNavManageEntity.getNav_id().equals(subNavManageNav.getNav_parent_id())) {
                subNavManageNav.setChildNavManageVoList(assembleNavManage(subNavManageNav, subNavManageEntities));
                childNavManageList.add(subNavManageNav);
            }
        }
        return childNavManageList;
    }
    public void addNavManageEntity(Map<String, Object> params) {
        Homework_Nav_Manage_Entity navManageEntity=copyNavManageEntity(params);
        navManageEntity.setNav_id(StringToolsUtils.getCommonUUID());
        navManageEntity.setNav_createtime(DateToolsUtils.getTodayCurrentTime());
        navManageDao.addObjInfo(navManageEntity);
    }
    public void delNavManageEntity(String idVal) {
        navManageDao.deleteObjectById(Homework_Nav_Manage_Entity.class, idVal);
    }
    public void updateMangeEntity(Map<String, Object> params) {
        navManageDao.updateObjInfo(copyNavManageEntity(params));
    }
    public List<Homework_Nav_Manage_Entity> f
/**
 * Created by xiaohao on 2014/8/1.
 *
 */
public class DubboCallor {
    IDubboDemoService service;
    IDubboHessianDemoService hessianDemoService;
    IDubboRmiDemoService rmiDemoService;
    IDubboWebServiceDemoService webServiceDemoService;
    public void test(){
        System.out.println("####################################################################################################");
        System.out.println();
        String result =service.sayHello("xiaopang");
        System.out.println(result);
        String rmiResult =rmiDemoService.rmiSayHello("xiaohaohao");
        System.out.println(rmiResult);
        String hasseinResult =hessianDemoService.hasseinSayHello("xiaohaolilili");
        System.out.println(hasseinResult);
        System.out.println();
        System.out.println("####################################################################################################");
    }
    public IDubboDemoService getService() {
        return service;
    }
 
/**
 * Implements a factory for producing sesame repositories, thereby avoiding
 * hard wiring of the type of sesame repository being used.
 * @author Sidney Bailin
 *
 */
public class SesameRepositoryFactory {
	public enum RepositoryType {
		NATIVE,
		NATIVE_WITH_INFERENCER,
		MEMORY,
		MEMORY_WITH_INFERENCER		
	}
	public Repository getRepository(RepositoryType type, String path) {
		switch (type) {
		case NATIVE:
			return createNativeRepository(path);
		case NATIVE_WITH_INFERENCER:
			return createNativeRepositoryWithInferencer(path);
		case MEMORY:
			return createMemoryRepository(path);
		case MEMORY_WITH_INFERENCER:
			return createMemoryRepositoryWithInferencer(path);
		default:
			throw new IllegalArgumentException("Unrecognized repository type: " + type);
		}
	}
	private Repository createNativeRepository(String path) {
		File dataDir = new File(path);
		Repository myRepository = new SailRepository(new NativeStore(dataDir));
		try {
			myRepository.initialize();
		}
		catch (Re

			Util.logException(e,  this.getClass());
		}
		return myRepository;
	}
	private Repository createNativeRepositoryWithInferencer(String path) {
		File dataDir = new File(path);
		Repository myRepository = new SailRepository(
									new ForwardChainingRDFSInferencer(
										new NativeStore(dataDir)));
		try {
			myRepository.initialize();
		}
		catch (RepositoryException e) {
			Util.logException(e,  this.getClass());
		}
		return myRepository;
	}
	private Repository createMemoryRepository(String path) {
		File dataDir = new File(path);
		Repository myRepository = new SailRepository(new MemoryStore(dataDir));
		try {
			myRepository.initialize();
		}
		catch (RepositoryException e) {
			Util.logException(e,  this.getClass());
		}
		return myRepository;
	}
	private Repository createMemoryRepositoryWithInferencer(String path) {
		File dataDir = new File(path);
		Repository myRepository = new SailRepository(
		                          	new ForwardChainingRDFSInferencer(
		         
/**
 * 개요
 * - 팝업창에 대한 DAO를 정의한다.
 * 
 * 상세내용
 * - 팝업창에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 팝업창의 조회기능은 목록조회, 상세조회로, 사용자화면 보기로 구분된다.
 * @author 이창원
 * @version 1.0
 * @created 05-8-2009 오후 2:21:04
 */
@Repository("popupManageDAO")
public class PopupManageDAO extends EgovComAbstractDAO {
	public PopupManageDAO(){}
	/**
	 * 기 등록된 팝업창정보를 삭제한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 * 
	 * @param popupManage
	 */
	public void deletePopup(PopupManageVO popupManageVO) throws Exception {
	    delete("PopupManage.deletePopupManage", popupManageVO);
	}
	/**
	 * 팝업창정보를 신규로 등록한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 * 
	 * @param popupManage
	 */
	public void insertPopup(PopupManageVO popupManageVO) throws Exception {
	    insert("PopupManage.insertPopupManage", popupManageVO);
	}
        /**
         * 기 등록된 팝업창정보를 수정한다.
         * @param popupManage - 팝업창 model
         * @return boolean - 반영성공 여부
         * 
         * @param popupMan

         */
        public void updatePopup(PopupManageVO popupManageVO) throws Exception {
            update("PopupManage.updatePopupManage", popupManageVO);
        }
	/**
	 * 팝업창을 사용자 화면에서 볼수 있는 정보들을 조회한다.
	 * @param popupManageVO - 팝업창 Vo
	 * @return popupManageVO - 팝업창 Vo
	 * 
	 * @param popupManageVO
	 */
	public PopupManageVO selectPopup(PopupManageVO popupManageVO) throws Exception {
	    return (PopupManageVO)getSqlMapClientTemplate().queryForObject("PopupManage.selectPopupManageDetail", popupManageVO);
	}
	/**
	 * 팝업창를 관리하기 위해 등록된 팝업창목록을 조회한다.
	 * @param popupManageVO - 팝업창 Vo
	 * @return List - 팝업창 목록
	 * 
	 * @param popupManageVO
	 */
	public List selectPopupList(PopupManageVO popupManageVO) throws Exception {
	    return (List)list("PopupManage.selectPopupManage", popupManageVO);
	}
        /**
         * 팝업창를 관리하기 위해 등록된 팝업창목록 총갯수를 조회한다.
         * @param popupManageVO - 팝업창 Vo
         * @return List - 팝업창 목록
         * 
         * @param popupManageVO
         */
    
public class BullyAlgorithm {
	static final int NUMBER_OF_PROCESSES = 8;
	public static void main(String[] args) {
		System.out.println("Bully Algorithm..................");
		System.out.println("");
		Process[] processContainer = createProcesses(NUMBER_OF_PROCESSES);
		startProcesses(processContainer);
		
	}
	static void startProcesses(Process[] processContainer){
		for(int i=0; i<processContainer.length; ++i){
			processContainer[i].setProcessContainer(processContainer);
			processContainer[i].start();
		}
	}
	static Process[] createProcesses(final int numberOfProcessesToInitiate){
		Process[] processContainer = new Process[numberOfProcessesToInitiate];
		for(int i=0; i<numberOfProcessesToInitiate; ++i){
			MessageQueue messageQueue = new MessageQueue();
			Communicator communicator = new Communicator(i, messageQueue);
			Protocol protocol = new Protocol(i, communicator);
			MyThread myThread = new MyThread(protocol);
			Process process = new Process(i, 
										communicator, 
				
/**
 * Copyright (C) 2011, 2012 camunda services GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * <p>The process archive service manages {@link ProcessArchive} deployments.</p>
 *
 * <p>This class allows to install and uninstall {@link ProcessArchive ProcessArchives} 
 * to a managed process engine and through that process, obtain a handle to 
 * a {@link ProcessEngine}.</p>
 * 
 * <p>Users of this class may look up an instance of the service through a lookup strategy
 * appropriate for the platform they are using (Exam

 * 
 * @author Daniel Meyer
 */
public interface ProcessArchiveService {
  
  public ProcessArchiveInstallation installProcessArchive(ProcessArchive processArchive);
  public void unInstallProcessArchive(ProcessArchive processArchive);
  
  public void unInstallProcessArchive(String processArchiveName);
  
  public List<ProcessArchive> getInstalledProcessArchives();
  
  public List<ProcessArchive> getInstalledProcessArchives(ProcessEngine processEngine);
  
  public List<ProcessArchive> getInstalledProcessArchives(String processEngineName);
  
  public ProcessArchive getProcessArchiveByProcessDefinitionId(String processDefinitionId, String processEngineName);
  
  public ProcessArchive getProcessArchiveByProcessDefinitionKey(String processDefinitionKey, String processEngineName);
  
  
  public static interface ProcessArchiveInstallation {
    /**
     * @return the {@link ProcessEngine} to which the {@link ProcessArchive} was installed.
     */
    public ProcessEngine getProcessEng
/**
 * @author Jacky.gao
 * @since 2013年9月22日
 */
public interface ProcessClient {
	public static final String BEAN_ID="uflo.processClient";
	ProcessDefinition getProcessById(long processId);
	ProcessDefinition getProcessByKey(String key);
	ProcessDefinition getProcessByName(String processName);
	ProcessDefinition getProcessByName(String processName,int version);
	ProcessInstance startProcessById(long processId,StartProcessInfo startProcessInfo);
	ProcessInstance startProcessByKey(String key,StartProcessInfo startProcessInfo);
	ProcessInstance startProcessByName(String processName,StartProcessInfo startProcessInfo);
	void deleteProcessInstanceById(long processInstanceId);
	ProcessInstance getProcessInstanceById(long processInstanceId);
	List<Variable> getProcessVariables(long processInsanceId);
	List<Variable> getProcessVariables(ProcessInstance processInsance);
	Object getProcessVariable(String key,ProcessInstance processInstance);
	Object getProcessVariable(String key,long processIns
/**
 * 개요
 * - 개인연차관리에 대한 Service Interface를 정의한다.
 *
 * 상세내용
 * - 개인연차관리에 대한 등록, 수정, 삭제, 조회 기능을 제공한다.
 * @author 이기하
 * @version 1.0
 * @created 2014.11.14
 */
public interface EgovIndvdlYrycManageService {
	/**
	 * 개인연차를 조회처리한다.
	 * @param indvdlYrycManage - 개인연차관리 model
	 */
	public List<IndvdlYrycManage> selectIndvdlYrycManageList(IndvdlYrycManage indvdlYrycManage) throws Exception;
	/**
	 * 연차목록 총 갯수를 조회한다.
	 * @param indvdlYrycManage - 개인연차관리 model
	 */
	public int selectIndvdlYrycManageListTotCnt(IndvdlYrycManage indvdlYrycManage) throws Exception;
	/**
	 * 개인연차를 입력처리한다.
	 * @param indvdlYrycManage - 개인연차관리 model
	 */
	public void insertIndvdlYrycManage(IndvdlYrycManage indvdlYrycManage) throws Exception;
	/**
	 * 개인연차를 수정한다.
	 * @param indvdlYrycManage - 개인연차관리 model
	 */
	public void updtIndvdlYrycManage(IndvdlYrycManage indvdlYrycManage) throws Exception;
	/**
	 * 개인연차를 삭제한다.
	 * @param indvdlYrycManage - 개인연차관리 model
	 */
	public void deleteIndvdlYrycManage(IndvdlYrycManage 
/**
 * 설문항목관리를 처리하는 Dao Class 구현
 * @author 공통서비스 장동한 
 * @since 2009.03.20
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  장동한          최초 생성
 *
 * </pre>
 */
@Repository("qustnrItemManageDao")
public class QustnrItemManageDao extends EgovComAbstractDAO {
    /**
	 * 설문템플릿(을)를  목록을 조회한다. 
	 * @param qustnrItemManageVO - 설문항목 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
	public List selectQustnrTmplatManageList(QustnrItemManageVO qustnrItemManageVO) throws Exception{
		return (List)list("QustnrItemManage.selectQustnrTmplatManage", qustnrItemManageVO);
	}
    /**
	 * 설문항목 목록을 조회한다. 
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	public List selectQustnrItemManageList(ComDefaultVO searchVO) throws Exception{
		return (List)list("QustnrItemManage.selectQustnrItemManage", searchVO);
	}
    /**
	 * 설문항목를(을) 상세조회 

	 * @param qustnrItemManageVO - 설문항목 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
	public List selectQustnrItemManageDetail(QustnrItemManageVO qustnrItemManageVO) throws Exception{
		return (List)list("QustnrItemManage.selectQustnrItemManageDetail", qustnrItemManageVO);
	}
    /**
	 * 설문항목를(을) 목록 전체 건수를(을) 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return int
	 * @throws Exception
	 */
	public int selectQustnrItemManageListCnt(ComDefaultVO searchVO) throws Exception{
		return (Integer)getSqlMapClientTemplate().queryForObject("QustnrItemManage.selectQustnrItemManageCnt", searchVO);
	}
    /**
	 * 설문항목를(을) 등록한다.
	 * @param qqustnrItemManageVO - 설문항목 정보 담김 VO
	 * @throws Exception
	 */
	public void insertQustnrItemManage(QustnrItemManageVO qustnrItemManageVO) throws Exception{
		insert("QustnrItemManage.insertQustnrItemManage", qustnrItemManageVO);
	}
    /**
	 * 설문항목를(을) 수정한다.
	 * @param qustnrItemManageVO - 설문항목 정보 담김 VO
	 * @throws Exception
	 */
	public void updateQustnrI
public class RecepteurBean {
	RecepteurService recepteurService;
	ServiceService serSevice = new ServiceServiceImpl();
	Recepteur recepteur = new Recepteur();
	List<Recepteur> recepteurs;
	Integer service;
	public Integer getService() {
		return service;
	}
	public void setService(Integer service) {
		this.service = service;
	}
	public RecepteurService getRecepteurService() {
		return recepteurService;
	}
	public void setRecepteurService(RecepteurService recepteurService) {
		this.recepteurService = recepteurService;
	}
	public Recepteur getRecepteur() {
		return recepteur;
	}
	public void setRecepteur(Recepteur recepteur) {
		this.recepteur = recepteur;
	}
	public List<Recepteur> getRecepteurs() {
		recepteurs = recepteurService.getAll();
		return recepteurs;
	}
	public void setRecepteurs(List<Recepteur> recepteurs) {
		this.recepteurs = recepteurs;
	}
	public void add(Recepteur rec) {
		rec.setService(serSevice.getById(service));
		recepteurService.add(rec);
	}
	public void delete(in
/**
 * 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Repository("roleManageDAO")
public class RoleManageDAO extends EgovComAbstractDAO {
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception {
		return (RoleManageVO) select("roleManageDAO.selectRole", roleManageVO);
	}
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception {
		return (List<RoleManageVO>) list("roleManageDAO.selectRoleList", roleManageVO);
	}
	/**
	 * 시스템 메뉴에 따른 접

	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void insertRole(RoleManage roleManage) throws Exception {
		insert("roleManageDAO.insertRole", roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void updateRole(RoleManage roleManage) throws Exception {
		update("roleManageDAO.updateRole", roleManage);
	}
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception {
		delete("roleManageDAO.deleteRole", roleManage);
	}
    /**
	 * 롤목록 총 갯수를 조회한다.
	 * @param roleManageVO RoleManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectRoleListTotCnt(RoleManageVO roleManageVO) throws Exception {
        return (Integer)select("roleManageDAO.selectAuthorListTotCnt", roleManageVO);
    }	
    
	/**
	 * 등록된 모든 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @re
public class __FileSystemRepositories {
	private InvoiceRepository invoiceRepository;
	private InvoiceEntryRepository invoiceEntryRepository;
	private CollaboratorRepository collaboratorRepository;
	private ClientRepository clientRepository;
	private TimeEntryRepository timeEntryRepository;
	public __FileSystemRepositories(File baseDir) {
		RepositoryRegistry repositoryRegistry = new RepositoryRegistry();
		collaboratorRepository = new CollaboratorFileSystemRepository(new File(baseDir, "collaborators.json"));
		repositoryRegistry.setRepository(CollaboratorRepository.class, collaboratorRepository);
		clientRepository = new ClientFileSystemRepository(new File(baseDir, "clients.json"));
		repositoryRegistry.setRepository(ClientRepository.class, clientRepository);
		timeEntryRepository = new TimeEntryFileSystemRepository(new File(baseDir, "timeEntries.json"), repositoryRegistry);
		repositoryRegistry.setRepository(TimeEntryRepository.class, timeEntryRepository);
		invoiceEntryRepository = 
public class RestServiceFactory {
    private AuthService _authService;
    private FavelistsService _favelistsService;
    private SearchService _searchService;
    private SongsService _songsService;
    private TrendingService _trendingService;
    private UserService _userService;
    private UsersService _usersService;
    
    @Inject
    public RestServiceFactory(AuthService authService, FavelistsService favelistsService, SearchService searchService, SongsService songsService, TrendingService trendingService, UserService userService, UsersService usersService) {
         _authService = authService;
         _favelistsService = favelistsService;
         _searchService = searchService;
         _songsService = songsService;
         _trendingService = trendingService;
         _userService = userService;
         _usersService = usersService;
        }
    public AuthService auth() {
        return _authService;
    }
    public FavelistsService favelists() {
        return _fave
public class XMLParser  implements Parser {
  private Handler openTagHandler;
  private Handler closeTagHandler;
  private Handler textValueHandler;
  private Handler startHandler;
  private Handler endHandler;
  private Handler errHandler;
  private StreamReader reader;
  private StateMashineTag tag;
  public static class Builder {
    private Handler openTagHandler;
    private Handler closeTagHandler;
    private Handler textValueHandler;
    private Handler startHandler;
    private Handler endHandler;
    private Handler errHandler;
    public Builder setOpenTagHandler(Handler openTagHandler) {
      this.openTagHandler = openTagHandler;
      return this;
    }
    public Builder setCloseTagHandler(Handler closeTagHandler) {
      this.closeTagHandler = closeTagHandler;
      return this;
    }
    public Builder setTextValueHandler(Handler textValueHandler) {
      this.textValueHandler = textValueHandler;
      return this;
    }
    public Builder setStartHandler(Handler start

      this.startHandler = startHandler;
      return this;
    }
    public Builder setEndHandler(Handler endHandler) {
      this.endHandler = endHandler;
      return this;
    }
    public Builder setErrHandler(Handler errHandler) {
      this.errHandler = errHandler;
      return this;
    }
    public XMLParser build() {
      return new XMLParser(this);
    }
  }
  public XMLParser() {
  }
  private XMLParser(Builder builder) {
    openTagHandler = builder.openTagHandler;
    closeTagHandler = builder.closeTagHandler;
    textValueHandler = builder.textValueHandler;
    startHandler = builder.startHandler;
    endHandler = builder.endHandler;
    errHandler = builder.errHandler;
  }
  public String parse(String string) throws IOException {
    reader = new StreamReader(string);
    return parseReader(reader);
  }
  public String parse(File file) throws IOException {
    reader = new StreamReader(file);
    return parseReader(reader);
  }
  @Override
  public String parse(InputSt

    reader = new StreamReader(inputStream);
    return parseReader(reader);
  }
  public void close(){
    reader.close();
  }
  private String parseReader(StreamReader reader) throws IOException {
    tag = new StateMashineTag(this);
    int symbol;
    do {
      try {
        symbol = reader.read();
        tag.next((char) symbol);
      } catch (Exception e) {
        return "";
      }
    } while (symbol != -1);
    return "";
  }
  public void onOpenTag(ParserData parserData) {
    if (openTagHandler != null) {
      openTagHandler.handle(parserData);
    }
    parserData.putTagInStack();
    parserData.clear();
  }
  public void onCloseTag(ParserData parserData) {
    if (closeTagHandler != null) {
      closeTagHandler.handle(parserData);
    }
    if (!parserData.getStackElement().equals(parserData.getTag())) {
      onError(parserData);
    }
    parserData.clear();
  }
  public void onTextValue(ParserData parserData) {
    if (textValueHandler != null) {
      textValueHan
/**
 * 개요
 * - 당직관리에 대한 Service Interface를 정의한다.
 * 
 * 상세내용
 * - 당직관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 당직관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
public interface EgovBndtManageService {
	/**
	 * 당직관리 정보를 관리하기 위해 등록된 당직관리 목록을 조회한다.
	 * @param bndtManageVO - 당직관리 VO
	 * @return List - 당직관리 목록
	 */
	public List<BndtManageVO> selectBndtManageList(BndtManageVO bndtManageVO) throws Exception;
	/**
	 * 당직관리 목록 총 갯수를 조회한다.
	 * @param bndtManageVO - 당직관리 VO
	 * @return int - 당직관리 카운트 수
	 */
	public int selectBndtManageListTotCnt(BndtManageVO bndtManageVO) throws Exception ;
	/**
	 * 등록된 당직관리의 상세정보를 조회한다.
	 * @param bndtManageVO - 당직관리 VO
	 * @return BndtManageVO - 당직관리 VO
	 */
	public BndtManageVO selectBndtManage(BndtManageVO bndtManageVO) throws Exception;
	/**
	 * 당직관리 정보를 신규로 등록한다.
	 * @param bndtManage - 당직관리 model
	 */
	public void insertBndtManage(BndtManage bndtManage) throws Exception;
	/**
	 * 기 등록된 당직관리 정보를 수정한다.
	 * @pa

	 */
	public void updtBndtManage(BndtManage bndtManage) throws Exception;
	/**
	 * 기 등록된 당직관리 정보를 삭제한다.
	 * @param bndtManage - 당직관리 model
	 */
	public void deleteBndtManage(BndtManage bndtManage) throws Exception;
    /**
	 * 당직일지 갯수를 조회한다.
	 * @param bndtManageVO - 당직관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectBndtDiaryTotCnt(BndtManage bndtManage) throws Exception;
    /***** 당직 체크관리 *****/	
	/**
	 * 당직체크관리 정보를 관리하기 위해 등록된 당직체크관리 목록을 조회한다.
	 * @param bndtCeckManageVO - 당직체크관리 VO
	 * @return List - 당직체크관리 목록
	 */
	public List<BndtCeckManageVO> selectBndtCeckManageList(BndtCeckManageVO bndtCeckManageVO) throws Exception;
	/**
	 * 당직체크관리 목록 총 갯수를 조회한다.
	 * @param bndtCeckManageVO - 당직체크관리 VO
	 * @return int - 당직체크관리 카운트 수
	 */
	public int selectBndtCeckManageListTotCnt(BndtCeckManageVO bndtCeckManageVO) throws Exception ;
	/**
	 * 등록된 당직체크관리의 상세정보를 조회한다.
	 * @param bndtCeckManageVO - 당직체크관리 VO
	 * @return BndtCeckManageVO - 당직체크관리 VO
	 */
	public BndtCeckM

	/**
	 * 당직체크관리 정보를 신규로 등록한다.
	 * @param bndtCeckManage - 당직체크관리 model
	 */
	public void insertBndtCeckManage(BndtCeckManage bndtCeckManage) throws Exception;
	/**
	 * 기 등록된 당직체크관리 정보를 수정한다.
	 * @param bndtCeckManage - 당직체크관리 model
	 */
	public void updtBndtCeckManage(BndtCeckManage bndtCeckManage) throws Exception;
	/**
	 * 기 등록된 당직체크관리 정보를 삭제한다.
	 * @param bndtCeckManage - 당직체크관리 model
	 */
	public void deleteBndtCeckManage(BndtCeckManage bndtCeckManage) throws Exception;
    /**
	 * 당직체크 중복여부 조회한다.
	 * @param bndtCeckManageVO - 당직체크관리 VO
	 * @return int
	 * @exception Exception
	 */
	public int selectBndtCeckManageDplctAt(BndtCeckManage bndtCeckManage) throws Exception ;
    /***** 당직 일지 *****/
	/**
	 * 등록된 당직일지관리의 상세정보를 조회한다.
	 * @param bndtDiaryVO - 당직일지관리 VO
	 * @return BndtDiaryVO - 당직일지관리 VO
	 */
	public List selectBndtDiary(BndtDiaryVO bndtDiaryVO) throws Exception;
	/**
	 * 당직일지관리 정보를 신규로 등록한다.
	 * @param bndtDiary - 당직일지관리 model
	 */
	public void insertBndtDiary(BndtDiary b
public class ProcessSemanticModule extends DefaultSemanticModule implements SemanticModule {    
    public ProcessSemanticModule() {
        addHandler( "process",
                           new ProcessHandler() );
        addHandler( "start",
                           new StartNodeHandler() );
        addHandler( "end",
                           new EndNodeHandler() );
        addHandler( "actionNode",
                           new ActionNodeHandler() );
        addHandler( "ruleSet",
                           new RuleSetNodeHandler() );
        addHandler( "subProcess",
                           new SubProcessNodeHandler() );
        addHandler( "workItem",
                           new WorkItemNodeHandler() );
        addHandler( "split",
                           new SplitNodeHandler() );
        addHandler( "join",
                           new JoinNodeHandler() );
        addHandler( "milestone",
                           new MilestoneNodeHandler() );
        addHandler

                           new TimerNodeHandler() );
        addHandler( "humanTask",
                           new HumanTaskNodeHandler() );
        addHandler( "forEach",
                           new ForEachNodeHandler() );
        addHandler( "composite",
                           new CompositeNodeHandler() );
        addHandler( "connection",
                           new ConnectionHandler() );
                           new ImportHandler() );
        addHandler( "functionImport",
                           new FunctionImportHandler() );
        addHandler( "global",
                           new GlobalHandler() );        
        addHandler( "variable",
                           new VariableHandler() );        
        addHandler( "swimlane",
                           new SwimlaneHandler() );        
        addHandler( "type",
                           new TypeHandler() );        
        addHandler( "value",
                           new ValueHandler() );        
    

                           new WorkHandler() );        
        addHandler( "parameter",
                           new ParameterHandler() );        
        addHandler( "mapping",
                           new MappingHandler() );        
        addHandler( "constraint",
                           new ConstraintHandler() );        
        addHandler( "in-port",
                           new InPortHandler() );        
        addHandler( "out-port",
                           new OutPortHandler() );        
        addHandler( "eventNode",
                		   new EventNodeHandler() );        
        addHandler( "eventFilter",
                		   new EventFilterHandler() );        
        addHandler( "fault",
     		   			   new FaultNodeHandler() );        
        addHandler( "exceptionHandler",
	   			   		   new ExceptionHandlerHandler() );        
        addHandler( "timer",
                		   new TimerHandler() );
        addHandler( "trigger",
     		               new
/**
 * Created by lihao on 9/28/14.
 */
@Service("processFileAttachManager")
public class ProcessFileAttachManagerImpl implements ProcessFileAttachManager {
    @Autowired
    ProcessFileAttachDao processFileAttachDao;
    
    public List<ProcessFileAttach> listProcessFileAttachs(Map<String, Object> map, Integer start, Integer limit) {
        return processFileAttachDao.listProcessFileAttachs(map,new RowBounds(start,limit));
    }
    public Integer listProcessFileAttachsCount(Map<String, Object> map) {
        return processFileAttachDao.listProcessFileAttachsCount(map);
    }
    public ProcessFileAttach getProcessFileAttachById(Long id) {
        return processFileAttachDao.getProcessFileAttachById(id);
    }
    public void updateProcessFileAttach(ProcessFileAttach attach) {
        processFileAttachDao.updateProcessFileAttach(attach);
    }
    public void deleteProcessFileAttach(Long id) {
        processFileAttachDao.deleteProcessFileAttach(id);
    }
    public void saveProce
/**
 * 개요
 * - 팝업창에 대한 ServiceImpl을 정의한다.
 *
 * 상세내용
 * - 팝업창에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 팝업창의 조회기능은 목록조회, 상세조회로, 사용자화면 보기로 구분된다.
 * @author 이창원
 * @version 1.0
 * @created 05-8-2009 오후 2:19:58
 */
@Service("egovPopupManageService")
public class EgovPopupManageServiceImpl extends EgovAbstractServiceImpl implements EgovPopupManageService {
	@Resource(name = "popupManageDAO")
	public PopupManageDAO dao;
	@Resource(name = "egovPopupManageIdGnrService")
	private EgovIdGnrService idgenService;
	public EgovPopupManageServiceImpl() {
	}
	/**
	 * 기 등록된 팝업창정보를 삭제한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 *
	 * @param popupManage
	 */
	@Override
	public void deletePopup(PopupManageVO popupManageVO) throws Exception {
		dao.deletePopup(popupManageVO);
	}
	/**
	 * 팝업창정보를 신규로 등록한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 *
	 * @param popupManage
	 */
	@Override
	public void insertPopup(PopupManageVO popupManageVO) throws Exception {

		String sMakeId = idgenService.getNextStringId();
		popupManageVO.setPopupId(sMakeId);
		dao.insertPopup(popupManageVO);
	}
	/**
	 * 기 등록된 팝업창정보를 수정한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 *
	 * @param popupManage
	 */
	@Override
	public void updatePopup(PopupManageVO popupManageVO) throws Exception {
		dao.updatePopup(popupManageVO);
	}
	/**
	 * 팝업창을 사용자 화면에서 볼수 있는 정보들을 조회한다.
	 * @param popupManageVO - 팝업창 Vo
	 * @return popupManageVO - 팝업창 Vo
	 *
	 * @param popupManageVO
	 */
	@Override
	public PopupManageVO selectPopup(PopupManageVO popupManageVO) throws Exception {
		return dao.selectPopup(popupManageVO);
	}
	/**
	 * 팝업창를 관리하기 위해 등록된 팝업창목록을 조회한다.
	 * @param popupManageVO - 팝업창 Vo
	 * @return List - 팝업창 목록
	 *
	 * @param popupManageVO
	 */
	@Override
	public List<?> selectPopupList(PopupManageVO popupManageVO) throws Exception {
		return dao.selectPopupList(popupManageVO);
	}
	/**
	 * 팝업창를 관리하기 위해 등록된 팝업창목록을 조회한다.
	 * @param popupManageVO - 팝업창 Vo
	 *
public class GenericProcessTable {
    public ArrayList<String> getGenericProcessIdList() {
        return new ArrayList<String>(ContentTable.keySet());
    }
    public class GenericProcessTableEntry {
        public String GenericProcessName;
        public String GenericProcessEntityID;
        public boolean isProcessReversible;
        public boolean isTransport;
        public String Tissue;
        public GenericProcessTableEntry(String GenericProcessEntityID, String GenericProcessName, boolean isProcessReversible,boolean isTransport,String Tissue) {
            this.GenericProcessName = GenericProcessName;
            this.isProcessReversible = isProcessReversible;
            this.GenericProcessEntityID = GenericProcessEntityID;
            this.isTransport =isTransport;
            this.Tissue =Tissue;
        }
        public GenericProcessTableEntry(String GenericProcessEntityID, String GenericProcessName, boolean isProcessReversible) {
            this.GenericProcessName =

            this.isProcessReversible = isProcessReversible;
            this.GenericProcessEntityID = GenericProcessEntityID;
            this.isTransport =false;
            this.Tissue ="";
        }
        public boolean equals(Object other) {
            return other instanceof GenericProcessTableEntry && ((GenericProcessTableEntry) other).isProcessReversible == isProcessReversible && ((GenericProcessTableEntry) other).GenericProcessName.equals(this.GenericProcessName)&& ((GenericProcessTableEntry) other).GenericProcessEntityID.equals(this.GenericProcessEntityID);
        }
    }
    private HashMap<String, GenericProcessTableEntry> ContentTable;
    public GenericProcessTable() {
        ContentTable = new HashMap<String, GenericProcessTableEntry>();
    }
    public void insertRow(String GenericProcessID, String GenericProcessEntityID, String GenericProcessName, boolean isProcessReversible) {
        this.ContentTable.put(GenericProcessID, new GenericProcessTableEntry(GenericPr

    }
    public GenericProcessTableEntry getRow(String GenericProcessID) {
        return this.ContentTable.get(GenericProcessID);
    }
    public String getNameById(String GenericProcessID) {
        if(this.ContentTable.get(GenericProcessID).GenericProcessName!=null)
            return this.ContentTable.get(GenericProcessID).GenericProcessName;
        return "null";
    }
    public String getTissueById(String GenericProcessID) {
        return this.ContentTable.get(GenericProcessID).Tissue;
    }
    public boolean getReversibleById(String GenericProcessID) {
        return this.ContentTable.get(GenericProcessID).isProcessReversible;
    }
    public boolean getIsTransportById(String GenericProcessID) {
            return this.ContentTable.get(GenericProcessID).isTransport;
        }    
    public String getEntityIdById(String GenericProcessID) {
        GenericProcessTableEntry entry  = this.ContentTable.get(GenericProcessID);
        if (entry==null) return "NULL_ID";
       
public class MainProc extends Process {
	public MainProc(int inID, ProcessName outID, LinkedList<Process> processList,
			 		Process parentProcess, CPU cpu, OS os, ProcessState processState,
			 		int processPriority) {
		super(inID, outID, processList, parentProcess, cpu, os, processState, processPriority);
	}
	@Override
	public void step() {
		switch (nextInstruction) {
		case 1:
			processDescriptor.os.requestResource(this, ResourceName.UZDUOTIS_ISORINEJE_ATMINTYJE);
			nextInstruction++;
		    break;
		case 2:
			checkGovernors();
			if (processDescriptor.ownedResourceList.size() != 0) {
				if (processDescriptor.ownedResourceList.getLast().resourceDescriptor.getCreatorProcess().processDescriptor.outID == ProcessName.WAIT_FOR_JOB) {
					processDescriptor.os.createProcess(this, ProcessName.JOB_GOVERNOR);
				}
				else {
					processDescriptor.os.destroyResource(processDescriptor.ownedResourceList.getFirst());
				}
			}
			nextInstruction = 1;
			break; 
		}
    }
	public void che
public class ServiceDBTest extends H2Test {
    private ServiceDB serviceDB;
    @Before
    public void setup() {
        serviceDB = database.onDemand(ServiceDB.class);
    }
    @Test
    public void simpleStoreAndRetrieve() {
        final ServiceModel serviceModel = serviceModel();
        assertThat(serviceDB.insert(serviceModel)).isEqualTo(1);
        assertThat(serviceDB.find(serviceModel)).isEqualTo(serviceModel);
    }
    @Test(expected = DBIException.class)
    public void storeTwice() {
        final ServiceModel serviceModel = serviceModel();
        assertThat(serviceDB.insert(serviceModel)).isEqualTo(1);
        assertThat(serviceDB.insert(serviceModel)).isEqualTo(0);
    }
    @Test
    public void simpleDelete() {
        final ServiceModel serviceModel = serviceModel();
        assertThat(serviceDB.insert(serviceModel)).isEqualTo(1);
        assertThat(serviceDB.find(serviceModel)).isEqualTo(serviceModel);
        assertThat(serviceDB.delete(serviceModel)).isEqualTo(

        assertThat(serviceDB.find(serviceModel)).isNull();
    }
    @Test
    public void deleteTwice() {
        final ServiceModel serviceModel = serviceModel();
        assertThat(serviceDB.insert(serviceModel)).isEqualTo(1);
        assertThat(serviceDB.delete(serviceModel)).isEqualTo(1);
        assertThat(serviceDB.delete(serviceModel)).isEqualTo(0);
    }
    @Test
    public void all() {
        assertThat(serviceDB.all()).isEmpty();
        final ServiceModel serviceModel1 = serviceModel();
        assertThat(serviceDB.insert(serviceModel1)).isEqualTo(1);
        assertThat(serviceDB.all()).containsOnly(serviceModel1);
        final ServiceModel serviceModel2 = serviceModel();
        assertThat(serviceDB.insert(serviceModel2)).isEqualTo(1);
        assertThat(serviceDB.all()).containsOnly(serviceModel1, serviceModel2);
    }
    @Test
    public void allMatchingAnId() {
        final ServiceId serviceId = ServiceId.from(UUID.randomUUID().toString());
        assertThat(serv
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author zannami
 */
public class CardServiceLocalServiceUtil {
    static ITransactionService transactionService;
    static IGameAccountService gameAccountService;
    static IIssuerService issuerService;
    public static IIssuerService getIssuerService() {
        return issuerService;
    }
    public void setIssuerService(IIssuerService issuerService) {
        CardServiceLocalServiceUtil.issuerService = issuerService;
    }
    public static IGameAccountService getGameAccountService() {
        return gameAccountService;
    }
    public void setGameAccountService(IGameAccountService gameAccountService) {
        CardServiceLocalServiceUtil.gameAccountService = gameAccountService;
    }
    public static ITransactionService getTransactionService() {
        return transactionService;
    }
    public void setTransactionService(ITransactionService transactionService) {
   
/** @author Saifi Ahmada Jul 12, 2013 11:50:45 AM  **/
public class Test6 {
	public static void main(String[] args) {
		
		SessionFactory sf = new Configuration().configure().buildSessionFactory();
		
		Session ses = sf.openSession();
		
		ses.beginTransaction();
		
		String serviceId = "SER/2013/01/0001";
		Service service = new Service(serviceId);
		service.setNopol("DA1234OP");
		service.setServiceNama("SERVICE");
		
		ServiceDtl dtl = new ServiceDtl(new ServiceDtlPK(serviceId, "JOB01"));
		dtl.setHarga(10000);
		dtl.setService(service);
		
		ServiceDtl dtl2 = new ServiceDtl(new ServiceDtlPK(serviceId, "JOB02"));
		dtl2.setHarga(20000);
		dtl2.setService(service);
		
		ServiceDtl dtl3 = new ServiceDtl(new ServiceDtlPK(serviceId, "JOB03"));
		dtl3.setHarga(30000);
		dtl3.setService(service);
		
		ServiceDtl dtl4 = new ServiceDtl(new ServiceDtlPK(serviceId, "JOB04"));
		dtl4.setHarga(40000);
		dtl4.setService(service);
		
		ServiceDtl dtl5 = new ServiceDtl(new ServiceDtlPK(serviceId, 
@XmlRootElement(name = "processInstanceMetric")
public class KnowledgeProcessInstanceMetricData {
    private Long id;
    private Long processInstanceId;
    private Date processStarted;
    private Date processCompleted;
    private Integer processNodeTriggered;
    public KnowledgeProcessInstanceMetricData() {
    }
    public KnowledgeProcessInstanceMetricData(KnowledgeProcessInstanceMetric processInstanceMetric) {
        this.processInstanceId = processInstanceMetric.getProcessInstanceId();
        this.processStarted = processInstanceMetric.getProcessStarted();
        this.processCompleted = processInstanceMetric.getProcessCompleted();
        this.processNodeTriggered = processInstanceMetric.getProcessNodeTriggered();
    }
    @XmlElement
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    @XmlElement
    public Long getProcessInstanceId() {
        return processInstanceId;
    }
    public void setProcessInstan
/**
 * 그룹관리에 관한 서비스 인터페이스 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  이문준          최초 생성
 *
 * </pre>
 */
public interface EgovGroupManageService {
	/**
	 * 검색조건에 따른 그룹정보를 조회
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO selectGroup(GroupManageVO groupManageVO) throws Exception;
	/**
	 * 시스템사용 목적별 그룹 목록 조회
	 * @param groupManageVO GroupManageVO
	 * @return List<GroupManageVO>
	 * @exception Exception
	 */
	public List<GroupManageVO> selectGroupList(GroupManageVO groupManageVO) throws Exception;
	/**
	 * 그룹 기본정보를 화면에서 입력하여 항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param groupManage GroupManage
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO insertGroup(GroupManage 
public class RulesSemanticModule extends DefaultSemanticModule
    implements
    SemanticModule {
    public RulesSemanticModule() {
                    new PackageHandler() );
        addHandler( "rule",
                    new RuleHandler() );
        addHandler( "query",
                    new QueryHandler() );
        addHandler( "attribute",
                    null );
        addHandler( "function",
                    new FunctionHandler() );
        addHandler( "lhs",
                    new AndHandler() );
        addHandler( "and-restriction-connective",
                    new RestrictionConnectiveHandler() );
        addHandler( "or-restriction-connective",
                    new RestrictionConnectiveHandler() );
        addHandler( "and-conditional-element",
                    new AndHandler() );
        addHandler( "or-conditional-element",
                    new OrHandler() );
        addHandler( "and-constraint-connective",
                    new AndHandler() );
 

                    new OrHandler() );
        addHandler( "not",
                    new NotHandler() );
        addHandler( "exists",
                    new ExistsHandler() );
        addHandler( "eval",
                    new EvalHandler() );
        addHandler( "pattern",
                    new PatternHandler() );
        addHandler( "from",
                    new FromHandler() );
        addHandler( "forall",
                    new ForallHandler() );
        addHandler( "collect",
                    new CollectHandler() );
        addHandler( "accumulate",
                    new AccumulateHandler() );
        addHandler( "field-constraint",
                    new FieldConstraintHandler() );
        addHandler( "literal-restriction",
                    new LiteralRestrictionHandler() );
        addHandler( "variable-restriction",
                    new VariableRestrictionsHandler() );
        addHandler( "predicate",
                    new PredicateHandler() );
        
/**
 * Mail연동관리에 관한 ServiceImpl 클래스
 * @mailIntrl 배치운영환경 김지완
 * @since 2012.07.16
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2012.07.16  김지완          최초 생성
 *
 * </pre>
 */
@Service("mailIntrlManageService")
public class MailIntrlManageServiceImpl extends AbstractServiceImpl implements MailIntrlManageService {
    
	@Resource(name="mailIntrlManageDAO")
    private MailIntrlManageDAO mailIntrlManageDAO;
    /**
	 *MailIntrl 목록 조회
	 * @param mailIntrlManageVO MailIntrlManageVO
	 * @return List<MailIntrlManageVO>
	 * @exception Exception
	 */
    public List<MailIntrlManageVO> selectMailIntrlList(MailIntrlManageVO mailIntrlManageVO) throws Exception {
        return mailIntrlManageDAO.selectMailIntrlList(mailIntrlManageVO);
    }
    
	/**
	 * MailIntrl 등록
	 * @param mailIntrlManage MailIntrlManage
	 * @exception Exception
	 */
    public void insertMailIntrl

    	mailIntrlManageDAO.insertMailIntrl(mailIntrlManage);
    }
    /**
	 * MailIntrl 수정
	 * @param mailIntrlManage MailIntrlManage
	 * @exception Exception
	 */
    public void updateMailIntrl(MailIntrlManage mailIntrlManage) throws Exception {
    	mailIntrlManageDAO.updateMailIntrl(mailIntrlManage);
    }
    /**
	 * MailIntrl 삭제
	 * @param mailIntrlManage MailIntrlManage
	 * @exception Exception
	 */
    public void deleteMailIntrl(MailIntrlManage mailIntrlManage) throws Exception {
    	mailIntrlManageDAO.deleteMailIntrl(mailIntrlManage);
    }
    /**
	 * MailIntrl 조회
	 * @param mailIntrlManageVO MailIntrlManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectMailIntrlListTotCnt(MailIntrlManageVO mailIntrlManageVO) throws Exception {
        return mailIntrlManageDAO.selectMailIntrlListTotCnt(mailIntrlManageVO);
    }
    /**
	 * MailIntrl 조회
	 * @param mailIntrlManageVO MailIntrlManageVO
	 * @return MailIntrlManageVO
	 * @exception Exception
	 */
    public
/**
 * 바로가기메뉴관리 정보를 관리하기 위한 서비스 인터페이스 클래스
 * @author 공통컴포넌트팀 윤성록
 * @since 2009.09.25
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.9.25  윤성록          최초 생성
 *
 * </pre>
 */
public interface EgovBkmkMenuManageservice {
    /**
     * 바로가기메뉴관리 정보를 삭제한다.
     * @param BkmkMenuManage
     * @return
     * @exception Exception
     */
    public void deleteBkmkMenuManage(BkmkMenuManage BkmkMenuManage) throws Exception ;
    /**
     * 바로가기메뉴관리 정보를 등록한다.
     * @param BkmkMenuManage
     * @return
     * @exception Exception
     */
    public void insertBkmkMenuManage(BkmkMenuManage bkmkMenuManage)throws Exception ;
    /**
     * 바로가기메뉴관리 정보의 전체목록을 조회한다.
     * @param BkmkMenuManage
     * @return  Map<String, Object>
     * @exception Exception
     */
    public Map<String, Object> selectBkmkMenuManageList(BkmkMenuManageVO bkmkMenuManageVO) throws Exception 
/**
 * Created by root on 08.04.17.
 */
public class ServiceFactory {
    static private AirlineService airlineService;
    static private AirportService airportService;
    static private AuthService authService;
    static private FlightService flightService;
    static private RouteService routeService;
    static private TicketService ticketService;
    static private UserService userService;
    static private PaymentService paymentService;
    static {
        airlineService = new AirlineService();
        airportService = new AirportService();
        authService = new AuthServiceImpl();
        flightService = new FlightService();
        routeService = new RouteService();
        ticketService = new TicketService();
        userService = new UserService();
        paymentService = new PaymentService();
        authService.init();
        flightService.init();
        routeService.init();
        ticketService.init();
        paymentService.init();
    }
    static public Airli
/**
 * Created by sunning on 14-9-29.
 */
public class HandlerManager {
    private static HandlerManager instance ;
    private Map<HandlerCallBackListener,SunnyHandler> handlerContainer ;
    public static HandlerManager getInstance() {
        if(instance == null){
            syncInit() ;
        }
        return instance ;
    }
    private static synchronized void syncInit() {
        if (instance == null) {
            instance = new HandlerManager();
            instance.handlerContainer = new HashMap<HandlerCallBackListener, SunnyHandler>();
        }
    }
    public SunnyHandler getHandler(HandlerCallBackListener handlerInterface){
        SunnyHandler handler = handlerContainer.get(handlerInterface) ;
        if(handler == null){
            handler = new SunnyHandler(handlerInterface) ;
            handlerContainer.put(handlerInterface,handler) ;
        }
        return handler ;
    }
     public void remoteHandler(HandlerCallBackListener handlerInterface){
        if(ha
public class RepositoryData {
	BigDecimal referToOID;
	int repositoryID; 
	String repositoryName;
	String repositoryURL;
	String repositoryOAI_BASEURL;
	String repositoryOAI_EXTID;	
	public RepositoryData() {
		
	}
    public RepositoryData(BigDecimal referToOID) {
    	this.referToOID = referToOID;
	}
	public String toString() {
		StringBuffer sbResult = new StringBuffer();
		sbResult.append("referToOID=" + this.referToOID)
		        .append("\n  repositoryID=" + this.repositoryID)
		        .append("\n  repositoryName=" + this.repositoryName)
		        .append("\n  repositoryURL=" + this.repositoryURL)
		        .append("\n  repositoryOAI_BASEURL=" + this.repositoryOAI_BASEURL)
		        .append("\n  repositoryOAI_EXTID=" + this.repositoryOAI_EXTID);
		return sbResult.toString();
	}
    
	public BigDecimal getReferToOID() {
		return referToOID;
	}
	public void setReferToOID(BigDecimal referToOID) {
		this.referToOID = referToOID;
	}
	public int getRepositoryID() {
		return repository
/**
 * 권한관리에 대한 Vo 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  이문준          최초 생성
 *
 * </pre>
 */
public class AuthorManageVO extends AuthorManage {
	private static final long serialVersionUID = 1L;
	List <AuthorManageVO> authorManageList;
	/**
	 * AuthorManage 를 리턴한다.
	 * @return AuthorManage
	 */
	public AuthorManage getAuthorManage()
    {
    	return super.getAuthorManage();
    }
	/**
	 * AuthorManage 값을 설정한다.
	 * @param authorManage AuthorManage
	 */	
    public void setAuthorManage(AuthorManage authorManage)
    {
    	super.setAuthorManage(authorManage);
    }
	/**
	 * authorManageList attribute 를 리턴한다.
	 * @return List<AuthorManageVO>
	 */
	public List<AuthorManageVO> getAuthorManageList() {
		return authorManageList;
	}
	/**
	 * authorManageList attribute 값을 설정한다.
	 * @param aut
/* Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @author Joram Barrez
 */
public class ProcessServiceTest extends ActivitiTestCase {
  
  public void testStartProcessInstanceById() {
    deployProcessResource("org/activiti/test/service/oneTaskProcess.bpmn20.xml");
    List<ProcessDefinition> processDefinitions = processService.findProcessDefinitions();
    assertEquals(1, processDefinitions.size());
    
    ProcessDefinition processDefinition = processDefinitions.get(0);
    assertEquals("oneTaskProcess", processDefinition.g
@ContextConfiguration(value = "classpath:org/soad/webmvc/repository/datasource-context.xml")
@RunWith(SpringJUnit4ClassRunner.class)
@TransactionConfiguration(defaultRollback = false)
@Transactional
public class GivenIdServiceProxyStaticTest {
	private Logger logger = LoggerFactory
			.getLogger(GivenIdServiceProxyStaticTest.class);
	@Autowired
	private ServiceRepository serviceRepository;
	@Test
	public void deleteServiceProxy(){		
		Service fromService = new Service();
		fromService.setDescription("A simple service");
		fromService.setName("Dummy service");
		serviceRepository.save(fromService);
		
		Assert.assertNotNull(fromService.getId());
		Service toService = new Service();
		toService.setName("Target service");
		toService.setDescription("blah blah");
		
		serviceRepository.save(toService);
		Assert.assertNotNull(toService.getId());
		fromService.getServiceProxies().add(new ServiceProxy(fromService, toService));
		serviceRepository.save(fromService);
		
		fromService = serviceR
/**
 * The Class SamServiceRegistry.
 */
public class SamServiceRegistry {
	/** The instance. */
	private static SamServiceRegistry instance;
	/** The persistence service. */
	private PersistenceService persistenceService;
	/** The git service. */
	private GitService gitService;
	/** The sam service. */
	private SamService samService;
	/**
	 * Instantiates a new sam service registry.
	 */
	private SamServiceRegistry() {
	}
	/**
	 * Gets the single instance of SamServiceRegistry.
	 *
	 * @return single instance of SamServiceRegistry
	 */
	public static SamServiceRegistry getInstance() {
		if (instance == null) {
			instance = new SamServiceRegistry();
		}
		return instance;
	}
	/**
	 * Register git service.
	 *
	 * @param gitService the git service
	 */
	public void registerGitService(GitService gitService) {
		this.gitService = gitService;
	}
	/**
	 * Register sam service.
	 *
	 * @param samService the sam service
	 */
	public void registerSamService(SamService samService) {
		this.sam
/**
 * User: tin
 * Date: 13-12-23
 * Time: 上午11:47
 */
@Service("repositoryService")
@Transactional
public class RepositoryService implements IRepositoryService {
    private static final Logger log = LoggerFactory.getLogger(RepositoryService.class);
    /**
     * 依赖注入仓库数据层RepositoryMapper
     */
    @Autowired
    private RepositoryMapper repositoryMapper;
    @Autowired
    private StorageMapper storageMapper;
    @Autowired
    /**
     * 查询所有仓库信息
     *
     * @return 返回Repository类型的List
     */
    @Transactional(readOnly = true)
    @Override
    public List<Repository> findRepository() {
        return repositoryMapper.findRepository();
    }
    /**
     * 查询所有仓库信息
     *
     * @return 返回Repository类型的List
     */
    @Transactional(readOnly = true)
    @Override
    public List<RepositoryVo> findRepositoryAll() {
        List<RepositoryVo> repositoryVoList = new ArrayList<RepositoryVo>();
        RepositoryVo repositoryVo = null;
        List<Repository> repositoryList = re

        for (Repository repository : repositoryList) {
            repositoryVo = new RepositoryVo();
            repositoryVo.setId(repository.getId());
            repositoryVo.setName(repository.getName());
            repositoryVoList.add(repositoryVo);
        }
        return repositoryVoList;
    }
    /**
     * 通过id查询仓库信息
     *
     * @param id 仓库实体信息
     * @return 返回Repository类型
     */
    @Transactional(readOnly = true)
    @Override
    public Repository findRepositoryById(Integer id) {
        if (log.isInfoEnabled()) {
            log.info("RepositoryService findRepositoryById通过ID{" + id.toString() + "}查询");
        }
        return this.repositoryMapper.findRepositoryById(id);
    }
    @Override
    public Repository findRepositoryByName(String name) {
        return repositoryMapper.findRepositoryByName(name);
    }
    /**
     * 查询以Repository为条件的仓库信息
     *
     * @param repository 条件仓库实体信息
     * @return 返回Repository类型的List列表
     */
    @Transactional(readOnly 

    public Page findRepositoryByRepository(RepositoryQuery repository) {
        if (log.isInfoEnabled()) {
            log.info("RepositoryService findRepositoryByRepository通过repository{" + repository.toString() + "}实现查询");
        }
        User user = SessionUtils.getUser();
        Integer checknum = 0;
        if (null != user) {
            if (null != user.getRepoId() && !checknum.equals(user.getRepoId())) {
                repository.setId(user.getRepoId() + "");
            }
        }
        Page page = new Page();
        page.setPageNo(repository.getPage());
        page.setPageSize(repository.getLimit());
        repositoryMapper.findRepositoryByRepositoryQuery(repository, page);
        return page;
    }
    /**
     * 查询以prodId为条件的仓库信息
     *
     * @param prodId 商品Id查询条件
     * @return 返回仓库对象
     */
    @Transactional(readOnly = true)
    public Repository findRepositoryByProdId(Integer prodId) {
        if (log.isInfoEnabled()) {
            log.info("RepositorySer

        }
        Storage str = storageMapper.findStorageByProdId(prodId);
        if (null == str) {
            str = new Storage();
        }
        return repositoryMapper.findRepositoryById(str.getRepoId());
    }
    /**
     * 更新仓库
     *
     * @param repository 实体仓库信息
     */
    @Transactional
    @Override
    public Integer updateRepository(Repository repository) {
        if (log.isInfoEnabled()) {
            log.info("RepositoryService updateRepository通过repository" + repository.toString() + "}实现更新");
        }
        if (null == repositoryMapper.findRepositoryById(repository.getId())) {
            return 0;
        } else {
            return repositoryMapper.updateRepository(repository);
        }
    }
    /**
     * 通过id删除仓库信息
     *
     * @param ids 仓库id数组
     */
    @Transactional
    @Override
    public Integer deleteRepositoryById(Integer[] ids) {
        if (log.isInfoEnabled()) {
            log.info("RepositoryService deleteRepositoryById通过ID{" + ids + "
/**
 * Provides {@link RequestHandler} implementation from core module.
 *
 * @author Alex Objelena
 * @since 1.5.0
 * @created 23 Sep 2012
 */
public class DefaultRequestHandlerProvider implements RequestHandlerProvider {
  public Map<String, RequestHandler> provideRequestHandlers() {
    final Map<String, RequestHandler> map = new HashMap<String, RequestHandler>();
    map.put(ReloadCacheRequestHandler.ALIAS, new LazyRequestHandlerDecorator(new LazyInitializer<RequestHandler>() {
      @Override
      protected RequestHandler initialize() {
        return new ReloadCacheRequestHandler();
      }
    }));
    map.put(ReloadModelRequestHandler.ALIAS, new LazyRequestHandlerDecorator(new LazyInitializer<RequestHandler>() {
      @Override
      protected RequestHandler initialize() {
        return new ReloadModelRequestHandler();
      }
    }));
    map.put(ResourceProxyRequestHandler.ALIAS, new LazyRequestHandlerDecorator(new LazyInitializer<RequestHandler>() {
      @Override
      p
/**
 * Created by Mr Phi on 2014-08-17.
 */
public class PaybackBookKeeperImplWaszczyk implements PaybackBookKeeper{
    private final AccountRepository accountRepository;
    private final MerchantRepository merchantRepository;
    private final PaybackRepository paybackRepository;
    public PaybackBookKeeperImplWaszczyk(AccountRepository accountRepository, MerchantRepository merchantRepository, PaybackRepository paybackRepository){
        this.accountRepository = accountRepository;
        this.merchantRepository = merchantRepository;
        this.paybackRepository = paybackRepository;
    }
    @Override
    public PaybackConfirmation registerPaybackFor(Purchase purchase) {
        Account account = accountRepository.findByCreditCard(purchase.getCreditCardNumber());
        Merchant merchant = merchantRepository.findByNumber(purchase.getMerchantNumber());
        Money paybackAmount = merchant.calculatePaybackFor(account,purchase);
        AccountIncome income = account.addPayback
/**
 * Licensed under the Apache License, Version 2.0
 * 
 * @author 陈侃(cknet@126.com, 13910090885)
 */
public interface IProcessService extends IVariableAware<ProcessBean>, IListenerAware<ProcessBean>,
		IScriptAware<ProcessBean>, IDbBeanService<ProcessBean> {
	/**
	 * 获取流程模型
	 * 
	 * @param process
	 * @return
	 */
	ProcessModelBean getProcessModel(ProcessBean process);
	/**
	 * 创建流程实例
	 * 
	 * @param initiateItem
	 *           启动项
	 * @param topic
	 *           主题
	 * @return
	 */
	ProcessBean startProcess(InitiateItem initiateItem, String topic);
	ProcessBean startProcess(InitiateItem initiateItem);
	/**
	 * 非人工方式启动流程，一般用在子流程及接口方式
	 * 
	 * @param processModel
	 * @param variables
	 * @param properties
	 * @param topic
	 * @return
	 */
	ProcessBean startProcess(ProcessModelBean processModel, KVMap variables, Properties properties,
			String topic);
	IDataQuery<ProcessBean> getProcessList(ProcessModelBean processModel, EProcessStatus... status);
	/**
	 * 挂起及恢复流程
	 * 
	 * @param proce
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author yuna
 */
@Entity
public class EntityTransportationService extends AbstractService {
    private String serviceOrigin;
    private String serviceDestination;
    private String serviceEstimatedDuration;
    private String serviceTool;
    private double serviceMinUnit;
    private double serviceMaxUnit;
    private double servicePerUnitCost;
    private double servicePerUnitPrice;
    public EntityTransportationService() {
    }
    public EntityTransportationService(Long serviceID, String serviceName, String serviceType, String serviceDescription, String serviceRemark,String serviceOrigin, String serviceDestination, String serviceEstimatedDuration, String serviceTool, double serviceMinUnit, double serviceMaxUnit, double servicePerUnitCost, double servicePerUnitPrice) {
        this.setS

        this.setServiceName (serviceName);
        this.setServiceType (serviceType);
        this.setServiceDescription (serviceDescription);
        this.setServiceRemark (serviceRemark);
        this.serviceOrigin = serviceOrigin;
        this.serviceDestination = serviceDestination;
        this.serviceEstimatedDuration = serviceEstimatedDuration;
        this.serviceTool = serviceTool;
        this.serviceMinUnit = serviceMinUnit;
        this.serviceMaxUnit = serviceMaxUnit;
        this.servicePerUnitCost = servicePerUnitCost;
        this.servicePerUnitPrice = servicePerUnitPrice;
    }
    public String getServiceOrigin() {
        return serviceOrigin;
    }
    public void setServiceOrigin(String serviceOrigin) {
        this.serviceOrigin = serviceOrigin;
    }
    public String getServiceDestination() {
        return serviceDestination;
    }
    public void setServiceDestination(String serviceDestination) {
        this.serviceDestination = serviceDestination;
    }
   

        return serviceEstimatedDuration;
    }
    public void setServiceEstimatedDuration(String serviceEstimatedDuration) {
        this.serviceEstimatedDuration = serviceEstimatedDuration;
    }
    public String getServiceTool() {
        return serviceTool;
    }
    public void setServiceTool(String serviceTool) {
        this.serviceTool = serviceTool;
    }
    public double getServiceMinUnit() {
        return serviceMinUnit;
    }
    public void setServiceMinUnit(double serviceMinUnit) {
        this.serviceMinUnit = serviceMinUnit;
    }
    public double getServiceMaxUnit() {
        return serviceMaxUnit;
    }
    public void setServiceMaxUnit(double serviceMaxUnit) {
        this.serviceMaxUnit = serviceMaxUnit;
    }
    public double getServicePerUnitCost() {
        return servicePerUnitCost;
    }
    public void setServicePerUnitCost(double servicePerUnitCost) {
        this.servicePerUnitCost = servicePerUnitCost;
    }
    public double getServicePerUnitPrice() 
/**
 * 로그인정책관리에 관한 ServiceImpl 클래스
 * @loginPolicy 배치운영환경 김지완
 * @since 2012.07.16
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2012.07.16  김지완          최초 생성
 *
 * </pre>
 */
@Service("egovLoginPolicyManageService")
public class EgovLoginPolicyManageServiceImpl extends EgovAbstractServiceImpl implements EgovLoginPolicyManageService {
    
	@Resource(name="loginPolicyManageDAO")
    private LoginPolicyManageDAO loginPolicyManageDAO;
    /**
	 * 로그인정책을 받는 사용자 목록 조회
	 * @param loginPolicyManageVO LoginPolicyManageVO
	 * @return List<LoginPolicyManageVO>
	 * @exception Exception
	 */
    public List<LoginPolicyManageVO> selectLoginPolicyList(LoginPolicyManageVO loginPolicyManageVO) throws Exception {
        return loginPolicyManageDAO.selectLoginPolicyList(loginPolicyManageVO);
    }
    
	/**
	 * 사용자에 대한 로그인 정책 등록
	 * @param loginPolicyManage LoginPolicyManag

	 * @exception Exception
	 */
    public void insertLoginPolicy(LoginPolicyManage loginPolicyManage) throws Exception {
    	loginPolicyManageDAO.insertLoginPolicy(loginPolicyManage);
    }
    /**
	 * 사용자에 대한 로그인 정책 수정
	 * @param loginPolicyManage LoginPolicyManage
	 * @exception Exception
	 */
    public void updateLoginPolicy(LoginPolicyManage loginPolicyManage) throws Exception {
    	loginPolicyManageDAO.updateLoginPolicy(loginPolicyManage);
    }
    /**
	 * 사용자에 대한 로그인 정책 삭제
	 * @param loginPolicyManage LoginPolicyManage
	 * @exception Exception
	 */
    public void deleteLoginPolicy(LoginPolicyManage loginPolicyManage) throws Exception {
    	loginPolicyManageDAO.deleteLoginPolicy(loginPolicyManage);
    }
    /**
	 * 로그인 정책 목록 카운트를 조회
	 * @param loginPolicyManageVO LoginPolicyManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectLoginPolicyListTotCnt(LoginPolicyManageVO loginPolicyManageVO) throws Exception {
        return loginPolicyManageDAO.selectLog
public class Repositories
	private Map<RepositoryKinds, Repository> repositories;
	private Trigger trigger;
	public Repositories() {
		RepositoriesFactory.setInstance(this);
		trigger = new Trigger();
	}
    public void setRepositories(Map<RepositoryKinds, Repository> repositories)
    {
        this.repositories = repositories;
        trigger.setRepositories(repositories);
    }
    
    public void setRelations(Properties relations)
    {
        trigger.setRelations(relations);
    }
    
    public void add(Session session) {
    	
    	Repository repository = null;
        Iterator<Entry<RepositoryKinds, Repository>> itr = repositories.entrySet().iterator();
        do
        {
        	repository = (Repository)itr.next().getValue();
            repository.add(session, trigger);
        } while(itr.hasNext());
    }
    
    public Object get(RepositoryKinds kind, String key) {
    	return repositories.get(kind).get(key);
    }
    
    public void remove(Session session) {
    

    	Repository repository = null;
    	Iterator<Entry<RepositoryKinds, Repository>> itr = repositories.entrySet().iterator();
        do
        {
        	repository = (Repository)itr.next().getValue();
            repository.remove(session, trigger);
        } while(itr.hasNext());
    }
    
    public void evict(Session session) {
    	
    	Repository repository = null;
    	Iterator<Entry<RepositoryKinds, Repository>> itr = repositories.entrySet().iterator();
        do
        {
        	repository = (Repository)itr.next().getValue();
            repository.evict(session, trigger);
        } while(itr.hasNext());
    }
    
    public void addRepository(Session session) {
    	Repository repository = null;
    	Iterator<Entry<RepositoryKinds, Repository>> itr = repositories.entrySet().iterator();
        do
        {
        	repository = (Repository)itr.next().getValue();
            repository.addRepository(session);
        } while(itr.hasNext());
    }
    
    public void
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author dziegenh
 */
public class ProcessCacheTest {
    private ProcessCache instance;
    private final String PROCESS_SERVER = "P_SERVER";
    private final String PROCESS_IDENTIFIER = "P_IDENTIFIER";
    public ProcessCacheTest() {
    }
    @Before
    public void setUp() {
        this.instance = new ProcessCache();
    }
    @Test
    public void testAddAndGetProcess() {
        ProcessEntity process = createTestProcess();
        assertTrue(this.instance.addProcess(process, false));
        ProcessEntity cached = this.instance.getCachedProcess(this.PROCESS_SERVER, this.PROCESS_IDENTIFIER);
        assertEquals(process, cached);
    }
    @Test
    public void testSetLoadingStatus() {
        ProcessEntity process = createTestProcess();
        this.instance.addProcess(process, false);
 

        
        this.instance.setIsLoaded(this.PROCESS_SERVER, this.PROCESS_IDENTIFIER, true);
        assertTrue(this.instance.isLoaded(this.PROCESS_SERVER, this.PROCESS_IDENTIFIER));
        this.instance.setIsLoaded(this.PROCESS_SERVER, this.PROCESS_IDENTIFIER, false);
        assertFalse(this.instance.isLoaded(this.PROCESS_SERVER, this.PROCESS_IDENTIFIER));
    }
    private ProcessEntity createTestProcess() {
        return new ProcessEntity(this.PROCESS_SERVER, this.PROCESS_IDENTIFIER);
    }
    @Test
    public void testUpdateCachedProcess() {
        String processBTitle = "TITLE B";
        
        ProcessEntity ProcessA = createTestProcess();
        ProcessEntity ProcessB = createTestProcess();
        ProcessB.setOwsTitle(processBTitle);
        
        this.instance.addProcess(ProcessA, false);
        this.instance.addProcess(ProcessB, false);
        
        ProcessEntity cached = this.instance.getCachedProcess(this.PROCESS_SERVER, this.PROCESS_IDENTIFIER);
       
/**
 * service locator is bases on Assembler pattern which holds the object creation 
 * and manages dependency injection.
 */
public class ServiceLocator implements Locator{
	private static Locator serviceLocator = null;
	private static EntityManagerFactory emf= null;
	public static Locator instance() {
		if(serviceLocator == null){
			serviceLocator = new ServiceLocator();
		}
		if(emf == null){
			emf = TransactionManager.getEMF();
		}
		return serviceLocator;
	}
	public LoginService getLoginService(){
		EntityManager em = emf.createEntityManager();
		LoginService service = new LoginServiceImpl(em);
		System.out.println("em" +service.getEm());
		service = (LoginService) ServiceProxy.newInstance(service);
		return service;
	}
	public LoginService getLoginService(EntityManager em){
		return new LoginServiceImpl(em);
	}
	public ChurchService getChurchService() {
		EntityManager em = emf.createEntityManager();
		ChurchService service = new ChurchServiceImpl(em);
		service = (ChurchServi

		return service;
	}
	public ChurchService getChurchService(EntityManager em) {
		return new ChurchServiceImpl(em);
	}
	public PriestService getPriestService() {
		EntityManager em = emf.createEntityManager();
		PriestService service = new PriestServiceImpl(em);
		service = (PriestService)ServiceProxy.newInstance(service);
		return service;
	}
	public PriestService getPriestService(EntityManager em) {
		return new PriestServiceImpl(em);
	}
	public EventService getEventService() {
		EntityManager em = emf.createEntityManager();
		EventService service = new EventServiceImpl(em);
		service = (EventService)ServiceProxy.newInstance(service);
		return service;
	}
	public EventService getEventService(EntityManager em) {
		return new EventServiceImpl(em);
	}
	public UserService getUserService() {
		EntityManager em = emf.createEntityManager();
		UserService service = new UserServiceImpl(em);
		service = (UserService)ServiceProxy.newInstance(service);
		return service;
	}
	public UserService g

		return new UserServiceImpl(em);
	}
	public BibleVerseService getBibleVerseService() {
		EntityManager em = emf.createEntityManager();
		BibleVerseService service = new BibleVerseServiceImpl(em);
		service = (BibleVerseService)ServiceProxy.newInstance(service);
		return service;
	}
	public BibleVerseService getBibleVerseService(EntityManager em) {
		return new BibleVerseServiceImpl(em);
	}
	public FacilitiesService getFacilitiesService() {
		EntityManager em = emf.createEntityManager();
		FacilitiesService service = new FacilitiesServiceImpl(em);
		service = (FacilitiesService)ServiceProxy.newInstance(service);
		return service;
	}
	public FacilitiesService getFacilitiesService(EntityManager em) {
		return new FacilitiesServiceImpl(em);
	}
	public EmailService getEmailService() {
		EntityManager em = emf.createEntityManager();
		EmailService service = new EmailServiceImpl(em);
		service = (EmailService)ServiceProxy.newInstance(em);
		return service;
	}
	public EmailService getEmailSe
public abstract class AEcoreProcessTest extends AProcessTest<EcoreProcess>
  protected String modelname = null;
  public AEcoreProcessTest(String modelname)
  {
    super(new EcoreProcess());
    this.modelname = modelname;
  }
  @Override
  protected void prepareParameters(IParameters parameters)
  {
    super.prepareParameters(parameters);
    parameters.setParameter(process.getParameterDescription(process
        .getExternalId(ProcessConstants.PARAMETER_GENERATION_DATE)), new Date(0));
    parameters.setParameter(process.getParameterDescription(process
        .getExternalId(Model2FileProcessConstants.PARAMETER_MODEL_INPUT_FILE)), "resources/input/" + modelname
        + ".ecore");
    parameters.setParameter(process.getParameterDescription(process
        .getExternalId(Model2FileProcessConstants.PARAMETER_MODEL_VALIDATION_STRUCTURE_AND_CONSTRAINTS)), Boolean.TRUE);
    parameters.setParameter(process.getParameterDescription(process.getExternalId("ecore2c."
                       
/**
 * 롤관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Service("egovRoleManageService")
public class EgovRoleManageServiceImpl extends EgovAbstractServiceImpl implements EgovRoleManageService {
	@Resource(name="roleManageDAO")
	public RoleManageDAO roleManageDAO;
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception {
		return roleManageDAO.selectRole(roleManageVO);
	}
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception {
		return roleManageDAO.selectR

	}
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception {
		roleManageDAO.deleteRole(roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void updateRole(RoleManage roleManage) throws Exception {
		roleManageDAO.updateRole(roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 등록
	 * @param roleManage RoleManage
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO insertRole(RoleManage roleManage, RoleManageVO roleManageVO) throws Exception {
		roleManageDAO.insertRole(roleManage);	
		roleManageVO.setRoleCode(roleManage.getRoleCode());
		return roleManageDAO.selectRole(roleManageVO);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @param roleManageVO RoleManageVO
	 * @return int
	 * @exception Exception
	 */
	public int selectRoleListT
/**
 * 개요
 * - 장애처리결과 관리정보에 대한 ServiceImpl 클래스를 정의한다.
 * 
 * 상세내용
 * - 장애처리결과 관리정보에 대한 등록, 수정, 삭제, 조회 등의 기능을 제공한다.
 * - 장애처리결과 관리정보의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author lee.m.j
 * @version 1.0
 * @created 28-6-2010 오전 10:44:35
 */
@Service("egovTroblProcessService")
public class EgovTroblProcessServiceImpl extends AbstractServiceImpl implements EgovTroblProcessService {
	@Resource(name="troblProcessDAO")
	private TroblProcessDAO troblProcessDAO;
	/**
	 * 장애처리정보를 관리하기 위해 대상 장애처리목록을 조회한다.
	 * @param troblProcessVO - 장애처리결과 Vo
	 * @return List - 장애처리결과 목록
	 */
	public List<TroblProcessVO> selectTroblProcessList(TroblProcessVO troblProcessVO) throws Exception {
		return troblProcessDAO.selectTroblProcessList(troblProcessVO);
	}
	/**
	 * 장애처리목록 총 갯수를 조회한다.
	 * @param troblProcessVO - 장애처리결과 Vo
	 * @return int - 장애처리결과 카운트 수
	 */
	public int selectTroblProcessListTotCnt(TroblProcessVO troblProcessVO) throws Exception {
		return troblProcessDAO.selectTroblProcessListTotCnt(troblProcessVO);
	}

/**
 * The Class ProcessManager.
 */
public class ProcessManager {
    /** The installation service. */
    private InstallationService installationService;
    /** The repository. */
    private Repository repository;
    /**
     * Instantiates a new process manager.
     * 
     * @param installationService
     *            the installation service
     * @param repository
     *            the repository
     */
    public ProcessManager(InstallationService installationService, Repository repository) {
        super();
        this.installationService = installationService;
        this.repository = repository;
    }
    /**
     * Update process status.
     * 
     * @param processId
     *            the process id
     * @param processStatus
     *            the process status
     */
    public void updateProcessStatus(long processId, ProcessStatus processStatus) {
        Process process = repository.findById(Process.class, processId);
        process.setProcessStatus(proce

        if (processStatus == ProcessStatus.PROCESSING_STARTED) {
            process.setProcessingStartedTimestamp(new Date());
        }
        if (processStatus == ProcessStatus.INSTALLED) {
            process.setRunnable(true);
            process.setProcessingFinishedTimestamp(new Date());
        }
        repository.merge(process);
    }
    /**
     * Update process status.
     * 
     * @param processId
     *            the process id
     * @param processStatus
     *            the process status
     * @param errorMessage
     *            the error message
     */
    public void updateProcessStatus(long processId, ProcessStatus processStatus, String errorMessage) {
        Process process = repository.findById(Process.class, processId);
        process.setProcessStatus(processStatus);
        process.setErrorMessage(errorMessage);
        process.setProcessingFinishedTimestamp(new Date());
        repository.merge(process);
    }
    /**
     * Install new process.
  

     * @param username
     *            the username
     * @param processType
     *            the process type
     * @param contentType
     *            the content type
     * @param bundle
     *            the bundle
     * @return the process
     */
    public Process installNewProcess(String username, ProcessType processType, String contentType,
            byte[] bundle) {
        User user = repository.getSingleResultBySingularAttribute(User.class, User_.openIDUsername,
                username);
        Process process = new Process();
        process.setUser(user);
        process.setUploadedTimestamp(new Date());
        process.setProcessStatus(ProcessStatus.UPLOADED);
        process.setProcessType(processType);
        ProcessBundle originalProcessBundle = new ProcessBundle();
        originalProcessBundle.setContents(bundle);
        process.setOriginalProcessBundle(originalProcessBundle);
        repository.persist(process);
        InstallationOrder installation

        installationOrder.setBundle(bundle);
        installationOrder.setUsername(username);
        installationOrder.setContentType(contentType);
        installationOrder.setProcessId(process.getProcessId());
        installationOrder.setProcessType(processType);
        try {
            installationService.install(installationOrder);
        } catch (InstallationException e) {
        }
        return process;
    }
    /**
     * Gets the processes by username.
     * 
     * @param username
     *            the username
     * @return the processes by username
     */
    public List<Process> getProcessesByUsername(String username) {
        User user = repository.getSingleResultBySingularAttribute(User.class, User_.openIDUsername,
                username);
        List<Process> processes = repository.getResultListBySingularAttribute(Process.class,
                Process_.user, user);
        return processes;
    }
    /**
     * Update process properties.
     * 
     * @
/**
 * factory per le classi HPM.
 * @author dellanna
 */
public class ProcessFactory {
    /**
     * factory per l'oggetto Process.
     * @param rs resultset
     * @return istanza dell'oggetto Process
     * @throws SQLException label colonne non valido
     */
    public static Process createProcess(final ResultSet rs)
            throws SQLException {
        Process process = new Process();
        process.setActive(rs.getBoolean("IS_ACTIVE"));
        process.setDateCreated(rs.getDate("DATE_CREATED"));
        process.setDateDue(rs.getDate("DATE_DUE"));
        process.setDescription(rs.getString("DESCRIPTION"));
        process.setHpmProcessId(rs.getString("HPM_PROCESS_ID"));
        process.setIdProcess(rs.getInt("ID_PROCESS"));
        process.setName(rs.getString("NAME"));
        process.setPrivate(rs.getBoolean("IS_PRIVATE"));
        if (rs.getInt("ID_PROCESS_STATE") > 0) {
            process.setProcessState(new ProcessState());
            process.getProcessState().set

                    rs.getInt("ID_PROCESS_STATE"));
        }
        if (rs.getInt("ID_USER_OWNER") > 0) {
            process.setOwner(new User());
            process.getOwner().setIdUser(rs.getInt("ID_USER_OWNER"));
        }
        if (rs.getInt("ID_PROCESS_TYPE") > 0) {
            process.setProcessType(new ProcessType());
            process.getProcessType().setIdProcessType(
                    rs.getInt("ID_PROCESS_TYPE"));
        }
        DataTraceClassFactory.createDataTraceClass(process, rs);
        return process;
    }
    /**
     * factory per l'oggetto ProcessState.
     * @param rs resultset
     * @return istanza dell'oggetto ProcessState
     * @throws SQLException label colonne non valido
     */
    public static ProcessState createProcessState(final ResultSet rs)
            throws SQLException {
        ProcessState ps = new ProcessState();
        ps.setIdProcessState(rs.getInt("ID_PROCESS_STATE"));
        ps.setDescription(rs.getString("DESCRIPTION"));

public class HandlerWrapper extends AbstractHandlerContainer {
	private Handler _handler;
	public HandlerWrapper() {
		super();
	}
	public HandlerWrapper(Handler handler) {
		super();
		setHandler(handler);
	}
	public Handler getHandler() {
		return _handler;
	}
	public void setHandler(Handler handler) {
		try {
			Handler old_handler = _handler;
			if (getOrigin() != null)
				getOrigin().getContainer().update(this, old_handler, handler, "handler");
			if (handler != null) {
				handler.setOrigin(getOrigin());
			}
			_handler = handler;
			if (old_handler != null) {
				if (old_handler.isStarted())
					old_handler.stop();
			}
		} catch (Exception e) {
			IllegalStateException ise = new IllegalStateException();
			ise.initCause(e);
			throw ise;
		}
	}
	public void addHandler(Handler handler) {
		Handler old = getHandler();
		if (old != null && !(handler instanceof HandlerContainer))
			throw new IllegalArgumentException("Cannot add");
		setHandler(handler);
		if (old != null)
			((

	}
	public void removeHandler(Handler handler) {
		Handler old = getHandler();
		if (old != null && (old instanceof HandlerContainer))
			((HandlerContainer) old).removeHandler(handler);
		else if (old != null && handler.equals(old))
			setHandler(null);
		else
			throw new IllegalStateException("Cannot remove");
	}
	protected void doStart() throws Exception {
		if (_handler != null)
			_handler.start();
		super.doStart();
	}
	protected void doStop() throws Exception {
		super.doStop();
		if (_handler != null)
			_handler.stop();
	}
	public void handle(String protocol, Request request, Response response, int dispatch) throws IOException {
		if (_handler != null && isStarted())
			_handler.handle(protocol, request, response, dispatch);
	}
	public void setOrigin(OriginHandler server) {
		OriginHandler old_server = getOrigin();
		super.setOrigin(server);
		Handler h = getHandler();
		if (h != null)
			h.setOrigin(server);
		if (server != null && server != old_server)
			server.getContain
/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */
/**
 * @author Marcellus Tavares
 */
public class KaleoProcessLinkLocalServiceImpl
	extends KaleoProcessLinkLocalServiceBaseImpl {
	public KaleoProcessLink addKaleoProcessLink(
			long kaleoProcessId, String workflowTaskName, long ddmTemplateId)
		throws SystemException {
		long kaleoProcessLinkId = counterLocalService.increment();
		KaleoProcessLink kaleoProcessLink = kaleoProcessLinkPersistence.create(
			kaleoProcessLinkId);
		kaleoProcessLink.setKaleoProcessId(kaleoProcessId);
		kaleoP

		kaleoProcessLink.setDDMTemplateId(ddmTemplateId);
		kaleoProcessLinkPersistence.update(kaleoProcessLink);
		return kaleoProcessLink;
	}
	public void deleteKaleoProcessLinks(long kaleoProcessId)
		throws SystemException {
		List<KaleoProcessLink> kaleoProcessLinks =
			kaleoProcessLinkPersistence.findByKaleoProcessId(kaleoProcessId);
		for (KaleoProcessLink kaleoProcessLink : kaleoProcessLinks) {
			deleteKaleoProcessLink(kaleoProcessLink);
		}
	}
	public KaleoProcessLink fetchKaleoProcessLink(
			long kaleoProcessId, String workflowTaskName)
		throws SystemException {
		return kaleoProcessLinkPersistence.fetchByKPI_WTN(
			kaleoProcessId, workflowTaskName);
	}
	public List<KaleoProcessLink> getKaleoProcessLinks(long kaleoProcessId)
		throws SystemException {
		return kaleoProcessLinkPersistence.findByKaleoProcessId(kaleoProcessId);
	}
	public KaleoProcessLink updateKaleoProcessLink(
			long kaleoProcessLinkId, long kaleoProcessId)
		throws PortalException, SystemException {
		KaleoP

			kaleoProcessLinkPersistence.findByPrimaryKey(kaleoProcessLinkId);
		kaleoProcessLink.setKaleoProcessId(kaleoProcessId);
		kaleoProcessLinkPersistence.update(kaleoProcessLink);
		return kaleoProcessLink;
	}
	public KaleoProcessLink updateKaleoProcessLink(
			long kaleoProcessLinkId, long kaleoProcessId,
			String workflowTaskName, long ddmTemplateId)
		throws PortalException, SystemException {
		KaleoProcessLink kaleoProcessLink =
			kaleoProcessLinkPersistence.findByPrimaryKey(kaleoProcessLinkId);
		kaleoProcessLink.setKaleoProcessId(kaleoProcessId);
		kaleoProcessLink.setWorkflowTaskName(workflowTaskName);
		kaleoProcessLink.setDDMTemplateId(ddmTemplateId);
		kaleoProcessLinkPersistence.update(kaleoProcessLink);
		return kaleoProcessLink;
	}
	public KaleoProcessLink updateKaleoProcessLink(
			long kaleoProcessId, String workflowTaskName, long ddmTemplateId)
		throws SystemException {
		KaleoProcessLink kaleoProcessLink =
			kaleoProcessLinkPersistence.fetchByKPI_WTN(
				kaleoProc
/**
 * 
 * @author Lucas Amador
 * 
 */
public class KnowledgeProcessInstanceMetric implements Serializable {
    private static final long serialVersionUID = 1L;
    private Long id;
    private Long processInstanceId;
    private Date processStarted;
    private Date processCompleted;
    private Integer processNodeTriggered;
    public KnowledgeProcessInstanceMetric() {
    }
    public KnowledgeProcessInstanceMetric(Long processInstanceId, Date processStarted, Date processCompleted,
            int processNodeTriggered) {
        this.processInstanceId = processInstanceId;
        this.processStarted = processStarted;
        this.processCompleted = processCompleted;
        this.processNodeTriggered = processNodeTriggered;
    }
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public Long getProcessInstanceId() {
        return processInstanceId;
    }
    public void setProcessInstanceId(Long processInstanceId) {

/**
 */
@VertxGen
public interface MethodWithValidHandlerParams {
  void methodWithHandlerParams(Handler<Byte> byteHandler, Handler<Short> shortHandler, Handler<Integer> intHandler,
                               Handler<Long> longHandler, Handler<Float> floatHandler, Handler<Double> doubleHandler,
                               Handler<Boolean> booleanHandler, Handler<Character> charHandler, Handler<String> strHandler,
                               Handler<VertxGenClass1> gen1Handler, Handler<VertxGenClass2> gen2Handler,
                               Handler<Void> voidHandler, Handler<Throwable> throwableHandler, Handler<TestDataObject> dataObjectHandler,
                               Handler<TestEnum> enumHandler);
  void methodWithListHandlerParams(Handler<List<Byte>> listByteHandler, Handler<List<Short>> listShortHandler, Handler<List<Integer>> listIntHandler,
                               Handler<List<Long>> listLongHandler, Handler<List<Float>> listFloatHandler, Handler<List<

                               Handler<List<Boolean>> listBooleanHandler, Handler<List<Character>> listCharHandler, Handler<List<String>> listStrHandler,
                               Handler<List<VertxGenClass1>> listVertxGenHandler, Handler<List<JsonObject>> listJsonObjectHandler, Handler<List<JsonArray>> listJsonArrayHandler,
                               Handler<List<TestDataObject>> listDataObjectHandler, Handler<List<TestEnum>> listEnumHandler);
  void methodWithSetHandlerParams(Handler<Set<Byte>> setByteHandler, Handler<Set<Short>> setShortHandler, Handler<Set<Integer>> setIntHandler,
                                   Handler<Set<Long>> setLongHandler, Handler<Set<Float>> setFloatHandler, Handler<Set<Double>> setDoubleHandler,
                                   Handler<Set<Boolean>> setBooleanHandler, Handler<Set<Character>> setCharHandler, Handler<Set<String>> setStrHandler,
                                   Handler<Set<VertxGenClass1>> setVertxGenHandler, Handler<Set<Json
/**
 * 롤관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Service("egovRoleManageService")
public class EgovRoleManageServiceImpl extends AbstractServiceImpl implements EgovRoleManageService {
	@Resource(name="roleManageDAO")
	public RoleManageDAO roleManageDAO;
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception {
		return roleManageDAO.selectRole(roleManageVO);
	}
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception {
		return roleManageDAO.selectRoleL

	}
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception {
		roleManageDAO.deleteRole(roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void updateRole(RoleManage roleManage) throws Exception {
		roleManageDAO.updateRole(roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 등록
	 * @param roleManage RoleManage
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO insertRole(RoleManage roleManage, RoleManageVO roleManageVO) throws Exception {
		roleManageDAO.insertRole(roleManage);	
		roleManageVO.setRoleCode(roleManage.getRoleCode());
		return roleManageDAO.selectRole(roleManageVO);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @param roleManageVO RoleManageVO
	 * @return int
	 * @exception Exception
	 */
	public int selectRoleListT
@Repository("deptManageDAO")
public class DeptManageDAO extends EgovComAbstractDAO {
	/**
	 * 부서를 관리하기 위해 등록된 부서목록을 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return List - 부서 목록
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<DeptManageVO> selectDeptManageList(DeptManageVO deptManageVO) throws Exception {
		return (List<DeptManageVO>) list("deptManageDAO.selectDeptManageList", deptManageVO);
	}
    /**
	 * 부서목록 총 갯수를 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return int - 부서 카운트 수
	 * @exception Exception
	 */
    public int selectDeptManageListTotCnt(DeptManageVO deptManageVO) throws Exception {
        return (Integer)select("deptManageDAO.selectDeptManageListTotCnt", deptManageVO);
    }
	/**
	 * 등록된 부서의 상세정보를 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return deptManageVO - 부서 Vo
	 * 
	 * @param bannerVO
	 */
	public DeptManageVO selectDeptManage(DeptManageVO deptManageVO) throws Exception {
		return (DeptManageVO) select("deptManageDAO.selectDeptManage",
/**
 * Then create a custom repository factory to replace the default
 * RepositoryFactoryBean that will in turn produce a custom RepositoryFactory.
 * The new repository factory will then provide your MyRepositoryImpl as the
 * implementation of any interfaces that extend the Repository interface,
 * replacing the SimpleJpaRepository implementation you just extended.
 * 
 * @author smwang
 * 
 * @param <R>
 * @param <T>
 * @param <I>
 */
public class MyRepositoryFactoryBean<R extends JpaRepository<T, I>, T, I extends Serializable>
		extends JpaRepositoryFactoryBean<R, T, I> {
	@Override
	protected RepositoryFactorySupport createRepositoryFactory(EntityManager em) {
		return new MyRepositoryFactory(em);
	}
	private static class MyRepositoryFactory<T, I extends Serializable> extends
			JpaRepositoryFactory {
		private final EntityManager em;
		public MyRepositoryFactory(EntityManager em) {
			super(em);
			this.em = em;
		}
		@Override
		protected <U, ID extends Serializable> org.spring
public class WetodoPlugin implements Plugin {
    public void initializePlugin(PluginManager manager, File pluginDirectory) {
        IQRouter iqRouter = XMPPServer.getInstance().getIQRouter();
        iqRouter.addHandler(new IQTaskGroupAddHandler());
        iqRouter.addHandler(new IQTaskGroupListHandler());
        iqRouter.addHandler(new IQTaskGroupModifyHandler());
        iqRouter.addHandler(new IQTaskGroupDelHandler());
        iqRouter.addHandler(new IQTaskAddHandler());
        iqRouter.addHandler(new IQTaskDelHandler());
        iqRouter.addHandler(new IQTaskListHandler());
        iqRouter.addHandler(new IQTaskListAllHandler());
        iqRouter.addHandler(new IQTaskModifyHandler());
        iqRouter.addHandler(new IQCodeSendHandler());
        iqRouter.addHandler(new IQCodeValidateHandler());
        iqRouter.addHandler(new IQAccountRegisterHandler());
        iqRouter.addHandler(new IQAccountInfoHandler());
        iqRouter.addHandler(new IQRoomListHandler());
        iqRou
/**
 * 
 * 
 * 
 * @author clintz
 */
public final class ServiceFactory
	private static ServiceFactory instance;
	private TaloolService taloolService;
	private CustomerService customerService;
	private EmailService emailService;
	private ActivityService activityService;
	private AnalyticService analyticService;
	private MessagingService messagingService;
	private ServiceFactory()
	{}
	public static ServiceFactory get()
	{
		return instance;
	}
	public static synchronized ServiceFactory createInstance(final TaloolService taloolService, final CustomerService customerService,
			final EmailService emailService, final ActivityService activityService, final AnalyticService analyticService,
			final MessagingService messagingService)
	{
		if (instance == null)
		{
			instance = new ServiceFactory();
			instance.taloolService = taloolService;
			instance.customerService = customerService;
			instance.emailService = emailService;
			instance.activityService = activityService;
			instance.analy
/**
 * 그룹관리에 관한 ServiceImpl 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Service("groupManageService")
public class GroupManageServiceImpl extends AbstractServiceImpl implements GroupManageService {
	@Resource(name="groupManageDAO")
    private GroupManageDAO groupManageDAO;
	/**
	 * 시스템사용 목적별 그룹 목록 조회
	 * @param groupManageVO GroupManageVO
	 * @return List<GroupManageVO>
	 * @exception Exception
	 */
	public List<GroupManageVO> selectGroupList(GroupManageVO groupManageVO) throws Exception {
		return groupManageDAO.selectGroupList(groupManageVO);
	}
	/**
	 * 검색조건에 따른 그룹정보를 조회
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO selectGroup(GroupManageVO groupManageVO) throws Exception {
		re

	}
	/**
	 * 그룹 기본정보를 화면에서 입력하여 항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param groupManage GroupManage
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO insertGroup(GroupManage groupManage, GroupManageVO groupManageVO) throws Exception {
		groupManageDAO.insertGroup(groupManage);
		groupManageVO.setGroupId(groupManage.getGroupId());
		return groupManageDAO.selectGroup(groupManageVO);
	}
	/**
	 * 화면에 조회된 그룹의 기본정보를 수정하여 항목의 정합성을 체크하고 수정된 데이터를 데이터베이스에 반영
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void updateGroup(GroupManage groupManage) throws Exception {
		groupManageDAO.updateGroup(groupManage);
	}
	/**
	 * 불필요한 그룹정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param groupManage GroupManage
	 * @exception Exception
	 */
	public void deleteGroup(GroupManage groupManage) throws Exception {
		groupManageDAO.deleteGroup(groupManage);
	}
    /**
	 * 목록조회 카운트를 반환한다
	 * @param groupManageVO GroupManageVO
	 * @return int
	 * @
/**
 * 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성
 *
 * </pre>
 */
@Repository("roleManageDAO")
public class RoleManageDAO extends EgovAbstractDAO {
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception {
		return (RoleManageVO) selectByPk("roleManageDAO.selectRole", roleManageVO);
	}
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception {
		return (List<RoleManageVO>) list("roleManageDAO.selec

	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 등록
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void insertRole(RoleManage roleManage) throws Exception {
		insert("roleManageDAO.insertRole", roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void updateRole(RoleManage roleManage) throws Exception {
		update("roleManageDAO.updateRole", roleManage);
	}
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception {
		delete("roleManageDAO.deleteRole", roleManage);
	}
    /**
	 * 롤목록 총 갯수를 조회한다.
	 * @param roleManageVO RoleManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectRoleListTotCnt(RoleManageVO roleManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("roleManageDAO.selectAuthorListTotCnt", roleManage
@Service("egovDeptManageService")
public class EgovDeptManageServiceImpl extends EgovAbstractServiceImpl implements EgovDeptManageService {
	@Resource(name="deptManageDAO")
    private DeptManageDAO deptManageDAO;
	/**
	 * 부서를 관리하기 위해 등록된 부서목록을 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return List - 부서 목록
	 * 
	 * @param deptManageVO
	 */
	public List<DeptManageVO> selectDeptManageList(DeptManageVO deptManageVO) throws Exception {
		return deptManageDAO.selectDeptManageList(deptManageVO);
	}
	/**
	 * 부서목록 총 갯수를 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return int - 부서 카운트 수
	 * 
	 * @param deptManageVO
	 */
	public int selectDeptManageListTotCnt(DeptManageVO deptManageVO) throws Exception {
		return deptManageDAO.selectDeptManageListTotCnt(deptManageVO);
	}
	/**
	 * 등록된 부서의 상세정보를 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return deptManageVO - 부서 Vo
	 * 
	 * @param deptManageVO
	 */
	public DeptManageVO selectDeptManage(DeptManageVO deptManageVO) throws Exception {
		return deptManag
/**
 * The persistent class for the raf_process database table.
 * 
 */
@Entity
@Table(name="raf_process")
public class RafProcess implements Serializable {
	private static final long serialVersionUID = 1L;
	@Id
@GeneratedValue(strategy=GenerationType.TABLE, generator="raf_process")  
	@Column(name="process_id", unique=true, nullable=false)
	private Long processId;
	@Column(name="bpm_process_id", nullable=false, length=1000)
	private String bpmProcessId;
	@Column(name="bpm_process_name", nullable=false, length=1000)
	private String bpmProcessName;
	@OneToMany(mappedBy="rafProcess")
	private List<RafProcessInstance> rafProcessInstances;
    public RafProcess() {
    }
	public Long getProcessId() {
		return this.processId;
	}
	public void setProcessId(Long processId) {
		this.processId = processId;
	}
	public String getBpmProcessId() {
		return this.bpmProcessId;
	}
	public void setBpmProcessId(String bpmProcessId) {
		this.bpmProcessId = bpmProcessId;
	}
	public String getBpmProcessName
public class LogicController {
	protected final Logger logger = LoggerFactory.getLogger(getClass());
	protected EntityService entityService = null;
	protected ClusterService clusterService = null;
	protected LogicService logicService = null;
	protected NLPService nlpService = null;
	protected ExternalService externalService = null;
	protected GeoService geoService = null;
	protected ConceptService conceptService = null;
	protected NeighbourhoodService neighbourhoodService = null;
	public void setup(EntityService entityService, ClusterService clusterService, NLPService nlpService, ExternalService externalService, GeoService geoService, ConceptService conceptService, NeighbourhoodService neighbourhoodService, LogicService logicService) {
		this.entityService = entityService;
		this.clusterService = clusterService;
		this.nlpService = nlpService;
		this.logicService = logicService;
		this.externalService = externalService;
		this.geoService = geoService;
		this.conceptService = conceptSer
@Repository("deptManageDAO")
public class DeptManageDAO extends EgovComAbstractDAO {
	/**
	 * 부서를 관리하기 위해 등록된 부서목록을 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return List - 부서 목록
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<DeptManageVO> selectDeptManageList(DeptManageVO deptManageVO) throws Exception {
		return list("deptManageDAO.selectDeptManageList", deptManageVO);
	}
    /**
	 * 부서목록 총 갯수를 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return int - 부서 카운트 수
	 * @exception Exception
	 */
    public int selectDeptManageListTotCnt(DeptManageVO deptManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("deptManageDAO.selectDeptManageListTotCnt", deptManageVO);
    }
	/**
	 * 등록된 부서의 상세정보를 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return deptManageVO - 부서 Vo
	 * 
	 * @param bannerVO
	 */
	public DeptManageVO selectDeptManage(DeptManageVO deptManageVO) throws Exception {
		return (DeptManageVO) selectByPk("deptManageDAO.s
/**
 * @author <a href="mailto:gang.lvg@alibaba-inc.com">kimi</a>
 */
public abstract class AbstractChannelHandlerDelegate implements ChannelHandlerDelegate {
    protected ChannelHandler handler;
    protected AbstractChannelHandlerDelegate(ChannelHandler handler) {
        Assert.notNull(handler, "handler == null");
        this.handler = handler;
    }
    public ChannelHandler getHandler() {
        if (handler instanceof ChannelHandlerDelegate) {
            return ((ChannelHandlerDelegate)handler).getHandler();
        }
        return handler;
    }
    public void connected(Channel channel) throws RemotingException {
        handler.connected(channel);
    }
    public void disconnected(Channel channel) throws RemotingException {
        handler.disconnected(channel);
    }
    public void sent(Channel channel, Object message) throws RemotingException {
        handler.sent(channel, message);
    }
    public void received(Channel channel, Object message) throws RemotingExcepti
/**
 * @Class Name : BkmkMenuManageDAO.java
 * @Description : 바로가기메뉴를 관리하는 서비스를 정의하기위한 데이터 접근 클래스
 * @Modification Information
 *
 *    수정일       수정자         수정내용
 *    -------        -------     -------------------
 *    2009. 9. 25.     윤성록
 *
 * @author 공통 컴포넌트 개발팀 윤성록
 * @since 2009. 9. 25.
 * @version
 * @see
 *
 */
@Repository("bkmkMenuManageDAO")
public class BkmkMenuManageDAO extends EgovComAbstractDAO{
    /**
     * 바로가기메뉴관리 정보를 삭제한다.
     *
     * @param BkmkMenuManage
     * @return
     * @throws Exception
     */
    public void deleteBkmkMenuManage(BkmkMenuManage bkmkMenuManage) throws Exception {
        delete("BkmkMenuManageDAO.deleteBkmkMenuManage", bkmkMenuManage);
    }
    /**
     * 바로가기메뉴관리 정보를 등록한다.
     *
     * @param BkmkMenuManage
     * @return
     * @throws Exception
     */
    public void insertBkmkMenuManage(BkmkMenuManage bkmkMenuManage) throws Exception {
        insert("BkmkMenuManageDAO.insertBkmkMenuManage", bkmkMenuManage);
    }
    /**
     * 

     *
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public BkmkMenuManageVO selectBkmkMenuManageResult(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        BkmkMenuManageVO vo = new BkmkMenuManageVO();
        vo = (BkmkMenuManageVO)select("BkmkMenuManageDAO.selectBkmkMenuManage", bkmkMenuManageVO);
        return vo;
    }
    /**
     * 조건에 맞는 바로가기메뉴관리 정보 목록을 조회한다.
     *
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
	public List<BkmkMenuManageVO> selectBkmkMenuManageList(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        return (List<BkmkMenuManageVO>) list("BkmkMenuManageDAO.selectBkmkMenuManageList", bkmkMenuManageVO);
    }
    /**
     * 조건에 맞는 바로가기메뉴관리 정보 목록의 건수를 조회한다.
     *
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public int selectBkmkMenuManageListCnt(BkmkMenuManageVO bkmkMenuManageVO)

        return (Integer)select("BkmkMenuManageDAO.selectBkmkMenuManageListCnt", bkmkMenuManageVO);
    }
    /**
     * 등록할  메뉴정보 목록을 조회한다.
     *
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
	public List<BkmkMenuManageVO> selectBkmkMenuList(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        return (List<BkmkMenuManageVO>) list("BkmkMenuManageDAO.selectBkmkMenuList", bkmkMenuManageVO);
    }
    /**
     * 등록할  메뉴정보 목록의 건수를 조회한다.
     *
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public int selectBkmkMenuListCnt(BkmkMenuManageVO bkmkMenuManageVO) throws Exception {
        return (Integer)select("BkmkMenuManageDAO.selectBkmkMenuListCnt", bkmkMenuManageVO);
    }
    /**
     * 미리보기를 할 바로가기메뉴관리의 목록을 조회한다.
     *
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    @SuppressWarnings("unchecked")
	public List<MenuManageVO> select
public class ServiceLocator {
    private static Cache cache = new Cache();
    private static InitialContext context = new InitialContext();
    
    public static Service getService(String jndiName) {
        Service cachedService = cache.getService(jndiName);
        if (cachedService != null) return cachedService;
        
        Service service = context.lookup(jndiName);
        if (service != null) cache.addService(service);
        
        return service;
    }
    
    public static void main(String[] args) {
        Service service = ServiceLocator.getService("Service1");
        service.execute();
        System.out.println();
        
        service = ServiceLocator.getService("Service2");
        service.execute();
        System.out.println();
               
        service = ServiceLocator.getService("Service1");
        service.execute();
        System.out.println();
        
        service = ServiceLocator.getService("Service2");
        service.execute();       
/**
 * 개요
 * - 휴가관리에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - 휴가관리에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 휴가관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Repository("vcatnManageDAO")
public class VcatnManageDAO extends EgovComAbstractDAO {
	/**
	 * 휴가관리정보를 관리하기 위해 등록된 휴가관리 목록을 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return List - 휴가관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<VcatnManageVO> selectVcatnManageList(VcatnManageVO vcatnManageVO) throws Exception {
		return list("vcatnManageDAO.selectVcatnManageList", vcatnManageVO);
	}
    /**
	 * 휴가관리목록 총 갯수를 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectVcatnManageListTotCnt(VcatnManageVO vcatnManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("vcatnManageDAO.selectVcatnManageListTotCnt", vcatnManageVO);
    }
	/**
	 * 등록된 휴가관리의 상세정보를 조회한다.
	 * @param vcatnManageVO - 휴가관리 V

	 * @return VcatnManageVO - 휴가관리 VO
	 */
	public VcatnManageVO selectVcatnManage(VcatnManageVO vcatnManageVO)  throws Exception {
		return (VcatnManageVO) selectByPk("vcatnManageDAO.selectVcatnManage", vcatnManageVO);
	}
	/**
	 * 휴가관리정보를 신규로 등록한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public void insertVcatnManage(VcatnManage vcatnManage) throws Exception {
		insert("vcatnManageDAO.insertVcatnManage", vcatnManage);
	}
	/**
	 * 기 등록된 휴가관리정보를 수정한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public void updtVcatnManage(VcatnManage vcatnManage) throws Exception {
		update("vcatnManageDAO.updateVcatnManage", vcatnManage);
	}
	/**
	 * 기 등록된 휴가관리정보를 삭제한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public void deleteVcatnManage(VcatnManage vcatnManage) throws Exception {
        delete("vcatnManageDAO.deleteVcatnManage",vcatnManage);
	}
    /**
	 * 휴가일자 중복여부 체크
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectVcatnManageDplctAt(VcatnManag

        return (Integer)getSqlMapClientTemplate().queryForObject("vcatnManageDAO.selectVcatnManageDplctAt", vcatnManageVO);
    }
    /*** 승인관련 ***/	
	/**
	 * 휴가관리정보 승인 처리를 위해 신청된 휴가관리 목록을 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return List - 휴가관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<VcatnManageVO> selectVcatnManageConfmList(VcatnManageVO vcatnManageVO) throws Exception {
		return list("vcatnManageDAO.selectVcatnManageConfmList", vcatnManageVO);
	}
    /**
	 * 휴가관리정보 승인 처리를 위해 신청된 휴가관리 목록 총 갯수를 조회한다.
	 * @param vcatnManageVO - 휴가관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectVcatnManageConfmListTotCnt(VcatnManageVO vcatnManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("vcatnManageDAO.selectVcatnManageConfmListTotCnt", vcatnManageVO);
    }
	/**
	 * 신청된 휴가를 승인처리한다.
	 * @param vcatnManage - 휴가관리 model
	 */
	public void updtVcatnManageConfm(VcatnManage vcatnManage) throws Exception {
		update("vc
/**
 * The controller that reacts to game actions.
 * @author Philip
 *
 */
public class ActionHandler {
    private NPCHandler npcHandler;
    private CombatHandler combatHandler;
    private MagicHandler magicHandler;
    private ItemHandler itemHandler;
    private MovementHandler movementHandler;
    private GameHandler gameHandler;
    /**
     * @return NPC handler
     */
    public NPCHandler getNPCHandler() {
        return npcHandler;
    }
    /**
     * 
     * @return Combat handler
     */
    public CombatHandler getCombatHandler() {
        return combatHandler;
    }
    /**
     * 
     * @return Magic handler
     */
    public MagicHandler getMagicHandler() {
        return magicHandler;
    }
    /**
     * 
     * @return Item handler
     */
    public ItemHandler getItemHandler() {
        return itemHandler;
    }
    /**
     * 
     * @return Movement handler
     */
    public MovementHandler getMovementHandler() {
        return movementHandler;
    }
    /
@Controller
@RequestMapping("/manage/manageModule")
public class ManageModuleController {
	private static Logger GSLogger = LoggerFactory.getLogger(ManageModuleController.class);
	@Autowired
	private ManageModuleService manageModuleService;
	private final String LIST_ACTION = "redirect:/manage/manageModule/list.do";
	/**
	 * 进入管理页
	 * @return
	 */
	@RequestMapping(value="enter")
	public ModelAndView enter() {		
		try{
		}catch(Exception e){
			GSLogger.error("进入manageModule管理页时发生错误：/manage/manageModule/enter", e);
			e.printStackTrace();
		}
		ModelAndView mav = new ModelAndView("/manage/manageModule/enter");
		return mav;
	}
	/**
	 * 列示或者查询所有数据
	 * @return
	 */
	@RequestMapping(value="list")
	public void list(ManageModuleQuery query, HttpServletResponse response) {
		String json = "";
		StringBuilder result = new StringBuilder();
		try{
			BaseBean baseBean = manageModuleService.findAllPage(query);
			result.append("{\"total\":").append(baseBean.getCount()).append(",")
			.append("\"r

			for(int i=0;i<baseBean.getList().size();i++) {
				ManageModule manageModule = (ManageModule) baseBean.getList().get(i);
				result.append("{")
			    .append("\"moduleId\":\"").append(manageModule.getModuleId()).append("\"").append(",")
			    .append("\"moduleName\":\"").append(manageModule.getModuleName()).append("\"").append(",")
			    .append("\"moduleDesc\":\"").append(manageModule.getModuleDesc()).append("\"").append(",")
			    .append("\"moduleIcon\":\"").append(manageModule.getModuleIcon()).append("\"").append(",")
			    .append("\"moduleUrl\":\"").append(manageModule.getModuleUrl()).append("\"").append(",")
			    .append("\"createTime\":\"").append(manageModule.getCreateTime()).append("\"").append(",")
			    .append("\"editTime\":\"").append(manageModule.getEditTime()).append("\"").append(",")
			    .append("\"editor\":\"").append(manageModule.getEditor()).append("\"")
				.append("}").append(",");
			}
			json = result.toString();
			if(baseBean.getList().size() > 

				json = json.substring(0, json.length()-1);
			}
			json += "]}";
			
			response.setHeader("Cache-Control", "no-cache");
			response.setCharacterEncoding("utf-8");
			try {
				response.getWriter().write(json);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}catch(Exception e){
			GSLogger.error("显示manageModule列表时发生错误：/manage/manageModule/list", e);
			e.printStackTrace();
		}
	}
	/**
	 * 进入新增页
	 * @return
	 */
	@RequestMapping(value="add")
	public ModelAndView add(ManageModuleQuery query) {		
		try{
		}catch(Exception e){
			GSLogger.error("进入manageModule新增页时发生错误：/manage/manageModule/add", e);
			e.printStackTrace();
		}
		ModelAndView mav = new ModelAndView("/manage/manageModule/add");
		return mav;
	}
	/**
	 * 保存对象
	 * @param request
	 * @param manageModule
	 * @return
	 */
	@RequestMapping(value="save")
	public void save(HttpServletRequest request, HttpServletResponse response, ManageModuleQuery query) {
		ManageModule manageModule = new ManageModule();
		String 

		try{
		    manageModule.setModuleName(query.getModuleName());
		    manageModule.setModuleDesc(query.getModuleDesc());
		    manageModule.setModuleIcon(query.getModuleIcon());
		    manageModule.setModuleUrl(query.getModuleUrl());
		    manageModule.setCreateTime(query.getCreateTime());
		    manageModule.setEditTime(query.getEditTime());
		    manageModule.setEditor(query.getEditor());
	        Timestamp  ts=new Timestamp(new Date().getTime());
	        manageModule.setCreateTime(ts);
	        manageModule.setEditTime(ts);
			manageModuleService.save(manageModule);
			json = "{\"success\":\"true\",\"message\":\"保存成功\"}";
		} catch(Exception e) {
			json = "{\"success\":\"false\",\"message\":\"保存失败\"}";
			GSLogger.error("保存manageModule信息时发生错误：/manage/manageModule/save", e);
			e.printStackTrace();
		}
		response.setHeader("Cache-Control", "no-cache");
		response.setCharacterEncoding("utf-8");
		try {
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTr

		}
	}
	/**
	 * 进入修改页
	 * @return
	 */
	@RequestMapping(value="modify")
	public ModelAndView modify(ManageModuleQuery query) {	
		ManageModule manageModule=new ManageModule();
		
		try{
			manageModule = manageModuleService.findById(query.getModuleId());
		}catch(Exception e){
			GSLogger.error("进入manageModule修改页时发生错误：/manage/manageModule/modify", e);
			e.printStackTrace();
		}
		ModelAndView mav = new ModelAndView("/manage/manageModule/modify");
		mav.addObject("manageModule", manageModule);
		return mav;
	}
	/**
	 * 更新对象
	 * @param request
	 * @param query
	 * @return
	 */
	@RequestMapping(value="update")
	public void update(HttpServletRequest request, HttpServletResponse response, ManageModuleQuery query) {
		ManageModule manageModule = null;
		String json = "";
		try{
		    manageModule = manageModuleService.findById(query.getModuleId());
		    manageModule.setModuleName(query.getModuleName());
		    manageModule.setModuleDesc(query.getModuleDesc());
		    manageModule.setModuleI

		    manageModule.setModuleUrl(query.getModuleUrl());
		    manageModule.setCreateTime(query.getCreateTime());
		    manageModule.setEditTime(query.getEditTime());
		    manageModule.setEditor(query.getEditor());
	        Timestamp  ts=new Timestamp(new Date().getTime());
	        manageModule.setEditTime(ts);
			manageModuleService.update(manageModule);
			
			json = "{\"success\":\"true\",\"message\":\"编辑成功\"}";
		} catch(Exception e) {
			json = "{\"success\":\"false\",\"message\":\"编辑失败\"}";
			GSLogger.error("编辑manageModule信息时发生错误：/manage/manageModule/update", e);
			e.printStackTrace();
		}
		response.setHeader("Cache-Control", "no-cache");
		response.setCharacterEncoding("utf-8");
		try {
			response.getWriter().write(json);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	/**
	 * 删除单个或多个对象
	 * @param id
	 * @return
	 */
	@RequestMapping(value="delete")
	public void delete(@RequestParam(value="id") String id, HttpServletResponse response) {
		String json = "";
		try
/**
 * User: chjp
 * Date: 11-10-8
 * Time: 上午11:18
 */
@UrlBinding("/admin/manager_user.do")
public class ManagerUserAction extends BaseAdminAction {
    @SpringBean
    private ManagerService managerService;
    private List<ManageUser> manageUsers;
    private ManageUser manageUser;
    private String[] nodes;
    private long manage_id;
    private String password;
    private String username;
    private List<ManageChannel> channels;
    private Map<ManageChannel, List<ManageNode>> menus;
    @DefaultHandler
    public Resolution manager_list() {
        manageUsers = managerService.getManageUsers();
        return getResolution("admin/manager_list");
    }
    public Resolution manager_form() {
        loadMenus();
        if (manage_id > 0) {
            manageUser = managerService.getManageUser(manage_id);
            username = manageUser.getUsername();
            nodes = StringUtils.split(manageUser.getNodes(), ",");
        }
        return getResolution("admin/manager_form

    }
    private void loadMenus(){
    	channels = managerService.getManageChannels();
    	menus = new HashMap<ManageChannel, List<ManageNode>>();
    	if(channels != null){
    		for(ManageChannel mc : channels){
    			menus.put(mc, managerService.getManageNodes(mc.getId()));
    		}
    	}
    }
    
    public Resolution close() {
        manageUser = managerService.getManageUser(manage_id);
        manageUser.setStatus(-1);
        managerService.saveManageUser(manageUser);
        return new RedirectResolution(getClass());
    }
    public Resolution open() {
        manageUser = managerService.getManageUser(manage_id);
        manageUser.setStatus(0);
        managerService.saveManageUser(manageUser);
        return new RedirectResolution(getClass());
    }
    public Resolution save_manager() {
        if (manage_id > 0) {
            manageUser = managerService.getManageUser(manage_id);
            if (StringUtils.isNotBlank(password)) {
                manageUser.setPasswo

            }
        } else {
            manageUser = new ManageUser();
            manageUser.setUsername(username);
            manageUser.setPassword(password);
        }
        manageUser.setNodes(StringUtils.join(nodes, ","));
        managerService.saveManageUser(manageUser);
        return new RedirectResolution(DashboardAction.class).addParameter("suc");
    }
    public List<ManageUser> getManageUsers() {
        return manageUsers;
    }
    public ManageUser getManageUser() {
        return manageUser;
    }
    public void setManageUser(ManageUser manageUser) {
        this.manageUser = manageUser;
    }
    public void setManagerService(ManagerService managerService) {
        this.managerService = managerService;
    }
    public String[] getNodes() {
        return nodes;
    }
    public void setNodes(String[] nodes) {
        this.nodes = nodes;
    }
    public long getManage_id() {
        return manage_id;
    }
    public void setManage_id(long manage_id) {
   
/**
 * 개요
 * - 포상관리에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - 포상관리에 대한 등록, 수정, 삭제, 조회, 승인처리 기능을 제공한다.
 * - 포상관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Repository("rwardManageDAO")
public class RwardManageDAO extends EgovComAbstractDAO {
	/**
	 * 포상관리정보를 관리하기 위해 등록된 포상관리 목록을 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return List - 포상관리 목록
	 */
	@SuppressWarnings("unchecked")
	public List<RwardManageVO> selectRwardManageList(RwardManageVO rwardManageVO) throws Exception {
		return list("rwardManageDAO.selectRwardManageList", rwardManageVO);
	}
    /**
	 * 포상관리목록 총 갯수를 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return int
	 * @exception Exception
	 */
    public int selectRwardManageListTotCnt(RwardManageVO rwardManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("rwardManageDAO.selectRwardManageListTotCnt", rwardManageVO);
    }
	/**
	 * 등록된 포상관리의 상세정보를 조회한다.
	 * @param rwardManageVO - 포상관리 V

	 * @return RwardManageVO - 포상관리 VO
	 */
	public RwardManageVO selectRwardManage(RwardManageVO rwardManageVO)  throws Exception {
		return (RwardManageVO) selectByPk("rwardManageDAO.selectRwardManage", rwardManageVO);
	}
	/**
	 * 포상관리정보를 신규로 등록한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void insertRwardManage(RwardManage rwardManage) throws Exception {
		insert("rwardManageDAO.insertRwardManage", rwardManage);
	}
	/**
	 * 기 등록된 포상관리정보를 수정한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void updtRwardManage(RwardManage rwardManage) throws Exception {
		update("rwardManageDAO.updtRwardManage", rwardManage);
	}
	/**
	 * 기 등록된 포상관리정보를 삭제한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void deleteRwardManage(RwardManage rwardManage) throws Exception {
        delete("rwardManageDAO.deleteRwardManage",rwardManage);
	}
    /*** 승인처리관련 ***/
	/**
	 * 포상관리정보 승인 처리를 위해 신청된 포상관리 목록을 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return List - 포상관리 목록
	 */
	@SuppressWarnings("unche
public class ServicesFactory {
	private static ILocalStorageService _localStorageService;
	private static ITagService _tagService;
	private static IErrorService _errorService;
	private static ILocalNotificationService _localNotificationService;
	private static IRemoteNotificationService _remoteNotificationService;
	private static IAlarmService _alarmService;
	public static ILocalStorageService getLocalStorageService() {
		if (_localStorageService == null) {
			_localStorageService = new LocalStorageService();
		}
		
		return _localStorageService;
	}
	public static ITagService getFakeNfcTagService() {
		if (_tagService == null) {
			_tagService = new FakeNfcTagService();
		}
		
		return _tagService;
	}
	public static IErrorService getErrorService() {
		if (_errorService == null) {
			_errorService = new ErrorService();
		}
		
		return _errorService;
	}
	public static ILocalNotificationService getLocalNotificationService() {
		if (_localNotificationService == null) {
			_localNotificatio
public class GeneralServiceFactory {
	/**
	 * General Application Service Object
	 * General Service Object for Any Project
	 */
	private static HttpConnectionService httpConnectionService;
	private static ImageService imageService;
	private static ThreadService threadService;
	private static LocaleService localeService;
	private static AlertDialogService alertDialogService;
	private static ActivityMonitorService activityMonitorService;
	private static DatabaseDownloadService databaseDownloadService;
	private static SQLiteDatabaseService sqLiteDatabaseService;
	public static HttpConnectionService getHttpConnectionService(AndroidProjectApplication application)
	{
		if(httpConnectionService == null)
		{
			httpConnectionService = new HttpConnectionServiceImpl(application);
		}
		
		return httpConnectionService;
	}
	public static ImageService getImageService()
	{
		if(imageService == null)
		{
			imageService = new ImageServiceImpl();
		}
		
		return imageService;
	}
	public static Thread

	{
		if(threadService == null)
		{
			threadService = new ThreadServiceImpl();
		}
		
		return threadService;
	}
	public static LocaleService getLocaleService()
	{
		if(localeService == null)
		{
			localeService = new LocaleServiceImpl();
		}
		
		return localeService;
	}
	public static AlertDialogService getAlertDialogService()
	{
		if(alertDialogService == null)
		{
			alertDialogService = new AlertDialogServiceImpl();
		}
		
		return alertDialogService;
	}
	public static ActivityMonitorService getActivityMonitorService()
	{
		if(activityMonitorService == null)
		{
			activityMonitorService = new ActivityMonitorServiceImpl();
		}
		
		return activityMonitorService;
	}
	public static DatabaseDownloadService getDatabaseDownloadService()
	{
		if(databaseDownloadService == null)
		{
			databaseDownloadService = new DatabaseDownloadServiceImpl();
		}
		
		return databaseDownloadService;
	}
	public static SQLiteDatabaseService getSQLiteDatabaseService()
	{
		if (sqLiteDatabaseService == 
/**
 * 일반회원관리에 관한비지니스클래스를 정의한다.
 * @author 공통서비스 개발팀 조재영
 * @since 2009.04.10
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.04.10  조재영          최초 생성
 *
 * </pre>
 */
@Service("mberManageService")
public class MberManageServiceImpl extends AbstractServiceImpl implements MberManageService {
	/** userManageDAO */
	@Resource(name="userManageDAO")
	private UserManageDAO userManageDAO;
	/** mberManageDAO */
	@Resource(name="mberManageDAO")
	private MberManageDAO mberManageDAO;
	/** entrprsManageDAO */
	@Resource(name="entrprsManageDAO")
	private EntrprsManageDAO entrprsManageDAO;
	/** egovUsrCnfrmIdGnrService */
	@Resource(name="egovUsrCnfrmIdGnrService")
	private EgovIdGnrService idgenService;
	/**
	 * 사용자의 기본정보를 화면에서 입력하여 항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param mberManageVO 일반회원 등록정보
	 * @return result 등록결과
	 * @throws Exception
	 */
	public String insertMber(M

		String uniqId = idgenService.getNextStringId();
		mberManageVO.setUniqId(uniqId);
		String pass = EgovFileScrty.encryptPassword(mberManageVO.getPassword());
		mberManageVO.setPassword(pass);
		
		String result = mberManageDAO.insertMber(mberManageVO);
		return result;
	}
	/**
	 * 기 등록된 사용자 중 검색조건에 맞는 일반회원의 정보를 데이터베이스에서 읽어와 화면에 출력
	 * @param uniqId 상세조회대상 일반회원아이디
	 * @return mberManageVO 일반회원상세정보
	 * @throws Exception
	 */
	public MberManageVO selectMber(String uniqId) {
		MberManageVO mberManageVO = mberManageDAO.selectMber(uniqId);		
		return mberManageVO;
	}
	/**
	 * 기 등록된 회원 중 검색조건에 맞는 회원들의 정보를 데이터베이스에서 읽어와 화면에 출력
	 * @param userSearchVO 검색조건
	 * @return List<MberManageVO> 일반회원목록정보
	 */
	public List<MberManageVO> selectMberList(UserDefaultVO userSearchVO) {
		return mberManageDAO.selectMberList(userSearchVO);
	}
    /**
     * 일반회원 총 갯수를 조회한다.
     * @param userSearchVO 검색조건
     * @return 일반회원총갯수(int) 
     */
    public int selectMberListTotCnt(UserDefaultVO userSearchVO) {
   

    }
	/**
	 * 화면에 조회된 일반회원의 기본정보를 수정하여 항목의 정합성을 체크하고 수정된 데이터를 데이터베이스에 반영
	 * @param mberManageVO 일반회원수정정보
	 * @throws Exception
	 */
	public void updateMber(MberManageVO mberManageVO) throws Exception {
		String pass = EgovFileScrty.encryptPassword(mberManageVO.getPassword());
		mberManageVO.setPassword(pass);
		mberManageDAO.updateMber(mberManageVO);
	}
	/**
	 * 화면에 조회된 사용자의 정보를 데이터베이스에서 삭제
	 * @param checkedIdForDel 삭제대상 일반회원아이디
	 * @throws Exception
	 */
	public void deleteMber(String checkedIdForDel)  {
		String [] delId = checkedIdForDel.split(",");
		for (int i=0; i<delId.length ; i++){
			String [] id = delId[i].split(":");
			if (id[0].equals("USR03")){
				userManageDAO.deleteUser(id[1]);				
			}else if(id[0].equals("USR01")){
				mberManageDAO.deleteMber(id[1]);
			}else if(id[0].equals("USR02")){
				entrprsManageDAO.deleteEntrprsmber(id[1]);
			}
		}
	}
	/**
	 * 일반회원 약관확인
	 * @param stplatId 일반회원약관아이디
	 * @return 일반회원약관정보(List)
	 * @throws Exception
	 */
	public List sel
/**
 * description:业务逻辑层为中转中心仓库出库信息界面提供的服务
 * @author 阮威威
 * */
public interface OutRepositoryBLService {
	/**
	 * description:添加新的出库单信息
	 * 前置条件：用户按照界面输入OutRepositoryVO的信息，界面传递OutRepositoryVO
	 * 后置条件：系统保存出库单信息，返回界面是否保存成功
	 * 需接口：OutRepositoryDataService.AddOutRepositoryFormmDT(OutRepositoryPO outRepositoryPO)，
	 * OutRepositoryDataService.UpdateRepositoryInfoDT(OutRepositoryPO outRepository)
	 * @param OutRepositoryVO ,出库单信息的相关值对象，具体参照OutRepositoryVO的定义
	 * @return boolean, 返回出库单信息是否添加成功
	 * */
	public boolean addOutRepositoryFormBL(OutRepositoryVO outRepositoryVO);
	/**
	 * description:修改新的出库单信息
	 * 前置条件：用户按照界面输入OutRepositoryVO的信息，界面传递OutRepositoryVO
	 * 后置条件：系统保存修改的出库单信息，返回界面是否修改成功
	 * 需接口：OutRepositoryDataService.ModifyInRepositoryFormDT(OutRepositoryPO outRepositoryPO),
	 * OutRepositoryDataService.UpdateRepositoryInfoDT(OutRepositoryPO outRepository)
	 * @param OutRepositoryVO ,出库单信息的相关值对象，具体参照OutRepositoryVO的定义
	 * @return boolean, 返回出库单信息是否修改成功
	 * */
	public boolean modifyOut
/**
 * 单证流程表
 * @author ada
 *
 */
public class ProcessStepBean {
	private String  processStepID;
	private String 	declNo;
	private String 	processCode;
	private String 	processOrgCode;
	private String 	processDeptCode;
	private String 	processOperatorCode;
	private String 	processOperateDatetime;
	private String 	remarks;
	private String 	nextProcessCode;
	private String 	nextProcessOrgCode;
	private String 	nextProcessDeptCode;
	private String 	nextProcessOperator;
	public ProcessStepBean() {
		super();
	}
	public String getProcessStepID() {
		return processStepID;
	}
	public void setProcessStepID(String processStepID) {
		this.processStepID = processStepID;
	}
	public String getDeclNo() {
		return declNo;
	}
	public void setDeclNo(String declNo) {
		this.declNo = declNo;
	}
	public String getProcessCode() {
		return processCode;
	}
	public void setProcessCode(String processCode) {
		this.processCode = processCode;
	}
	public String getProcessOrgCode() {
		return processOrgCode;
	}
	

		this.processOrgCode = processOrgCode;
	}
	public String getProcessDeptCode() {
		return processDeptCode;
	}
	public void setProcessDeptCode(String processDeptCode) {
		this.processDeptCode = processDeptCode;
	}
	public String getProcessOperatorCode() {
		return processOperatorCode;
	}
	public void setProcessOperatorCode(String processOperatorCode) {
		this.processOperatorCode = processOperatorCode;
	}
	public String getProcessOperateDatetime() {
		return processOperateDatetime;
	}
	public void setProcessOperateDatetime(String processOperateDatetime) {
		this.processOperateDatetime = processOperateDatetime;
	}
	public String getRemarks() {
		return remarks;
	}
	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}
	public String getNextProcessCode() {
		return nextProcessCode;
	}
	public void setNextProcessCode(String nextProcessCode) {
		this.nextProcessCode = nextProcessCode;
	}
	public String getNextProcessOrgCode() {
		return nextProcessOrgCode;
	}
	public void se
/*
 */
/**
 * Provides access to all available RETS handlers
 */
public class RetsHandlers
    public RetsHandlers()
    {
        mHandlersByName = new HashMap();
        mHandlerList = new ArrayList();
        add(new ActionHandler());
        add(new LoginHandler());
        add(new LogoutHandler());
        add(new GetMetadataHandler());
    }
    private void add(ServletHandler handler)
    {
        mHandlersByName.put(handler.getName(), handler);
        mHandlerList.add(handler);
    }
    /**
     * Resets all handlers
     */
    public void resetAll()
    {
        for (int i = 0; i < mHandlerList.size(); i++)
        {
            ServletHandler handler = (ServletHandler) mHandlerList.get(i);
            handler.reset();
        }
    }
    public void validateAll(ValidationResult result)
    {
        for (int i = 0; i < mHandlerList.size(); i++)
        {
            ServletHandler handler = (ServletHandler) mHandlerList.get(i);
            handler.validate(result);
     
public class AtomicProcessExtractor {
	public static List<Process> getAtomics(Process process, List<Process> atomics) {
		if (process == null) {
			return null;
		}
		
		
		if (process.isAtomic() || process.isSimple()) {
			atomics.add(process);
			return atomics;
		}
		
		CompositeProcess compositeProcess = (CompositeProcess) process;
		ControlConstruct comp = compositeProcess.getComposedOf();
		
		if (comp instanceof IfThenElseImpl) {
			ControlConstruct  thenConstruct = ((IfThenElseImpl)comp).getThen();
			ControlConstruct elseConstruct = ((IfThenElseImpl)comp).getElse();
			if(thenConstruct != null) {
				Process tmpProcess = ((Perform)thenConstruct).getProcess();
				getAtomics(tmpProcess, atomics);
			}
			
			if (elseConstruct != null) {
				Process tmpProcess = ((Perform)elseConstruct).getProcess();
				getAtomics(tmpProcess, atomics);
			}
			
		} else if(comp instanceof RepeatWhileImpl) {
			ControlConstruct whileConstruct = ((RepeatWhileImpl)comp).getWhileProcess();
			if (w
/**
 * Add a websocket listener to a controller.
 *
 *
 * @author m410
 */
public class WebSocket {
    private CloseHandler closeHandler = (s)->{} ;
    private OpenHandler openHandler = (s)->{};
    private ErrorHandler errorHandler = (s)->{};
    private MessageHandler messageHandler = (s)->{};
    public WebSocket(CloseHandler closeHandler, OpenHandler openHandler,
             ErrorHandler errorHandler, MessageHandler messageHandler) {
        this.closeHandler = closeHandler;
        this.openHandler = openHandler;
        this.errorHandler = errorHandler;
        this.messageHandler = messageHandler;
    }
    public WebSocket() {
    }
    public WebSocket open(OpenHandler openHandler) {
        return new WebSocket(closeHandler,openHandler,errorHandler,messageHandler);
    }
    public WebSocket close(CloseHandler closeHandler) {
        return new WebSocket(closeHandler,openHandler,errorHandler,messageHandler);
    }
    public WebSocket message(MessageHandler messageHandler)
@Remote
public interface RafProcessInstanceSessionEJBRemote {
	/**
	 * queryByRange - allows querying by range/block
	 * 
	 * @param jpqlStmt
	 * @param firstResult
	 * @param maxResults
	 * @return a list of RafProcessInstance
	 */
	public List<RafProcessInstance> queryByRange(String jpqlStmt, int firstResult,
			int maxResults);
	/**
	 * persistRafProcessInstance persists a country
	 * 
	 * @param rafProcessInstance
	 * @return the persisted RafProcessInstance
	 */
	public RafProcessInstance persistRafProcessInstance(RafProcessInstance rafProcessInstance);
	/**
	 * persistRafProcessInstanceList - persists a list of RafProcessInstance
	 * 
	 * @param rafProcessInstanceList
	 * @return the list of persisted RafProcessInstance
	 */
	public ArrayList<RafProcessInstance> persistRafProcessInstanceList(
			List<RafProcessInstance> rafProcessInstanceList);
	/**
	 * mergeRafProcessInstance - merges a RafProcessInstance
	 * 
	 * @param rafProcessInstance
	 * @return the merged RafProcessInstan

	 */
	public RafProcessInstance mergeRafProcessInstance(RafProcessInstance rafProcessInstance);
	/**
	 * mergeRafProcessInstanceList - merges a list of RafProcessInstance
	 * 
	 * @param rafProcessInstanceList
	 * @return the merged list of RafProcessInstance
	 */
	public ArrayList<RafProcessInstance> mergeRafProcessInstanceList(
			List<RafProcessInstance> rafProcessInstanceList);
	/**
	 * removeRafProcessInstance - removes a RafProcessInstance
	 * 
	 * @param rafProcessInstance
	 */
	public void removeRafProcessInstance(RafProcessInstance rafProcessInstance);
	/**
	 * removeRafProcessInstanceList - removes a list of RafProcessInstance
	 * 
	 * @param rafProcessInstanceList
	 */
	public void removeRafProcessInstanceList(List<RafProcessInstance> rafProcessInstanceList);
	/**
	 * findByRafProcessInstanceLike - finds a list of RafProcessInstance Like
	 * 
	 * @param rafProcessInstance
	 * @return the list of RafProcessInstance found
	 */
	public List<RafProcessInstance> findByRafProcess
/**
 * 그룹관리에 관한 서비스 인터페이스 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  이문준          최초 생성
 *
 * </pre>
 */
public interface EgovGroupManageService {
	/**
	 * 검색조건에 따른 그룹정보를 조회
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO selectGroup(GroupManageVO groupManageVO) throws Exception;
	/**
	 * 시스템사용 목적별 그룹 목록 조회
	 * @param groupManageVO GroupManageVO
	 * @return List<GroupManageVO>
	 * @exception Exception
	 */
	public List<GroupManageVO> selectGroupList(GroupManageVO groupManageVO) throws Exception;
	/**
	 * 그룹 기본정보를 화면에서 입력하여 항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param groupManage GroupManage
	 * @param groupManageVO GroupManageVO
	 * @return GroupManageVO
	 * @exception Exception
	 */
	public GroupManageVO insertGroup(GroupManage 
@Service("egovDeptManageService")
public class EgovDeptManageServiceImpl extends EgovAbstractServiceImpl implements EgovDeptManageService {
	@Resource(name="deptManageDAO")
    private DeptManageDAO deptManageDAO;
	/**
	 * 부서를 관리하기 위해 등록된 부서목록을 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return List - 부서 목록
	 * 
	 * @param deptManageVO
	 */
	public List<DeptManageVO> selectDeptManageList(DeptManageVO deptManageVO) throws Exception {
		return deptManageDAO.selectDeptManageList(deptManageVO);
	}
	/**
	 * 부서목록 총 갯수를 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return int - 부서 카운트 수
	 * 
	 * @param deptManageVO
	 */
	public int selectDeptManageListTotCnt(DeptManageVO deptManageVO) throws Exception {
		return deptManageDAO.selectDeptManageListTotCnt(deptManageVO);
	}
	/**
	 * 등록된 부서의 상세정보를 조회한다.
	 * @param deptManageVO - 부서 Vo
	 * @return deptManageVO - 부서 Vo
	 * 
	 * @param deptManageVO
	 */
	public DeptManageVO selectDeptManage(DeptManageVO deptManageVO) throws Exception {
		return deptManag
public class EventHandlerWrapper {
    private final WeakReference<EventHandler> weakHandler;
    public EventHandlerWrapper(EventHandler handler) {
        weakHandler = new WeakReference<EventHandler>(handler);
    }
    public boolean containsHandler(EventHandler handler) {
        EventHandler eventHandler = weakHandler.get();
        return eventHandler != null && eventHandler == handler;
    }
    public void invokeHandlerMethod(Event event) throws InvocationTargetException, IllegalAccessException, HandlerMethodNotFoundException {
        HandlerMethod handlerMethod = getHandlerMethod(event);
        handlerMethod.invoke();
    }
    private Method getHandlerMethodFor(EventHandler handler, Class<? extends Event> eventClass) throws HandlerMethodNotFoundException {
        if (handler == null) return null;
        Method[] declaredMethods = handler.getClass().getDeclaredMethods();
        for (Method method : declaredMethods) {
            if (isHandleMethodFor(method, eventClass))
final class Promise<T> {
    @SuppressWarnings("unchecked")
    private Handler handler;
    private boolean canceled;
    private boolean resolved;
    public void then(Handler<T> handler) {
        this.handler = handler;
    }
    public void then(AsyncResultHandler<T> handler) {
        this.handler = handler;
    }
    @SuppressWarnings("unchecked")
    public void cancel(Object error) {
        if (!canceled) {
            canceled = true;
            if (handler != null) {
                if (handler instanceof AsyncResultHandler) {
                    handler.handle(new YokeAsyncResult<T>(error, null));
                    handler = null;
                    return;
                }
                handler.handle(error);
                handler = null;
            }
        }
    }
    @SuppressWarnings("unchecked")
    public void resolve(T value) {
        if (!canceled && !resolved) {
            resolved = true;
            if (handler != null) {
                if (handle
/**
 * Brian Ploeckelman created on 12/12/2015.
 */
public class AreaMgmt extends Area {
    GlyphLayout                    glyphLayout;
    public static Rectangle        bounds;
    ObjectMap<Manage.Type, Manage> manageMap;
    Manage                         currentManage;
    public AreaMgmt(GameScreen gameScreen) {
        super(gameScreen, Type.MGMT);
        worldX = 3;
        glyphLayout = new GlyphLayout(Assets.font, "Management Area");
        float w = gameScreen.uiCamera.viewportWidth / 2f;
        float h = gameScreen.uiCamera.viewportHeight - gameScreen.uiCamera.viewportHeight / 6f;
        float x = gameScreen.uiCamera.viewportWidth / 2f - w / 2f;
        float y = gameScreen.uiCamera.viewportHeight / 2f - h / 2f;
        bounds = new Rectangle(x, y, w, h);
        manageMap = new ObjectMap<Manage.Type, Manage>();
        manageMap.put(Manage.Type.SLAVES, new ManageSlaves(bounds));
        manageMap.put(Manage.Type.UPGRADES, new ManageUpgrades(bounds));
        manageMap
public class ServiceInjector {
	public static BadgesService badgesService = new BadgesServiceImpl();
	public static ContextService contextService = new ContextServiceImpl();
	public static AppleSaleTransactionService appleSaleTransactionService = new TransactionServiceImpl();
	public static AppleTransactionService appleTransactionService = new TransactionServiceImpl();
	public static DateService dateService = new DateServiceImpl();
	public static DiseaseService diseaseService = new DiseaseServiceImpl();
	public static DispensibleItemTransaction dispensibleItemTransactionService = new TransactionServiceImpl();
	public static FarmerService farmerService = new FarmerServiceImpl();
	public static FertilizeService fertilizeService = new FertilizeServiceImpl();
	public static FieldService fieldService = new FieldServiceImpl();
	public static GrowingService growingService = new GrowingServiceImpl();
	public static HarvestService harvestService = new HarvestServiceImpl();
	public static Humidi

	public static HumidityGroovesService humidityGroovesService = new HumidityServiceImpl();
	public static HumidityService humidityService = new HumidityServiceImpl();
	public static IndispensibleItemTransaction indispensibleItemTrans = new TransactionServiceImpl();
	public static InfoTableService infoTableService = new InfoTableServiceImpl();
	public static InsuranceService insuranceService = new InsuranceServiceImpl();
	public static IrrigationService irrigationService = new IrrigationServiceImpl();
	public static ItemTransactionService itemTransactionService = new TransactionServiceImpl();
	public static LandTreatmanService landTreatmanService = new LandTreatmanServiceImpl();
	public static MoneyTransactionService moneyTransactionService = new TransactionServiceImpl();
	public static PlantingService plantingService = new PlantingServiceImpl();
	public static PriceService priceService = new PriceServiceImpl();
	public static RandomGeneratorService randomGeneratorService = new RandomGe

	public static SoilService soilService = new SoilServiceImpl();
	public static StoreService storeService = new StoreServiceImpl();
	public static ThiefService thiefService = new ThiefServiceImpl();
	public static TipService tipService = new TipServiceImpl();
	public static YieldService yieldService = new YieldServiceImpl();
	public static YmlService ymlService = new YmlServiceImpl();
	public static PlantationService plantationService = new PlantationServiceImpl();
	public static FridgeService fridgeService = new FridgeServiceImpl();
	public static YieldPortionService yieldPortionService = new YieldPortionServiceImpl();
	public static MoneyConversionService moneyConversionService = new ConversionServiceImpl();
	public static SellingService sellService = new SellingServiceImpl();
	public static UVService uvService = new UVServiceImpl();
	public static IceService iceService  = new IceServiceImpl();
	public static LogFarmerDataService logFarmerDataService = new LogFarmerDataServiceImpl();

	public static ResumeService resumeService = new ResumeServiceImpl();
	public static QuizService quizService = new QuizServiceImpl();
	public static PrunningService prunningService = new PrunningServiceImpl();
	public static WeatherService weatherService = new WeatherServiceImpl();
	public static GrassGrowthService grassGrowthService = new GrassGrowthServiceImpl();
	public static EcoPointsService ecoPointsService = new EcoPointsServiceImpl();
	public static LuckService luckService = new LuckServiceImpl();
	public static ItemInstanceService itemInstanceService = new ItemInstanceServiceImpl();
	public static RankingService rankingService = new RankingServiceImpl();
	public static GameEndService gameEndService = new GameEndServiceImpl();
	public static RecommenderService recommenderService  =new RecommenderServiceImpl();
	public static LearnStateEventService learnStateEventService = new LearnStateEventServiceImpl();
	public static PlantTypeService plantTypeService = new PlantTypeServiceI
/**
 * 개요
 * - 연차관리에 대한 DAO 클래스를 정의한다.
 *
 * 상세내용
 * - 연차관리에 대한 등록, 수정, 삭제, 조회 기능을 제공한다.
 * @author 이기하
 * @version 1.0
 * @created 2014.11.14
 */
@Repository("indvdlYrycDAO")
public class IndvdlYrycDAO extends EgovComAbstractDAO {
	/**
	 * 연차를 조회처리한다.
	 * @param indvdlYrycManage - 연차관리 model
	 */
	@SuppressWarnings("unchecked")
	public List<IndvdlYrycManage> selectIndvdlYrycManageList(IndvdlYrycManage indvdlYrycManage) throws Exception {
		return (List<IndvdlYrycManage>)list("indvdlYrycDAO.selectIndvdlYrycManageList", indvdlYrycManage);
	}
	/**
	 * 연차목록 총 갯수를 조회한다.
	 * @param indvdlYrycManage - 연차관리 model
	 */
	public int selectIndvdlYrycManageListTotCnt(IndvdlYrycManage indvdlYrycManage) throws Exception {
		return (Integer)select("indvdlYrycDAO.selectIndvdlYrycManageListTotCnt", indvdlYrycManage);
	}
	/**
	 * 연차를 입력처리한다.
	 * @param indvdlYrycManage - 연차관리 model
	 */
	public void insertIndvdlYrycManage(IndvdlYrycManage indvdlYrycManage) throws Exception {
		insert("indvdlYrycDAO.inse
public class Scheduler implements Runnable
	private ReadyQueue readyQueue;
	public Scheduler(ReadyQueue readyQueue)
	{
		this.readyQueue = readyQueue;
	}
	public ReadyQueue getReadyQueue() 
	{
		return this.readyQueue;
	}
	public Process dequeueReadyQueue()
	{
		return readyQueue.dequeueReadyQueue();
	}
	public void simulateCPUBurst(Process process)
	{
		int time = process.getProcessTime();
		
		time = time - 1;
		process.setProcessTime(time);
		process.setTimeStamp();
		process.setState(Process.WAITING);
			
		if(time<=0)
		{
			process.setState(Process.TERMINATE);
			System.out.println(process.getName() + " "+ process.getStringState());
			sleep(2500);
		}
	}
			
	private void sleep(int i) 
	{
		try {
			Thread.sleep(i);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}		
	}
	@Override
	public void run() 
	{		
		while(ReadyQueue.isReady)
		{
			Process process = readyQueue.dequeueReadyQueue();
		
			if(process!=null)
			{
				process.setState(Process.RUNNING);
				simu
public class DataSCM implements Serializable {
	private static final long serialVersionUID = 1L;
	private String repositoryUrl;
	private String repositoryType;
	private String repositoryServer;
	private String repositoryPort;
	private String repositoryUsr;
	private String repositoryPwd;
	public DataSCM() {
		super();
	}
	public DataSCM(RepositoryDTO r) {
		super();
		repositoryUrl = r.getRepository_name();
		repositoryType = r.getRepository_protocol();
		repositoryServer = r.getRepository_server();
		repositoryPort = r.getRepository_port();
		repositoryUsr = r.getRepository_user();
		repositoryPwd = r.getRepository_password();
	}
	/**
	 * @return the repositoryUrl
	 */
	public String getRepositoryUrl() {
		return repositoryUrl;
	}
	/**
	 * @param repositoryUrl the repositoryUrl to set
	 */
	public void setRepositoryUrl(String repositoryUrl) {
		this.repositoryUrl = repositoryUrl;
	}
	/**
	 * @return the repositoryType
	 */
	public String getRepositoryType() {
		return repositoryType;
	

	/**
	 * @param repositoryType the repositoryType to set
	 */
	public void setRepositoryType(String repositoryType) {
		this.repositoryType = repositoryType;
	}
	/**
	 * @return the repositoryServer
	 */
	public String getRepositoryServer() {
		return repositoryServer;
	}
	/**
	 * @param repositoryServer the repositoryServer to set
	 */
	public void setRepositoryServer(String repositoryServer) {
		this.repositoryServer = repositoryServer;
	}
	/**
	 * @return the repositoryPort
	 */
	public String getRepositoryPort() {
		return repositoryPort;
	}
	/**
	 * @param repositoryPort the repositoryPort to set
	 */
	public void setRepositoryPort(String repositoryPort) {
		this.repositoryPort = repositoryPort;
	}
	/**
	 * @return the repositoryUsr
	 */
	public String getRepositoryUsr() {
		return repositoryUsr;
	}
	/**
	 * @param repositoryUsr the repositoryUsr to set
	 */
	public void setRepositoryUsr(String repositoryUsr) {
		this.repositoryUsr = repositoryUsr;
	}
	/**
	 * @return the reposit
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Svetoslav
 */
@Configuration
public class PieShareAppService {
	@Autowired
	protected PieUtilitiesConfiguration utilities;
	@Autowired
	protected PiePlateConfiguration plate;
	@Bean
	@Lazy
	@Scope(value = "prototype")
	public PieFile pieFile() {
		return new PieFile();
	}
	@Bean
	public PieShareService pieShareService() {
		PieShareService service = new PieShareService();
		service.setExecutorFactory(this.utilities.pieExecutorTaskFactory());
		service.setClusterManagementService(this.plate.clusterManagementService());
		service.setShutdownService(this.utilities.shutdownService());
		service.setDatabaseService(databaseService());
		service.setConfigurationFactory(this.configurationFactory());
		service.setBeanService(utilities.beanService());
		service.start();
		return service;
	}
	@Bea

	@Scope(value = "prototype")
	public DefaultFileMonitor defaultFileMonitor() {
		DefaultFileMonitor filelistener = new DefaultFileMonitor(fileListenerService());
		return filelistener;
	}
	@Bean
	@Lazy
	public NetworkService networkService() {
		return new NetworkService();
	}
	@Bean
	@Lazy
	public ApplicationConfigurationService applicationConfigurationService() {
		ApplicationConfigurationService service = new ApplicationConfigurationService();
		service.setPropertiesReader(utilities.configurationReader());
		service.setBeanService(utilities.beanService());
		service.init();
		return service;
	}
	@Bean
	@Lazy
	public MessageFactoryService messageFactoryService() {
		MessageFactoryService service = new MessageFactoryService();
		return service;
	}
	@Bean
	@Lazy
	public RequestService requestService() {
		RequestService service = new RequestService();
		service.setBeanService(this.utilities.beanService());
		service.setClusterManagementService(this.plate.clusterManagementService());
	

		return service;
	}
	@Bean
	@Lazy
	public FileEncryptionService fileEncryptionService() {
		FileEncryptionService service = new FileEncryptionService();
		service.setFileService(this.localFileService());
		service.setProviderService(this.utilities.providerService());
		service.setBeanService(this.utilities.beanService());
		return service;
	}
	@Bean
	@Lazy
	public ILocalFileCompareService fileCompareService() {
		FileCompareService service = new FileCompareService();
		service.setFileService(this.localFileService());
		service.setWrappedCompareService(this.historyCompareServicePrivate());
		return service;
	}
	@Bean
	@Lazy
	public ILocalFileCompareService historyCompareService() {
		return this.historyCompareServicePrivate();
	}
	@Bean
	@Lazy
	protected ALocalFileCompareService historyCompareServicePrivate() {
		FileHistoryCompareService historyService = new FileHistoryCompareService();
		historyService.setHistoryService(this.historyFileService());
		return historyService;
	}
	@Bean


	@Scope(value = "prototype")
	public ApacheDefaultFileListener fileListenerService() {
		ApacheDefaultFileListener listener = new ApacheDefaultFileListener();
		listener.setBeanService(this.utilities.beanService());
		listener.setExecutorService(this.utilities.pieExecutorService());
		return listener;
	}
	@Bean
	@Lazy
	public ApacheFileWatcherService apacheFileWatcherService() {
		ApacheFileWatcherService watcher = new ApacheFileWatcherService();
		watcher.setBeanService(this.utilities.beanService());
		watcher.setShutdownService(this.utilities.shutdownService());
		watcher.init();
		return watcher;
	}
	private void fileServiceBase(FileServiceBase base) {
		base.setBeanService(this.utilities.beanService());
		base.setFileWatcherService(this.apacheFileWatcherService());
		base.init();
	}
	@Bean
	@Lazy
	public LocalFileService localFileService() {
		LocalFileService service = new LocalFileService();
		this.fileServiceBase(service);
		service.setHashService(this.utilities.md5Service());


	}
	@Bean
	@Lazy
	public HistoryFileService historyFileService() {
		HistoryFileService service = new HistoryFileService();
		this.fileServiceBase(service);
		service.setDatabaseService(this.databaseService());
		return service;
	}
	@Bean
	@Lazy
	public HistoryService historyService() {
		HistoryService service = new HistoryService();
		service.setDatabaseService(this.databaseService());
		service.setFileService(this.localFileService());
		return service;
	}
	@Bean
	@Lazy
	public BitTorrentService bitTorrentService() {
		BitTorrentService service = new BitTorrentService();
		service.setBeanService(this.utilities.beanService());
		service.setNetworkService(this.networkService());
		service.setExecutorService(this.utilities.pieExecutorService());
		service.setBase64Service(this.utilities.base64Service());
		service.initTorrentService();
		return service;
	}
	@Bean
	@Lazy
	public ShareService shareService() {
		ShareService service = new ShareService();
		service.setFileEncryptionService

		service.setFileWatcherService(this.apacheFileWatcherService());
		service.setComparerService(this.fileCompareService());
		service.setFileService(this.localFileService());
		service.init();
		return service;
	}
	@Bean
	@Lazy
	public DatabaseService databaseService() {
		DatabaseService service = new DatabaseService();
		service.setBase64Service(utilities.base64Service());
		service.setBeanService(utilities.beanService());
		service.setPieDatabaseManagerFactory(pieDatabaseManagerFactory());
		service.setConfigurationFactory(configurationFactory());
		service.setModelEntityConverterService(modelEntityConverterService());
		return service;
	}
	public ModelEntityConverterService modelEntityConverterService() {
		ModelEntityConverterService service = new ModelEntityConverterService();
		service.setBeanService(utilities.beanService());
		return service;
	}
	@Bean
	@Lazy
	public PieDatabaseManagerFactory pieDatabaseManagerFactory() {
		PieDatabaseManagerFactory fac = new PieDatabaseManager
public class JPAProcessInstanceManager
    implements
    ProcessInstanceManager {
    private InternalKnowledgeRuntime kruntime;
    private transient Map<Long, ProcessInstance> processInstances;
    public void setKnowledgeRuntime(InternalKnowledgeRuntime kruntime) {
        this.kruntime = kruntime;
    }
    public void addProcessInstance(ProcessInstance processInstance) {
        ProcessInstanceInfo processInstanceInfo = new ProcessInstanceInfo( processInstance, this.kruntime.getEnvironment() );
        ProcessPersistenceContext context = ((ProcessPersistenceContextManager) this.kruntime.getEnvironment().get( EnvironmentName.PERSISTENCE_CONTEXT_MANAGER )).getProcessPersistenceContext();
        context.persist( processInstanceInfo );
        ((org.jbpm.process.instance.ProcessInstance) processInstance).setId( processInstanceInfo.getId() );
        processInstanceInfo.updateLastReadDate();
        internalAddProcessInstance(processInstance);
    }
    public void internalAddProcess

    	if (this.processInstances == null) {
        	this.processInstances = new HashMap<Long, ProcessInstance>();
        }
        processInstances.put(processInstance.getId(), processInstance);
    }
    public ProcessInstance getProcessInstance(long id) {
    	org.jbpm.process.instance.ProcessInstance processInstance = null;
    	if (this.processInstances != null) {
	    	processInstance = (org.jbpm.process.instance.ProcessInstance) this.processInstances.get(id);
	    	if (processInstance != null) {
	    		return processInstance;
	    	}
    	}
    	
        ProcessPersistenceContext context = ((ProcessPersistenceContextManager) this.kruntime.getEnvironment().get( EnvironmentName.PERSISTENCE_CONTEXT_MANAGER )).getProcessPersistenceContext();
        ProcessInstanceInfo processInstanceInfo = context.findProcessInstanceInfo( id );
        if ( processInstanceInfo == null ) {
            return null;
        }
        processInstanceInfo.updateLastReadDate();
        processInstance = 

        	processInstanceInfo.getProcessInstance(kruntime, this.kruntime.getEnvironment());
        Process process = kruntime.getKnowledgeBase().getProcess( processInstance.getProcessId() );
        if ( process == null ) {
            throw new IllegalArgumentException( "Could not find process " + processInstance.getProcessId() );
        }
        processInstance.setProcess( process );
        if ( processInstance.getKnowledgeRuntime() == null ) {
            processInstance.setKnowledgeRuntime( kruntime );
            ((ProcessInstanceImpl) processInstance).reconnect();
        }
        return processInstance;
    }
    public Collection<ProcessInstance> getProcessInstances() {
        return new ArrayList<ProcessInstance>();
    }
    public void removeProcessInstance(ProcessInstance processInstance) {
        ProcessPersistenceContext context = ((ProcessPersistenceContextManager) this.kruntime.getEnvironment().get( EnvironmentName.PERSISTENCE_CONTEXT_MANAGER )).getProcessPersist
public class FileStockRepositoryTest extends Test
    Stock hp = new Stock("HP", 11.4, 10);
    Stock yhoo = new Stock("YHOO", 57.2, 30);
    private File repositoryDir = new File("mydata");
    public void testStockId()
    {
        assertEquals(0, hp.getId());
        hp.setId(123);
        assertEquals(123, hp.getId());
    }
    public void testNextId() throws Exception
    {
        FileStockRepository repository = new FileStockRepository(repositoryDir);
        long id1 = repository.nextId();
        assertTrue( id1 != 0 );
        long id2 = repository.nextId();
        assertTrue( id2 != 0);
        assertTrue( id2 != id1 );
    }
    public void testCreateRepository() throws Exception
    {
        FileStockRepository repository;
        repository = new FileStockRepository(repositoryDir);
        assertTrue(repositoryDir.exists());
        assertTrue(repositoryDir.isDirectory());
    }
    public void testStockFileName() throws Exception
    {
        FileStockRepository rep

        assertEquals("stock123.txt", repository.stockFileName(123));
        hp.setId(456);
        assertEquals("stock456.txt", repository.stockFileName(hp));
    }
    public void testSaveStockWritesToFile() throws Exception
    {
        FileStockRepository repository = new FileStockRepository(repositoryDir);
        repository.saveStock(yhoo);
        assertFalse(yhoo.getId() == 0);
        File fileYhoo = new File(repositoryDir, repository.stockFileName(yhoo));
        assertTrue(fileYhoo.exists());
    }
    public void testSaveAndLoad() throws Exception
    {
        FileStockRepository repository = new FileStockRepository(repositoryDir);
        repository.saveStock(yhoo);
        long id = yhoo.getId();
        FileStockRepository differentRepository = new FileStockRepository(repositoryDir);
        Stock newYhoo = differentRepository.loadStock(id);
        assertEquals(yhoo, newYhoo);
    }
    public void testSaveAfterChange() throws Exception
    {
        FileStockReposit
/**
 * 
 */
/**
 * @author dooley
 *
 */
public class GMSClient {
	private FileServiceStub fileService;
	private JobServiceStub jobService;
	private NotificationServiceStub notificationService;
	private ProjectServiceStub projectService;
	private ResourceServiceStub resourceService;
	private SessionServiceStub sessionService;
	private SoftwareServiceStub softwareService;
	private UserServiceStub userService;
	public GMSClient(String serviceRoot) {
		this.serviceRoot = serviceRoot;
	}
	public FileServiceStub getFileService() throws AxisFault {
		if (fileService == null) {
			fileService = new FileServiceStub(serviceRoot + "/FileService.FileServiceHttpSoap12Endpoint/");
		}
		
		return fileService;
	}
	public JobServiceStub getJobService() throws AxisFault {
		if (jobService == null) {
			jobService = new JobServiceStub(serviceRoot + "/JobService.JobServiceHttpSoap12Endpoint/");
		}
		
		return jobService;
	}
	public NotificationServiceStub getNotificationService() throws AxisFault {
		i

			notificationService = new NotificationServiceStub(serviceRoot + "/JobService.JobServiceHttpSoap12Endpoint/");
		}
		
		return notificationService;
	}
	public ProjectServiceStub getProjectService() throws AxisFault {
		if (projectService == null) {
			projectService = new ProjectServiceStub(serviceRoot + "/ProjectService.ProjectServiceHttpSoap12Endpoint/");
		}
		
		return projectService;
	}
	public ResourceServiceStub getResourceService() throws AxisFault {
		if (resourceService == null) {
			resourceService = new ResourceServiceStub(serviceRoot + "/ResourceService.ResourceServiceHttpSoap12Endpoint/");
		}
		
		return resourceService;
	}
	public SessionServiceStub getSessionService() throws AxisFault {
		if (sessionService == null) {
			sessionService = new SessionServiceStub(serviceRoot + "/SessionService.SessionServiceHttpSoap12Endpoint/");
		}
		
		return sessionService;
	}
	public SoftwareServiceStub getSoftwareService() throws AxisFault {
		if (softwareService == null) {
			so
public class ServiceLocator implements Serializable {
	/**
	 * @author kaibin
	 */
	private static final long serialVersionUID = -6943835759992093655L;
	private static ServiceLocator instance = null;
	private UserService userService = null;
	private QuestionService questionService = null;
	private AnswerService answerService = null;
	private ItemService itemService = null;
	public ServiceLocator() {
		super();
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		userService = (UserService) ctx.getBean("userService");
		questionService = (QuestionService) ctx.getBean("questionService");
		itemService = (ItemService) ctx.getBean("itemService");
		answerService = (AnswerService)ctx.getBean("answerService");
	}
	public static synchronized ServiceLocator getServiceLocator(){
		if (instance == null) {
			instance = new ServiceLocator();
		}
		return instance;
		
	}
	public QuestionService getQuestionService() {
		return questionService;
	}
	public void s
public class CPU {
    private int index;
    private LinkedList<Process> processQueue;
    private Process processRunning;
    private int qtdeAllowedProcess = 3;
    private int queueSize;
    public CPU(int index, int queueSize) {
        this.index = index;
        this.queueSize = queueSize;
        processQueue = new LinkedList<Process>();
        processRunning = null;
    }
    public boolean isIdle(){
        return processRunning == null;
    }
    public void addProcess(Process process) {
        if(isIdle())
            processRunning = process;
        else
            processQueue.add(process);
    }
    public boolean update() {
        if(isIdle())
            return false;
        processRunning.consumeOneClock();
        if(processRunning.processFinished()){
            if(processQueue.isEmpty())
                processRunning = null;
            else
                processRunning = processQueue.remove();
            return true;
        }
        return false;
    }
/**
 * build new proccess factory.
 * @author Administrator
 *
 */
public class ProcessFactory {
private static Proc oneproc = null;
private volatile static int processNum = 0;
private synchronized static void refreshID(){
	processNum++;
	System.out.println("the process id is:"+processNum);
public static int buildNewProcessWithProcessid(String... command){
	if(command == null){
		return -1;
	}
	refreshID();
	System.out.println("process id is:"+processNum);
	oneproc = new Proc((String[]) ArrayUtils.add(command, command.length, ""+processNum));
	ProcessManager.add(processNum, oneproc);
	return processNum;
public static int buildNewProcess(String... command){
	if(command == null){
		return -1;
	}
	refreshID();
	System.out.println("process id is:"+processNum);
	oneproc = new Proc(command);
	ProcessManager.add(processNum, oneproc);
	return processNum;
public static void setStartID(int processStartId){
	processNum = processStartId;
/**
 * added
 */
public static int getProcessNum(){
	return 
public class Parll implements ParallelProcess {
	public Process getStartProcess() {
		return startProcess;
	}
	public void setStartProcess(Process startProcess) {
		this.startProcess = startProcess;
	}
	public String getStr1() {
		return str1;
	}
	public void setStr1(String str1) {
		this.str1 = str1;
	}
	public String getStr2() {
		return str2;
	}
	public void setStr2(String str2) {
		this.str2 = str2;
	}
	public String getStr3() {
		return str3;
	}
	public void setStr3(String str3) {
		this.str3 = str3;
	}
	public Process getEndProcess() {
		return endProcess;
	}
	public void setEndProcess(Process endProcess) {
		this.endProcess = endProcess;
	}
	private Process startProcess;
	private String str1;
	private String str2;
	private String str3;
	private Process endProcess;
	public Parll(Process startProcess, String str3, String str2, String str1, Process endProcess) {
		this.startProcess = startProcess;
		this.str1 = str1;
		this.str2 = str2;
		this.str3 = str3;
		this.endProcess = endPr
/**
 * 
 * @author WilliamRodrigues <br>
 *         {@link william.rodrigues@live.fae.edu}
 * 
 */
@Service("gradeService")
public class GradeServeiceImpl extends AbstractService<Grade, GradeDao> implements GradeService {
	/*
	 * *******************************************************************************************************************
	 * ***************************************************** Atributos****************************************************
	 * *******************************************************************************************************************
	 */
	@ManagedProperty("#{disciplinaService}")
	private DisciplinaService disciplinaService;
	@ManagedProperty("#{docenteService}")
	private DocenteService docenteService;
	/*
	 * *******************************************************************************************************************
	 * ***************************************************** GETS E SETS ************************************************
public class Repositories {
	protected List repositories = new ArrayList();
	public Repositories() {
		super();
	}
	public List getRepositories() {
		return this.repositories;
	}
	public void addRepository(Repository repository) {
		repositories.add(repository);
	}
	public Repository getDefaultRepository() {
		for (Iterator iterator = repositories.iterator(); iterator.hasNext();) {
			Repository repository = (Repository) iterator.next();
			if (repository.isDefault())
				return repository;
		}
		return null;
	}
	public Repository getRepositoryById(int id) {
		for (Iterator iterator = repositories.iterator(); iterator.hasNext();) {
			Repository repository = (Repository) iterator.next();
			if (StringUtils.equals(repository.getId(), "" + id))
				return repository;
		}
		return null;
	}
	public Repository getRepositoryByAlias(String alias) {
		for (Iterator iterator = repositories.iterator(); iterator.hasNext();) {
			Repository repository = (Repository) iterator.next();
			if (StringU
/**
 * 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Repository("roleManageDAO")
public class RoleManageDAO extends EgovComAbstractDAO {
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception {
		return (RoleManageVO) selectByPk("roleManageDAO.selectRole", roleManageVO);
	}
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception {
		return list("roleManageDAO.selectRoleList", roleManageVO);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 

	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void insertRole(RoleManage roleManage) throws Exception {
		insert("roleManageDAO.insertRole", roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void updateRole(RoleManage roleManage) throws Exception {
		update("roleManageDAO.updateRole", roleManage);
	}
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception {
		delete("roleManageDAO.deleteRole", roleManage);
	}
    /**
	 * 롤목록 총 갯수를 조회한다.
	 * @param roleManageVO RoleManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectRoleListTotCnt(RoleManageVO roleManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("roleManageDAO.selectAuthorListTotCnt", roleManageVO);
    }	
    
	/**
	 * 등록된 모든 롤 정보 목록 조회
	 * @param
/**
 * @Class Name : BkmkMenuManageDAO.java
 * @Description : 바로가기메뉴를 관리하는 서비스를 정의하기위한 데이터 접근 클래스
 * @Modification Information
 *
 *    수정일       수정자         수정내용
 *    -------        -------     -------------------
 *    2009. 9. 25.     윤성록
 *
 * @author 공통 컴포넌트 개발팀 윤성록
 * @since 2009. 9. 25.
 * @version
 * @see
 *
 */
@Repository("bkmkMenuManageDAO")
public class BkmkMenuManageDAO extends EgovComAbstractDAO{
    
    /**
     * 바로가기메뉴관리 정보를 삭제한다.
     * 
     * @param BkmkMenuManage
     * @return
     * @throws Exception
     */
    public void deleteBkmkMenuManage(BkmkMenuManage bkmkMenuManage) throws Exception {
        delete("BkmkMenuManageDAO.deleteBkmkMenuManage", bkmkMenuManage);
    }
    
    /**
     * 바로가기메뉴관리 정보를 등록한다.
     * 
     * @param BkmkMenuManage
     * @return
     * @throws Exception
     */
    public void insertBkmkMenuManage(BkmkMenuManage bkmkMenuManage) throws Exception {
        insert("BkmkMenuManageDAO.insertBkmkMenuManage", bkmkMenuManage);
    }
   

    /**
     * 바로가기메뉴관리 정보를 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public BkmkMenuManageVO selectBkmkMenuManageResult(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        BkmkMenuManageVO vo = new BkmkMenuManageVO();
        vo = (BkmkMenuManageVO)selectByPk("BkmkMenuManageDAO.selectBkmkMenuManage", bkmkMenuManageVO);
        return vo;
    }
    /**
     * 조건에 맞는 바로가기메뉴관리 정보 목록을 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public List<BkmkMenuManageVO> selectBkmkMenuManageList(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        return list("BkmkMenuManageDAO.selectBkmkMenuManageList", bkmkMenuManageVO);
    }    
    
    /**
     * 조건에 맞는 바로가기메뉴관리 정보 목록의 건수를 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public int selectBkmkMenuManageListCnt(BkmkMenuManageVO bkmkMenuManageVO) throws

        return (Integer)getSqlMapClientTemplate().queryForObject("BkmkMenuManageDAO.selectBkmkMenuManageListCnt", bkmkMenuManageVO);
    }
    
    /**
     * 등록할  메뉴정보 목록을 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public List<BkmkMenuManageVO> selectBkmkMenuList(BkmkMenuManageVO bkmkMenuManageVO)
            throws Exception {
        return list("BkmkMenuManageDAO.selectBkmkMenuList", bkmkMenuManageVO);
    }    
    /**
     * 등록할  메뉴정보 목록의 건수를 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public int selectBkmkMenuListCnt(BkmkMenuManageVO bkmkMenuManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("BkmkMenuManageDAO.selectBkmkMenuListCnt", bkmkMenuManageVO);
    }
    
    /**
     * 미리보기를 할 바로가기메뉴관리의 목록을 조회한다.
     * 
     * @param BkmkMenuManageVO
     * @return
     * @throws Exception
     */
    public List<MenuManageVO> selectBkmk
/**
 * This interface shows the necessary methods that ProcessViewImpl will implement, and ProcessPresenter will call.  
 * modified by Mauricio Pilleux
 *
 */
public interface ProcessView extends ControllableView {
	String VIEW_ID = "process";
	/**
	 * Sets the list of process definitions.
	 * This list of processes will be shown by the view.
	 * The ProcessPresented is in charge of stting this list.
	 * @param definitions = List of process definitions to be set in the view.
	 */
	void setProcessDefinitions( List<ProcessDefinition> definitions );
	/**
	 * Sets the list of suspended process definitions.
	 * This list will be set in one of the tabs in the view.
	 * The ProcessPresented is in charge of stting this list.
	 * @param definitions
	 */
	void setSuspendedProcessDefinitions( List<ProcessDefinition> definitions );
	/**
	 * Display a message to indicate process was started successfully. 
	 * @param process = process that started successfully.
	 */
	void showProcessStartSuccess( P

	/**
	 * Display a message to indicate process encountered an error when trying to deploy. 
	 * @param process = process that started unsuccessfully.
	 */
	void showProcessStartFailure( ProcessDefinition process );
	/**
	 * Display a message to indicate that the suspension of a process was successful.
	 * @param process = suspended process.
	 */
	public void showProcessSuspendSuccess( ProcessDefinition process );
	/**
	 * Display a message to indicate that the suspension of a process was unsuccessful.
	 * @param process = non suspended process.
	 */
	public void showProcessSuspendFailure( ProcessDefinition process );
	/**
	 * Display a message to indicate that the activation of a process was successful.
	 * @param process = activated process.
	 */
	public void showProcessActivatedSuccess( ProcessDefinition process );
	/**
	 * Display a message to indicate that the activation of a process was unsuccessful.
	 * @param process = non activated process.
	 */
	public void showProcessActivat
/**
 * 
 */
/**
 * @author Alessandro Danesi
 * 
 *         12/set/201422:59:09
 */
public class BusinessLookUp 
	@Autowired
	private BusinessService careerService;
	@Autowired
	private BusinessService continentService;
	@Autowired
	private BusinessService divisionService;
	@Autowired
	private BusinessService nationService;
	@Autowired
	private BusinessService playerService;
	@Autowired
	private BusinessService staffService;	
	@Autowired
	private BusinessService positionService;
	@Autowired
	private BusinessService seasonService;
	@Autowired
	private BusinessService teamService;
	@Autowired
	private BusinessService userService;
	public BusinessService getBusinessService(String serviceType) 
	{
		if (serviceType.equalsIgnoreCase("CAREER")) 
		{
			return careerService;
		} 
		else if (serviceType.equalsIgnoreCase("CONTINENT")) 
		{
			return continentService;
		} 
		else if (serviceType.equalsIgnoreCase("DIVISION")) 
		{
			return divisionService;
		} 
		else if (serviceType.equalsIgnor

		{
			return nationService;
		} 
		else if (serviceType.equalsIgnoreCase("PLAYER")) 
		{
			return playerService;
		} 
		else if (serviceType.equalsIgnoreCase("STAFF")) 
		{
			return staffService;
		} 		
		else if (serviceType.equalsIgnoreCase("POSITION")) 
		{
			return positionService;
		} 		
		else if (serviceType.equalsIgnoreCase("SEASON")) 
		{
			return seasonService;
		} 
		else if (serviceType.equalsIgnoreCase("TEAM")) 
		{
			return teamService;
		} 
		else if (serviceType.equalsIgnoreCase("USER")) 
		{
			return userService;
		} 	
		else 
		{
			throw new RuntimeException("Servizio non trovato");
		}
	}
	/******************************************************************************************************************************
	 * 
	 * 											S   E   T   T   E   R   S
	 * 
	 ******************************************************************************************************************************/
	public void setCareerService(BusinessService careerService) {
		t
/**
 * ServiceHandle specialised for ModelScope
 */
public final class ModelService<T> {
	@Deprecated
	public static final ModelService<MathModel> LegacyMathModelService = createNewService(MathModel.class, "A legacy service representing a math. model");
	@Deprecated
	public static final ModelService<VisualModel> LegacyVisualModelService = createNewService(VisualModel.class, "A legacy service representing a visual model");
	final ServiceHandle<ModelScope, T> handle;
	public ModelService(ServiceHandle<ModelScope, T> handle) {
		this.handle = handle;
	}
	public static <T> ModelService<T> createNewService(Class<T> type, String serviceName) {
		ServiceHandle<ModelScope, T> newService = ServiceHandle.createNewService(type, serviceName);
		return new ModelService<T>(newService);
	}
	public static <T> ModelService<T> createServiceUnchecked(String serviceName) {
		ServiceHandle<ModelScope, T> newService = ServiceHandle.createServiceUnchecked(serviceName);
		return new ModelService<T>(newService
/**
 * 광고 관리 Service 인터페이스.
 *
 * @author jaeger
 */
@Service
public class AdManageServiceImpl implements AdManageService {
    @Autowired
    private AdManageDao adManageDao;
    @Override
    public AdManage selectAdManage(AdManage adManage) {
        return adManageDao.selectOne(adManage);
    }
    @Override
    public List<AdManage> selectAdManageList(AdManage adManage) {
        return adManageDao.selectAdManageList(adManage.getUserId(), adManage.getAdType());
    }
    @Override
    public boolean insertAdManage(AdManage adManage) {
        int insertCount = adManageDao.insertAdManage(adManage);
        return (insertCount == 0) ? false : true;
    }
    @Override
    public boolean updateAdManage(AdManage adManage) {
        int updateCount = adManageDao.updateAdManage(adManage);
        return (updateCount == 0) ? false : true;
    }
    @Override
    public boolean deleteAdManage(AdManage adManage) {
        int deleteCount = adManageDao.deleteAdManage(adManage.getAdId());
  
/**
 * 설문관리를 처리하는 Dao Class 구현
 * @author 공통서비스 장동한
 * @since 2009.03.20
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  장동한          최초 생성
 *
 * </pre>
 */ 
@Repository("qustnrManageDao")
public class QustnrManageDao extends EgovAbstractDAO {
    /**
	 * 설문템플릿 목록을 조회한다. 
	 * @param qustnrManageVO - 설문관리 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public List selectQustnrTmplatManageList(QustnrManageVO qustnrManageVO) throws Exception{
		return (List)list("QustnrManage.selectQustnrTmplatManage", qustnrManageVO);
	}
    /**
	 * 설문관리 목록을 조회한다. 
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public List selectQustnrManageList(ComDefaultVO searchVO) throws Exception{
		return (List)list("QustnrManage.selectQustnrManage", searchVO);
	}
    /**
	 * 

	 * @param qustnrManageVO - 설문관리 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
    public QustnrManageVO selectQustnrManageDetailModel(QustnrManageVO qustnrManageVO) throws Exception {    	
        return (QustnrManageVO) selectByPk("QustnrManage.selectQustnrManageDetailModel", qustnrManageVO);
    }
    
    /**
	 * 설문관리를(을) 상세조회 한다.
	 * @param qustnrManageVO - 설문관리 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public List selectQustnrManageDetail(QustnrManageVO qustnrManageVO) throws Exception{
		return (List)list("QustnrManage.selectQustnrManageDetail", qustnrManageVO);
	}
    /**
	 * 설문관리를(을) 목록 전체 건수를(을) 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return int
	 * @throws Exception
	 */
	public int selectQustnrManageListCnt(ComDefaultVO searchVO) throws Exception{
		return (Integer)getSqlMapClientTemplate().queryForObject("QustnrManage.selectQustnrManageCnt", searchVO);
	}
    /**
	 * 설문관리를(을) 등록한다.
	 * @param qqustnrManageVO - 설문관리
public class RepositoryFactory {
    protected ConnectionSource connectionSource;
    protected AssetRepository assetRepository;
    protected NodeRepository nodeRepository;
    protected StateRepository stateRepository;
    protected ProfileRepository profileRepository;
    protected TestRepository testRepository;
    protected ResultRepository resultRepository;
    protected IgnoredAreaRepository ignoredAreaRepository;
    public RepositoryFactory(ConnectionSource connectionSource) {
        this.connectionSource = connectionSource;
    }
    public AssetRepository getAssetRepository() throws SQLException {
        if (assetRepository == null) {
            assetRepository = new AssetRepository(connectionSource);
        }
        return assetRepository;
    }
    public NodeRepository getNodeRepository() throws SQLException {
        if (nodeRepository == null) {
            nodeRepository = new NodeRepository(connectionSource);
        }
        return nodeRepository;
    }
    pub

        if (profileRepository == null) {
            profileRepository = new ProfileRepository(connectionSource);
        }
        return profileRepository;
    }
    public StateRepository getStateRepository() throws SQLException {
        if (stateRepository == null) {
            stateRepository = new StateRepository(connectionSource);
        }
        return stateRepository;
    }
    public TestRepository getTestRepository() throws SQLException {
        if (testRepository == null) {
            testRepository = new TestRepository(connectionSource);
        }
        return testRepository;
    }
    public ResultRepository getResultRepository() throws SQLException {
        if (resultRepository == null) {
            resultRepository = new ResultRepository(connectionSource);
        }
        return resultRepository;
    }
    public IgnoredAreaRepository getIgnoredAreaRepository() throws SQLException {
        if (ignoredAreaRepository == null) {
            ignoredAreaReposit
/**
 * The Class ProcessResponse.
 * 
 * @author QAT Brazil.
 */
public class ProcessResponse extends Response
	/** The processes. */
	@XmlElement(nillable = true)
	private List<DMProcess> processes;
	/** The fileName. */
	private String fileName;
	/** The link status. */
	private Boolean linkStatus;
	/** The count monitored process. */
	private HashMap<String, Integer> countMonitoredProcess;
	/** The action type enum. */
	private List<ProcessType> processTypes;
	/** The process categories. */
	private List<ProcessCategory> processCategories;
	/** The process response time. */
	private Date processResponseTime;
	/** The process items. */
	private List<ProcessItem> processItems;
	/**
	 * Sets the processes.
	 * 
	 * @param processesParam the new processes
	 */
	public void setProcesses(List<DMProcess> processesParam)
	{
		processes = processesParam;
	}
	/**
	 * Gets the file name.
	 * 
	 * @return the file name
	 */
	public String getFileName()
	{
		return fileName;
	}
	/**
	 * Sets the

	 * 
	 * @param fileName the new file name
	 */
	public void setFileName(String fileName)
	{
		this.fileName = fileName;
	}
	/**
	 * Gets the processes.
	 * 
	 * @return the processes
	 */
	public List<DMProcess> getProcesses()
	{
		return processes;
	}
	/**
	 * Gets the link status.
	 * 
	 * @return the linkStatus
	 */
	public Boolean getLinkStatus()
	{
		return linkStatus;
	}
	/**
	 * Sets the link status.
	 * 
	 * @param linkStatus the linkStatus to set
	 */
	public void setLinkStatus(Boolean linkStatus)
	{
		this.linkStatus = linkStatus;
	}
	/**
	 * Gets the count monitored process.
	 * 
	 * @return the count monitored process
	 */
	public HashMap<String, Integer> getCountMonitoredProcess()
	{
		return countMonitoredProcess;
	}
	/**
	 * Sets the count monitored process.
	 * 
	 * @param countMonitoredProcess the count monitored process
	 */
	public void setCountMonitoredProcess(HashMap<String, Integer> countMonitoredProcess)
	{
		this.countMonitoredProcess = countMonitoredProcess;


	/**
	 * Gets the action types.
	 * 
	 * @return the actionTypes
	 */
	public List<ProcessType> getProcessTypes()
	{
		return processTypes;
	}
	/**
	 * Sets the action types.
	 * 
	 * @param processTypes the new process types
	 */
	public void setProcessTypes(List<ProcessType> processTypes)
	{
		this.processTypes = processTypes;
	}
	/**
	 * Gets the process categories.
	 * 
	 * @return the process categories
	 */
	public List<ProcessCategory> getProcessCategories()
	{
		return processCategories;
	}
	/**
	 * Sets the process categories.
	 * 
	 * @param processCategoriesParam the new process categories
	 */
	public void setProcessCategories(List<ProcessCategory> processCategoriesParam)
	{
		processCategories = processCategoriesParam;
	}
	/**
	 * Gets the process response time.
	 * 
	 * @return the processResponseTime
	 */
	public Date getProcessResponseTime()
	{
		return processResponseTime;
	}
	/**
	 * Sets the process response time.
	 * 
	 * @param processResponseTime the processRespo

	 */
	public void setProcessResponseTime(Date processResponseTime)
	{
		this.processResponseTime = processResponseTime;
	}
	/**
	 * Gets the process items.
	 * 
	 * @return the process items
	 */
	public List<ProcessItem> getProcessItems()
	{
		return processItems;
	}
	/**
	 * Sets the process items.
	 * 
	 * @param processItemsParam the new process items
	 */
	public void setProcessItems(List<ProcessItem> processItemsParam)
	{
		processItems = processItemsParam;
	}
	/*
	 * (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString()
	{
		return "ProcessResponse [getFileName()=" + getFileName() + ", getProcesses()=" + getProcesses()
				+ ", getLinkStatus()=" + getLinkStatus() + ", getCountMonitoredProcess()=" + getCountMonitoredProcess()
				+ ", getProcessTypes()=" + getProcessTypes() + ", getProcessCategories()=" + getProcessCategories()
				+ ", getProcessResponseTime()=" + getProcessResponseTime() + ", getProcessItems()=" + getProcessItems()
				+ 
/**
 * Created by Artsiom Badun.
 */
@Service
@NoRepositoryBean
public class RepositoryLocator {
    @Autowired
    private HostelManagerRepository hostelManagerRepository;
    @Autowired
    private HostelRepository hostelRepository;
    @Autowired
    private RoleRepository roleRepository;
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private VisitorRepository visitorRepository;
    @Autowired
    private VisitRepository visitRepository;
    public HostelManagerRepository getHostelManagerRepository() {
        return hostelManagerRepository;
    }
    public HostelRepository getHostelRepository() {
        return hostelRepository;
    }
    public RoleRepository getRoleRepository() {
        return roleRepository;
    }
    public UserRepository getUserRepository() {
        return userRepository;
    }
    public VisitorRepository getVisitorRepository() {
        return visitorRepository;
    }
    public VisitRepository getVisitRepository() {
        
/*
 */
/**
 * Provides access to all available RETS handlers
 */
public class RetsHandlers
    public RetsHandlers()
    {
        mHandlersByName = new HashMap();
        mHandlerList = new ArrayList();
        add(new ActionHandler());
        add(new LoginHandler());
        add(new LogoutHandler());
        add(new GetMetadataHandler());
        add(new SearchHandler());
        add(new AlternateActionHandler());
        add(new AlternateLoginHandler());
    }
    private void add(ServletHandler handler)
    {
        mHandlersByName.put(handler.getName(), handler);
        mHandlerList.add(handler);
    }
    /**
     * Resets all handlers
     */
    public void resetAll()
    {
        for (int i = 0; i < mHandlerList.size(); i++)
        {
            ServletHandler handler = (ServletHandler) mHandlerList.get(i);
            handler.reset();
        }
    }
    public void validateAll(ValidationResult result)
    {
        for (int i = 0; i < mHandlerList.size(); i++)
        {

            ServletHandler handler = (ServletHandler) mHandlerList.get(i);
            handler.validate(result);
        }
    }
    public ServletHandler getByName(String name)
    {
        return (ServletHandler) mHandlersByName.get(name);
    }
    public ActionHandler getActionHandler()
    {
        return (ActionHandler) mHandlersByName.get(ActionHandler.NAME);
    }
    public AlternateActionHandler getAlternateActionHandler()
    {
        return (AlternateActionHandler)
            mHandlersByName.get(AlternateActionHandler.NAME);
    }
    public GetMetadataHandler getGetMetadataHandler()
    {
        return (GetMetadataHandler)
            mHandlersByName.get(GetMetadataHandler.NAME);
    }
    public SearchHandler getSearchHandler()
    {
        return (SearchHandler) mHandlersByName.get(SearchHandler.NAME);
    }
    public LoginHandler getLoginHandler()
    {
        return (LoginHandler) mHandlersByName.get(LoginHandler.NAME);
    }
    public AlternateLoginHandler g
/**
 *
 * @author Ashok Hariharan
 */
public class ProcessProcess {
    private String processId ;
    private String billId;
    private Date processDate;
    private ProcessStatus processStatus;
    public static enum ProcessStatus {
        Start ("Start"),
        End ("End"),
        Discard ("Discarded");
        String procStatus;
        ProcessStatus (String pstatus) {
            this.procStatus = pstatus;
        }
        @Override
        public String toString(){
            return procStatus;
        }
    }
    public ProcessProcess (String pId, String bId, Date pDate, ProcessStatus pStatus) {
        this.processId = pId;
        this.billId = bId;
        this.processDate = pDate;
        this.processStatus = pStatus;
    }
    /**
     * @return the processId
     */
    public String getProcessId() {
        return processId;
    }
    /**
     * @param processId the processId to set
     */
    public void setProcessId(String processId) {
        this.processId = p
/**
 * 处理器链
 * Created by dongqingswt on 14-11-8.
 */
public class HandlerChain {
	private Handler headHandler ;
	private Handler tailHandler;
	class HeadHandler extends BaseHandler{
		public HeadHandler(Handler nextHandler) {
			super(nextHandler);
		}
	}
	class TailHandler extends BaseHandler{
		public TailHandler(Handler nextHandler) {
			super(nextHandler);
		}
	}
	public HandlerChain(){
		this.tailHandler = new TailHandler(null);
		this.headHandler = new HeadHandler(this.tailHandler);
	}
	public HandlerChain(List<Handler> handlerList){
		this.tailHandler = new TailHandler(null);
		this.headHandler = new HeadHandler(this.tailHandler);
		for(Handler handler: handlerList){
			this.addHandler(handler);
		}
	}
	public void addHandler(Handler handler){
		assert(handler != null) ;
		Handler prevHandler = this.headHandler ,currentHandler =  this.headHandler;
		while(currentHandler != this.tailHandler){
			prevHandler = currentHandler;
			currentHandler = currentHandler.next();
		}
		prevH
/**
 * 롤관리에 관한 서비스 인터페이스 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  이문준          최초 생성
 *
 * </pre>
 */
public interface EgovRoleManageService {
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception;
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception;
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception;
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 *
/**********************************************************************************
 * $Id: RepositoryManager.java 59673 2009-04-03 23:02:03Z arwhyte@umich.edu $
 **********************************************************************************
 *
 * Copyright (c) 2003, 2004, 2005, 2007, 2008 The Sakai Foundation
 *
 * Licensed under the Educational Community License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 **********************************************************************************/
public abstract class RepositoryManager
implements org.osid.repository.Re

    public org.osid.OsidContext getOsidContext()
    throws org.osid.repository.RepositoryException
    {
	 		throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
   }
    public void assignOsidContext(org.osid.OsidContext context)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void assignConfiguration(java.util.Properties configuration)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Repository createRepository(String displayName
                                                         , String description
                                                         , org.osid.shared.Type repositoryType)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.Reposit

    }
    public void deleteRepository(org.osid.shared.Id repositoryId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RepositoryIterator getRepositories()
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RepositoryIterator getRepositoriesByType(org.osid.shared.Type repositoryType)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Repository getRepository(org.osid.shared.Id repositoryId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset getA

    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset getAssetByDate(org.osid.shared.Id assetId
                                                  , long date)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.LongValueIterator getAssetDates(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.AssetIterator getAssetsBySearch(org.osid.repository.Repository[] repositories
                                                             , java.io.Serializable searchCriteria
                                                             , org.osid.shared.Type searchType
  
/**
 * @author Rodrigo Itursarry (itursarry@gmail.com)
 */
public class AbstractServiceImpl {
	private AbstractRepositoryFinder repositoryFinder;
	public AbstractRepositoryFinder getRepositoryFinder() {
		return repositoryFinder;
	}
	public void setRepositoryFinder(AbstractRepositoryFinder repositoryFinder) {
		this.repositoryFinder = repositoryFinder;
	}
	public ItemTrackerRepositoryBI getItemTrackerRepository() {
		return this.getRepositoryFinder().getItemTrackerRepository();
	}
	public UserRepositoryBI getUserRepository() {
		return this.getRepositoryFinder().getUserRepository();
	}
	public ProjectRepositoryBI getProjectRepository() {
		return this.getRepositoryFinder().getProjectRepository();
	}
	public TeamRepositoryBI getTeamRepository() {
		return this.getRepositoryFinder().getTeamRepository();
	}
	public ItemRepositoryBI getItemRepository() {
		return this.getRepositoryFinder().getItemRepository();
	}
	public ItemTypeRepositoryBI getItemTypeRepository() {
		return this.getRepos
public class ActionAwareRepositoryManager implements RepositoryFactory
    
    private static final Logger logger = LoggerFactory.getLogger( ActionAwareRepositoryManager.class );
    private Map<String, RepositoryAction> repositoryActions;
    private String defaultAction="repositoryLoad";
    
    @SuppressWarnings("unchecked")
    public Repository getRepository( Map parameters ) throws RepositoryException
    {
        Repository repository=null; 
        try
        {
            String actionName=(String)parameters.get( "action" );
            if(actionName==null){
                actionName=defaultAction;
            }
            
            repository = performAction( parameters, actionName );
        }
        catch ( RepositoryException ex )
        {
            throw ex;
        }
        catch ( RuntimeException ex )
        {
            throw ex;
        }
        catch ( Exception ex )
        {
            throw new RepositoryException("failed to get repository",ex);
/**
 * @author Endi Sukma Dewata
 */
public class ServiceManagerService extends BaseService implements ServiceManagerServiceMBean {
    ServiceManager serviceManager;
    public ServiceManagerService(PenroseJMXService jmxService, ServiceManager serviceManager) {
        this.jmxService = jmxService;
        this.serviceManager = serviceManager;
    }
    public Object getObject() {
        return serviceManager;
    }
    public String getObjectName() {
        return ServiceManagerClient.getStringObjectName();
    }
    public Collection<String> getServiceNames() throws Exception {
        Collection<String> list = new ArrayList<String>();
        ServiceConfigManager serviceConfigManager = serviceManager.getServiceConfigManager();
        list.addAll(serviceConfigManager.getAvailableServiceNames());
        return list;
    }
    public ServiceConfig getServiceConfig(String serviceName) throws Exception {
        return serviceManager.getServiceConfig(serviceName);
    }
    public S

        return new ServiceService(jmxService, serviceManager, name);
    }
    public void startService(String name) throws Exception {
        serviceManager.startService(name);
        ServiceService service = getServiceService(name);
        service.init();
    }
    public void stopService(String name) throws Exception {
        ServiceService service = getServiceService(name);
        service.destroy();
        serviceManager.stopService(name);
    }
    public void createService(ServiceConfig serviceConfig) throws Exception {
        String serviceName = serviceConfig.getName();
        serviceManager.addServiceConfig(serviceConfig);
        File servicesDir = serviceManager.getServicesDir();
        File path = new File(servicesDir, serviceName);
        ServiceWriter serviceWriter = new ServiceWriter();
        serviceWriter.write(path, serviceConfig);
    }
    public void updateService(String serviceName, ServiceConfig serviceConfig) throws Exception {
        serviceManager

        serviceManager.addServiceConfig(serviceConfig);
        File servicesDir = serviceManager.getServicesDir();
        File oldDir = new File(servicesDir, serviceName);
        File newDir = new File(servicesDir, serviceConfig.getName());
        oldDir.renameTo(newDir);
        ServiceWriter serviceWriter = new ServiceWriter();
        serviceWriter.write(newDir, serviceConfig);
    }
    public void removeService(String name) throws Exception {
        File servicesDir = serviceManager.getServicesDir();
        File serviceDir = new File(servicesDir, name);
        serviceManager.unloadService(name);
        FileUtil.delete(serviceDir);
    }
    public void init() throws Exception {
        super.init();
        for (String serviceName : getServiceNames()) {
            ServiceService serviceService = getServiceService(serviceName);
            serviceService.init();
        }
    }
    public void destroy() throws Exception {
        for (String serviceName : getServiceNames(
/**
 * Abstraction for the service providers.
 *
 */
public interface ServiceProvider {
	public AccessApprovalService getAccessApprovalService();
	public AccessRequirementService getAccessRequirementService();
	public AdministrationService getAdministrationService();
	public EntityService getEntityService();
	public EntityBundleService getEntityBundleService();
	public NodeQueryService getNodeQueryService();
	public UserGroupService getUserGroupService();
	public UserProfileService getUserProfileService();
	public SearchService getSearchService();
	public ActivityService getActivityService();
	public MessageService getMessageService();
	public EvaluationService getEvaluationService();
	public WikiService getWikiService();
	public V2WikiService getV2WikiService();
	public TrashService getTrashService();
	public DoiService getDoiService();
	public MigrationService getMigrationService();
	public TableServices getTableServices();
	public TeamService getTeamService();
	public MembershipInvi
/**
 * 개요
 * - 포상관리에 대한 ServiceImpl 클래스를 정의한다.
 * 
 * 상세내용
 * - 포상관리에 대한 등록, 수정, 삭제, 조회, 승인처리 기능을 제공한다.
 * - 포상관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Service("egovRwardManageService")
public class EgovRwardManageServiceImpl extends EgovAbstractServiceImpl implements EgovRwardManageService {
	@Resource(name="rwardManageDAO")
    private RwardManageDAO rwardManageDAO;
    /** ID Generation */  
	@Resource(name="egovRwardManageIdGnrService")
	private EgovIdGnrService idgenRwardManageService;
	@Resource(name="EgovInfrmlSanctnService")
    protected EgovInfrmlSanctnService infrmlSanctnService;
	/**
	 * 포상관리정보를 관리하기 위해 등록된 포상관리 목록을 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return List - 포상관리 목록
	 */
	public List<RwardManageVO> selectRwardManageList(RwardManageVO rwardManageVO) throws Exception{
		rwardManageVO.setSearchFromDate(EgovStringUtil.removeMinusChar(rwardManageVO.getSearchFromDate()));
		rwardManageVO.setSearchToDate(Egov

		List<RwardManageVO> result = rwardManageDAO.selectRwardManageList(rwardManageVO);
		
		int num = result.size();
	    for (int i = 0 ; i < num ; i ++ ){
	    	RwardManageVO rwardManageVO1 = result.get(i);
	    	rwardManageVO1.setRwardDe(EgovDateUtil.formatDate(rwardManageVO1.getRwardDe(), "-"));
	    	result.set(i, rwardManageVO1);
	    }	
		return result;
	}
	/**
	 * 포상관리목록 총 갯수를 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return int - 포상관리 카운트 수
	 */
	public int selectRwardManageListTotCnt(RwardManageVO rwardManageVO) throws Exception {
		return rwardManageDAO.selectRwardManageListTotCnt(rwardManageVO);
	}
	/**
	 * 등록된 포상관리의 상세정보를 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return RwardManageVO - 포상관리 VO
	 */
	public RwardManageVO selectRwardManage(RwardManageVO rwardManageVO) throws Exception {
		RwardManageVO rwardManageVOTemp = rwardManageDAO.selectRwardManage(rwardManageVO);
		rwardManageVOTemp.setRwardDe(EgovDateUtil.formatDate(rwardManageVOTemp.getRwardDe(), "-"));		
		
	

	}
	/**
	 * 포상관리정보를 신규로 등록한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void insertRwardManage(RwardManage rwardManage) throws Exception {
		/*
		 * 포상 승인처리  신청 infrmlSanctnService.insertInfrmlSanctn("000", vcatnManage);
		 */
		rwardManage.setRwardDe(EgovStringUtil.removeMinusChar(rwardManage.getRwardDe()));
		rwardManage.setInfrmlSanctnId(infrmlSanctn.getInfrmlSanctnId());
		rwardManage.setConfmAt(infrmlSanctn.getConfmAt());
		String	sRwardId = idgenRwardManageService.getNextStringId();
		rwardManage.setRwardId(sRwardId);
		
		rwardManageDAO.insertRwardManage(rwardManage);
	}
	/**
	 * 기 등록된 포상관리정보를 수정한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void updtRwardManage(RwardManage rwardManage) throws Exception {
		rwardManage.setRwardDe(EgovStringUtil.removeMinusChar(rwardManage.getRwardDe()));
		rwardManageDAO.updtRwardManage(rwardManage);
	}
	/**
	 * 기 등록된 포상관리정보를 삭제한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void deleteRwardManage(RwardManage rwardManage) thro

		/*
		 * 포상 승인처리  삭제 infrmlSanctnService.deleteInfrmlSanctn("000", vcatnManage);
		 */
		rwardManage.setRwardDe(EgovStringUtil.removeMinusChar(rwardManage.getRwardDe()));
		rwardManageDAO.deleteRwardManage(rwardManage);
	}
	/**
	 * 포상관리정보 승인 처리를 위해 신청된 포상관리 목록을 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return List - 포상관리 목록
	 */
	public List<RwardManageVO> selectRwardManageConfmList(RwardManageVO rwardManageVO) throws Exception{
		rwardManageVO.setSearchFromDate(EgovStringUtil.removeMinusChar(rwardManageVO.getSearchFromDate()));
		rwardManageVO.setSearchToDate(EgovStringUtil.removeMinusChar(rwardManageVO.getSearchToDate()));
		List<RwardManageVO> result = rwardManageDAO.selectRwardManageConfmList(rwardManageVO);
		int num = result.size();
	    for (int i = 0 ; i < num ; i ++ ){
	    	RwardManageVO rwardManageVO1 = result.get(i);
	    	rwardManageVO1.setRwardDe(EgovDateUtil.formatDate(rwardManageVO1.getRwardDe(), "-"));
	    	result.set(i, rwardManageVO1);
	    }	
		return result;

	}
	/**
	 * 포상승인목록 총 갯수를 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return int - 포상관리 카운트 수
	 */
	public int selectRwardManageConfmListTotCnt(RwardManageVO rwardManageVO) throws Exception {
		return rwardManageDAO.selectRwardManageConfmListTotCnt(rwardManageVO);
	}
	/**
	 * 포상정보를 승인/반려처리 한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void updtRwardManageConfm(RwardManage rwardManage) throws Exception {
		 InfrmlSanctn infrmlSanctn = new InfrmlSanctn();
		 rwardManage.setRwardDe(EgovStringUtil.removeMinusChar(rwardManage.getRwardDe()));
		 if(rwardManage.getConfmAt().equals("C")){
			/*
			 * 승인처리
			 */
		 }else if(rwardManage.getConfmAt().equals("R")){
			/*
			 * 반려처리
			 */
		 }
		 rwardManage.setSanctnDt(infrmlSanctn.getSanctnDt());
		 rwardManage.setConfmAt(infrmlSanctn.getConfmAt());
		 rwardManageDAO.updtRwardManageConfm(rwardManage);
	}
	/**
	 * RwardManage model을 InfrmlSanctn model로 변환한다.
	 * @param RwardManage
	 * @return InfrmlSanctn
	 * @param rwardManage
	 */
	pr
public class ProcessRepository {
	private static Map<String, AbstractProcess> processes;
	private static ProcessRepository instance;
	private static final Logger logger = Logger.getLogger(ProcessRepository.class);
	private ProcessRepository() {
		processes = new LinkedHashMap<String, AbstractProcess>();
		List<String> processClasses = Config.getInstance().getProcessClasses();
		for (String c : processClasses) {
			try {
				addProcess((AbstractProcess) Class.forName(c).newInstance());
				logger.info("Loaded process class " + c + ".");
			}
			catch (ClassNotFoundException e) {
				logger.error("Couldn't find process class " + c + ", skipping.");
			}
			catch (InstantiationException e) {
				logger.error("Couldn't instantiate process class " + c + ", skipping.");
			}
			catch (IllegalAccessException e) {
				logger.error("Couldn't access process class " + c + ", skipping.");
			}
			catch (ClassCastException e) {
				logger.error("Process class " + c + " does not extend org.uncertweb
/**
 * JobIssue관리에 대한 DAO 클래스
 * @jobIssue 배치운영환경 김지완
 * @since 2012.07.16
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2012.07.16  김지완          최초 생성
 *
 * </pre>
 */
@Repository("jobIssueManageDAO")
public class JobIssueManageDAO extends EgovAbstractDAO {
	 /**
	 * 모든 JobIssue 조회
	 * @param jobIssueManageVO JobIssueManageVO
	 * @return List<JobIssueManageVO>
	 * @exception Exception
	 */
    @SuppressWarnings("unchecked")
	public List<JobIssueManageVO> selectJobIssueList(JobIssueManageVO jobIssueManageVO) throws Exception {
        return (List<JobIssueManageVO>) list("jobIssueManageDAO.selectJobIssueList", jobIssueManageVO);
    }
	/**
	 * JobIssue 등록
	 * @param jobIssueManage JobIssueManage
	 * @exception Exception
	 */
    public void insertJobIssue(JobIssueManage jobIssueManage) throws Exception {
        insert("jobIssueManageDAO.insertJobIssue", jobIssu

    }
    /**
	 * JobIssue 수정
	 * @param jobIssueManage JobIssueManage
	 * @exception Exception
	 */
    public void updateJobIssue(JobIssueManage jobIssueManage) throws Exception {
        update("jobIssueManageDAO.updateJobIssue", jobIssueManage);
    }
    /**
	 * 이슈 상태만 수정
 	 * @param jobIssueManage JobIssueManage
	 * @exception Exception
	 */
	public void updateIssueSttus(JobIssueManage jobIssueManage) throws Exception{
		update("jobIssueManageDAO.updateIssueSttus", jobIssueManage);
	}
    /**
	 * JobIssue 삭제
	 * @param jobIssueManage JobIssueManage
	 * @exception Exception
	 */
    public void deleteJobIssue(JobIssueManage jobIssueManage) throws Exception {
        delete("jobIssueManageDAO.deleteJobIssue", jobIssueManage);
    }
    /**
	 * JobIssue 총 갯수 조회
	 * @param jobIssueManageVO JobIssueManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectJobIssueListTotCnt(JobIssueManageVO jobIssueManageVO)  throws Exception {
        return (Integer)select("jobIss

    }
    /**
	 * JobIssue 조회
	 * @param jobIssueManageVO JobIssueManageVO
	 * @return JobIssueManageVO
	 * @exception Exception
	 */
    public JobIssueManageVO selectJobIssue(JobIssueManageVO jobIssueManageVO) throws Exception {
        return (JobIssueManageVO) select("jobIssueManageDAO.selectJobIssue", jobIssueManageVO);
    }
	/**
	 * 해당 이슈에 대한 답글을 조회
	 * @param issueAnwserVO IssueAnwserVO
	 * @return List<IssueAnwserVO>
	 * @exception Exception
	 */
	public List<IssueAnwserVO> selectIssueAnswerList(IssueAnwserVO issueAnwserVO) throws Exception{
		return (List<IssueAnwserVO>) list("jobIssueManageDAO.selectIssueAnswerList", issueAnwserVO);
	}
    /**
	 * 해당 이슈에 대한 답글을 입력
	 * @param issueAnwserVO IssueAnwserVO
	 * @exception Exception
	 */
	public void insertIssueAnswer(IssueAnwserVO issueAnwserVO) throws Exception {
		insert("jobIssueManageDAO.insertIssueAnswer", issueAnwserVO);
	}
	/**
	 * 해당 이슈에 대한 답글을 삭제
	 * @param issueAnwserVO IssueAnwserVO
	 * @exception Exception
	 */
	publ
/**********************************************************************************
 * $Id: RepositoryManager.java 105079 2012-02-24 23:08:11Z ottenhoff@longsight.com $
 **********************************************************************************
 *
 * Copyright (c) 2003, 2004, 2005, 2007, 2008 The Sakai Foundation
 *
 * Licensed under the Educational Community License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 **********************************************************************************/
public abstract class RepositoryManager
implements org.osid.reposi

    public org.osid.OsidContext getOsidContext()
    throws org.osid.repository.RepositoryException
    {
	 		throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
   }
    public void assignOsidContext(org.osid.OsidContext context)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void assignConfiguration(java.util.Properties configuration)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Repository createRepository(String displayName
                                                         , String description
                                                         , org.osid.shared.Type repositoryType)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.Reposit

    }
    public void deleteRepository(org.osid.shared.Id repositoryId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RepositoryIterator getRepositories()
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RepositoryIterator getRepositoriesByType(org.osid.shared.Type repositoryType)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Repository getRepository(org.osid.shared.Id repositoryId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset getA

    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset getAssetByDate(org.osid.shared.Id assetId
                                                  , long date)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.LongValueIterator getAssetDates(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.AssetIterator getAssetsBySearch(org.osid.repository.Repository[] repositories
                                                             , java.io.Serializable searchCriteria
                                                             , org.osid.shared.Type searchType
  
public class ManageAccountController {
	private ManageAccountModel manageAccountModel;
	private ManageAccountView manageAccountView;
	public void addModel(ManageAccountModel manageAccountModel) {
		this.manageAccountModel = manageAccountModel;
	}
	public void addView(ManageAccountView manageAccountView) {
		this.manageAccountView = manageAccountView;
	}
	public void init(String filter, boolean activeOnly) {
		manageAccountModel.update(filter.toUpperCase(), activeOnly);
		manageAccountView.showView();
	}
	public void updateModel(String filter, boolean activeOnly) {
		manageAccountModel.update(filter.toUpperCase(), activeOnly);
	}
	public void manageAccountFee(String valueAt, String filter, boolean activeOnly) {
		Integer identifier = Integer.parseInt(valueAt);
		if(manageAccountModel.setAccount(identifier)) {
			try {
				ManageAccountFeeModel manageAccountFeeModel = new ManageAccountFeeModel(manageAccountModel.getAccount());
				ManageAccountFeeView manageAccountFeeView = new ManageAcc
/*************************GO-LICENSE-START*********************************
 * Copyright 2014 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *************************GO-LICENSE-END***********************************/
public class ProcessManagerTest {
    private ProcessManager processManager;
    private Process processOne;
    private Process processTwo;
    private ProcessWrapper wrapperForProcessOne;
    private ProcessWrapper wrapperForProcessTwo;
    private Process processStartedByManager;
    @Before
    pu

        processManager = new ProcessManager() {
            @Override
            Process startProcess(ProcessBuilder processBuilder, String msgCommandInfo) {
                return processStartedByManager;
            }
        };
        processStartedByManager = mock(Process.class);
        when(processStartedByManager.getInputStream()).thenReturn(mock(InputStream.class));
        when(processStartedByManager.getErrorStream()).thenReturn(mock(InputStream.class));
        when(processStartedByManager.getOutputStream()).thenReturn(mock(OutputStream.class));
        processOne = mock(Process.class);
        processTwo = mock(Process.class);
        when(processOne.getInputStream()).thenReturn(mock(InputStream.class));
        when(processOne.getErrorStream()).thenReturn(mock(InputStream.class));
        when(processOne.getOutputStream()).thenReturn(mock(OutputStream.class));
        when(processOne.exitValue()).thenThrow(new IllegalStateException());
        when(processTwo.exitValue(

        when(processTwo.getInputStream()).thenReturn(mock(InputStream.class));
        when(processTwo.getErrorStream()).thenReturn(mock(InputStream.class));
        when(processTwo.getOutputStream()).thenReturn(mock(OutputStream.class));
        ConcurrentHashMap<Process, ProcessWrapper> processMap = processManager.getProcessMap();
        wrapperForProcessOne = new ProcessWrapper(processOne, "tag1", null, inMemoryConsumer(), null, "ERROR: ");
        processMap.put(processOne, wrapperForProcessOne);
        wrapperForProcessTwo = new ProcessWrapper(processTwo, "tag2", null, inMemoryConsumer(), null, "ERROR: ");
        processMap.put(processTwo, wrapperForProcessTwo);
    }
    @Test
    public void shouldAddToProcessListWhenNewProcessCreated() {
        processManager.createProcess(new String[]{"echo", "message"}, "echo 'message'", null, new HashMap<String, String>(), new EnvironmentVariableContext(), inMemoryConsumer(), "test-tag", null,
                "ERROR: ");
        assertT

    }
    @Test
    public void shouldRemoveKilledProcessFromList() {
        processManager.processKilled(processTwo);
        assertThat(processManager.getProcessMap().size(), is(1));
        assertThat(processManager.getProcessMap().containsKey(processOne), is(true));
    }
    @Test
    public void shouldGetIdleTimeForGivenProcess() {
        processManager = new ProcessManager();
        ProcessWrapper processWrapperOne = mock(ProcessWrapper.class);
        Process processOne = mock(Process.class);
        ProcessWrapper processWrapperTwo = mock(ProcessWrapper.class);
        Process processTwo = mock(Process.class);
        ConcurrentHashMap<Process, ProcessWrapper> processMap = processManager.getProcessMap();
        processMap.put(processOne, processWrapperOne);
        processMap.put(processTwo, processWrapperTwo);
        when(processWrapperOne.getProcessTag()).thenReturn("tag1");
        when(processWrapperOne.getIdleTime()).thenReturn(200L);
        when(processWrapperTwo.
public class P2Repository {
    /**
     * URL of the Metadata Repository
     *
     * @parameter
     */
    private URL metadataRepository;
    /**
     * URL of the Artifact Repository
     *
     * @parameter
     */
    private URL artifactRepository;
    
    /**
     * URL of the P2 Repository
     *
     * @parameter
     */
    private URL repository;
    
    /**
     * Genrate P2 Repository on the fly
     *
     * @parameter
     */
    private RepositoryGenMojo generateRepo;
	public void setGenerateRepo(RepositoryGenMojo generateRepo) {
		this.generateRepo = generateRepo;
	}
	public RepositoryGenMojo getGenerateRepo() {
		return generateRepo;
	}
	public void setRepository(URL repository) {
		this.repository = repository;
	}
	public URL getRepository() {
		return repository;
	}
	public void setArtifactRepository(URL artifactRepository) {
		this.artifactRepository = artifactRepository;
	}
	public URL getArtifactRepository() {
		return artifactRepository;
	}
	public void set
/**
 * 개요
 * - 포상관리에 대한 Service Interface를 정의한다.
 * 
 * 상세내용
 * - 포상관리에 대한 등록, 수정, 삭제, 조회, 승인처리 기능을 제공한다.
 * - 포상관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
public interface EgovRwardManageService {
	/**
	 * 포상관리 정보를 관리하기 위해 등록된 로그인화면이미지 목록을 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return List - 포상관리 목록
	 */
	public List<RwardManageVO> selectRwardManageList(RwardManageVO rwardManageVO) throws Exception;
	/**
	 * 포상관리 목록 총 갯수를 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return int - 포상관리 카운트 수
	 */
	public int selectRwardManageListTotCnt(RwardManageVO rwardManageVO) throws Exception ;
	/**
	 * 등록된 포상관리의 상세정보를 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return RwardManageVO - 포상관리 VO
	 */
	public RwardManageVO selectRwardManage(RwardManageVO rwardManageVO) throws Exception;
	/**
	 * 포상관리 정보를 신규로 등록한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void insertRwardManage(RwardManage rwardManage) throws Exception;
	/**
	 * 기 등록
/**
 * @(#)ManageCourseController.java     	2013-10-9 下午3:48:34
 * Copyright never.All rights reserved
 * never PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
/**
 *Class <code>ManageCourseController.java</code> 管理课程的控制器
 *
 * @author never
 * @version 2013-10-9
 * @since JDK1.7
 */
public class ManageCourseController implements ManageCourseBLService{
    public ManageCourse manageCourse;
    
    
	public ManageCourseController() throws RemoteException {
		manageCourse = new ManageCourse();
	}
	/* (non-Javadoc)
	 * Title: getSelectedCourses
	 * Description:通过id获取该学生已经选择的课程列表
	 * @see com.example.cssnwu.businesslogicservice.bl.ManageCourseBLService#getSelectedCourses(int)
	 */
	@Override
	public ArrayList<CourseVO> getSelectedCourses(int studentId) throws RemoteException {
		return manageCourse.getSelectedCourses(studentId);
	}
	/* (non-Javadoc)
	 * Title: addStudent
	 * Description:   开始管理课程时，添加执行该操作的学生
	 * @see com.example.cssnwu.businesslogicservice.bl.ManageCourseBL

	 */
	@Override
	public ADD_RESULT addStudent(int studentId) throws RemoteException {
		return manageCourse.addStudent(studentId);
	}
	/* (non-Javadoc)
	 * Title: addManageType
	 * Description:开始管理课程时，添加管理课程操作的类型
	 * @see com.example.cssnwu.businesslogicservice.bl.ManageCourseBLService#addManageType(com.example.cssnwu.businesslogicservice.resultenum.ManageCourseType)
	 */
	@Override
	public ADD_RESULT addManageType(ManageCourseType manageCourseType) {
		return manageCourse.addManageType(manageCourseType);
	}
	/* (non-Javadoc)
	 * Title: addCourse
	 * Description:在进行课程管理时，往将要被管理的课程列表中添加课程
	 * @see com.example.cssnwu.businesslogicservice.bl.ManageCourseBLService#addCourse(com.example.cssnwu.vo.CourseVO)
	 */
	@Override
	public ADD_RESULT addCourse(CourseVO courseVO) {
		return manageCourse.addCourse(courseVO);
	}
	/* (non-Javadoc)
	 * Title: deleteCourse
	 * Description:在进行课程管理时，从将要管理的课程列表中删除课程
	 * @see com.example.cssnwu.businesslogicservice.bl.ManageCourseBLService#deleteCourse(com.ex
public class OutRepository {
	private OutRepositoryDataService outRepositoryDataService = RMI.<OutRepositoryDataService>getDataService("outrepository");
	public boolean addOutRepositoryFormBL(OutRepositoryVO outRepositoryVO) {
		OutRepositoryPO outRepositoryPO = OutRepositoryVOtoOutRepositoryPO(outRepositoryVO);
		boolean result = false;
		try {
			boolean temp2 = outRepositoryDataService.UpdateRepositoryInfoDT(outRepositoryPO);
			if (temp2) {
				boolean temp1 = outRepositoryDataService.AddOutRepositoryFormDT(outRepositoryPO);				
				if (temp1&&temp2) {
					result = true;
				}
			}
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		return result;
	}
	public boolean modifyOutRepositoryFormBL(OutRepositoryVO outRepositoryVO) {
		OutRepositoryPO outRepositoryPO = OutRepositoryVOtoOutRepositoryPO(outRepositoryVO);
		boolean result = false;
		try {
			boolean temp1 = outRepositoryDataService.ModifyOutRepositoryFormDT(outRepositoryPO);
			if (temp1) {
				result = true;
			}


			e.printStackTrace();
		}
		return result;
	}
	public OutRepositoryVO findOutRepositoryFormBL(String OutRepositoryNumber) {
		OutRepositoryPO outRepositoryPO =null;
		OutRepositoryVO result=null;
		try {
			outRepositoryPO = outRepositoryDataService.FindOutRepositoryFormDT(OutRepositoryNumber);
			if(outRepositoryPO==null){
				return null;
			}
			else {
				result = OutRepositoryPOtoOutRepositoryVO(outRepositoryPO);				
				result.setVerifyResult(true);
			}
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		return result;
	}
	private OutRepositoryVO OutRepositoryPOtoOutRepositoryVO(OutRepositoryPO outRepositoryPO){
		return new OutRepositoryVO(outRepositoryPO.getdeliveryid(), outRepositoryPO.getoutrepositorydate(), 
				outRepositoryPO.getarrivalid(), outRepositoryPO.getway(), 
				outRepositoryPO.getloadingid(),outRepositoryPO.gettransitionid());
	}
	private OutRepositoryPO OutRepositoryVOtoOutRepositoryPO(OutRepositoryVO outRepositoryVO){
		return new OutRepositoryPO
/**********************************************************************************
 * $Id: Repository.java 105079 2012-02-24 23:08:11Z ottenhoff@longsight.com $
 **********************************************************************************
 *
 * Copyright (c) 2003, 2004, 2005, 2007, 2008 The Sakai Foundation
 *
 * Licensed under the Educational Community License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 **********************************************************************************/
public abstract class Repository
implements org.osid.repository.Repositor

    public String getDisplayName()
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void updateDisplayName(String displayName)
    throws org.osid.repository.RepositoryException
    {
			throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public String getDescription()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void updateDescription(String description)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Id getId()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    p

    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset createAsset(String displayName
                                               , String description
                                               , org.osid.shared.Type assetType)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void deleteAsset(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.AssetIterator getAssets()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.AssetIterator 

    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.TypeIterator getAssetTypes()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RecordStructureIterator getRecordStructures()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RecordStructureIterator getMandatoryRecordStructures(org.osid.shared.Type assetType)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.TypeIterator getSearchTypes()
    throws org.osid.repository.RepositoryException
    {
		  throw ne

    }
    public org.osid.shared.TypeIterator getStatusTypes()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Type getStatus(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public boolean validateAsset(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public void invalidateAsset(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset getAsset(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryExcept

    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.Asset getAssetByDate(org.osid.shared.Id assetId
                                                  , long date)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.LongValueIterator getAssetDates(org.osid.shared.Id assetId)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.AssetIterator getAssetsBySearch(java.io.Serializable searchCriteria
                                                             , org.osid.shared.Type searchType
                                                             , org.osid.shared.Properties searchProperties)
    throws org.osid.repository.RepositoryException


		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Id copyAsset(org.osid.repository.Asset asset)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.repository.RecordStructureIterator getRecordStructuresByType(org.osid.shared.Type recordStructureType)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.PropertiesIterator getProperties()
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid.repository.RepositoryException(org.osid.OsidException.UNIMPLEMENTED);
    }
    public org.osid.shared.Properties getPropertiesByType(org.osid.shared.Type propertiesType)
    throws org.osid.repository.RepositoryException
    {
		  throw new org.osid
/**
 * 사용자관리에 관한 서비스 인터페이스 클래스
 * @user 배치운영환경 김지완
 * @since 2012.07.12
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2012.07.12  김지완          최초 생성
 *
 * </pre>
 */
public interface EgovUserManageService {
    /**
	 * 모든 사용자를 조회
	 * @param userManageVO UserManageVO
	 * @return List<UserManageVO>
	 * @exception Exception
	 */
	public List<UserManageVO> selectUserList(UserManageVO userManageVO) throws Exception;
	/**
	 * 사용자를 등록
	 * @param userManage UserManage
	 * @exception Exception
	 */
	public void insertUser(UserManage userManage) throws Exception;
	/**
	 * 사용자를 수정
 	 * @param userManage UserManage
	 * @exception Exception
	 */
	public void updateUser(UserManage userManage) throws Exception;
	/**
	 * 사용자를 삭제
	 * @param userManage UserManage
	 * @exception Exception
	 */
	public void deleteUser(UserManage userManage) throws Exception;
	/**
	 * 목록조회 카운트를 반
/**
 * Realizuotas per PriorityQueue (nesynchronized) ir Comparatoriu (Realiai jame ir yra palyginimo logika)
 * Alternatyva:
 *   ArrayList
 *   foreach'as ieskantis geriausio
 * @author ernestas
 */
public class Planner { 
    
    /**
     * Returns Process to be executed next.
     * @return process having highest priority and is ready to work. Null if there are no processes or all are blocked
     */
    private static Process getNextProcess() {
        for (Process p : processes) { 
            if (p.state == ProcessState.READY || p.state == ProcessState.READYS) {
                return p;
            }
        }
        return null;
    }
    
    public static void run(){
        Process process = getNextProcess();
        process.state = ProcessState.RUNNING;
        getNextProcess().run();
    }
    
    
    /*
     */
    public static void createProcess(Process creator, Process process) {
       processes.add(process);
    }
    
    public static void deleteProcess(Proces
/**
 * 롤관리에 대한 DAO 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.11  이문준          최초 생성
 *
 * </pre>
 */
@Repository("roleManageDAO")
public class RoleManageDAO extends EgovComAbstractDAO {
	/**
	 * 등록된 롤 정보 조회
	 * @param roleManageVO RoleManageVO
	 * @return RoleManageVO
	 * @exception Exception
	 */
	public RoleManageVO selectRole(RoleManageVO roleManageVO) throws Exception {
		return (RoleManageVO) selectByPk("roleManageDAO.selectRole", roleManageVO);
	}
	/**
	 * 등록된 롤 정보 목록 조회
	 * @param roleManageVO RoleManageVO
	 * @return List<RoleManageVO>
	 * @exception Exception
	 */
	@SuppressWarnings("unchecked")
	public List<RoleManageVO> selectRoleList(RoleManageVO roleManageVO) throws Exception {
		return list("roleManageDAO.selectRoleList", roleManageVO);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 

	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void insertRole(RoleManage roleManage) throws Exception {
		insert("roleManageDAO.insertRole", roleManage);
	}
	/**
	 * 시스템 메뉴에 따른 접근권한, 데이터 입력, 수정, 삭제의 권한 롤을 수정
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void updateRole(RoleManage roleManage) throws Exception {
		update("roleManageDAO.updateRole", roleManage);
	}
	/**
	 * 불필요한 롤정보를 화면에 조회하여 데이터베이스에서 삭제
	 * @param roleManage RoleManage
	 * @exception Exception
	 */
	public void deleteRole(RoleManage roleManage) throws Exception {
		delete("roleManageDAO.deleteRole", roleManage);
	}
    /**
	 * 롤목록 총 갯수를 조회한다.
	 * @param roleManageVO RoleManageVO
	 * @return int
	 * @exception Exception
	 */
    public int selectRoleListTotCnt(RoleManageVO roleManageVO) throws Exception {
        return (Integer)getSqlMapClientTemplate().queryForObject("roleManageDAO.selectAuthorListTotCnt", roleManageVO);
    }	
    
	/**
	 * 등록된 모든 롤 정보 목록 조회
	 * @param
public class CaroWebServer {
	public static int SERVER_PORT = 8080;
	public static void main(String[] args) throws Exception {
		Server server = new Server(SERVER_PORT);
		ServletContextHandler servletHandler = new ServletContextHandler(ServletContextHandler.SESSIONS);
		
		servletHandler.setContextPath("/caro");
		WebSocketServlet webHandler = new WebSocketServlet() {			
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;
			@Override
			public void configure(WebSocketServletFactory factory) {
				factory.register(CaroWebSocket.class);				
			}
		};	
		
		ServletHolder holder = new ServletHolder(webHandler);
		
		servletHandler.addServlet(holder, "/");
		
		ResourceHandler resourceHandler = new ResourceHandler();
		resourceHandler.setResourceBase("resource");		
		resourceHandler.setDirectoriesListed(true);
		
		ContextHandler resourceContextHandler = new ContextHandler("/");
		resourceContextHandler.setHandler(resourceHandler);
		
		
		HandlerList handlerList = ne
public class CreateSenderInteractorFactory {
    private final SenderRepository senderRepository;
    private final InputRepository inputRepository;
    private final OutputRepository outputRepository;
    private final CommandRepository commandRepository;
    private final GroupMemberRepository groupMemberRepository;
    @Inject
    public CreateSenderInteractorFactory(SenderRepository senderRepository, InputRepository inputRepository, OutputRepository outputRepository, CommandRepository commandRepository, GroupMemberRepository groupMemberRepository) {
        this.senderRepository = senderRepository;
        this.inputRepository = inputRepository;
        this.outputRepository = outputRepository;
        this.commandRepository = commandRepository;
        this.groupMemberRepository = groupMemberRepository;
    }
    public CreateSenderInteractor create(Sender sender, List<Integer> groups) {
        return new CreateSenderInteractor(senderRepository, inputRepository, outputRepository,
public class CLFragment extends Fragment {
	@Override
	public void onDestroy() {
		if (autoReleaseMApiService != null) {
			autoReleaseMApiService.onDestory();
		}
		super.onDestroy();
	}
	private AutoReleaseMApiService autoReleaseMApiService;
	public Object getService(String name) {
		if ("mapi".equals(name)) {
			if (autoReleaseMApiService == null) {
				MApiService orig = (MApiService) CLApplication.instance()
						.getService("mapi");
				autoReleaseMApiService = new AutoReleaseMApiService(
						CLFragment.this, orig);
			}
			return autoReleaseMApiService;
		}
		return CLApplication.instance().getService(name);
	}
	private HttpService httpService;
	public HttpService httpService() {
		if (httpService == null) {
			httpService = (HttpService) getService("http");
		}
		return httpService;
	}
	private ImageService imageService;
	public ImageService imageService() {
		if (imageService == null) {
			imageService = (ImageService) getService("image");
		}
		return imageService;
	}
	pri
@EnableTransactionManagement
@Configuration
@EnableNeo4jRepositories(basePackages="com.foodtrip.ftmodeldb.repo")
public class Neo4JConnector extends Neo4jConfiguration {
	public Neo4JConnector()
	{
		setBasePackage("com.foodtrip");
	}
	@Autowired private Neo4jTemplate template;
	@Autowired PersonRepository personRepository;
	@Autowired CityRepository cityRepository;
	@Autowired OrderRepository orderRepository;
	@Autowired ProductRepository productRepository;
	@Autowired FarmRepository farmRepository;
	@Autowired StepRepository stepRepository;
	@Autowired NotificationRepository notificationRepository;
	public NotificationRepository getNotificationRepository() {
		return notificationRepository;
	}
	public void setNotificationRepository(
			NotificationRepository notificationRepository) {
		this.notificationRepository = notificationRepository;
	}
	public PersonRepository getPersonRepository() {
		return personRepository;
	}
	public void setPersonRepository(PersonRepository personRepositor

		this.personRepository = personRepository;
	}
	public CityRepository getCityRepository() {
		return cityRepository;
	}
	public void setCityRepository(CityRepository cityRepository) {
		this.cityRepository = cityRepository;
	}
	public OrderRepository getOrderRepository() {
		return orderRepository;
	}
	public void setOrderRepository(OrderRepository orderRepository) {
		this.orderRepository = orderRepository;
	}
	public ProductRepository getProductRepository() {
		return productRepository;
	}
	public void setProductRepository(ProductRepository productRepository) {
		this.productRepository = productRepository;
	}
	public FarmRepository getFarmRepository() {
		return farmRepository;
	}
	public StepRepository getStepRepository() {
		return stepRepository;
	}
	public void setFarmRepository(FarmRepository farmRepository) {
		this.farmRepository = farmRepository;
	}
	@Autowired 
	private CompanyRepository companyRepository;
	public CompanyRepository getCompanyRepository() {
		return companyR
/**
 * Simple main program for creating an Activiti Process Engine and automatic deployment of a BPMN2.0 filename
 * given as argument.
 */
public class Main {
    public static void main(String[] args) {
        ProcessEngine processEngine = null;
        try {
            processEngine = createProcessEngine();
            RepositoryService repositoryService = processEngine.getRepositoryService();
            DeploymentBuilder deploymentBuilder = repositoryService.createDeployment();
            deploymentBuilder.addClasspathResource(PROCESS_FILENAME);
            deploymentBuilder.deploy();
            System.out.println("------------------------------------");
            ProcessDefinitionQuery processDefinitionQuery = repositoryService.createProcessDefinitionQuery();
            for (ProcessDefinition proc : processDefinitionQuery.list()) {
                System.out.println(proc);
            }
            ProcessInstance processInstance = processEngine.getRuntimeService().startPr
/**
 * Abstract Guy Class
 */
public abstract class BarneyGuy {
    private String name;
    protected List<ServiceType> serviceTypes = new ArrayList<>();
    protected BroService service;
    protected BarneyGuy(String name) {
        this.name = name;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public List<ServiceType> getServiceTypes() {
        return serviceTypes;
    }
    public void setServiceTypes(List<ServiceType> serviceTypes) {
        this.serviceTypes = serviceTypes;
    }
    public BroService getService() {
        return service;
    }
    public void callService(){
        if( service != null ){
            service.executeService();
        }
    }
    public abstract void addServiceType(ServiceType type);
    public void setService(BroService service) {
        this.service = service;
    }
    public boolean offersService(ServiceType serviceType){
        for (ServiceType t
public class Seafazer {
	public final Logger log = LoggerFactory.getLogger(getClass());
	public final AutodetectorService autodetectorService;
	public final AutopilotService autopilotService;
	public final CameraService cameraService;
	public final FileConfigService fileConfigService;
	public final PropertyService propertyService;
	public final GearService gearService;
	public final LightingService lightingService;
	public final LogbookService logbookService;
	public final MessagingService messagingService;
	public final MissionService missionService;
	public final GpsPositioningService gpsPositioningService;
	public Seafazer(AutodetectorService autodetectorService,
			AutopilotService autopilotService, CameraService cameraService,
			FileConfigService fileConfigService,
			PropertyService propertyService, GearService gearService,
			LightingService lightingService, LogbookService logbookService,
			MessagingService messagingService, MissionService missionService,
			GpsPositioningServ
/**
 * Created by Ryan on 13/03/2015.
 */
@Service
@Transactional
public class SpringfeedService {
    private FeedRepository feedRepository;
    private FollowRepository followRepository;
    private TweetRepository tweetRepository;
    private UserRepository userRepository;
    private TagRepository tagRepository;
    private RetweetRepository retweetRepository;
    private FavouriteRepository favouriteRepository;
    private PrivateMessageRepository privateMessageRepository;
    private NotificationRepository notificationRepository;
    private SecurityContextAccessor securityContextAccessor;
    public TweetRepository getTweetRepository() {
        return tweetRepository;
    }
    @Autowired
    public void setTweetRepository(TweetRepository tweetRepository) {
        this.tweetRepository = tweetRepository;
    }
    public UserRepository getUserRepository() {
        return userRepository;
    }
    @Autowired
    public void setUserRepository(UserRepository userRepository) {
   

    }
    public SecurityContextAccessor getSecurityContextAccessor() {
        return securityContextAccessor;
    }
    @Autowired
    public void setSecurityContextAccessor(SecurityContextAccessor securityContextAccessor) {
        this.securityContextAccessor = securityContextAccessor;
    }
    public FollowRepository getFollowRepository() {
        return followRepository;
    }
    @Autowired
    public void setFollowRepository(FollowRepository followRepository) {
        this.followRepository = followRepository;
    }
    public TagRepository getTagRepository() {
        return tagRepository;
    }
    @Autowired
    public void setTagRepository(TagRepository tagRepository) {
        this.tagRepository = tagRepository;
    }
    public PrivateMessageRepository getPrivateMessageRepository() {
        return privateMessageRepository;
    }
    @Autowired
    public void setPrivateMessageRepository(PrivateMessageRepository privateMessageRepository) {
        this.privateMessageRe

    }
    public NotificationRepository getNotificationRepository() {
        return notificationRepository;
    }
    @Autowired
    public void setNotificationRepository(NotificationRepository notificationRepository) {
        this.notificationRepository = notificationRepository;
    }
    public RetweetRepository getRetweetRepository() {
        return retweetRepository;
    }
    @Autowired
    public void setRetweetRepository(RetweetRepository retweetRepository) {
        this.retweetRepository = retweetRepository;
    }
    public FavouriteRepository getFavouriteRepository() {
        return favouriteRepository;
    }
    @Autowired
    public void setFavouriteRepository(FavouriteRepository favouriteRepository) {
        this.favouriteRepository = favouriteRepository;
    }
    public FeedRepository getFeedRepository() {
        return feedRepository;
    }
    @Autowired
    public void setFeedRepository(FeedRepository feedRepository) {
        this.feedRepository = feedReposit
/**
 * JobIssue관리에 관한 서비스 인터페이스 클래스
 * @jobIssue 배치운영환경 김지완
 * @since 2012.07.16
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2012.07.16  김지완          최초 생성
 *
 * </pre>
 */
public interface EgovJobIssueManageService {
    /**
	 * 모든 JobIssue를 조회
	 * @param jobIssueManageVO JobIssueManageVO
	 * @return List<JobIssueManageVO>
	 * @exception Exception
	 */
	public List<JobIssueManageVO> selectJobIssueList(JobIssueManageVO jobIssueManageVO) throws Exception;
	/**
	 * JobIssue 등록
	 * @param jobIssueManage JobIssueManage
	 * @exception Exception
	 */
	public void insertJobIssue(JobIssueManage jobIssueManage) throws Exception;
	/**
	 * JobIssue 수정
 	 * @param jobIssueManage JobIssueManage
	 * @exception Exception
	 */
	public void updateJobIssue(JobIssueManage jobIssueManage) throws Exception;
	/**
	 * 이슈 상태만 수정
 	 * @param jobIssueManage JobIssueManage
	 * @excep

	 */
	public void updateIssueSttus(JobIssueManage jobIssueManage) throws Exception;
	/**
	 * JobIssue 삭제
	 * @param jobIssueManage JobIssueManage
	 * @exception Exception
	 */
	public void deleteJobIssue(JobIssueManage jobIssueManage) throws Exception;
	/**
	 * 목록조회 카운트를 반환한다
	 * @param jobIssueManageVO JobIssueManageVO
	 * @return int
	 * @exception Exception
	 */
	public int selectJobIssueListTotCnt(JobIssueManageVO jobIssueManageVO) throws Exception;	
	/**
	 * 개별 JobIssue 조회
	 * @param jobIssueManageVO JobIssueManageVO
	 * @return JobIssueManageVO
	 * @exception Exception
	 */
	public JobIssueManageVO selectJobIssue(JobIssueManageVO jobIssueManageVO) throws Exception;
	/**
	 * 해당 이슈에 대한 답글을 조회
	 * @param issueAnwserVO IssueAnwserVO
	 * @return List<IssueAnwserVO>
	 * @exception Exception
	 */
	public List<IssueAnwserVO> selectIssueAnswerList(IssueAnwserVO issueAnwserVO) throws Exception;
	/**
	 * 해당 이슈에 대한 답글을 입력
	 * @param issueAnwserVO IssueAnwserVO
	 * @exception Exception
	 */

/**
 * The Interface IProcessBCF.
 * 
 * @author QAT Global
 */
public interface IProcessBCF
	/**
	 * Update process.
	 * 
	 * @param processRequest the process request
	 * @return the process response
	 */
	ProcessResponse updateProcess(ProcessRequest processRequest);
	/**
	 * Fetch processes.
	 * 
	 * @param inquiryProcessRequest the inquiry process request
	 * @return the inquiry process response
	 */
	InquiryProcessResponse fetchProcesses(InquiryProcessRequest inquiryProcessRequest);
	/**
	 * Fetch process by id.
	 * 
	 * @param processRequest the process request
	 * @return the inquiry process response
	 */
	InquiryProcessResponse fetchProcessById(ProcessRequest processRequest);
	/**
	 * Fetch monitored process.
	 * 
	 * @param inquiryProcessRequest the inquiry process request
	 * @return the inquiry process response
	 */
	InquiryProcessResponse fetchMonitoredProcess(InquiryProcessRequest inquiryProcessRequest);
	/**
	 * Fetch count monitored processes.
	 * 
	 * @param processRequ

	 * @return the process response
	 */
	ProcessResponse fetchCountMonitoredProcesses(ProcessRequest processRequest);
	/**
	 * Fetch today processes.
	 * 
	 * @param inquiryProcessRequest the inquiry process request
	 * @return the inquiry process response
	 */
	InquiryProcessResponse fetchTodayProcesses(InquiryProcessRequest inquiryProcessRequest);
	/**
	 * Check link status.
	 * 
	 * @param processRequest the process request
	 * @return the process response
	 */
	ProcessResponse checkLinkStatus(ProcessRequest processRequest);
	/**
	 * Fetch communication summary.
	 * 
	 * @param processRequest the process request
	 * @return the process response
	 */
	ProcessResponse fetchCommunicationSummary(ProcessRequest processRequest);
	/**
	 * 
	 * @param processRequest the process request
	 * @return the process response
	 */
	ProcessResponse fetchImportHanDeviceSummary(ProcessRequest processRequest);
	/**
	 * Fetch demand read ping summary.
	 * 
	 * @param processRequest the process request
	 

	 */
	ProcessResponse fetchDemandReadPingSummary(ProcessRequest processRequest);
	/**
	 * Fetch process items by schedule.
	 * 
	 * @param processRequest the process request
	 * @return the process response
	 */
	ProcessResponse fetchProcessItemsBySchedule(ProcessRequest processRequest);
	/**
	 * Fetch process items by process id.
	 * 
	 * @param processRequest the process request
	 * @return the process response
	 */
	ProcessResponse fetchProcessItemsByProcessId(ProcessRequest processRequest);
	/**
	 * Fetch all process items.
	 * 
	 * @param processRequest the process request
	 * @return the process response
	 */
	ProcessResponse fetchAllProcessItems(ProcessRequest processRequest);
	/**
	 * Update process items to expire.
	 * 
	 * @param processRequest the process request
	 * @return the process response
	 */
	ProcessResponse updateProcessItemsToExpire(ProcessRequest processRequest);
	/**
	 * Fetch relays.
	 * 
	 * @param processRequest the process request
	 * @return the process re
/**
 * 개요
 * - 팝업창에 대한 Service Interface를 정의한다.
 *
 * 상세내용
 * - 팝업창에 대한 등록, 수정, 삭제, 조회, 반영확인 기능을 제공한다.
 * - 팝업창의 조회기능은 목록조회, 상세조회, 팝업사용자 보기로 구분된다.
 * @author 이창원
 * @version 1.0
 * @created 05-8-2009 오후 2:19:58
 */
public interface EgovPopupManageService {
	/**
	 * 기 등록된 팝업창정보를 삭제한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 *
	 * @param popupManage
	 */
	public void deletePopup(PopupManageVO popupManageVO) throws Exception;
	/**
	 * 팝업창정보를 신규로 등록한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 *
	 * @param popupManage
	 */
	public void insertPopup(PopupManageVO popupManageVO) throws Exception;
	/**
	 * 기 등록된 팝업창정보를 수정한다.
	 * @param popupManage - 팝업창 model
	 * @return boolean - 반영성공 여부
	 *
	 * @param popupManage
	 */
	public void updatePopup(PopupManageVO popupManageVO) throws Exception;
	/**
	 * 팝업창을 사용자 화면에서 볼수 있는 정보들을 조회한다.
	 * @param popupManageVO - 팝업창 Vo
	 * @return popupManageVO - 팝업창 Vo
	 *
	 * @param popupManageVO
	 */
	public Pop
/*
 *
 *
 * The program is available in open source according to the GNU Affero
 * General Public License. All contributions in this program are covered
 * by the Geomajas Contributors License Agreement. For full licensing
 * details, see LICENSE.txt in the project root.
 */
/**
 * Event bus with convenience methods for registering handlers to a specific map.
 * 
 * @author Jan De Moerloose
 * @since 1.0.0
 */
@Api(allMethods = true)
public interface MapEventBus {
	/**
	 * Add a feature selection handler.
	 * 
	 * @param handler the handler
	 * @return the handler registration
	 */
	HandlerRegistration addFeatureSelectionHandler(FeatureSelectionHandler handler);
	/**
	 * Add a feature selection handler for a specific layer.
	 * 
	 * @param handler the handler
	 * @param layer the layer
	 * @return the handler registration
	 */
	HandlerRegistration addFeatureSelectionHandler(FeatureSelectionHandler handler, Layer layer);
	/**
	 * Add a layer labeling handler.
	 * 
	 * @param handler the

	 * @return the handler registration
	 */
	HandlerRegistration addLayerLabeledHandler(LayerLabeledHandler handler);
	/**
	 * Add a layer labeling handler for a specific layer.
	 * 
	 * @param handler the handler
	 * @param layer the layer
	 * @return the handler registration
	 */
	HandlerRegistration addLayerLabeledHandler(LayerLabeledHandler handler, Layer layer);
	/**
	 * Add a layer order handler.
	 * 
	 * @param handler the handler
	 * @return the handler registration
	 */
	HandlerRegistration addLayerOrderChangedHandler(LayerOrderChangedHandler handler);
	/**
	 * Add a layer refresh handler.
	 * 
	 * @param handler the handler
	 * @return the handler registration
	 */
	HandlerRegistration addLayerRefreshedHandler(LayerRefreshedHandler handler);
	/**
	 * Add a layer refresh handler for a specific layer.
	 * 
	 * @param handler the handler
	 * @param layer the layer
	 * @return the handler registration
	 */
	HandlerRegistration addLayerRefreshedHandler(LayerRefreshedHandler handler

	/**
	 * Add a layer selection handler.
	 * 
	 * @param handler the handler
	 * @return the handler registration
	 */
	HandlerRegistration addLayerSelectionHandler(LayerSelectionHandler handler);
	/**
	 * Add a layer selection handler for a specific layer.
	 * 
	 * @param handler the handler
	 * @param layer the layer
	 * @return the handler registration
	 */
	HandlerRegistration addLayerSelectionHandler(LayerSelectionHandler handler, Layer layer);
	/**
	 * Add a layer style change handler.
	 * 
	 * @param handler the handler
	 * @return the handler registration
	 */
	HandlerRegistration addLayerStyleChangedHandler(LayerStyleChangedHandler handler);
	/**
	 * Add a layer style change handler for a specific layer.
	 * 
	 * @param handler the handler
	 * @param layer the layer
	 * @return the handler registration
	 */
	HandlerRegistration addLayerStyleChangedHandler(LayerStyleChangedHandler handler, Layer layer);
	/**
	 * Add a layer visibility handler.
	 * 
	 * @param handler the handle

	 * @return the handler registration
	 */
	HandlerRegistration addLayerVisibilityHandler(LayerVisibilityHandler handler);
	/**
	 * Add a layer visibility handler for a specific layer.
	 * 
	 * @param handler the handler
	 * @param layer the layer
	 * @return the handler registration
	 */
	HandlerRegistration addLayerVisibilityHandler(LayerVisibilityHandler handler, Layer layer);
	/**
	 * Add a map composition selection handler.
	 * 
	 * @param handler the handler
	 * @return the handler registration
	 */
	HandlerRegistration addMapCompositionHandler(MapCompositionHandler handler);
	/**
	 * Add a map initialization handler.
	 * 
	 * @param handler the handler
	 * @return the handler registration
	 */
	HandlerRegistration addMapInitializationHandler(MapInitializationHandler handler);
	/**
	 * Add a map resize handler.
	 * 
	 * @param handler the handler
	 * @return the handler registration
	 */
	HandlerRegistration addMapResizedHandler(MapResizedHandler handler);
	/**
	 * Add a viewport
/**
 *          This class contains the proces mapping detail. 
 *       
 */
public class ProcessMappingDetails  implements java.io.Serializable {
     private String sourceProcessName;
     private String targetProcessName;
     private Map processMappingDetailsMap = new HashMap(0);
    public ProcessMappingDetails() {
    }
    public ProcessMappingDetails(String sourceProcessName, String targetProcessName) {
        this.sourceProcessName = sourceProcessName;
        this.targetProcessName = targetProcessName;
    }
    public ProcessMappingDetails(String sourceProcessName, String targetProcessName, Map processMappingDetailsMap) {
       this.sourceProcessName = sourceProcessName;
       this.targetProcessName = targetProcessName;
       this.processMappingDetailsMap = processMappingDetailsMap;
    }
   
    public String getSourceProcessName() {
        return this.sourceProcessName;
    }
    
    public void setSourceProcessName(String sourceProcessName) {
        this.sourcePro
public abstract class AbstractEmailHandler implements EmailHandler {
    private EmailHandler nextHandler;
    public void setNextHandler(EmailHandler handler) {
        nextHandler = handler;
    }
    public void processHandler(String email) {
        boolean wordFound = false;
        if (matchingWords().length == 0) {
            wordFound = true;
        } else {
             for (String word : matchingWords()) {
                if (email.indexOf(word) >= 0) {
                    wordFound = true;
                    break;
                }
            }
        }
	 if (wordFound) {
            handleHere(email);
        } else {
               nextHandler.processHandler(email);
        }
    }
    
    public static void handle(String email) {
        EmailHandler spam = new SpamEmailHandler();
        EmailHandler sales = new SalesEmailHandler();
        EmailHandler service = new ServiceEmailHandler();
        EmailHandler manager = new ManagerEmailHandler();
        EmailHand
/**
 * Generated by Protogen
 * @since 10/16/2015 11:14:56 CDT
 */
@Component
public class InvDaoService {
	@Autowired
	private MessageService messageService;
    public MessageService getMessageService() {
        return messageService;
    }
	@Autowired
	private SystemSettingService systemSettingService;
    public SystemSettingService getSystemSettingService() {
        return systemSettingService;
    }
	@Autowired
	private PropertyService propertyService;
    public PropertyService getPropertyService() {
        return propertyService;
    }
	@Autowired
	private TaskService taskService;
    public TaskService getTaskService() {
        return taskService;
    }
	@Autowired
	private PersonService personService;
    public PersonService getPersonService() {
        return personService;
    }
	@Autowired
	private LocationService locationService;
    public LocationService getLocationService() {
        return locationService;
    }
	@Autowired
	private RoleService roleService;
    p
/**
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at license/ESCIDOC.LICENSE
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at license/ESCIDOC.LICENSE.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 *
 *
 * Copyright 2012 Fachinformationszentrum Karlsruhe Gesellschaft
 * fuer wissenschaftlich-technische Information mbH and Max-Planck-
 * Gesellschaft zur Foerderung der Wissenschaft e.V.
 * All rights reserve

 */
public class RepositoriesImpl implements Repositories {
    private final EscidocServiceLocation serviceLocation;
    private ContextRepository contextRepository;
    private ContainerRepository containerRepository;
    private ItemRepository itemRepository;
    private StagingRepository stagingRepository;
    private PdpRepository pdpRepository;
    private ContentModelRepository contentModelRepository;
    private UserAccountRepository userAccountRepository;
    private AdminRepository adminRepository;
    private IngestRepository ingestRepository;
    private BulkRepository bulkRepo;
    private OrganizationUnitRepository orgUnitRepository;
    private RoleRepository roleRepository;
    private GroupRepository groupRepository;
    public RepositoriesImpl(final EscidocServiceLocation serviceLocation) {
        Preconditions.checkNotNull(serviceLocation, "serviceLocation is null: %s", serviceLocation);
        this.serviceLocation = serviceLocation;
    }
    public Repositories 

        contextRepository = new ContextRepository(serviceLocation);
        containerRepository = new ContainerRepository(serviceLocation);
        itemRepository = new ItemRepository(serviceLocation);
        stagingRepository = new StagingRepositoryImpl(serviceLocation);
        pdpRepository = new PdpRepositoryImpl(serviceLocation.getEscidocUrl());
        contentModelRepository = new ContentModelRepository(serviceLocation);
        userAccountRepository = new UserAccountRepository(serviceLocation);
        adminRepository = new AdminRepository(serviceLocation);
        ingestRepository = new IngestRepository(serviceLocation);
        orgUnitRepository = new OrganizationUnitRepository(serviceLocation);
        groupRepository = new GroupRepository(serviceLocation);
        roleRepository = new RoleRepository(serviceLocation);
        bulkRepo =
            new BulkRepository(contextRepository, containerRepository, itemRepository, contentModelRepository,
                orgUnitRepos

        return this;
    }
    @Override
    public void loginWith(final String token) throws EscidocClientException {
        contextRepository.loginWith(token);
        containerRepository.loginWith(token);
        itemRepository.loginWith(token);
        stagingRepository.loginWith(token);
        pdpRepository.loginWith(token);
        userAccountRepository.loginWith(token);
        adminRepository.loginWith(token);
        ingestRepository.loginWith(token);
        orgUnitRepository.loginWith(token);
        contentModelRepository.loginWith(token);
        groupRepository.loginWith(token);
        roleRepository.loginWith(token);
    }
    @Override
    public ContextRepository context() {
        Preconditions.checkNotNull(contextRepository, "contextRepository is null: %s", contextRepository);
        return contextRepository;
    }
    @Override
    public ContainerRepository container() {
        Preconditions.checkNotNull(containerRepository, "containerRepository is null: %s"

        return containerRepository;
    }
    @Override
    public ItemRepository item() {
        Preconditions.checkNotNull(itemRepository, "itemRepository is null: %s", itemRepository);
        return itemRepository;
    }
    @Override
    public StagingRepository staging() {
        Preconditions.checkNotNull(stagingRepository, "stagingRepository is null: %s", stagingRepository);
        return stagingRepository;
    }
    @Override
    public PdpRepository pdp() {
        Preconditions.checkNotNull(pdpRepository, "pdpRepository is null: %s", pdpRepository);
        return pdpRepository;
    }
    @Override
    public ContentModelRepository contentModel() {
        Preconditions
            .checkNotNull(contentModelRepository, "contentModelRepository is null: %s", contentModelRepository);
        return contentModelRepository;
    }
    @Override
    public UserAccountRepository user() {
        Preconditions.checkNotNull(userAccountRepository, "userAccountRepository is null: %s

        return userAccountRepository;
    }
    @Override
    public AdminRepository admin() {
        Preconditions.checkNotNull(adminRepository, "adminRepository is null: %s", adminRepository);
        return adminRepository;
    }
    @Override
    public IngestRepository ingest() {
        Preconditions.checkNotNull(ingestRepository, "ingestRepository is null: %s", ingestRepository);
        return ingestRepository;
    }
    @Override
    public BulkRepository bulkTasks() {
        return bulkRepo;
    }
    @Override
    public OrganizationUnitRepository organization() {
        return orgUnitRepository;
    }
    @Override
    public Repository findByType(ResourceType type) {
        switch (type) {
            case CONTEXT:
                return contextRepository;
            case CONTAINER:
                return containerRepository;
            case ITEM:
                return itemRepository;
            case CONTENT_MODEL:
                return contentModelRepository;
  
public class StubImage extends StubWidget implements IsImage {
  private String url;
  public void click() {
    fireEvent(new StubClickEvent());
  }
  @Override
  public HandlerRegistration addLoadHandler(final LoadHandler handler) {
    return handlers.addHandler(LoadEvent.getType(), handler);
  }
  @Override
  public HandlerRegistration addErrorHandler(final ErrorHandler handler) {
    return handlers.addHandler(ErrorEvent.getType(), handler);
  }
  @Override
  public HandlerRegistration addClickHandler(final ClickHandler handler) {
    return handlers.addHandler(ClickEvent.getType(), handler);
  }
  @Override
  public HandlerRegistration addMouseDownHandler(final MouseDownHandler handler) {
    return handlers.addHandler(MouseDownEvent.getType(), handler);
  }
  @Override
  public HandlerRegistration addMouseUpHandler(final MouseUpHandler handler) {
    return handlers.addHandler(MouseUpEvent.getType(), handler);
  }
  @Override
  public HandlerRegistration addMouseOutHandler(final
/**
 * Created by trevor on 2/21/15.
 */
public class HandlerStrategy {
    public static Handler getHandler(HandlerType allowedType){
        Handler handler;
        switch(allowedType){
            case BOOLEAN:
                handler = new DefaultHandler();
                break;
            case CHAR :
                handler = new DefaultHandler();
                break;
            case DOUBLE:
                handler = new DefaultHandler();
                break;
            case FLOAT:
                handler = new DefaultHandler();
                break;
            case INT :
                handler = new DefaultHandler();
                break;
            case LONG:
                handler = new DefaultHandler();
                break;
            case STRING:
                handler = new StringHandler();
                break;
            case URI :
                handler = new URIHandler();
                break;
            default:
                throw new IllegalA
public class ServiceFactory {
	private static ServiceFactory instance;
	private PatientService pasientService;
	private DepartmentService departmentService;
	private TaskService taskService;
	private MedicineService medicineService;
	private MedicineFormService medicineFormService;
	private AuthenticationService authenticationService;
	public PatientService getPatientService(){
		if(pasientService == null){
			pasientService = new PatientServiceTestImpl();
		}
		return pasientService;
	}
	public DepartmentService getDepartmentService(){
		if(departmentService == null){
			departmentService = new DepartmentServiceTestImpl();
		}
		return departmentService;
	}
	public TaskService getTaskService(){
		if(taskService == null){
			taskService = new TaskServiceTestImpl();
		}
		return taskService;
	}
	public MedicineService getMedicineService(){
		if(medicineService == null){
			medicineService = new MedicineServiceTestImpl();
		}
		return medicineService;
	}
	public MedicineFormService getMe
public class ProcessFactory extends BasePartFactory {
	private static ProcessFactory fInstance = null;
	public static ProcessFactory getInstance() {
		if(fInstance == null) {
			fInstance = new ProcessFactory();
		}
		return fInstance;
	}
	private ProcessFactory() {
		super();
		fDataFileName = this.getClass().getName();
	}
	@Override
	public Process fromJSOM(String part) {
        Gson gson = new Gson();
        return gson.fromJson(part, Process.class);
	}
	private ConcurrentHashMap<String, Collection<Process>> creatorMap = new ConcurrentHashMap<String, Collection<Process>>(256);
	@SuppressWarnings("unchecked")
	public Collection<Process> queryProcess(String process_creator) {
		if(process_creator == null) {
			return (Collection<Process>) this.getAll();
		} else {
			if(!creatorMap.containsKey(process_creator)) {
				Collection<Process> processes = new ArrayList<Process>();
				for(Process process : (Collection<Process>)this.getAll()) {
					if(process_creator.equals(process.Process

						processes.add(process);
					}
				}
				creatorMap.put(process_creator, processes);
			} 
			return creatorMap.get(process_creator);
		}
	}
	public Process newProcess(String name, String creator) throws Exception {
		Process process = new Process();
		process.ID = newID();
		process.Name = name;
		process.Statues = TypeChange.NEW;
		process.ProcessCreator = creator;
		process.Attributes = new ConcurrentHashMap<String, Object>();
		return process;
	}
	public String saveProcess(Process process) {
		try {
			putPart(process);
			if(creatorMap.containsKey(process.ProcessCreator)) {
				Collection<Process> processes = creatorMap.get(process.ProcessCreator);
				if(! processes.contains(process)) {
					processes.add(process);
				}
			}
			return String.valueOf(process.ID);
		} catch (Exception e) {
			return e.getMessage();
		}
	}
	public String removeProcess(long id) {
		Process process = (Process) getPart(id);
		if(process != null) {
			process.IsDelete = true;
			if(creatorMap.co
/**
 * 권한관리에 대한 Vo 클래스를 정의한다.
 * @author 공통서비스 개발팀 이문준
 * @since 2009.06.01
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  이문준          최초 생성
 *
 * </pre>
 */
public class AuthorManageVO extends AuthorManage {
	private static final long serialVersionUID = 1L;
	List <AuthorManageVO> authorManageList;
	/**
	 * AuthorManage 를 리턴한다.
	 * @return AuthorManage
	 */
	public AuthorManage getAuthorManage()
    {
    	return super.getAuthorManage();
    }
	/**
	 * AuthorManage 값을 설정한다.
	 * @param authorManage AuthorManage
	 */	
    public void setAuthorManage(AuthorManage authorManage)
    {
    	super.setAuthorManage(authorManage);
    }
	/**
	 * authorManageList attribute 를 리턴한다.
	 * @return List<AuthorManageVO>
	 */
	public List<AuthorManageVO> getAuthorManageList() {
		return authorManageList;
	}
	/**
	 * authorManageList attribute 값을 설정한다.
	 * @param aut
/*
   Copyright 2005 Simon Mieth
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
/**
 * @author <a href="mailto:simon.mieth@gmx.de>Simon Mieth</a>
 *
 *
 *
 */
public class ParserBuilder {
    public static Parser createDefaultParser() {
        DXFParser parser = new DXFParser();
        Handler handler;
        handler = new DXFHeaderSectionHandler();
        parser.addHandler(handler);
        HandlerManager handlerManager = new DXFBlocksSectionHandler();
        parser.addHandler(handlerManager);
        Handler h = new DXFLineHandler()

        handlerManager.addHandler(h);
        h = new DXFCircleHandler();
        handlerManager.addHandler(h);
        h = new DXFArcHandler();
        handlerManager.addHandler(h);
        h = new DXFPolylineHandler();
        handlerManager.addHandler(h);
        h = new DXFLWPolylineHandler();
        handlerManager.addHandler(h);
        h = new DXFMTextHandler();
        handlerManager.addHandler(h);
        h = new DXFTextHandler();
        handlerManager.addHandler(h);
        h = new DXFInsertHandler();
        handlerManager.addHandler(h);
        h = new DXFEllipseHandler();
        handlerManager.addHandler(h);
        h = new DXFSolidHandler();
        handlerManager.addHandler(h);
        h = new DXFTraceHandler();
        handlerManager.addHandler(h);
        h = new DXFDimensionHandler();
        handlerManager.addHandler(h);
        h = new DXFHatchHandler();
        handlerManager.addHandler(h);
        h = new DXFImageHandler();
        handlerManager.addHandler(h);

        h = new DXF3DFaceHandler();
        handlerManager.addHandler(h);
        h = new DXFRayHandler();
        handlerManager.addHandler(h);
        h = new DXFXLineHandler();
        handlerManager.addHandler(h);
        h = new DXFRegionHandler();
        handlerManager.addHandler(h);
        h = new DXFBodyHandler();
        handlerManager.addHandler(h);
        h = new DXF3DSolidHandler();
        handlerManager.addHandler(h);
        h = new DXFSplineHandler();
        handlerManager.addHandler(h);
        h = new DXFMLineHandler();
        handlerManager.addHandler(h);
        h = new DXFLeaderHandler();
        handlerManager.addHandler(h);
        h = new DXFToleranceHandler();
        handlerManager.addHandler(h);
        h = new DXFViewportHandler();
        handlerManager.addHandler(h);
        handlerManager = new DXFTableSectionHandler();
        parser.addHandler(handlerManager);
        handler = new DXFLayerTableHandler();
        handlerManager.addHandler(handler)

        handler = new DXFLineTypeTableHandler();
        handlerManager.addHandler(handler);
        handler = new DXFDimensionStyleTableHandler();
        handlerManager.addHandler(handler);
        handler = new DXFStyleTableHandler();
        handlerManager.addHandler(handler);
        handler = new DXFVPortTableHandler();
        handlerManager.addHandler(handler);
        handler = new DXFViewTableHandler();
        handlerManager.addHandler(handler);
        handlerManager = new DXFEntitiesSectionHandler();
        parser.addHandler(handlerManager);
        h = new DXFLineHandler();
        handlerManager.addHandler(h);
        h = new DXFCircleHandler();
        handlerManager.addHandler(h);
        h = new DXFArcHandler();
        handlerManager.addHandler(h);
        h = new DXFPolylineHandler();
        handlerManager.addHandler(h);
        h = new DXFLWPolylineHandler();
        handlerManager.addHandler(h);
        h = new DXFMTextHandler();
        handlerManager.addHandl

        h = new DXFTextHandler();
        handlerManager.addHandler(h);
        h = new DXFInsertHandler();
        handlerManager.addHandler(h);
        h = new DXFEllipseHandler();
        handlerManager.addHandler(h);
        h = new DXFSolidHandler();
        handlerManager.addHandler(h);
        h = new DXFTraceHandler();
        handlerManager.addHandler(h);
        h = new DXFDimensionHandler();
        handlerManager.addHandler(h);
        h = new DXFHatchHandler();
        handlerManager.addHandler(h);
        h = new DXFImageHandler();
        handlerManager.addHandler(h);
        h = new DXF3DFaceHandler();
        handlerManager.addHandler(h);
        h = new DXFRayHandler();
        handlerManager.addHandler(h);
        h = new DXFXLineHandler();
        handlerManager.addHandler(h);
        h = new DXFRegionHandler();
        handlerManager.addHandler(h);
        h = new DXFBodyHandler();
        handlerManager.addHandler(h);
        h = new DXF3DSolidHandler();
        

        h = new DXFSplineHandler();
        handlerManager.addHandler(h);
        h = new DXFMLineHandler();
        handlerManager.addHandler(h);
        h = new DXFLeaderHandler();
        handlerManager.addHandler(h);
        h = new DXFToleranceHandler();
        handlerManager.addHandler(h);
        h = new DXFViewportHandler();
        handlerManager.addHandler(h);
        handlerManager = new DXFObjectsSectionHandler();
        h = new DXFImageDefHandler();
        handlerManager.addHandler(h);
        h = new DXFDictionaryHandler();
        handlerManager.addHandler(h);
        h = new DXFPlotsettingsHandler();
        handlerManager.addHandler(h);
        h = new DXFLayoutHandler();
        handlerManager.addHandler(h);
        h = new DXFMLineStyleHandler();
        handlerManager.addHandler(h);
        parser.addHandler(handlerManager);
        return parser;
    }
    /**
     * @see org.kabeja.parser.SAXParserBuilder the SAXParserBuilder for XML
     *      description
  
/**
 * 개요
 * - 장애처리결과 관리정보에 대한 ServiceImpl 클래스를 정의한다.
 * 
 * 상세내용
 * - 장애처리결과 관리정보에 대한 등록, 수정, 삭제, 조회 등의 기능을 제공한다.
 * - 장애처리결과 관리정보의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author lee.m.j
 * @version 1.0
 * @created 28-6-2010 오전 10:44:35
 */
@Service("egovTroblProcessService")
public class EgovTroblProcessServiceImpl extends AbstractServiceImpl implements EgovTroblProcessService {
	@Resource(name="troblProcessDAO")
	private TroblProcessDAO troblProcessDAO;
	/**
	 * 장애처리정보를 관리하기 위해 대상 장애처리목록을 조회한다.
	 * @param troblProcessVO - 장애처리결과 Vo
	 * @return List - 장애처리결과 목록
	 */
	public List<TroblProcessVO> selectTroblProcessList(TroblProcessVO troblProcessVO) throws Exception {
		return troblProcessDAO.selectTroblProcessList(troblProcessVO);
	}
	/**
	 * 장애처리목록 총 갯수를 조회한다.
	 * @param troblProcessVO - 장애처리결과 Vo
	 * @return int - 장애처리결과 카운트 수
	 */
	public int selectTroblProcessListTotCnt(TroblProcessVO troblProcessVO) throws Exception {
		return troblProcessDAO.selectTroblProcessListTotCnt(troblProcessVO);
	}

/**
 * 권한별 롤관리에 대한 ServiceImpl 클래스를 정의한다.
 */
@Service("whoyaEgovAuthorRoleManageService")
public class WhoyaEgovAuthorRoleManageServiceImpl implements WhoyaEgovAuthorRoleManageService {
	@Resource(name="egovAuthorRoleManageService")
	EgovAuthorRoleManageService egovAuthorRoleManageService;
	/**
	 * 권한 롤 관계정보 목록 조회
	 * @param authorRoleManageVO AuthorRoleManageVO
	 * @return List<AuthorRoleManageVO>
	 * @exception Exception
	 */
	public List<AuthorRoleManageVO> selectAuthorRoleList(AuthorRoleManageVO authorRoleManageVO) throws Exception {
		return egovAuthorRoleManageService.selectAuthorRoleList(authorRoleManageVO);
	}
	/**
	 * 권한 롤 관계정보를 화면에서 입력하여 입력항목의 정합성을 체크하고 데이터베이스에 저장
	 * @param request
	 * @param response
	 * @exception Exception
	 */
	public void saveAuthorRole(HttpServletRequest request, HttpServletResponse response) throws Exception {
		String[] ids = request.getParameter("ids").split(",");
		
	    whoyaDataProcess  data = new whoyaDataProcess();
	    whoyaMap rows = new who
/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
/**
 * <p>
 * This class is a wrapper for {@link ServicePackageEntryService}.
 * </p>
 *
 * @author    loind
 * @see       ServicePackageEntryService
 * @generated
 */
public class ServicePackageEntryServiceWrapper
	implements ServicePackageEntryService,
		ServiceWrapper<ServicePackageEntryService> {
	public ServicePackageEntryServiceWrapper(
		ServicePackageEntryService servicePackageEntryService) {
		_serv
public class RepositoryDTO {
	private Integer repository_id;
	private String repository_name;
	private String repository_protocol;
	private String repository_server;
	private String repository_port;
	private String repository_user;
	private String repository_password;
	@Override
	public String toString() {
		return ReflectionToStringBuilder.reflectionToString(this, ToStringStyle.MULTI_LINE_STYLE);
	}
	/**
	 * @return the repository_id
	 */
	public Integer getRepository_id() {
		return repository_id;
	}
	/**
	 * @param repository_id the repository_id to set
	 */
	public void setRepository_id(Integer repository_id) {
		this.repository_id = repository_id;
	}
	/**
	 * @return the repository_name
	 */
	public String getRepository_name() {
		return repository_name;
	}
	/**
	 * @param repository_name the repository_name to set
	 */
	public void setRepository_name(String repository_name) {
		this.repository_name = repository_name;
	}
	/**
	 * @return the repository_protocol
	 */
	public String

		return repository_protocol;
	}
	/**
	 * @param repository_protocol the repository_protocol to set
	 */
	public void setRepository_protocol(String repository_protocol) {
		this.repository_protocol = repository_protocol;
	}
	/**
	 * @return the repository_server
	 */
	public String getRepository_server() {
		return repository_server;
	}
	/**
	 * @param repository_server the repository_server to set
	 */
	public void setRepository_server(String repository_server) {
		this.repository_server = repository_server;
	}
	/**
	 * @return the repository_port
	 */
	public String getRepository_port() {
		return repository_port;
	}
	/**
	 * @param repository_port the repository_port to set
	 */
	public void setRepository_port(String repository_port) {
		this.repository_port = repository_port;
	}
	/**
	 * @return the repository_user
	 */
	public String getRepository_user() {
		return repository_user;
	}
	/**
	 * @param repository_user the repository_user to set
	 */
	public void setRepository_user(
public class ManyContexts {
    public static void main(String[] args) throws Exception {
        Server server = new Server(8085);
        
        ContextHandler context = new ContextHandler("/");
        context.setContextPath("/");
        
        context.setHandler(new HandlerGUI("Root Hello"));
        
        ContextHandler contextFR = new ContextHandler("/fr");
        contextFR.setHandler(new HandlerGUI("Bonjoir"));
        
        ContextHandler contextIT = new ContextHandler("/it");
        contextIT.setHandler(new HandlerGUI("Bongiorno"));
        
        ContextHandler contextV = new ContextHandler("/");
        contextV.setVirtualHosts(new String[] { "127.0.0.2" });
        contextV.setHandler(new HandlerGUI("Virtual Hello"));
        
        ContextHandlerCollection contexts = new ContextHandlerCollection();
        
        contexts.setHandlers(new Handler[] { context, contextFR, contextIT, contextV });
        
        server.setHandler(contexts);
        server.s
/**
 * Created by indenml on 21.06.15.
 */
public class ShortestRemainingTime extends SchedulingAlgorithm{
    public ShortestRemainingTime(List<Process> inputProcesses){
        super(inputProcesses);
    }
    public  Schedule generateProcessSchedule() {
        while(!processes.isEmpty()){
            if(currentlyRunningProcess != null){
                if(currentlyRunningProcess.getProcessingTime() == ct-startTimeCuRuPr){
                    schedule.add(new ScheduleItem(currentlyRunningProcess.getProcessID(), startTimeCuRuPr, ct, true));
                    processes.remove(currentlyRunningProcess);
                    currentlyRunningProcess = null;
                    startTimeCuRuPr = null;
                }
            }
            if(currentlyRunningProcess != null){
                if(currentlyRunningProcess.isBlocked(ct)){
                    schedule.add(new ScheduleItem(currentlyRunningProcess.getProcessID(), startTimeCuRuPr, ct, false));
                    currentlyRun

                    currentlyRunningProcess = null;
                    startTimeCuRuPr = null;
                }
            }
            fillProcessQue();
            if (processQueue.isEmpty()){
                ct++;
                continue;
            }
            Process favouriteProcess = getProcessSmallestProcessingTime();
            if(currentlyRunningProcess != null) {
                if (currentlyRunningProcess.equals(favouriteProcess)) {
                    ct++;
                    continue;
                }
                if (currentlyRunningProcess.getProcessingTime() - (ct - startTimeCuRuPr) <= favouriteProcess.getProcessingTime()) {
                    ct++;
                    continue;
                }
                if (currentlyRunningProcess.getProcessingTime() - (ct - startTimeCuRuPr) > favouriteProcess.getProcessingTime()) {
                    Integer remainingTime = currentlyRunningProcess.getProcessingTime() - (ct-startTimeCuRuPr);
                  
public class HandlerFactory {
	public static IHandler createHandlerById(Constant id, MyFrame frame) {
		IHandler handler = null;
		switch (id) {
		case ARITHMATIC_MEAN:
			handler = new ArithmaticMeanHandler(frame);
			break;
		case OPEN:
			handler = new OpenHandler(frame);
			break;
		case SAVE:
			handler = new SaveHandler(frame);
			break;
		case HARMONIC_MEAN:
			handler = new HarmonicMeanHandler(frame);
			break;
		case CONTRAHARMONIC_MEAN:
			handler = new ContraHarmonicMeanHandler(frame);
			break;
		case DFT:
			break;
		case IDFT:
			break;
		case SPECTRUM:
			break;
		case FFT:
			break;
		case IFFT:
			break;
		case ADD_GAUSSIAN_NOISE:
			handler = new AddGaussianNoiseHandler(frame);
			break;
		case ADD_IMPLUSE_NOISE:
			handler = new AddImpluseHandler(frame);
			break;
		case GEOMETRIC_MEAN:
			handler = new GeometricMeanHandler(frame);
			break;
		case MIN_MEAN:
			handler = new MinHandler(frame);
			break;
		case MAX_MEAN:
			handler = new MaxHandler(frame);
			break;
	
/**
 * 설문관리를 처리하는 Dao Class 구현
 * @author 공통서비스 장동한
 * @since 2009.03.20
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.03.20  장동한          최초 생성
 *
 * </pre>
 */
@Repository("qustnrManageDao")
public class QustnrManageDao extends EgovComAbstractDAO {
    /**
	 * 설문템플릿 목록을 조회한다.
	 * @param qustnrManageVO - 설문관리 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
	public List<?> selectQustnrTmplatManageList(QustnrManageVO qustnrManageVO) throws Exception{
		return list("QustnrManage.selectQustnrTmplatManage", qustnrManageVO);
	}
    /**
	 * 설문관리 목록을 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	public List<?> selectQustnrManageList(ComDefaultVO searchVO) throws Exception{
		return list("QustnrManage.selectQustnrManage", searchVO);
	}
    /**
	 * 설문관리를 상세조회(Model) 한다.
	 * @param qustnrManageVO - 설문관리 정보 담김 VO
	 * @retu

	 * @throws Exception
	 */
    public QustnrManageVO selectQustnrManageDetailModel(QustnrManageVO qustnrManageVO) throws Exception {
        return (QustnrManageVO) select("QustnrManage.selectQustnrManageDetailModel", qustnrManageVO);
    }
    /**
	 * 설문관리를(을) 상세조회 한다.
	 * @param qustnrManageVO - 설문관리 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
	public List<?> selectQustnrManageDetail(QustnrManageVO qustnrManageVO) throws Exception{
		return list("QustnrManage.selectQustnrManageDetail", qustnrManageVO);
	}
    /**
	 * 설문관리를(을) 목록 전체 건수를(을) 조회한다.
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return int
	 * @throws Exception
	 */
	public int selectQustnrManageListCnt(ComDefaultVO searchVO) throws Exception{
		return (Integer)select("QustnrManage.selectQustnrManageCnt", searchVO);
	}
    /**
	 * 설문관리를(을) 등록한다.
	 * @param qqustnrManageVO - 설문관리 정보 담김 VO
	 * @throws Exception
	 */
	public void insertQustnrManage(QustnrManageVO qustnrManageVO) throws Exception{
		insert("QustnrManage.i
/**
 * Created by YinLin on 2015/8/12.
 * Description :
 * Version 1.0
 */
@Service
@Transactional
public class ManageUserServiceImpl implements ManageUserService {
	private static final Logger log = LoggerFactory.getLogger(ManageUserServiceImpl.class);
	@Autowired
	private ManageUserRepository manageUserRepository;
	@Autowired
	private PasswordHelper passwordHelper;
	@Override
	public ManageUser findByUsername(String username) throws ManageUserServiceException {
		List<ManageUser> manageUsers = manageUserRepository.findByUsername(username);
		return manageUsers != null && manageUsers.size() > 0 ? manageUsers.get(0) : null;
	}
	@Override
	public ManageUser findOne(Integer id) {
		return manageUserRepository.findOne(id);
	}
	@Override
	public void saveManageUser(ManageUser manageUser) throws ManageUserServiceException{
		passwordHelper.encryptPassword(manageUser);
		manageUserRepository.save(manageUser);
	}
	@Override
	public void update(ManageUser manageUser) throws ManageUserServiceEx
public class ProcessBuildContext extends PackageBuildContext {
    private Process      process;
    private ProcessDescr processDescr;
    private DialectCompiletimeRegistry dialectRegistry;
    public ProcessBuildContext(final PackageBuilder pkgBuilder,
                               final Package pkg,
                               final Process process,
                               final BaseDescr processDescr,
                               final DialectCompiletimeRegistry dialectRegistry,
                               final Dialect defaultDialect) {
        this.process = process;
        this.processDescr = (ProcessDescr) processDescr;
        this.dialectRegistry = dialectRegistry;
        init( pkgBuilder,
              pkg,
              processDescr,
              dialectRegistry,
              defaultDialect,
              null );
    }
    public ProcessDescr getProcessDescr() {
        return processDescr;
    }
    public void setProcessDescr(ProcessDescr processDescr
#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
/**
 * 已结束的流程实例料别
 * @author yyang
 *
 */
public class FinishedProcessesAction extends BaseProcessAction {
	private static final long serialVersionUID = 2644668803370797254L;
	public List<HistoricProcessInstance> getProcessInstances() {
		return historyService.createHistoricProcessInstanceQuery().finished().list();
	}
	public String getInitiator(HistoricProcessInstance processInstance) {
		return (String) getProcessVariable(processInstance, ProcessConstants.INITIATOR);
	}
	public String getTitle(HistoricProcessInstance processInstance) {
		return (String) getProcessVariable(processInstance, ProcessConstants.TITLE);
	}
	public boolean isPassed(HistoricProcessInstance processInstance) {
		return (Boolean) getProcessVariable(processInstance, ProcessConstants.PASSED);
	}
	public String getProcessKey(HistoricProcessInstance processInstance) {
		String processDefinitionId = processInstance.getProcessDefinit
public class TestFoodProcessAction {
	ApplicationContext ctx = null;
	@Before
	public void init() {
		ctx = new ClassPathXmlApplicationContext("classpath*:/applicationContext.xml");
	}
	@Test
	public void testAddFoodProcess() {
		FoodProcessAction foodProcessAction = (FoodProcessAction) ctx.getBean("foodProcessAction");
		FoodProcess foodProcess = new FoodProcess();
		foodProcess.setPid(1);
		foodProcess.setFavourite(4);
		foodProcess.setFood_id(1);
		foodProcess.setOrder_id(1);
		foodProcess.setProcessStatus(3);
		foodProcess.setRemark("一般般");
		
		foodProcessAction.setFoodProcess(foodProcess);
		
		
		String result  = foodProcessAction.addFoodProcess();
		System.out.println("result:" + result);
	}
	@Test
	public void testFindFoodProcess() {
		FoodProcessAction foodProcessAction = (FoodProcessAction) ctx.getBean("foodProcessAction");
		FoodProcess foodProcess = new FoodProcess();
		foodProcess.setPid(1);
		
		foodProcessAction.setFoodProcess(foodProcess);
		
		
		String result  = food
/**
 * 责任链模式(Chain of Responsibility)
 * 接下来我们将要谈谈责任链模式，有多个对象，每个对象持有对下一个对象的引用，这样就会形成一条链，
 * 请求在这条链上传递，直到某一对象决定处理该请求。
 * 但是发出者并不清楚到底最终那个对象会处理该请求，所以，责任链模式可以实现，
 * 在隐瞒客户端的情况下，对系统进行动态的调整
 * 
 * 此处强调一点就是，链接上的请求可以是一条链，可以是一个树，还可以是一个环，模式本身不约束这个，
 * 需要我们自己去实现，同时，在一个时刻，命令只允许由一个对象传给另一个对象，而不允许传给多个对象
 * @author 422575
 *
 */
public class 责任链模式 {
	public static void main(String[] args) {
		MyHandler h1 = new MyHandler("h1");  
        MyHandler h2 = new MyHandler("h2");  
        MyHandler h3 = new MyHandler("h3");  
  
        h1.setHandler(h2);  
        h2.setHandler(h3);  
  
        h1.operator();
	}
interface Handler {
	public void operator();
abstract class AbstractHandler {
	private Handler handler;
	public Handler getHandler() {
		return handler;
	}
	public void setHandler(Handler handler) {
		this.handler = handler;
	}
class MyHandler extends AbstractHandler implements Handler {
	private String name;
	public MyHandler(String name) {
		this.name = name;
	}
	@Override
	public void operator()
/**
 * 개요
 * - PROCESS모니터링에 대한 ServiceImpl 클래스를 정의한다.
 *
 * 상세내용
 * - PROCESS모니터링에 대한 등록, 수정, 삭제, 조회 기능을 제공한다.
 * - PROCESS모니터링의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 박종선
 * @version 1.0
 * @created 08-9-2010 오후 3:54:46
 */
@Service("EgovProcessMonService")
public class EgovProcessMonServiceImpl extends EgovAbstractServiceImpl implements EgovProcessMonService {
	@Resource(name = "ProcessMonDAO")
	private ProcessMonDAO processMonDAO;
	@Resource(name="egovProcessMonIdGnrService")
	private EgovIdGnrService idgenServiceProcessMon;
	@Resource(name="egovProcessMonLogIdGnrService")
	private EgovIdGnrService idgenServiceProcessMonLog;
	/**
	 * 등록된 PROCESS모니터링 목록을 조회한다.
	 * @param processMonVO - PROCESS모니터링 Vo
	 * @return List - PROCESS모니터링 목록
	 *
	 * @param processMonVO
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public List selectProcessMonList(ProcessMonVO processMonVO) throws Exception {
        return processMonDAO.selectProcessMonList(processMonVO);
	}
	/**
	 * PROCESS모니

	 * @param processMonVO - PROCESS모니터링 Vo
	 * @return int - PROCESS모니터링 토탈 카운트 수
	 *
	 * @param processMonVO
	 */
	@Override
	public int selectProcessMonTotCnt(ProcessMonVO processMonVO) throws Exception {
        return processMonDAO.selectProcessMonTotCnt(processMonVO);
	}
	/**
	 * 등록된 PROCESS모니터링의 상세정보를 조회한다.
	 * @param processMonVO - PROCESS모니터링 Vo
	 * @return processMonVO - PROCESS모니터링 Vo
	 *
	 * @param processMonVO
	 */
	@Override
	public ProcessMonVO selectProcessMon(ProcessMonVO processMonVO) throws Exception {
		return processMonDAO.selectProcessMon(processMonVO);
	}
	/**
	 * PROCESS모니터링 정보를 신규로 등록한다.
	 * @param processNm - PROCESS모니터링 model
	 *
	 * @param processNm
	 */
	@Override
	public void insertProcessMon(ProcessMon processMon) throws Exception {
		processMon.setProcessId(idgenServiceProcessMon.getNextStringId());
		processMonDAO.insertProcessMon(processMon);
	}
	/**
	 * 기 등록된 PROCESS모니터링 정보를 수정한다.
	 * @param processNm - PROCESS모니터링 model
	 *
	 * @param processNm
	 */
	@

	public void updateProcessMon(ProcessMon processMon) throws Exception {
		processMonDAO.updateProcessMon(processMon);
	}
	/**
	 * 기 등록된 PROCESS모니터링 정보를 삭제한다.
	 * @param processNm - PROCESS모니터링 model
	 *
	 * @param processNm
	 */
	@Override
	public void deleteProcessMon(ProcessMon processMon) throws Exception {
		processMonDAO.deleteProcessMon(processMon);
	}
	/**
	 * 프로세스 모니터링로그 목록을 조회한다.
	 * @param ProcessMonVO - 프로세스모니터링로그 VO
	 * @return  List<ProcessMonVO> - 프로세스모니터링로그 List
	 *
	 * @param processMonLogVO
	 */
	@Override
	public Map<String, Object> selectProcessMonLogList(ProcessMonLogVO processMonLogVO) throws Exception {
		List<ProcessMonLogVO> result = processMonDAO.selectProcessMonLogList(processMonLogVO);
		int cnt = processMonDAO.selectProcessMonLogTotCnt(processMonLogVO);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("resultList", result);
		map.put("resultCnt", Integer.toString(cnt));
		return map;
	}
	/**
	 * 프로세스 모니터링로그의 상세정보를 조회한다.
	 * @param Proces

	 * @return  ProcessMonVO - 프로세스모니터링로그 model
	 *
	 * @param processMonLogVO
	 */
	@Override
	public ProcessMonLogVO selectProcessMonLog(ProcessMonLogVO processMonLogVO) throws Exception {
		return processMonDAO.selectProcessMonLog(processMonLogVO);
	}
	/**
	 * 프로세스 모니터링로그를 등록한다.
	 * @param processMonLog - 프로세스 모니터링로그 model
	 *
	 * @param processMonLog
	 */
	@Override
	public void insertProcessMonLog(ProcessMonLog processMonLog) throws Exception{
		processMonDAO.insertProcessMonLog(processMonLog);
	}
	/**
	 * 프로세스 모니터링 결과를 수정한다.
	 * @param processMonLog - 프로세스 모니터링대상 model
	 *
	 * @param processMonLog
	 */
	@Override
	public void updateProcessMonSttus(ProcessMon processMon) throws Exception{
		processMonDAO.updateProcessMonSttus(processMon);
		ProcessMonLog processMonLog = new ProcessMonLog();
		processMonLog.setProcessId(processMon.getProcessId());
		processMonLog.setLogId(idgenServiceProcessMonLog.getNextStringId());
		processMonLog.setProcessNm(processMon.getProcessNm());
		processM
public class IfcCommonHandler
    private IfcGuidHandler guidHandler;
    private GeometryHandler geometryHandler;
    private OwnerHistoryHandler ownerHistoryHandler;
    private PropertySetHandler propertySetHandler;
    private ClassificationHandler classificationHandler;
    private OidProvider<Long> oidHandler;
    private COBieIfcModel model;
    public IfcCommonHandler(COBieIfcModel cobieIfcmodel, OidProvider<Long> oidProvider) throws IfcModelInterfaceException
    {
        oidHandler = oidProvider;
        model = cobieIfcmodel;
        ownerHistoryHandler = new OwnerHistoryHandler(model, oidProvider);
        guidHandler = new IfcGuidHandler(model, oidProvider);
        classificationHandler = new ClassificationHandler(model, guidHandler, oidProvider, ownerHistoryHandler);
        propertySetHandler = new PropertySetHandler(model, oidProvider, guidHandler, ownerHistoryHandler);
        setGeometryHandler(new GeometryHandler(oidProvider, cobieIfcmodel, guidHandler));
    }
   
public interface HasVideoHandlers
    HandlerRegistration addAbortHandler(VideoAbortHandler abortHandler);
    HandlerRegistration addCanPlayHandler(VideoCanPlayHandler canPlayHandler);
    HandlerRegistration addCanPlayThroughHandler(VideoCanPlayThroughHandler canPlayThroughHandler);
    HandlerRegistration addDurationChangeHandler(VideoDurationChangeHandler durationChangeHandler);
    HandlerRegistration addEmptyHandler(VideoEmptyHandler emptyHandler);
    HandlerRegistration addEndedHandler(VideoEndedHandler endedHandler);
    HandlerRegistration addErrorHandler(VideoErrorHandler errorHandler);
    HandlerRegistration addLoadDataHandler(VideoLoadDataHandler loadDataHandler);
    HandlerRegistration addLoadMetadataHandler(VideoLoadMetadataHandler loadMetadataHandler);
    HandlerRegistration addLoadStartHandler(VideoLoadStartHandler loadStartHandler);
    HandlerRegistration addPauseHanlder(VideoPauseHandler pauseHandler);
    HandlerRegistration addPlayHandler(VideoPlayHandler playH
/**
 * 개요
 * - 포상관리에 대한 ServiceImpl 클래스를 정의한다.
 * 
 * 상세내용
 * - 포상관리에 대한 등록, 수정, 삭제, 조회, 승인처리 기능을 제공한다.
 * - 포상관리의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 이용
 * @version 1.0
 * @created 06-15-2010 오후 2:08:56
 */
@Service("egovRwardManageService")
public class EgovRwardManageServiceImpl extends EgovAbstractServiceImpl implements EgovRwardManageService {
	@Resource(name="rwardManageDAO")
    private RwardManageDAO rwardManageDAO;
    /** ID Generation */  
	@Resource(name="egovRwardManageIdGnrService")
	private EgovIdGnrService idgenRwardManageService;
	@Resource(name="EgovInfrmlSanctnService")
    protected EgovInfrmlSanctnService infrmlSanctnService;
	/**
	 * 포상관리정보를 관리하기 위해 등록된 포상관리 목록을 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return List - 포상관리 목록
	 */
	public List<RwardManageVO> selectRwardManageList(RwardManageVO rwardManageVO) throws Exception{
		rwardManageVO.setSearchFromDate(EgovStringUtil.removeMinusChar(rwardManageVO.getSearchFromDate()));
		rwardManageVO.setSearchToDate(Egov

		List<RwardManageVO> result = rwardManageDAO.selectRwardManageList(rwardManageVO);
		
		int num = result.size();
	    for (int i = 0 ; i < num ; i ++ ){
	    	RwardManageVO rwardManageVO1 = result.get(i);
	    	rwardManageVO1.setRwardDe(EgovDateUtil.formatDate(rwardManageVO1.getRwardDe(), "-"));
	    	result.set(i, rwardManageVO1);
	    }	
		return result;
	}
	/**
	 * 포상관리목록 총 갯수를 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return int - 포상관리 카운트 수
	 */
	public int selectRwardManageListTotCnt(RwardManageVO rwardManageVO) throws Exception {
		return rwardManageDAO.selectRwardManageListTotCnt(rwardManageVO);
	}
	/**
	 * 등록된 포상관리의 상세정보를 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return RwardManageVO - 포상관리 VO
	 */
	public RwardManageVO selectRwardManage(RwardManageVO rwardManageVO) throws Exception {
		RwardManageVO rwardManageVOTemp = rwardManageDAO.selectRwardManage(rwardManageVO);
		rwardManageVOTemp.setRwardDe(EgovDateUtil.formatDate(rwardManageVOTemp.getRwardDe(), "-"));		
		
	

	}
	/**
	 * 포상관리정보를 신규로 등록한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void insertRwardManage(RwardManage rwardManage) throws Exception {
		/*
		 * 포상 승인처리  신청 infrmlSanctnService.insertInfrmlSanctn("000", vcatnManage);
		 */
		rwardManage.setRwardDe(EgovStringUtil.removeMinusChar(rwardManage.getRwardDe()));
		rwardManage.setInfrmlSanctnId(infrmlSanctn.getInfrmlSanctnId());
		rwardManage.setConfmAt(infrmlSanctn.getConfmAt());
		String	sRwardId = idgenRwardManageService.getNextStringId();
		rwardManage.setRwardId(sRwardId);
		
		rwardManageDAO.insertRwardManage(rwardManage);
	}
	/**
	 * 기 등록된 포상관리정보를 수정한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void updtRwardManage(RwardManage rwardManage) throws Exception {
		rwardManage.setRwardDe(EgovStringUtil.removeMinusChar(rwardManage.getRwardDe()));
		rwardManageDAO.updtRwardManage(rwardManage);
	}
	/**
	 * 기 등록된 포상관리정보를 삭제한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void deleteRwardManage(RwardManage rwardManage) thro

		/*
		 * 포상 승인처리  삭제 infrmlSanctnService.deleteInfrmlSanctn("000", vcatnManage);
		 */
		rwardManage.setRwardDe(EgovStringUtil.removeMinusChar(rwardManage.getRwardDe()));
		rwardManageDAO.deleteRwardManage(rwardManage);
	}
	/**
	 * 포상관리정보 승인 처리를 위해 신청된 포상관리 목록을 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return List - 포상관리 목록
	 */
	public List<RwardManageVO> selectRwardManageConfmList(RwardManageVO rwardManageVO) throws Exception{
		rwardManageVO.setSearchFromDate(EgovStringUtil.removeMinusChar(rwardManageVO.getSearchFromDate()));
		rwardManageVO.setSearchToDate(EgovStringUtil.removeMinusChar(rwardManageVO.getSearchToDate()));
		List<RwardManageVO> result = rwardManageDAO.selectRwardManageConfmList(rwardManageVO);
		int num = result.size();
	    for (int i = 0 ; i < num ; i ++ ){
	    	RwardManageVO rwardManageVO1 = result.get(i);
	    	rwardManageVO1.setRwardDe(EgovDateUtil.formatDate(rwardManageVO1.getRwardDe(), "-"));
	    	result.set(i, rwardManageVO1);
	    }	
		return result;

	}
	/**
	 * 포상승인목록 총 갯수를 조회한다.
	 * @param rwardManageVO - 포상관리 VO
	 * @return int - 포상관리 카운트 수
	 */
	public int selectRwardManageConfmListTotCnt(RwardManageVO rwardManageVO) throws Exception {
		return rwardManageDAO.selectRwardManageConfmListTotCnt(rwardManageVO);
	}
	/**
	 * 포상정보를 승인/반려처리 한다.
	 * @param rwardManage - 포상관리 model
	 */
	public void updtRwardManageConfm(RwardManage rwardManage) throws Exception {
		 InfrmlSanctn infrmlSanctn = new InfrmlSanctn();
		 rwardManage.setRwardDe(EgovStringUtil.removeMinusChar(rwardManage.getRwardDe()));
		 if(rwardManage.getConfmAt().equals("C")){
			/*
			 * 승인처리
			 */
		 }else if(rwardManage.getConfmAt().equals("R")){
			/*
			 * 반려처리
			 */
		 }
		 rwardManage.setSanctnDt(infrmlSanctn.getSanctnDt());
		 rwardManage.setConfmAt(infrmlSanctn.getConfmAt());
		 rwardManageDAO.updtRwardManageConfm(rwardManage);
	}
	/**
	 * RwardManage model을 InfrmlSanctn model로 변환한다.
	 * @param RwardManage
	 * @return InfrmlSanctn
	 * @param rwardManage
	 */
	pr
/*
 * Created by peter.lawrey@chronicle.software on 31/07/2017
 */
public class ThreadLocalisedExceptionHandler implements ExceptionHandler {
    private ExceptionHandler defaultHandler;
    private ThreadLocal<ExceptionHandler> handlerTL;
    public ThreadLocalisedExceptionHandler(Slf4jExceptionHandler handler) {
        defaultHandler = handler;
        resetThreadLocalHandler();
    }
    @Override
    public void on(Class clazz, String message, Throwable thrown) {
        ExceptionHandler exceptionHandler = handlerTL.get();
        if (exceptionHandler == null)
            exceptionHandler = defaultHandler;
        if (exceptionHandler == null)
            return;
        exceptionHandler.on(clazz, message, thrown);
    }
    public ExceptionHandler defaultHandler() {
        return defaultHandler;
    }
    public ThreadLocalisedExceptionHandler defaultHandler(ExceptionHandler defaultHandler) {
        this.defaultHandler = defaultHandler == null ? NullExceptionHandler.NOTHING : d
@RunWith(SpringJUnit4ClassRunner.class)
@TransactionConfiguration(transactionManager = "transactionManager", defaultRollback = true)
@Transactional
@ContextConfiguration(value = {"classpath:spring/config/applicationContext-all-wf.xml"})
public class WorkflowProcessDaoImplTest {
	@Resource(name = "workflowProcessDao")
	private WorkflowProcessDao workflowProcessDao;
	final String innerProcessId = "123abc";
	@Test
	public void testInsert(){
		WorkflowProcess process = new WorkflowProcess();
		process.setInnerProcessId(innerProcessId);
		process.setAcceptTimeStamp(new Timestamp(new Date().getTime()));
		process.setInitUserName("Jack");
		process.setOuterSequenceId("234asfsfdas");
		process.setProcessDetail("some desc here, a new incoming process.");
		process.setProcessModelKey("Review-company-request-pos");
		process.setSourceSystem("myApp");
		process.setStatus(ProcessStatusEnum.NEW.name());
		
		workflowProcessDao.saveProcess(process);
		
		System.out.println("testInsert success process
/**
 * Created by Semyon on 29.09.2015.
 */
public class ServiceConnector<T extends Service> implements ServiceConnection {
    private T service;
    private ServiceListener<T> listener;
    public ServiceConnector(final ServiceListener<T> listener) {
        this.listener = listener;
    }
    @Override
    public void onServiceConnected(final ComponentName name, final IBinder service) {
        this.service = ((ServiceBinder<T>) service).getService();
        listener.onServiceConnected(this.service);
    }
    @Override
    public void onServiceDisconnected(final ComponentName name) {
        listener.onServiceDisconnected(this.service);
    }
    public static class ServiceBinder<T extends Service> extends Binder {
        private T service;
        public ServiceBinder(final T service) {
            this.service = service;
        }
        public T getService() {
            return service;
        }
    }
    public interface ServiceListener<T extends Service> {
        void on
/*
 * Copyright (c) 2009-2014. 上海诺诺镑客 All rights reserved.
 * @(#) DictCmdContext.java 2014-10-27 16:41
 */
/**
 * {@code Dict} 字典数据上下文对象。
 *
 * @author fuchun
 * @version $Id$
 * @since 2.0
 */
public final class DictCmdContext {
    private static final DictCmdContext CONTEXT = new DictCmdContext();
    public static DictCmdContext getContext() {
        return CONTEXT;
    }
    public static BankRepository bankRepository() {
        return CONTEXT.bankRepository;
    }
    public static CommonDictRepository commonDictRepository() {
        return CONTEXT.commonDictRepository;
    }
    public static CollegeRepository collegeRepository() {
        return CONTEXT.collegeRepository;
    }
    public static LocationRepository locationRepository() {
        return CONTEXT.locationRepository;
    }
    private CommonDictRepository commonDictRepository;
    private CollegeRepository collegeRepository;
    private LocationRepository locationRepository;
    private BankRepository bankReposi
/* This is free and unencumbered software released into the public domain. */
/**
 * A manager for repositories hosted on Dydra.
 *
 * This repository manager allows access to Dydra repositories similar to
 * how local repositories are accessed using the {@link
 * org.openrdf.repository.manager.LocalRepositoryManager} class.
 */
public class DydraRepositoryManager extends RemoteRepositoryManager {
  public static final String SERVER_BASE_URL_PROPERTY = "com.dydra.sesame.url";
  protected final String accountName;
  protected boolean isAuthenticated;
  public DydraRepositoryManager(@NotNull final String accountName) {
    this(accountName, System.getProperty(SERVER_BASE_URL_PROPERTY, SERVER_BASE_URL));
  }
  public DydraRepositoryManager(@NotNull final String accountName,
                                @NotNull final Properties properties) {
    this(accountName, properties.getProperty(SERVER_BASE_URL_PROPERTY, SERVER_BASE_URL));
  }
  public DydraRepositoryManager(@NotNull final Strin

                                @NotNull final String serverBaseURL) {
    super((serverBaseURL.endsWith("/") ? serverBaseURL : serverBaseURL + "/") +
      accountName + "/");
    this.accountName = accountName;
  }
  public boolean isAuthenticated() {
    return this.isAuthenticated;
  }
  public void setPassword(@Nullable final String password) {
    this.setUsernameAndPassword(this.accountName, password);
  }
  @Override
  public void setUsernameAndPassword(@Nullable final String userName,
                                     @Nullable final String password) {
    this.isAuthenticated = (password != null);
    if (this.isAuthenticated) {
      super.setUsernameAndPassword(userName, password);
    }
    else {
      super.setUsernameAndPassword(null, null);
    }
  }
  @Override @NotNull
  public Set<String> getRepositoryIDs()
      throws RepositoryException {
    final Collection<RepositoryInfo> infos = this.getAllRepositoryInfos(false);
    final Set<String> result = new LinkedH

    for (final RepositoryInfo info : infos) {
      result.add(info.getId());
    }
    return result;
  }
  @Override
  public boolean hasRepositoryConfig(@NotNull final String repositoryID)
      throws RepositoryException, RepositoryConfigException {
    return this.getRepositoryIDs().contains(repositoryID);
  }
  @Override @Nullable
  public RepositoryConfig getRepositoryConfig(@NotNull final String repositoryID)
      throws RepositoryException, RepositoryConfigException {
    final RepositoryInfo repositoryInfo = this.getRepositoryInfo(repositoryID);
    return (repositoryInfo == null) ? null :
      new RepositoryConfig(repositoryID, repositoryInfo.getDescription());
  }
  @Override @Nullable
  protected Repository createSystemRepository()
      throws RepositoryException {
    DydraRepository repository = new DydraRepository(this.getServerURL(), SystemRepository.ID);
    repository.initialize();
    return repository;
  }
  @Override @Nullable
  protected Repository createRepo
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Heinrich
 */
public class RepositoryFactory {
    
    
    
    public CodeFileRepository getCodeFileRepository() {
        return (CodeFileRepository) instantiateDAO(CodeFileRepository.class); 
    }
    
    public FileChangeRepository getFileChangeRepository() {
        return (FileChangeRepository) instantiateDAO(FileChangeRepository.class);
    }
    
    public MemberRepository getMemberRepository() {
        return (MemberRepository) instantiateDAO(MemberRepository.class);
    }
    
    public ProjectRepository getProjectRepository() {
        return (ProjectRepository) instantiateDAO(ProjectRepository.class);
    }
    
    public TaskClassRepository getTaskClassRepository() {
        return (TaskClassRepository) instantiateDAO(TaskClassRepository.class);
    }
    
    public
/**
 * 일지관리를 처리하는 Dao Class 구현
 * @author 공통서비스 장동한
 * @since 2009.04.10
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.04.10  장동한          최초 생성
 *
 * </pre>
 */
@Repository("diaryManageDao")
public class DiaryManageDao extends EgovComAbstractDAO {
    /**
	 * 일지관리 목록을 조회한다. 
	 * @param searchVO - 조회할 정보가 담긴 VO
	 * @return List
	 * @throws Exception
	 */
	public List selectDiaryManageList(ComDefaultVO searchVO) throws Exception{
		return (List)list("DiaryManage.selectDiaryManage", searchVO);
	}
    /**
	 * 일지관리를(을) 상세조회 한다.
	 * @param diaryManageVO - 일지관리 정보 담김 VO
	 * @return List
	 * @throws Exception
	 */
	public DiaryManageVO selectDiaryManageDetail(DiaryManageVO diaryManageVO) throws Exception{
		return (DiaryManageVO)getSqlMapClientTemplate().queryForObject("DiaryManage.selectDiaryManageDetail", diaryManageVO);
	}
    /**
	 * 일지관리를(을) 목록 전체 건수를(을) 조
/**
 * Factory providing a number of processes for working with feature data.
 * <p>
 * Internally this factory makes use of the information provided by
 * the {@link DescribeProcess} annotations to produce the correct
 * process description.
 * 
 * @author Jody Garnett (LISAsoft)
 *
 * @source $URL$
 */
public class FeatureGSProcessFactory extends AnnotatedBeanProcessFactory {
    public FeatureGSProcessFactory() {
        super(Text.text("Geospatial Feature Process Factory"), "gs",
                AggregateProcess.class,
                BoundsProcess.class,
                BufferFeatureCollection.class,
                ClipProcess.class,
                CollectGeometries.class,
                CountProcess.class,
                FeatureProcess.class,
                GridProcess.class,
                InclusionFeatureCollection.class,
                IntersectionFeatureCollection.class,
                NearestProcess.class,
                PointBuffers.class,
                QueryProc
/**
 * 개요
 * - PROCESS모니터링에 대한 DAO 클래스를 정의한다.
 * 
 * 상세내용
 * - PROCESS모니터링에 대한 등록, 수정, 삭제, 조회 기능을 제공한다.
 * - PROCESS모니터링의 조회기능은 목록조회, 상세조회로 구분된다.
 * @author 박종선
 * @version 1.0
 * @created 08-9-2010 오후 3:54:46
 */
@Repository("ProcessMonDAO")
public class ProcessMonDAO extends EgovComAbstractDAO {
	/**
	 * 등록된 PROCESS모니터링 목록을 조회한다.
	 * @param processMonVO - PROCESS모니터링 Vo
	 * @return List - PROCESS모니터링 목록
	 * 
	 * @param processMonVO
	 */
	@SuppressWarnings("unchecked")	
	public List<ProcessMonVO> selectProcessMonList(ProcessMonVO processMonVO) throws Exception {
		return (List<ProcessMonVO>) list("ProcessMonDAO.selectProcessMonList", processMonVO);
	}
	/**
	 * PROCESS모니터링 목록 총 갯수를 조회한다.
	 * @param ProcessMonVO - PROCESS모니터링 Vo
	 * @return int - PROCESS모니터링 토탈 카운트 수
	 * 
	 * @param processMonVO
	 */
	public int selectProcessMonTotCnt(ProcessMonVO processMonVO) throws Exception {
		return (Integer)select("ProcessMonDAO.selectProcessMonTotCnt", processMonVO);
	}
	/**
	 * 등록된 PROCESS모니터링의

	 * @param processMonVO - PROCESS모니터링 Vo
	 * @return processMonVO - PROCESS모니터링 Vo
	 * 
	 * @param processMonVO
	 */
	public ProcessMonVO selectProcessMon(ProcessMonVO processMonVO) throws Exception {
		return (ProcessMonVO)select("ProcessMonDAO.selectProcessMon", processMonVO);
	}
	/**
	 * PROCESS모니터링 정보를 신규로 등록한다.
	 * @param processNm - PROCESS모니터링 model
	 * 
	 * @param processNm
	 */
	public void insertProcessMon(ProcessMon processMon) throws Exception {
		insert("ProcessMonDAO.insertProcessMon", processMon);
	}
	/**
	 * 기 등록된 PROCESS모니터링 정보를 수정한다.
	 * @param processNm - PROCESS모니터링 model
	 * 
	 * @param processNm
	 */
	public void updateProcessMon(ProcessMon processMon) throws Exception {
		update("ProcessMonDAO.updateProcessMon", processMon);
	}
	/**
	 * 기 등록된 PROCESS모니터링 정보를 삭제한다.
	 * @param processNm - PROCESS모니터링 model
	 * 
	 * @param processNm
	 */
	public void deleteProcessMon(ProcessMon processMon) throws Exception {
		delete("ProcessMonDAO.deleteProcessMon", processMon);
	

	/**
	 * 프로세스 모니터링로그 목록을 조회한다.
	 * @param ProcessMonVO - 프로세스모니터링로그 VO
	 * @return  List<ProcessMonLogVO> - 프로세스모니터링로그 List
	 * 
	 * @param processMonVO
	 */
	@SuppressWarnings("unchecked")	
	public List<ProcessMonLogVO> selectProcessMonLogList(ProcessMonLogVO processMonLogVO) throws Exception {
		return (List<ProcessMonLogVO>) list("ProcessMonDAO.selectProcessMonLogList", processMonLogVO);
	}
	/**
	 * PROCESS모니터링로그 목록 총 갯수를 조회한다.
	 * @param ProcessMonVO - PROCESS모니터링로그 Vo
	 * @return int - PROCESS모니터링로그 토탈 카운트 수
	 * 
	 * @param processMonVO
	 */
	public int selectProcessMonLogTotCnt(ProcessMonLogVO processMonLogVO) throws Exception {
		return (Integer)select("ProcessMonDAO.selectProcessMonLogTotCnt", processMonLogVO);
	}	
	/**
	 * 프로세스 모니터링로그의 상세정보를 조회한다.
	 * @param ProcessMonVO - 프로세스모니터링로그 model
	 * @return  ProcessMonVO - 프로세스모니터링로그 model
	 * 
	 * @param processMonVO
	 */
	public ProcessMonLogVO selectProcessMonLog(ProcessMonLogVO processMonLogVO){
		return (ProcessMonLogVO)select
public class SendReportVO  extends IdModel implements Serializable {
    private static final long serialVersionUID = 1L;
    
    private String processUser;
    private String processMethod;
    private String processTime;
    private String processOpinion;
    private String processPost;
    
    public SendReportVO(String processUser,String processMethod,String processTime,String processOpinion,String processPost){
        this.processUser=processUser;
        this.processMethod=processMethod;
        this.processTime=processTime;
        this.processOpinion=processOpinion;
        this.processPost=processPost;
    }
    
    private String reportId;
    private String reportName;
    
    public SendReportVO(Long id,String reportId,String reportName){
    	setId(id);
    	this.reportId=reportId;
    	this.reportName=reportName;
    }
    
    public SendReportVO(){
        
    }
    
    public String getProcessUser() {
        return processUser;
    }
    public void setProcess

        this.processUser = processUser;
    }
    public String getProcessMethod() {
        return processMethod;
    }
    public void setProcessMethod(String processMethod) {
        this.processMethod = processMethod;
    }
    public String getProcessTime() {
        return processTime;
    }
    public void setProcessTime(String processTime) {
        this.processTime = processTime;
    }
    public String getProcessOpinion() {
        return processOpinion;
    }
    public void setProcessOpinion(String processOpinion) {
        this.processOpinion = processOpinion;
    }
    public String getProcessPost() {
        return processPost;
    }
    public void setProcessPost(String processPost) {
        this.processPost = processPost;
    }
	public String getReportId() {
		return reportId;
	}
	public void setReportId(String reportId) {
		this.reportId = reportId;
	}
	public String getReportName() {
		return reportName;
	}
	public void setReportName(String reportName) {
		this.rep

