'use strict';
angular.module('imm3.system.general.info.service', ['ngResource'])
    .factory('systemGeneralInfoService', ['$resource', function($resource) {
        var service = {};
        service.restGeneralInfo = function() {
			return $resource('/api/providers/sessioninfo');
        };
        return service;
    }])
    .factory('immPropertyService',['$resource',function($resource){
        var service = {};
        service.restSysTime = function() {
            return $resource('/api/dataset/imm_properties');
        }
        return service;
    }])
	.factory('immExportService',['$resource',function($resource){
        var service = {};
        service.restExport = function() {
            return $resource('/api/providers/imm_export');
        }
        return service;
    }])
    .factory('dataSetService',['$resource', function($resource){
        var service = {};
        service.restDataSet = function(){
            return $resource('/api/dataset');
        }
        return
var nav = {};
nav.statusPage = $("#status");
nav.listenersPage = $("#listeners");
nav.logsPage = $("#logs");
nav.settingsPage = $("#settings");
nav.helpPage = $("#help");
nav.aboutPage = $("#about");
nav.menu = $("#menu");
nav.goto = function(page, item)
    nav.menu.find(".active").removeClass("active").end().find("i").removeClass("icon-white");
    $(".maincontent").hide();
    if (item)
    {
        var jItem = $(item);
        jItem.parent().addClass("active");
        jItem.find("i").addClass("icon-white");
    }
    page.show();
nav.switchToWhiteIcon = function(item)
    $(item).find("i").addClass("icon-white");
$("#status_link").live("click", function(){
   nav.goto(nav.statusPage, this);
})
$("#svnrepos_link").live("click", function(){
   nav.goto(nav.listenersPage, this);
})
$("#logs_link").live("click", function(){
   nav.goto(nav.logsPage, this);
   Logs.listRepositories();
})
$("#settings_link").live("click", function(){
   nav.goto(nav.settingsPage, this);
})
$("#help_lin
var class_snowflake_1_1_service_1_1_core_service =
    [ "Dispose", "class_snowflake_1_1_service_1_1_core_service.html#af12af7c6a5e82737c5054cc5a81f4073", null ],
    [ "Dispose", "class_snowflake_1_1_service_1_1_core_service.html#ad8018b76a7ae3eaa82f7f7f8bd8bbe6b", null ],
    [ "InputManager", "class_snowflake_1_1_service_1_1_core_service.html#a45acfd57b38a5c064db036bce0040cee", null ],
    [ "ServerStartEvent", "class_snowflake_1_1_service_1_1_core_service.html#a44f384a2a5a60ea463883f548dabd4a4", null ],
    [ "AjaxManager", "class_snowflake_1_1_service_1_1_core_service.html#a8207cdbabd988112e5dc28a412dc08e8", null ],
    [ "AppDataDirectory", "class_snowflake_1_1_service_1_1_core_service.html#a78ab8ab13d4482139b221d0b4998651a", null ],
    [ "ControllerPortsDatabase", "class_snowflake_1_1_service_1_1_core_service.html#a2d566c3965b113b97b3476471c271d2a", null ],
    [ "EmulatorManager", "class_snowflake_1_1_service_1_1_core_service.html#a334396878c086492aaf0a1abe75eca3e", null ],
  
var bot = require('../bot');
let messageDB = { data: [] };
bot.on('message', message => {
    let attach = '';
    if (message.attachments.size > 0)
    { attach = '\n' + message.attachments.first().url; }
    if (message.channel.id == '271350052188979201') {
        bot.channels.get('271349742099759104').send("**" + message.author.username + ":** " + message.cleanContent + attach)
            .then(msg => messageDB.data.push({ oldMessage: message.id, newMessage: msg.id, channel: msg.channel.id }));
    } else if (message.channel.id == '271349742099759104') {
        bot.channels.get('271350052188979201').send("**" + message.author.username + ":** " + message.cleanContent + attach)
            .then(msg => messageDB.data.push({ oldMessage: message.id, newMessage: msg.id, channel: msg.channel.id }));
    }
});
bot.on('messageUpdate', (oldMessage, newMessage) => {
    let attach = '';
    if (newMessage.attachments.size > 0)
    { attach = '\n' + newMessage.attachments.first().url; }
   
/**
 * Query API tests
 * @author Vincent Lecrubier <vincent.lecrubier@gmail.com>
 * @since  2015-04-19
 */
jest.dontMock('../queryApi.js');
describe('Query API', function() {
 it('fact(a,b,c)', function() {
   var api = require('../queryApi.js');
   expect(api.fact("a", "b","c")).toEqual({x:"fact",a:["a","b","c",true]});
 });
 it('fact(a,b,c,false)', function() {
   var api = require('../queryApi.js');
   expect(api.fact("a", "b","c",false)).toEqual({x:"fact",a:["a","b","c",false]});
 });
 it('the(thing)', function() {
   var api = require('../queryApi.js');
   expect(api.the("stuff")).toEqual({x:"var",a:["stuff"]});
 });
 it('and()', function() {
   var api = require('../queryApi.js');
   expect(api.and()).toEqual({x:"and",a:[]});
 });
 it('and(a)', function() {
   var api = require('../queryApi.js');
   expect(api.and("a")).toEqual({x:"and",a:["a"]});
 });
 it('and(a,b)', function() {
   var api = require('../queryApi.js');
   expect(api.and("a","b")).toEqual({x:"and",a:["a","b"]});
/**
 * team_routes.js
 */
'use strict';
var routeFindMiddleware = dependency('middleware', 'route_find');
var apiPath = dependency('lib', 'helpers').apiPath;
/**
 * Team routes
 * @param  {Object} app Express app
 */
module.exports = function(app, controller) {
    /**
     * @api {get} /teams/ Find Teams
     * @apiName FindTeams
     * @apiGroup Team
     * @apiPermission all
     *
     * @apiStructure ResourceFind
     *
     * @apiSuccess {Array}  teams       List of all the found teams
     * @apiErrorStructure ResourceError
     */
    app.get(apiPath('teams'), controller.find.bind(controller) );
    /**
     * @api {get} /teams/:_ids Retrieve Teams by id
     * @apiName RetrieveTeams
     * @apiGroup Team
     * @apiPermission all
     *
     * @apiStructure ResourceFindByIds
     *
     * @apiSuccess {Array}  teams       List of all the found teams
     * @apiErrorStructure ResourceError
     */
    app.get(apiPath('teams/:_ids'), routeFindMiddleware(controller));
    /**
    
"use strict";
var closeNav, insideNav, navBtn, navLinks, navTop, openNav, toggleNav, waitToCloseNav;
navTop = $('.nav-top');
navBtn = $('.nav-btn');
navLinks = $('.nav-top a');
insideNav = false;
openNav = function() {
  navTop.setAttribute('data-state', 'expanded');
  return navBtn.setAttribute('data-state', 'engaged');
};
closeNav = function() {
  navTop.setAttribute('data-state', 'collapsed');
  return navBtn.setAttribute('data-state', 'disengaged');
};
toggleNav = function() {
  if (navTop.getAttribute('data-state') === 'expanded') {
    return closeNav();
  } else {
    return openNav();
  }
};
waitToCloseNav = function() {
  return setTimeout(function() {
    if (!insideNav) {
      return closeNav();
    }
  }, 100);
};
navBtn.on('click', function(e) {
  e.preventDefault();
  return toggleNav();
});
navBtn.on('focus', function(e) {
  insideNav = true;
  return openNav();
});
navBtn.on('blur', function(e) {
  insideNav = false;
  return waitToCloseNav();
});
navLinks.on('focus', 
ï»¿var app = angular.module("rentACar", ['ngRoute'])
    .controller('carsListController', carsListController)
    .controller('carsController', carsController)
    .controller('rentsController', rentsController)
    .controller('currencyController', currencyController)
    .factory('currencyService', currencyService)
    .config(function ($routeProvider) {
        $routeProvider
            .when('/', {
                templateUrl: 'app/views/carsList.html',
                controller: 'carsListController'
            })
            .when('/edit/:id', {
                templateUrl: 'app/views/Edit.html',
                controller: 'carsController',
            })
            .when('/create', {
                templateUrl: 'app/views/Edit.html',
                controller: 'carsController',
            })
            .when('/rent/:id', {
                templateUrl: 'app/views/Rent.html',
                controller: 'rentsController',
            })
            .otherwise({ redirectTo: 
SidebarController = function(serviceService, stateService) {
    this._stateService = stateService;
    this._serviceService = serviceService;
    this.services = [];
    this._serviceService.on('change', this._calculateServiceStates.bind(this));
};
SidebarController.prototype = {
    toggleFavorite: function(service) {
        this._stateService.toggleFavoriteState(service);
        this._serviceService.recalculateStates();
    },
    toggleHide: function(service) {
        this._stateService.toggleHide(service);
        this._serviceService.recalculateStates();
    },
    getStateFromStorage: function(id) {
        this._stateService.getStateFromStorage(id);
    },
    _calculateServiceStates: function(services) {
        var states = services.map(function(service) {
            return angular.extend({
                id: service.id,
                name: service.name
            }, this._stateService.getStateFromStorage(service.id));
        }.bind(this));
        this.services = st
var phonecatControllers = angular.module('phonecatControllers', ['templateservicemod', 'navigationservice']);
phonecatControllers.controller('home', ['$scope', 'TemplateService', 'NavigationService',
  function ($scope, TemplateService, NavigationService) {
        $scope.template = TemplateService;
        $scope.menutitle = NavigationService.makeactive("Home");
        TemplateService.title = $scope.menutitle;
        $scope.navigation = NavigationService.getnav();
  }]);
phonecatControllers.controller('about', ['$scope', 'TemplateService', 'NavigationService',
  function ($scope, NavigationService) {
  }]);
phonecatControllers.controller('create', ['$scope', 'NavigationService',
  function ($scope, NavigationService) {
      $scope.createapp=function(){
          console.log(NavigationService);
          NavigationService.createapps($scope.appname);
      }
  }]);
phonecatControllers.controller('services', ['$scope', 'TemplateService', 'NavigationService',
  function ($scope, Templa

        $scope.template = TemplateService;
        $scope.menutitle = NavigationService.makeactive("Services");
        TemplateService.title = $scope.menutitle;
        $scope.navigation = NavigationService.getnav();
  }]);
phonecatControllers.controller('portfolio', ['$scope', 'TemplateService', 'NavigationService',
  function ($scope, TemplateService, NavigationService) {
        $scope.template = TemplateService;
        $scope.menutitle = NavigationService.makeactive("Portfolio");
        TemplateService.title = $scope.menutitle;
        $scope.navigation = NavigationService.getnav();
  }]);
phonecatControllers.controller('contact', ['$scope', 'TemplateService', 'NavigationService',
  function ($scope, TemplateService, NavigationService) {
        $scope.template = TemplateService;
        $scope.menutitle = NavigationService.makeactive("Contact");
        TemplateService.title = $scope.menutitle;
        $scope.navigation = NavigationService.getnav();
  }]);
phonecatControllers.
"use strict"
var happens = require("happens");
module.exports = function(items, opts)
  var api = {};
  api.pages = [];
  api.pageIndex = 0;
  api.data = items;
  api.currentPageIndex = 0
  api.currentPage = undefined
  api.options = {
    itemsPerPage: 1,
    loop: false
  };
  happens(api);
  if(opts)
  {
    if(opts.itemsPerPage)
      api.options.itemsPerPage = opts.itemsPerPage
    if(opts.loop != undefined)
      api.options.loop = opts.loop
  }
  api.hasNext = function()
  {
    return (api.currentPageIndex < api.pages.length - 1)
  }
  api.hasPrev = function()
  {
    return (api.currentPageIndex > 0)
  }
  api.createPages = function()
  {
    var dataLength = api.data.length;
    var count = 0;
    api.pages[api.pageIndex] = [];
    for(var i = 0; i < dataLength; i++)
    {
      if(i > 0)
      {
        count++;
        if(count % api.options.itemsPerPage == 0)
        {
          count = 0;
          api.pageIndex++
          api.pages[api.pageIndex] = []
        }
      }


    }
    api.totalPages = api.pages.length;
  }
  api.next = function()
  {
    api.currentPageIndex++
    api.checkNextPrev()
    api.emit("change", api.pages[api.currentPageIndex], api.currentPageIndex);
    api.emit("next", api.pages[api.currentPageIndex], api.currentPageIndex);
  }
  api.prev = function()
  {
    api.currentPageIndex--
    api.checkNextPrev()
    api.emit("change", api.pages[api.currentPageIndex], api.currentPageIndex);
    api.emit("prev", api.pages[api.currentPageIndex], api.currentPageIndex);
  }
  api.checkNextPrev = function()
  {
    if(api.currentPageIndex > api.pages.length - 1)
    {
      if(api.options.loop)
      {
        api.currentPageIndex = 0;
      }
      else
      {
        api.currentPageIndex = api.pages.length - 1;
        api.emit("last:next");
      }
    }
    if(api.currentPageIndex < 0)
    {
      if(api.options.loop)
      {
        api.currentPageIndex = api.pages.length - 1;
      }
      else
      {
        api.currentPageIndex 
(function () {
    "use strict";
    var def_requirements = ['angular',
        './libs/model', './libs/controller', './libs/route_config',
        './libs/form_check.service',
        './mods/homepage/libs/controller', './mods/homepage/mods/guest/libs/controller',
        './mods/homepage/mods/user/libs/controller', './mods/user_activate/libs/controller',
        './mods/interface/libs/controller',
        './mods/interface/libs/filters.service', './mods/interface/libs/navigate.service',
        './mods/interface/libs/network.service',
        './mods/interface/libs/network_attribute.service',
        './mods/interface/libs/network_group.service',
        './mods/interface/libs/inspector.service', './mods/interface/libs/panels.service',
        './mods/interface/libs/commander.service', './mods/interface/libs/canvas.service',
        './mods/interface/libs/settings.service', './mods/interface/libs/sessions.service',
        './mods/uploader/libs/service', 
        './mods/uploader/lib

        'angular-route', 'angular-animate', 'jquery', 'dropzone'];
    define(def_requirements,
        function (angular, model, controller, routeConfig,
            formCheckService,
            homepageController, guestpageController,
            userpageController, activateController,
            interfaceController,
            filterService, navigateService,
            networkService,
            networkAttributeService, networkGroupService,
            inspectorService, panelsService,
            commanderService, canvasService,
            settingsService, sessionsService,
            uploaderService,
            autoclickDirective, submitformDirective) {
        
        angular.module('tea', ['ngRoute', 'ngAnimate']).
        	config(['$routeProvider', routeConfig]).
            service('formCheckService', [formCheckService]).
        	service('appModel', [model]).
        	controller('appController', ['$scope', 'appModel', controller]).
            controller('homepageCont

                '$scope', 'appModel', '$http', '$timeout', '$rootScope',
                homepageController
            ]).
            controller('guestpageController', [
                '$scope', 'appModel', '$http', '$timeout', '$rootScope',
                'formCheckService',
                guestpageController
            ]).
            controller('userpageController', [
                '$scope', 'appModel', '$http', '$timeout', '$rootScope',
                'formCheckService',
                userpageController
            ]).
            controller('activateController', [
                '$scope', 'appModel', '$http', '$timeout',
                '$routeParams',
                activateController
            ]).
            
            service('networkAttributeService', [
                '$q', '$http', '$rootScope',
                networkAttributeService
            ]).
            service('convertGroupService', [networkGroupService]).
            service('mergeGroupService',

            service('intersectGroupService', [networkGroupService]).
            service('subtractGroupService', [networkGroupService]).
            service('containsGroupService', [networkGroupService]).
            service('distancesGroupService', [networkGroupService]).
            service('filterService', [filterService]).
            service('navigateFilterService', [filterService]).
            service('navigateService', [
                '$q', '$http', 'navigateFilterService',
                navigateService
            ]).
            service('canvasService', [
                '$q', '$http', '$rootScope', 'filterService', 'navigateService',
                canvasService
            ]).
            service('commanderService', [
                '$q', '$http', '$timeout', '$rootScope',
                'mergeGroupService', 'intersectGroupService', 'subtractGroupService',
                'containsGroupService', 'distancesGroupService',
                commanderService
            ]

            service('inspectorService', [inspectorService]).
            service('networkService', [
                '$q', '$http', '$rootScope',
                'convertGroupService', 'networkAttributeService',
                networkService
            ]).
            service('panelsService', ['$rootScope', panelsService]).
            service('settingsService', ['$q', '$http', '$rootScope', settingsService]).
            service('sessionsService', ['$q', '$http', '$rootScope', sessionsService]).
            service('uploaderService', ['$http', '$q', '$timeout', uploaderService]).
            controller('interfaceController', [
                '$q', '$scope', 'appModel', '$routeParams',
                'networkService', 'panelsService', 'inspectorService',
                'commanderService', 'canvasService', 'settingsService',
                'sessionsService', 'uploaderService',
                interfaceController
            ]).
            directive('uploaderAutoclick', [
       
/*
 * $Id$
 */
/**
 * Aspect Message
 *
 * @aspect hidden abstract fa_messageText extends fa_message
 * @author Olivier Oeuillot (latest modification by $Author$)
 * @version $Revision$ $Date$
 */
var __members = {
	/*
	f_finalize: function() {
	},
	*/
	/**
	 * @method public 
	 * @return Boolean
	 */
	f_isShowSummary: function() {
		if (this._showSummary===undefined) {
			this._showSummary=f_core.GetBooleanAttributeNS(this,"showSummary", false);
		}
		
		return this._showSummary;
	},
	/* PAS DE MODIF
	 * @method public 
	 * @param Boolean showSummary
	 * @return void
	 *
	f_setShowSummary: function(showSummary) {
		var old=this.f_isShowSummary();
		showSummary=!!showSummary;
		
		if (showSummary==old) {
			return;
		}
		
		this._showSummary=showSummary;
		
		if (!this.fa_componentUpdated) {
			return;
		}
		this.f_setProperty(f_message.SHOW_SUMMARY, showSummary);
				
		this.fa_updateMessages();
	},
	*/
	/**
	 * @method public 
	 * @return Boolean
	 */
	f_isShowDetail: function() {
		
function Navigation_controller(_args){
	NavController = {};
	var useNavWindow = (Ti.version >= '3.2.0');
	if(useNavWindow == true) {
		NavController.win = Ti.UI.createWindow({title:'Navigation Group',backgroundColor:'#336699'});
		NavController.mainWindow = Ti.UI.iOS.createNavigationWindow({
			window:NavController.win
		});
	} else {
		NavController.mainWindow = Ti.UI.createWindow({
			title:_args.title
		});
		NavController.win = Ti.UI.createWindow({title:'Navigation Group',backgroundColor:'#336699'});
		NavController.navGroup = Ti.UI.iPhone.createNavigationGroup({
			window:NavController.win
		});
		NavController.mainWindow.add(NavController.navGroup);
	}
	NavController.button = Ti.UI.createButton({
		title:'Open Window',
		width:300,
		height:50,
		top:100
	});
	NavController.button.addEventListener('click', function()
	{
		var w = Ti.UI.createWindow({
			title:'New Window',
			backgroundColor:'#fff'
		});
		var l = Ti.UI.createLabel({
			textAlign:'center',
			text:'New Window'
		
var dbManager = require("../db/dbManager").getInstance();
var logger = require("../helpers/logger").getInstance();
var config = require("../config/config");
var ONE_MIN = 1000 * 60;
var serviceMonitors = {};
var services = {};
function setServiceMonitors(monitors) {
    serviceMonitors = monitors;
function getServiceMonitors() {
    return serviceMonitors;
function getServiceMonitor(service_id) {
    if(!service_id){
        logger.error("service_id required");
        return null;
    }
    return serviceMonitors[service_id];
function setServices(serviceList) {
    services = serviceList;
function getServices() {
    return services;
function getServiceName(service_id) {
    if (services[service_id]) {
        return services[service_id].name;
    } else {
        return '';
    }
function getService(service_id) {
    if (services[service_id]) {
        return services[service_id];
    } else {
        return '';
    }
function logServicesToDb(service_id) {
    if (serviceMonitors == 

        return;
    }
    var serviceMonitor = serviceMonitors[service_id];
    if (serviceMonitor == undefined) {
        return;
    }
    var service = services[service_id];
    var serviceState = serviceMonitor.serviceState;
    if (serviceState !== undefined) {
        dbManager.saveServiceState(serviceMonitor, service);
    }
function logHealthCheckStateToDb(check_id, service_id) {
    if (serviceMonitors == undefined) {
        return;
    }
    var serviceMonitor = serviceMonitors[service_id];
    if (serviceMonitor == undefined) {
        return;
    }
    dbManager.saveHealthCheckState(check_id, serviceMonitor);
function handleMessage(msg) {
    var service_id = msg.service_id;
    var serviceMonitor = serviceMonitors[service_id];
    for (var i in serviceMonitor.rules) {
        var ruleState = serviceMonitor.rules[i].check(msg);
        serviceMonitor.updateRuleState(ruleState);
    }
function getHealthCheck(check_id, service_id) {
    if (!check_id) {
        logger.error

        return;
    }
    
    var serviceMonitors = getServiceMonitors();
    var serviceMonitor;
    if(service_id){
        serviceMonitor = serviceMonitors[service_id];
        if(!serviceMonitor){
            logger.error("Service not found with id " + check_id);
            return null;
        }
        serviceMonitors = {};
        serviceMonitors[service_id] = serviceMonitor;
    }
    for(var x in serviceMonitors){
        serviceMonitor = serviceMonitors[x];
        if (serviceMonitor.healthChecks) {
            var serviceMonitorHealthChecks = serviceMonitor.healthChecks;
            for (var index in serviceMonitorHealthChecks) {
                var healthCheck = serviceMonitorHealthChecks[index];
                if (healthCheck.id == check_id) {
                    return healthCheck;
                } 
            }
        }
    }
    logger.error("No healthcheck found with id " + check_id);
    return null;
function getAllHealthChecks(service_id) {
    var serviceMoni

    var serviceMonitor;
    if(service_id){
        serviceMonitor = serviceMonitors[service_id];
        serviceMonitors = {};
        serviceMonitors[service_id] = serviceMonitor;
    }
    var healthChecks = {};
    for(var x in serviceMonitors){
        serviceMonitor = serviceMonitors[x];
        if (serviceMonitor && serviceMonitor.healthChecks) {
            healthChecks[serviceMonitor.service_id] = serviceMonitor.healthChecks;
        } 
    }
    
    return healthChecks;
function removeHealthCheck(service_id, check_id){
    if (check_id == undefined || service_id == undefined) {
        logger.error("check_id need to be specified");
        return;
    }
    var serviceMonitors = getServiceMonitors();
    var serviceMonitor = serviceMonitors[service_id];
    if(serviceMonitor){
        if(serviceMonitor.healthChecks){
            console.log("removed health check");
            delete serviceMonitor.healthChecks[check_id];
        }
        if(serviceMonitor.serviceState){
 
const apis = require('../apis/auth')
export const login = (formData) => dispatch => {
    console.log(formData)
    return dispatch({
        type: AuthTypes.LOGIN,
        payload: apis.loginAsync(formData)
    }).then(() => null, err => {
        throw new Error(err)
    })
export const logout = () => dispatch => {
    return dispatch({
        type: AuthTypes.LOGOUT,
        payload: apis.logoutAsync()
    })
export const register = (formData) => dispatch => {
    return dispatch({
        type: AuthTypes.REGISTER,
        payload: apis.registerAsync(formData)
    })
export const getUserInfo = (userId) => dispatch => {
    return dispatch({
        type: AuthTypes.GET_USERINFO,
        payload: apis.getUserInfoAsync(userId)
    })
export const initAuth = () => dispatch => {
    return dispatch({
        type: AuthTypes.INIT_AUTH,
        payload: apis.initAuthAsync()
    })
        .then(res => {
            return dispatch(getUserInfo(res.value.user._id))
        })
export const up
var dir_984e899df90dd104b2eabcdbb76ec71f =
    [ "nav_airspeed.c", "nav__airspeed_8c.html", "nav__airspeed_8c" ],
    [ "nav_airspeed.h", "nav__airspeed_8h.html", "nav__airspeed_8h" ],
    [ "nav_bungee_takeoff.c", "nav__bungee__takeoff_8c.html", "nav__bungee__takeoff_8c" ],
    [ "nav_bungee_takeoff.h", "nav__bungee__takeoff_8h.html", "nav__bungee__takeoff_8h" ],
    [ "nav_catapult.c", "nav__catapult_8c.html", "nav__catapult_8c" ],
    [ "nav_catapult.h", "nav__catapult_8h.html", "nav__catapult_8h" ],
    [ "nav_cube.c", "nav__cube_8c.html", "nav__cube_8c" ],
    [ "nav_cube.h", "nav__cube_8h.html", "nav__cube_8h" ],
    [ "nav_drop.c", "nav__drop_8c.html", null ],
    [ "nav_drop.h", "nav__drop_8h.html", "nav__drop_8h" ],
    [ "nav_flower.c", "nav__flower_8c.html", "nav__flower_8c" ],
    [ "nav_flower.h", "nav__flower_8h.html", "nav__flower_8h" ],
    [ "nav_geofence.h", "nav__geofence_8h.html", "nav__geofence_8h" ],
    [ "nav_gls.c", "nav__gls_8c.html", "nav__gls_8c" ],
    [ "n

    [ "nav_heli_spinup.c", "nav__heli__spinup_8c.html", "nav__heli__spinup_8c" ],
    [ "nav_heli_spinup.h", "nav__heli__spinup_8h.html", "nav__heli__spinup_8h" ],
    [ "nav_launcher.c", "nav__launcher_8c.html", "nav__launcher_8c" ],
    [ "nav_launcher.h", "nav__launcher_8h.html", "nav__launcher_8h" ],
    [ "nav_line.c", "nav__line_8c.html", "nav__line_8c" ],
    [ "nav_line.h", "nav__line_8h.html", "nav__line_8h" ],
    [ "nav_line_border.c", "nav__line__border_8c.html", "nav__line__border_8c" ],
    [ "nav_line_border.h", "nav__line__border_8h.html", "nav__line__border_8h" ],
    [ "nav_line_osam.c", "nav__line__osam_8c.html", "nav__line__osam_8c" ],
    [ "nav_line_osam.h", "nav__line__osam_8h.html", "nav__line__osam_8h" ],
    [ "nav_poles.c", "nav__poles_8c.html", "nav__poles_8c" ],
    [ "nav_poles.h", "nav__poles_8h.html", "nav__poles_8h" ],
    [ "nav_skid_landing.c", "nav__skid__landing_8c.html", "nav__skid__landing_8c" ],
    [ "nav_skid_landing.h", "nav__skid__landing_8h

    [ "nav_smooth.c", "nav__smooth_8c.html", "nav__smooth_8c" ],
    [ "nav_smooth.h", "nav__smooth_8h.html", "nav__smooth_8h" ],
    [ "nav_spiral.c", "nav__spiral_8c.html", "nav__spiral_8c" ],
    [ "nav_spiral.h", "nav__spiral_8h.html", "nav__spiral_8h" ],
    [ "nav_survey_disc.c", "nav__survey__disc_8c.html", "nav__survey__disc_8c" ],
    [ "nav_survey_disc.h", "nav__survey__disc_8h.html", "nav__survey__disc_8h" ],
    [ "nav_survey_poly_osam.c", "nav__survey__poly__osam_8c.html", "nav__survey__poly__osam_8c" ],
    [ "nav_survey_poly_osam.h", "nav__survey__poly__osam_8h.html", "nav__survey__poly__osam_8h" ],
    [ "nav_survey_poly_rotorcraft.c", "nav__survey__poly__rotorcraft_8c.html", "nav__survey__poly__rotorcraft_8c" ],
    [ "nav_survey_poly_rotorcraft.h", "nav__survey__poly__rotorcraft_8h.html", "nav__survey__poly__rotorcraft_8h" ],
    [ "nav_survey_polygon.c", "nav__survey__polygon_8c.html", "nav__survey__polygon_8c" ],
    [ "nav_survey_polygon.h", "nav__survey__polygon_
/** attach controllers to this module 
 * if you get 'unknown {x}Provider' errors from angular, be sure they are
 * properly referenced in one of the module dependencies in the array.
 * below, you can see we bring in our services and constants modules 
 * which avails each controller of, for example, the `config` constants object.
 **/
define([
    './loginController'
    ,'./basicDetController'
    ,'./dashboardController'
    ,'./SchemaGeneratorController'
    ,'./naviController'
    ,'./signupController'
    ,'./keyBoardController'
], function (loginController,basicDetController,dashboardController,SchemaGeneratorController,naviController,signupController,keyBoardController) {
    'use strict';
    console.log(angular);
    var controllers= angular.module('controllers', []);
        controllers.controller("loginController",loginController);
        controllers.controller("dashboardController",dashboardController);
        controllers.controller("basicDetController",basicDetControll
phonegapdesktop.internal.parseConfigFile("pluginjs/servicemanagement.json");
window.plugins.ServiceManagementService = {
	connectService: function(successCallback, errorCallback){
		if (phonegapdesktop.internal.randomException("ServiceManagementService")) {
			errorCallback('A random error was generated');
		}
		else {
			successCallback(phonegapdesktop.internal.getDebugValue('ServiceManagementService', 'connectService'));
		}
		
	},
	disconnectService: function(successCallback, errorCallback){
		if (phonegapdesktop.internal.randomException("ServiceManagementService")) {
			errorCallback('A random error was generated');
		}
		else {
			successCallback(phonegapdesktop.internal.getDebugValue('ServiceManagementService', 'disconnectService'));
		}
		
	},
	getServices: function(cisId, successCallback, errorCallback){
		if (phonegapdesktop.internal.randomException("ServiceManagementService")) {
			errorCallback('A random error was generated');
		}
		else {
			successCallback(phonegapdesktop.

		}
	},
	getMyServices: function(successCallback, errorCallback){
		if (phonegapdesktop.internal.randomException("ServiceManagementService")) {
			errorCallback('A random error was generated');
		}
		else {
			successCallback(phonegapdesktop.internal.getDebugValue('ServiceManagementService', 'getServices'));
		}
	},
	shareMyService: function(jid, serviceObj, successCallback, errorCallback) {
		if (phonegapdesktop.internal.randomException("ServiceManagementService")) {
			errorCallback('A random error was generated');
		}
		else {
			successCallback("SUCCESS");
		}
	},
	unshareMyService: function(jid, serviceObj, successCallback, errorCallback) {
		if (phonegapdesktop.internal.randomException("ServiceManagementService")) {
			errorCallback('A random error was generated');
		}
		else {
			successCallback("SUCCESS");
		}
	},
	startService: function(serviceId, successCallback, errorCallback){
		if (phonegapdesktop.internal.randomException("ServiceManagementService")) {
			errorCallback('A
/*
-------------------------------------------
  STICKY NAVIGATION
-------------------------------------------
*/
jQuery(function($) {
  $(function() {
    var nav_container = $(".secondary-nav-container");
    var nav = $(".secondary-nav-container nav");
    var logo = $(".secondary-nav-container .logo");
    var top_spacing = 0;
    nav_container.waypoint({
      handler: function(event, direction) {
        if (direction == 'down') {
          if (matchMedia('only screen and (min-width: 1000px)').matches) {
            nav_container.css({ 'height':nav.outerHeight() });
            nav.addClass("sticky").css("top", 0);
            nav.parent().addClass("nav-scroll");
            logo.fadeIn();
          }
        } else {
          nav_container.css({ 'height':'auto' });
          nav.removeClass("sticky");
          nav.parent().removeClass("nav-scroll");
          logo.fadeOut();
        }
      }
    });
    var sections = $("section");
    var navigation_links = $("nav a");
    s
(function () {
	'use strict';
	define([
		'angular',
		'passio/core',
		'passio/rest',
		'passio/encryption',
		'passio/config'
	], function (angular) {
		var passioFactories = angular.module('passio.factories', [
			'passio.core',
			'passio.rest',
			'passio.encryption',
			'passio.config'
		]);
		passioFactories.factory('PasswordServiceFactory', [
			'$q',
			'PasswordService',
			'RestService',
			'EncryptionService',
			'config',
			function ($q, PasswordService, RestService, EncryptionService, config) {
				return {
					/**
					 * Creates a new password service using the given username and password.
					 *
					 * @param  {String} username  The username to use.
					 * @param  {String} password  The password to use.
					 *
					 * @return {Promise} A promise which is resolved when the password service is created and
					 *     initialized.
					 */
					create: function (username, password) {
						var deferred, encryptionService, persistenceService, passwordService;
						t
CasterApp.factory('notificacionServ', function() {
	notify = function(message){
		var iconset = {info:"glyphicon glyphicon-info-sign", success:"glyphicon glyphicon-ok-sign", warning:"glyphicon glyphicon-warning-sign", danger:"glyphicon glyphicon-remove-sign"};
		return $.notify({ icon: message.icon ? message.icon : iconset[message.type], title: '<b>'+message.title+'</b><br>', message:(message.message) ? message.message : message }, { type:message.type, delay: message.delay, z_index:1051 });
	};
    return {
        generalInfo : function(message){
            notify({title: 'Nota', message: message, type:"info"});
        },
        generalSuccess : function(message){
            notify({title: 'Ãxito', message: message, type:"success"});
        },
        generalWarning : function(message){
            notify({title: 'Advertencia', message: message, type:"warning"});
        },
        generalError : function(message){
            notify({title: 'Error', message: message, type:"dange
(function() {
  function QuizController() {
    var quizController = this;
    quizController.ready_ = rq.getJson('quiz-data.json').then(function(data) {
      quizController.model_ = new rq.QuizModel(data);
      quizController.questionControllers_ = quizController.model_.questions.map(function(question) {
        var ui = new rq.QuestionUi();
        var questionController = new rq.QuestionController(question, ui);
        ui.setQuestionTotal(quizController.model_.questions.length);
        questionController.on('continue', quizController.nextQuestion_.bind(quizController));
        questionController.on('phaseAnswered', function(event) {
          if (event.wasCorrect) {
            quizController.model_.score++;
            quizController.ui_.score(quizController.model_.score);
          }
        });
        return new rq.QuestionController(question, ui);
      });
      var questionUis = quizController.questionControllers_.map(function(x) { return x.ui; });
      quizController.u

      quizController.ui_.on('startQuizBtnSelected', function() {
        quizController.ui_.prepareScreen().then(
          quizController.nextQuestion_.bind(quizController)
        );
      });
      quizController.ui_.on('resetSelected', quizController.reset_.bind(quizController));
    });
    quizController.questionNum_ = -1;
  }
  var QuizControllerProto = QuizController.prototype;
  QuizControllerProto.start = function() {
    var quizController = this;
    quizController.ready_.done(function() {
      quizController.ui_.score(quizController.model_.score);
      quizController.ui_.showIntro();
    });
  };
  QuizControllerProto.reset_ = function() {
    window.location.reload();
  };
  QuizControllerProto.nextQuestion_ = function() {
    var quizController = this;
    Q.resolve().then(function() {
      if (quizController.questionNum_ > -1) {
        return quizController.ui_.destroyQuestion(quizController.questionNum_);
      }
    }).then(function() {
      quizController.quest
$(function() {
			
				var Page = (function() {
					var $navArrows = $( '#nav-arrows' ),
						$nav = $( '#nav-dots > span' ),
						slitslider = $( '#slider' ).slitslider( {
							onBeforeChange : function( slide, pos ) {
								$nav.removeClass( 'nav-dot-current' );
								$nav.eq( pos ).addClass( 'nav-dot-current' );
							}
						} ),
						init = function() {
							initEvents();
							
						},
						initEvents = function() {
							$navArrows.children( ':last' ).on( 'click', function() {
								slitslider.next();
								return false;
							} );
							$navArrows.children( ':first' ).on( 'click', function() {
								
								slitslider.previous();
								return false;
							} );
							$nav.each( function( i ) {
							
								$( this ).on( 'click', function( event ) {
									
									var $dot = $( this );
									
									if( !slitslider.isActive() ) {
										$nav.removeClass( 'nav-dot-current' );
										$dot.addClass( 'nav-dot-current' );
									
					
/* NON-DROPDOWN i.e. HOME */
$("#nav_link_home").click(function() {
	$(".show").removeClass("show");
	$("#nav_main").addClass("corner_bottom_rounded");
	$(".nav_link_active").removeClass("nav_link_active");
	$("#nav_link_home").addClass("corner_bottom_left_rounded");
});
/* BLOG */
$("#nav_link_blog").click(function() {
	if ( $(".nav_link_blog_sub").hasClass('show') ) {
		$(".show").removeClass("show");
		$("#nav_main").addClass("corner_bottom_rounded");
		$(".nav_link_active").removeClass("nav_link_active");
		$("#nav_link_home").addClass("corner_bottom_left_rounded");
	} else {
		$(".show").removeClass("show");
		$("#nav_main").removeClass("corner_bottom_rounded");
		$(".nav_link_active").removeClass("nav_link_active");
		$("#nav_link_home").removeClass("corner_bottom_left_rounded");
		$("#nav_expandable").addClass("show");
	    $(".nav_link_blog_sub").addClass("show");
		$("#nav_link_blog").addClass("nav_link_active");
	}
});
/* PORTFOLIO */
$("#nav_link_portfolio").click(function()

	if ( $(".nav_link_portfolio_sub").hasClass('show') ) {
		$(".show").removeClass("show");
		$("#nav_main").addClass("corner_bottom_rounded");
		$(".nav_link_active").removeClass("nav_link_active");
		$("#nav_link_home").addClass("corner_bottom_left_rounded");
	} else {
		$(".show").removeClass("show");
		$("#nav_main").removeClass("corner_bottom_rounded");
		$(".nav_link_active").removeClass("nav_link_active");
		$("#nav_link_home").removeClass("corner_bottom_left_rounded");
		$("#nav_expandable").addClass("show");
	    $(".nav_link_portfolio_sub").addClass("show");
	    $("#nav_link_portfolio").addClass("nav_link_active");
	}
});
/* TUTORIALS */
$("#nav_link_tutorials").click(function() {
	if ( $(".nav_link_tutorials_sub").hasClass('show') ) {
		$(".show").removeClass("show");
		$("#nav_main").addClass("corner_bottom_rounded");
		$(".nav_link_active").removeClass("nav_link_active");
		$("#nav_link_home").addClass("corner_bottom_left_rounded");
	} else {
		$(".show").removeClass("show

		$("#nav_main").removeClass("corner_bottom_rounded");
		$(".nav_link_active").removeClass("nav_link_active");
		$("#nav_link_home").removeClass("corner_bottom_left_rounded");
		$("#nav_expandable").addClass("show");
	    $(".nav_link_tutorials_sub").addClass("show");
	    $("#nav_link_tutorials").addClass("nav_link_active");
	}
});
/* NEWS */
$("#nav_link_news").click(function() {
	if ( $(".nav_link_news_sub").hasClass('show') ) {
		$(".show").removeClass("show");
		$("#nav_main").addClass("corner_bottom_rounded");
		$(".nav_link_active").removeClass("nav_link_active");
		$("#nav_link_home").addClass("corner_bottom_left_rounded");
	} else {
		$(".show").removeClass("show");
		$("#nav_main").removeClass("corner_bottom_rounded");
		$(".nav_link_active").removeClass("nav_link_active");
		$("#nav_link_home").removeClass("corner_bottom_left_rounded");
		$("#nav_expandable").addClass("show");
	    $(".nav_link_news_sub").addClass("show");
	    $("#nav_link_news").addClass("nav_link_active"
-- --------------------------------------------------------------------
-- Java Types
-- --------------------------------------------------------------------
data JavaType = TJInt 
              | TJFloat
              | TJDouble
              | TJLong
              | TJByte
              | TJChar
              | TJShort
              | TJBoolean
              | TJRef(Int,TypeName)
              | TJArray(JavaType)
              | TJVoid
instance Text JavaType where
  showsPrec _ TJInt         = showString "int"
  showsPrec _ TJFloat       = showString "float"
  showsPrec _ TJDouble      = showString "double"
  showsPrec _ TJShort       = showString "short"
  showsPrec _ TJByte        = showString "byte"
  showsPrec _ TJBoolean     = showString "boolean"
  showsPrec _ TJLong        = showString "long"
  showsPrec _ TJChar        = showString "char"
  showsPrec _ TJVoid        = showString "void"
  showsPrec _ (TJRef(_,c))  = showString c
  showsPrec _ (TJArray(t))  = shows t . showStri
/* ----------------------------------------------------------- Introduction Messages --- */
function BillboardMessages() {
    this.BlankMessage = function () {
        var message = "";
        message += "          ";
        message += "          ";
        message += "          ";
        message += "          ";
        return (message);
    }
    this.SpeedReadingQuestion = function () {
        var message = "";
        message += " CAN YOUR ";
        message += " BROWSER  ";
        message += " SPEED    ";
        message += " READ     ";
        return (message);
    }
    /* ---------- Feature Introduction ---------- */
    /* Not used for mobile demo
    this.Welcome = function () {
        var message = "";
        message += "Welcome to";
        message += "IE9 now on";
        message += "Windows   ";
        message += "Phone     ";
        return (message);
    }
    this.Ready = function () {
        var message = "";
        message += "          ";
        message

        message += "          ";
        message += "          ";
        return (message);
    }
    this.Set = function () {
        var message = "";
        message += "          ";
        message += "   SET    ";
        message += "          ";
        message += "          ";
        return (message);
    }
    this.Go = function () {
        var message = "";
        message += "          ";
        message += "   GO     ";
        message += "          ";
        message += "          ";
        return (message);
    }
    */
    this.Overview01 = function () { return ("INTERNET  EXPLORER 9ON WINDOWSPHONE     "); }
    this.Overview02 = function () { return ("FULLY GPU POWERED   WEB       BROWSING  "); }
    this.Overview03 = function () { return ("NOW       IN        YOUR      POCKET    "); }
    /*
    this.Overview04 = function () { return ("SAME      INTER     OPERABLE  MARKUP    "); }
    this.Overview05 = function () { return ("HTML5     CSS3      DOM L2 L3 SVG       "

    this.Overview06 = function () { return ("IN A SITE CENTRIC   MOBILE    DESIGN    "); }
    */
    /* ---------- Billboard Features ---------- */
    /* removed for mobile
    this.BillboardUppercase = function () {
        var message = "";
        message += "                ";
        message += " Uppercase      ";
        message += "                ";
        message += " ABCDEFGHIJKLM  ";
        message += " NOPQRSTUVWXYZ  ";
        message += "                ";
        return (message);
    }
    this.BillboardLowercase = function () {
        var message = "";
        message += "                ";
        message += " Lowercase      ";
        message += "                ";
        message += " abcdefghijklm  ";
        message += " nopqrstuvwxyz  ";
        message += "                ";
        return (message);
    }
    this.BillboardNumbers = function () {
        var message = "";
        message += "                ";
        message += " Numbers        ";
      
  Navbar,
  NavItem,
  Nav
} from 'react-bootstrap';
class NavigationBar extends Component {
  render() {
    return (
    <Navbar collapseOnSelect>
      <Navbar.Header>
        <Navbar.Brand>
          <p className="brand">Skip the Line</p>
        </Navbar.Brand>
        <Navbar.Toggle />
      </Navbar.Header>
      <Navbar.Collapse>
        <Nav bsStyle="tabs">
          <NavItem className="brand"><NavLink exact to='/'>Home</NavLink></NavItem>
          <NavItem className="brand"><NavLink to='/entrees'>Entrees</NavLink></NavItem>
          <NavItem className="brand"><NavLink to='/sides'>Sides</NavLink></NavItem>
          <NavItem className="brand"><NavLink to='/drinks'>Drinks</NavLink></NavItem>
          <NavItem className="brand"><NavLink to='/desserts'>Desserts</NavLink></NavItem>
          <NavItem className="brand"><NavLink to='/add'>Add</NavLink></NavItem>
        </Nav>
        <Nav bsStyle="tabs"  pullRight>
          <NavItem className="brand"><NavLink to='/summary'><spa
Ext.define('ems.biz.demo.widgetdemo.view.DialogDemoView', {
    extend: 'ems.core.UI',
	uiConfig: function() {
		var me = this;
		return {
			defaultType: 'button',
			defaults: {
				margin:'5'
			},
			items: [{
				text: 'showInfoDialog',
				listeners: {
					click: function() {
						EU.showInfoDialog({
							title: 'title-showInfoDialog',
							msg: 'msg-showInfoDialog'
						})
					}
				}
			}, {
				text: 'showWarningDialog',
				listeners: {
					click: function() {
						EU.showWarningDialog({
							title: 'title-showWarningDialog',
							msg: 'msg-showWarningDialog'
						})
					}
				}
			}, {
				text: 'showConfirmDialog',
				listeners: {
					click: function() {
						EU.showInfoDialog({
							title: 'title-showConfirmDialog',
							msg: 'msg-showConfirmDialog'
						})
					}
				}
			}, {
				text: 'showErrorDialog',
				listeners: {
					click: function() {
						EU.showErrorDialog({
							title: 'title-showErrorDialog',
							msg: 'msg-showErrorDialog'
			
jQuery(function( $ ){
  var $navP = $(".nav-primary");
  var $navS = $(".nav-secondary");
  var $menuH = $(".nav-header>.menu");
  var $menuP = $(".menu-primary");
  var $menuS = $(".menu-secondary");
  var $toggle = $('<div class="menu-toggle"></div>');
  $navM.appendTo('.site-header>.wrap').before($toggle);
  $(".menu-toggle").click(function(){
    $($navM).slideToggle();
  });
  $(".menu-item-has-children .sub-menu").before('<div class="sub-menu-toggle"></div>');
  $(".sub-menu-toggle").click(function(){
    var menuDrop = $(this).parent().children('.sub-menu:first');
    $(this).toggleClass("menu-open");
    menuDrop.slideToggle();
  });
  function mmNav(){
    var winW = window.innerWidth;
    if( winW < 840 ) {
      $($menuH).appendTo($navM);
      $($menuP).appendTo($navM);
      $($menuS).appendTo($navM);
      $navP.detach();
      $navS.detach();
    } else {
      $navP.insertBefore('.site-inner');
      $navS.insertBefore('.site-inner');
      $menuH.appendTo('.nav-header'
/**
 * Created by xuewenwen on 6/3/2015.
 */
var myModule = angular.module("elvenApp", [ 'ngRoute' ]);
myModule.config(function($routeProvider, $locationProvider) {
    $routeProvider.when("/", {
        templateUrl : "main",
        controller : "MongoController",
        controllerAs: "mongoController"
    }).when('/edit', {
        templateUrl : "edit",
        controller : "EditController",
        controllerAs: 'editController'
    }).when('/subjects', {
        templateUrl : "subjects",
        controller : "SubjectsController",
        controllerAs: 'subjectsController'
    }).when('/comments', {
        templateUrl : "comments",
        controller : "CommentsController",
        controllerAs: 'commentsController'
    }).when('/about', {
        templateUrl : "about",
        controller : "AboutController",
        controllerAs: 'aboutController'
    }).when('/login', {
        templateUrl : "login",
        controller : "LoginController",
        controllerAs: 'loginController'
/**
 * @api {get} /user/:account 1.ç¨æ·åæ£æµ
 * @apiVersion 0.0.1
 * @apiName Check Account
 * @apiGroup User
 *
 * @apiDescription æ£æµç¨æ·åæ¯å¦è¢«å ç¨
 *
 * @apiParam {String} account ç¨æ·å
 *
 * @apiExample ä¾å­:
 *
 * @apiSuccess {Number} code  ç¶æç 
 * @apiSuccess {String} message ååºä¿¡æ¯
 * @apiSuccess {Date} timeStamp å¤çç»ææ¶é´
 * @apiSuccess {Date} startTime è¯·æ±å¼å§æ¶é´
 * @apiSuccess {Object} result è¿åç»æ
 * @apiSuccess {String} result.account ç¨æ·å
 * @apiSuccess {Boolean} result.valid ç¨æ·åæ¯å¦ææ
 */
function checkUser() {
/**
 * @api {put} /user/ 2.æ³¨å
 * @apiVersion 0.0.1
 * @apiName Sign Up
 * @apiGroup User
 *
 * @apiDescription ç¨æ·æ³¨å
 *
 * @apiParam {String} account   ç¨æ·å
 * @apiParam {String} password  ç¨æ·å¯ç 
 * @apiParam {String} email  ç»å®é®ç®±
 * @apiParam {String} verificationCode  éªè¯ç 
 *
 * @apiSuccess {Number} code  ç¶æç 
 * @apiSuccess {String} message ååºä¿¡æ¯
 * @apiSuccess {Date} timeStamp å¤çç»ææ¶é´
 * @apiSuccess {Date} startTime è¯·æ±å¼å§æ¶é´
 * @apiSuccess {Object} result è¿åç»æ
 * @apiSuccess {String} result.account ç¨
(function() {
  var $window = $(window);
  var $nav = $(document.getElementsByTagName('nav'));
  var NAV_HEIGHT = $nav.height();
  var initialNavTop = $nav[0] &&
    ($nav[0].getBoundingClientRect().top + window.scrollY);
  function navShouldBeFixed() {
    if (stickySupported() || initialNavTop == null)
      return false;
    else
      return state().scroll >= initialNavTop;
  }
  function navMenuShouldOpenUp() {
    var bounds = $nav[0] && $nav[0].getBoundingClientRect();
    if (!bounds)
      return true;
    if (bounds.top == null || state().vh == null)
      return true;
    return bounds.top > state().vh / 2;
  }
  function fixNav(shouldFix) {
    if (shouldFix) {
      $nav.find('.nav-menu').addClass('no-transition');
      $nav.addClass('fixed');
      setTimeout(function() {
        $nav.find('.nav-menu').removeClass('no-transition');
      }, 0);
    } else {
      $nav.find('.nav-menu').addClass('no-transition');
      $nav.removeClass('fixed');
      $nav.find('.nav-menu

      setTimeout(function() {
        $nav.find('.nav-menu').removeClass('no-transition');
      }, 0);
    }
  }
  function setOpeningDirectionDownward(downward) {
    if (downward) {
      $nav.find('.nav-menu').addClass('no-transition');
      $nav.addClass('open-downward');
      setTimeout(function() {
        $nav.find('.nav-menu').removeClass('no-transition');
      }, 0);
    } else {
      $nav.find('.nav-menu').addClass('no-transition');
      $nav.removeClass('open-downward');
      $nav.find('.nav-menu')[0].getBoundingClientRect();
      setTimeout(function() {
        $nav.find('.nav-menu').removeClass('no-transition');
      }, 0);
    }
  }
  state.onchange(function(event, current, previous) {
    if (current.scroll != previous.scroll || current.vh != previous.vh)
      state({
        fixed: navShouldBeFixed(),
        navMenuOpensUp: navMenuShouldOpenUp()
      });
    if (current.fixed != previous.fixed)
      fixNav(current.fixed);
    if (current.navOpen !== previo
	function add_system_message(time, id, message, recipient_name)
	{
		add_message_default_design(time, id, 'ChatRobot',  recipient_name, message, '', 'system_message')
	}
	function add_warning_message(time, id, message, recipient_name)
	{
		add_message_default_design(time, id, 'ChatRobot',  recipient_name, message, '', 'system_message')
	}
	function add_private_incoming_message(time, id, sender_name, recipient_name, message, message_color)
	{
		add_message_default_design(time, id, sender_name, recipient_name, message, message_color, 'private_message')
	}
	function add_private_outgoing_message(time, id, sender_name, recipient_name, message, message_color,)
	{
		add_message_default_design(time, id, sender_name,  recipient_name, message, message_color, 'private_message')
	}
	function add_common_message(time, id, sender_name, recipient_name, message, message_color, image)
	{
		add_message_default_design(time, id, sender_name, recipient_name, message, 'common_message', message_color, image)

requirejs([
    'modernizr',
    'jquery',
    'menuController',
    'inspirationController',
    'featuredController',
    'catalogueController',
    'controlsController',
    'managerController',
    'compareController',
    'favoritesController',
    'incDecController',
    'cardController',
    'lineController',
    'orderController',
    'loginController',
    'PasswordController',
    'UpScrollController',
    'TogglerController',
    'FastController'
  ],function(
    modernizr, 
    jquery, 
    menuController, 
    inspirationController, 
    featuredController, 
    catalogueController, 
    controlsController, 
    managerController, 
    compareController, 
    favoritesController,
    incDecController,
    cardController,
    lineController,
    orderController,
    loginController,
    PasswordController,
    UpScrollController,
    TogglerController,
    FastController
  ){
  $(document).ready(function(){
    new inspirationController();
    new menuController();
    new
angular.module('app.serviceInstance').controller('ServiceInstanceDeleteCtrl', ['$scope', '$q', '$modalInstance', '$log', 'serviceInstance', 'serviceInstanceService', 'serviceBindingService', 'messageService', function($scope, $q, $modalInstance, $log, serviceInstance, serviceInstanceService, serviceBindingService, messageService) {
  $scope.serviceInstance = serviceInstance;
  $scope.serviceBindings = [];
  serviceInstanceService.getServiceBindingsForServiceInstance(serviceInstance.id, true).then(function(response){
    angular.forEach(response.data.resources, function(serviceBinding, key){
      var objectServiceBinding = {
        id: serviceBinding.metadata.guid
      };
      $scope.serviceBindings.push(objectServiceBinding);
    });
  });
  $scope.ok = function () {
    angular.forEach($scope.serviceBindings, function(serviceBinding, key){
    });
    $scope.deleteServiceBindings($scope.serviceBindingId).then(function(response) {
      serviceInstanceService.deleteServiceInstance(
function showElementConfigOptions(type){
	switch(type){
		case 'report.lib.ChartCategory': 
		case 'report.lib.ChartData': 
			hideElementConfigOptions();
			break;
		case 'InputText': 
		case 'Listbox': 
		case 'Checkbox':
		case 'Radio':
		case 'InputDate':
		case 'AutoSuggest':
			hideElementConfigOptions();
			$('fld_attr_selfrom_container').show();
			break;			
		default:
			hideElementConfigOptions();
			$('fld_attr_font_width_container').show();	
			$('fld_attr_font_height_container').show();
			$('fld_attr_font_weight_container').show();	
			$('fld_attr_font_style_container').show();
			$('fld_attr_text_decoration_container').show();
			$('fld_attr_align_container').show();
			$('fld_attr_font_size_container').show();
			$('fld_attr_color_container').show();
			$('fld_attr_bgcolor_container').show();
			
			break;
	}
function hideElementConfigOptions(){
	$('fld_attr_font_width_container').hide();	
	$('fld_attr_font_height_container').hide();
	$('fld_attr_font_weight_container')

	$('fld_attr_font_style_container').hide();
	$('fld_attr_text_decoration_container').hide();
	$('fld_attr_align_container').hide();
	$('fld_attr_font_size_container').hide();
	$('fld_attr_color_container').hide();
	$('fld_attr_bgcolor_container').hide();
	$('fld_attr_selfrom_container').hide();
function showConfigOptions(type){
	switch(type){
		case 'chart':
			hideConfigOptions();
			$('fld_subtype_container').show();
			$('fld_width_container').show();
			$('fld_height_container').show();
			$('fld_show_hover_cap_container').show();
			$('fld_show_label_container').show();
			$('fld_show_value_container').show();
			$('fld_show_number_prefix_container').show();
			$('fld_show_number_suffix_container').show();
			$('fld_show_format_number_container').show();
			$('fld_show_number_scale_container').show();
			showSubConfigOptions($('fld_subtype').value);
			break;
			
		case 'table':
			hideConfigOptions();			
			$('fld_template_container').show();
			$('fld_pagesize_container').show(

			break;
		case 'filter':
			hideConfigOptions();
	}	
function showSubConfigOptions(type){
	hideConfigOptions();
	$('fld_subtype_container').show();
	$('fld_width_container').show();
	$('fld_height_container').show();
	$('fld_show_hover_cap_container').show();
	$('fld_show_label_container').show();
	$('fld_show_value_container').show();
	$('fld_show_number_prefix_container').show();
	$('fld_show_number_suffix_container').show();
	$('fld_show_format_number_container').show();
	$('fld_show_number_scale_container').show();	
	switch(type){
		case 'StackedColumn2D':
		case 'MSColumn2D':
			$('fld_show_legend_container').show();
		case 'Column2D':
			$('fld_show_limits_container').show();
			$('fld_show_rotate_name_container').show();
			$('fld_y_min_value_container').show();
			$('fld_y_max_value_container').show();
			$('fld_show_column_shadow_container').show();
			$('fld_show_animation_container').show();
			break;
		case 'StackedColumn3D':			
		case 'MSColumn3D':
			$('fld_show_legend

		case 'Column3D':
			$('fld_show_limits_container').show();
			$('fld_show_rotate_name_container').show();
			$('fld_y_min_value_container').show();
			$('fld_y_max_value_container').show();
			$('fld_show_animation_container').show();
			break;
		case 'StackedBar2D':
		case 'MSBar2D':
			$('fld_show_legend_container').show();				
		case 'Bar2D':
			$('fld_show_limits_container').show();
			$('fld_show_rotate_name_container').show();
			$('fld_y_min_value_container').show();
			$('fld_y_max_value_container').show();
			$('fld_show_column_shadow_container').show();
			$('fld_show_animation_container').show();
			$('fld_show_bar_shadow_container').show();
			break;
		case 'StackedArea2D':			
		case 'MSArea2D':
			$('fld_show_legend_container').show();				
		case 'Area2D':
			$('fld_show_limits_container').show();
			$('fld_show_rotate_name_container').show();
			$('fld_y_min_value_container').show();
			$('fld_y_max_value_container').show();
			$('fld_show_column_shadow_container').sho

			$('fld_show_animation_container').show();
			$('fld_show_area_border_container').show();
			$('fld_show_area_alpha_container').show();
			break;
		case 'MSLine':
			$('fld_show_legend_container').show();				
		case 'Line':
			$('fld_show_limits_container').show();
			$('fld_show_rotate_name_container').show();
			$('fld_y_min_value_container').show();
			$('fld_y_max_value_container').show();
			$('fld_show_column_shadow_container').show();
			$('fld_show_animation_container').show();
			$('fld_show_anchor_container').show();
			$('fld_show_anchor_radius_container').show();
			break;
		case 'Pie2D':
			$('fld_show_percentage_value_container').show();	
			$('fld_show_percentage_in_label_container').show();
			$('fld_show_shadow_container').show();
			$('fld_show_animation_container').show();
			$('fld_show_pie_radius_container').show();
			break;
		case 'Pie3D':
			$('fld_show_percentage_value_container').show();	
			$('fld_show_percentage_in_label_container').show();
			$('fld_show

			$('fld_show_pie_y_scale_container').show();
			$('fld_show_pie_slice_depth_container').show();
			break;
			
	}
function hideConfigOptions(){
	$('fld_pagesize_container').hide();	
	$('fld_template_container').hide();	
	$('fld_subtype_container').hide();
	$('fld_width_container').hide();
	$('fld_height_container').hide();
	$('fld_show_label_container').hide();
	$('fld_show_value_container').hide();
	$('fld_show_hover_cap_container').hide();
	$('fld_show_number_prefix_container').hide();
	$('fld_show_number_suffix_container').hide();
	$('fld_show_format_number_container').hide();
	$('fld_show_number_scale_container').hide();		
	$('fld_show_percentage_value_container').hide();	
	$('fld_show_percentage_in_label_container').hide();
	$('fld_show_pie_radius_container').hide();
	$('fld_show_pie_y_scale_container').hide();
	$('fld_show_pie_slice_depth_container').hide();
	$('fld_show_shadow_container').hide();
	$('fld_show_animation_container').hide();
	$('fld_show_limits_container').hide()
<script type="text/javascript" src="js/libs/iphone-scroller.js"></script>
$(document).ready(function()
	$("#nav-indicator-fixed").append("A");
	$("#iphone-search").fadeTo(1, 0.85);
	$("#iphone-search").hover(function()
	{
		$("#iphone-search").addClass("searchbg");
	},function()
	{
		$("#iphone-search").removeClass("searchbg");
	});
	var curb = $("#nav-B").position().top;
	var curc = $("#nav-C").position().top;
	var curd = $("#nav-D").position().top;
	var cure = $("#nav-D").position().top;
	var curf = $("#nav-F").position().top;
	var curg = $("#nav-G").position().top;
	var curh = $("#nav-H").position().top;
	var curi = $("#nav-I").position().top;
	var curj = $("#nav-J").position().top;
	var curk = $("#nav-K").position().top;
	var curl = $("#nav-L").position().top;
	var curm = $("#nav-M").position().top;
	var curn = $("#nav-N").position().top;
	var curo = $("#nav-O").position().top;
	var curp = $("#nav-P").position().top;
	var curq = $("#nav-Q").position().top;
	var curr = $("#nav-R").p

	var curs = $("#nav-S").position().top;
	var curt = $("#nav-T").position().top;
	var curu = $("#nav-U").position().top;
	var curv = $("#nav-V").position().top;
	var curw = $("#nav-W").position().top;
	var curx = $("#nav-X").position().top;
	var cury = $("#nav-Y").position().top;
	var curz = $("#nav-Z").position().top;
	var changeNavIndicator = function(value)
	{
		$("#nav-indicator-fixed").replaceWith("<div id=\"nav-indicator-fixed\">"+value+"</div>");
	}
	$("#iphone-scrollcontainer").scroll(function()
	{
		if($("#nav-A").position().top < 20 && $("#nav-A").position().top > -20)
			changeNavIndicator("A");
		
		if($("#nav-B").position().top < 20 && $("#nav-B").position().top > -20)
		{
			if(curb < $("#nav-B").position().top)
				changeNavIndicator("A");
			else
				changeNavIndicator("B");;
			curb = $("#nav-B").position().top;
		}
		if($("#nav-C").position().top < 20 && $("#nav-C").position().top > -20)
		{
			if(curc < $("#nav-C").position().top)
				changeNavIndicator("B");
			else

				changeNavIndicator("C");;
			curc = $("#nav-C").position().top;
		}
		if($("#nav-D").position().top < 20 && $("#nav-D").position().top > -20)
		{
			if(curd < $("#nav-D").position().top)
				changeNavIndicator("C");
			else
				changeNavIndicator("D");
			curd = $("#nav-D").position().top;
		}
		if($("#nav-E").position().top < 20 && $("#nav-E").position().top > -20)
		{
			if(cure < $("#nav-E").position().top)
				changeNavIndicator("D");
			else
				changeNavIndicator("E");
			cure = $("#nav-E").position().top;
		}
		if($("#nav-F").position().top < 20 && $("#nav-F").position().top > -20)
		{
			if(curf < $("#nav-F").position().top)
				changeNavIndicator("E");
			else
				changeNavIndicator("F");
			curf = $("#nav-F").position().top;
		}
		if($("#nav-G").position().top < 20 && $("#nav-G").position().top > -20)
		{
			if(curg < $("#nav-G").position().top)
				changeNavIndicator("F");
			else
				changeNavIndicator("G");
			curg = $("#nav-G").position().top;
		}
		if($("#nav-H").po

		{
			if(curh < $("#nav-H").position().top)
				changeNavIndicator("G");
			else
				changeNavIndicator("H");
			curh = $("#nav-H").position().top;
		}		
		if($("#nav-I").position().top < 20 && $("#nav-I").position().top > -20)
		{
			if(curi < $("#nav-I").position().top)
				changeNavIndicator("H");
			else
				changeNavIndicator("I");
			curi = $("#nav-I").position().top;
		}	
			if($("#nav-J").position().top < 20 && $("#nav-J").position().top > -20)
		{
			if(curj < $("#nav-J").position().top)
				changeNavIndicator("I");
			else
				changeNavIndicator("J");
			curj = $("#nav-J").position().top;
		}	
		if($("#nav-K").position().top < 20 && $("#nav-K").position().top > -20)
		{
			if(curk < $("#nav-K").position().top)
				changeNavIndicator("J");
			else
				changeNavIndicator("K");
			curk = $("#nav-K").position().top;
		}
		if($("#nav-L").position().top < 20 && $("#nav-L").position().top > -20)
		{
			if(curl < $("#nav-L").position().top)
				changeNavIndicator("K");
			else
				

			curl = $("#nav-L").position().top;
		}	
		if($("#nav-M").position().top < 20 && $("#nav-M").position().top > -20)
		{
			if(curm < $("#nav-M").position().top)
				changeNavIndicator("L");
			else
				changeNavIndicator("M");
			curm = $("#nav-M").position().top;
		}	
		if($("#nav-N").position().top < 20 && $("#nav-N").position().top > -20)
		{
			if(curn < $("#nav-N").position().top)
				changeNavIndicator("M");
			else
				changeNavIndicator("N");
			curn = $("#nav-N").position().top;
		}	
		if($("#nav-O").position().top < 20 && $("#nav-O").position().top > -20)
		{
			if(curo < $("#nav-O").position().top)
				changeNavIndicator("N");
			else
				changeNavIndicator("O");
			curo = $("#nav-O").position().top;
		}	
		if($("#nav-P").position().top < 20 && $("#nav-P").position().top > -20)
		{
			if(curp < $("#nav-P").position().top)
				changeNavIndicator("O");
			else
				changeNavIndicator("P");
			curp = $("#nav-P").position().top;
		}	
		if($("#nav-Q").position().top < 20 && $("#

		{
			if(curq < $("#nav-Q").position().top)
				changeNavIndicator("P");
			else
				changeNavIndicator("Q");
			curq = $("#nav-Q").position().top;
		}	
		if($("#nav-R").position().top < 20 && $("#nav-R").position().top > -20)
		{
			if(curr < $("#nav-R").position().top)
				changeNavIndicator("Q");
			else
				changeNavIndicator("R");
			curr = $("#nav-R").position().top;
		}	
		if($("#nav-S").position().top < 20 && $("#nav-S").position().top > -20)
		{
			if(curs < $("#nav-S").position().top)
				changeNavIndicator("R");
			else
				changeNavIndicator("S");
			curs = $("#nav-S").position().top;
		}	
		if($("#nav-T").position().top < 20 && $("#nav-T").position().top > -20)
		{
			if(curt < $("#nav-T").position().top)
				changeNavIndicator("S");
			else
				changeNavIndicator("T");
			curt = $("#nav-T").position().top;
		}	
		if($("#nav-U").position().top < 20 && $("#nav-U").position().top > -20)
		{
			if(curu < $("#nav-U").position().top)
				changeNavIndicator("T");
			else
				c

			curu = $("#nav-U").position().top;
		}	
		if($("#nav-V").position().top < 20 && $("#nav-V").position().top > -20)
		{
			if(curv < $("#nav-V").position().top)
				changeNavIndicator("U");
			else
				changeNavIndicator("V");
			curv = $("#nav-V").position().top;
		}	
		if($("#nav-W").position().top < 20 && $("#nav-W").position().top > -20)
		{
			if(curw < $("#nav-W").position().top)
				changeNavIndicator("V");
			else
				changeNavIndicator("W");
			curw = $("#nav-W").position().top;
		}	
		if($("#nav-X").position().top < 20 && $("#nav-X").position().top > -20)
		{
			if(curx < $("#nav-X").position().top)
				changeNavIndicator("W");
			else
				changeNavIndicator("X");
			curx = $("#nav-X").position().top;
		}	
		if($("#nav-Y").position().top < 20 && $("#nav-Y").position().top > -20)
		{
			if(cury < $("#nav-Y").position().top)
				changeNavIndicator("X");
			else
				changeNavIndicator("Y");
			cury = $("#nav-Y").position().top;
		}	
	    if($("#nav-Z").position().top < 20 && $
ï»¿jQuery.noConflict();
(function ($) {
	$(function () {
		$("#danny-nav-toggle").click(function () {
			if ($('body').hasClass('has-danny-nav')) {
				$("body").removeClass('has-danny-nav');
				$('.danny-nav').removeClass("in");
			}
			else {
				$("body").addClass('has-danny-nav');
				$('.danny-nav').addClass("in");
			}
		});
		$(".danny-nav .nav-dropdown").hover(function () {
			if (!$('body').hasClass('has-danny-nav')) {
				$(this).children("ul").fadeIn();
			}
		}, function () {
			if (!$('body').hasClass('has-danny-nav')) {
				$(this).children("ul").fadeOut();
			}
		});
		$(".danny-nav .nav-dropdown").click(function () {
			if ($('body').hasClass('has-danny-nav')) {
			    $(this).children("ul").toggle();
			}
		});
		$(window).resize(function () {
		    if($(window).width()>960)
		    {
		        $("body").removeClass('has-danny-nav');
		        $('.danny-nav').removeClass("in");
		        $("#danny-nav-toggle").hide();
		    }
		    else
		    {
		        $("#danny-nav-tog
var MESSAGE_NAMES = [
  "extensionName",
  "extensionDescription",
  "gplus_dateEdited",
  "gplus_dateLongPrefix",
  "gplus_dateLongSuffix",
  "gplus_dateLongSuffixReplacement",
  "gplus_permsLimited",
  "ui_posts_markAllReadButton",
  "ui_posts_expandAllButton",
  "ui_posts_collapseAllButton",
  "ui_posts_markReadButton",
  "ui_posts_muteButton",
  "options_nav_general_label",
  "options_nav_postStyle_label",
  "options_nav_showTopCollapseBarWhen",
  "options_nav_showTopCollapseBarWhen_always",
  "options_nav_showTopCollapseBarWhen_hover",
  "options_nav_showTopCollapseBarWhen_never",
  "options_nav_summary_label",
  "options_nav_summaryLines",
  "options_nav_summaryIncludeThumbnails",
  "options_nav_summaryIncludeTime",
  "options_nav_preview_label",
  "options_nav_previewEnableInExpanded",
  "options_nav_previewEnableInList",
  "options_nav_browserAction_label",
  "options_nav_browserActionOpensNewTab",
  "options_nav_pages_label",
  "options_nav_global_label",
  "options_nav_global
function navJS() {
    var nav = document.getElementsByTagName('nav');
    nav[0].className = 'navOff';
function toggleNav() {
    var header = document.getElementsByTagName('header');
    var nav = document.getElementsByTagName('nav');
    var navToggle = document.getElementById('navToggle')
    function getPositionValue(obj){
        if (obj.currentStyle) {
            return obj.currentStyle['position'];
        }
        else if (window.getComputedStyle) {
            var objStyle = window.getComputedStyle(obj, "");
            return objStyle.getPropertyValue('position');
        }
        else {
            return '-1'
        }
    }
    if (nav[0].className == 'navOff') {
        navToggle.className = 'toggleOn';
        if (getPositionValue(header[0]) == 'fixed') {
            nav[0].className = 'navFixed';
        }
        else {
            nav[0].className = 'navAbsolute';
        }
    }
    else {
        navToggle.className = 'toggleOff';
        nav[0].className = 'nav
var phonecatControllers = angular.module('phonecatControllers', ['templateservicemod', 'navigationservice', 'restservice']);
phonecatControllers.controller('home', ['$scope', 'TemplateService', 'NavigationService', 'RestService', '$http',
  function ($scope, TemplateService, NavigationService, RestService, $http) {
        $scope.template = TemplateService;
        $scope.menutitle = NavigationService.makeactive("Home");
        TemplateService.title = $scope.menutitle;
        $scope.navigation = NavigationService.getnav();
        TemplateService.content = "views/home.html";
  }]);
phonecatControllers.controller('about', ['$scope', 'TemplateService', 'NavigationService',
  function ($scope, TemplateService, NavigationService) {
        $scope.template = TemplateService;
        $scope.menutitle = NavigationService.makeactive("About");
        TemplateService.title = $scope.menutitle;
        $scope.navigation = NavigationService.getnav();
              TemplateService.content = "view

  }]);
phonecatControllers.controller('services', ['$scope', 'TemplateService', 'NavigationService',
  function ($scope, TemplateService, NavigationService) {
        $scope.template = TemplateService;
        $scope.menutitle = NavigationService.makeactive("Services");
        TemplateService.title = $scope.menutitle;
        $scope.navigation = NavigationService.getnav();
        TemplateService.content = "views/services.html";
  }]);
phonecatControllers.controller('contact', ['$scope', 'TemplateService', 'NavigationService',
  function ($scope, TemplateService, NavigationService) {
        $scope.template = TemplateService;
        $scope.menutitle = NavigationService.makeactive("Contact");
        TemplateService.title = $scope.menutitle;
        $scope.navigation = NavigationService.getnav();
        TemplateService.content = "views/contact.html";
  }]);
phonecatControllers.controller('headerctrl', ['$scope', 'TemplateService',
 function ($scope, TemplateService) {
        $scope
var express = require('express');
var router = express.Router();
var AuthService = require('../services/auth_service');
var UserService = require('../services/user_service');
var OrderService = require('../services/order_service');
var ProductService = require('../services/product_service');
var PlaceService = require('../services/place_service');
router.get('/', function(req, res) {
    res.json({
        message: 'welcome to use go2fish api'
    });
});
/************************* User API ***************************************/
router.post('/users', UserService.createUser);
router.get('/users/:user_email/:role_id', UserService.checkUserExist);
router.post('/auth', UserService.authenticate);
router.get('/users', [AuthService.checkToken , AuthService.checkAdminRole ], UserService.getAllUsers);
router.put('/users/:user_id', [AuthService.checkToken], UserService.updateUser);
router.delete('/users/:user_id', [AuthService.checkToken, AuthService.checkAdminRole], UserService.removeUser);
r

/************************* Order API ***************************************/
router.post('/orders/:user_id',[AuthService.checkToken] , OrderService.addOrder );
router.get('/orders/:user_id/:order_id?',[AuthService.checkToken] , OrderService.findOrder );
router.put('/orders/:user_id/:order_id',[AuthService.checkToken] , OrderService.updateOrder );
router.delete('/orders/:user_id/:order_id',[AuthService.checkToken] , OrderService.removeOrder );
/************************* Product API ***************************************/
router.get('/products', ProductService.getProducts);
router.post('/products',[AuthService.checkToken , AuthService.checkAdminRole], ProductService.addProduct);
router.put('/products/:product_id',[AuthService.checkToken, AuthService.checkAdminRole], ProductService.updateProduct );
router.delete('/products/:product_id',[AuthService.checkToken, AuthService.checkAdminRole], ProductService.removeProduct );
/************************* Place API *****************************
$(document).ready(function() {
  var $nav = $('nav');
  $('.fancybox').fancybox({
    beforeShow: function() { $nav.removeClass('active') },
    afterClose: function() { $nav.addClass('active') }
  });
  var setActiveNav = function(pos) {
    $nav.find('a').removeClass('active')
                  .filter(':eq(' + pos + ')')
                  .addClass('active');
  }
  $('#nav-trigger').waypoint({
    handler: function(dir) {
      dir === 'down' ?
        $nav.addClass('active'):
        $nav.removeClass('active');
    }
  });
  $('.nav-services').waypoint({
    handler: function(dir) {
      dir === 'down' ?
        setActiveNav(1):
        $nav.find('a').removeClass('active');
    }
  });
  $('.nav-about').waypoint({
    handler: function(dir) {
      dir === 'down' ?
        setActiveNav(2):
        setActiveNav(1);
    }
  });
  $('.nav-portfolio').waypoint({
    handler: function(dir) {
      dir === 'down' ?
        setActiveNav(3):
        setActiveNav(2);
    }
  });
  $('.nav-
test(
    "Basic Controller test",
    function() {
        var controller = new Jackalope.Client.Controller ({});
        ok(controller instanceof Jackalope.Client.Controller, "... we are an instance of Jackalope.Client.Controller");
        ok(!controller.has_context(), '... no context for this controller');
        var context = {};
        controller.bind('update:context', function (c, ctx) {
            ok(c === controller, '... got passed the controller instance');
            ok(ctx === context, '... got passed the context we set');
        });
        controller.bind('clear:context', function (c) {
            ok(c === controller, '... got passed the controller instance');
        });
        controller.set_context( context );
        ok(controller.has_context(), '... we now have context for this controller');
        ok(controller.get_context() === context, '... got have the context we set');
        controller.clear_context();
        ok(!controller.has_context(), '... no con
'use strict';
tatool
  .controller('tatoolChoiceReactionCtrl', [ '$scope', 'service',
    function ($scope, service) {
    $scope.stimulusService = service.stimulusService;
    $scope.inputService = service.inputService;
    $scope.start = function() {
      service.createStimulus();
      service.inputService.enable();
      if (service.showKeys.propertyValue === true) {
        service.inputService.show();
      }
      if (service.timerEnabled.propertyValue === true) {
        service.timer.start(timerUp);
      }
      service.startTime = service.stimulusService.show();
    };
    function timerUp() {
      service.inputService.disable();
      service.endTime = service.stimulusService.hide();
      service.processResponse('');
    }
    $scope.inputAction = function(input, timing, event) {
      service.inputService.disable();
      service.timer.stop();
      service.inputService.hide();
      service.stimulusService.hide();
      service.endTime = timing;
      service.processRe
/**
 * Created by chagen on 5/19/16.
 */
(function () {
    'use strict';
    var navCtrl = function($state, NavService, NAV_LINKS) {
        var vm = this;
        vm.links = NAV_LINKS;
console.log("NAV SERVICE", NavService)
        vm.go = function (state) {
            NavService.activeState = state;
            $state.go(state);
        };
        vm.isActiveState = function(currentTab) {
            return NavService.activeState === currentTab;
        } ;
    };
    angular.module('movieApp')
        .component('movieNav', {
            templateUrl: 'app/components/nav/nav.html',
            controller: navCtrl,
            controllerAs: 'nav'
        })
        .service('NavService', function (NAV_LINKS) {
            this.activeState = NAV_LINKS.UPCOMING;
        })
        .constant("NAV_LINKS", {
            "HOME": "upcoming",
            "FAVORITES": "favorites",
            "IN_THEATRES": "now-playing",
            "TOP_RATED": "top-rated",
            "UPCOMING": "upcomin
var GPXMapsControllers = angular.module('GPXMapsControllers', ['ui.grid', 'ui.grid.selection', 'ui.grid.edit']);
var commonDependencies = [ '$rootScope', '$scope', '$http', '$timeout']; 
var controllers = [
	['GodController', [GodController]],
	['ModalController', [ModalController]],
	['UserActivationController', [UserActivationController]],
	['LoginController', [LoginController]],
	['GpxImportController', [GpxImportController]],
	['GpxExportController', [GpxExportController]],
	['GpxDatabaseController', [GpxDatabaseController]],
	['GpxController', [GpxController]],
	['GpxEditorController', [GpxEditorController]],
	['TracksController', [TracksController]],
	['ElevationPlotController', [ElevationPlotController]],
	['MapController', [MapController]],
	['WaypointsController', [WaypointsController]],
	['HelpController', [HelpController]],
];
controllers.forEach(function(ctrl) { 
	GPXMapsControllers.controller(ctrl[0], commonDependencies.concat(ctrl[1]));
});
var appName = 'GPXMapsApp';
var
/* global window, document, require, QUnit */
var benv = require('benv');
var Q = require('q');
QUnit.module('angular service overrides', {
  setup: function () {
    var defer = Q.defer();
    benv.setup(function () {
      defer.resolve();
    });
    return defer.promise;
  },
  teardown: function () {
    benv.teardown();
  }
});
QUnit.test('environment sanity check', function () {
  QUnit.object(window, 'window object exists');
  QUnit.object(document, 'document object exists');
});
QUnit.test('last service overrides by default', function () {
  var angular = benv.require('../bower_components/angular/angular.js', 'angular');
  var module = angular.module('A', []);
  var ServiceA = function () {
    this.name = 'ServiceA';
  };
  var ServiceB = function () {
    this.name = 'ServiceB';
  };
  module.service('someService', ServiceA);
  module.service('someService', ServiceB);
  var someService = angular.injector(['ng', 'A']).get('someService');
  QUnit.equal(someService.name, 'Servi

  module.service('someService');
  QUnit.throws(function() {
    angular.injector(['ng', 'A']).get('someService');
  }, 'Error');
  module.value('someService', new ServiceA());
  someService = angular.injector(['ng', 'A']).get('someService');
  QUnit.equal(someService.name, 'ServiceA', 'someService -> third service');
  module.factory('someService', function () {
    return new ServiceB();
  });
  someService = angular.injector(['ng', 'A']).get('someService');
  QUnit.equal(someService.name, 'ServiceB', 'someService -> fourth service');
  module.provider('someService', function () {
    this.$get = function () {
      return new ServiceA();
    };
  });
  someService = angular.injector(['ng', 'A']).get('someService');
  QUnit.equal(someService.name, 'ServiceA', 'someService -> fifth service');
});
QUnit.test('stop angular service override', function () {
  var angular = benv.require('../bower_components/angular/angular.js', 'angular');
  benv.require('../stop-angular-overrides.js');
 

  QUnit.throws(function () {
    angular.module('A2', []).service('someService', function () {});
  }, 'Error');
});
QUnit.test('stop angular service (value) override', function () {
  var angular = benv.require('../bower_components/angular/angular.js', 'angular');
  benv.require('../stop-angular-overrides.js');
  angular.module('A1', []).service('someService', function () {});
  QUnit.throws(function () {
    angular.module('A2', []).value('someService', {});
  }, 'Error');
});
QUnit.test('stop angular service (factory) override', function () {
  var angular = benv.require('../bower_components/angular/angular.js', 'angular');
  benv.require('../stop-angular-overrides.js');
  angular.module('A1', []).service('someService', function () {});
  QUnit.throws(function () {
    angular.module('A2', []).factory('someService', function () {});
  }, 'Error');
});
QUnit.test('stop angular service (provider) override', function () {
  var angular = benv.require('../bower_components/angular/angul

  benv.require('../stop-angular-overrides.js');
  angular.module('A1', []).service('someService', function () {});
  QUnit.throws(function () {
    angular.module('A2', []).provider('someService', function () {});
  }, 'Error');
});
QUnit.test('stops service overrides with undefined', function () {
  var angular = benv.require('../bower_components/angular/angular.js', 'angular');
  benv.require('../stop-angular-overrides.js');
  var module = angular.module('A', []);
  module.service('someService', function () {});
  QUnit.throws(function() {
    module.service('someService');
  }, 'Error');
});
QUnit.test('default behavior is not changed for initial service definition', function () {
  var angular = benv.require('../bower_components/angular/angular.js', 'angular');
  benv.require('../stop-angular-overrides.js');
  var module = angular.module('A', []);
  function SomeService () {
    this.name = 'SomeService';
  }
  module.service('someService', SomeService);
  var someService = angula
var searchData=
  ['generatepages',['generatePages',['../class_api_v2.html#a325edb704b90b2376688b358fb6946c5',1,'ApiV2']]],
  ['getaccesstoken',['getAccessToken',['../class_api_v2.html#a5d251c70a3f9f9daaff7f00ec5f894c0',1,'ApiV2']]],
  ['getaccessurl',['getAccessUrl',['../class_api_v2.html#a74dfd0426bba5e9d802e792f7e237aeb',1,'ApiV2']]],
  ['getaccount',['getAccount',['../class_api_v2.html#a83e687e383946e8babc88e5a7a9c0f10',1,'ApiV2']]],
  ['getaccountplans',['getAccountPlans',['../class_api_v2.html#a762d6e8f31821a021e2a2151056e2708',1,'ApiV2']]],
  ['getaccounts',['getAccounts',['../class_api_v2.html#abb36346f124b472c4b9d9796fd1c402c',1,'ApiV2']]],
  ['getaccountsbyexternalid',['getAccountsByExternalId',['../class_api_v2.html#a4b955c2ef7ea20b2058c9a562d7aaa27',1,'ApiV2']]],
  ['getcontainerfields',['getContainerFields',['../class_api_v2.html#acec10f0cee1c157041b4e73891c21de1',1,'ApiV2']]],
  ['getcontainers',['getContainers',['../class_api_v2.html#ad5f4ad0a11e9ebb777fa5c3003e3ec1e',1,

  ['getdataitems',['getDataItems',['../class_api_v2.html#a63961b4aaac50bf79f513976ab25c86a',1,'ApiV2']]],
  ['getgeneratepagesstatus',['getGeneratePagesStatus',['../class_api_v2.html#aa3c89f1e4cf6a3211d125e8bbcf4fceb',1,'ApiV2']]],
  ['getlocationitem',['getLocationItem',['../class_api_v2.html#ad972790f096dfcfeb8ba065cba77d863',1,'ApiV2']]],
  ['getlocationsets',['getLocationSets',['../class_api_v2.html#a4c6395879efb125e0ab51d52464ccb61',1,'ApiV2']]],
  ['getloyaltybonusactions',['getLoyaltyBonusActions',['../class_api_v2.html#abb8a2694fc5fa693cd9b153ac3273175',1,'ApiV2']]],
  ['getloyaltyemployees',['getLoyaltyEmployees',['../class_api_v2.html#ac85a0491546b0ffd078aa9291a5c40a8',1,'ApiV2']]],
  ['getloyaltymember',['getLoyaltyMember',['../class_api_v2.html#a31d7cfe1e3448285f85319700a2cfe7e',1,'ApiV2']]],
  ['getloyaltymembers',['getLoyaltyMembers',['../class_api_v2.html#aff34aa4a1d4947cb6e6bdf715dd358ba',1,'ApiV2']]],
  ['getloyaltyrewards',['getLoyaltyRewards',['../class_api_v2.html#
var serviceModule = (function() {
    var s;
    function serviceShow() {
        s.serviceContainer.show(1);
        s.serviceBelt.css('left', '-100%');
    }
    function serviceHide() {
        s.serviceBelt.css('left', '0%');
        s.serviceContainer.hide(2000);
    }
    function scrollToTop() {
        $('html, body').animate({
            scrollTop: s.serviceSection.offset().top
        }, s.scrollToTopSpeed);
    }
    function loadService(target) {
        var target = $(target).attr('href');
        s.serviceContainer.load(target);
    }
    function bindUIactions() {
        s.serviceLink.on('click', function(event) {
            event.preventDefault();
            loadService(event.target);
            serviceShow();
            scrollToTop();
        });
        s.serviceContainer.on('click', function() {
            serviceHide();
        });
    }
    return {
        settings: {
            serviceSection: $('.service'),
            serviceContainer: $('.service-conta
$(document).ready(function() {
  var desiredServices = ['apache2'
    ,'coldfusion_10'
    ,'mysql','mysqld'
    ,'grunt-watch-buildstore'
    ,'httpd'
    ,'postfix'
    ,'memcached'
  ];
  $.ajax('/ajax/serviceList', {
    success:function(services) {
      var targetServices= [];
      if (services) {
        for(var i=0; i<desiredServices.length; i++) {
          for(var j=0; j<services.length; j++) {
            if(desiredServices[i] === services[j]) {
              targetServices.push(services[j]);
              break;
            }
          }
        }
        createControls(targetServices);
      }
    }
  });
  function updateServiceStatusDisplay(service, data) {
    if (typeof data.running === 'undefined') {
      alert('doh!');
    } else {
      $('#service-'+service).toggleClass('running', data.running).toggleClass('stopped', !data.running);
    }
  }
  function serviceStarted(service, data) {
    appendToServiceConsole(data.output);
    serviceRequest(service, 'status', 

  }
  function serviceStopped(service, data) {
    appendToServiceConsole(data.output);
    serviceRequest(service, 'status', updateServiceStatusDisplay);
  }
  function serviceRestarted(service, data) {
    appendToServiceConsole(data.output);
    serviceRequest(service, 'status', updateServiceStatusDisplay);
  }
  function createControls(services) {
    $actionsList = $('ul.actions');
    for (var i=0; i < services.length; i++) {
      var service = services[i];
      $actionsList.append('<li class="service-'+service+'" id="service-'+service+'"><img class="start" src="/asset/start.png" alt="Start" /><img class="stop" src="/asset/stop.png" alt="Stop" /><img class="restart" src="/asset/restart.png" alt="Restart" /><strong>'+service+'</strong></li>');
      $service = $actionsList.children('.service-'+service);
      serviceRequest(service, 'status', updateServiceStatusDisplay);
      $service.on('click', {service: service}, function(event) {
        $('#service-'+event.data.service).t

        serviceRequest(event.data.service, 'status', updateServiceStatusDisplay);
      });
      $service.children('.start').on('click', {service: service}, function(event) {
        serviceRequest(event.data.service, 'start', serviceStarted);
      });
      $service.children('.stop').on('click', {service: service}, function(event) {
        serviceRequest(event.data.service, 'stop', serviceStopped);
      });
      $service.children('.restart').on('click', {service: service}, function(event) {
        serviceRequest(event.data.service, 'restart', serviceRestarted);
      });
      setInterval(function(service) {
        serviceRequest(service, 'status', updateServiceStatusDisplay);
      }, 5000, service);
    }
  }
  function serviceRequest(service, request, callback, failCallback) {
    $.ajax('/ajax/service/'+service+'/'+request, {
      success:function(data) {
        if (data.success) {
          callback(service, data);
        } else {
          if ( failCallback ) {
      
Ext.application({
	requires : [ 'Ext.container.Viewport'],
    name: 'scholar',
    autoCreateViewport: true,
    
    /*launch: function() {
        Ext.create('Ext.container.Viewport', {
            layout: 'fit',
            items: [
                {
                    title: 'Scholar',
                    html : 'Hello! Welcome to Scholar.'
                }
            ]
        });
    }*/
    
    controllers: [
                  'Scholar',
                  'scholar.controller.administration.DashboardController',
                  'scholar.controller.administration.settings.batch.Controller',
                  'scholar.controller.administration.settings.department.Controller',
                  'scholar.controller.administration.settings.course.Controller',
                  'scholar.controller.administration.settings.general.Controller',
                  'scholar.controller.administration.settings.subject.Controller',                  
                  'scholar.controller.

                  'scholar.controller.administration.inventory.infra.Controller',
                  'scholar.controller.administration.inventory.perishable.Controller',                  
                  'scholar.controller.administration.user.roles.Controller',
                  'scholar.controller.administration.user.Controller',
                  
                  'scholar.controller.finance.fees.Controller',
                  'scholar.controller.finance.payroll.Controller',
                  'scholar.controller.finance.settings.general.Controller',
                  
                  'scholar.controller.library.lookup.Controller',
                  
                  'scholar.controller.staff.examination.schedule.Controller',
                  'scholar.controller.staff.examination.settings.Controller',                  
                  'scholar.controller.staff.attendance.Controller',
                  'scholar.controller.staff.event.Controller',
                  'scholar.co
/**
 * Created by Zack on 4/18/2015.
 */
(function() {
  'use strict';
  define([
    'angular',
    'relatify.app.playlist/playlist',
    'relatify.app.services/possiblesongsservice',
    'relatify.app.services/previewsongservice',
    'relatify.app.services/relatedartistsservice',
    'relatify.app.services/spotifyuserservice',
    'relatify.app.services/spotifyplaylistservice'
  ], function (
    angular,
    PlaylistController,
    PossibleSongsService,
    PreviewSongService,
    RelatedArtistsService,
    SpotifyUserService,
    SpotifyPlaylistService
  ) {
    return angular.module('relatifyApp.controllers.PlaylistCtrl', ['spotify'])
      .controller('PlaylistCtrl', PlaylistController)
      .service('PossibleSongsService', PossibleSongsService)
      .service('PreviewSongService', PreviewSongService)
      .service('RelatedArtistsService', RelatedArtistsService)
      .service('SpotifyUserService', SpotifyUserService)
      .service('SpotifyPlaylistService', SpotifyPlaylistSer
/**
 * Chrome-Extension-Template v1.0
 *
 * @author Dustin Breuer <dustin.breuer@thedust.in>
 * @version 1.0
 * @category chrome-extension
 */
/**
 * A simple message to communicate with scripts
 * @constructor
 */
function Message() {
    /**
     * The Type of the message
     * @type {string}
     * @readonly
     */
    this.type = "undefined";
/**
 * The Type of the message
 *
 * @type {string}
 * @readonly
 */
Message.Type = "undefined";
/**
 * A cache-object for message-type to messages
 *
 * @type {Object.<String, Message>}
 * @private
 */
Message.__types = {};
/**
 * Compare the message types(!) of message <i>this</i> and the message <i>oMessage</i>
 * This is not a deep compare
 *
 * @param {Message} oMessage
 *
 * @returns {boolean}
 */
Message.prototype.isEqual = function (oMessage) {
    return this.type === oMessage.type;
};
/**
 * Create a new Message-Type (Factory)
 *
 * @param {String} sMessageType The message type as String
 * @param {Object.<String, *>} [mDefaultValu

 *
 * @returns {Message}
 *
 * @throws {Message.DuplicatedMessageTypeException}
 */
Message.createMessageType = function (sMessageType, mDefaultValues) {
    if (Message.__types[sMessageType]) {
        throw Message.DuplicatedMessageTypeException.createWithMessageType(sMessageType);
    }
    /**
     *
     * @extends {Message}
     * @private
     */
    function ExtendedMessage() {
        Message.call(this);
        this.type = sMessageType;
        if (mDefaultValues) {
            for (var _sKey in mDefaultValues) {
                this[_sKey] = mDefaultValues[_sKey];
            }
        }
    }
    ExtendedMessage.Type = sMessageType;
    ExtendedMessage.prototype = Object.create(Message.prototype);
    ExtendedMessage.prototype.constructor = ExtendedMessage;
    Message.__types[sMessageType] = ExtendedMessage;
    return ExtendedMessage;
};
/**
 * Create a Message from type <i>sMessageType</i>
 *
 * @param {String} sMessageType
 *
 * @returns {Message}
 *
 * @throws {Messag

 */
Message.createMessageByType = function (sMessageType) {
    if (!Message.__types[sMessageType]) {
        throw Message.UnknownMessageTypeException.createWithMessageType(sMessageType);
    }
    return new Message.__types[sMessageType];
};
/**
 * Create a Message by a postMessage-Object
 *
 * @param {Object.<String, *>} oPlainObject
 *
 * @returns {Message}
 */
Message.createMessageByPlainObject = function (oPlainObject) {
    if (!oPlainObject.type) {
        throw new ReferenceError("No property 'type' found in Object");
    }
    var _sType = oPlainObject.type;
    delete oPlainObject.type;
    return Message.createMessage(_sType, oPlainObject);
};
/**
 * Create a Message from type <i>sMessageType</i> with the values <i>mValues</i>
 *
 * @param {String} sMessageType The message type as String
 * @param {Object.<String, *>} [mValues=null]
 *
 * @returns {Message}
 *
 * @throws {Message.UnknownMessageTypeException} Unknown message type
 */
Message.createMessage = function (sMessa
document.onkeydown = init;
function init(_event_)
	var intKeyCode = _event_.keyCode;
	switch (intKeyCode)
	{
		case 39:
			navigation("droite");
			break;
		case 37:
			navigation("gauche");
			break;
		case 49:
			navigation("gauche2");
			break;
		case 50:
			navigation("droite2");
			break;
	}
};
function navigation(navDir)
	var urlNav = window.location.href;
	if (navDir == "droite")
	{
		if (urlNav.charCodeAt(17) == 122)
		{
			localStorage['newUrlNav'] = newUrlNav;
			window.location = newUrlNav;
		}
		else if (urlNav.charCodeAt(17) == 90)
		{
			localStorage['newUrlNav'] = newUrlNav;
			window.location = newUrlNav;
		}
		else if (urlNav.charCodeAt(17) == 57)
		{
			localStorage['newUrlNav'] = newUrlNav;
			window.location = newUrlNav;
		}
		else
		{
			localStorage['newUrlNav'] = newUrlNav;
			window.location = newUrlNav;
		}
	}
	else if (navDir == "gauche")
	{
		if (urlNav.charCodeAt(17) == 65)
		{
			localStorage['newUrlNav'] = newUrlNav;
			window.location = newUrlNav;
		}
		e

		{
			localStorage['newUrlNav'] = newUrlNav;
			window.location = newUrlNav;
		}
		else if (urlNav.charCodeAt(17) == 97)
		{
			localStorage['newUrlNav'] = newUrlNav;
			window.location = newUrlNav;
		}
		else
		{
			localStorage['newUrlNav'] = newUrlNav;
			window.location = newUrlNav;
		}
	}
	else if (navDir == "droite2")
	{
		if (urlNav.charCodeAt(17) == 122)
		{
			localStorage['newUrlNav'] = newUrlNav;
			window.location = newUrlNav;
		}
		else if (urlNav.charCodeAt(17) == 121)
		{
			localStorage['newUrlNav'] = newUrlNav;
			window.location = newUrlNav;
		}
		else if (urlNav.charCodeAt(17) == 90)
		{
			localStorage['newUrlNav'] = newUrlNav;
			window.location = newUrlNav;
		}
		else if (urlNav.charCodeAt(17) == 89)
		{
			localStorage['newUrlNav'] = newUrlNav;
			window.location = newUrlNav;
		}
		else if (urlNav.charCodeAt(17) == 57)
		{
			localStorage['newUrlNav'] = newUrlNav;
			window.location = newUrlNav;
		}
		else if (urlNav.charCodeAt(17) == 56)
		{
			localStorage['n
var api = angular.module('ApiServices', []);
api.factory('DribbbleFactory', ['$http', function($http){
    var apiInterface = {};
    apiInterface.get = function (page) {
        return $http.get('/api/dribbble?page=' + page);
    };
    return apiInterface;
}]);
api.factory('BehanceFactory', ['$http', function($http){
    var apiInterface = {};
    apiInterface.get = function (page) {
        return $http.get('/api/behance?page=' + page);
    };
    return apiInterface;
}]);
api.factory('PxFactory', ['$http', function($http){
    var apiInterface = {};
    apiInterface.get = function (page) {
        return $http.get('/api/500px?page=' + page);
    };
    return apiInterface;
}]);
api.factory('FavoritesFactory', ['$http', function($http){
    var apiInterface = {};
    apiInterface.get = function () {
        return $http.get('/api/favorites');
    };
    apiInterface.add = function (data) {
        return $http.post('/api/favorites', {favorite: data});
    };
    return apiInterface;
"use strict";
var _ = require("underscore");
var check = require("./exceptions").create("serviceTracker");
module.exports = function (service, binder) {
    check.notNull(service, "service");
    check.notNull(binder, "binder");
    var handler = function (otherService) {
        if (otherService !== service) {
            binder.bind(otherService);
        }
    };
    var stopHandler = function (otherService) {
        if (otherService !== service) {
            binder.unbind(otherService);
        }
    };
    var started = false;
    this.start = function (context) {
        if (!started) {
            started = true;
            _.each(service.consumes(), function (e) {
                context.findServices(e.serviceClass, handler);
            });
            context.on("serviceStarted", handler);
            context.on("serviceStopped", stopHandler);
        }
    };
    this.stop = function (context) {
        if (started) {
            context.removeListener("serviceStarted", h
ï»¿var pageNav=pageNav||{};
pageNav.fn=null;
pageNav.pageNavId="pageNav"
pageNav.pre="pre";
pageNav.next="next";
pageNav.url="<a href='javascript:pageNav.go(";
pageNav.nav=function(a,b){
	/* if b <= 1 . */
	if(b < 1)return "";
	this.pn=this.p=1,this.pHtml2(1);
	b<a&&(a=b);
	var c="";1>=a?a=1:(c+=this.pHtml(a-1,b,pageNav.pre),c+=this.pHtml(1,b,"1"));
	this.p=a;this.pn=b;
	var d=2,e=9>b?b:9;7<=a&&(c+="...",d=a-4,e=a+4,e=b<e?b:e);
	for(;d<a;d++)c+=this.pHtml(d,b);c+=this.pHtml2(a);
	for(d=a+1;d<=e;d++)c+=this.pHtml(d,b);
	e<b&&(c=c+"..."+this.pHtml(b,b));
	a<b&&(c+=this.pHtml(a+1,b,pageNav.next));return c};
pageNav.pHtml=function(a,b,c){
	/* æ¾ç¤ºurl. */
	if(pageNav.url.indexOf("javascript:")>0){
		return" "+pageNav.url+a+","+b+");' class='pageNum'>"+(c||a)+"</a> ";
	}else{
		var str_url = pageNav.url.replace(/{index}/,a);
		return" <a href='"+str_url+"' class='pageNum'>"+(c||a)+"</a> ";
	}
};
pageNav.pHtml2=function(a){
	return" <span class='cPageNum'>"+a+"</span> "};
pageNav.go=function(a,b)
define(
    [
        './selfController',
        './selfEditController',
        './timesheet/timesheetController',
        './timesheet/timesheetOverviewController',
        './vacation/listController',
        './vacation/newController',
        './address_book/addressBookController',
        './sick_days/sickDaysController',
        './sick_days/sickDaysEditController'
    ],
    function(SelfController, SelfEditController, TimeSheetController, TimesheetOverviewController, VacationListController,
             VacationNewController, AddressBookController, SickDaysController, SickDaysEditController) {
        'use strict';
        return {
            init: function(module) {
                module.controller('trackr.employee.controllers.self', SelfController);
                module.controller('trackr.employee.controllers.self-edit', SelfEditController);
                module.controller('trackr.employee.controllers.timesheet', TimeSheetController);
                module.controller
var nav_8c =
    [ "FAILSAFE_HOME_RADIUS", "nav_8c.html#abb778e487ebe98aedea7858361496264", null ],
    [ "Goto3D", "nav_8c.html#a2a52a892a193bd2f3d2f86d1b1ded87e", null ],
    [ "LINE_START_FUNCTION", "nav_8c.html#a86a682e52e440368e6ca96062ef7563f", null ],
    [ "LINE_STOP_FUNCTION", "nav_8c.html#a2788d8683c98c074cb18680dc2eea0af", null ],
    [ "MAX_DIST_CARROT", "nav_8c.html#ab1ea324968aaab7cb5e252bd5f22e76c", null ],
    [ "MAX_HEIGHT_CARROT", "nav_8c.html#a34e95d63fe245178d74b11e75a53811d", null ],
    [ "MIN_DX", "nav_8c.html#a17976ef29f2f34221836e877f4712d19", null ],
    [ "MIN_HEIGHT_CARROT", "nav_8c.html#aa39efd810919cc75b7892bd6e6e37b44", null ],
    [ "NAV_C", "nav_8c.html#a291c0fda2fd988bf5f602f56157ab2b7", null ],
    [ "NAV_GLIDE_PITCH_TRIM", "nav_8c.html#ae41368935fe1a9081b0c663d37f227e0", null ],
    [ "NavFollow", "nav_8c.html#a8691e5b760e30c9091d5a981d3663441", null ],
    [ "NavGlide", "nav_8c.html#aa7303abf34661cdf531cce2f4fddfe86", null ],
    [ "PowerVoltage", "

    [ "RCLost", "nav_8c.html#ac3892fe123b99e805c0c5d5b1b4cd144", null ],
    [ "RcRoll", "nav_8c.html#a7c6d9ca050122212a8a269e08f8c23f2", null ],
    [ "eight_status", "nav_8c.html#aab42b8493c217be79eb8f2523b6aed32", [
      [ "R1T", "nav_8c.html#aab42b8493c217be79eb8f2523b6aed32abe183b30b1054c0977b12028d7a38ae0", null ],
      [ "RT2", "nav_8c.html#aab42b8493c217be79eb8f2523b6aed32a64f284f7c34d2b28e318b452acd38672", null ],
      [ "C2", "nav_8c.html#aab42b8493c217be79eb8f2523b6aed32a5e602f1d68586231698bda7be6af7d2e", null ],
      [ "R2T", "nav_8c.html#aab42b8493c217be79eb8f2523b6aed32ac3a5bc8a5c131d8463ba354e54b2305b", null ],
      [ "RT1", "nav_8c.html#aab42b8493c217be79eb8f2523b6aed32a6975c28de6cfc40ea7b0a60d2bad7953", null ],
      [ "C1", "nav_8c.html#aab42b8493c217be79eb8f2523b6aed32ae54c31a855b907f263d49edcdbe677bd", null ]
    ] ],
    [ "compute_TOD", "nav_8c.html#ad9cc0030bdcfa2192dda22875ca68934", null ],
    [ "fly_to_xy", "nav_8c.html#ae9d11d2e378b23ecbee86419cbf341f0"

    [ "nav_approaching_xy", "nav_8c.html#a771b907350b836982ba4e31fd4bcbf4b", null ],
    [ "nav_circle_XY", "nav_8c.html#ad1b9d2e8da4a32477ca8bedc0bca86fe", null ],
    [ "nav_compute_baseleg", "nav_8c.html#ad18f254456d7f982064ea9e36b29ed93", null ],
    [ "nav_compute_final_from_glide", "nav_8c.html#a7a738c44a399a9103371dc53dfabc9dc", null ],
    [ "nav_eight", "nav_8c.html#a289c72677bdc1d6a83aa2cd266335601", null ],
    [ "nav_eight_init", "nav_8c.html#ae9a835aee8c0898c8c5c65190d0b30bc", null ],
    [ "nav_follow", "nav_8c.html#a51583ee86b14f2a389b28f2641c4e010", null ],
    [ "nav_home", "nav_8c.html#a069e6b8f68b2e117cbbe03f29e30a2e3", null ],
    [ "nav_init", "nav_8c.html#a64a3814d1672e69989f80701a0ff5749", null ],
    [ "nav_init_stage", "nav_8c.html#a2580ee456d7dd3d157fd7c43ad2eac2d", null ],
    [ "nav_oval", "nav_8c.html#ae660519c2f89e1c5f9aac7877f1e46e6", null ],
    [ "nav_oval_init", "nav_8c.html#aa602ef7f7d2e485655a7cc97a35b80c3", null ],
    [ "nav_periodic_task", "nav_8

    [ "nav_route_xy", "nav_8c.html#ab4247c9f3dc0417690e1404add032cbe", null ],
    [ "nav_set_altitude", "nav_8c.html#afe6d4a5dd1de94f57126d27a6baac58f", null ],
    [ "nav_without_gps", "nav_8c.html#ab746572e63956a2ad40674328a85b029", null ],
    [ "baseleg_out_qdr", "nav_8c.html#a09096c05260cf7f225d988b6297168c0", null ],
    [ "carrot_x", "nav_8c.html#a2bece6794aadefe30136dcd27b721f53", null ],
    [ "carrot_y", "nav_8c.html#a433f78b82598ad1380701b8b4e376632", null ],
    [ "circle_bank", "nav_8c.html#a421ee656b2e10a372b13bddc4bf546b3", null ],
    [ "desired_x", "nav_8c.html#a88f523b73a294f7cb312604f212c21ab", null ],
    [ "desired_y", "nav_8c.html#ab7d49633159601ed2eaa65f23d612805", null ],
    [ "eight_status", "nav_8c.html#af4a85437e319605798991baf6a5c1b4b", null ],
    [ "flight_altitude", "nav_8c.html#a1612ea0e1474e49b800cb3f497096523", null ],
    [ "fp_pitch", "nav_8c.html#a737a463b508f62286a0e62c5ed5648b4", null ],
    [ "horizontal_mode", "nav_8c.html#ad2a5195a657a7961bf

    [ "last_wp", "nav_8c.html#a280519e0d643e2e7ec41137b887d0b31", null ],
    [ "last_x", "nav_8c.html#ab2e97613bcf8e5721e639812c7a3469a", null ],
    [ "last_y", "nav_8c.html#a38c13a13ef3e5a3b6480f71bf244e668", null ],
    [ "nav_altitude", "nav_8c.html#a67342fe7d0a993249d4b4cd0e20821ce", null ],
    [ "nav_carrot_leg_progress", "nav_8c.html#a078073ebb9597d93882d2f58d0b69ca4", null ],
    [ "nav_circle_radians", "nav_8c.html#ae53708a0be0d9df410749c81a8458d6f", null ],
    [ "nav_circle_radians_no_rewind", "nav_8c.html#aa12872e504eb6e366acf1b7d29708431", null ],
    [ "nav_circle_radius", "nav_8c.html#a3e545eca284b674d03e90c15f58e1ff4", null ],
    [ "nav_circle_trigo_qdr", "nav_8c.html#aa10361692f333adcd1ccfd84ff1d0974", null ],
    [ "nav_circle_x", "nav_8c.html#ac1af27920d41a6dbc343fc1d7f55e08c", null ],
    [ "nav_circle_y", "nav_8c.html#a7b01191b794559f9d485b67c2be62c39", null ],
    [ "nav_climb", "nav_8c.html#a45139c6cf4dbda18870cf748337fbea7", null ],
    [ "nav_course", "nav_

    [ "nav_glide_pitch_trim", "nav_8c.html#a0ac0aec8bffae1d911b4f2fa5e2be72b", null ],
    [ "nav_ground_speed_pgain", "nav_8c.html#a4088688165aca8cabadaf45fb0b44643", null ],
    [ "nav_ground_speed_setpoint", "nav_8c.html#aeaf31d3e1ac7e38949cd2b45ea2ce21e", null ],
    [ "nav_in_circle", "nav_8c.html#a3d597a1b316fdba0db5701a03ad56c7b", null ],
    [ "nav_in_segment", "nav_8c.html#a70c77743e83862b67b86056fcc80a8ec", null ],
    [ "nav_leg_length", "nav_8c.html#aacf1866dff03a2d6eba27ddefae85636", null ],
    [ "nav_leg_progress", "nav_8c.html#a620eee3565104705439b86c0011d5ce5", null ],
    [ "nav_mode", "nav_8c.html#a100095dcf201264924107b608a3ed5cd", null ],
    [ "nav_oval_count", "nav_8c.html#a3f8eab6736191ca3d1cb16738cbcf97f", null ],
    [ "nav_pitch", "nav_8c.html#ac1ac32b055c0a7879329346b1662f313", null ],
    [ "nav_radius", "nav_8c.html#a4e73a18879f679277a72ef00250e359e", null ],
    [ "nav_segment_x_1", "nav_8c.html#a8b5c072e3f61f9025578e3e6283ffcb1", null ],
    [ "nav_segm

    [ "nav_segment_y_1", "nav_8c.html#aa04e457095198f649868d28f72969029", null ],
    [ "nav_segment_y_2", "nav_8c.html#a2992c5b1e4da4284068a225e451877a4", null ],
    [ "nav_shift", "nav_8c.html#aae62d3a760ee0f535ee7bf9131df6d9c", null ],
    [ "nav_survey_active", "nav_8c.html#a68393cb43ffff9bfff53cce34d108e38", null ],
    [ "nav_survey_east", "nav_8c.html#a1709471dbc0af61015c59e136100e118", null ],
    [ "nav_survey_north", "nav_8c.html#a4bd5ccc05012fbe9ba362b941aea7294", null ],
    [ "nav_survey_shift", "nav_8c.html#ad07af37c66417d0eac97740c696ace0d", null ],
    [ "nav_survey_south", "nav_8c.html#a5bd732618e35c5a855ef4e0549f733f0", null ],
    [ "nav_survey_west", "nav_8c.html#aeb19008e34a80086cfcb00ae5ae32fdd", null ],
    [ "nav_throttle_setpoint", "nav_8c.html#a5eb16c9d058ba78537ddf42c2ace1075", null ],
    [ "oval_status", "nav_8c.html#a80cf41be180b9c15f127bcbee731fb9b", null ],
    [ "rc_pitch", "nav_8c.html#ad1a9450df5c62410ea50a3e36aa963f1", null ],
    [ "unit", "nav_8c
'use strict';
angular.module('app.directives', [])
    .directive('searchbox', ['SearchService', function (SearchService) {
       return {
                restrict: "E",
                templateUrl: "partials/directives/searchbox.html",
                controller: function($scope){                
                    $scope.service = SearchService;                
                    $scope.submit = function(){                  
                      SearchService.search();
                    };
                }            
            };
    }])
    .directive('stats',[function() {
        return {
            restrict: "E",
            templateUrl: "partials/directives/stats.html",
            controller: ['$scope','SearchService',function ($scope,SearchService) {                
                $scope.SearchService = SearchService;
            }]
        };
    }])
    .directive('pages', [function () {
        return {
            restrict: "E",
            templateUrl: "partial

            controller: ['$scope', 'SearchService', function($scope, SearchService) {
                $scope.service = SearchService;
            }]
        };
    }])
    .directive('navbar', [function () {
        return {
            restrict: "E",
            templateUrl: "partials/directives/navbar.html",
            transclude: true
        };
    }])
    .directive('facets', [function () {
        return {
            restrict: "E",
            templateUrl: "partials/directives/facets.html",
            controller: ['$scope', 'SearchService', function($scope, SearchService) {
                $scope.SearchService = SearchService;
            }]
        };
    }])
    .directive('suggestions', ['SearchService', function (SearchService) {
        return {
            restrict: "E",
            templateUrl: "partials/directives/suggestions.html",
            controller: function($scope) {
                $scope.SearchService = SearchService;
                $scope.suggestions = Sea
$(".anim-slider").animateSlider(
		 	{
		 		autoplay	:true,
		 		interval	:5500,
		 		animations 	: 
				{
					{	
						li			:
						{
							show 		: "fadeInUp",
							hide 		: "fadeOutDownBig",
							delayShow   : "delay0-5s"
						},
						"#T"			:
						{
							show 		: "slideInLeft",
							delayShow   : "delay1-5s"
						},
						"#r"			:
						{
							show 		: "bounceInRight",
							delayShow   : "delay2s"
						},
						"#y"			:
						{
							show 		: "fadeInRight",
							delayShow   : "delay2-5s"
						},
						"#i"			:
						{
							show 		: "rollIn",
							delayShow   : "delay3s"
						},
						"#t"			:
						{
							show 		: "rollIn",
							delayShow   : "delay3s"
						},
						"#mark"			:
						{
							show 		: "rotateIn",
							delayShow   : "delay3-5s"
						}
					},
					{
						li	: 
						{
							show   	  : "fadeIn",
							hide 	  : "fadeOutLeftBig",
							delayShow : "delay0.5s"
	 					},
	 					"#looks"	:
	 					{
	 						show 	  : "rotateInUpLef
function AITankControllerContainer(eventManager) {
  this._eventManager = eventManager;
  eventManager.addSubscriber(this, [AITankController.Event.CREATED, AITankController.Event.DESTROYED]);
  this._controllers = [];
AITankControllerContainer.prototype.addController = function (controller) {
  this._controllers.push(controller);
};
AITankControllerContainer.prototype.removeController = function (controller) {
  arrayRemove(this._controllers, controller);
};
AITankControllerContainer.prototype.containsController = function (controller) {
  return arrayContains(this._controllers, controller);
};
AITankControllerContainer.prototype.getControllers = function () {
  return this._controllers;
};
AITankControllerContainer.prototype.notify = function (event) {
  if (event.name == AITankController.Event.CREATED) {
    this.addController(event.controller);
  }
  else if (event.name == AITankController.Event.DESTROYED) {
    this.removeController(event.controller);
  }
};
AITankControllerContain
'use babel';
/* @flow */
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */
var logger = require('nuclide-logging').getLogger();
var {loadConfigsOfServiceWithServiceFramework} = require('nuclide-server/lib/config');
var {optionsToString} = require('nuclide-server/lib/service-manager');
var {RemoteConnection} = require('nuclide-remote-connection');
var {isRemote, getHostname} = require('nuclide-remote-uri');
var serviceConfigs = loadConfigsOfServiceWithServiceFramework();
var cachedServices: Map<string, mixed> = new Map();
/**
 * Create or get a cached service with given serviceOptions.
 * @param nuclideUri It could either be either a local path or a remote path in form of
 *    `nuclide:$host:$port/$path`. The function will use the $host from remote path to
 *    create a remote service with given serviceOptions or create a local service

 *    uri is local path.
 */
function getServiceByNuclideUri(serviceName: string, nuclideUri=null: ?NuclideUri, serviceOptions=null: ?mixed): ?mixed {
  var hostname = (nuclideUri && isRemote(nuclideUri)) ? getHostname(nuclideUri) : null;
  return getService(serviceName, hostname, serviceOptions);
/**
 * Create or get a cached service with given serviceOptions. If hostname is null or empty string,
 * it returns a local service, otherwise a remote service will be returned. For the same host
 * serviceOptions, the same service instance will be returned.
 */
function getService(serviceName: string, hostname: ?string, serviceOptions: ?mixed): ?mixed {
  var [serviceConfig] = serviceConfigs.filter(config => config.name === serviceName);
  if (!serviceConfig) {
    logger.error('Service %s undefined.', serviceName);
    return null;
  }
  var cacheKey = serviceName + '@' + (hostname ? hostname : '') + ':' + optionsToString(serviceOptions);
  if (cachedServices.has(cacheKey)) {
    return ca
var apiFiles =
    [ "Overview", "apiFiles.html#apiFiles_overview", null ],
    [ "Syntax", "apiFilesSyntax.html", [
      [ "Type Support", "apiFilesSyntax.html#apiFilesSyntax_types", [
        [ "DEFINE", "apiFilesSyntax.html#apiFilesSyntax_typesDefine", null ],
        [ "ENUM", "apiFilesSyntax.html#apiFilesSyntax_typesEnum", null ],
        [ "BITMASK", "apiFilesSyntax.html#apiFilesSyntax_typesBitmask", null ],
        [ "REFERENCE", "apiFilesSyntax.html#apiFilesSyntax_typesReference", null ],
        [ "USETYPES", "apiFilesSyntax.html#apiFilesSyntax_typesUsetypes", null ]
      ] ],
      [ "Specifying a Function", "apiFilesSyntax.html#apiFilesSyntax_function", null ],
      [ "Specifying an Event", "apiFilesSyntax.html#apiFilesSyntax_event", null ],
      [ "Specifying a Handler", "apiFilesSyntax.html#apiFilesSyntax_handler", null ],
      [ "Comments", "apiFilesSyntax.html#apiFilesSyntax_comments", null ],
      [ "Sample API", "apiFilesSyntax.html#apiFilesSyntax_sample", null ]
var middleware  = require('../middleware').middleware,
    api         = require('../api');
module.exports = function (server) {
    /* TODO: auth should be public auth not user auth */
    server.get('/ghost/api/v0.1/posts', middleware.authAPI, api.requestHandler(api.posts.browse));
    server.post('/ghost/api/v0.1/posts', middleware.authAPI, api.requestHandler(api.posts.add));
    server.get('/ghost/api/v0.1/posts/:id', middleware.authAPI, api.requestHandler(api.posts.read));
    server.put('/ghost/api/v0.1/posts/:id', middleware.authAPI, api.requestHandler(api.posts.edit));
    server.del('/ghost/api/v0.1/posts/:id', middleware.authAPI, api.requestHandler(api.posts.destroy));
    server.get('/ghost/api/v0.1/posts/getSlug/:title', middleware.authAPI, api.requestHandler(api.posts.getSlug));
    server.get('/ghost/api/v0.1/settings/', middleware.authAPI, api.requestHandler(api.settings.browse));
    server.get('/ghost/api/v0.1/settings/:key/', middleware.authAPI, api.requestHandler(api
var dir_bcc8acafaa3a1f8809c0d8e826e243b1 =
    [ "IMessageHandler.hpp", "_i_message_handler_8hpp.html", [
      [ "IMessageHandler", "class_k_e_1_1_i_message_handler.html", "class_k_e_1_1_i_message_handler" ]
    ] ],
    [ "Message.cpp", "_message_8cpp.html", null ],
    [ "Message.hpp", "_message_8hpp.html", [
      [ "Message", "class_k_e_1_1_message.html", "class_k_e_1_1_message" ],
      [ "TestMessage", "struct_k_e_1_1_message_1_1_test_message.html", "struct_k_e_1_1_message_1_1_test_message" ],
      [ "SizeMessage", "struct_k_e_1_1_message_1_1_size_message.html", "struct_k_e_1_1_message_1_1_size_message" ],
      [ "KeyMessage", "struct_k_e_1_1_message_1_1_key_message.html", "struct_k_e_1_1_message_1_1_key_message" ],
      [ "MouseMessage", "struct_k_e_1_1_message_1_1_mouse_message.html", "struct_k_e_1_1_message_1_1_mouse_message" ],
      [ "EntityMessage", "struct_k_e_1_1_message_1_1_entity_message.html", "struct_k_e_1_1_message_1_1_entity_message" ]
    ] ],
    [ "MessageMa
var phonecatControllers = angular.module('phonecatControllers', ['templateservicemod', 'navigationservice', 'mainnavigationservice']);
phonecatControllers.controller('about', ['$scope', 'TemplateService', 'NavigationService', 'MainNavigationService',
  function ($scope, TemplateService, NavigationService, MainNavigationService) {
        $scope.template = TemplateService;      
        $scope.menutitle = NavigationService.makeactive("About");
        TemplateService.title = $scope.menutitle;
        TemplateService.content = "views/about.html";
        $scope.navigation = NavigationService.getnav();
        $scope.mainnavigation = MainNavigationService.getnav();
  }]);
phonecatControllers.controller('intelligence', ['$scope', 'TemplateService', 'NavigationService','MainNavigationService',
  function ($scope, TemplateService, NavigationService, MainNavigationService) {
        $scope.template = TemplateService;
        $scope.menutitle = NavigationService.makeactive("Intelligence");
   

        TemplateService.content = "views/intelligence.html";
        $scope.navigation = NavigationService.getnav();
      $scope.mainnavigation = MainNavigationService.getnav();
  }]);
phonecatControllers.controller('clients', ['$scope', 'TemplateService', 'NavigationService','MainNavigationService',
  function ($scope, TemplateService, NavigationService, MainNavigationService) {
        $scope.template = TemplateService;
        $scope.menutitle = NavigationService.makeactive("Clients");
        TemplateService.title = $scope.menutitle;
        TemplateService.content = "views/clients.html";
        $scope.navigation = NavigationService.getnav();
      $scope.mainnavigation = MainNavigationService.getnav();
  }]);
phonecatControllers.controller('partners', ['$scope', 'TemplateService', 'NavigationService','MainNavigationService',
  function ($scope, TemplateService, NavigationService, MainNavigationService) {
        $scope.template = TemplateService;
        $scope.menutitle = Navi

        TemplateService.title = $scope.menutitle;
        TemplateService.content = "views/partners.html";
        $scope.navigation = NavigationService.getnav();
      $scope.mainnavigation = MainNavigationService.getnav();
  }]);
phonecatControllers.controller('social', ['$scope', 'TemplateService', 'NavigationService','MainNavigationService',
  function ($scope, TemplateService, NavigationService, MainNavigationService) {
        $scope.template = TemplateService;
        $scope.menutitle = NavigationService.makeactive("Social");
        TemplateService.title = $scope.menutitle;
        TemplateService.content = "views/social.html";
        $scope.navigation = NavigationService.getnav();
      $scope.mainnavigation = MainNavigationService.getnav();
  }]);
phonecatControllers.controller('people', ['$scope', 'TemplateService', 'NavigationService','MainNavigationService',
  function ($scope, TemplateService, NavigationService, MainNavigationService) {
        $scope.template = Templat

        $scope.menutitle = NavigationService.makeactive("People");
        TemplateService.title = $scope.menutitle;
        TemplateService.content = "views/people.html";
        $scope.navigation = NavigationService.getnav();
      $scope.mainnavigation = MainNavigationService.getnav();
  }]);
phonecatControllers.controller('clientspeak', ['$scope', 'TemplateService', 'NavigationService','MainNavigationService',
  function ($scope, TemplateService, NavigationService, MainNavigationService) {
        $scope.template = TemplateService;
        $scope.menutitle = NavigationService.makeactive("Client Speak");
        TemplateService.title = $scope.menutitle;
        TemplateService.content = "views/clientspeak.html";
        $scope.navigation = NavigationService.getnav();
      $scope.mainnavigation = MainNavigationService.getnav();
  }]);
phonecatControllers.controller('contact', ['$scope', 'TemplateService', 'NavigationService','MainNavigationService',
  function ($scope, TemplateServ
var express     = require('express'),
    api         = require('../api'),
    apiRoutes;
apiRoutes = function (middleware) {
    var router = express.Router();
    router.del = router.delete;
    router.get('/configuration', api.http(api.configuration.browse));
    router.get('/configuration/:key', api.http(api.configuration.read));
    router.get('/posts', api.http(api.posts.browse));
    router.post('/posts', api.http(api.posts.add));
    router.get('/posts/:id', api.http(api.posts.read));
    router.get('/posts/slug/:slug', api.http(api.posts.read));
    router.put('/posts/:id', api.http(api.posts.edit));
    router.del('/posts/:id', api.http(api.posts.destroy));
    router.get('/settings', api.http(api.settings.browse));
    router.get('/settings/:key', api.http(api.settings.read));
    router.put('/settings', api.http(api.settings.edit));
    router.get('/users', api.http(api.users.browse));
    router.get('/users/:id', api.http(api.users.read));
    router.get('/users/slug/:slug

    router.get('/users/email/:email', api.http(api.users.read));
    router.put('/users/password', api.http(api.users.changePassword));
    router.put('/users/owner', api.http(api.users.transferOwnership));
    router.put('/users/:id', api.http(api.users.edit));
    router.post('/users', api.http(api.users.add));
    router.del('/users/:id', api.http(api.users.destroy));
    router.get('/tags', api.http(api.tags.browse));
    router.get('/tags/:id', api.http(api.tags.read));
    router.post('/tags', api.http(api.tags.add));
    router.put('/tags/:id', api.http(api.tags.edit));
    router.del('/tags/:id', api.http(api.tags.destroy));
    router.get('/roles/', api.http(api.roles.browse));
    router.get('/slugs/:type/:name', api.http(api.slugs.generate));
    router.get('/themes', api.http(api.themes.browse));
    router.put('/themes/:name', api.http(api.themes.edit));
    router.get('/notifications', api.http(api.notifications.browse));
    router.post('/notifications', api.http(api.no

    router.del('/notifications/:id', api.http(api.notifications.destroy));
    router.get('/db', api.http(api.db.exportContent));
    router.del('/db', api.http(api.db.deleteAllContent));
    router.post('/mail', api.http(api.mail.send));
    router.post('/mail/test', function (req, res) {
        api.http(api.mail.sendTest)(req, res);
    });
    router.post('/authentication/passwordreset',
        middleware.spamForgottenPrevention,
        api.http(api.authentication.generateResetToken)
    );
    router.put('/authentication/passwordreset', api.http(api.authentication.resetPassword));
    router.post('/authentication/invitation', api.http(api.authentication.acceptInvitation));
    router.get('/authentication/invitation', api.http(api.authentication.isInvitation));
    router.post('/authentication/setup', api.http(api.authentication.setup));
    router.get('/authentication/setup', api.http(api.authentication.isSetup));
    router.post('/authentication/token',
        middleware.spam
const wechatData = data => ({
    type : ActionTypes.WECHART,
    data : data
})
export const changeName =(name) => dispatch => {
    dispatch({
        type : ActionTypes.Change_Name,
        name: name
    })
export const changePeople =(userSelectGroupId) => dispatch => {
    dispatch({
        type : ActionTypes.Change_userSelectGroupId,
        userSelectGroupId: userSelectGroupId
    })
export const changeTitle =(title) => dispatch => {
    dispatch({
        type : ActionTypes.Change_Title,
        title: title
    })
export const changeContent =(content) => dispatch => {
    dispatch({
        type : ActionTypes.Change_Content,
        content: content
    })
export const changeLogo =(logo) => dispatch => {
    dispatch({
        type : ActionTypes.Change_Logo,
        logo: logo
    })
export const changeUrl =(linkurl) => dispatch => {
    dispatch({
        type : ActionTypes.Change_Url,
        linkurl: linkurl
    })
export const changePic =(index,pic) => dispatch => {
    d

        type : ActionTypes.Change_Pic,
        pic: pic,
        index:index
    })
export const changeTxt =(txt,index) => dispatch => {
    dispatch({
        type : ActionTypes.Change_Txt,
        txt: txt,
        index:index
    })
export const addPic =(pic,txt) => dispatch => {
    dispatch({
        type : ActionTypes.Add_Pic,
        pic: pic,
        txt: txt
    })
export const removeData =(data) => dispatch => {
    dispatch({
        type : ActionTypes.REMOVE_DATA,
        data : data
    })
export const addTxt =(short) => dispatch => {
    dispatch({
        type : ActionTypes.Add_Short,
        short: short
    })
export const oDelete =(index) => dispatch => {
    dispatch({
        type : ActionTypes.Delete_file,
        index: index
    })
export const setFileString = (file) => dispatch => {
    dispatch({
        type : ActionTypes.File_String,
        file:file
    })
export const setUrl = (url) => dispatch => {
    dispatch({
        type : ActionTypes.Set_Url,
     
  FETCH_SHOW_DATA,
  FETCH_SHOW_SUCCESS,
  FETCH_SHOW_FAILURE,
} from './action-types'
function loadShowData () {
  return {
    type: FETCH_SHOW_DATA,
  }
function loadShowDataSuccess (data) {
  return {
    type: FETCH_SHOW_SUCCESS,
    data,
  }
function loadShowDataFailure (e) {
  return {
    type: FETCH_SHOW_FAILURE,
    error: e,
  }
export function getSingleShowData (showId) {
  return (dispatch) => {
    dispatch(loadShowData())
    return graphql(`{
      show(showId: "${showId}"){
        showId
        title
        description
        parentalRating
        image {
          mediumHD
        }
        categoriesConnection {
          categories {
            title
          }
        }
        seasonsConnection {
          seasons {
            id
            title
            episodesConnection {
              episodes {
                id
                number
                title
                description
                duration
                video {
            
angular.module('pilka', ['ngSanitize', 'ajoslin.promise-tracker'])
    .config(['$routeProvider', function ($routeProvider) {
        $routeProvider.
           
            when("/", { templateUrl: 'content/miejsca.html', controller: ControllerLista }).
            when("/gramy", { templateUrl: 'content/gramy.html', controller: ControllerGramy }).
            when("/niegramy", { templateUrl: 'content/niegramy.html', controller: ControllerNieGramy }).
            when("/lista", { templateUrl: 'content/miejsca.html', controller: ControllerLista }).
            when("/osoba/:username", { templateUrl: 'content/osoby.html', controller: ControllerOsoby }).
            when("/sendok", { templateUrl: 'content/sendok.html', controller: ControllerConfirm }).
            when("/sendno", { templateUrl: 'content/sendno.html', controller: ControllerConfirm }).
            when("/startup", { templateUrl: 'content/miejsca.html', controller: ControllerLista }).
            when("/confirm", { templateU
ClubPadelApp.config(function ($routeProvider) {
    $routeProvider
            .when('/', {
                templateUrl: 'inicio.html',
                controller: 'inicioController'
            })
            .when('/verInstalaciones', {
                templateUrl: 'instalaciones.html',
                controller: 'instalacionesController'
            })
            .when('/reservar', {
                templateUrl: 'reservar.html',
                controller: 'reservarController'
            })
            .when('/galeria', {
                templateUrl: 'galeria.html',
                controller: 'galeriaController'
            })
            .when('/normativa', {
                templateUrl: 'normativa.html',
                controller: 'normativaController'
            })
            .when('/tarifas', {
                templateUrl: 'tarifas.html',
                controller: 'tarifasController'
            })
            .when('/contacto', {
                templateUrl: 'contacto.
define(["jquery"], function($) {
  var MessageController = (function(id){
    var idDiv = id;
    var message = "";
    var messageClases = ["alert-success","alert-info","alert-warning","alert-danger","alert"];
    var checkId = function(){
      if(idDiv === "" || idDiv == null ){
        return false;
      }else{
        return true; 
      }
    }
    var printSucessMessage = function(message){
      printMessage(messageClases[0],message);
    }
    var printInfoMessage = function(message){
      printMessage(messageClases[1],message);
    }
    var printWarningMessage = function(message){
      printMessage(messageClases[2],message);
    }
    var printDangerMessage = function(message){
      printMessage(messageClases[3],message);
    }
    var printMessage = function(type,message){
      if(checkId()){
        removeClasses();
        addClass(type);
        addMessage(message);
      }
    }
    var removeClasses = function(){
      $.each(messageClases, function( index, value 
require.config({
    paths : {
        onlineFeeController : 'app/modules/onlineFee/controller',
        onlineFeeModel : 'app/modules/onlineFee/model',
        onlineFeeView : 'app/modules/onlineFee/view',
        onlineFeeTemplate : 'app/modules/onlineFee/template',
		onlineFeeCommon : 'app/modules/onlineFee/common'
    }
});
define(['onlineFeeController/OnlineFeeHomeController',
    'onlineFeeController/SelfServiceController',
	'onlineFeeController/ShenfaFeeController',
	'onlineFeeController/FuyouFeeController',
	'onlineFeeController/SZPropertyFeeController',
	'onlineFeeController/WaterPowerGasFeeController',
	'onlineFeeController/SZCareerFeeController',
	'onlineFeeController/SZWelfareFeeController',
	'onlineFeeController/CommunicationFeeController',
	'onlineFeeController/paymentController',
	'onlineFeeController/UnionPayFeeController',
	'commonClass/commonTools', 'Native', 'onlineFeeCommon/onlineFeeLang'
	], function(OnlineFeeHomeController, 
		SelfServiceController,
		ShenfaFeeCon
requirejs([
  "config",
  "app/app",
  "app/header/service",
  "app/settings/service",
  "app/tweets/service"
], function (Config, Application, HeaderService,
  SettingsService, TweetsService) {
    Application.start();
    Application.headerService = new HeaderService({
      container: Application.layout.headerRegion
    });
    Application.settingsService = new SettingsService({
      container: Application.layout.settingsRegion
    });
    Application.tweetsService = new TweetsService({
      container: Application.layout.tweetsRegion
    });
    Application.commands.setHandler("refresh:tweets", function () {
      Application.layout.tweetsRegion.reset();
      delete Application.tweetsService;
      Application.layout.settingsRegion.reset();
      delete Application.settingsService;
      Application.tweetsService = new TweetsService({
        container: Application.layout.tweetsRegion
      });
      Application.settingsService = new SettingsService({
        container: Applicati
/**
 * @author jinlan
 * 2011-8-17
 */
define("blackJS/ServiceManager", ['dojo','blackJS.BlackJS'], function(dojo,BlackJS) {
	var ServiceManager=dojo.declare(null, new (function(){
		
		var NULL_ARUGMENT_EXCEPTION=BlackJS.NULL_ARUGMENT_EXCEPTION;
		
		this._serviceProviders;
		this._serviceObjects;
		this._defaultServiceProvider;
		
		this.constructor=function(){
			this._serviceProviders={};
			this._serviceObjects={};
		};
		this.registerServiceProvider=function(serviceName,serviceProvider){
			if(serviceProvider==null){
				throw NULL_ARUGMENT_EXCEPTION;
			}
			if(serviceName==null){
				this._defaultServiceProvider=serviceProvider;
			}else{
				this._serviceProviders[serviceName]=serviceProvider;
			}
		};
		this.registerServiceObject=function(serviceName,serviceObject){
			if(serviceName==null || serviceObject==null){
				throw NULL_ARUGMENT_EXCEPTION;
			}
			this._serviceObjects[serviceName]=serviceObject;
		};
		this.unregisterService=function(serviceRegistrationHandle){
			i

				throw NULL_ARUGMENT_EXCEPTION;
			}
			var serviceName=serviceRegistrationHandle;
			if(this._serviceObjects[serviceName]!=null){
				delete this._serviceObjects[serviceName];
			}
			if(this._serviceProviders[serviceName]!=null){
				delete this._serviceProviders[serviceName];
			}
		};
		this.getService=function(serviceName){
			if(serviceName==null){
				throw NULL_ARUGMENT_EXCEPTION;
			}
			var serviceObjects=this._serviceObjects;
			var serviceObject=serviceObjects[serviceName];
			if(serviceObject!=null){
				return serviceObject;
			}
			var serviceProviders=this._serviceProviders;
			var serviceProvider=serviceProviders[serviceName];
			if(serviceProvider!=null){
				return serviceProvider.getService(serviceName);
			}
			var defaultServiceProvider=this._defaultServiceProvider;
			if(defaultServiceProvider!=null){
				return defaultServiceProvider.getService(serviceName);
			}
			return
		};
		this.getServiceList=function(){
			var serviceKeys={};
			for(var n in this._se
var nav_8c =
    [ "FAILSAFE_HOME_RADIUS", "nav_8c.html#abb778e487ebe98aedea7858361496264", null ],
    [ "Goto3D", "nav_8c.html#a2a52a892a193bd2f3d2f86d1b1ded87e", null ],
    [ "LINE_START_FUNCTION", "nav_8c.html#a86a682e52e440368e6ca96062ef7563f", null ],
    [ "LINE_STOP_FUNCTION", "nav_8c.html#a2788d8683c98c074cb18680dc2eea0af", null ],
    [ "MAX_DIST_CARROT", "nav_8c.html#ab1ea324968aaab7cb5e252bd5f22e76c", null ],
    [ "MAX_HEIGHT_CARROT", "nav_8c.html#a34e95d63fe245178d74b11e75a53811d", null ],
    [ "MIN_DX", "nav_8c.html#a17976ef29f2f34221836e877f4712d19", null ],
    [ "MIN_HEIGHT_CARROT", "nav_8c.html#aa39efd810919cc75b7892bd6e6e37b44", null ],
    [ "NAV_C", "nav_8c.html#a291c0fda2fd988bf5f602f56157ab2b7", null ],
    [ "NAV_GLIDE_PITCH_TRIM", "nav_8c.html#ae41368935fe1a9081b0c663d37f227e0", null ],
    [ "NavFollow", "nav_8c.html#a8691e5b760e30c9091d5a981d3663441", null ],
    [ "NavGlide", "nav_8c.html#aa7303abf34661cdf531cce2f4fddfe86", null ],
    [ "PowerVoltage", "

    [ "RCLost", "nav_8c.html#ac3892fe123b99e805c0c5d5b1b4cd144", null ],
    [ "RcRoll", "nav_8c.html#a7c6d9ca050122212a8a269e08f8c23f2", null ],
    [ "eight_status", "nav_8c.html#aab42b8493c217be79eb8f2523b6aed32", [
      [ "R1T", "nav_8c.html#aab42b8493c217be79eb8f2523b6aed32abe183b30b1054c0977b12028d7a38ae0", null ],
      [ "RT2", "nav_8c.html#aab42b8493c217be79eb8f2523b6aed32a64f284f7c34d2b28e318b452acd38672", null ],
      [ "C2", "nav_8c.html#aab42b8493c217be79eb8f2523b6aed32a5e602f1d68586231698bda7be6af7d2e", null ],
      [ "R2T", "nav_8c.html#aab42b8493c217be79eb8f2523b6aed32ac3a5bc8a5c131d8463ba354e54b2305b", null ],
      [ "RT1", "nav_8c.html#aab42b8493c217be79eb8f2523b6aed32a6975c28de6cfc40ea7b0a60d2bad7953", null ],
      [ "C1", "nav_8c.html#aab42b8493c217be79eb8f2523b6aed32ae54c31a855b907f263d49edcdbe677bd", null ]
    ] ],
    [ "__attribute__", "nav_8c.html#a406b9e5128030dd2d381582653d6fb80", null ],
    [ "compute_TOD", "nav_8c.html#ad9cc0030bdcfa2192dda22875ca68

    [ "fly_to_xy", "nav_8c.html#ae9d11d2e378b23ecbee86419cbf341f0", null ],
    [ "nav_approaching_xy", "nav_8c.html#a771b907350b836982ba4e31fd4bcbf4b", null ],
    [ "nav_circle_XY", "nav_8c.html#ad1b9d2e8da4a32477ca8bedc0bca86fe", null ],
    [ "nav_compute_baseleg", "nav_8c.html#ad18f254456d7f982064ea9e36b29ed93", null ],
    [ "nav_eight", "nav_8c.html#a289c72677bdc1d6a83aa2cd266335601", null ],
    [ "nav_eight_init", "nav_8c.html#ae9a835aee8c0898c8c5c65190d0b30bc", null ],
    [ "nav_follow", "nav_8c.html#a51583ee86b14f2a389b28f2641c4e010", null ],
    [ "nav_home", "nav_8c.html#a069e6b8f68b2e117cbbe03f29e30a2e3", null ],
    [ "nav_init", "nav_8c.html#a64a3814d1672e69989f80701a0ff5749", null ],
    [ "nav_init_stage", "nav_8c.html#a2580ee456d7dd3d157fd7c43ad2eac2d", null ],
    [ "nav_oval", "nav_8c.html#ae660519c2f89e1c5f9aac7877f1e46e6", null ],
    [ "nav_oval_init", "nav_8c.html#aa602ef7f7d2e485655a7cc97a35b80c3", null ],
    [ "nav_periodic_task", "nav_8c.html#ad40d34bcd85

    [ "nav_route_xy", "nav_8c.html#ab4247c9f3dc0417690e1404add032cbe", null ],
    [ "nav_set_altitude", "nav_8c.html#afe6d4a5dd1de94f57126d27a6baac58f", null ],
    [ "nav_without_gps", "nav_8c.html#ab746572e63956a2ad40674328a85b029", null ],
    [ "baseleg_out_qdr", "nav_8c.html#a09096c05260cf7f225d988b6297168c0", null ],
    [ "carrot_x", "nav_8c.html#a2bece6794aadefe30136dcd27b721f53", null ],
    [ "carrot_y", "nav_8c.html#a433f78b82598ad1380701b8b4e376632", null ],
    [ "circle_bank", "nav_8c.html#a421ee656b2e10a372b13bddc4bf546b3", null ],
    [ "desired_x", "nav_8c.html#a88f523b73a294f7cb312604f212c21ab", null ],
    [ "desired_y", "nav_8c.html#ab7d49633159601ed2eaa65f23d612805", null ],
    [ "eight_status", "nav_8c.html#af4a85437e319605798991baf6a5c1b4b", null ],
    [ "flight_altitude", "nav_8c.html#a1612ea0e1474e49b800cb3f497096523", null ],
    [ "fp_pitch", "nav_8c.html#a737a463b508f62286a0e62c5ed5648b4", null ],
    [ "horizontal_mode", "nav_8c.html#ad2a5195a657a7961bf

    [ "last_x", "nav_8c.html#ab2e97613bcf8e5721e639812c7a3469a", null ],
    [ "last_y", "nav_8c.html#a38c13a13ef3e5a3b6480f71bf244e668", null ],
    [ "nav_altitude", "nav_8c.html#a67342fe7d0a993249d4b4cd0e20821ce", null ],
    [ "nav_circle_radians", "nav_8c.html#ae53708a0be0d9df410749c81a8458d6f", null ],
    [ "nav_circle_radius", "nav_8c.html#a3e545eca284b674d03e90c15f58e1ff4", null ],
    [ "nav_circle_trigo_qdr", "nav_8c.html#aa10361692f333adcd1ccfd84ff1d0974", null ],
    [ "nav_circle_x", "nav_8c.html#ac1af27920d41a6dbc343fc1d7f55e08c", null ],
    [ "nav_circle_y", "nav_8c.html#a7b01191b794559f9d485b67c2be62c39", null ],
    [ "nav_climb", "nav_8c.html#a45139c6cf4dbda18870cf748337fbea7", null ],
    [ "nav_course", "nav_8c.html#af90efaefda837fe910e6c1d55ea0e949", null ],
    [ "nav_glide_pitch_trim", "nav_8c.html#a0ac0aec8bffae1d911b4f2fa5e2be72b", null ],
    [ "nav_ground_speed_pgain", "nav_8c.html#a4088688165aca8cabadaf45fb0b44643", null ],
    [ "nav_ground_speed_setpoin

    [ "nav_in_circle", "nav_8c.html#a3d597a1b316fdba0db5701a03ad56c7b", null ],
    [ "nav_in_segment", "nav_8c.html#a70c77743e83862b67b86056fcc80a8ec", null ],
    [ "nav_leg_length", "nav_8c.html#aacf1866dff03a2d6eba27ddefae85636", null ],
    [ "nav_leg_progress", "nav_8c.html#a620eee3565104705439b86c0011d5ce5", null ],
    [ "nav_mode", "nav_8c.html#a100095dcf201264924107b608a3ed5cd", null ],
    [ "nav_oval_count", "nav_8c.html#a3f8eab6736191ca3d1cb16738cbcf97f", null ],
    [ "nav_pitch", "nav_8c.html#ac1ac32b055c0a7879329346b1662f313", null ],
    [ "nav_radius", "nav_8c.html#a4e73a18879f679277a72ef00250e359e", null ],
    [ "nav_segment_x_1", "nav_8c.html#a8b5c072e3f61f9025578e3e6283ffcb1", null ],
    [ "nav_segment_x_2", "nav_8c.html#a123af850aca7872d4ae1f0fd561fc302", null ],
    [ "nav_segment_y_1", "nav_8c.html#aa04e457095198f649868d28f72969029", null ],
    [ "nav_segment_y_2", "nav_8c.html#a2992c5b1e4da4284068a225e451877a4", null ],
    [ "nav_shift", "nav_8c.html#aae62
d3.dispatch = function() {
  var dispatch = new d3_dispatch(),
      i = -1,
      n = arguments.length;
  while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
  return dispatch;
};
function d3_dispatch() {}
d3_dispatch.prototype.on = function(type, listener) {
  var i = type.indexOf("."),
      name = "";
  if (i > 0) {
    name = type.substring(i + 1);
    type = type.substring(0, i);
  }
  return arguments.length < 2
      ? this[type].on(name)
      : this[type].on(name, listener);
};
function d3_dispatch_event(dispatch) {
  var listeners = [],
      listenerByName = {};
  function event() {
        i = -1,
        n = z.length,
        l;
    while (++i < n) if (l = z[i].on) l.apply(this, arguments);
    return dispatch;
  }
  event.on = function(name, listener) {
    var l, i;
    if (arguments.length < 2) return (l = listenerByName[name]) && l.on;
    if (l = listenerByName[name]) {
      l.on = null;
      listeners = listeners.slice(0, i = listeners.indexOf(l)
var searchData=
  ['nav_2ec',['nav.c',['../nav_8c.html',1,'']]],
  ['nav_2eh',['nav.h',['../nav_8h.html',1,'']]],
  ['nav_5fairspeed_2ec',['nav_airspeed.c',['../nav__airspeed_8c.html',1,'']]],
  ['nav_5fairspeed_2eh',['nav_airspeed.h',['../nav__airspeed_8h.html',1,'']]],
  ['nav_5fbungee_5ftakeoff_2ec',['nav_bungee_takeoff.c',['../nav__bungee__takeoff_8c.html',1,'']]],
  ['nav_5fbungee_5ftakeoff_2eh',['nav_bungee_takeoff.h',['../nav__bungee__takeoff_8h.html',1,'']]],
  ['nav_5fcatapult_2ec',['nav_catapult.c',['../nav__catapult_8c.html',1,'']]],
  ['nav_5fcatapult_2eh',['nav_catapult.h',['../nav__catapult_8h.html',1,'']]],
  ['nav_5fcube_2ec',['nav_cube.c',['../nav__cube_8c.html',1,'']]],
  ['nav_5fcube_2eh',['nav_cube.h',['../nav__cube_8h.html',1,'']]],
  ['nav_5fdrop_2ec',['nav_drop.c',['../nav__drop_8c.html',1,'']]],
  ['nav_5fdrop_2eh',['nav_drop.h',['../nav__drop_8h.html',1,'']]],
  ['nav_5fflower_2ec',['nav_flower.c',['../nav__flower_8c.html',1,'']]],
  ['nav_5fflower_2eh',['nav_f

  ['nav_5fgls_2ec',['nav_gls.c',['../nav__gls_8c.html',1,'']]],
  ['nav_5fgls_2eh',['nav_gls.h',['../nav__gls_8h.html',1,'']]],
  ['nav_5fline_2ec',['nav_line.c',['../nav__line_8c.html',1,'']]],
  ['nav_5fline_2eh',['nav_line.h',['../nav__line_8h.html',1,'']]],
  ['nav_5fline_5fborder_2ec',['nav_line_border.c',['../nav__line__border_8c.html',1,'']]],
  ['nav_5fline_5fborder_2eh',['nav_line_border.h',['../nav__line__border_8h.html',1,'']]],
  ['nav_5fline_5fosam_2ec',['nav_line_osam.c',['../nav__line__osam_8c.html',1,'']]],
  ['nav_5fline_5fosam_2eh',['nav_line_osam.h',['../nav__line__osam_8h.html',1,'']]],
  ['nav_5fpoles_2ec',['nav_poles.c',['../nav__poles_8c.html',1,'']]],
  ['nav_5fpoles_2eh',['nav_poles.h',['../nav__poles_8h.html',1,'']]],
  ['nav_5fsmooth_2ec',['nav_smooth.c',['../nav__smooth_8c.html',1,'']]],
  ['nav_5fsmooth_2eh',['nav_smooth.h',['../nav__smooth_8h.html',1,'']]],
  ['nav_5fspiral_2ec',['nav_spiral.c',['../nav__spiral_8c.html',1,'']]],
  ['nav_5fspiral_2eh',['na

  ['nav_5fsurvey_5fdisc_2ec',['nav_survey_disc.c',['../nav__survey__disc_8c.html',1,'']]],
  ['nav_5fsurvey_5fdisc_2eh',['nav_survey_disc.h',['../nav__survey__disc_8h.html',1,'']]],
  ['nav_5fsurvey_5fpoly_5fosam_2ec',['nav_survey_poly_osam.c',['../nav__survey__poly__osam_8c.html',1,'']]],
  ['nav_5fsurvey_5fpoly_5fosam_2eh',['nav_survey_poly_osam.h',['../nav__survey__poly__osam_8h.html',1,'']]],
  ['nav_5fsurvey_5fpolygon_2ec',['nav_survey_polygon.c',['../nav__survey__polygon_8c.html',1,'']]],
  ['nav_5fsurvey_5fpolygon_2eh',['nav_survey_polygon.h',['../nav__survey__polygon_8h.html',1,'']]],
  ['nav_5fsurvey_5frectangle_2ec',['nav_survey_rectangle.c',['../nav__survey__rectangle_8c.html',1,'']]],
  ['nav_5fsurvey_5frectangle_2eh',['nav_survey_rectangle.h',['../nav__survey__rectangle_8h.html',1,'']]],
  ['nav_5fsurvey_5fzamboni_2ec',['nav_survey_zamboni.c',['../nav__survey__zamboni_8c.html',1,'']]],
  ['nav_5fsurvey_5fzamboni_2eh',['nav_survey_zamboni.h',['../nav__survey__zamboni_8h.ht
"use strict";
var assert = require("assert"),
  Pregister = require('../index.js');
describe('Namespace', function() {
  it('should mix namespace with file', function () {
    assert.equal(Pregister.file2namespace('service/db/index.js', 'service'), 'service.db');
    assert.equal(Pregister.file2namespace('service/db/index.js', 'service.db'), 'service.db');
    assert.equal(Pregister.file2namespace('root/service/db/index.js', 'service.db'), 'service.db');
    assert.equal(Pregister.file2namespace('root/service/db.js', 'service.db'), 'service.db');
    assert.equal(Pregister.file2namespace('/root/service/db.js', 'service.db'), 'service.db');
    assert.equal(Pregister.file2namespace('/root/service/db.js', 'service'), 'service.db');
    assert.equal(Pregister.file2namespace('service/dbservice/index.js', 'service'), 'service.dbservice');
    assert.equal(Pregister.file2namespace('root/dbservice/index.js', 'service'), 'service.root.dbservice');
    assert.equal(Pregister.file2namespace('/ro
ï»¿/**
* @author l_wangçç£ <l_wang@Ctrip.com>
* @namespace Common.cMessageCenter
* @description æ¶æ¯å¹¿æ­æºå¶
*/
define([], function () {
  var messageQueue = {};
  var MessageCenter = {
    /**
     * åå¸æ¶æ¯
     * @method Common.cMessageCenter.publish
     * @param {string} message æ¶æ¯æ ç¤º
     * @param {array} args åæ°
     */
    publish: function(message, args)
    {
      if (messageQueue[message])
      {
        _.each(messageQueue[message], function(item){
          item.handler.apply(item.scope?item.scope: window, args);  
        });
      }  
    },
    /**
     * è®¢éæ¶æ¯
     * @method Common.cMessageCenter.subscribe
     * @param {string} message æ¶æ¯æ ç¤º
     * @param {function} handler æ¶æ¯å¤ç
     * @param {object} [scope] å½æ°ä½ç¨å
     */
    subscribe: function(message, handler, scope)
    {
      if (!messageQueue[message]) messageQueue[message] = [];
      messageQueue[message].push({scope: scope, handler: handler});
    },
    /**
     * åæ¶è®¢é
     * @method Common.cMessageCenter.unsubscribe
 
ï»¿(function() {
    'use strict';
    function Config($routeProvider) {
        $routeProvider
            .when('/', {
                templateUrl: '/app/views/home.html',
                controller: 'HomeController',
                controllerAs: 'vm'
            })
            .when('/about/:id', {
                templateUrl: '/app/views/about.html',
                controller: 'AboutController',
                controllerAs: 'vm'
            })
            .when('/contact', {
                templateUrl: '/app/views/contact.html',
                controller: 'ContactController',
                controllerAs: 'vm'
            });
    }
    function HomeController($location) {
        var vm = this;
        vm.move = function (id) {
            $location.path('about/' + id);
        }
    }
    function AboutController($routeParams) {
        var vm = this;
        vm.message = "You passed in " + $routeParams.id;
    }
    function ContactController() {
        
    }
    angular.mod
module.exports = function( app , config ) {
    var api = require( "../controllers/api" )( config )
        , oauth = require( "../controllers/oauth" )( config )
        , alipay = require( "../controllers/alipay" )( config , app );
    app.post( "/api/do_login" , api.doLogin );
    app.get( "/api/users/" , api.getUserList );
    app.post( "/api/upload_files" , api.uploadFiles );
    app.post( "/api/user/" , api.updateUser );
    app.get( "/api/user/" , api.getUser );
    app.get( "/api/should_display_contact_info/" , api.shouldDisplayContactInfo );
    app.get( "/api/update_brower_status/" , api.updateBrowerStatus );
    app.post( "/api/reg/" , api.reg );
    app.get( "/api/gifts/" , api.getGiftList );
    app.post( "/api/send_gift/" , api.sendGift );
    app.get( "/api/payment_recoreds/" , api.getPaymentRecordList );
    app.get( "/api/get_exist_talk_betweet_two_users/" , api.getExistTalkBetweetTwoUsers );
    app.get( "/api/msgs/" , api.getMsgList );
    app.get( "/api/chat_items" ,
/*global QUnit*/
define(["domain/site",
		"domain/credentialType",
		"domain/credential",
		'factory/logonServiceFactory',
		'services/ntlmLogonService',
		'services/office365LogonService',
		'services/adfs365LogonService',
		'services/formsLogonService',
		'unitTests/unitTestSettings'],
    function (site, credentialType, credential, logonServiceFactory, ntlmLogonService, office365LogonService, adfs365LogonService, formsLogonService, TestSettings) {
        QUnit.module("Testing factory/logonServiceFactory");
        QUnit.test("Test logonServiceFactory OK", function () {
            QUnit.ok(logonServiceFactory);
            QUnit.equal(typeof logonServiceFactory, 'object');
        });
        QUnit.test("Test FBA site obtains formsLogonService", function () {
            var service;
            service = logonServiceFactory.createLogonService(TestSettings.fbaTestUrl, credentialType.claimsOrForms);
            QUnit.ok(service);
            QUnit.equal(service.constructor, formsLog

        });
        QUnit.test("Test FBA site obtains formsLogonService 2", function () {
            var service;
            service = logonServiceFactory.createLogonService(TestSettings.fbaTestUrl, credentialType.claimsOrForms, false, "");
            QUnit.ok(service);
            QUnit.equal(service.constructor, formsLogonService);
        });
        QUnit.test("Test FBA site obtains formsLogonService (logonServiceFromSite)", function () {
            var service;
            service = logonServiceFactory.logonServiceFromSite(new site(TestSettings.fbaTestUrl, TestSettings.siteTitle, TestSettings.siteMajorVersion, new credential(credentialType.claimsOrForms, TestSettings.fbaTestUser, TestSettings.fbaTestPassword, ""), false, ""));
            QUnit.ok(service);
            QUnit.equal(service.constructor, formsLogonService);
        });
        QUnit.test("Test NTLM site obtains ntlmLogonService", function () {
            var service;
            service = logonServiceFactory.cr

            QUnit.ok(service);
            QUnit.equal(service.constructor, ntlmLogonService);
        });
        QUnit.test("Test NTLM site obtains ntlmLogonService (logonServiceFromSite)", function () {
            var service;
            service = logonServiceFactory.logonServiceFromSite(new site(TestSettings.ntlmTestUrl, TestSettings.siteTitle, TestSettings.siteMajorVersion, new credential(credentialType.ntlm, TestSettings.ntlmTestUser, TestSettings.ntlmTestPassword, TestSettings.ntlmTestDomain), false, ""));
            QUnit.ok(service);
            QUnit.equal(service.constructor, ntlmLogonService);
        });
        QUnit.test("Test office 365 Std site obtains office365LogonService", function () {
            var service;
            service = logonServiceFactory.createLogonService(TestSettings.claimsTestUrl, credentialType.claimsOrForms, true);
            QUnit.ok(service);
            QUnit.equal(service.constructor, office365LogonService);
        });
        QUnit.tes

            var service;
            service = logonServiceFactory.createLogonService(TestSettings.claimsTestUrl, credentialType.claimsOrForms, true, "");
            QUnit.ok(service);
            QUnit.equal(service.constructor, office365LogonService);
        });
        QUnit.test("Test office 365 Std site obtains office365LogonService (logonServiceFromSite)", function () {
            var service;
            service = logonServiceFactory.logonServiceFromSite(new site(TestSettings.claimsTestUrl, TestSettings.siteTitle, TestSettings.siteMajorVersion, new credential(credentialType.claimsOrForms, TestSettings.claimsTestUser, TestSettings.claimsTestPassword, TestSettings.claimsTestDomainOnly), true, ""));
            QUnit.ok(service);
            QUnit.equal(service.constructor, office365LogonService);
        });
        QUnit.test("Test ADFS 365 site obtains adfs365LogonService", function () {
            var service;
            service = logonServiceFactory.createLogonService(Te
var sin = Math.sin, cos = Math.cos, tan = Math.tan;
module.exports = {
  setup: function(api) {
    api.setSize(400,400);
    api.w = api.getPanelWidth();
    api.h = api.getPanelHeight();
    api.pad = 80;
    api.r = api.w/2 - api.pad;
    api.mousePt = false;
    api.angle = 0;
    var spt = { x: api.w-api.pad, y: api.h/2 };
    api.setCurve(new api.Bezier(spt, spt, spt, spt));
  },
  guessCurve: function(S, B, E)  {
    var C = {
          x: (S.x + E.x)/2,
          y: (S.y + E.y)/2
        },
        A = {
          y: B.y + (B.y-C.y)/3
        },
        bx = (E.x-S.x)/4,
        by = (E.y-S.y)/4,
        e1 = {
          x: B.x - bx,
          y: B.y - by
        },
        e2 = {
          x: B.x + bx,
          y: B.y + by
        },
        v1 = {
          x: A.x + (e1.x-A.x)*2,
          y: A.y + (e1.y-A.y)*2
        },
        v2 = {
          x: A.x + (e2.x-A.x)*2,
          y: A.y + (e2.y-A.y)*2
        },
        nc1 = {
          x: S.x + (v1.x-S.x)*2,
          y: S.

        },
        nc2 = {
          x: E.x + (v2.x-E.x)*2,
          y: E.y + (v2.y-E.y)*2
        };
    return [nc1, nc2];
  },
  draw: function(api, curve) {
    api.reset();
    api.setColor("lightgrey");
    api.drawGrid(1,1);
    api.setColor("rgba(255,0,0,0.4)");
    api.drawCircle({x:api.w/2,y:api.h/2},api.r);
    api.setColor("transparent");
    api.setFill("rgba(100,255,100,0.4)");
    var p = {
      x: api.w/2,
      y: api.h/2,
      r: api.r,
      s: api.angle < 0 ? api.angle : 0,
      e: api.angle < 0 ? 0 : api.angle
    };
    api.drawArc(p);
    var B = {
      x: api.w/2 + api.r * cos(api.angle/2),
      y: api.w/2 + api.r * sin(api.angle/2)
    };
    var S = curve.points[0],
        E = curve.points[3],
        nc = this.guessCurve(S,B,E);
    var guess = new api.Bezier([S, nc[0], nc[1], E]);
    api.setColor("rgb(140,140,255)");
    api.drawLine(guess.points[0], guess.points[1]);
    api.drawLine(guess.points[1], guess.points[2]);
    api.drawLine(guess.points[

    api.setColor("blue");
    api.drawCurve(guess);
    api.drawCircle(guess.points[1], 3);
    api.drawCircle(guess.points[2], 3);
    api.drawSkeleton(curve);
    api.setColor("black");
    api.drawLine(curve.points[1], curve.points[2]);
    api.drawCurve(curve);
  },
  onMouseMove: function(evt, api) {
    var x = evt.offsetX - api.w/2,
        y = evt.offsetY - api.h/2;
    if (x>api.w/2) return;
    var angle = Math.atan2(y,x);
    if (angle < 0) {
      angle = 2*Math.PI + angle;
    }
    var pts = api.curve.points;
    var r = api.r,
        f = (4 * tan(angle/4)) /3;
    pts[1] = {
      x: api.w/2 + r,
      y: api.w/2 + r * f
    };
    pts[2] = {
      x: api.w/2 + api.r * (cos(angle) + f*sin(angle)),
      y: api.w/2 + api.r * (sin(angle) - f*cos(angle))
    };
    pts[3] = {
      x: api.w/2 + api.r * cos(angle),
      y: api.w/2 + api.r * sin(angle)
    };
    api.setCurve(new api.Bezier(pts));
    api.angle = angle;
  },
  drawCircle: function(api) {
    api.setSize(32

    api.reset();
    var w = api.getPanelWidth(),
        h = api.getPanelHeight(),
        pad = 60,
        r = w/2 - pad,
        k = 0.55228,
        offset = {x: -pad/2, y:-pad/4};
    var curve = new api.Bezier([
      {x:w/2 + r,   y:h/2},
      {x:w/2 + r,   y:h/2 + k*r},
      {x:w/2 + k*r, y:h/2 + r},
      {x:w/2,       y:h/2 + r}
    ]);
    api.setColor("lightgrey");
    api.drawLine({x:0,y:h/2}, {x:w+pad,y:h/2}, offset);
    api.drawLine({x:w/2,y:0}, {x:w/2,y:h+pad}, offset);
    var pts = curve.points;
    api.setColor("red");
    api.drawPoint(pts[0], offset);
    api.drawPoint(pts[1], offset);
    api.drawPoint(pts[2], offset);
    api.drawPoint(pts[3], offset);
    api.drawCurve(curve, offset);
    api.setColor("rgb(255,160,160)");
    api.drawLine(pts[0],pts[1],offset);
    api.drawLine(pts[1],pts[2],offset);
    api.drawLine(pts[2],pts[3],offset);
    api.setFill("red");
    api.text((pts[0].x - w/2) + "," + (pts[0].y - h/2), {x: pts[0].x + 7, y: pts[0].y + 3}, off

    api.text((pts[1].x - w/2) + "," + (pts[1].y - h/2), {x: pts[1].x + 7, y: pts[1].y + 3}, offset);
    api.text((pts[2].x - w/2) + "," + (pts[2].y - h/2), {x: pts[2].x + 7, y: pts[2].y + 7}, offset);
    api.text((pts[3].x - w/2) + "," + (pts[3].y - h/2), {x: pts[3].x, y: pts[3].y + 13}, offset);
    pts.forEach(p => { p.x = -(p.x - w); });
    api.setColor("blue");
    api.drawCurve(curve, offset);
    api.drawLine(pts[2],pts[3],offset);
    api.drawPoint(pts[2],offset);
    api.setFill("blue");
    api.text("reflected", {x: pts[2].x - pad/2, y: pts[2].y + 13}, offset);
    api.setColor("rgb(200,200,255)");
    api.drawLine(pts[1],pts[0],offset);
    api.drawPoint(pts[1],offset);
    pts.forEach(p => { p.y = -(p.y - h); });
    api.setColor("green");
    api.drawCurve(curve, offset);
    pts.forEach(p => { p.x = -(p.x - w); });
    api.setColor("purple");
    api.drawCurve(curve, offset);
    api.drawLine(pts[1],pts[0],offset);
    api.drawPoint(pts[1],offset);
    api.setFill("pur
$(window).load(function() {
	$(".section").hide();
	$("#about_me").show();
	$("#l_about_me").click(function() {
		$(".section").hide();
		$("#about_me").show();
	});
	$("#l_skills").click(function() {
		$(".section").hide();
		$("#skills").show();
		$("#fb_like_button").show();
	});
	$("#l_contact").click(function() {
		$(".section").hide();
		$("#contact").show();
		$("#fb_like_button").show();
	});
	$("#l_gallery").click(function() {
		$(".section").hide();
		$("#gallery").show();
		$("#fb_like_button").show();
		$(".session").hide();
		$("#first_pro").show();
	});
	$("#l_life").click(function() {
		$(".section").hide();
		$("#life").show();
		$("#fb_like_button").show();
	});
   $("#firstpro").click(function() {
		$(".session").hide();
		$("#first_pro").show();
		$("#fb_like_button").show();
	});
   $("#seconpro").click(function() {
		$(".session").hide();
		$("#secon_pro").show();
		$("#fb_like_button").show();
	});
   $("#thirdpro").click(function() {
		$(".session").hide();
		$("
describe('store/actions/moveTarget', () => {
  it('replaces a line when the dot tool is enabled and selected', () => {
    const store = createStore();
    store.dispatch(ACTIONS.SET_INITIAL_BITMAP, [[0, 0, 0], [0, 0, 0], [0, 0, 0]]);
    store.dispatch(ACTIONS.SET_PALETTE_COLORS, ['white', 'black']);
    store.dispatch(ACTIONS.SET_PALETTE_INDEX, 1);
    store.dispatch(ACTIONS.MOVE_TARGET, { x: 0, y: 0 });
    store.dispatch(ACTIONS.TOGGLE_TOOL, 'dot-tool');
    store.dispatch(ACTIONS.ENABLE_TOOL);
    store.dispatch(ACTIONS.MOVE_TARGET, { x: 2, y: 2 });
    expect(store.getters.pixels).to.eql([
      ['black', 'white', 'white'],
      ['white', 'black', 'white'],
      ['white', 'white', 'black'],
    ]);
  });
  it('replaces fill when the fill tool is enabled and selected', () => {
    const store = createStore();
    store.dispatch(ACTIONS.SET_INITIAL_BITMAP, [[0, 0, 1], [0, 1, 0], [1, 0, 0]]);
    store.dispatch(ACTIONS.SET_PALETTE_COLORS, ['white', 'black']);
    store.dispatch(AC
define('nav-secondary-all', ['underscore', 'widget-lite'], function(_, widgetLite){
  "use strict";
  return widgetLite.extend({
    navOpen: false,
    inlineNav: false,
    init: function(element, data){
      _.extend(this, data);
      this.element = element;
      this._getElements();
      this._bindEvents();
    },
    _getElements: function(){
      this.dummy = document.createElement('div');
      this.navHead = this.element.querySelector('.nav-secondary-all__head');
      this.navBody = this.element.querySelector('.nav-secondary-all__body');
      this.navOffset = document.querySelector('.nav-secondary-all__offset') || this.dummy;
      this.navItems = this.element.querySelectorAll('.nav-secondary-all__item');
      this.navSection = this.element.querySelector('.nav-secondary-all__section');
    },
    _bindEvents: function(){
      this.navHead.addEventListener('click', function(){
        this._toggleNav();
      }.bind(this), false);
      _.each(this.navItems, function(it

        item.onclick = this._navItemActions.bind(this, item);
      }.bind(this));
    },
    _toggleNav: function(state){
      var height = this.navBody.offsetHeight;
      if(this.navIsOpen || state === 'close'){
        this.navIsOpen = false;
        this.navHead.classList.remove('nav-secondary-all__head-on');
        this.navBody.classList.remove('nav-secondary-all__body--open');
        this.navOffset.style.cssText = "";
      }
      else {
        this.navIsOpen = true;
        this.navHead.classList.add('nav-secondary-all__head-on');
        this.navBody.classList.add('nav-secondary-all__body--open');
        this.navOffset.style.cssText = "padding-bottom:" + height + "px;-ms-transform:translateY("+ height +"px);-moz-transform:translateY("+ height +"px);-webkit-transform:translateY("+ height +"px);transform:translateY("+ height +"px)";
      }
    },
    _navItemActions: function(el, evnt){
      evnt = evnt || window.event;
      if(this.inlineNav){
        evnt.preventDefa
module.exports = function (apiKey, region, options) {
  'use strict';
  var config = require('./config');
  var util = require('./util');
  util.setApiKey(apiKey);
  util.setDefaultRateLimit();
  if (options) {
    if (options.useRedis) {
      util.enableRedis(options.port, options.host, options.options);
    }
    if (options.cacheTTL) {
      util.setCacheTTL(options.cacheTTL);
    }
  }
  var api = {};
  api.ApiChallenge = require('./api/apiChallenge')(region);
  api.Champion = require('./api/champion')(region);
  api.CurrentGame = require('./api/currentGame')(region);
  api.FeaturedGames = require('./api/featuredGames')(region);
  api.Game = require('./api/game')(region);
  api.League = require('./api/league')(region);
  api.Static = require('./api/static')(region);
  api.Match = require('./api/match')(region);
  api.MatchList = require('./api/matchList')(region);
  api.Stats = require('./api/stats')(region);
  api.Status = require('./api/status')(region);
  api.Summoner = require
var Promise = require('bluebird');
var request = Promise.promisify(require('request'));
function APICall(url) {
    return request(url).then(function(resp) {
        try {
            return resp[1];
        } catch(e) {
            return new Error(e);
        }
    });
function lolapi(options) {
    api = {};
    api.key = options.key;
    api.loc = options.loc || 'na';
    api.region = options.region || 'na';
    api.champion = {
        get: function(id, region) {
            region = region || api.region;
            var url = api.url + region + '/v1.2/champion/' + id + '?api_key=' + api.key;
            return APICall(url);
        },
        getAll: function(region) {
            region = region || api.region;
            var url = api.url + region + '/v1.2/champion?api_key=' + api.key;
            return APICall(url);
        },
        getFree: function(region) {
            region = region || api.region;
            var url = api.url + region + '/v1.2/champion?freeToPlay=true

            return APICall(url);
        },
    };
    api.game = {
        recent: function(id, region) {
            region = region || api.region;
            var url = api.url + region + '/v1.3/game/by-summoner/' + id + '/recent?api_key=' + api.key;
            return APICall(url);
        }
    };
    api.league = {
        getSummonerLeague: function(id, region) {
            region = region || api.region;
            var url = api.url + region + '/v2.5/league/by-summoner/' + id.toString() + '?api_key=' + api.key;
            return APICall(url);
        },
        getSummoner: function(id, region) {
            region = region || api.region;
            var url = api.url + region + '/v2.5/league/by-summoner/' + id.toString() + '/entry?api_key=' + api.key;
            return APICall(url);
        },
        getTeamLeague: function(id, region) {
            region = region || api.region;
            var url = api.url + region + '/v2.5/league/by-team/' + id.toString() + '?api_key=

            return APICall(url);
        },
        getTeam: function(id, region) {
            region = region || api.region;
            var url = api.url + region + '/v2.5/league/by-team/' + id.toString() + '/entry?api_key=' + api.key;
            return APICall(url);
        },
        getChallenger: function(type, region) {
            region = region || api.region;
            if (type === 'solo') {
              type = 'RANKED_SOLO_5x5';
            } else if (type === 'team3') {
              type = 'RANKED_TEAM_3x3';
            } else if (type === 'team5') {
              type = 'RANKED_TEAM_5x5';
            }
            var url = api.url + region + '/v2.5/league/challenger?type=' + type + '&api_key=' + api.key;
            return APICall(url);
        },
    };
    
    api.static = {};
    api.static = function() {
        console.log('not implemented');
    };
    
    api.status = function(region) {
        region = region || api.region;
            
        return API

    };
    api.match = {
        info: function(id, timeline, region) {
            region = region || api.region;
            timeline = timeline || false;
            var url = api.url + region + '/v2.2/match/' + id + '?includeTimeline=' + timeline + '&api_key=' + api.key;
            return APICall(url);
        },
        history: function(id, region) {
            region = region || api.region;
            var url = api.url + region + '/v2.2/matchhistory/' + id + '?api_key=' + api.key;
            return APICall(url);
        }
    };
    
    api.summoner = {
        ranked: function(id, region) {
            region = region || api.region;
            var url = api.url + region + '/v1.3/stats/by-summoner/' + id + '/ranked?api_key=' + api.key;
            return APICall(url);
        },
        summary: function(id, region) {
            region = region || api.region;
            var url = api.url + region + '/v1.3/stats/by-summoner/' + id + '/summary?api_key=' + api.key;
       

        },
        masteries: function(id, region) {
            region = region || api.region;
            var url = api.url + region + '/v1.4/summoner/' + id.toString() + '/masteries?api_key=' + api.key;
            return APICall(url);
        },
        runes: function(id, region) {
            region = region || api.region;
            var url = api.url + region + '/v1.4/summoner/' + id.toString() + '/runes?api_key=' + api.key;
            return APICall(url);
        },
        findNameById: function(id, region) {
            region = region || api.region;
            var url = api.url + region + '/v1.4/summoner/' + id.toString() + '/name?api_key=' + api.key;
            return APICall(url);
        },
        findByName: function(name, region) {
            region = region || api.region;
            var url = api.url + region + '/v1.4/summoner/by-name/' + name.toString() + '?api_key=' + api.key;
            return APICall(url);
        }
    };
    
    api.team = {
        get
$(document).ready(function() {
	/**
	  * jQuery powered menu
	 */
	$(".content-nav").hide();
	$(".menu-nav").hide();
	$(".messages-nav").hide();
	$(".module-nav").hide();
	$(".user-nav").hide();
	$(".activate-content-nav").hover(function() {
		$(".content-nav").show();
		$(".menu-nav").hide();
		$(".messages-nav").hide();
		$(".module-nav").hide();
		$(".user-nav").hide();
	});
	$(".activate-menu-nav").hover(function() {
		$(".menu-nav").show();
		$(".content-nav").hide();
		$(".messages-nav").hide();
		$(".module-nav").hide();
		$(".user-nav").hide();
	});
	$(".activate-messages-nav").hover(function() {
		$(".messages-nav").show();
		$(".content-nav").hide();
		$(".menu-nav").hide();
		$(".module-nav").hide();
		$(".user-nav").hide();
	});
	$(".activate-module-nav").hover(function() {
		$(".module-nav").show();
		$(".content-nav").hide();
		$(".messages-nav").hide();
		$(".user-nav").hide();
		$(".menu-nav").hide();
	});
	$(".activate-user-nav").hover(function() {
		$(".user-nav").sho
module.exports = {
    attributes: {
        content: 'STRING',
        createTime: 'FLOAT',
        toUser: 'STRING',
        fromUser: 'STRING',
        messageType: 'STRING',
        messageId: 'FLOAT'
    },
    /**
     * å¤æ­æ¶æ¯æ¯å¦æ¯éç¥æ¶æ¯
     * @param string
     * @returns {boolean}
     */
    isValidNoticeMessage: function (message) {
        return new RegExp('^[+]{1}[^+-]*$').test(message.Content);
    },
    /**
     * å°æ®éææ¬æ¶æ¯æ¹ä¸ºéç¥ç±»æ¶æ¯
     * @param messageId
     */
    changeToNotice: function (messageId) {
        Message.update({
            _id: messageId
        }, {
            messageType: 'notice'
        }, function (err, message) {
            if (err) {
                return console.log(err);
            } else {
                console.log("Message updated:", message);
                return message;
            }
        });
    },
    isValidNormalMessage: function (message) {
        return new RegExp('^[-]{1}[^-+]*$').test(message.Content);
    },
    isValidMess
'use strict';
var API = require('./lib/api_common');
API.mixin(require('./lib/api_quota'));
API.mixin(require('./lib/api_menu'));
API.mixin(require('./lib/api_menu_custom'));
API.mixin(require('./lib/api_group'));
API.mixin(require('./lib/api_tag'));
API.mixin(require('./lib/api_user'));
API.mixin(require('./lib/api_qrcode'));
API.mixin(require('./lib/api_media'));
API.mixin(require('./lib/api_material'));
API.mixin(require('./lib/api_message'));
API.mixin(require('./lib/api_template'));
API.mixin(require('./lib/api_custom_service'));
API.mixin(require('./lib/api_mass_send'));
API.mixin(require('./lib/api_shop_goods'));
API.mixin(require('./lib/api_shop_stock'));
API.mixin(require('./lib/api_shop_express'));
API.mixin(require('./lib/api_shop_group'));
API.mixin(require('./lib/api_shop_shelf'));
API.mixin(require('./lib/api_shop_order'));
API.mixin(require('./lib/api_shop_common'));
API.mixin(require('./lib/api_payment'));
API.mixin(require('./lib/api_feedback'));
API.mixin(require('./l
define(['utils'], function (utils) {
    var parseController = function (id, options) {
            var controller = utils.config.get('controllers')[id];
            options = options || {};
            controller.id = id;
            controller.ev = options.ev || controller.ev || 'defaultEvent';
            controller.parentView = options.parentView || controller.parentView || this.appView;
            controller.regionName = options.regionName || controller.regionName || controller.parentView._defaultRegion;
            controller.region = controller.parentView[controller.regionName];
            controller.previousController = controller.region.getController();
            controller.options = _.extend({}, controller.options, options.options);
            return controller;
        },
        requireController = function (controller) {
            var that = this;
            require([controller.url], function (ctrl) {
                var instance = instanceController.call(that, ctr
/* ----------------------------------------------------------- Introduction Messages --- */
function BillboardMessages() {
    this.BlankMessage = function () {
        var message = "";
        message += "                ";
        message += "                ";
        message += "                ";
        message += "                ";
        message += "                ";
        message += "                ";
        return (message);
    }
    this.SpeedReadingQuestion = function () {
        var message = "";
        message += "                ";
        message += " CAN YOUR       ";
        message += " BROWSER        ";
        message += " SPEED READ?    ";
        message += "                ";
        message += "                ";
        return (message);
    }
    /* ---------- Feature Introduction ---------- */
    this.Welcome = function () {
        var message = "";
        message += "                ";
        message += "   Welcome to   ";
        message += 

        message += "   Explorer 9   ";
        message += "                ";
        message += "                ";
        return (message);
    }
    this.Ready = function () {
        var message = "";
        message += "                ";
        message += "                ";
        message += "     READY      ";
        message += "                ";
        message += "                ";
        message += "                ";
        return (message);
    }
    this.Set = function () {
        var message = "";
        message += "                ";
        message += "                ";
        message += "      SET       ";
        message += "                ";
        message += "                ";
        message += "                ";
        return (message);
    }
    this.Go = function () {
        var message = "";
        message += "                ";
        message += "                ";
        message += "      GO        ";
        message += "               

        message += "                ";
        message += "                ";
        return (message);
    }
    /* ---------- CSS3 Support ---------- */
    this.Overview01 = function () { return ("There are over  one billion     Windows         customers in    the world today.                "); }
    this.Overview02 = function () { return ("Most of them    spend more time browsing the webthan any other  activity on     their computer. "); }
    this.Overview03 = function () { return ("We build        Windows         Internet        Explorer for    these customers.                "); }
    this.Overview04 = function () { return ("Our goal is     for the same    markup to createinteroperable   HTML5 web sites.                "); }
    this.Overview05 = function () { return ("We want to      unlock the      potential of    modern PC       hardware for    web developers. "); }
    this.Overview06 = function () { return ("Our redesigned  experience puts the web first   and lets your   

    this.Overview07 = function () { return ("All while       continuing our  industry        leadership as   the worlds most trusted browser."); }
    this.Overview08 = function () { return ("We should also  mention a few   other things:                                                   "); }
    this.GPUPowered = function () { return ("GPU Powered      -Graphics       -Canvas         -SVG            -Video          -Text          "); }
    this.JavaScript = function () { return ("New JavaScript   -True Compiler  -Fast Interpret -ECMAScript5    -Machine Code   -Chakra        "); }
    this.CSS3Support = function () { return ("CSS3             -Backgrounds    -Borders        -Color          -Fonts          -Media         "); }
    this.DOMSupport1 = function () { return ("DOM L2/L3        -Core           -Events         -HTML           -Element        -Style         "); }
    this.DOMSupport2 = function () { return ("DOM L2/L3        -Traversal      -Range          -L3Core         -L3E

    /* ---------- Billboard Features ---------- */
    this.BillboardUppercase = function () {
        var message = "";
        message += "                ";
        message += " Uppercase      ";
        message += "                ";
        message += " ABCDEFGHIJKLM  ";
        message += " NOPQRSTUVWXYZ  ";
        message += "                ";
        return (message);
    }
    this.BillboardLowercase = function () {
        var message = "";
        message += "                ";
        message += " Lowercase      ";
        message += "                ";
        message += " abcdefghijklm  ";
        message += " nopqrstuvwxyz  ";
        message += "                ";
        return (message);
    }
    this.BillboardNumbers = function () {
        var message = "";
        message += "                ";
        message += " Numbers        ";
        message += "                ";
        message += " 1234567890     ";
        message += "                ";
        messa
/*******************************************************************************
 * @license
 * Copyright (c) 2012 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials are made 
 * available under the terms of the Eclipse Public License v1.0 
 * 
 * Contributors: IBM Corporation - initial API and implementation
 ******************************************************************************/
/*global define*/
define([], function() {
	var CLOSED = 0, OPENED = 1;
	/**
	 * @name orion.ServiceTracker
	 * @class Simplifies the use of services within a service registry.
	 * @description A ServiceTracker tracks matching services in the given service registry. Matching services are those
	 * whose <em>service name</em> matches the given <code>serviceName</code>. The {@link #addingService} and 
	 * {@link #removedService} methods can be overridden to customize the service objects being tracked.
	 * @param {orion.serviceregistry.ServiceRegistry} serviceR

	 * @param {String} serviceName The service name of services to be tracked.
	 */
	function ServiceTracker(serviceRegistry, serviceName) {
		var refs = {};
		var services = {};
		var state = CLOSED;
		var addedListener, removedListener;
		function add(serviceRef) {
			var id = serviceRef.getServiceId();
			var serviceObject = this.addingService(serviceRef);
			if (serviceObject) {
				refs[id] = serviceRef;
				services[id] = serviceObject;
			}
		}
		function remove(serviceRef) {
			var id = serviceRef.getServiceId();
			var service = services[id];
			delete refs[id];
			delete services[id];
			this.removedService(serviceRef, service);
		}
		function isTrackable(serviceRef) {
			return serviceName === serviceRef.getName();
		}
		/**
		 * Called when a service is being added to this ServiceTracker. Subclasses may override this method. The
		 * default implementation returns the result of calling {@link orion.serviceregistry.ServiceRegistry#getService}
		 * passing the service reference

		 * @name orion.ServiceTracker#addingService
		 * @function
		 * @param {orion.serviceregistry.ServiceReference} serviceRef The reference to the service being added.
		 * @returns {Object} The service object to be tracked for the given service reference. If <code>null</code> 
		 * is returned, the service reference will not be tracked.
		 */
		this.addingService = function(serviceRef) {
			return serviceRegistry.getService(serviceRef);
		};
		/**
		 * Stops tracking services.
		 * @name orion.ServiceTracker#close
		 * @function
		 */
		this.close = function() {
			if (state !== OPENED) {
			}
			state = CLOSED;
			addedListener = null;
			removedListener = null;
			var self = this;
			this.getServiceReferences().forEach(function(serviceRef) {
				remove.call(self, serviceRef);
			});
		};
		/**
		 * Returns service references to the services that are being tracked.
		 * @name orion.ServiceTracker#getServiceReferences
		 * @function
		 * @returns {orion.serviceregistry.ServiceReferenc

		 */
		this.getServiceReferences = function() {
			var refs = refs;
			if (refs.length) {
				return Object.keys(refs).map(function(serviceId) {
					return refs[serviceId];
				});
			}
			return null;
		};
		/**
		 * Begins tracking services.
		 * @name orion.ServiceTracker#open
		 * @function
		 */
		this.open = function() {
			if (state !== CLOSED) {
			}
			state = OPENED;
			var self = this;
			addedListener = /** @ignore */ function(serviceRef, service) {
				if (isTrackable(serviceRef)) {
					add.call(self, serviceRef);
				}
			};
			removedListener = /** @ignore */ function(serviceRef, service) {
				if (isTrackable(serviceRef)) {
					remove.call(self, serviceRef);
				}
			};
			serviceRegistry.getServiceReferences(serviceName).forEach(function(serviceRef) {
				add.call(self, serviceRef);
			});
		};
		/**
		 * Called when a service has been removed from this ServiceTracker. Subclasses may override this method.
		 * The default implementation does nothing.
		 * @name or
$(document).ready(function(){
  $(".youki2").hide();
  $(".youki3").hide();
  $(".youki4").hide();
/*nav 1 click*/
  $("#nav-1").click(function(){
  $(".youki1").show();
  $(".youki2").hide();
  $(".youki3").hide();
  $(".youki4").hide();
  });
/*nav 2 click*/
  $("#nav-2").click(function(){
  $(".youki2").show();
  $(".youki1").hide();
  $(".youki3").hide();
  $(".youki4").hide();
  });
/*nav 3 click*/
  $("#nav-3").click(function(){
  $(".youki3").show();
  $(".youki1").hide();
  $(".youki2").hide();
  $(".youki4").hide();
  });
/*nav 4 click*/
  $("#nav-4").click(function(){
  $(".youki4").show();
  $(".youki1").hide();
  $(".youki2").hide();
  $(".youki3").hide();
  });
  $("#nav-1").mouseover(function(){
    $("#nav-1 div").css("width","100%");
    $("#nav-1 .navtext").css("color","#FFF")
  });
  $("#nav-1").mouseleave(function(){
    $("#nav-1 div").css("width","0%");
    $("#nav-1 .navtext").css("color","#009CFF")
  });
  $("#nav-2").mouseover(function(){
    $("#nav-2 div").css
ï»¿Ext.namespace('Srims');
Ext.namespace('Srims.service');
Srims.service.ResourceService = '/Service/Resource.asmx';
Ext.namespace('Srims.service');
Srims.service.ExportService = '/Service/Export.asmx';
Ext.namespace('Srims.service.common');
Srims.service.common.AnnouncementService = '/Service/Common/Announcement.asmx';
Srims.service.common.NoticeTextService = '/Service/Common/NoticeText.asmx';
Srims.service.common.OutsourcingService = '/Service/Common/Outsourcing.asmx';
Srims.service.common.OutsourcingUnitService = '/Service/Common/OutsourcingUnit.asmx';
Srims.service.common.SubjectService = '/Service/Common/Subject.asmx';
Srims.service.common.LogService = '/Service/Common/Log.asmx';
Srims.service.common.SystemSettingService = '/Service/Common/SystemSetting.asmx'
Srims.service.common.EmailService = '/Service/Common/Email.asmx';
Srims.service.common.ViewService = '/Service/Common/View.asmx';
Ext.namespace('Srims.service.users');
Srims.service.users.UserService = '/Service/Users/User.asmx

Srims.service.users.MessageService = '/Service/Users/Message.asmx';
Ext.namespace('Srims.service.experts');
Srims.service.experts.ExpertService = '/Service/Experts/Expert.asmx';
Srims.service.experts.DepartmentService = '/Service/Experts/Department.asmx';
Srims.service.experts.ExpertInfoHistoryService = '/Service/Experts/ExpertInfoHistory.asmx';
Ext.namespace('Srims.service.bases');
Srims.service.bases.BaseService = '/Service/Bases/Base.asmx';
Ext.namespace('Srims.service.projects');
Srims.service.projects.ProjectService = '/Service/Projects/Project.asmx';
Srims.service.projects.ProjectMemberService = '/Service/Projects/ProjectMember.asmx';
Srims.service.projects.StateHistoryService = '/Service/Projects/ProjectStateHistory.asmx';
Ext.namespace('Srims.service.recovery');
Srims.service.recovery.RecoveryService = '/Service/Recovery/Recovery.asmx';
Ext.namespace('Srims.service.type');
Srims.service.type.ManagementFeesService = '/Service/type/ManagementFees.asmx'
Srims.service.type.Project

Srims.service.type.ProjectTypeService = '/Service/type/ProjectType.asmx'
Srims.service.type.ProjectSupportCategoryService = '/Service/type/ProjectSupportCategory.asmx'
Srims.service.type.ProjectSupportFieldService = '/Service/type/ProjectSupportField.asmx'
Srims.service.type.ProjectSupportSubFieldService = '/Service/type/ProjectSupportSubField.asmx'
Ext.namespace('Srims.service.fund');
Srims.service.fund.FundAllocationService = '/Service/Fund/FundAllocation.asmx';
Srims.service.fund.FundAllocationStateHistoryService = '/Service/Fund/FundAllocationStateHistory.asmx';
Srims.service.fund.FundDescendService = '/Service/Fund/FundDescend.asmx';
Srims.service.fund.FundDescendStateHistoryService = '/Service/Fund/FundDescendStateHistory.asmx';
Srims.service.fund.PayPlanItemService = '/Service/Fund/PayPlanItem.asmx';
Srims.service.fund.FinanceService = '/Service/Fund/Finance.asmx';
Srims.service.fund.FinanceFundDescendService = '/Service/Fund/FinanceFundDescend.asmx';
Srims.service.fund.Voucher

Srims.service.fund.FinanceBakService = '/Service/Fund/FinanceBak.asmx';
Srims.service.fund.VoucherOutService = '/Service/Fund/VoucherOut.asmx';
Srims.service.fund.FundMemberService = '/Service/Fund/FundMember.asmx';
Srims.service.fund.VoucherStateHistoryService = '/Service/Fund/VoucherStateHistory.asmx';
Ext.namespace('Srims.service.documents');
Srims.service.documents.DocumentService = '/Service/Documents/Document.asmx';
Srims.service.documents.ContractService = '/Service/Documents/Contract.asmx';
Srims.service.documents.DocumentModelService = '/Service/Documents/DocumentModel.asmx';
Srims.service.documents.AwardDocumentService = '/Service/Documents/AwardDocument.asmx';
Ext.namespace('Srims.service.awards');
Srims.service.awards.AwardService = '/Service/Awards/Award.asmx';
Srims.service.awards.AwardWinnerService = '/Service/Awards/AwardWinner.asmx';
Ext.namespace('Srims.service.patents');
Srims.service.patents.PatentService = '/Service/Patents/Patent.asmx';
Srims.service.patents.Pate

Srims.service.patents.PatentInventerService = '/Service/Patents/PatentInventer.asmx';
Srims.service.patents.PatentAgencyService = '/Service/Patents/PatentAgency.asmx';
Ext.namespace('Srims.service.papers');
Srims.service.papers.PaperService = '/Service/Papers/Paper.asmx';
Srims.service.papers.PaperAuthorService = '/Service/Papers/PaperAuthor.asmx';
Srims.service.papers.MagazineService = '/Service/Papers/Magazine.asmx';
Srims.service.papers.MagazineInformationService = '/Service/Papers/MagazineInformation.asmx';
Srims.service.papers.MagazineOccupationService = '/Service/Papers/MagazineOccupation.asmx';
Srims.service.papers.LiberalArtsPaperService = '/Service/Papers/LiberalArtsPaper.asmx';
Srims.service.papers.LiberalArtsPaperAuthorService = '/Service/Papers/LiberalArtsPaperAuthor.asmx';
Ext.namespace('Srims.service.statistic');
Srims.service.statistic.StatisticsService = '/Service/Statistics/Statistics.asmx';
Ext.namespace('Srims.service.stamp');
Srims.service.stamp.StampService = '/Se

Srims.service.stamp.StampApplicationService = '/Service/Stamps/StampApplication.asmx';
Srims.service.stamp.StampStateHistoryService = '/Service/Stamps/StampStateHistory.asmx';
Srims.service.stamp.StuffStampService = '/Service/Stamps/StuffStamp.asmx';
Srims.service.stamp.StuffService = '/Service/Stamps/Stuff.asmx';
Srims.service.stamp.StampApplicationTypeService = '/Service/Stamps/StampApplicationType.asmx';
Srims.service.stamp.StampApplicationTypeGroupService = '/Service/Stamps/StampApplicationTypeGroup.asmx';
Srims.service.stamp.StampFirstAdminService = '/Service/Stamps/StampApplicationFirstAdmin.asmx';
Srims.service.stamp.StampSecondAdminService = '/Service/Stamps/StampApplicationSecondAdmin.asmx';
Ext.namespace('Srims.service.performance');
Srims.service.performance.PerformanceService = '/Service/Performance/Performance.asmx';
Srims.service.performance.PerformanceAllocationService = '/Service/Performance/PerformanceAllocation.asmx';
Srims.service.performance.PerformanceAllocationSt
var nav__catapult_8h =
    [ "nav_catapult_arm", "nav__catapult_8h.html#ae43ce3ea92332fe6fc738a508702039c", null ],
    [ "nav_catapult_disarm", "nav__catapult_8h.html#a0d69b9016da0e5461ea6b85c95329c51", null ],
    [ "nav_catapult_highrate_module", "nav__catapult_8h.html#afc9cb27f8b568c7117d4fc7bfd09afbc", null ],
    [ "nav_catapult_run", "nav__catapult_8h.html#a9099e0b41a20bd476fd1bf3703c1a060", null ],
    [ "nav_catapult_setup", "nav__catapult_8h.html#a2c6a974377ff09c2975c1b20bfbebf3b", null ],
    [ "nav_select_touch_down", "nav__catapult_8h.html#a93764b8ee0dbc837ad7c46d752d9299b", null ],
    [ "nav_catapult_acceleration_threshold", "nav__catapult_8h.html#a6803958747912a7e558830cfa0a83016", null ],
    [ "nav_catapult_heading_delay", "nav__catapult_8h.html#abf1646b21522836957567318ffaefd2d", null ],
    [ "nav_catapult_initial_pitch", "nav__catapult_8h.html#aa26f9a9c248db58f29f546944be2cf4c", null ],
    [ "nav_catapult_initial_throttle", "nav__catapult_8h.html#aee421b9216367f9e
var nav__cube_8h =
    [ "NavCube", "structNavCube.html", "structNavCube" ],
    [ "nav_cube_SetAlpha", "nav__cube_8h.html#ab17c3af9f3ec2a27fc6b29d7578781d0", null ],
    [ "nav_cube_SetGridX", "nav__cube_8h.html#ab10ec420d5a1e25d24568fa3cbb4b52c", null ],
    [ "nav_cube_SetGridZ", "nav__cube_8h.html#a7fe7b91fc3a2e0a55371d310533d327d", null ],
    [ "nav_cube_SetNSectX", "nav__cube_8h.html#ab738aae66e65a5f1c401e6bc39eda15e", null ],
    [ "nav_cube_SetNSectZ", "nav__cube_8h.html#a6af57cc1e2ed48c6872e21cd569e18c1", null ],
    [ "nav_cube_SetOffsX", "nav__cube_8h.html#ab7d7c5b8b7f2370854c9dd2ff2299ca5", null ],
    [ "nav_cube_SetOffsY", "nav__cube_8h.html#ad1e905303bba61797a008ef0f6f292ad", null ],
    [ "nav_cube_SetOffsZ", "nav__cube_8h.html#ad38abaaf6c9fcbd5ba647196f0292ef4", null ],
    [ "nav_cube_SetSect", "nav__cube_8h.html#af870bfbe9a7682a451851935b153e7d2", null ],
    [ "nav_cube_SetSizeX", "nav__cube_8h.html#aa03ecf840dc5ea86e780336f629a9871", null ],
    [ "nav_cube_SetSiz
(function($) {
    test("Stackable admin main navigation", function() {
        ok($(".main-nav"), "Main nav exists in page");
        $(".main-nav").width("800px");
        $(".main-nav").stackable();
        ok(!$(".main-nav").hasClass("main-nav-stacked"), "Main nav should NOT have the main-nav-stacked class on page load (nav element width: 800px)");
        $(".main-nav").width("100px");
        $(window).trigger('resize').trigger('resize');
        ok($(".main-nav").hasClass("main-nav-stacked"), "Main nav should have the main-nav-stacked class on window resize (nav element width: 100px)");
        $(".main-nav").width("800px");
        $(window).trigger('resize').trigger('resize');
        ok(!$(".main-nav").hasClass("main-nav-stacked"), "Main nav should NOT have the main-nav-stacked after resizing the window again (nav element width: 800px)");
        $("<style>")
            .prop("type", "text/css")
            .html(".main-nav.main-nav-stacked ul li {\
                    displ
'use strict';
angular.module("DivinElegy.components.messages", [])
.controller("MessageBoxController", ['$scope', function($scope)
    
    $scope.message = '';
    $scope.messageType = 'info';
    $scope.hidden = true;
        
    $scope.hide = function()
    {
        $scope.hidden = true;
    };
    
    $scope.$on('message.error', function(event, message)
    {
        $scope.message = message;
        $scope.messageType = 'error';
        $scope.hidden = false;
    });
    
    $scope.$on('message.info', function(event, message)
    {
        $scope.message = message;
        $scope.messageType = 'info';
        $scope.hidden = false;
    });
    
    $scope.$on('message.success', function(event, message)
    {
        $scope.message = message;
        $scope.messageType = 'success';
        $scope.hidden = false;
    });
    
    $scope.$on('message.warning', function(event, message)
    {
        $scope.message = message;
        $scope.messageType = 'warning';
        $scope.h
var taleslide = angular.module("taleslide", []).config(function($routeProvider) {
	$routeProvider.when('/', {
		templateUrl: 'tmpl/home.html',
		controller: 'HomeController'
	});
	$routeProvider.when('/GetStarted', {
		templateUrl: 'tmpl/getstarted.html',
		controller: 'GetStartedController'
	});
	$routeProvider.when('/OurStory', {
		templateUrl: 'tmpl/ourstory.html',
		controller: 'OurStoryController'
	});
	$routeProvider.when('/BeRemarkable', {
		templateUrl: 'tmpl/beremarkable.html',
		controller: 'BeRemarkableController'
	});
	$routeProvider.when('/LearnMore', {
		templateUrl: 'tmpl/learnmore.html',
		controller: 'LearnMoreController'
	});
	$routeProvider.otherwise({ redirectTo: '/'});
});
taleslide.controller('HomeController', function() {
});
taleslide.controller('GetStartedController', function() {
});
taleslide.controller('OurStoryController', function() {
});
taleslide.controller('BeRemarkableController', function() {
});
taleslide.controller('LearnMoreController', function() 
_menuCloseDelay=0
_subOffsetTop=3
_subOffsetLeft=-15
_subOffsetTop=0
_subOffsetLeft=0
_menuCloseDelay=300
_menuOpenDelay=0
_followSpeed=0
_followRate=0
_scrollAmount=3
_scrollDelay=20
with(navStyle1=new mm_style()){
offclass="nav";
onclass="nav_hover";
pageclass="nav_hover nav_selected";
separatorsize=0;
separatorcolor="#fff";
with(subNavStyle1=new mm_style()){
offclass="nav subnav"
onclass="nav_hover subnav_hover"
pageclass="nav_hover subnav_hover nav_selected subnav_selected"
with(navStyle2=new mm_style()){
offclass="nav";
onclass="nav_hover";
pageclass="nav_hover nav_selected";
with(subNavStyle2=new mm_style()){
offclass="nav subnav"
onclass="nav_hover subnav_hover"
pageclass="nav_hover subnav_hover nav_selected subnav_selected"
with(navStyle3=new mm_style()){
offclass="nav";
onclass="nav_hover";
pageclass="nav_hover nav_selected";
with(subNavStyle3=new mm_style()){
offclass="nav subnav"
onclass="nav_hover subnav_hover"
pageclass="nav_hover subnav_hover nav_selected subnav_selected"

with(navStyle4=new mm_style()){
offclass="nav";
onclass="nav_hover";
pageclass="nav_hover nav_selected";
with(subNavStyle4=new mm_style()){
offclass="nav subnav"
onclass="nav_hover subnav_hover"
pageclass="nav_hover subnav_hover nav_selected subnav_selected"
with(navStyle5=new mm_style()){
offclass="nav";
onclass="nav_hover";
pageclass="nav_hover nav_selected";
with(subNavStyle5=new mm_style()){
offclass="nav subnav"
onclass="nav_hover subnav_hover"
pageclass="nav_hover subnav_hover nav_selected subnav_selected"
with(navStyle6=new mm_style()){
offclass="nav";
onclass="nav_hover";
pageclass="nav_hover nav_selected";
with(subNavStyle6=new mm_style()){
offclass="nav subnav"
onclass="nav_hover subnav_hover"
pageclass="nav_hover subnav_hover nav_selected subnav_selected"
with(navStyle7=new mm_style()){
offclass="nav";
onclass="nav_hover";
pageclass="nav_hover nav_selected";
with(subNavStyle7=new mm_style()){
offclass="nav subnav"
onclass="nav_hover subnav_hover"
pageclass="nav_hover subnav
AppController = RouteController.extend({
  layoutTemplate: 'appLayout'
});
App2Controller = RouteController.extend({
  layoutTemplate: 'appLayout2'
});
TrendingController = AppController.extend({});
HomeController = AppController.extend({});
OverdueBookingsController = AppController.extend({});
BookingLogsController = AppController.extend({});
CustomerLogsController = AppController.extend({});
OtherLogsController = AppController.extend({});
LogsController = AppController.extend({});
CustomersController = AppController.extend({});
CustomersCreateController = AppController.extend({});
CustomersQuickbooksCreateController = AppController.extend({});
SplashPageController = App2Controller.extend({});
EulaController = App2Controller.extend({});
PrivacyController = App2Controller.extend({});
CustomersEditDetailsController = AppController.extend({});
CustomersAddPackageController = AppController.extend({});
CustomersAddPrivilegeController = AppController.extend({});
TestController = AppControll

CustomersShowController = AppController.extend({});
SettingsController = AppController.extend({});
CustomerPackagesController = AppController.extend({});
CustomerPackagesShowController = AppController.extend({});
BookingsViewStatusesController = AppController.extend({});
BookingsRecordPaymentController = AppController.extend({});
BookingsCustomerSignController = AppController.extend({});
BookingsStaffSignController = AppController.extend({});
BookingsViewCustomerSignatureController = AppController.extend({});
BookingsViewSignatureController = AppController.extend({});
OthersCustomerSignController = AppController.extend({});
OthersViewCustomerSignatureController = AppController.extend({});
BookingsAddBookingDatesController = AppController.extend({});
BookingCreateInvoiceController = AppController.extend({});
BookingsAddBookingItemsController = AppController.extend({});
BookingsSerialNoSelectController = AppController.extend({});
BookingsController = AppController.extend({});
BookingsSh

BookingPrintShowController = AppController.extend({});
OtherPrintShowController = AppController.extend({});
OthersController = AppController.extend({});
OthersShowController = AppController.extend({});
OthersAddOtherItemsController = AppController.extend({});
OthersSerialNoSelectController = AppController.extend({});
OthersRecordPaymentController = AppController.extend({});
NotificationsController = AppController.extend({});
PrivilegesController = AppController.extend({});
PrivilegesEditController = AppController.extend({});
PrivilegesCreateController = AppController.extend({});
PrivilegesEditEquipmentController = AppController.extend({});
PrivilegesEditCustomersController = AppController.extend({});
PrivilegesShowController = AppController.extend({});
CalendarsController = AppController.extend({});
ClashCalendarsController = AppController.extend({});
OverbookedCalendarsController = AppController.extend({});
EquipmentCalendarsController = AppController.extend({});
CalendarsShowControl
'use strict';
(function() {
  describe('PalindromeController', function() {
    beforeEach(module('main'));
    var $controller;
    beforeEach(inject(function(_$controller_){
      $controller = _$controller_;
    }));
    it('"tatbctat" is a not palindrome', function(){
      var PalindromeController = $controller('PalindromeController');
      PalindromeController.palindrome = "tatbctat";
      expect(PalindromeController.isPalindrome()).toBe(false);
    });
    it('"tattarrattat" is a palindrome', function(){
      var PalindromeController = $controller('PalindromeController');
      PalindromeController.palindrome = "tattarrattat";
      expect(PalindromeController.isPalindrome()).toBe(true);
    });
    it('"A Man, A Plan, A Canal-Panama!" is a palindrome', function()
    {
      var PalindromeController = $controller('PalindromeController');
      PalindromeController.palindrome = "A Man, A Plan, A Canal-Panama!";
      expect(PalindromeController.isPalindrome()).toBe(true);
   
define(['jquery', 'knockout', 'modules/lifecycle/service_dashboard', 'modules/lifecycle/lifecycleServiceUtil'],
        function($, ko, service_dashboard, util) {
            console.log("defining CommDashboardViewModel ...");
            function CommonDashboardViewModel() {
                var self = this;
                self.serviceInstList = [];
                self.selectedService = {};
                self.serviceMetricList = [];
                self.serviceList = ko.observableArray([]);
                self.beforeRoutingAction = function() {
                    self.serviceInstList = util.getServiceList();
                    $.ajax({
                        type: 'POST',
                        url: "rest/lifecycle/sql",
                        contentType: "application/json; charset=utf-8",
                        async: false,
                        data: JSON.stringify({"NAME": "service_metrics"}),
                        success: function(data, textStatus, jqXHR) {
      

                                alert("No service Instances Exists!");
                            } else {
                                self.serviceMetricList = data;
                                self.getEngCountAndStatus();
                            }
                        }
                    });
                };
                self.getEngCountAndStatus = function() {
                    $.each(self.serviceInstList, function(idx, serviceInst) {
                        serviceInst['inProgressCount'] = 0;
                        serviceInst['setUpCount'] = 0;
                        serviceInst['completedCount'] = 0;
                        serviceInst['totalCount'] = 0;
                        $.each(self.serviceMetricList, function(idx, serviceMetric) {
                            if (serviceInst.serviceId === serviceMetric.SERVICE_ID) {
                                if (serviceMetric.ENG_STATUS === "Active") {
                                    serviceInst['inProg

                                }
                                if (serviceMetric.ENG_STATUS === "New") {
                                    serviceInst['setUpCount'] = Number(serviceMetric.ENG_COUNT);
                                }
                                if (serviceMetric.ENG_STATUS === "Scoped") {
                                    serviceInst['inProgressCount'] = Number(serviceInst['inProgressCount']) + Number(serviceMetric.ENG_COUNT);
                                }
                                if (serviceMetric.ENG_STATUS === "Closed") {
                                    serviceInst['completedCount'] = Number(serviceMetric.ENG_COUNT);
                                }
                            }
                        });
                        serviceInst['totalCount'] = Number(serviceInst['completedCount']) + Number(serviceInst['inProgressCount']) + Number(serviceInst['setUpCount']);
                    });
                };
                self.view
/*!
 * ${copyright}
 */
sap.ui.define(['jquery.sap.global', './ServiceFactory'],
	function(jQuery, ServiceFactory) {
	"use strict";
	var mServiceFactories = Object.create(null);
	/**
	 * The service factory registry.
	 *
	 * @author SAP SE
	 * @version ${version}
	 * @alias sap.ui.core.service.ServiceFactoryRegistry
	 * @private
	 * @sap-restricted sap.ushell
	 * @since 1.37.0
	 */
	var ServiceFactoryRegistry = Object.create(null);
	/**
	 * Registers a service factory instance for the given name.
	 *
	 * @param {string} sServiceFactoryName Name of the service factory
	 * @param {sap.ui.core.service.ServiceFactory} oServiceFactory Service factory instance
	 * @return {sap.ui.core.service.ServiceFactoryRegistry} <code>this</code> to allow method chaining
	 * @static
	 * @private
	 * @sap-restricted sap.ushell
	 */
	ServiceFactoryRegistry.register = function(sServiceFactoryName, oServiceFactory) {
		jQuery.sap.assert(sServiceFactoryName, "sServiceFactoryName must not be empty, null or und

		jQuery.sap.assert(oServiceFactory instanceof ServiceFactory, "oServiceFactory must be an instance of sap.ui.core.service.ServiceFactory");
		mServiceFactories[sServiceFactoryName] = oServiceFactory;
		return this;
	};
	/**
	 * Unregisters a service factory instance for the given name.
	 *
	 * @param {string} sServiceFactoryName Name of the service factory
	 * @return {sap.ui.core.service.ServiceFactoryRegistry} <code>this</code> to allow method chaining
	 * @static
	 * @private
	 * @sap-restricted sap.ushell
	 */
	ServiceFactoryRegistry.unregister = function(sServiceFactoryName) {
		jQuery.sap.assert(sServiceFactoryName, "sServiceFactoryName must not be empty, null or undefined");
		delete mServiceFactories[sServiceFactoryName];
		return this;
	};
	/**
	 * Returns the service factory instance for the given name.
	 *
	 * @param {string} sServiceFactoryName Name of the service factory
	 * @return {sap.ui.core.service.ServiceFactory} Service factory instance
	 * @static
	 * @private
	 
var middleware  = require('../middleware').middleware,
    api         = require('../api');
module.exports = function (server) {
    server.get('/ghost/api/v0.1/posts', api.requestHandler(api.posts.browse));
    server.post('/ghost/api/v0.1/posts', api.requestHandler(api.posts.add));
    server.get('/ghost/api/v0.1/posts/:id', api.requestHandler(api.posts.read));
    server.put('/ghost/api/v0.1/posts/:id', api.requestHandler(api.posts.edit));
    server.del('/ghost/api/v0.1/posts/:id', api.requestHandler(api.posts.destroy));
    server.get('/ghost/api/v0.1/posts/getSlug/:title', middleware.authAPI, api.requestHandler(api.posts.getSlug));
    server.get('/ghost/api/v0.1/settings/', api.requestHandler(api.settings.browse));
    server.get('/ghost/api/v0.1/settings/:key/', api.requestHandler(api.settings.read));
    server.put('/ghost/api/v0.1/settings/', api.requestHandler(api.settings.edit));
    server.get('/ghost/api/v0.1/users/', api.requestHandler(api.users.browse));
    server.get(
/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
$("#Belier").click(function() {
    $(".divtohide").hide();
    $("#belier1").show();
    $("#belier2").show();
});
$("#Capricorne").click(function() {
    $(".divtohide").hide();
    $("#capricorne1").show();
    $("#capricorne2").show();
});
$("#Balance").click(function() {
    $(".divtohide").hide();
    $("#balance1").show();
    $("#balance2").show();
});
$("#Cancer").click(function() {
    $(".divtohide").hide();
    $("#cancer1").show();
    $("#cancer2").show();
});
$("#Gemeaux").click(function() {
    $(".divtohide").hide();
    $("#gemeaux1").show();
    $("#gemeaux2").show();
});
$("#Lion").click(function() {
    $(".divtohide").hide();
    $("#lion1").show();
    $("#lion2").show();
});
$("#Poissons").click(function() {
    $(".divtohide").hide();
    $("#poissons1").show();
    $("#poissons
(function ( define ) {
    "use strict";
    define([  'angular'
            , 'controller/appController'
            , 'controller/homeController'
            , 'controller/footerController'
            , 'controller/aboutController'
            , 'controller/eventController'
            , 'controller/participantsController'
            , 'framework/delegate/appDelegate'
            , 'framework/manager/eventManager'
        ],
        function (    angular
                    , appController
                    , homeController
                    , footerController
                    , aboutController
                    , eventController
                    , participantsController
                    , appDelegate
                    , eventManager
                 )
        {
            var moduleName = "app.modules";
            angular.module(moduleName,[])
                  .service( "appDelegate", appDelegate)
                  .service( "eventManager", eventManager)
      
define(function(require) {
'use strict';
require("./common/main");
require("./task/main");
require("./monitor/main");
require("./employee/main");
require("./user/main");
require("./profile/main");
require("./sys/main");
require("./task/main");
require("./card/main");
var testCommon = require("./common/test").testCommon;
var testEmployee = require("./employee/test").testEmployee;
var testUser = require("./user/test").testUser;
var testProfile = require("./profile/test").testProfile;
var testRule = require("./sys/test").testRule;
var testTask = require("./task/test").testTask;
var testTaskReport = require("./task/test").testReport;
var testCard = require("./card/test").testCard;
window.PATH = window.location.pathname.slice(0, window.location.pathname.lastIndexOf("/"));
var httpProvider;
angular.module('ecgTestApp', ['ecgCommon', 'ecgTask', 'ecgMonitor', 'ecgEmployee', 'ecgUser', 'ecgSys', 'ecgTask', "ecgProfile", "ecgCard"])
.config(['$httpProvider', '$routeProvider', function ($httpProv

     httpProvider = $httpProvider;
}])
.run([        '$rootScope', '$http', 'EnumService',
              'ChiefService', 'ExpertService', 'OperatorService', 'ProfileService',
              'UserService', 'RuleService', 'ReplyConfigService', 'CardService',
              'TaskService',
      function($rootScope,   $http, EnumService,
               ChiefService,   ExpertService,   OperatorService ,  ProfileService,
               UserService, RuleService, ReplyConfigService, CardService,
               TaskService) {
    describe("App REST Test", function() {
        testCommon(it, EnumService);
        testProfile(
            {it: it}, 
            {httpProvider: httpProvider}, 
            {ProfileService: ProfileService, UserService: UserService}
          );
        testEmployee(
          {it: it}, 
          {httpProvider: httpProvider}, 
          {ChiefService: ChiefService, ExpertService: ExpertService, OperatorService: OperatorService, ProfileService: ProfileService}
        

        testUser(
          {it: it}, 
          {httpProvider: httpProvider}, 
          {UserService: UserService}
        );
        testRule(
          {it: it}, 
          {httpProvider: httpProvider}, 
          {RuleService: RuleService, ReplyConfigService: ReplyConfigService, UserService: UserService}
        );
        testCard(
          {it: it}, 
          {httpProvider: httpProvider},
          {ProfileService: ProfileService, CardService: CardService, UserService: UserService}
        );
        testTask(
          {it: it}, 
          {httpProvider: httpProvider},
          {ProfileService: ProfileService, TaskService: TaskService, OperatorService: OperatorService, UserService: UserService}
        );
        testTaskReport(
          {it: it}, 
          {httpProvider: httpProvider},
          {ProfileService: ProfileService, TaskService: TaskService, OperatorService: OperatorService, UserService: UserService}
        )
    });
    mocha.run();
}]);
angular.bootstrap(d
var techTree = (function(api){
    api.orientNodes = function(d, depths){
        switch(api.settings.nodeOrientation){
            case "vertical":
                api.orientNodes.vertical(d, depths);
                break;
            case "horizontal":
                api.orientNodes.horizontal(d, depths);
                break;
            case "circular":
                api.orientNodes.circular(d, depths);
                break;
            default:
                api.orientNodes.vertical(d, depths);
                break;
        }
        api.orientLinks();
    };
    api.orientNodes.horizontal = function(d, depths){
        d.x = d.depth * api.dimensions.nodeOuterHeight;
        d.y = d._depthElementCount * api.dimensions.svgHeight/(depths[d.depth]+1) -
            api.dimensions.nodeInnerHeight/2;
    };
    api.orientNodes.vertical = function(d, depths){
        d.x = d.columnNumber * api.dimensions.svgWidth/6 -
            api.dimensions.nodeInnerWidth/2;
        d.y = d.d

    };
    api.orientNodes.circular = function(d, depths){
        d.x = api.dimensions.svgWidth/2 -
            api.dimensions.nodeInnerWidth/2 +
            120*d.depth*Math.cos(2*d._depthElementCount*Math.PI/depths[d.depth]);
        d.y = api.dimensions.svgHeight/2 -
            api.dimensions.nodeInnerHeight/2 +
    };
    api.orientLinks = function(){
        switch(api.settings.nodeOrientation){
            case "vertical":
                api.lineFunction = api.orientLinks.vertical;
                break;
            case "horizontal":
                api.lineFunction = api.orientLinks.horizontal;
                break;
            case "circular":
                api.lineFunction = api.orientLinks.horizontal;
                break;
            default:
                api.lineFunction = api.orientLinks.vertical;
                break;
        }
    };
    api.orientLinks.horizontal = d3.svg
        .diagonal()
        .source(function(d) { return {x:d.source.y, y:d.source.x};
function showGender(data){
  if(data=='3'){
    $('.gendergrey').hide();
    $('.gendercolour').hide();
    $('#mengrey').show();
    $('#womengrey').show();
    $('#anyonecolour').show();
    $('#gendervalue').val('all');
    $('#gender').val('3');
  }else if(data=='1'){
    $('.gendergrey').hide();
    $('.gendercolour').hide();
    $('#anyonegrey').show();
    $('#womengrey').show();
    $('#mencolour').show();
    $('#gendervalue').val('men');
    $('#gender').val('1');
  }else if(data=='2'){
    $('.gendergrey').hide();
    $('.gendercolour').hide();
    $('#anyonegrey').show();
    $('#mengrey').show();
    $('#womencolour').show();
    $('#gendervalue').val('women');
    $('#gender').val('2');
  }
function showPeople(data){
  if(data=='0'){
    
    $('#coffeegrey').hide();
    $('#lunchcolour').hide();
    $('#dinnercolour').hide();
    $('#lunchgrey').show();
    $('#dinnergrey').show();
    $('#invitepeoplevalue').val('coffee');
    $('#invitepeople').val('0');
    
    $('#c
define(['lib/jquery'], function ($$dummy1) {
	var currentview = "loadingview";
	$("#btnSettings").on("click", function (eventObject) {
		ShowSettings();
	});
	$("#btnLibrary").on("click", function (eventObject) {
		ShowArtistView();
	});
	function ShowCurrentView() {
		$("div#mainview>div").addClass("invisible");
		$("div#" + currentview).removeClass("invisible");
	}
	function ShowArtistView() {
		currentview = "artistview";
		ShowCurrentView();
	}
	function ShowAlbumView() {
		currentview = "albumview";
		ShowCurrentView();
	}
	function ShowTrackView() {
		currentview = "trackview";
		ShowCurrentView();
	}
	function ShowSettings() {
		currentview = "settingsview";
		ShowCurrentView();
	}
	function ShowFolderPicker() {
		currentview = "libraryDirPicker";
		ShowCurrentView();
	}
	return {
		ShowArtistView: ShowArtistView,
		ShowAlbumView: ShowAlbumView,
		ShowTrackView: ShowTrackView,
		ShowSettings: ShowSettings,
		ShowFolderPicker: ShowFolderPicker,
		getCurrentView: function () { ret
'use strict';
define(function(require, exports) {
var messageTemplate = require("./templates/message.html");
angular.module('gymMessage', [])
.factory("MessageService", function() {
    var items = [];
    return {
        all: function() {
          return items;
        },
        create: function() {
          items.push(arguments[0]);
        }
    };
})
.controller('MessageController', ['$scope', '$filter', '$timeout', 'MessageService', function ($scope, $filter, $timeout, MessageService) {
    $scope.message = {};
    $scope.message.total = 0;
    $scope.message.msgs = [];
    $scope.message.currents = [];
    $scope.message.current = null;
    $scope.message.show = function(message) {
        message.id = (new Date()).getTime();
        message.date = $filter('date')(message.id, 'HH:mm:ss');
        $scope.message.current = message;
        $scope.message.currents.push(message);
        $scope.message.msgs.push(message);
        MessageService.create(message);
        $timeout(f

            $(document.body).removeClass("msging");
            $scope.message.close();
        }, 5000);
    };
    $scope.message.close = function() {
        $scope.message.currents.pop();
        if ($scope.message.currents.length > 0) {
            $scope.message.current = $scope.message.currents[$scope.message.currents.length - 1];
        }
    };
    $scope.message.closeAll = function() {
        $(document.body).removeClass("msging");
        $scope.message.currents = [];
        $scope.message.current = null;
    };
    $scope.message.success = function(msg) {
        var message = {
            type: 'success',
            text: msg,
            show: true
        };
        $scope.message.show(message);
    };
    $scope.message.info = function(msg) {
        var message = {
            type: 'info',
            text: msg,
            show: true
        };
        $scope.message.show(message);
    };
    $scope.message.error = function(msg) {
        var message = {
      
UsuariosService = require('./usuarios_service.js');
EncuentrosService = require('./encuentros_service.js');
ServiciosService = require('./servicios_service.js');
FiestasService = require('./fiestas_service.js');
function PregoServices() {
    var __store = {};
    var __usuariosService = new UsuariosService(__store);
	var __encuentrosService = new EncuentrosService(__store, this);
	var __serviciosService = new ServiciosService(__store);
	var __fiestasService = new FiestasService(__store, this);
    this.setStore = function (store) {
		__store = store;
		__usuariosService.setStore(__store);
		__encuentrosService.setStore(__store);
		__serviciosService.setStore(__store);
		__fiestasService.setStore(__store);
    }
    this.rellenar = function () {
        __usuariosService.rellenar();
        __encuentrosService.rellenar();
        __serviciosService.rellenar();
		__fiestasService.rellenar();
    }
    this.rellenarDemo = function () {
        __usuariosService.rellenarDemo();
        __
System.register(['./validation-controller', './validator'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var validation_controller_1, validator_1;
    var ValidationControllerFactory;
    return {
        setters:[
            function (validation_controller_1_1) {
                validation_controller_1 = validation_controller_1_1;
            },
            function (validator_1_1) {
                validator_1 = validator_1_1;
            }],
        execute: function() {
            /**
             * Creates ValidationController instances.
             */
            ValidationControllerFactory = (function () {
                function ValidationControllerFactory(container) {
                    this.container = container;
                }
                ValidationControllerFactory.get = function (container) {
                    return new ValidationControllerFactory(container);
                };
                /**
 

                 */
                ValidationControllerFactory.prototype.create = function (validator) {
                    if (!validator) {
                        validator = this.container.get(validator_1.Validator);
                    }
                    return new validation_controller_1.ValidationController(validator);
                };
                /**
                 * Creates a new controller and registers it in the current element's container so that it's
                 * available to the validate binding behavior and renderers.
                 */
                ValidationControllerFactory.prototype.createForCurrentScope = function (validator) {
                    var controller = this.create(validator);
                    this.container.registerInstance(validation_controller_1.ValidationController, controller);
                    return controller;
                };
                return ValidationControllerFactory;
            }());
            exports_
/**
 * Ready
 */
$(document).ready(function() { 
	$("#nav-button").bind("click", nav_open);
	$("#nav").bind("mouseleave", nav_timer);
});
/**
 * Navigation drop down
 */
var nav_timeout = 500;
var nav_closetimer = 0;
var nav_ddmenuitem = 0;
var nav_buttonlink = 0;
function nav_open() {
	nav_canceltimer();
	nav_close();
	nav_ddmenuitem = $("#nav").css("visibility", "visible").css("display", "block");
	nav_buttonlink = $("#nav-span").addClass("navactive");
function nav_close() {
	if (nav_ddmenuitem) {
		nav_ddmenuitem.css("visibility", "hidden").css("display", "none");
		nav_buttonlink.removeClass("navactive");
	}
function nav_timer() {
	nav_closetimer = window.setTimeout(nav_close, nav_timeout);
function nav_canceltimer() {
	if (nav_closetimer) {
		window.clearTimeout(nav_closetimer);
		nav_closetimer = null;
	}
/**
 * Hijack the in-page article scrolling
 */
$("a[rel='footnote']").click(function() {
	var h = $(this).attr("href");
	var i = h.substr(h.indexOf("#")+1);
	var p = $("#"+i).o
var restitute = require('../src/index');
function listTestController() {
    restitute.controller.list.call(this, '/rest/listTestController');
    this.controllerAction = function() {
        return this.jsonService(this.service('list'));
    };
listTestController.prototype = new restitute.controller.list();
function listTestWithEmptyController() {
    restitute.controller.list.call(this, '/rest/listTestWithEmptyController');
    this.ignoreEmptyParams = false;
    this.controllerAction = function() {
        return this.jsonService(this.service('list'));
    };
listTestWithEmptyController.prototype = new restitute.controller.list();
function getTestController() {
    restitute.controller.get.call(this, '/rest/getTestController/:id');
    this.controllerAction = function() {
        return this.jsonService(this.service('get'));
    };
getTestController.prototype = new restitute.controller.get();
function deleteTestController() {
    restitute.controller.delete.call(this, '/rest/deleteT

    this.controllerAction = function() {
        return this.jsonService(this.service('delete'));
    };
deleteTestController.prototype = new restitute.controller.delete();
function createTestController() {
    restitute.controller.create.call(this, '/rest/createTestController');
    this.controllerAction = function() {
        return this.jsonService(this.service('save'));
    };
createTestController.prototype = new restitute.controller.create();
function updateTestController() {
    restitute.controller.update.call(this, '/rest/updateTestController');
    this.controllerAction = function() {
        return this.jsonService(this.service('save'));
    };
updateTestController.prototype = new restitute.controller.update();
function listParamTestController() {
    restitute.controller.list.call(this, '/rest/listParamTestController');
    this.controllerAction = function() {
        return this.jsonService(this.service('list', { readonly: 1 }));
    };
listParamTestController.prototype = 

function getParamTestController() {
    restitute.controller.get.call(this, '/rest/getParamTestController');
    this.controllerAction = function() {
        return this.jsonService(this.service('get', { readonly: 1 }));
    };
getParamTestController.prototype = new restitute.controller.get();
function deleteParamTestController() {
    restitute.controller.delete.call(this, '/rest/deleteParamTestController');
    this.controllerAction = function() {
        return this.jsonService(this.service('delete', { readonly: 1 }));
    };
deleteParamTestController.prototype = new restitute.controller.delete();
function createParamTestController() {
    restitute.controller.create.call(this, '/rest/createParamTestController');
    this.controllerAction = function() {
        return this.jsonService(this.service('save', { readonly: 1 }));
    };
createParamTestController.prototype = new restitute.controller.create();
function updateParamTestController() {
    restitute.controller.update.call(this
instance Text ClassState where
  showsPrec _ ClassLinked      = showString "Linked"
  showsPrec _ InProgress       = showString "InProgress"
  showsPrec _ ClassInitialized = showString "Initialized"
  showsPrec _ ClassUnusable    = showString "Unusable"
  showsPrec _ x                = showString (show' x)
showsJavaFRef :: FieldRef -> ShowS
showsJavaFRef (c :/ f) = showString c . showString "." . showString f
showJavaFRef :: FieldRef -> String
showJavaFRef (fr) = showsJavaFRef(fr) ""
showsJavaMRef :: MethRef -> ShowS
showsJavaMRef (c :/ (m,types)) = showString c . showString "." .
                          showString m
showJavaMRef :: MethRef -> String
showJavaMRef (mr) = showsJavaMRef (mr) ""
showJavaMRefArgs :: MethRef -> String
showJavaMRefArgs(c:/(m,types)) = (showString c . showString "." .
                                  showString m  . showString "(" .
                                  showSepBy (", ") (map shows types) .
                                  showString ")") ""
sh
$(document).scroll(function () {
    var position = $(window).scrollTop();
    var navEl = $('.nav-wrapper');
    if (position >= 300) 
    {
        if (!navEl.hasClass('nav-wrapper-black'))
            navEl.addClass('nav-wrapper-black');
    } 
    else 
    {
        if (navEl.hasClass('nav-wrapper-black'))
            navEl.removeClass('nav-wrapper-black');
    }
});
$(document).scroll(function () {
    var position = $(window).scrollTop();
    var navEl = $('.nav').first();
    if (position >= 700 & position <= 1538) 
    {
        if (!navEl.hasClass('nav-yellow'))
            navEl.addClass('nav-yellow');
    } 
    else 
    {
        if (navEl.hasClass('nav-yellow'))
            navEl.removeClass('nav-yellow');
    }
});
$(document).scroll(function () {
    var position = $(window).scrollTop();
    var navEl = $('.nav').first().next();
    if (position >= 1539 & position <= 2834) {
        $('about')
        if (!navEl.hasClass('nav-yellow'))
            navEl.addClass('nav-y

    } else {
        if (navEl.hasClass('nav-yellow'))
            navEl.removeClass('nav-yellow');
    }
});
$(document).scroll(function () {
    var position = $(window).scrollTop();
    var navEl = $('.nav').first().next().next();
    if (position >= 2835 & position <= 5012) {
        if (!navEl.hasClass('nav-yellow'))
            navEl.addClass('nav-yellow');
    } else {
        if (navEl.hasClass('nav-yellow'))
            navEl.removeClass('nav-yellow');
    }
});
$(document).scroll(function () {
    var position = $(window).scrollTop();
    var navEl = $('.nav').first().next().next().next();
    if (position >= 5013 & position <= 6267) {
        if (!navEl.hasClass('nav-yellow'))
            navEl.addClass('nav-yellow');
    } else {
        if (navEl.hasClass('nav-yellow'))
            navEl.removeClass('nav-yellow');
    }
});
$(document).scroll(function () {
    var position = $(window).scrollTop();
    var navEl = $('.nav').last();
    if (position > 6267) {
        if (!n
(function ($) {
    $.extend({
        operator: function () {
            var _base = this;
            var createMessage = function (type, message) {
                return { type: type, message: message };
            };
            _base.sendMessage = function (messageType, message) {
                var d = createMessage(messageType, message);
                _base.publish("send-message", d);
            };
            _base.sendInfo = function (message) {
                _base.sendMessage("info", message);
            };
            _base.sendSuccess = function (message) {
                _base.sendMessage("success", message);
            };
            _base.sendError = function (message) {
                _base.sendMessage("error", message);
            };
            _base.publish = function (type, data) {
                pubsubz.publish(type, data);
            };
            _base.subscribe = function (type, callback) {
                pubsubz.subscribe(type, callback);
    
(function() {
  if (!window.FA) window.FA = {};
  if (FA.Nav) {
    if (window.console && console.warn) console.warn('FA.Nav has already been defined');
    return;
  }
  FA.Nav = {
    
    targetNode : '#page-header .navlinks',
    
    
    
    
    offsets : {
      tbVisible : {
        bottom : 30,
      },
      
      tbHidden : {
        bottom : 0,
        top : '0px'
      },
      
      toggler : '30px'
    },
    
    
    
    checkState : function() {
      if (!FA.Nav.animating) {
        var hidden = FA.Nav.barStatic.getBoundingClientRect().bottom <= FA.Nav.activeOffset.bottom;
      
        if (hidden && FA.Nav.barSticky.style.top != FA.Nav.activeOffset.top) {
          if (FA.Nav.toggler) FA.Nav.toggler.style.top = FA.Nav.offsets.toggler;
          FA.Nav.barSticky.style.top = FA.Nav.activeOffset.top;
          FA.Nav.visible = true;
        } else if (!hidden && FA.Nav.barSticky.style.top != '-30px') {
          if (FA.Nav.toggler) FA.Nav.toggler.style.top = '-30

          FA.Nav.barSticky.style.top = '-30px';
          FA.Nav.visible = false;
        }
      }
    },
    
    
    animate : function() {
      if (FA.Nav.visible) {
        FA.Nav.animating = true;
        FA.Nav.barSticky.style.transition = 'none';
      
        $(FA.Nav.barSticky).animate({
          top : FA.Nav.activeOffset.top
        }, function() {
          FA.Nav.barSticky.style.transition = '';
          FA.Nav.animating = false;
          FA.Nav.checkState();
        });
      }
    },
    
    toggle : function() {
      if (FA.Nav.barSticky.style.width == '100%') {
        my_setcookie('fa_sticky_nav', 'hidden');
        FA.Nav.barSticky.style.width = '0%';
      } else {
        my_setcookie('fa_sticky_nav', 'shown');
        FA.Nav.barSticky.style.width = '100%';
      }
      return false;
    }
    
  };
  
  $(function() {
    FA.Nav.activeOffset = (my_getcookie('toolbar_state') == 'fa_hide' || !_userdata.activate_toolbar) ? FA.Nav.offsets.tbHidden : FA.Nav.o

    if (!_userdata.activate_toolbar) FA.Nav.offsets.toggler = '0px';
    
    
    if (FA.Nav.barStatic) {
      if (FA.Nav.customNav) FA.Nav.barSticky.insertAdjacentHTML('beforeEnd', FA.Nav.customNav);
      FA.Nav.barSticky.id = 'fa_sticky_nav';
      FA.Nav.barSticky.style.width = my_getcookie('fa_sticky_nav') == 'hidden' ? '0%' : '100%';
      FA.Nav.barSticky.style.top = '-30px';
          
          
      if (FA.Nav.collapsible) {
        FA.Nav.toggler = document.createElement('A');
        FA.Nav.toggler.id = 'fa_sticky_toggle';
        FA.Nav.toggler.href = '#';
        FA.Nav.toggler.style.top = '-30px';
        FA.Nav.toggler.onclick = FA.Nav.toggle;
          
        document.body.appendChild(FA.Nav.toggler);
      };
        
      
      $(function() {
        $('#fa_hide').click(function() {
          FA.Nav.activeOffset = FA.Nav.offsets.tbHidden;
          FA.Nav.animate();
        });
        
        $('#fa_show').click(function() {
          FA.Nav.activeOffset = 
var nav__cube_8h =
    [ "NavCube", "nav__cube_8h.html#structNavCube", [
      [ "alpha", "nav__cube_8h.html#af4aff8ea35f47f8130381ae34bc82dbc", null ],
      [ "grid_x", "nav__cube_8h.html#a96eda6e13ea2cc1e1763745892c20569", null ],
      [ "grid_z", "nav__cube_8h.html#ad7637c9fa919586f3ff632e0ce9354a7", null ],
      [ "nline_x", "nav__cube_8h.html#a7c6ae510fb867ecf79aa66f76576cd92", null ],
      [ "nline_z", "nav__cube_8h.html#ae82b557fe8a22cd15b7a67c9414c8477", null ],
      [ "nsect_x", "nav__cube_8h.html#ab520dff456a15c292ec82c34b9a3b8ad", null ],
      [ "nsect_z", "nav__cube_8h.html#ad4301a337cad48904ee9b43d3959b4c5", null ],
      [ "offset", "nav__cube_8h.html#a824830bfb26bf1c0d17d824067f82ef5", null ],
      [ "sect", "nav__cube_8h.html#a00a987e7a8d72234130023cfe55a2f85", null ],
      [ "size", "nav__cube_8h.html#a4d6853885209d6c862f016899a7bb8e2", null ]
    ] ],
    [ "nav_cube_SetAlpha", "nav__cube_8h.html#ab17c3af9f3ec2a27fc6b29d7578781d0", null ],
    [ "nav_cube_SetG

    [ "nav_cube_SetGridZ", "nav__cube_8h.html#a7fe7b91fc3a2e0a55371d310533d327d", null ],
    [ "nav_cube_SetNSectX", "nav__cube_8h.html#ab738aae66e65a5f1c401e6bc39eda15e", null ],
    [ "nav_cube_SetNSectZ", "nav__cube_8h.html#a6af57cc1e2ed48c6872e21cd569e18c1", null ],
    [ "nav_cube_SetOffsX", "nav__cube_8h.html#ab7d7c5b8b7f2370854c9dd2ff2299ca5", null ],
    [ "nav_cube_SetOffsY", "nav__cube_8h.html#ad1e905303bba61797a008ef0f6f292ad", null ],
    [ "nav_cube_SetOffsZ", "nav__cube_8h.html#ad38abaaf6c9fcbd5ba647196f0292ef4", null ],
    [ "nav_cube_SetSect", "nav__cube_8h.html#af870bfbe9a7682a451851935b153e7d2", null ],
    [ "nav_cube_SetSizeX", "nav__cube_8h.html#aa03ecf840dc5ea86e780336f629a9871", null ],
    [ "nav_cube_SetSizeY", "nav__cube_8h.html#a77397a3774d20390bf36852f00836050", null ],
    [ "nav_cube_SetSizeZ", "nav__cube_8h.html#a5904cffa3e764f58bc55f6b024e616ef", null ],
    [ "nav_cube_run", "nav__cube_8h.html#a23cc3e8c63a992b5f8ab9ea8c1d026c5", null ],
    [ "nav_cu
(function () {
  'use strict';
  angular
    .module('step.nav')
    .directive('stepNav', stepNav);
  StepNav.$inject = ['$scope', 'step'];
  function stepNav() {
    var d;
    d = {
      restrict: 'E',
      scope: {
        active: '@',
        layout: '@'
      },
      controller: StepNav,
      transclude: true,
      replace: true,
      template:
        '<nav>' +
          '<div ng-if="stepNav.isActive()" class="{{stepNav.clazz()}}" ng-transclude></div>' +
        '</nav>'
    };
    return d;
  }
  function StepNav($scope, step) {
    var ctrl = this;
    ctrl.isActive = isActive;
    ctrl.isInline = isInline;
    $scope.stepNav = {
      isActive: isActive,
      clazz: clazz
    };
    function isActive() {
      var active;
      active = $scope.active;
      if (active !== false) {
        active = step.sequence() ? true : false;
      }
      return active;
    }
    function isInline() {
      return $scope.layout === 'inline';
    }
    function clazz() {
      retur
define([
    'Lodash',
    'services/header/service',
    'services/main/service',
    'services/home/service',
    'services/home/product-filters/service',
    'services/home/product-changes-schedule/service',
    'services/product-info/service',
    'services/shared/modal/service',
    'services/shared/spin/service',
    'services/shop/service'
], function(_, HeaderService, MainService, HomeService, ProductFiltersService, ProductChangesScheduleService, ProductInfoService,
            ModalService, SpinService, ShopService) {
  "use strict";
  var services = {
      "HeaderService": HeaderService,
      "MainService": MainService,
      "HomeService": HomeService,
      "ProductFiltersService": ProductFiltersService,
      "ProductChangesScheduleService": ProductChangesScheduleService,
      "ProductInfoService": ProductInfoService,
      "ModalService": ModalService,
      "SpinService": SpinService,
      "ShopService": ShopService
  };
  var initialize = function (angModule) {
    
/**
 * @class
 * @constructor
 */
Subclass.Service.ServiceContainer = function()
    function ServiceContainer(moduleInstance)
    {
        if (!moduleInstance || !(moduleInstance instanceof Subclass.ModuleInstance)) {
            Subclass.Error.create('InvalidArgument')
                .argument('the module instance', false)
                .expected('an instance of class "Subclass.ModuleInstance"')
                .received(moduleInstance)
                .apply()
            ;
        }
        /**
         * The module instance object
         *
         * @type {Subclass.ModuleInstance}
         * @private
         */
        this._moduleInstance = moduleInstance;
        /**
         * The module API instance
         *
         * @type {Subclass.ModuleAPI}
         * @private
         */
        this._module = moduleInstance.getModule();
        /**
         * Instance of service factory
         *
         * @type {Subclass.Service.ServiceFactory}
         * @private
         

        this._serviceFactory = Subclass.Tools.createClassInstance(Subclass.Service.ServiceFactory, this);
        /**
         * Collection of service class instances
         *
         * @type {Object.<Object>}
         * @private
         */
        this._services = {};
        /**
         * List of registered events
         *
         * @type {Array}
         * @private
         */
        this._events = [];
        /**
         * Indicates whether service manager was initialized
         *
         * @type {boolean}
         * @private
         */
        this._initialized = false;
        this.registerEvent('onInitialize');
        this.initialize();
    }
    ServiceContainer.$parent = Subclass.Extendable;
    ServiceContainer.$mixins = [Subclass.Event.EventableMixin];
    ServiceContainer.prototype = {
        /**
         * Initializes service container
         */
        initialize: function()
        {
            if (this.isInitialized()) {
                Subclass.Erro

            }
            Subclass.Tools.extend(this._services, {
                module: this._module,
                service_container: this,
                parameter_container: this._moduleInstance.getParameterContainer()
            });
            this.initializeExtensions();
            this.getEvent('onInitialize').trigger();
            this._initialized = true;
        },
        /**
         * Reports whether service container was initialized
         *
         * @returns {boolean}
         */
        isInitialized: function()
        {
            return this._initialized;
        },
        /**
         * Returns module definition instance
         *
         * @returns {Subclass.Module}
         */
        getModule: function()
        {
            return this._module;
        },
        /**
         * Returns module instance
         *
         * @returns {Subclass.ModuleInstance}
         */
        getModuleInstance: function()
        {
            return this._mo

        },
        /**
         * Returns instance of service manager
         *
         * @returns {Subclass.Service.ServiceManager}
         */
        getServiceManager: function()
        {
            return this.getModule().getServiceManager();
        },
        /**
         * Stores service instance
         *
         * @param {string} serviceName
         * @param {Object} serviceInstance
         */
        setServiceInstance: function(serviceName, serviceInstance)
        {
            if (this.isServiceCreated(serviceName)) {
                Subclass.Error.create(
                    'Trying to replace already created ' +
                    'instance of service "' + serviceName + '"'
                );
            }
            this._services[serviceName] = serviceInstance;
        },
        /**
         * Returns service instance
         *
         * @param {string} serviceName
         * @returns {null|Object}
         */
        getServiceInstance: function(service

        {
            if (!this.isServiceCreated(serviceName)) {
                return null;
            }
            return this._services[serviceName];
        },
        /**
         * Checks whether service instance was created
         *
         * @param {string} serviceName
         * @returns {boolean}
         */
        isServiceCreated: function(serviceName)
        {
            return this._services.hasOwnProperty(serviceName);
        },
        /**
         * The same as the {@link Subclass.Service.ServiceManager#getServices}
         *
         * @returns {Object.<Subclass.Service.Service>}
         */
        getServices: function()
        {
            return this.getServiceManager().getServices();
        },
        /**
         * Creates (if needed) and returns service instance object
         *
         * @param {string} serviceName
         * @returns {Object}
         */
        get: function(serviceName)
        {
            if (this.isServiceCreated(servic

                return this.getServiceInstance(serviceName);
            }
            var service = this.getServiceManager().get(serviceName);
            var serviceInst = this._serviceFactory.createService(service);
            if (service.isSingleton()) {
                this.setServiceInstance(serviceName, serviceInst);
            }
            var parserManager = this.getModuleInstance().getParser();
            var calls = service.normalizeCalls(service.getCalls(), parserManager);
            for (var methodName in calls) {
                if (!calls.hasOwnProperty(methodName)) {
                    continue;
                }
                serviceInst[methodName].apply(
                    serviceInst,
                    calls[methodName]
                );
            }
            if (serviceInst.isImplements('Subclass/Service/TaggableInterface')) {
                var taggedServiceInstances = this.findByTag(service.getName());
                serviceInst.processTaggedSe
(function () {
    'use strict';
    define('DSVMobile.services',
        [
            'js/services_/LocalStorageService',
            'js/services_/LocalDBService',
            'js/services_/TranslatorService',
            'js/services_/UtilsService',
            'js/services_/LoginService',
            'js/services_/AppSettingsService',
            'js/services_/StopsService',
            'js/services_/StopDeviationsService',
            'js/services_/PhotoService',
            'js/services_/StopsInboxService',
            'js/services_/ReceiversService',
        ],
        function (LocalStorageService, 
        			LocalDBService, 
        			TranslatorService,
        			UtilsService,
        			LoginService,
        			AppSettingsService,
        			StopsService,
                    StopDeviationsService,
                    PhotoService,
                    StopsInboxService,
                    ReceiversService) {
            return angular.module('DSVMobile.services', [])
    
class CardComponent extends Component {
  componentDidMount() {
  }
  prettyText(show) {
    let summary = show.summary ? show.summary : show.show.summary
    summary = summary.replace(/(<([^>]+)>)/ig, '')
    if (summary.length > 200) {
      summary = summary.substring(0, 200) + '...'
    }
    return summary
  }
  render() {
    const show = this.props.show
    const genres = []
    if (show.show.genres && show.show.genres.length > 0) {
      for (let i = 0; i < show.show.genres.length; i++) {
        genres.push(<span>{show.show.genres[i]}</span>)
        if (i < show.show.genres.length - 1) {
          genres.push(<span> | </span>)
        }
      }
    }
    const imageCount = this.props.imageCount
    let imageStyles = 'fit-image'
    imageStyles = imageCount === 1 ? imageStyles += ' front-image' : imageCount === 2 ? imageStyles += ' two-image' : imageStyles += ' three-image'
    return (
      <div className="gutter-content">
        <img className={imageStyles} src={show.image
class Header extends React.Component {
  constructor(props) {
    super(props);
    this.toggle = this.toggle.bind(this);
    this.state = {
      isOpen: false
    };
  }
  toggle() {
    this.setState({
      isOpen: !this.state.isOpen
    });
  }
  render() {
    return (
      <div>
        <Navbar className="nav-bar" light toggleable>
          <NavbarToggler className="toggler-color" right onClick={this.toggle} />
          <NavbarBrand className="nav-brand" href="/"> Daniel Blanco </NavbarBrand>
          <Collapse isOpen={this.state.isOpen} navbar>
            <Nav className="ml-auto" navbar>
              <NavItem>
                <NavLink className="link-nav" href="./#/home"> Home </NavLink>
              </NavItem>
              <NavItem>
                <NavLink className="link-nav" href="./#/web-development"> Web Development </NavLink>
              </NavItem>
              <NavItem>
                <NavLink className="link-nav" href="./#/graphic-design"> Graphic Design </
require('colors');
var util = require('util');
var moment = require('moment');
var logentries = require('node-logentries');
var config = require('../../config');
var stub = require('./stub');
var log = logentries.logger({
	token: config.logentries.token,
	printerror: false
});
log.level('debug');
var logger = {
	success: function (message) {
		message = typeof message === 'string' ? message : JSON.stringify(message);
		console.log(this.timestamptMessage(util.format('SUCCESS: %s', message)).green);
		log.log('info', message);
	},
	warning: function (message) {
		message = typeof message === 'string' ? message : JSON.stringify(message);
		console.log(this.timestamptMessage(util.format('WARNING: %s', message)).yellow);
		log.log('warning', message);
	},
	error: function (message) {
		message = typeof message === 'string' ? message : JSON.stringify(message);
		console.log(this.timestamptMessage(util.format('ERROR: %s', message)).red);
		log.log('err', message);
	},
	fatal: function (messag

		message = typeof message === 'string' ? message : JSON.stringify(message);
		console.log(this.timestamptMessage(util.format('ERROR: %s', message)).red);
		log.log('emerg', message);
	},
	info: function (message) {
		message = typeof message === 'string' ? message : JSON.stringify(message);
		console.log(this.timestamptMessage(message));
		log.log('info', message);
	},
	connector: function (name) {
		var me = this;
		return {
			info: function (message) {
				me.info('connector ' + name + ': ' + message);
			},
			warning: function (message) {
				me.warning('connector ' + name + ': ' + message);
			},
			error: function (message) {
				me.error('connector ' + name + ': ' + message);
			},
			success: function (message) {
				me.success('connector ' + name + ': ' + message);
			}
		};
	},
	timestamptMessage: function (message) {
		return util.format('[%s] %s', moment(), message);
	},
	stream: function () {
		var me = this;
		return {
			write: function (message) {
				me.info(message
var common__nav_8h =
    [ "point", "structpoint.html", "structpoint" ],
    [ "Height", "common__nav_8h.html#af637c15f691fc23f50337eb194758ec7", null ],
    [ "NavSetAltitudeReferenceHere", "common__nav_8h.html#a82da50e89ef6cb752d1554e61531333d", null ],
    [ "NavSetGroundReferenceHere", "common__nav_8h.html#ac51da095b4a1038ac7be8d3be9b9573e", null ],
    [ "NavSetWaypointHere", "common__nav_8h.html#af6eb4097676a1a2eaea357f56751e669", null ],
    [ "WaypointAlt", "common__nav_8h.html#a2de6e5b93a3552facfa675f1bccd8db2", null ],
    [ "WaypointX", "common__nav_8h.html#a2d51bcd8e90e2dea91009f895a452a22", null ],
    [ "WaypointY", "common__nav_8h.html#a983349c9ccc3f390fafe929d3c9fdd16", null ],
    [ "common_nav_periodic_task_4Hz", "common__nav_8h.html#aeee253823276823c6ea935330d106280", null ],
    [ "compute_dist2_to_home", "common__nav_8h.html#a4603515f41786b54ea9383a65a9f249e", null ],
    [ "nav_move_waypoint", "common__nav_8h.html#a442b6321ba6cb77bcae6a05b14bb132b", null ],
    [ 

    [ "nav_reset_reference", "common__nav_8h.html#a9be99612e24c6ba96a13c2c1d657ee99", null ],
    [ "nav_reset_utm_zone", "common__nav_8h.html#a3ef010d83e7da90d33327f0e69b9a169", null ],
    [ "nav_update_waypoints_alt", "common__nav_8h.html#a34dae3b6ee415907433b0d92cfa46eac", null ],
    [ "dist2_to_home", "common__nav_8h.html#aaa0755e7078e30953f14178d3dcd90ee", null ],
    [ "dist2_to_wp", "common__nav_8h.html#a1ea7c4cd1046a57c3444b89a1dce6250", null ],
    [ "ground_alt", "common__nav_8h.html#a7a9fcbdc46c61d7a15eafcb443211104", null ],
    [ "max_dist_from_home", "common__nav_8h.html#a1e29c2884fac341d819ffcc6699bd214", null ],
    [ "nav_utm_east0", "common__nav_8h.html#a3de43e2f62e53fe06e76fe5c22c017b5", null ],
    [ "nav_utm_north0", "common__nav_8h.html#ace28d2afa409c13ff38275eac017698c", null ],
    [ "nav_utm_zone0", "common__nav_8h.html#a66bdefcf7a79ffd01863bc4057e2bf5a", null ],
    [ "nb_waypoint", "common__nav_8h.html#abee3b60dcf3a8c1cad3036c63f8c3689", null ],
    [ "too
var annotated =
    [ "Account", "class_account.html", "class_account" ],
    [ "AccountPlan", "class_account_plan.html", "class_account_plan" ],
    [ "ApiGeneratePagesData", "class_api_generate_pages_data.html", "class_api_generate_pages_data" ],
    [ "ApiGeneratePagesRequest", "class_api_generate_pages_request.html", "class_api_generate_pages_request" ],
    [ "ApiGeneratePagesResponse", "class_api_generate_pages_response.html", "class_api_generate_pages_response" ],
    [ "ApiGeneratePagesStatusResponse", "class_api_generate_pages_status_response.html", "class_api_generate_pages_status_response" ],
    [ "ApiItemsForTemplateLoadDataResponse", "class_api_items_for_template_load_data_response.html", "class_api_items_for_template_load_data_response" ],
    [ "ApiLocationSet", "class_api_location_set.html", "class_api_location_set" ],
    [ "ApiLocationSetItem", "class_api_location_set_item.html", "class_api_location_set_item" ],
    [ "ApiLPActionInfo", "class_api_l_p_action_info.htm

    [ "ApiLPActionTransaction", "class_api_l_p_action_transaction.html", "class_api_l_p_action_transaction" ],
    [ "ApiLPEmployee", "class_api_l_p_employee.html", "class_api_l_p_employee" ],
    [ "ApiLPMember", "class_api_l_p_member.html", "class_api_l_p_member" ],
    [ "ApiLPRedemptionTransaction", "class_api_l_p_redemption_transaction.html", "class_api_l_p_redemption_transaction" ],
    [ "ApiLPRewardInfo", "class_api_l_p_reward_info.html", "class_api_l_p_reward_info" ],
    [ "ApiLPTransaction", "class_api_l_p_transaction.html", "class_api_l_p_transaction" ],
    [ "ApiPageTemplate", "class_api_page_template.html", "class_api_page_template" ],
    [ "apiResponse", "classapi_response.html", "classapi_response" ],
    [ "apiStdClass", "classapi_std_class.html", "classapi_std_class" ],
    [ "ApiTemplateContainer", "class_api_template_container.html", "class_api_template_container" ],
    [ "ApiTemplateField", "class_api_template_field.html", "class_api_template_field" ],
    [ "A

    [ "ApiTemplateLoadData", "class_api_template_load_data.html", "class_api_template_load_data" ],
    [ "ApiTemplateLoadDataItem", "class_api_template_load_data_item.html", "class_api_template_load_data_item" ],
    [ "ApiTemplateLoadDataResponse", "class_api_template_load_data_response.html", "class_api_template_load_data_response" ],
    [ "ApiV2", "class_api_v2.html", "class_api_v2" ],
    [ "BasicAccountPlanInfo", "class_basic_account_plan_info.html", "class_basic_account_plan_info" ],
    [ "ErrorMessage", "class_error_message.html", "class_error_message" ],
    [ "PageListOfAccount", "class_page_list_of_account.html", "class_page_list_of_account" ],
    [ "PageListOfApiLPEmployee", "class_page_list_of_api_l_p_employee.html", "class_page_list_of_api_l_p_employee" ],
    [ "PageListOfApiLPMember", "class_page_list_of_api_l_p_member.html", "class_page_list_of_api_l_p_member" ],
    [ "PremiumAccountInfo", "class_premium_account_info.html", "class_premium_account_info" ],
    [ "P
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    function Show(show) {
        this.show = show;
    };
    function showStringImpl(s) {  return JSON.stringify(s);};
    var showString = function (_) {
        return new Show(showStringImpl);
    };
    var show = function (dict) {
        return dict.show;
    };
    return {
        Show: Show, 
        show: show, 
        showString: showString
    };
})();
var PS = PS || {};
PS.Debug_Trace = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function trace(s) {  return function() {    console.log(s);    return {};  };};
    var print = function (__dict_Show_55) {
        return function (o) {
            return trace(Prelude.show(__dict_Show_55)(o));
        };
    };
    return {
        print: print, 
        trace: trace
    };
})();
var PS = PS || {};
PS.Game = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Debug_Trace = PS.Debug_Trace;
    var main = Debug_Trace.prin
var x = 200;
(function(){
  angular
    .module('everycent.common')
    .factory('MessageService', MessageService);
  MessageService.$inject = ['toastr'];
  function MessageService(toastr){
    var data = {};
    var service = {
      getMessageData: getMessageData,
      setMessage: setMessage,
      setErrorMessage: setErrorMessage,
      setWarningMessage: setWarningMessage,
      clearMessage: clearMessage
    };
    return service;
    function getMessageData(){
      return data;
    }
    function setMessage(message){
      clearMessage();
      data.message = message;
      toastr.success(message);
    }
    function setErrorMessage(message){
      clearMessage();
      data.errorMessage = message;
      toastr.error(message);
    }
    function setWarningMessage(message){
      clearMessage();
      data.warningMessage = message;
      toastr.warning(message);
    }
    function clearMessage(){
      data.message = '';
      data.errorMessage = '';
      data.warningMessage = 
'use strict';
var httpUtil = require('./core/http/http.util');
var authCoreService = require('./core/middleware/auth.service');
var userService = require('./core/services/user.service');
var authService = require('./core/services/auth.service');
var paymentService = require('./core/services/payment.service');
var loanService = require('./core/services/loan.service');
var loanApplicationService = require('./core/services/loanApplication.service');
var commerceService = require('./core/services/commerce.service');
var paymentPlanService = require('./core/services/paymentPlan.service');
var duesService = require('./core/services/dues.service');
exports.httpUtil = httpUtil;
exports.authCoreService = authCoreService;
exports.userService = userService;
exports.authService = authService;
exports.paymentService = paymentService;
exports.loanService = loanService;
exports.loanApplicationService = loanApplicationService;
exports.commerceService = commerceService;
exports.paymentPlanService = pay
describe('StoreController', function() {
  var $controller;
  beforeEach(module('gemStore'));
  beforeEach(inject(function(_$controller_) {
    $controller = _$controller_;
  }));
  
  describe('controller properties', function() {
    it('has a array of products. And its size is 3', function() {
      var controller = $controller('StoreController', {});
      return expect(controller.products.length).toEqual(3);
    });
  });
});
describe('TabController', function() {
  var $controller;
  beforeEach(module('gemStore'));
  beforeEach(inject(function(_$controller_) {
    $controller = _$controller_;
  }));
  
  describe('controller properties', function() {
    it('has a tab.', function() {
      var controller = $controller('TabController', {});
      return expect(controller.tab).toEqual(1);
    });
  });
  describe('setTab and isSet functions', function() {
    it('should handle tab', function() {
      var controller = $controller('TabController', {});
      controller.setTab(2);
  
/**
 * @file index.js
 * @author sekiyika (px.pengxing@gmail.com)
 * @description
 *
 */
module.exports = function (app) {
    var StaticController = require('./staticController')(app);
    var DynamicController = require('./dynamicController')(app);
    var defaultController = require('./defaultController')(app);
    var RedirectController = defaultController.RedirectController;
    var NotFoundController = defaultController.NotFoundController;
    var InternalErrorController = defaultController.InternalErrorController;
    var EmptyController = defaultController.EmptyController;
    app.on('controller:request', handle);
    app.on('controller:404', handle404);
    app.on('controller:500', handle500);
    app.on('controller:redirect', handleRedirect);
    app.on('controller:static', handleStatic);
    app.on('controller:dynamic', handleDynamic);
    app.on('controller:empty', handleEmpty);
    /**
     * å¤çææè¯·æ±çå¥å£
     *
     * @param {http.ClientRequest} req request
     * @param {ht

     * @param {Function} next next of connect
     */
    function handle(req, res, next) {
        var route = req.route;
        app.logger.dProfile('Controller:total - ' + req.pvid);
        if (!route) {
            app.emit('controller:404', req, res, next);
        } else {
            var options = route.options;
            if (options.type === 'static') {
                app.emit('controller:static', req, res, next);
            } else if (options.redirect) {
                app.emit('controller:redirect', req, res, next);
            } else if (options.controller) {
                app.emit('controller:dynamic', req, res, next);
            } else if (options.middlewares && options.middlewares.length > 0) {
                app.emit('controller:empty', req, res, next);
            } else {
                app.emit('controller:404', req, res, next);
            }
        }
    }
    function handle404(req, res, next) {
        var controller = new NotFoundController(req, res, 
/**
 * Created with IntelliJ IDEA.
 * User: Maxime
 * Date: 22/03/13
 * Time: 10:54
 * To change this template use File | Settings | File Templates.
 */
define(['jquery', 'controllers/app', 'controllers/userController', 'controllers/gameController', 'controllers/farmerController', 'controllers/farmingController', 'controllers/tchatController', 'controllers/boardController', 'controllers/fightController'], function(jQuery, App, UserController, GameController, FarmerController, FarmingController, TchatController, BoardController, FightController) {
    jQuery(function($) {
        app = undefined;
        var userController, gameController, farmerController, farmingController, tchatController, boardController, fightController;
        var initApp = function() {
                app = new App();
                socket = app.init();
                socket.sessions.ennemies = new Array();
                userController = new UserController(app);
                gameController = new GameContr

                farmerController = new FarmerController();
                farmingController = new FarmingController();
                tchatController = new TchatController();
                boardController = new BoardController();
                fightController = new FightController();
                app.center();
                app.loadRessources();
                var first = true;
                $(document).on('loadRessourcesOver', function() {
                    if(first)
                    {
                        first = false;
                        userController.initEvents();
                        initGame();
                    }
                });
        };
        var initGame = function() {
            gameController.initEvents();
            farmerController.initEvents();
            farmingController.initEvents();
            tchatController.initEvents();
            boardController.initEvents();
            fightController.initEvents();
        };
      
var message_8h =
    [ "PN_DEFAULT_PRIORITY", "message_8h.html#ga732b155202644a5c5be75a651a3c4fac", null ],
    [ "pn_message_t", "message_8h.html#gad9259fa9271e8844c8e05a7e8978e3b2", null ],
    [ "pn_format_t", "message_8h.html#gac9e19f8c1ae0fe614cb69d9c54758661", [
      [ "PN_DATA", "message_8h.html#ggac9e19f8c1ae0fe614cb69d9c54758661aa983003846efcbca9f2a1b154f59ca41", null ],
      [ "PN_TEXT", "message_8h.html#ggac9e19f8c1ae0fe614cb69d9c54758661a9a681b2a0a7edf057d27ba0e5d2417c6", null ],
      [ "PN_AMQP", "message_8h.html#ggac9e19f8c1ae0fe614cb69d9c54758661aed7d939aba698a423b5b5f5414cf6dbb", null ],
      [ "PN_JSON", "message_8h.html#ggac9e19f8c1ae0fe614cb69d9c54758661acaf1e8c8d8d87978454d36ceaef687ed", null ]
    ] ],
    [ "pn_message", "message_8h.html#ga29b1ebb0e3d0f4663e679eb92b5dfdb9", null ],
    [ "pn_message_annotations", "message_8h.html#gac41af78e905b660a8df54baad6499a2d", null ],
    [ "pn_message_body", "message_8h.html#gad9c06e0d3ef5f2663fc5d8e2dd465ca3", null ],


    [ "pn_message_correlation_id", "message_8h.html#gaa030d35726172445701c3abd365717b3", null ],
    [ "pn_message_data", "message_8h.html#ga52f6698684a9aaf377388060a95cef20", null ],
    [ "pn_message_decode", "message_8h.html#ga8e14c80d737f01e2a54b8198c48910d4", null ],
    [ "pn_message_encode", "message_8h.html#ga9b9e3322a64a594001f1d97f7cf2affa", null ],
    [ "pn_message_errno", "message_8h.html#ga98c45926c58fabb1465c59d9aa4056ff", null ],
    [ "pn_message_error", "message_8h.html#ga87bacde8d1733671663832dbb9fd097c", null ],
    [ "pn_message_free", "message_8h.html#ga02854827986ba1b0e36d0005674661c4", null ],
    [ "pn_message_get_address", "message_8h.html#ga8cb345cb31c3a3349688799b6b4f2006", null ],
    [ "pn_message_get_content_encoding", "message_8h.html#ga9ec4d67e6527397023d119ae81f57c03", null ],
    [ "pn_message_get_content_type", "message_8h.html#ga8b7dbd80b354c3e1210bd7d223c08d64", null ],
    [ "pn_message_get_correlation_id", "message_8h.html#ga85500c85e451bb223084

    [ "pn_message_get_creation_time", "message_8h.html#gaaac9bf53b47cbfba119f47ecd08c6bc6", null ],
    [ "pn_message_get_delivery_count", "message_8h.html#gae6061ca4cd91f35db285ad4e736b4880", null ],
    [ "pn_message_get_expiry_time", "message_8h.html#gab79cc8c5eb7352d82e8f5bbfbe06234c", null ],
    [ "pn_message_get_format", "message_8h.html#ga6aba2961550148af88953bef1358d558", null ],
    [ "pn_message_get_group_id", "message_8h.html#gaac9c32067e50f3279fe17b17a3b0cc7f", null ],
    [ "pn_message_get_group_sequence", "message_8h.html#ga7820752b1c9d5f88e74d291e48fc1638", null ],
    [ "pn_message_get_id", "message_8h.html#ga6dc34192b0b265792e80b909733fc446", null ],
    [ "pn_message_get_priority", "message_8h.html#gaf0df7d607fb85c78ada340df52db745c", null ],
    [ "pn_message_get_reply_to", "message_8h.html#gafe7577a90ec17ff77af79e1b544557d7", null ],
    [ "pn_message_get_reply_to_group_id", "message_8h.html#ga165beee02cfa76912ec7eb89e3869135", null ],
    [ "pn_message_get_subjec

    [ "pn_message_get_ttl", "message_8h.html#ga9bc059be1b3f8b48e3e02d03bd0e31cf", null ],
    [ "pn_message_get_user_id", "message_8h.html#gab420ee7f0d06a3771e27b3bc0d97ded2", null ],
    [ "pn_message_id", "message_8h.html#gad63613b52062ab477ac9c32f7131cda4", null ],
    [ "pn_message_instructions", "message_8h.html#gae22d080b9928ac446349117783e5e1e7", null ],
    [ "pn_message_is_durable", "message_8h.html#ga0639e7686a2fdaabec64e26675fa805a", null ],
    [ "pn_message_is_first_acquirer", "message_8h.html#ga147807825163b84d9fdd7556fad42608", null ],
    [ "pn_message_is_inferred", "message_8h.html#ga19e41e8cfac95c2cd0f77a92c4ec85eb", null ],
    [ "pn_message_load", "message_8h.html#gaaa526d6ec1cde05df7e23d3ba516edbd", null ],
    [ "pn_message_load_amqp", "message_8h.html#ga704f0f8774d297854b8901e36ae704a0", null ],
    [ "pn_message_load_data", "message_8h.html#gaeb4329a67ed4f857f6c0bab4c31f0f10", null ],
    [ "pn_message_load_json", "message_8h.html#ga1e07103c4f6f17dc7f6daba411a5

    [ "pn_message_load_text", "message_8h.html#ga936104959a6c268aab93f507e83236c2", null ],
    [ "pn_message_properties", "message_8h.html#ga197f2c80f13dbfc5ee5527d387a0beab", null ],
    [ "pn_message_save", "message_8h.html#gaf9a8e26c94501562806b91b985dca02f", null ],
    [ "pn_message_save_amqp", "message_8h.html#ga7a7d5f7c16bf75f8d4eda60df9ec0821", null ],
    [ "pn_message_save_data", "message_8h.html#ga68267321d36422c4e583493c7069ef5c", null ],
    [ "pn_message_save_json", "message_8h.html#ga3b4aea1fc262bf1c919de24f5ce116ab", null ],
    [ "pn_message_save_text", "message_8h.html#ga9bcfe640de138e846a3c7c36ec9b82ed", null ],
    [ "pn_message_set_address", "message_8h.html#gadae5d992568a088c561e5ddcdde13705", null ],
    [ "pn_message_set_content_encoding", "message_8h.html#ga39f2990e3a541fd9371d7dfb3ca82953", null ],
    [ "pn_message_set_content_type", "message_8h.html#ga8881958619bd06d75c0c6cfffc59ee07", null ],
    [ "pn_message_set_correlation_id", "message_8h.html#gad8cc8

    [ "pn_message_set_creation_time", "message_8h.html#ga7f328d0874a181f508b0af9eece5e95d", null ],
    [ "pn_message_set_delivery_count", "message_8h.html#ga9e29a74bbaf88a38d488df17940f637a", null ],
    [ "pn_message_set_durable", "message_8h.html#ga29d5812830f4379461472761cd5e056b", null ],
    [ "pn_message_set_expiry_time", "message_8h.html#gad5044e606189589abafd65890d8824d8", null ],
    [ "pn_message_set_first_acquirer", "message_8h.html#ga00b7a4b62de07b070191398e1f1cff02", null ],
    [ "pn_message_set_format", "message_8h.html#gae413b93fd4f1282e304fed7d6e25f6c5", null ],
    [ "pn_message_set_group_id", "message_8h.html#ga0ba2c671c5db93e8c7321ef6e66c962e", null ],
    [ "pn_message_set_group_sequence", "message_8h.html#ga31d881ca2663b0903f9a866da1e911ef", null ],
    [ "pn_message_set_id", "message_8h.html#gaaaa2eb9b3638f556a8e89643e7d5751d", null ],
    [ "pn_message_set_inferred", "message_8h.html#gaa0a2a7abe7f484b5f4d5d7168d082c8e", null ],
    [ "pn_message_set_priority",
var searchData=
  ['fatal',['fatal',['../class_log_service.html#a8a867975c4500ad512ccd7f04b92caa4',1,'LogService']]],
  ['fetchlogbydaterange',['fetchLogByDateRange',['../class_log_service.html#aee1936ded7bc9cd5d706c5a2499ce160',1,'LogService']]],
  ['fetchlogcountbydaterange',['fetchLogCountByDateRange',['../class_log_service.html#ae906b97075e3c2985a4b7f7b4dfd82a7',1,'LogService']]],
  ['fetchlogsbydebug',['fetchLogsByDebug',['../class_log_service.html#aa7fdec94b682d0f289d6ae1cd9f88aaa',1,'LogService']]],
  ['fetchlogsbyerror',['fetchLogsByError',['../class_log_service.html#a88d6867d0a41ab835cda0c04e1e806cd',1,'LogService']]],
  ['fetchlogsbyfatal',['fetchLogsByFatal',['../class_log_service.html#a00030398115a30521018938aa7afd21f',1,'LogService']]],
  ['fetchlogsbyinfo',['fetchLogsByInfo',['../class_log_service.html#a9446944057391c823bed1ad4ff0d8b0b',1,'LogService']]],
  ['fetchlogsbymodule',['fetchLogsByModule',['../class_log_service.html#ae4e851c9b665781617e9b4597332326f',1,'LogServi

  ['fetchlogsbymoduleandtext',['fetchLogsByModuleAndText',['../class_log_service.html#a309cfa39bc7445fe25fb7f4e60ad6077',1,'LogService']]],
  ['fetchlogscountbydebug',['fetchLogsCountByDebug',['../class_log_service.html#aae89189768ddafa0df1bf893f61edc58',1,'LogService']]],
  ['fetchlogscountbyerror',['fetchLogsCountByError',['../class_log_service.html#ab494ec366d538e38aee71d21b0f14b07',1,'LogService']]],
  ['fetchlogscountbyfatal',['fetchLogsCountByFatal',['../class_log_service.html#a7723cac0b2650263263c7b72dcb8ed79',1,'LogService']]],
  ['fetchlogscountbyinfo',['fetchLogsCountByInfo',['../class_log_service.html#a542e4229f95868e64f376f0c8d372422',1,'LogService']]],
  ['fetchlogscountbymodule',['fetchLogsCountByModule',['../class_log_service.html#afb7253dbc6c9a0271ab37a71b8191a82',1,'LogService']]],
  ['fetchlogscountbymoduleandtext',['fetchLogsCountByModuleAndText',['../class_log_service.html#afd6fd6250848f0be693ab075bddfecdb',1,'LogService']]],
  ['fillparamswithprofiledata',['fillPa
!function ($) {
	"use strict";
	var s;
	var app = {
		settings: {
		},
		init: function(){
			s = this.settings;
			this.bindUIActions();
		},
		navToggle: function(){
			if( s.site.hasClass('opened-nav') ){
				s.site.animate({'left': '0px'},150).removeClass('opened-nav');
				s.nav_state = 'closed';
			} else {
				s.site.animate({'left': '-200px'},150).addClass('opened-nav');
				s.nav_state = 'open';
			}
		},
		touchStart: function(event){
			var touch = event.touches[0];
				s.touch_down = touch.pageX;
				s.nav_watch = true;
		},
		touchMove: function(event){
			if( s.nav_watch === true )
				app.navMove(event);
		},
		touchEnd: function(event){
			if( s.nav_watch === true )
				app.navSnap();
		},
		navMove: function(event){
			var touch = event.touches[0];
			if( s.nav_move > (s.touch_down+s.nav_threshold) || s.nav_move < (s.touch_down-s.nav_threshold) ){
				if( s.nav_state === 'closed' ){
					s.nav_move = touch.clientX - s.touch_down;
					if( s.nav_move < 0 && s.nav_move >
var dir_b7aba36658f90f0828762eb0d672b7e6 =
    [ "Request", "dir_f482b75fc1983f39254bfcd4cf8de370.html", "dir_f482b75fc1983f39254bfcd4cf8de370" ],
    [ "BaseControllerTest.php", "_base_controller_test_8php.html", [
      [ "BaseControllerTest", "class_o_r_m_1_1_controller_1_1_base_controller_test.html", "class_o_r_m_1_1_controller_1_1_base_controller_test" ]
    ] ],
    [ "ControllerFactoryTest.php", "_controller_factory_test_8php.html", [
      [ "ControllerFactoryTest", "class_o_r_m_1_1_controller_1_1_controller_factory_test.html", "class_o_r_m_1_1_controller_1_1_controller_factory_test" ]
    ] ],
    [ "ControllerRegisterTest.php", "_controller_register_test_8php.html", [
      [ "ControllerRegisterTest", "class_o_r_m_1_1_controller_1_1_controller_register_test.html", "class_o_r_m_1_1_controller_1_1_controller_register_test" ]
    ] ],
    [ "RequestTest.php", "_request_test_8php.html", [
      [ "RequestTest", "class_o_r_m_1_1_controller_1_1_request_test.html", "class_o_r_m_1_1_
var Message = function() {
module.exports = Message;
Message.USER_LOGIN = "10100";
Message.SERVER_GET_PLAYER_INFO = "11102";
Message.CHAT_GET_MESSAGE = "10108";
Message.OPEN_POWERMAP = "33200";
Message.MAIN_CITY = "12200";
Message.BATTLE = "33100";
Message.BATTLE_ARMY = "33101";
Message.BATTLE_GET_POWER_INFO = "33100";
Message.BATTLE_GET_REWARDS = "33102";
Message.ABANDON_RESOURCE = "31105";
Message.ADD_C = "11304";
Message.AREA_ATTACK_CITY = "31107";
Message.AREA_ATTACK_RES = "31104";
Message.AREA_CONQUER_PLAYER = "31112";
Message.AREA_GET_ALL_CITY = "31102";
Message.AREA_GET_ALL_RES = "31103";
Message.AREA_GET_PLAYER_INFO = "31106";
Message.AREA_MODIFY_PLAYER_FLAG = "31114";
Message.AREA_MODIFY_PLAYER_SIGN = "31113";
Message.AREA_WAR = "35101";
Message.AREA_WAR_JOIN = "30203";
Message.AREA_WAR_QUIT = "36104";
Message.ATT_OTHER_AREA_CITY = "31108";
Message.B_BATTLE = "34107";
Message.B_CREATE_TEAM = "34101";
Message.B_DISMISS = "34105";
Message.B_GET_TEAM_INFO = "34100";
Message.B_JOI

Message.B_KICK_MEMBER = "34104";
Message.B_PUSH_BATTLE_DATA = "34108";
Message.B_QUIT_TEAM = "34106";
Message.B_SWAP_MEMBER = "34103";
Message.BUY_ST_SIZE = "39102";
Message.BUY_TOKEN = "11202";
Message.BUY_TOKEN_INFO = "11203";
Message.BUY_TOKEN_LIMIT = "11200";
Message.BUY_TOKEN_LIMIT_INFO = "11201";
Message.CARAVAN = "43101";
Message.CARAVAN_CANCEL = "43104";
Message.CARAVAN_FORCE_PASS = "43100";
Message.CARAVAN_ISAUTOPASS = "43106";
Message.CARAVAN_PASS = "43103";
Message.CARAVAN_REFUSE = "43105";
Message.CARAVAN_SEND = "43102";
Message.CD_CLEAN = "11301";
Message.CD_CLEAN_COST = "11300";
Message.CHAT_SEND = "10103";
Message.CHOOSE_GENERAL = "11101";
Message.CONQUEST_ABANDON = "14104";
Message.CONQUEST_GETSLAVE = "14103";
Message.CONT_JUNGONG = "12303";
Message.CREATE_TEXTILE_TEAM = "45202";
Message.CT_ATTECT = "47103";
Message.CT_CREATE_TEAM = "47001";
Message.CT_DISMISS = "47006";
Message.CT_FINISH = "47109";
Message.CT_GET_TEAM_INFO = "47008";
Message.CT_JOIN_TEAM = "47002";
Me

Message.CT_MOVE = "47102";
Message.CT_PUSH_CAMPAIGN_DATA = "47108";
Message.CT_QUIT_CAMPAIGN = "47106";
Message.CT_QUIT_TEAM = "47005";
Message.CT_READ = "47107";
Message.CT_READY = "47101";
Message.CT_REPOPULATION = "47104";
Message.CT_START_WAR = "47007";
Message.CT_SWAP_MEMBER = "47004";
Message.CT_USE_TOKEN = "47105";
Message.DRAW_GOODS = "15101";
Message.ECONOMIC_MYINFO = "14105";
Message.EQUIP_BIND = "39306";
Message.EQUIP_CANCEL_BIND = "39307";
Message.EQUIP_DEBS = "39103";
Message.EQUIP_GET_GENERAL_EQUIP = "39200";
Message.EQUIP_GET_UPGRADE_INFO = "39301";
Message.EQUIP_STOP_CANCEL = "39308";
Message.EQUIP_TAKE = "39201";
Message.EQUIP_TAKE_OFF = "39202";
Message.EQUIP_TAKE_OFF_ALL = "39203";
Message.EQUIP_UPGRADE = "39302";
Message.FIELD_QIANGSHOU = "31109";
Message.GENERAL_AllOFF_FORMATION = "42107";
Message.GENERAL_BUY_POSITION = "41203";
Message.GENERAL_BUY_TRAIN_POSITION = "41106";
Message.GENERAL_EDIT_TRAIN_MODEL = "41105";
Message.GENERAL_EQUIP_LIST = "39205";
Message.G

Message.GENERAL_FORMATION = "42103";
Message.GENERAL_GET_FORMATION = "42106";
Message.GENERAL_GET_INFO = "41107";
Message.GENERAL_GET_INFO2 = "41202";
Message.GENERAL_GET_LIST2 = "41100";
Message.GENERAL_GET_ONLINE = "41200";
Message.GENERAL_GET_REFRESH = "41300";
Message.GENERAL_GET_REFRESH_INFO = "41302";
Message.GENERAL_GUIDE = "41102";
Message.GENERAL_RECRUIT = "41201";
Message.GENERAL_REFRESH = "41301";
Message.GENERAL_REFRESH_CONFIRM = "41303";
Message.GENERAL_SAVE_DEFAULT_FORMATION = "42104";
Message.GENERAL_SAVE_FORMATION = "42102";
Message.GENERAL_SHIFT = "41304";
Message.GENERAL_TRAIN = "41101";
Message.GET_AVAILABLE_EQUIP_BY_TYPE = "39206";
Message.GET_BATTLE_REPORT = "33104";
Message.GET_INVEST_INFO = "30202";
Message.GET_NO_BATTLE_INFO = "31110";
Message.GET_OFFICE_INFO = "12300";
Message.GET_PLAYER_MERCHANT = "40101";
Message.GET_SEEKFORED_MERCHANTIDS = "43201";
Message.GET_TEAMS_INFO = "36102";
Message.GET_TEAMS_INFO2 = "35102";
Message.GOODS = "15100";
Message.BUY_GOOD

Message.IMPOSE = "12401";
Message.INSPIRE = "36103";
Message.LEGION_APPLY = "32109";
Message.LEGION_APPLY_CANCEL = "32110";
Message.LEGION_CANCEL_DISSOLUTION = "32127";
Message.LEGION_CONTRIBUTE = "32120";
Message.LEGION_CREATE = "32102";
Message.LEGION_DEFAULT_TECH = "32118";
Message.LEGION_DISSOLUTION = "32126";
Message.LEGION_EDIT_BADGE = "32123";
Message.LEGION_EDIT_MSG = "32112";
Message.LEGION_EDIT_SELF_MSG = "32111";
Message.LEGION_EVICT = "32107";
Message.LEGION_GET = "32100";
Message.LEGION_GET_ALL_APPLYS = "32103";
Message.LEGION_GET_ALL_MEMBERS = "32101";
Message.LEGION_GET_ALL_TECHS = "32117";
Message.LEGION_GET_CAN_CONTRI = "32119";
Message.LEGION_GET_DETAIL = "32114";
Message.LEGION_GET_INFO = "32121";
Message.LEGION_GET_MEMBER_INFO = "32115";
Message.LEGION_LEGIONKEYCHANGE = "32130";
Message.LEGION_MODIFYLEGIONNAME = "32125";
Message.LEGION_PASS = "32104";
Message.LEGION_PROMOTION = "32116";
Message.LEGION_QUIT = "32113";
Message.LEGION_REFUSE = "32105";
Message.LEGION_

Message.LEGION_UPDATE_BADGE = "32122";
Message.MAIL_DELETE = "45105";
Message.MAIL_DELETE_ALL = "45106";
Message.MAIL_GET_LIST_BY_TYPE = "45100";
Message.MAIL_READ = "45102";
Message.MAIL_SAVE_MAIL = "45104";
Message.MAIL_WRITE = "45103";
Message.MAIN_CITY_DRAUGHT = "14102";
Message.MAIN_CITY_FOOD_BAND_C = "13101";
Message.MAIN_CITY_PER_DRAUGHT = "14101";
Message.MAIN_CITY_PER_IMPOSE = "12400";
Message.MAIN_CITY_PRE_FOOD_BAND_C = "13100";
Message.MAIN_CITY_UPDATE_LEVEL = "12100";
Message.MARKET_CONFIRM = "40105";
Message.MARKET_TRADE = "40102";
Message.MINER = "37101";
Message.MINER_ATTACK = "37103";
Message.MINER_CREATE_SHADOW = "37108";
Message.MINER_DETECT = "37111";
Message.MINER_GET_DETECT_INFO = "37110";
Message.MINER_GET_SHADOW_INFO = "37109";
Message.MINER_INSPIRE = "38100";
Message.MINER_MINING = "37105";
Message.MINER_MOLEST = "37106";
Message.MINER_MOVE = "37104";
Message.MINER_QUIT = "37112";
Message.MINER_REFRESH = "37102";
Message.MINER_REPOPULATION = "37107";
Message.NO

Message.NOTICE = "10203";
Message.OPEN_BOX = "46310";
Message.OPEN_MERCHANTS = "43200";
Message.OPEN_ONE_TEACHER = "41109";
Message.OPEN_SHENDANG = "18601";
Message.OPEN_TEXTILE = "45200";
Message.OPEN_TEXTILE_TEAM = "45201";
Message.PRE_ADD_C = "11303";
Message.PUSH_PLAYER_INFO = "11103";
Message.PUSH_TEAMBATTLE_DATA = "36107";
Message.PUSH_TEXTILE_TEAM = "45300";
Message.QUERY_PAY = "11305";
Message.QUERY_PLAYER = "31115";
Message.RABBIT_GET_NO_BATTLE = "51003";
Message.RABBIT_NO_BATTLE = "51004";
Message.READ_IRON_BOX = "46311";
Message.READ_LEGION_LIST = "46302";
Message.READ_PRESTIGE_LIST = "46304";
Message.READ_TEACHER_SYS = "41108";
Message.RECEIVE_GIFT = "10403";
Message.RECIVE_1 = "18603";
Message.RECIVE_2 = "18604";
Message.RECIVE_3 = "18605";
Message.RECIVE_4 = "18606";
Message.RES_ABANDON = "30406";
Message.RES_WAR = "36101";
Message.RES_WAR_JOIN = "30400";
Message.RES_WAR_QUIT = "36104";
Message.RIGHT_ARMY = "14100";
Message.SAVE_SALARY = "12302";
Message.SEEKFOR_MERCHANT

Message.SELECT_LE = "12406";
Message.SELL_GOODS = "39101";
Message.SEND_HEARTBEAT = "11104";
Message.SEND_LEGION_MAIL = "32106";
Message.SERVER_ERROR = "99101";
Message.SERVER_STOP = "10104";
Message.SERVER_STOP2 = "10105";
Message.STOREHOUSE = "39100";
Message.TASK = "44202";
Message.TASK_CANCEL = "44102";
Message.TASK_DAILY = "44301";
Message.TASK_DONE = "44103";
Message.TASK_ENTER_LISHI = "51001";
Message.TASK_EVENT = "44401";
Message.TASK_EVENT_SALARY = "44402";
Message.TASK_GET_DETAIL = "44201";
Message.TASK_IMDONE = "44104";
Message.TASK_OPEN_LISHI = "51002";
Message.TASK_RECEIVE = "44101";
Message.TASK_REFLASH_PERDAY = "44302";
Message.TECH_GET = "42201";
Message.TECH_UPGRADE = "42200";
Message.TEXTILE_BUY_NUM = "45212";
Message.TEXTILE_DISS_TEAM = "45207";
Message.TEXTILE_EXIT_TEAM = "45210";
Message.TEXTILE_JOIN_TEAM = "45209";
Message.TEXTILE_KICK_TEAM = "45206";
Message.TEXTILE_SELECTMODE = "45205";
Message.TEXTILE_START = "45208";
Message.TEXTILE_ZUANSHEN = "45211";
Messag
var operaI18N = {
	getMessage : function (key) {
		var value = '';
		if (localeMessage[key]) {
			value = localeMessage[key].message;
		}
		return value;
	}
var localeMessage = {
   "AuthenticationFailure": {
      "message": "å¨æ¨å²å­è©²é é¢ä¹åï¼è«åæä¸ä¸ [å²å­å° wiz] å·¥å·åæéç»é"
   },
   "Completed": {
      "message": "å·²å®æ"
   },
   "DeletedItems": {
      "message": "å·²åªé¤"
   },
   "Inbox": {
      "message": "æ¶éç®±"
   },
   "MyContacts": {
      "message": "æçè¯çµ¡äºº"
   },
   "MyDrafts": {
      "message": "æçèç¨¿"
   },
   "MyEmails": {
      "message": "æçéµä»¶"
   },
   "MyEvents": {
      "message": "æçäºä»¶"
   },
   "MyJournals": {
      "message": "æçæ¥è¨"
   },
   "MyMobiles": {
      "message": "æçææ©"
   },
   "MyNotes": {
      "message": "æçç­è¨"
   },
   "MyPhotos": {
      "message": "æçç§ç"
   },
   "MyStickyNotes": {
      "message": "æçæ¡é¢ç­è¨"
   },
   "MyTasks": {
      "message": "æçä»»å"
   },
   "actionName": {
      "message": "çºç¥ç­è¨ç¶²é å²å­å¨"
   },
   "add_comment": {
      "message": "å å¥è©è«"
   },
   "add

      "message": "è¼¸å¥æ¨ç±¤"
   },
   "article_save": {
      "message": "å²å­æç« "
   },
   "category_loading": {
      "message": "è¼å¥ä¸­ï¼è«ç¨å¾"
   },
   "category_tip": {
      "message": "è³æå¤¾: "
   },
   "clipResult_clipping": {
      "message": "æ­£å¨å²å­"
   },
   "clipResult_error": {
      "message": "å²å­å¤±æ"
   },
   "clipResult_success": {
      "message": "å·²å²å­"
   },
   "clipResult_sync": {
      "message": "æ­£å¨åæ­¥"
   },
   "comment_tip": {
      "message": "è©è«: "
   },
   "contentPreview_clipArticle": {
      "message": "å²å­æç« "
   },
   "contentPreview_expandSelection": {
      "message": "å±éé¸åé ç®"
   },
   "contentPreview_moveSelection": {
      "message": "ç§»åé¸åé ç®"
   },
   "contentPreview_shrinkSelection": {
      "message": "æ¶ç¸®é¸åé ç®"
   },
   "contextMenus_clipPage": {
      "message": "å²å­å°çºç¥ç­è¨"
   },
   "contextMenus_clipSelection": {
      "message": "å²å­é¸æ"
   },
   "contextMenus_clipUrl": {
      "message": "å²å­ URL"
   },
   "create_account_link": {
      "message": "å»ºç«çºç¥ç­è¨å¸³è"
   },
   "desc

      "message": "ä½¿ç¨ãçºç¥ç­è¨ãæ´åç¨å¼ï¼å°ç¶²è·¯ä¸æ¨éè¦çå§å®¹èç¶²é å²å­å°æ¨èªå·±çå¸³æ¶"
   },
   "extName": {
      "message": "çºç¥ç­è¨ç¶²é å²å­å¨"
   },
   "fullpage_save": {
      "message": "å²å­æ´é "
   },
   "install_client_notify": {
      "message": "è©²åè½éè¦å®è£ææ°çç wiz å®¢æ¶ç«¯ï¼æ¯å¦è·³è½å°ä¸è¼é é¢ï¼"
   },
   "keep_password_tip": {
      "message": "è¨ä½å¯ç¢¼"
   },
   "login_msg": {
      "message": "   ç»é   "
   },
   "logining": {
      "message": "æ­£å¨ç»é"
   },
   "logout": {
      "message": "ç»åº"
   },
   "network_wrong": {
      "message": "ç¶²è·¯ä¸å¯ç¨ï¼è«æª¢æ¥å¾éè©¦"
   },
   "note_submit": {
      "message": "   å²å­   "
   },
   "note_title_tip": {
      "message": "æ¨é¡: "
   },
   "pageClipFailure": {
      "message": "ç¡æ³å²å­è©²é é¢"
   },
   "password_error": {
      "message": "å¯ç¢¼é¯èª¤"
   },
   "password_tip": {
      "message": "å¯ç¢¼: "
   },
   "popup_wating": {
      "message": "ç­å¾é é¢..."
   },
   "retry_clip_button": {
      "message": "éè©¦"
   },
   "save_more": {
      "message": "æ´å¤"
   },
   "save_to_native": {
      "message": "å²å­å°æ¬å°"
   },
   "save_to_ser
var postType = { post: "post", quote: "quote", upload: "upload" };
var COUNT_POST_PER_CALL = 20;
var COUNT_SEARCH_BOOKS_PER_CALL = 20;
var LENGUAGE="he";
var dictionaryURL;
var DICTIONARY;
var data = new Data();
var stackviewController = new StackviewController();
var modelController = new ModelController();
var serverController = new ServerController();
var loginController = new LoginController();
var headerController = new HeaderController();
var shelfController = new ShelfController();
var feedsController = new FeedsController();
var postController = new PostController();
var bookController = new BookController();
var groupController = new GroupController();
var homeController = new HomeController();
var settingsController = new SettingsController();
var recomandedBooksController = new RecomandedBooksController();
var publiLlibraryController = new PubliLlibraryController();
var movieHendler = new MovieHendler();
var aboutController = new AboutController();
var systemMessageControlle

var navigationController = new NavigationController();
var notificationsController = new NotificationsController();
switch(LENGUAGE){
	case "en":{
		
		dictionaryURL="../dictionaryEN.txt"	;
		break;
	}
		
		dictionaryURL="../dictionaryHE.txt"	;
		break;
	}
$.ajax({
    type: "GET",
    url: dictionaryURL,
    dataType: 'json'
})
.done(init)
.fail(function (error) {
    console.log(error);
});
function init(dic) {
    
    DICTIONARY = dic;
    console.log(DICTIONARY);    
	showLoader();	
	stackviewController.attachEvent();	
	loginController.attachEvent();	
	headerController.attachEvent();	
	shelfController.attachEvent();	
	feedsController.attachEvent();	
	postController.attachEvent();	
	bookController.attachEvent();	
	groupController.attachEvent();
	groupController.init();	
	homeController.attachEvent();	
	settingsController.attachEvent();	
	recomandedBooksController.attachEvent();	
	publiLlibraryController.attachEvent();	
	aboutController.attachEvent();	
	navigationController.attachE
/* Application controller
===========================================================================================================================
===========================================================================================================================*/
ulbApp.controller("ApplicationController",
    function ApplicationController($scope, $location) {
        $scope.viewFade = function (destination) {
            $location.url("/" + destination);
        };
    }
);
    
/* Home controller
===========================================================================================================================
===========================================================================================================================*/
ulbApp.controller("HomeController",
    function HomeController($scope, $location) {
        
    }
);
/* Question 1 controller
==========================================================================================================

===========================================================================================================================*/
ulbApp.controller("QuestionOneController",
    function QuestionOneController($scope, $location) {
    }
);
/* Question 2 controller
===========================================================================================================================
===========================================================================================================================*/
ulbApp.controller("QuestionTwoController",
    function QuestionTwoController($scope, $location) {
    }
);
/* Question 3 controller
===========================================================================================================================
===========================================================================================================================*/
ulbApp.controller("QuestionThreeController",
    function QuestionThreeController($scope, $location) {
    

);
/* Question 4 controller
===========================================================================================================================
===========================================================================================================================*/
ulbApp.controller("QuestionFourController",
    function QuestionFourController($scope, $location) {
    }
);
/* Question 5 controller
===========================================================================================================================
===========================================================================================================================*/
ulbApp.controller("QuestionFiveController",
    function QuestionFiveController($scope, $location) {
    }
);
/* Question 6 controller
===========================================================================================================================
=============================================================================
/**
 *æ¸¸æçå³äºæ¹ååæ¢çé¨å
 *ç§»å¨åæè½¬å½æ°
 *@author:Waterbear
 */
/**
 *å¨å±åé
 *@Gamemap:æ¸¸æå°å¾
 *@points:æ¹åçåæ 
 * */
var Service = {
    GameMap:null,
    points:null,
    nowType:null,
    nextType:null
};
/****æ¸¸æä¸­çäºç»´æ°ç»ä¿å­çå°å¾****/
/******åå§åå°å¾*******/
var mapInit = function() {
    Service.GameMap = new Array();
    for(var i = 0; i < 12; ++i){
        Service.GameMap[i] = new Array();
        for(var j = 0; j < 18; ++j){
            Service.GameMap[i][j] = false;
        }
    }
};
/****å¤æ­æ¯å¦è¶åºäºå°å¾*****/
var isOverMap = function(x,y) {
    return x < 0 || x > 11 || y < 0 || y > 17 || Service.GameMap[x][y];
};
/****ç§»å¨å½æ°*****/
var move = function(moveX,moveY) {
    for(var i = 0; i < Service.points.length; i++){
        var nowX = Service.points[i].x + moveX;
        var nowY = Service.points[i].y + moveY;
        if(this.isOverMap(nowX, nowY)){
            return false;
        }
    }
    for(var i = 0; i < Service.points.length; i++){
        Service.points[i].x += moveX;
        Service.points[i].y 

    }
    InitcvsGame(Service.GameMap,Service.points,Service.nowType);
    return true;
};
/*****æè½¬å½æ°******/
var Rotate = function() {
    if(Service.nowType === 4){
        return;
    }
    for(var i = 1; i < Service.points.length; i++){
        var nowX = Service.points[0].y + Service.points[0].x - Service.points[i].y;
        var nowY = Service.points[0].y - Service.points[0].x + Service.points[i].x;
        if(isOverMap(nowX, nowY)){
            return;
        }
    }
    for(var i = 1; i < Service.points.length; i++){
        nowX = Service.points[0].y + Service.points[0].x - Service.points[i].y;
        nowY = Service.points[0].y - Service.points[0].x + Service.points[i].x;
        Service.points[i].x = nowX;
        Service.points[i].y = nowY;
    }
    InitcvsGame(Service.GameMap,Service.points,Service.nowType);
};
/****åå§åè¦æ¾ç¤ºæ¹åçå½æ°***/
var InitAct = function() {
    Service.points = new diaPoint(Service.nowType);
/****è¿åæ´ä¸ªserviceå¯¹è±¡****/
var getService = function() {
    retu
const logger = Loggers.create(module.filename);
export function create() {
   const state = {
      services: new Map()
   };
   const those = {
      pubService(service) {
         return {
            status: service.status,
            alertedStatus: service.alertedStatus,
            debug: service.debug
         }
      },
      pubName(name) {
         let service = state.services.get(name);
         if (!service) {
            throw 'Invalid service: ' + name;
         } else {
            logger.debug('pubName', name, service.name);
            return those.pubService(service);
         }
      },
      async pub() {
         let reply = {};
         for (let [key, service] of state.services) {
            reply[key] = those.pubService(service);
         }
         return reply;
      },
      get services() {
         return state.services;
      },
      add(service) {
         if (state.services.has(service.name)) {
            logger.warn('duplicate', service.name, service.
module.exports.routes = {
	'/': {
		controller: 'HomeController',
		action: 'index'
	},
	'get /register': {
		controller: 'UserController',
		action: 'register'
	},
	'post /register': {
		controller: 'UserController',
		action: 'create'
	},
	'get /session/destroy': {
		controller: 'SessionController',
		action: 'destroy',
		skipAssets: true
	},
	'get /search/:query': {
		controller: 'SearchController',
		action: 'get',
		skipAssets: true
	},
	'get /login': {
		controller: 'SessionController',
		action: 'process'
	},
	'post /topic/updateViews': {
		controller: 'TopicController',
		action: 'updateViews',
		skipAssets: true
	},
	'post /post/like': {
		controller: 'PostController',
		action: 'like',
		skipAssets: true
	},
	'post /post/report': {
		controller: 'PostController',
		action: 'report',
		skipAssets: true
	},
	'post /post/save': {
		controller: 'PostController',
		action: 'save',
		skipAssets: true
	},
	'post /topic/morePosts': {
		controller: 'TopicController',
		action: 'morePo

		skipAssets: true
	},
	'/topic/create': {
		controller: 'TopicController',
		action: 'create',
		skipAssets: true
	},
	'post /element': {
		controller: 'ElementController',
		action: 'render'
	},
	'get /profile/likeComment': {
		controller: 'ProfileController',
		action: 'likeComment',
		skipAssets: true
	},
	'post /profile/deleteComment': {
		controller: 'ProfileController',
		action: 'deleteComment',
		skipAssets: true
	},
	'get /user/subscribe': {
		controller: 'UserController',
		action: 'subscribe',
		skipAssets: true
	},
	'get /user/follow': {
		controller: 'UserController',
		action: 'follow',
		skipAssets: true
	},
	'get /user/unfollow': {
		controller: 'UserController',
		action: 'unfollow',
		skipAssets: true
	},
	'post /user/save/avatar': {
		controller: 'UserController',
		action: 'saveAvatar',
		skipAssets: true
	},
	'post /user/save/dateFormat': {
		controller: 'UserController',
		action: 'saveDateFormat',
		skipAssets: true
	},
	'post /user/save/dob': {
		controller: '

		action: 'saveDOB',
		skipAssets: true
	},
	'post /user/save/name': {
		controller: 'UserController',
		action: 'saveName',
		skipAssets: true
	},
	'post /user/save/location': {
		controller: 'UserController',
		action: 'saveLocation',
		skipAssets: true
	},
	'get /session/create': {
		controller: 'SessionController',
		action: 'create',
		skipAssets: true
	},
	'post /user/create': {
		controller: 'UserController',
		action: 'create',
		skipAssets: true
	},
	'post /post/get': {
		controller: 'PostController',
		action: 'get',
		skipAssets: true
	},
	'get /session/list': {
		controller: 'SessionController',
		action: 'list',
		skipAssets: true
	},
	'post /forum/moreTopics': {
		controller: 'ForumController',
		action: 'moreTopics',
		skipAssets: true
	},
	'post /post/create': {
		controller: 'PostController',
		action: 'create',
		skipAssets: true
	},
	'post /profile/loadPostHistory': {
		controller: 'ProfileController',
		action: 'loadPostHistory',
		skipAssets: true
	},
	'post /prof
var class_nav_a_i =
    [ "NavAI", "class_nav_a_i.html#a009d7237f55b9fd3e13fd9f2e3d69d9d", null ],
    [ "~NavAI", "class_nav_a_i.html#ac11f0bcdff91523e3111a75518c45e73", null ],
    [ "Avoid", "class_nav_a_i.html#a2de81ff89700701a7c956131d5442e97", null ],
    [ "AvoidTerrain", "class_nav_a_i.html#a093de3dcc6d67d9f657030f99f9112be", null ],
    [ "Complete", "class_nav_a_i.html#aa119f28c1173547879bf08cf541f7688", null ],
    [ "Disengage", "class_nav_a_i.html#a1959ba9c507a23ac356297274dfe8d79", null ],
    [ "ExecFrame", "class_nav_a_i.html#ae0cb51215551b3e798d3a583104be927", null ],
    [ "FindObjective", "class_nav_a_i.html#a9e74a38cca93f03b85ba9bbd5bee3481", null ],
    [ "Flee", "class_nav_a_i.html#a7250b4e01bf8ea092ae35cb7721f6c82", null ],
    [ "HelmControl", "class_nav_a_i.html#a4be5b2504cde4291c2b975f25f23682b", null ],
    [ "Navigator", "class_nav_a_i.html#a5a3d0b76afaca623524b50179971e060", null ],
    [ "Seek", "class_nav_a_i.html#a6cb1a73c4eaa8623e841f5a061705438", null 
var tape = require("tape"),
    dispatch = require("../");
tape("dispatch(typeâ¦) returns a dispatch object with the specified types", function(test) {
  var d = dispatch.dispatch("foo", "bar");
  test.ok(d instanceof dispatch.dispatch);
  test.equal(typeof d.foo, "function");
  test.equal(typeof d.bar, "function");
  test.end();
});
tape("dispatch(typeâ¦) throws an error if a specified type name is illegal", function(test) {
  test.throws(function() { dispatch.dispatch("__proto__"); });
  test.throws(function() { dispatch.dispatch("hasOwnProperty"); });
  test.throws(function() { dispatch.dispatch("on"); });
  test.throws(function() { dispatch.dispatch(""); });
  test.end();
});
tape("dispatch(typeâ¦) throws an error if a specified type name is a duplicate", function(test) {
  test.throws(function() { dispatch.dispatch("foo", "foo"); });
  test.end();
});
tape("dispatch(type)[type](â¦) invokes callbacks of the specified type", function(test) {
  var foo = 0,
      bar = 0,
      d = dispa

  d.foo();
  test.equal(foo, 1);
  test.equal(bar, 0);
  d.foo();
  d.bar();
  test.equal(foo, 2);
  test.equal(bar, 1);
  test.end();
});
tape("dispatch(type)[type](â¦) invokes callbacks with specified arguments and context", function(test) {
  var results = [],
      foo = {},
      bar = {},
      d = dispatch.dispatch("foo").on("foo", function() { results.push({this: this, arguments: [].slice.call(arguments)}); });
  d.foo.call(foo, bar);
  test.deepEqual(results, [{this: foo, arguments: [bar]}]);
  d.foo.call(bar, foo, 42, "baz");
  test.deepEqual(results, [{this: foo, arguments: [bar]}, {this: bar, arguments: [foo, 42, "baz"]}]);
  test.end();
});
tape("dispatch(type)[type](â¦) invokes callbacks in the order they were added", function(test) {
  var results = [],
      d = dispatch.dispatch("foo");
  d.on("foo.a", function() { results.push("A"); });
  d.on("foo.b", function() { results.push("B"); });
  d.foo();
  d.on("foo.c", function() { results.push("C"); });
  d.foo();
  test.d

  test.end();
});
tape("dispatch(type)[type](â¦) returns the dispatch object", function(test) {
  var d = dispatch.dispatch("foo");
  test.equal(d.foo(), d);
  test.end();
});
tape("dispatch(type).on(type, f) returns the dispatch object", function(test) {
  var d = dispatch.dispatch("foo");
  test.equal(d.on("foo", function() {}), d);
  test.end();
});
tape("dispatch(type).on(type, f) replaces an existing callback, if present", function(test) {
  var foo = 0,
      bar = 0,
      d = dispatch.dispatch("foo", "bar");
  d.on("foo", function() { ++foo; });
  d.foo();
  test.equal(foo, 1);
  test.equal(bar, 0);
  d.on("foo", function() { ++bar; });
  d.foo();
  test.equal(foo, 1);
  test.equal(bar, 1);
  test.end();
});
tape("dispatch(type).on(type, f) replacing an existing callback with itself has no effect", function(test) {
  var foo = 0,
      FOO = function() { ++foo; },
      d = dispatch.dispatch("foo").on("foo", FOO);
  d.foo();
  test.equal(foo, 1);
  d.on("foo", FOO).on("foo", FO

  d.foo();
  test.equal(foo, 2);
  test.end();
});
tape("dispatch(type).on(type, null) removes an existing callback, if present", function(test) {
  var foo = 0,
      d = dispatch.dispatch("foo", "bar");
  d.on("foo", function() { ++foo; });
  d.foo();
  test.equal(foo, 1);
  d.on("foo", null);
  d.foo();
  test.equal(foo, 1);
  test.end();
});
tape("dispatch(type).on(type, null) does not remove a shared callback", function(test) {
  var a = 0,
      A = function() { ++a; },
      d = dispatch.dispatch("foo", "bar").on("foo", A).on("bar", A);
  d.foo();
  d.bar();
  test.equal(a, 2);
  d.on("foo", null);
  d.bar();
  test.equal(a, 3);
  test.end();
});
tape("dispatch(type).on(type, null) removing a missing callback has no effect", function(test) {
  var d = dispatch.dispatch("foo"), a = 0;
  function A() { ++a; }
  d.on("foo.a", null).on("foo", A).on("foo", null).on("foo", null);
  d.foo();
  test.equal(a, 0);
  test.end();
});
tape("dispatch(type).on(type, null) removing a callback 

  var d = dispatch.dispatch("foo"), a = {}, b = {}, those = [];
  function A() { d.on("foo.b", null); those.push(a); }
  function B() { those.push(b); }
  d.on("foo.a", A).on("foo.b", B);
  d.foo();
  test.deepEqual(those, [a]);
  test.end();
});
tape("dispatch(type).on(type, f) adding a callback does not affect the current call", function(test) {
  var d = dispatch.dispatch("foo"), a = {}, b = {}, those = [];
  function A() { d.on("foo.b", B); those.push(a); }
  function B() { those.push(b); }
  d.on("foo.a", A);
  d.foo();
  test.deepEqual(those, [a]);
  test.end();
});
tape("dispatch(type).on(type, f) coerces type to a string", function(test) {
  var f = function() {},
      g = function() {},
      d = dispatch.dispatch(null, undefined).on(null, f).on(undefined, g);
  test.equal(d.on(null), f);
  test.equal(d.on(undefined), g);
  test.end();
});
tape("dispatch(â¦).on(type, f) throws an error if the type is unknown", function(test) {
  test.throws(function() { dispatch.dispatch("foo

  test.throws(function() { dispatch.dispatch("foo").on("__proto__", function() {}); }, /unknown type: __proto__/);
  test.end();
});
tape("dispatch(â¦).on(type) throws an error if the type is unknown", function(test) {
  test.throws(function() { dispatch.dispatch("foo").on("bar"); }, /unknown type: bar/);
  test.throws(function() { dispatch.dispatch("foo").on("__proto__"); }, /unknown type: __proto__/);
  test.end();
});
tape("dispatch(type).on(type) returns the expected callback", function(test) {
  var d = dispatch.dispatch("foo");
  function A() {}
  function B() {}
  function C() {}
  d.on("foo.a", A).on("foo.b", B).on("foo", C);
  test.equal(d.on("foo.a"), A);
  test.equal(d.on("foo.b"), B);
  test.equal(d.on("foo"), C);
  test.end();
});
tape("dispatch(type).on(.name) returns undefined when retrieving a callback", function(test) {
  var d = dispatch.dispatch("foo").on("foo.a", function() {});
  test.equal(d.on(".a"), undefined);
  test.end();
});
tape("dispatch(type).on(.name, nu
'use strict';
/**
 * @ngdoc function
 * @name gitSearchWivoApp.endpoint:ContentService
 * @description
 * # ContentService
 * Controller of the gitSearchWivoApp to retrieve information from own conexion web service
 */
angular
.module('gitSearchWivoApp.endpoints')
.factory('ContentService', ContentService);
ContentService.$injector = ['UrlService', 'ConnectionService'];
function ContentService(UrlService, ConnectionService) {
  var service = {};
  service.getFavorites = getFavorites;
  service.getLanguages = getLanguages;
  service.isFavorite = isFavorite;
  service.addFavorite = addFavorite;
  service.removeFavorite = removeFavorite;
  function getLanguages(){
      return ConnectionService.get(UrlService.getLanguages(),{});
  }
  function getFavorites(page, pageSize){
    return ConnectionService.get(UrlService.getFavorites(page, pageSize), {});
  }
  function isFavorite(login){
    return ConnectionService.get(UrlService.isFavorite(login),{});
  }
  function addFavorite(jsonTosend){
var _ = require('lodash');
var Service = require('../models/Service');
var ServiceType = require('../models/ServiceType');
var ServiceStatus = require('../models/ServiceStatus');
/**
 * GET /
 * Home page.
 */
exports.index = (req, res) => {
    Service.find({})
        .populate('type')
        .populate('status')
        .sort({timestamp: -1})
        .exec((err, list) => {
            "use strict";
            res.render('home', {
                title: 'Service status',
                services: list
            });
        });
};
exports.postCreateService = function (req, res) {
    var name = req.body.name;
    var address = req.body.address;
    var serviceType = "210d1d22be018c1121025be1";
    var serviceStatus = "530d1d22be018c1121025be1";
    var service = new Service({ name: name, url: address, type: serviceType, status: serviceStatus });
    service.save(function (err) {
        if (err) {
            req.flash('errors', { msg: err.message });
            res.redirect('/');
goog.provide('cljs.core.async.impl.dispatch');
goog.require('cljs.core');
goog.require('cljs.core.async.impl.buffers');
goog.require('goog.async.nextTick');
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null,(32));
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = (1024);
cljs.core.async.impl.dispatch.process_messages = (function cljs$core$async$impl$dispatch$process_messages(){
cljs.core.async.impl.dispatch.running_QMARK_ = true;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
var count_12128 = (0);
while(true){
var m_12129 = cljs.core.async.impl.dispatch.tasks.pop();
if((m_12129 == null)){
} else {
m_12129.call(null);
if((count_12128 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE)){
var G__12130 = (count_12128 + (1));
count_12128 = G__12130;
continue;
} else {
break;
cljs.core.async.impl.dispatch.running_QMARK_ = false;
if((cljs.core.asy
function activateNav() {
  'use strict';
  $('body').addClass('nav-active');
  
  $('.toggle-nav').off('click', activateNav);
  $('header').off('swiperight', activateNav);
  
  $('.toggle-nav').on('click', deactivateNav);
  $('header').on('swipeleft', deactivateNav);
  $('.categories li').on('click', deactivateNav);
  $('.content').on('click', deactivateNav);
function deactivateNav() {
  'use strict';
  $('body').removeClass('nav-active');
  
  $('.toggle-nav').off('click', deactivateNav);
  $('header').off('swipeleft', deactivateNav);
  $('.categories li').off('click', deactivateNav);
  $('.content').off('click', deactivateNav);
  
  $('.toggle-nav').on('click', activateNav);
  $('header').on('swiperight', activateNav);
$(function () {
  'use strict';
  /* Sorting function */
  $('input').change(function () {
    var filter = $('input:checked');
    $('.item').show();
    if (filter.length > 0) {
      $('.item').hide();
      $.each(filter, function (i, val) {
        $('.item[data-'
var ServiceController = function() { 
  
  return {
    run: function(req, res) {
      var service_id = req.params.service_id;
      mysql.query("SELECT * FROM services WHERE services.cached_slug = ? LIMIT 1", [ service_id ], function(err, service_r) {
        if (err || service_r.length == 0) return res.send(Helpers.error("Unknown service: " + service_id));
        var service = service_r[0];
        mysql.query("SELECT * FROM service_connections WHERE service_connections.app_id = ? AND service_id = ? LIMIT 1", [req.app.id, service.id], function(err, service_connection_r) {
          if (err || service_connection_r.length == 0) return res.send(Helpers.error("No Service Connection for " + service_id + " enable the service connection on our website."));
          var service_connection = new ServiceConnection.Instance(service_connection_r[0], service);
          service_connection.run(req, res);
          return true;
        });
        return true;
      });
      return true;
    }

function ExpressionParser() {
    var currentMessage = null;
    var rootMessage = new SyncMessage('root', 'CLIENT', 'whatever');
    var messageStack = [rootMessage];
    function getMessageFromSentence(sentence, from) {
        from = from || '';
        sentence = sentence.split(" ").join("");
        /((\w+)=)*((\w+)\.)*(.+)/.test(sentence);
        var returnResult = RegExp.$2;
        var entityTo = RegExp.$4;
        var message = RegExp.$5;
        if (message.endsWith(';')) {
            message = message.substr(0, message.length - 1);
        }
        var text = "";
        if (returnResult != "") {
            text = "[" + returnResult + "]" + message;
        } else {
            text = message;
        }
        return SyncMessage(from, entityTo, text);
    }
    return {
        parseInvoke:function (expression) {
            expression = expression.trim();
            if (expression === "") return null;
            var message = getMessageFromSentence(expression, messag
function hide1(){
		$('#blueTable1').hide();
		$('#greenTable1').show();
		$('#topBtn1').hide();
		$('#bottomBtn1').show();
	}
	function show1(){
		$('#blueTable1').show();
		$('#greenTable1').hide();
		$('#topBtn1').show();
		$('#bottomBtn1').hide();
	}
	function hide2(){
		$('#blueTable2').hide();
		$('#greenTable2').show();
		$('#topBtn2').hide();
		$('#bottomBtn2').show();
	}
	function show2(){
		$('#blueTable2').show();
		$('#greenTable2').hide();
		$('#topBtn2').show();
		$('#bottomBtn2').hide();
	}
	function hide3(){
		$('#blueTable3').hide();
		$('#greenTable3').show();
		$('#topBtn3').hide();
		$('#bottomBtn3').show();
	}
	function show3(){
		$('#blueTable3').show();
		$('#greenTable3').hide();
		$('#topBtn3').show();
		$('#bottomBtn3').hide();
	}
	function hide4(){
		$('#blueTable4').hide();
		$('#greenTable4').show();
		$('#topBtn4').hide();
		$('#bottomBtn4').show();
	}
	function show4(){
		$('#blueTable4').show();
		$('#greenTable4').hide();
		$('#topBtn4').show();
		$('#b
var nav = 
  {
      'page' : 'main-nav-1'
    , 'url'  : 'index.html'
    , 'text' : 'Main Nav 1'
  } 
, {
      'page' : 'main-nav-2'
    , 'url'  : 'index.html'      
    , 'text' : 'Main Nav 2'
    , 'children' : 
      [
        {
            'page' : 'main-nav-2-sub-nav-1'
          , 'url'  : 'index.html'            
          , 'text' : 'Sub Nav 1'
        }
      ] 
  }
, {
      'page' : 'main-nav-3'
    , 'url'  : 'index.html'  
    , 'text' : 'Main Nav 1'
    , 'children' :
      [
        {
            'page' : 'main-nav-3-sub-nav-1'
          , 'url'  : 'index.html'
          , 'text' : 'Sub Nav 1'
        }
      , {
            'page' : 'main-nav-3-sub-nav-2'
          , 'url'  : 'index.html'  
          , 'text' : 'Sub Nav 2'
        }
      , {
            'page' : 'main-nav-3-sub-nav-3'
          , 'url'  : 'index.html'
          , 'text' : 'Sub Nav 3'
        }
      , {
            'page' : 'main-nav-3-sub-nav-4'
          , 'url'  : 'index.html'  
          , 'tex
;(function(){
  var $octoNav = $('[octo-nav]'),
    $octoNavPageContent = $('[octo-nav-page-content]'),
    $octoNavControl = $('[octo-nav-control]'),
    $octoNavNavigation = $('[octo-nav-navigation]'),
    animationTime = 500;
  $octoNavNavigation.on('click', function(event) {
    $target = $(event.target);
    if ($target.attr('octo-nav-link') !== undefined) {
      var hash = $target[0].hash,
        $hash = $(hash);
      if(hash !== undefined && hash.indexOf('#') === 0) {
        event.preventDefault();
        $octoNavPageContent.find('[octo-nav-scrollable]')
          .stop(true, true)
          .animate({
            scrollTop: $hash.offset().top + $hash.parent().scrollTop()
          }, animationTime);
        setTimeout(function(){
          $octoNavPageContent.removeClass('show-nav');
        }, animationTime);
      }
    }
  });
  $octoNavPageContent.on('click', function(event) {
    if ($octoNavPageContent.hasClass('show-nav') && $(event.target).attr('octo-nav-control') 
require("../env");
require("../../d3");
var vows = require("vows"),
    assert = require("assert");
var suite = vows.describe("d3.dispatch");
suite.addBatch({
  "dispatch": {
    topic: function() {
      return d3.dispatch;
    },
    "returns a map of dispatchers for each event type": function(dispatch) {
      assert.deepEqual(dispatch(), {});
      var d = dispatch("foo");
      assert.isTrue("foo" in d);
      assert.isFalse("bar" in d);
      var d = dispatch("foo", "bar");
      assert.isTrue("foo" in d);
      assert.isTrue("bar" in d);
    },
    "added listeners receive subsequent events": function(dispatch) {
      var d = dispatch("foo"), events = 0;
      d.on("foo", function() { ++events; });
      d.foo();
      assert.equal(events, 1);
      d.foo();
      d.foo();
      assert.equal(events, 3);
    },
    "the listener is passed any arguments to dispatch": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, aa, bb;
      d.on("foo", function(a, b) { aa 

      d.foo(a, b);
      assert.equal(aa, a);
      assert.equal(bb, b);
      d.foo(1, "foo");
      assert.equal(aa, 1);
      assert.equal(bb, "foo");
    },
    "the listener's context is the same as dispatch's": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, that;
      d.on("foo", function() { that = this; });
      d.foo.call(a);
      assert.equal(that, a);
      d.foo.call(b);
      assert.equal(that, b);
    },
    "listeners are notified in the order they are added": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, those = [];
      function A() { those.push(a); }
      function B() { those.push(b); }
      d.on("foo.a", A).on("foo.b", B);
      d.foo();
      assert.deepEqual(those, [a, b]);
      those = [];
      d.foo();
      assert.deepEqual(those, [b, a]);
    },
    "notifying listeners returns the dispatch object": function(dispatch) {
      var d = dispatch("foo");
      assert.equal(d.foo(), d);
    },
    "adding a listene

      var d = dispatch("foo");
      function A() {}
      assert.equal(d.on("foo", A), d);
    },
    "removed listeners do not receive subsequent events": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, those = [];
      function A() { those.push(a); }
      function B() { those.push(b); }
      d.on("foo.a", A).on("foo.b", B);
      d.foo();
      those = [];
      d.on("foo.a", null);
      d.foo();
      assert.deepEqual(those, [b]);
    },
    "removing a shared listener only affects the intended event": function(dispatch) {
      var d = dispatch("foo", "bar"), a = 0;
      function A() { ++a; }
      d.on("foo", A).on("bar", A);
      d.foo();
      d.bar();
      assert.equal(a, 2);
      d.on("foo", null);
      d.bar();
      assert.equal(a, 3);
    },
    "adding an existing listener has no effect": function(dispatch) {
      var d = dispatch("foo"), events = 0;
      function A() { ++events; }
      d.on("foo.a", A);
      d.foo();
      d.on("foo.a", 

      d.foo();
      assert.equal(events, 2);
    },
    "removing a missing listener has no effect": function(dispatch) {
      var d = dispatch("foo"), events = 0;
      function A() { ++events; }
      d.on("foo.a", null).on("foo", A).on("foo", null).on("foo", null);
      d.foo();
      assert.equal(events, 0);
    },
    "adding a listener does not affect the current event": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, those = [];
      function A() { d.on("foo.b", B); those.push(a); }
      function B() { those.push(b); }
      d.on("foo.a", A);
      d.foo();
      assert.deepEqual(those, [a]);
    },
    "removing a listener does affect the current event": function(dispatch) {
      var d = dispatch("foo"), a = {}, b = {}, those = [];
      function A() { d.on("foo.b", null); those.push(a); }
      function B() { those.push(b); }
      d.on("foo.a", A).on("foo.b", B);
      d.foo();
      assert.deepEqual(those, [a]);
    },
    "getting a listener retur
var express     = require('express'),
    api         = require('../api'),
    apiRoutes;
apiRoutes = function apiRoutes(middleware) {
    var router = express.Router(),
        authenticatePublic = [
            middleware.api.authenticateClient,
            middleware.api.authenticateUser,
            middleware.api.requiresAuthorizedUserPublicAPI
        ],
        authenticatePrivate = [
            middleware.api.authenticateClient,
            middleware.api.authenticateUser,
            middleware.api.requiresAuthorizedUser
        ];
    router.del = router.delete;
    router.get('/configuration', authenticatePrivate, api.http(api.configuration.browse));
    router.get('/configuration/:key', authenticatePrivate, api.http(api.configuration.read));
    router.get('/posts', authenticatePublic, api.http(api.posts.browse));
    router.post('/posts', authenticatePrivate, api.http(api.posts.add));
    router.get('/posts/:id', authenticatePublic, api.http(api.posts.read));
    router.g

    router.put('/posts/:id', authenticatePrivate, api.http(api.posts.edit));
    router.del('/posts/:id', authenticatePrivate, api.http(api.posts.destroy));
    router.get('/settings', authenticatePrivate, api.http(api.settings.browse));
    router.get('/settings/:key', authenticatePrivate, api.http(api.settings.read));
    router.put('/settings', authenticatePrivate, api.http(api.settings.edit));
    router.get('/users', authenticatePublic, api.http(api.users.browse));
    router.get('/users/:id', authenticatePublic, api.http(api.users.read));
    router.get('/users/slug/:slug', authenticatePublic, api.http(api.users.read));
    router.get('/users/email/:email', authenticatePublic, api.http(api.users.read));
    router.put('/users/password', authenticatePrivate, api.http(api.users.changePassword));
    router.put('/users/owner', authenticatePrivate, api.http(api.users.transferOwnership));
    router.put('/users/:id', authenticatePrivate, api.http(api.users.edit));
    router.post('/u

    router.del('/users/:id', authenticatePrivate, api.http(api.users.destroy));
    router.get('/tags', authenticatePublic, api.http(api.tags.browse));
    router.get('/tags/:id', authenticatePublic, api.http(api.tags.read));
    router.get('/tags/slug/:slug', authenticatePublic, api.http(api.tags.read));
    router.post('/tags', authenticatePrivate, api.http(api.tags.add));
    router.put('/tags/:id', authenticatePrivate, api.http(api.tags.edit));
    router.del('/tags/:id', authenticatePrivate, api.http(api.tags.destroy));
    router.get('/roles/', authenticatePrivate, api.http(api.roles.browse));
    router.get('/clients/slug/:slug', api.http(api.clients.read));
    router.get('/slugs/:type/:name', authenticatePrivate, api.http(api.slugs.generate));
    router.get('/themes', authenticatePrivate, api.http(api.themes.browse));
    router.put('/themes/:name', authenticatePrivate, api.http(api.themes.edit));
    router.get('/notifications', authenticatePrivate, api.http(api.notificatio

    router.post('/notifications', authenticatePrivate, api.http(api.notifications.add));
    router.del('/notifications/:id', authenticatePrivate, api.http(api.notifications.destroy));
    router.get('/db', authenticatePrivate, api.http(api.db.exportContent));
    router.del('/db', authenticatePrivate, api.http(api.db.deleteAllContent));
    router.post('/mail', authenticatePrivate, api.http(api.mail.send));
    router.post('/mail/test', authenticatePrivate, api.http(api.mail.sendTest));
    router.post('/authentication/passwordreset',
        middleware.spamPrevention.forgotten,
        api.http(api.authentication.generateResetToken)
    );
    router.put('/authentication/passwordreset', api.http(api.authentication.resetPassword));
    router.post('/authentication/invitation', api.http(api.authentication.acceptInvitation));
    router.get('/authentication/invitation', api.http(api.authentication.isInvitation));
    router.post('/authentication/setup', api.http(api.authentication.setu
define("api",[],function(require, exports, module) {
    require('jquery');
    API.URL = {};
    API.URL.host = "";
    API.URL.url_api = API.URL.host+"api/";
    API.URL.api_appendix = ".json";
    API.URL.url_web = API.URL.host+"";
    API.URL.url_get_templete = API.URL.url_api+"get_templete"+API.URL.api_appendix;
    API.URL.url_get_templete_category = API.URL.url_api+"get_templete_category"+API.URL.api_appendix;
    API.URL.url_get_templete_list = API.URL.url_api+"get_templete_list"+API.URL.api_appendix;
    API.URL.url_get_picture_category = API.URL.url_api+"get_picture_category"+API.URL.api_appendix;
    API.URL.url_get_picture_list = API.URL.url_api+"get_picture_list"+API.URL.api_appendix;
    API.URL.url_upload_picture = API.URL.url_api+"upload_picture"+API.URL.api_appendix;
    API.URL.url_generate_templete = API.URL.url_api+"generate_templete"+API.URL.api_appendix;
    function API() {
        this._init();
    }
    module.exports = API;
    API.prototype._init = function()
define([], function () {
	var parser = (function () { 
		'use strict';
		
		function parseMessage(message) {
			var parsedMessage = '',
				laughingEmoticon = '<img src="media/laughing.png"/>', 
				likeEmoticon = '<img src="media/like.png"/>', 
				sadEmoticon = '<img src="media/sad.png"/>', 
				smileEmoticon = '<img src="media/smile.png"/>', 
				winkEmoticon = '<img src="media/wink.png"/>'; 
			
			for (var i = 0; i < message.length; i += 1) {
				if (message[i] === ':' && (message[i + 1] === 'D' || message[i + 1] === 'd')) {
					parsedMessage += laughingEmoticon;
					i += 1;
				} else if (message[i] === ':' && message[i + 1] === ')') {
					parsedMessage += smileEmoticon;
					i += 1;
				} else if (message[i] === ':' && message[i + 1] === '(') {
					parsedMessage += sadEmoticon;
					i += 1;
				} else if (message[i] === ';' && message[i + 1] === ')') {
					parsedMessage += winkEmoticon;
					i += 1;
				} else if (message[i] === '(' && (message[i + 1] === 'y' || message[i +
Ext.define('Hatiopia.controller.Nav', {
    extend: 'Ext.app.Controller',
    config: {
        refs: {
            main : 'main',
            nav : 'nav',
            content : 'content',
			header : 'header'
        },
        control: {
			nav : {
				initialize : 'onInitialize',
			},
			'#nav_admin' : {
				tap : 'onAdmin'
			},
			'#nav_resource' : {
				tap : 'onResource'
			},
			'#nav_blog' : {
				tap : 'onBlog'
			},
			'#nav_report' : {
				tap : 'onReport'
			}
        }
    },
	onInitialize: function() {
        var self = this;
        
    },
	onDestroy: function() {
        clearInterval(this.incidentInterval);
        clearInterval(this.vehicleMapInterval);
	},
    onAdmin: function(button, e) {
		this.getNav().setNavigationBar(true);
		this.getNav().push({
			xtype : 'nav_admin'
		});
    },
    onResource: function(button, e) {
		this.getNav().setNavigationBar(true);
		this.getNav().push({
			xtype : 'nav_resource'
		});
    },
	onBlog: function(button, e) {
		this.
var dir_b500f500d6f9b315c95ab1cd4a3b5c0d =
    [ "Request", "dir_2497f3a9b56982c1e540708cc85f9d4d.html", "dir_2497f3a9b56982c1e540708cc85f9d4d" ],
    [ "Session", "dir_72677b4696b1cbdff84370bf834609f4.html", "dir_72677b4696b1cbdff84370bf834609f4" ],
    [ "BaseController.php", "_base_controller_8php.html", [
      [ "BaseController", "class_o_r_m_1_1_controller_1_1_base_controller.html", "class_o_r_m_1_1_controller_1_1_base_controller" ]
    ] ],
    [ "ControllerFactory.php", "_controller_factory_8php.html", [
      [ "ControllerFactory", "class_o_r_m_1_1_controller_1_1_controller_factory.html", "class_o_r_m_1_1_controller_1_1_controller_factory" ]
    ] ],
    [ "ControllerRegister.php", "_controller_register_8php.html", [
      [ "ControllerRegister", "class_o_r_m_1_1_controller_1_1_controller_register.html", "class_o_r_m_1_1_controller_1_1_controller_register" ]
    ] ],
    [ "Request.php", "_request_8php.html", [
      [ "Request", "class_o_r_m_1_1_controller_1_1_request.html", 
'use strict';
tatool
  .controller('tatoolSimonCtrl', [ '$scope', 'service',
    function ($scope, service) {
    $scope.stimulusServiceLeft = service.stimulusServiceLeft;
    $scope.stimulusServiceRight = service.stimulusServiceRight;
    $scope.inputService = service.inputService;
    $scope.displayCross = false;
    $scope.start = function() {
      service.createStimulus();
      displayCross();
    };
    function displayCross() {
      $scope.displayCross = true;
      service.crossTimer.start(displayStimulus);
    }
    function displayStimulus() {
      service.inputService.enable();
      if (service.showKeys.propertyValue === true) {
        service.inputService.show();
      }
      if (service.timerEnabled.propertyValue === true) {
        service.timer.start(timerUp);
      }
      service.startTime = service.currentStimulusService.show();
    }
    function timerUp() {
      service.inputService.disable();
      service.endTime = service.currentStimulusService.hide();
   
/* clients */
/* common */
/* dashboard */
/* inventory */
/* transactions */
/* settings */
/* users */
/* warehouses */
export default angular.module('inventoryApp.controllers', [])
  .controller('CreateClientModalController', CreateClientModalController)
  .controller('ClientsDetailController', ClientsDetailController)
  .controller('ClientsController', ClientsController)
  .controller('BaseController', BaseController)
  .controller('ConfirmationDialogModalController', ConfirmationDialogModalController)
  .controller('HeaderController', HeaderController)
  .controller('LoginController', LoginController)
  .controller('SignUpController', SignUpController)
  .controller('DashboardController', DashboardController)
  .controller('CreateProductGroupModalController', CreateProductGroupModalController)
  .controller('CreateProductModalController', CreateProductModalController)
  .controller('CreateUOMModalController', CreateUOMModalController)
  .controller('EditProductModalController', Ed
var class_leap_1_1_controller =
    [ "Controller", "class_leap_1_1_controller.html#a356eee86e8cd232b3f6829986a64add5", null ],
    [ "Controller", "class_leap_1_1_controller.html#a0f4287953473ead9c0db559370a6be9d", null ],
    [ "~Controller", "class_leap_1_1_controller.html#a6def9fc3e0d85c9a6d4efee3c988c7e1", null ],
    [ "Controller", "class_leap_1_1_controller.html#a6a3a060e4fcb31ce385f219e44199b1f", null ],
    [ "addListener", "class_leap_1_1_controller.html#ab9a4ba4a4cd6558173a201617d9722d1", null ],
    [ "calibratedScreens", "class_leap_1_1_controller.html#ab8d9bb5313ac7f3d8931d035dd30a6fd", null ],
    [ "config", "class_leap_1_1_controller.html#a5bf6df38bb2c9b6142d2814fffe80d11", null ],
    [ "enableGesture", "class_leap_1_1_controller.html#a63bc63057adc36a5f14e033c3a0b50d3", null ],
    [ "frame", "class_leap_1_1_controller.html#a00f7f3403c2281541f78bafbaf983ee1", null ],
    [ "hasFocus", "class_leap_1_1_controller.html#ac2d081aa6e6bbcffe13596fbcb44b266", null ],
    [ "
var searchData=
  ['account',['Account',['../class_account.html',1,'']]],
  ['accountplan',['AccountPlan',['../class_account_plan.html',1,'']]],
  ['apigeneratepagesdata',['ApiGeneratePagesData',['../class_api_generate_pages_data.html',1,'']]],
  ['apigeneratepagesrequest',['ApiGeneratePagesRequest',['../class_api_generate_pages_request.html',1,'']]],
  ['apigeneratepagesresponse',['ApiGeneratePagesResponse',['../class_api_generate_pages_response.html',1,'']]],
  ['apigeneratepagesstatusresponse',['ApiGeneratePagesStatusResponse',['../class_api_generate_pages_status_response.html',1,'']]],
  ['apiitemsfortemplateloaddataresponse',['ApiItemsForTemplateLoadDataResponse',['../class_api_items_for_template_load_data_response.html',1,'']]],
  ['apilocationset',['ApiLocationSet',['../class_api_location_set.html',1,'']]],
  ['apilocationsetitem',['ApiLocationSetItem',['../class_api_location_set_item.html',1,'']]],
  ['apilpactioninfo',['ApiLPActionInfo',['../class_api_l_p_action_info.html',1,'

  ['apilpactiontransaction',['ApiLPActionTransaction',['../class_api_l_p_action_transaction.html',1,'']]],
  ['apilpemployee',['ApiLPEmployee',['../class_api_l_p_employee.html',1,'']]],
  ['apilpmember',['ApiLPMember',['../class_api_l_p_member.html',1,'']]],
  ['apilpredemptiontransaction',['ApiLPRedemptionTransaction',['../class_api_l_p_redemption_transaction.html',1,'']]],
  ['apilprewardinfo',['ApiLPRewardInfo',['../class_api_l_p_reward_info.html',1,'']]],
  ['apilptransaction',['ApiLPTransaction',['../class_api_l_p_transaction.html',1,'']]],
  ['apipagetemplate',['ApiPageTemplate',['../class_api_page_template.html',1,'']]],
  ['apiresponse',['apiResponse',['../classapi_response.html',1,'']]],
  ['apistdclass',['apiStdClass',['../classapi_std_class.html',1,'']]],
  ['apitemplatecontainer',['ApiTemplateContainer',['../class_api_template_container.html',1,'']]],
  ['apitemplatefield',['ApiTemplateField',['../class_api_template_field.html',1,'']]],
  ['apitemplatefielddata',['ApiTempl
var express     = require('express'),
    api         = require('../api'),
    apiRoutes;
apiRoutes = function apiRoutes(middleware) {
    var router = express.Router();
    router.del = router.delete;
    router.get('/configuration', api.http(api.configuration.browse));
    router.get('/configuration/:key', api.http(api.configuration.read));
    router.get('/posts', api.http(api.posts.browse));
    router.post('/posts', api.http(api.posts.add));
    router.get('/posts/:id', api.http(api.posts.read));
    router.get('/posts/slug/:slug', api.http(api.posts.read));
    router.put('/posts/:id', api.http(api.posts.edit));
    router.del('/posts/:id', api.http(api.posts.destroy));
    router.get('/settings', api.http(api.settings.browse));
    router.get('/settings/:key', api.http(api.settings.read));
    router.put('/settings', api.http(api.settings.edit));
    router.get('/users', api.http(api.users.browse));
    router.get('/users/:id', api.http(api.users.read));
    router.get('/users/s

    router.get('/users/email/:email', api.http(api.users.read));
    router.put('/users/password', api.http(api.users.changePassword));
    router.put('/users/owner', api.http(api.users.transferOwnership));
    router.put('/users/:id', api.http(api.users.edit));
    router.post('/users', api.http(api.users.add));
    router.del('/users/:id', api.http(api.users.destroy));
    router.get('/tags', api.http(api.tags.browse));
    router.get('/tags/:id', api.http(api.tags.read));
    router.get('/tags/slug/:slug', api.http(api.tags.read));
    router.post('/tags', api.http(api.tags.add));
    router.put('/tags/:id', api.http(api.tags.edit));
    router.del('/tags/:id', api.http(api.tags.destroy));
    router.get('/roles/', api.http(api.roles.browse));
    router.get('/slugs/:type/:name', api.http(api.slugs.generate));
    router.get('/themes', api.http(api.themes.browse));
    router.put('/themes/:name', api.http(api.themes.edit));
    router.get('/notifications', api.http(api.notification

    router.post('/notifications', api.http(api.notifications.add));
    router.del('/notifications/:id', api.http(api.notifications.destroy));
    router.get('/db', api.http(api.db.exportContent));
    router.del('/db', api.http(api.db.deleteAllContent));
    router.post('/mail', api.http(api.mail.send));
    router.post('/mail/test', api.http(api.mail.sendTest));
    router.post('/authentication/passwordreset',
        middleware.spamPrevention.forgotten,
        api.http(api.authentication.generateResetToken)
    );
    router.put('/authentication/passwordreset', api.http(api.authentication.resetPassword));
    router.post('/authentication/invitation', api.http(api.authentication.acceptInvitation));
    router.get('/authentication/invitation', api.http(api.authentication.isInvitation));
    router.post('/authentication/setup', api.http(api.authentication.setup));
    router.put('/authentication/setup', api.http(api.authentication.updateSetup));
    router.get('/authentication/setup'
define(['angular',
	'controller/blogController',
	'controller/postController',
	'controller/indexController',
	'controller/resumeController',
	'controller/projectsController',
	'service/blogService',
	,'angular-route'
	,'angular-resource'
	,'angular-sanitize'],function(angular,blogctrl,postctrl,indexCtrl,resumeCtrl,projectsCtrl,blogSrv){
	var app= angular.module('app',['ngRoute','ngResource','ngSanitize']);
	var path='/app/';
	app.config(['$routeProvider','$locationProvider',function($routeProvider,$locationProvider){
		$routeProvider.when('/',{
				templateUrl:path+'view/index.html',
				controller:'indexController'
			})
		.when('/blog/post/:url',{
			templateUrl:path+'view/post.html',
			controller:'postController'
		})
		.when('/resume',{
			templateUrl:path+'view/resume.html',
			controller:'resumeController'
		})
		.when('/projects',{
			templateUrl:path+'view/projects.html',
			controller:'projectsController'
		})
		.otherwise({
        redirectTo: '/'
      });
	}]);
	app.servi
define([
    'js/lib/nuclearHorseStudios/controllers/recentBlogPostsController',
    'js/lib/nuclearHorseStudios/controllers/blogAddPostController',
    'js/lib/nuclearHorseStudios/controllers/blogViewPostController',
    'js/lib/nuclearHorseStudios/controllers/blogDeletePostController',
    'js/lib/nuclearHorseStudios/controllers/blogAdminController',
    'js/lib/nuclearHorseStudios/controllers/blogPostsPaginatedController',
    'js/lib/nuclearHorseStudios/controllers/adminController',
    'js/lib/nuclearHorseStudios/controllers/creationsController',
    'js/lib/nuclearHorseStudios/controllers/contactController',
    'js/lib/nuclearHorseStudios/controllers/loginController',
    'js/lib/nuclearHorseStudios/controllers/twitterController',
    'js/lib/nuclearHorseStudios/controllers/faqController'], 
    function(
        RecentBlogPosts,
        BlogAddPostController,
        BlogViewPostController,
        BlogDeletePostController,
        BlogAdminController,
        BlogPostsPaginate
;(function(){ 'use strict';
    angular
        .module('mz.nav.services.api', [])
        .provider('mzNavApi', mzNavApi)
        .config(decorate)
        ;
    var required, navs, app;
    /* @ngInject */
    function mzNavApi(){
        var _this = this;
        function defaultConfig(){  this.hideOn = {};  this.showOn = {};  }
        this.config =
            { navBar : new defaultConfig()
            , left   : new defaultConfig()
            , right  : new defaultConfig()
            , footer : new defaultConfig()
            };
        this.hideOn = function(navType, state) {
            this.config[navType] ||( console.error('Nav type does not exist') );
            this.config[navType].hideOn[state] = true;   };
        this.$get = function($injector) {
            function Nav($NavService){  _.assign(this, _this.config);  this.config = _this.config;  };
            Nav.prototype.Nav = Nav;
            Nav.prototype.enable = function(scope) {};
            return $injector.i
var util = require('util');
var colors = require('colors');
var moment = require('moment');
var logentries = require('node-logentries');
var config = require('../../config');
var log = logentries.logger({
	token: config.logentries.token,
	printerror: false
});
log.level('info');
module.exports = {
	success: function (message) {
		message = typeof message === 'string' ? message : JSON.stringify(message);
		console.log(this.timestamptMessage(util.format('SUCCESS: %s', message)).green);
		log.log('info', message);
	},
	warning: function (message) {
		message = typeof message === 'string' ? message : JSON.stringify(message);
		console.log(this.timestamptMessage(util.format('WARNING: %s', message)).yellow);
		log.log('warning', message);
	},
	error: function (message) {
		message = typeof message === 'string' ? message : JSON.stringify(message);
		console.log(this.timestamptMessage(util.format('ERROR: %s', message)).red);
		log.log('err', message);
	},
	fatal: function (message) {
		message
define([
   
'backbone',
'underscore',
'core/LocastDispatcher',
'core/LocastView',
'config',
'text!core/nav/templates/locastNavTemplate.html'
], 
function(Backbone, _, LocastDispatcher, LocastView, config, navTemplate) { 
  
    var LocastNavItemModel = Backbone.Model.extend({
      
        select: function (silent) {
            this.collection.selectNavItem(this, silent);
        }
    }); 
    var LocastNavItemView = LocastView.extend({
   
        events: { 
            'click a': 'navItemClick',
        },
        render: function () {
            var navHtml = _.template(navTemplate, this.model.toJSON());
            this.$el.append(navHtml);
            return this;
        }, 
        navItemClick: function (e) {
            this.model.select();
        }
    
    });
     var LocastNavCollection = Backbone.Collection.extend({
        
        model: LocastNavItemModel,
        selectNavItem: function(navItem, silent) {
            if (navItem.get('active') === true) {
       

            }
            else { 
                this.unselectNavItems();       
                navItem.set('active', true, {silent:silent});
            }
        },
        unselectNavItems: function () {
            this.each( function (thisNavItem) {
                thisNavItem.set('active', undefined, {silent:true});
            });
        },
    });
    var LocastNavView = LocastView.extend({
        
        el: '#' + config.navigation.id,
        initialize: function () { 
            this.navCollection = this.navCollection || new LocastNavCollection(_.toArray(config.navigation.items));
            this.navCollection.on('change:active', this.onNavItemSelect, this);  
            this.render();
        },
        render: function () {
            this.$el.html('');
            this.navCollection.each(this.renderNavItem, this);
        },
        renderNavItem: function (model) {
            var navItemView = new LocastNavItemView({model: model});
            this.$el.append(
var dir_d4c866bc078ab9dbd18c5ad776bfdd07 =
    [ "AppServiceProvider.php", "_app_service_provider_8php.html", [
      [ "AppServiceProvider", "class_app_1_1_providers_1_1_app_service_provider.html", "class_app_1_1_providers_1_1_app_service_provider" ]
    ] ],
    [ "BusServiceProvider.php", "app_2_providers_2_bus_service_provider_8php.html", [
      [ "BusServiceProvider", "class_app_1_1_providers_1_1_bus_service_provider.html", "class_app_1_1_providers_1_1_bus_service_provider" ]
    ] ],
    [ "ConfigServiceProvider.php", "_config_service_provider_8php.html", [
      [ "ConfigServiceProvider", "class_app_1_1_providers_1_1_config_service_provider.html", "class_app_1_1_providers_1_1_config_service_provider" ]
    ] ],
    [ "EventServiceProvider.php", "app_2_providers_2_event_service_provider_8php.html", [
      [ "EventServiceProvider", "class_app_1_1_providers_1_1_event_service_provider.html", "class_app_1_1_providers_1_1_event_service_provider" ]
    ] ],
    [ "RouteServiceProvide
export function homeAction() {
    return dispatch => {
        return dispatch(apiFetchIfNeeded('web_client/config/1/')).then(
            response => {
                return dispatch(apiFetchIfNeeded('portfolio/projects')).then(
                    response => {
                        return dispatch(apiFetchIfNeeded('portfolio/projectsImages/?imgType=mni'));
                    }
                );
            }
        );
    };
};
export function projectsAction() {
    return dispatch => {
        return dispatch(apiFetchIfNeeded('web_client/config/1/')).then(
            response => {
                return dispatch(apiFetchIfNeeded('portfolio/projects')).then(
                    response => {
                        return dispatch(apiFetchIfNeeded('portfolio/projectTags')).then(
                            response => {
                                return dispatch(apiFetchIfNeeded('portfolio/projectsCategories')).then(
                                    response => {
   

                                    }
                                );
                            }
                        );
                    }
                );
            }
        );
    };
export function projectSingleAction(params) {
    let slug = params.slug;
    return dispatch => {
        return dispatch(apiFetchIfNeeded('web_client/config/1/')).then(
            response => {
                return dispatch(apiFetchIfNeeded('portfolio/projects')).then(
                    response => {
                        return dispatch(apiFetchIfNeeded('portfolio/projectTags')).then(
                            response => {
                                return dispatch(apiFetchIfNeeded('portfolio/projectsImages?imgType=gal&project__slug=' + slug)).then(
                                    response => {
                                        return dispatch(apiFetchIfNeeded('portfolio/projectsLinks/?project__slug=' + slug));
                                    }
         

                            }
                        );
                    }
                );
            }
        );
    };
export function aboutAction() {
    return dispatch => {
        return dispatch(apiFetchIfNeeded('web_client/config/1/')).then(
            response => {
                return dispatch(apiFetchIfNeeded('about/entry'));
            }
        );
    };
export function diaryAction() {
    return dispatch => {
        return dispatch(apiFetchIfNeeded('web_client/config/1/')).then(
            response => {
                return dispatch(apiFetchIfNeeded('diary/posts')).then(
                    response => {
                        return dispatch(apiFetchIfNeeded('diary/postTags'));
                    }
                );
            }
        );
    };
export function cvAction() {
    return dispatch => {
        return dispatch(apiFetchIfNeeded('web_client/config/1/')).then(
            response => {
                return dispatch(apiFetchIfNeeded('cv/c

            }
        );
    };
export function subscribeAction() {
    return dispatch => {
        return dispatch(apiFetchIfNeeded('web_client/config/1/'));
    };
export function ligojAction() {
    return dispatch => {
        return dispatch(apiFetchIfNeeded('web_client/config/1/')).then(
            response => {
                return dispatch(apiFetchIfNeeded('ligoj/link')).then(
                    response => {
                        return dispatch(apiFetchIfNeeded('ligoj/linkTags'));
                    }
                );
            }
        );
    };
export function podcastAction() {
    return dispatch => {
        return dispatch(apiFetchIfNeeded('web_client/config/1/')).then(
            response => {
                return dispatch(apiFetchIfNeeded('podcast/json/podcast')).then(
                    response => {
                        return dispatch(apiFetchIfNeeded('podcast/json/podcastTags'));
                    }
                );
            }
        );
var express     = require('express'),
    api         = require('../api'),
    apiRoutes;
apiRoutes = function (middleware) {
    var router = express.Router();
    router.del = router.delete;
    router.get('/configuration', api.http(api.configuration.browse));
    router.get('/configuration/:key', api.http(api.configuration.read));
    router.get('/posts', api.http(api.posts.browse));
    router.post('/posts', api.http(api.posts.add));
    router.get('/posts/:id', api.http(api.posts.read));
    router.get('/posts/slug/:slug', api.http(api.posts.read));
    router.put('/posts/:id', api.http(api.posts.edit));
    router.del('/posts/:id', api.http(api.posts.destroy));
    router.get('/settings', api.http(api.settings.browse));
    router.get('/settings/:key', api.http(api.settings.read));
    router.put('/settings', api.http(api.settings.edit));
    router.get('/users', api.http(api.users.browse));
    router.get('/users/:id', api.http(api.users.read));
    router.get('/users/slug/:slug

    router.get('/users/email/:email', api.http(api.users.read));
    router.put('/users/password', api.http(api.users.changePassword));
    router.put('/users/owner', api.http(api.users.transferOwnership));
    router.put('/users/:id', api.http(api.users.edit));
    router.post('/users', api.http(api.users.add));
    router.del('/users/:id', api.http(api.users.destroy));
    router.get('/tags', api.http(api.tags.browse));
    router.get('/roles/', api.http(api.roles.browse));
    router.get('/slugs/:type/:name', api.http(api.slugs.generate));
    router.get('/themes', api.http(api.themes.browse));
    router.put('/themes/:name', api.http(api.themes.edit));
    router.get('/notifications', api.http(api.notifications.browse));
    router.post('/notifications', api.http(api.notifications.add));
    router.del('/notifications/:id', api.http(api.notifications.destroy));
    router.get('/db', api.http(api.db.exportContent));
    router.del('/db', api.http(api.db.deleteAllContent));
    rout

    router.post('/mail/test', function (req, res) {
        api.http(api.mail.sendTest)(req, res);
    });
    router.post('/authentication/passwordreset',
        middleware.spamForgottenPrevention,
        api.http(api.authentication.generateResetToken)
    );
    router.put('/authentication/passwordreset', api.http(api.authentication.resetPassword));
    router.post('/authentication/invitation', api.http(api.authentication.acceptInvitation));
    router.post('/authentication/setup', api.http(api.authentication.setup));
    router.get('/authentication/setup', api.http(api.authentication.isSetup));
    router.post('/authentication/token',
        middleware.spamSigninPrevention,
        middleware.addClientSecret,
        middleware.authenticateClient,
        middleware.generateAccessToken
    );
    router.post('/authentication/revoke', api.http(api.authentication.revoke));
    router.post('/uploads', middleware.busboy, api.http(api.uploads.add));
    return router;
};
module.expor
'use strict';
angular.module('service-registry')
  .controller('MainCtrl', function ($scope, Service, ServiceDetail, $location) {
	  
	$scope.services = Service.query(); 
	$scope.addService = function () {		
        window.location = "/#add-service";
    };
    
    $scope.editService = function (id) {
        $location.path('/services/' + id);
    };
    $scope.deleteService = function (id) {
    	ServiceDetail.delete({ id: id });
        $scope.services = Service.query();
    };
    
  })
  .controller('ServiceCreationCtrl', function ($scope, Service, $location) {
      $scope.saveService = function () {
          Service.create($scope.service);
          $location.path('/services');
      }
      $scope.cancel = function () {
          $location.path('/services');
      };
  })
  .controller('ServiceDetailCtrl', function ($scope, $routeParams, Service, ServiceDetail, $location) {
      $scope.saveService = function () {
    	  ServiceDetail.update($scope.service);
          $locatio
/**
 * ITL.plugin.message.js
 * @class ITL.plugin
 * @author Md.Rajib-Ul-Islam<mdrajibul@gmail.com>
 * used for common layout event .
 *
 */
ITL.plugin.NotificationMessage = (function() {
    var defaults = {
        template : "<div id=\"notifyMessagePanel\">\
                        <div class=\"image-panel\"></div>\
                        <div class=\"message\"></div>\
                    </div>",
        message:'Loading...',
    };
    var messageContainer;
    var hideShowCounter = 0;
    function initialize(options) {
        if (options) {
            $.extend(defaults, options, true);
        }
        if ($("body").find("#notifyMessagePanel").length > 0) {
            $("body").find("#notifyMessagePanel").remove();
        }
        messageContainer = $(defaults.template);
        setMessageType();
        setMessage();
        showNotification();
    }
    function setMessageType(messageType) {
        if (messageContainer) {
            var imagePanel = messageContainer.fi

            var messagePanel = messageContainer.find(".message-panel");
            if (imagePanel.length > 0) {
                imagePanel.addClass(messageType || defaults.messageType);
            }
            if (messagePanel.length > 0) {
                messagePanel.addClass(messageType || defaults.messageType);
            }
        }
    }
    function setMessage(message) {
        if (messageContainer) {
            messageContainer.find(".message").html((message || defaults.message));
        }
    }
    function showNotification() {
        hideShowCounter = 1;
        $("body").append(messageContainer);
        messageContainer.css({left:($("body").width() / 2 - messageContainer.width() / 2)});
        messageContainer.slideDown(50, function() {
            hideShowCounter = 0;
        });
    }
    function hideNotification() {
        if (hideShowCounter == 0) {
            messageContainer.slideUp(50, function() {
                messageContainer.remove();
            }
(function () {
  "use strict"
  var root = this,
      $ = root.jQuery;
  if(typeof root.GOVUK === 'undefined') { root.GOVUK = {}; }
  var showHide = {
    init: function() {
      showHide.$toggle = $('.js-showhide');
      if (showHide.$toggle.length > 0) {
        showHide.$target = $(showHide.$toggle[0].hash);
        showHide.$toggle.on('click', showHide.toggle);
        if (showHide.$toggle.is(':visible')) {
        }
      }
    },
    toggle: function(e) {
      e.preventDefault();
      if (!showHide.$target.hasClass('js-hidden')) {
        showHide.hideStuff();
      } else {
        showHide.showStuff();
      }
      return false;
    },
    showStuff: function() {
      showHide.$target.removeClass('js-hidden');
      showHide.$toggle.removeClass('closed')
        .text(showHide.$toggle.text().replace('Show', 'Hide'));
    },
    hideStuff: function() {
      showHide.$target.addClass('js-hidden');
      showHide.$toggle.addClass('closed')
        .text(showHide.$toggle.te
var assert = require('assert');
var _ = require('underscore');
var testutil = require('../framework/util');
var azure = testutil.libRequire('azure-storage');
var blobService;
var queueService;
var tableService;
describe('ServiceProperties', function () {
  before(function (done) {
    blobService = azure.createBlobService()
      .withFilter(new azure.ExponentialRetryPolicyFilter());
    queueService = azure.createQueueService()
      .withFilter(new azure.ExponentialRetryPolicyFilter());
    tableService = azure.createTableService()
      .withFilter(new azure.ExponentialRetryPolicyFilter());
    done();
  });
  describe('fullServiceProperties', function () {   
    it('should get/set complete blob service properties', function (done) {
      var serviceProperties = defaultServiceProperties(true);
      fullServicePropertiesTest(blobService, serviceProperties, done);
    });
    it('should get/set complete queue service properties', function (done) {
      var serviceProperties = defa

      fullServicePropertiesTest(queueService, serviceProperties, done);
    });
    it('should get/set complete table service properties', function (done) {
      var serviceProperties = defaultServiceProperties(false);     
      fullServicePropertiesTest(tableService, serviceProperties, done);
    });
  });
  describe('defaultServiceProperties', function () {   
    it('should write default blob service properties', function (done) {
      var serviceProperties = emptyServiceProperties();
      baseServicePropertiesTest(blobService, serviceProperties, done);
    });
    it('should write default queue service properties', function (done) {
      var serviceProperties = emptyServiceProperties();      
      baseServicePropertiesTest(queueService, serviceProperties, done);
    });
    it('should write default table service properties', function (done) {
      var serviceProperties = emptyServiceProperties();     
      baseServicePropertiesTest(tableService, serviceProperties, done);
 

  });
  describe('overwriteServiceProperties', function () { 
    it('should overwrite with empty blob service properties', function (done) {
      var serviceProperties = mostlyNullServiceProperties();
      overwriteServicePropertiesTest(blobService, serviceProperties, done);
    });
    it('should overwrite with empty queue service properties', function (done) {
      var serviceProperties = mostlyNullServiceProperties();      
      overwriteServicePropertiesTest(queueService, serviceProperties, done);
    });
    it('should overwrite with empty table service properties', function (done) {
      var serviceProperties = mostlyNullServiceProperties();     
      overwriteServicePropertiesTest(tableService, serviceProperties, done);
    });
  });
});
function fullServicePropertiesTest(service, serviceProperties, done){
  service.setServiceProperties(serviceProperties, function (error) {
    assert.equal(error, null);
    var inner = function(){    
      service.getServiceProperties(

        assert.equal(error2, null);
        assertServicePropertiesEqual(serviceProperties2, serviceProperties);
        done();
      });
    };
    setTimeout(inner, 30000);
  });
function overwriteServicePropertiesTest(service, serviceProperties, done){
  service.getServiceProperties(function(error1, serviceProperties1){
    assert.equal(error1, null);
    service.setServiceProperties(serviceProperties, function (error2) {
      assert.equal(error2, null);
      var inner = function(){
        service.getServiceProperties(function (error3, serviceProperties2) {
          assert.equal(error3, null);
          serviceProperties1.Cors = {};
          assertServicePropertiesEqual(serviceProperties2, serviceProperties1);
          done();
        });
      };
      setTimeout(inner, 30000);
    });
  });
function baseServicePropertiesTest(service, serviceProperties, done){
  var expectedServiceProperties = baseServiceProperties();
  service.setServiceProperties(serviceProperties, functi

    assert.equal(error, null);
    var inner = function(){
      service.getServiceProperties(function (error2, serviceProperties2) {
        assert.equal(error2, null);
        assertServicePropertiesEqual(serviceProperties2, expectedServiceProperties);
        done();
      });
    };
    setTimeout(inner, 30000);
  });
function assertServicePropertiesEqual(serviceProperties1, serviceProperties2){
  assert.deepEqual(serviceProperties2.Logging, serviceProperties1.Logging);
  assert.deepEqual(serviceProperties2.HourMetrics, serviceProperties1.HourMetrics);
  assert.deepEqual(serviceProperties2.MinuteMetrics, serviceProperties1.MinuteMetrics);
  sortCorsRuleArrays(serviceProperties1);
  sortCorsRuleArrays(serviceProperties2);
  assert.deepEqual(serviceProperties2.Cors, serviceProperties1.Cors);
function sortCorsRuleArrays(serviceProperties){
  if(serviceProperties && serviceProperties.Cors && serviceProperties.Cors.CorsRule){
    var rules = serviceProperties.Cors.CorsRule;
    rules.f

      if(rule.AllowedOrigins){
        rule.AllowedOrigins.sort();
      }
      if(rule.AllowedMethods){
        rule.AllowedMethods.sort();
      }
      if(rule.AllowedHeaders){
        rule.AllowedHeaders.sort();
      }
      if(rule.ExposedHeaders){
        rule.ExposedHeaders.sort();
      }
    });
  }
} 
function defaultServiceProperties(isBlobService){
  var serviceProperties = {};
  serviceProperties.Logging = {};
  serviceProperties.Logging.Version = '1.0';
  serviceProperties.Logging.Delete = true;
  serviceProperties.Logging.Read = true;
  serviceProperties.Logging.Write = true;
  serviceProperties.Logging.RetentionPolicy = {};
  serviceProperties.Logging.RetentionPolicy.Enabled = true;
  serviceProperties.Logging.RetentionPolicy.Days = 1;
  serviceProperties.HourMetrics = {};
  serviceProperties.HourMetrics.Enabled = true;
  serviceProperties.HourMetrics.Version = '1.0';
  serviceProperties.HourMetrics.IncludeAPIs = true;
  serviceProperties.HourMetrics.RetentionPolicy 

  serviceProperties.HourMetrics.RetentionPolicy.Enabled = true;
  serviceProperties.HourMetrics.RetentionPolicy.Days = 1;
  serviceProperties.MinuteMetrics = {};
  serviceProperties.MinuteMetrics.Enabled = true;
  serviceProperties.MinuteMetrics.Version = '1.0';
  serviceProperties.MinuteMetrics.IncludeAPIs = true;
  serviceProperties.MinuteMetrics.RetentionPolicy = {};
  serviceProperties.MinuteMetrics.RetentionPolicy.Enabled = true;
  serviceProperties.MinuteMetrics.RetentionPolicy.Days = 1;
  serviceProperties.Cors = {};
  var rule = {};
  rule.AllowedOrigins = ['www.ab.com', 'www.bc.com'];
  rule.AllowedMethods = ['GET', 'PUT'];
  rule.AllowedHeaders = ['x-ms-meta-data*', 'x-ms-meta-target*', 'x-ms-meta-xyz', 'x-ms-meta-foo'];
  rule.ExposedHeaders = ['x-ms-meta-data*', 'x-ms-meta-source*', 'x-ms-meta-abc', 'x-ms-meta-bcd'];
  rule.MaxAgeInSeconds = 500;
  serviceProperties.Cors.CorsRule = [rule, rule];
  if(isBlobService){
    serviceProperties.DefaultServiceVersion = '2013-08-15

  }
  return serviceProperties;
function emptyServiceProperties(){
  var serviceProperties = {};
  serviceProperties.Logging = {};
  serviceProperties.HourMetrics = {};
  serviceProperties.MinuteMetrics = {};
  serviceProperties.Cors = {};
  return serviceProperties;
function baseServiceProperties(){
  var serviceProperties = {};
  serviceProperties.Logging = {};
  serviceProperties.Logging.Version = '1.0';
  serviceProperties.Logging.Delete = false;
  serviceProperties.Logging.Read = false;
  serviceProperties.Logging.Write = false;
  serviceProperties.Logging.RetentionPolicy = {};
  serviceProperties.Logging.RetentionPolicy.Enabled = false;
  serviceProperties.HourMetrics = {};
  serviceProperties.HourMetrics.Version = '1.0';
  serviceProperties.HourMetrics.Enabled = false;
  serviceProperties.HourMetrics.RetentionPolicy = {};
  serviceProperties.HourMetrics.RetentionPolicy.Enabled = false;
  serviceProperties.MinuteMetrics = {};
  serviceProperties.MinuteMetrics.Version = '1.0';
  
MyApp.module("Nav", function(Nav, App, Backbone, Marionette, $_, _) {
	App.addRegions({
		sidebarRegion: "section.aside"
	});
	App.addInitializer(function(){
		Nav.navItems = new Nav.NavLinks(App.data.navItems);
		c = new Nav.SideNavController();
		App.vent.trigger("nav:showNav");
	});
	Nav.NavLink = Backbone.Model.extend({});
	Nav.NavLinks = Backbone.Collection.extend({
		model: Nav.NavLink
	});
	Nav.SideNavItemView = Backbone.Marionette.ItemView.extend({
		template: '#sidebar-nav-item',
		tagName: 'li',
		events: {
			'click a' : 'changePage'
		},
		changePage: function(e){
			e.preventDefault();
			App.vent.trigger('nav:changePage', this.model);
				MyApp.vent.trigger('notify:message', 'page changed: ' + this.model.get('text'));
		}
	});
	Nav.SideNavView = Backbone.Marionette.CompositeView.extend({
		template:'#sidebar-nav',
		itemView: Nav.SideNavItemView,
		itemViewContainer: 'ul',
		tagName: 'nav'
	});
	Nav.SideNavController = App.Controller.extend({
		initialize: function(option
requirejs([
    'modernizr',
    'requestAnimationFramePolyfill',
    'jquery',
    'specialController',
    'featuredController',
    'menuController',
    'brandsController',
    'favoritesController',
    'incDecController',
    'cardController',
    'loginController',
    'PasswordController',
    'UpScrollController'
  ],function(
    modernizr, 
    requestAnimationFramePolyfill, 
    jquery, 
    specialController, 
    featuredController, 
    menuController, 
    brandsController, 
    favoritesController,
    incDecController,
    cardController,
    loginController,
    PasswordController,
    UpScrollController
  ){
  
  $(document).ready(function(){
    new specialController();
    new brandsController();
    new menuController();
    new favoritesController();
    new loginController();
    new UpScrollController();
    $('.inc-dec-widget').each(function(index, widget){
      new incDecController(widget);
    });
    new cardController();
    $('.featured-widget').each(fu
$("document").ready(function() {
                $('#navType').click(function(){
                    $('html, body').animate({
                        scrollTop: $("#typography").offset().top -60
                    }, 1500);
                
                 });
                 $('#navButtons').click(function(){
                    $('html, body').animate({
                        scrollTop: $("#buttons").offset().top -60
                    }, 1500);
                
                 });
                 $('#navInputs').click(function(){
                    $('html, body').animate({
                        scrollTop: $("#inputs").offset().top -60
                    }, 1500);
                
                 });
                 $('#navImages').click(function(){
                    $('html, body').animate({
                        scrollTop: $("#imagery").offset().top -40
                    }, 1500);
                
                 });
                 $('#navType').on('click',f

                 	$('#navType').addClass('underlined');
                 	$('#navButtons').removeClass('underlined');
                 	$('#navInputs').removeClass('underlined');
                 	$('#navImages').removeClass('underlined');
                 });
                 $('#navButtons').on('click',function(){
                 	$('#navButtons').addClass('underlined');
                 	$('#navType').removeClass('underlined');
                 	$('#navInputs').removeClass('underlined');
                 	$('#navImages').removeClass('underlined');
                 });
                 $('#navInputs').on('click',function(){
                 	$('#navInputs').addClass('underlined');
                 	$('#navType').removeClass('underlined');
                 	$('#navButtons').removeClass('underlined');
                 	$('#navImages').removeClass('underlined');
                 });
                 $('#navImages').on('click',function(){
                 	$('#navImages').addClass('und
  fetchTournament,
  fetchTournaments,
  fetchAllTournaments,
  fetchPastTournaments,
  fetchPaginatedTournaments,
} from '../utils/drupal';
function fetchingSelectedTournament() {
  return {
    type: 'FETCHING_SELECTED_TOURNAMENT',
  };
function fetchingTournaments() {
  return {
    type: 'FETCHING_TOURNAMENTS',
  };
function postSelectedTournament(tournament) {
  return {
    type: 'POST_SELECTED_TOURNAMENT',
    tournament,
  };
function postTournaments(tournaments) {
  return {
    type: 'POST_TOURNAMENTS',
    tournaments,
  };
export function requestSelectedTournament(id) {
  return (dispatch) => {
    dispatch(fetchingSelectedTournament());
    return fetchTournament(id)
      .then(tournament => dispatch(postSelectedTournament(tournament)));
  };
export function requestAllTournaments(limit) {
  return (dispatch) => {
    dispatch(fetchingTournaments());
    return fetchAllTournaments(limit)
      .then((feed) => {
        dispatch(postTournaments(feed));
      });
  };
export
var MidiMessage                 = require('./Message/MidiMessage'),
    NoteOffMessage              = require('./Message/NoteOffMessage'),
    NoteOnMessage               = require('./Message/NoteOnMessage'),
    PolyphonicAftertouchMessage = require('./Message/PolyphonicAftertouchMessage'),
    ControlChangeMessage        = require('./Message/ControlChangeMessage'),
    ProgramChangeMessage        = require('./Message/ProgramChangeMessage'),
    ChannelAftertouchMessage    = require('./Message/ChannelAftertouchMessage'),
    PitchBendMessage            = require('./Message/PitchBendMessage'),
    SystemExclusiveMessage      = require('./Message/SystemExclusiveMessage'),
    QuarterFrameMessage         = require('./Message/QuarterFrameMessage'),
    SongPositionMessage         = require('./Message/SongPositionMessage'),
    SongSelectMessage           = require('./Message/SongSelectMessage'),
    SystemMessage               = require('./Message/SystemMessage'),
  
    Readable         

    util                        = require('util')
  ;
var MessageGenerator = module.exports = function MessageGenerator() {
    Readable.call(this, {objectMode: true});
};
util.inherits(MessageGenerator, Readable);
MessageGenerator.prototype._pushMessage = function(message) {
  this.push(message.toBuffer());
  this.emit('message', message);
  return message;
};
MessageGenerator.prototype._read = function() {
  this.readable = true;
};
MessageGenerator.prototype.noteOff = function(channel, note) {
  return this._pushMessage(new NoteOffMessage(channel, note));
};
MessageGenerator.prototype.noteOn = function(channel, note, velocity) {
  return this._pushMessage(new NoteOnMessage(channel, note, velocity));
};
MessageGenerator.prototype.polyphonicAftertouch = function(channel, note, pressure) {
  return this._pushMessage(new PolyphonicAftertouchMessage(channel, note, pressure));
};
MessageGenerator.prototype.controlChange = function(channel, control, value) {
  return this._pushMessage(new

};
MessageGenerator.prototype.programChange = function(channel, program) {
  return this._pushMessage(new ProgramChangeMessage(channel, program));
};
MessageGenerator.prototype.channelAftertouch = function(channel, pressure) {
  return this._pushMessage(new ChannelAftertouchMessage(channel, pressure));
};
MessageGenerator.prototype.pitchBend = function(channel, pitch) {
  return this._pushMessage(new PitchBendMessage(channel, pitch));
};
MessageGenerator.prototype.systemExclusive = function(manufacturerId, deviceId, data) {
  return this._pushMessage(new SystemExclusiveMessage(manufacturerId, deviceId, data));
};
MessageGenerator.prototype.quarterFrame = function(data) {
  return this._pushMessage(new QuarterFrameMessage(data));
};
MessageGenerator.prototype.songPosition = function(position) {
  return this._pushMessage(new SongPositionMessage(position));
};
MessageGenerator.prototype.songSelect = function(song) {
  return this._pushMessage(new SongSelectMessage(song));
};
MessageGene
'use strict';
module.exports = function(app, callback) {
  app.post('/', function(req, res, next) {
    if (!req.body || !req.body.payload || !isArray(req.body.payload)) {
      callback(new Error('JSON parsing failed'), req, res, next);
    }
    else {
      var shows = req.body.payload;
      var showsFiltered = shows.filter(function(show){
        if (validShowObject(show))
          return (show.drm==true && show.episodeCount>0)
      }); 
      
      var showsFormatted = [];
      showsFiltered.forEach(function(show) {
        var showOutputFormat = { 
          image: (show.image && show.image.showImage) ? show.image.showImage : '',
          slug: (show.slug) ? show.slug : '',
          title: (show.title) ? show.title: ''
        };
        showsFormatted.push(showOutputFormat)
      });
      res.send({ response: showsFormatted });
    }
  });
function validShowObject(show) {
  return show.hasOwnProperty('drm') && show.hasOwnProperty('episodeCount');
function isArray(obj) {

const UsersApi = require('./app/api/usersapi');
const TweetApi = require('./app/api/tweetapi');
const Assets = require('./app/controllers/assets');
module.exports = [
  { method: 'GET', path: '/api/users', config: UsersApi.find },
  { method: 'GET', path: '/api/users/{id}', config: UsersApi.findOne },
  { method: 'GET', path: '/api/users/{id}/follow', config: UsersApi.findOneWithFollowed },
  { method: 'POST', path: '/api/users/{id}/follow', config: UsersApi.followUser },
  { method: 'POST', path: '/api/users/{id}/unfollow', config: UsersApi.unfollowUser },
  { method: 'POST', path: '/api/users', config: UsersApi.create },
  { method: 'POST', path: '/api/users/{id}', config: UsersApi.updateUser },
  { method: 'POST', path: '/api/users/{id}/password', config: UsersApi.resetUserPassword },
  { method: 'DELETE', path: '/api/users/{id}', config: UsersApi.deleteOne },
  { method: 'DELETE', path: '/api/users', config: UsersApi.deleteAll },
  { method: 'GET', path: '/api/tweets', config: Twee
var myScroll;
function  loaded(){
      myScroll = new iScroll('page-content',{
    	  useTransform: false,
    	  hScrollbar:false,
    	  vScrollbar: false
         });
            
        
/*====å¹´ææ¥å¨å±åé,å¯ç¨äºéæ©å¹´ææ¥ï¼ä»èå¾å°ä¸åå¹´æçæè§å¾*/
var showYear = "";  
var showMonth = ""; 
var showDay = "";
var showWeek = "";
var showLunar= "";
/*====å®ç°æè§å¾*/
$(function() {
	loaded();
	/*====å®ç°æè§å¾*/
	showYear=getURLParam("showYear");
	showMonth=getURLParam("showMonth");
	showDay=getURLParam("showDay");
	if(showYear==""||showMonth==""||showDay==""){
		var dt = new Date();  
	    showYear=dt.getFullYear();
	    showMonth=dt.getMonth()+1;
	    showDay=dt.getDate();
	    showWeek=weekday(dt);
	    showLunar=lunarDay1(showYear,(showMonth-1),showDay);
	    showYearMonthDay(showYear,showMonth,showDay);
	    $("#week_lunar").html(showWeek+' '+showLunar);
	    showDayViewList(dt);
	}else{
		var dt=new Date(showYear,(showMonth-1),showDay);
		 showYear=dt.getFullYear();
		 showMonth=dt.getMonth()+1;
		 showDay=dt.g

		 showWeek=weekday(dt);
		 showLunar=lunarDay1(showYear,(showMonth-1),showDay);
		 showYearMonthDay(showYear,showMonth,showDay);
		 $("#week_lunar").html(showWeek+' '+showLunar);		 
		 showDayViewList(dt);
	}
	$("#next_day").bind("touchstart", function() {
    	var date = new Date(showYear,(showMonth-1),showDay);
    	date.setDate(date.getDate()+1);
    	showYear=date.getFullYear();
    	showMonth=date.getMonth()+1;
    	showDay=date.getDate();
    	showWeek=weekday(date);
        showLunar=lunarDay1(showYear,(showMonth-1),showDay);
        showYearMonthDay(showYear,showMonth,showDay);
		$("#week_lunar").html(showWeek+' '+showLunar);
		showDayViewList(date);
	});
	/*====æ¨å¤©*/
	$("#last_day").bind("touchstart", function() {
    	var date = new Date(showYear,(showMonth-1),showDay);
    	date.setDate(date.getDate()-1);
    	showYear=date.getFullYear();
    	showMonth=date.getMonth()+1;
    	showDay=date.getDate();
    	showWeek=weekday(date);
        showLunar=lunarDay1(showYear,(showMon

        showYearMonthDay(showYear,showMonth,showDay);
		$("#week_lunar").html(showWeek+' '+showLunar);
		showDayViewList(date);
	});
	$("#page-content").bind("swiperight", function(){
		var date = new Date(showYear,(showMonth-1),showDay);
    	date.setDate(date.getDate()-1);
    	showYear=date.getFullYear();
    	showMonth=date.getMonth()+1;
    	showDay=date.getDate();
    	showWeek=weekday(date);
        showLunar=lunarDay1(showYear,(showMonth-1),showDay);
        showYearMonthDay(showYear,showMonth,showDay);
		$("#week_lunar").html(showWeek+' '+showLunar);
		showDayViewList(date);
		
		
	});
	$("#page-content").bind("swipeleft", function(){
		var date = new Date(showYear,(showMonth-1),showDay);
    	date.setDate(date.getDate()+1);
    	showYear=date.getFullYear();
    	showMonth=date.getMonth()+1;
    	showDay=date.getDate();
    	showWeek=weekday(date);
        showLunar=lunarDay1(showYear,(showMonth-1),showDay);
        showYearMonthDay(showYear,showMonth,showDay);
		$("#week_lun

		showDayViewList(date);
	});
	$("#newSchedule_btn").bind("click",function(){
		var date=$("#year_month_day").html();
		window.location.href="../index/newSchedule.html?date="+date;
	});
	$(".rishitu_list").live("click",function(){
		activityId=$(this).attr("data-activityId");
		window.location.href="../index/dayViewDetail.html?activityId="+activityId;
	});
});
function showYearMonthDay(showYear,showMonth,showDay){
	var month=showMonth;
	var day=showDay;
	if(month<10){month='0'+showMonth;}
	if(day<10){day='0'+showDay;}
	$("#year_month_day").html(showYear+'-'+month+'-'+day);
function showDayViewList(date){
	Activity.findByDate(date, getResult);
	function getResult(result) {
		var dayViewHtml="";
		if(result.length != 0){
            for(var i=0;i<result.length;i++){
            	dayViewHtml+='<div class="rishitu_list_line"></div><table class="rishitu_list" data-activityId="'+result[i].activityId;
            	if(result[i].title==""){
            		dayViewHtml+='"><tr><td width="10%" hei

            	}else{           		
            		dayViewHtml+='"><tr><td width="10%" height="40"><img src="../images/rishitu_17.png"45></td><td width="90%" height="100%" style="padding-left:15px">'+result[i].title;
            	}
            	if(result[i].allDay==0 || result[i].allDay=="0"){            		
            		dayViewHtml+='</td></tr><tr><td width="10%" height="40"></td><td width="90%" height="100%" style="padding-left:15px"><span>'+result[i].startTime+" ~ "+result[i].endTime+'<span></td></tr></table>';
            	}else{
            		dayViewHtml+='</td></tr><tr><td width="10%" height="40"></td><td width="90%" height="100%" style="padding-left:15px"><span>'+'00:00 ~ 24:00 ï¼å¨å¤©ï¼'+'<span></td></tr></table>';
            		
            	}
    		    
    		    
            }
            $("#showViewList").html(dayViewHtml);
            myScroll.refresh();
		}else{
			$("#showViewList").html('<div class="blank_page"><p><img src="../images/dog.png"></p><p>ä»å¤©æ²¡ææ¥ç¨</p></div>');
			mySc
export const login = (userData) => {
	dispatch(AUTH.LOGIN, userData)
	return auth
		.login(userData)
		.then((token)=> {
			dispatch(AUTH.LOGIN_SUCCESS, { token })
		})
		.catch((error) => {
			console.error(error)
			dispatch(AUTH.LOGIN_FAILED, null, error)
		})	
export const logout = () => {
	dispatch(AUTH.LOGOUT)
	return auth
		.logout()
		.then(()=> {
			dispatch(AUTH.LOGOUT_SUCCESS, { })
		})
		.catch((error) => {
			console.error(error)
			dispatch(AUTH.LOGIN_FAILED, null, error)
		})	
export const signup = (userData) => {
	dispatch(AUTH.SIGNUP, userData)
	return auth
		.signup(userData)
		.then((token)=> {
			dispatch(AUTH.SIGNUP_SUCCESS, { token })
		})
		.catch((error) => {
			console.error(error)
			dispatch(AUTH.SIGNUP_FAILED, null, error)
		})	
export const refreshToken = () => {
	dispatch(AUTH.REFRESH)
	return auth
		.refreshToken()
		.then((token)=> {
			dispatch(AUTH.REFRESH_SUCCESS, { token })
		})
		.catch((error) => {
			console.error(error)
			dispatch(AUTH.REFRESH_F
export default {
    select( index )
    {
        Dispatcher.dispatch( {
            actionType: constants.SELECT,
            index: index
        } );
    },
    addSong( data )
    {
        Dispatcher.dispatch( {
            actionType: constants.ADD_SONG,
            data: data
        } );
    },
    addSongs( data )
    {
        if ( data.length > 0 )
        {
            Dispatcher.dispatch( {
                actionType: constants.ADD_SONGS,
                data: data
            } );
        }
    },
    removeSong( index )
    {
        Dispatcher.dispatch( {
            actionType: constants.REMOVE_SONG,
            index: index
        } );
    },
    removeAll()
    {
        Dispatcher.dispatch( {
            actionType: constants.REMOVE_ALL
        } );
    },
    stop()
    {
        Dispatcher.dispatch( {
            actionType: constants.STOP
        } );
    },
    togglePlay()
    {
        Dispatcher.dispatch( {
            actionType: constants.PLAY
        } )
'use strict';
app.controller('showListCtrl', function($scope, $resource, settings) {
  $scope.tiles = [];
  $scope.predicate = 'show.id';
  $scope.showListGrid = {
    margins: [20, 20],
    columns: 12,
    draggable: {
      handle: 'h3'
    },
    resizable: {
      enabled: false
    }
  };
  $scope.setShow = function(show) {
    $scope.selectedShow = show;
  };
  $scope.createShow = function() {
    var show = {
      name: $scope.newShow
    };
    $resource(settings.get('rest.templ.show-update')).save(
      null,
      show,
      function(data) {
        $scope.selectedShow = data;
        var tile = {
          show: data,
          sizeX: 2,
          sizeY: 2
        }
        $scope.tiles.push(data);
        $scope.openAddShow = false;
        $scope.newShow = '';
      },
      function(data, status) {
        throw {
          message: 'Could not save show',
          status: status
        }
      });
  };
  function init() {
    $resource(settings.get('rest.templ.show-
angular.module('pagesData', [])
  .value('NG_PAGES', {
  "api": {
    "name": "API Reference",
    "area": "api",
    "path": "api"
  },
  "error": {
    "name": "Error Reference",
    "area": "error",
    "path": "error"
  },
  "misc/contribute": {
    "name": "Develop",
    "area": "misc",
    "path": "misc/contribute"
  },
  "misc/downloading": {
    "name": "Downloading",
    "area": "misc",
    "path": "misc/downloading"
  },
  "misc/faq": {
    "name": "FAQ",
    "area": "misc",
    "path": "misc/faq"
  },
  "misc": {
    "name": "Miscellaneous",
    "area": "misc",
    "path": "misc"
  },
  "misc/started": {
    "name": "Getting Started",
    "area": "misc",
    "path": "misc/started"
  },
  "api/configuration": {
    "name": "configuration",
    "area": "api",
    "path": "api/configuration"
  },
  "api/config/object/ConfigPage": {
    "name": "ConfigPage",
    "area": "api",
    "path": "api/config/object/ConfigPage"
  },
  "api/config/object/RoutingApi": {
    "name": "Routin

    "area": "api",
    "path": "api/config/object/RoutingApi"
  },
  "api/config/provider/RoutingApi": {
    "name": "RoutingApi",
    "area": "api",
    "path": "api/config/provider/RoutingApi"
  },
  "api/controller": {
    "name": "controller",
    "area": "api",
    "path": "api/controller"
  },
  "api/controllers/service/AuthCtrl": {
    "name": "AuthCtrl",
    "area": "api",
    "path": "api/controllers/service/AuthCtrl"
  },
  "api/App": {
    "name": "App",
    "area": "api",
    "path": "api/App"
  },
  "api/controllers/service/MainCtrl": {
    "name": "MainCtrl",
    "area": "api",
    "path": "api/controllers/service/MainCtrl"
  },
  "api/controllers/service/NavbarCtrl": {
    "name": "NavbarCtrl",
    "area": "api",
    "path": "api/controllers/service/NavbarCtrl"
  },
  "api/controllers/service/RootCtrl": {
    "name": "RootCtrl",
    "area": "api",
    "path": "api/controllers/service/RootCtrl"
  },
  "api/factory/service/RestHttpInterceptor": {
    "name": "RestHttpInte

    "area": "api",
    "path": "api/factory/service/RestHttpInterceptor"
  },
  "api/factory/function/$httpProvider": {
    "name": "$httpProvider",
    "area": "api",
    "path": "api/factory/function/$httpProvider"
  },
  "api/service": {
    "name": "service",
    "area": "api",
    "path": "api/service"
  },
  "api/services/provider/LoginAuthProvider": {
    "name": "LoginAuthProvider",
    "area": "api",
    "path": "api/services/provider/LoginAuthProvider"
  },
  "api/services/service/LoginAuth": {
    "name": "LoginAuth",
    "area": "api",
    "path": "api/services/service/LoginAuth"
  },
  "api/services/provider/NavigationProvider": {
    "name": "NavigationProvider",
    "area": "api",
    "path": "api/services/provider/NavigationProvider"
  },
  "api/services/service/Navigation": {
    "name": "Navigation",
    "area": "api",
    "path": "api/services/service/Navigation"
  },
  "api/services/provider/NotificationProvider": {
    "name": "NotificationProvider",
    "area": "
export function startGroupCreation() {
    return function(dispatch) {
        dispatch({type: "STARTING_NEW_GROUP"});
    }
export function cancelGroupCreation() {
    return function(dispatch) {
        dispatch({type: "STOP_NEW_GROUP"});
    }
export function createGroup(newGroupMembers) {
    return function(dispatch) {
        dispatch({type: "CREATING_GROUP"});
    }
export function selectNewMember(memberId) {
    return function(dispatch) {
        dispatch({type: "ADDING_NEW_MEMBER", payload: memberId});
    }
export function removeNewMember(memberId) {
    return function(dispatch) {
        dispatch({type: "REMOVING_NEW_MEMBER", payload: memberId});
    }
export function changeGroupName(chatId, newGroupName) {
    return function(dispatch) {
        dispatch({type: "CHANGING_GROUP_NAME"});
        axios.put("/api/group/" + chatId, {groupName: newGroupName})
        .then(function(groupResponse) {
            if (groupResponse.status === 200) {
                var changedGroup
$(document).ready(function () {
    $('[id^="show_raw_"]').click(function (event) {
        var crontab = event.target.id.replace('show_raw_', '');
        $('#raw_' + crontab).show();
        $('#show_raw_' + crontab).hide();
        $('#hide_raw_' + crontab).show();
        event.preventDefault();
    });
    $('[id^="hide_raw_"]').click(function (event) {
        var crontab = event.target.id.replace('hide_raw_', '');
        $('#raw_' + crontab).hide();
        $('#show_raw_' + crontab).show();
        $('#hide_raw_' + crontab).hide();
        event.preventDefault();
    });
    $('[id^="show_deleted_"]').click(function (event) {
        var crontab = event.target.id.replace('show_deleted_', '');
        $('.deleted_' + crontab).show();
        $('#table_' + crontab).show();
        $('#show_deleted_' + crontab).hide();
        $('#hide_deleted_' + crontab).show();
        event.preventDefault();
    });
    $('[id^="hide_deleted_"]').click(function (event) {
        var crontab = 

        $('.deleted_' + crontab).hide();
        $('#show_deleted_' + crontab).show();
        $('#hide_deleted_' + crontab).hide();
        event.preventDefault();
    });
    $('#show_all_raw').click(function (event) {
        $('[id^="raw_"]').show();
        $('[id^="show_raw_"]').hide();
        $('[id^="hide_raw_"]').show();
        $('#show_all_raw').hide();
        $('#hide_all_raw').show();
        event.preventDefault();
    });
    $('#hide_all_raw').click(function (event) {
        $('[id^="raw_"]').hide();
        $('[id^="show_raw_"]').show();
        $('[id^="hide_raw_"]').hide();
        $('#show_all_raw').show();
        $('#hide_all_raw').hide();
        event.preventDefault();
    });
    $('#show_all_table').click(function (event) {
        $('[id^="table_"]').show();
        $('[class^="deleted_"]').hide();
        $('[id^="show_deleted_"]').show();
        $('[id^="hide_deleted_"]').hide();
        $('#show_all_table').hide();
        $('#hide_all_table').show();
"use strict";
var AccountsController = require('cms/view/page/account/AccountsController');
var AppConfigurationController = require('cms/view/page/home/AppConfigurationWidget/AppConfigurationController');
var BucketsController = require('cms/view/page/buckets/BucketsController');
var ChangePasswordController = require('cms/view/page/forgotPassword/ChangePasswordController');
var ContentFieldController = require('cms/view/page/contentField/contentNode/ContentFieldController');
var ContentHeaderController = require('cms/view/page/header/ContentHeaderController');
var ContentLibraryController = require('cms/view/page/home/ContentLibraryWidget/ContentLibraryController');
var ContentListsController = require('cms/view/page/contentLists/ContentListsController');
var ContentNodeListController = require('cms/view/page/contentNode/ContentNodeListController');
var ContentNodeEditController = require('cms/view/page/contentNode/ContentNodeEditController');
var ContentTypesController = require('cm

var ContentTypeFieldController = require('cms/view/page/contentField/contentType/ContentTypeFieldController');
var ContentTypeListController = require('cms/view/page/contentType/ContentTypeListController');
var DatePickerController = require('cms/view/page/contentNode/DatePickerController');
var DeniedController = require('cms/view/page/access/DeniedController');
var ForgotPasswordController = require('cms/view/page/forgotPassword/ForgotPasswordController');
var HeaderController = require('cms/view/page/header/HeaderController');
var HomeController = require('cms/view/page/home/HomeController');
var MemberController = require('cms/view/page/members/MemberController');
var MembersController = require('cms/view/page/members/MembersController');
var SignInController = require('cms/view/page/access/SignInController');
var SignOutController = require('cms/view/page/access/SignOutController');
var SignUpController = require('cms/view/page/signUp/SignUpController');
var SignUpRequestsControl

var TimePickerController = require('cms/view/page/contentNode/TimePickerController');
var UserController = require('cms/view/page/user/UserController');
var UserProfileEditController = require('cms/view/page/userprofile/UserProfileEditController');
var UsersController = require('cms/view/page/user/UsersController');
angular.module('cms.pages', []).run(function(){
	})
	.controller('accountsController', AccountsController)
	.controller('appConfigurationController', AppConfigurationController)
	.controller('bucketsController', BucketsController)
	.controller('changePasswordController', ChangePasswordController)
	.controller('contentFieldController', ContentFieldController)
	.controller('contentHeaderController', ContentHeaderController)
	.controller('contentLibraryController', ContentLibraryController)
	.controller('contentListsController', ContentListsController)
	.controller('contentNodeEditController', ContentNodeEditController)
	.controller('contentNodeListController', ContentNodeLis

	.controller('contentTypesController', ContentTypesController)
	.controller('contentTypeFieldController', ContentTypeFieldController)
	.controller('contentTypeListController', ContentTypeListController)
	.controller('DatepickerDemoCtrl', DatePickerController)
	.controller('deniedController', DeniedController)
	.controller('forgotPasswordController', ForgotPasswordController)
	.controller('headerController', HeaderController)
	.controller('homeController', HomeController)
	.controller('memberController', MemberController)
	.controller('membersController', MembersController)
	.controller('signInController', SignInController)
	.controller('signOutController', SignOutController)
	.controller('signUpController', SignUpController)
	.controller('signUpRequestsController', SignUpRequestsController)
	.controller('TimepickerDemoCtrl', TimePickerController)
	.controller('userController', UserController)
	.controller('userProfileEditController', UserProfileEditController)
	.controller('usersContr
var class_k_e_1_1_message =
    [ "EntityMessage", "struct_k_e_1_1_message_1_1_entity_message.html", "struct_k_e_1_1_message_1_1_entity_message" ],
    [ "KeyMessage", "struct_k_e_1_1_message_1_1_key_message.html", "struct_k_e_1_1_message_1_1_key_message" ],
    [ "MouseMessage", "struct_k_e_1_1_message_1_1_mouse_message.html", "struct_k_e_1_1_message_1_1_mouse_message" ],
    [ "SizeMessage", "struct_k_e_1_1_message_1_1_size_message.html", "struct_k_e_1_1_message_1_1_size_message" ],
    [ "TestMessage", "struct_k_e_1_1_message_1_1_test_message.html", "struct_k_e_1_1_message_1_1_test_message" ],
    [ "Type", "class_k_e_1_1_message.html#ae23c611b2486638a6b618a779892701c", [
      [ "Null", "class_k_e_1_1_message.html#ae23c611b2486638a6b618a779892701cab0657fd685d011be129db14832a0b6cb", null ],
      [ "Test", "class_k_e_1_1_message.html#ae23c611b2486638a6b618a779892701ca88639b128a5a40d2b6db209520209923", null ],
      [ "Resized", "class_k_e_1_1_message.html#ae23c611b2486638a6b618a7798

      [ "KeyPressed", "class_k_e_1_1_message.html#ae23c611b2486638a6b618a779892701ca3842e89c11eec4b3174e4d3acfa22e91", null ],
      [ "KeyReleased", "class_k_e_1_1_message.html#ae23c611b2486638a6b618a779892701cacf1ed7fcf8ce0f34e6d7b24655af0080", null ],
      [ "MouseMoved", "class_k_e_1_1_message.html#ae23c611b2486638a6b618a779892701cac1684a64279138a9b984fcde18fa2e05", null ],
      [ "EntityDestoryed", "class_k_e_1_1_message.html#ae23c611b2486638a6b618a779892701cad83145fd7b20b8590b38e64d263a8741", null ],
      [ "Count", "class_k_e_1_1_message.html#ae23c611b2486638a6b618a779892701caa2974fda7e4f509d5d45017b1b21dcb9", null ]
    ] ],
    [ "Message", "class_k_e_1_1_message.html#a9145114f45f420d6fc7d87254f73ea30", null ],
    [ "Message", "class_k_e_1_1_message.html#a37922777297439f35900624d652c55d4", null ],
    [ "entity", "class_k_e_1_1_message.html#a37c7401df9c0a1cab79ddf2533f4c729", null ],
    [ "key", "class_k_e_1_1_message.html#a003f2a01708a3a6b174e8f31ad8adacc", null ],
    
/**
 * fixedNav - jQuery plugin that fixates a horizontal navigation element
 *            as soon as it hits the top by scrolling
 * 
 * 2012 by Christian Doebler <info@christian-doebler.net>
 * 
 * Copyright 2012 - licensed under the MIT License
 * Do not remove this copyright notice
 * 
 * Thanks,
 * Christian
 */(function(a){var b={navEl:!1,navCloneEl:!1,navClonePrevEl:!1,navTop:!1,prevCssPos:!1,setNavTop:function(){b.navCloneEl&&(b.navTop=b.navClonePrevEl.offset().top+b.navClonePrevEl.height()+2)},cloneNavEl:function(){a.each(b.navEl,function(c,d){var e=a(d),f=e.clone();f.children().hide(),f.hide(),e.before(f),b.navCloneEl=f,b.navClonePrevEl=b.navCloneEl.prev(":first"),b.navClonePrevEl.length||(b.navClonePrevEl=b.navCloneEl),b.navTop=b.navEl.offset().top+2})},toggleNavMode:function(){var c=a(window).scrollTop(),d=b.navEl;c>b.navTop&&b.navTop>0?(d.prev().show(),d.css({position:"fixed",top:0})):(b.navCloneEl&&d.prev().hide(),d.css({position:"relative"}));var e=d.css("position");e!=b
define([
  'aeris/util',
  'aeris/geolocate/html5geolocateservice',
  'aeris/geolocate/freegeoipgeolocateservice'
], function(_, HTML5GeolocateService, FreeGeoIPGeolocateService) {
  /**
   * Helper for creating a supported {aeris.geolocate.GeolocateServiceInterface}
   *
   * @class aeris.geolocate.GeolocateServiceResolver
   *
   * @constructor
   *
   * @param {Object=} opt_options
   * @param {function():aeris.geolocate.GeolocateServiceInterface} opt_options.GeolocateService
   *        Defaults to {aeris.geolocate.HTML5GeolocateService}.
   * @param {function():aeris.geolocate.GeolocateServiceInterface} opt_options.FallbackGeolocateService
   *        Defaults to {aeris.geolocate.FreeGeoIPGeolocateService}.
   * @param {aeris.geolocate.options.GeolocateServiceOptions} opt_options.geolocateServiceOptions
  */
  var GeolocateServiceResolver = function(opt_options) {
    var options = _.defaults(opt_options || {}, {
      GeolocateService: HTML5GeolocateService,
      FallbackGeoloca

      geolocateServiceOptions: {}
    });
    /**
     * @property GeolocateService_
     * @private
     * @type {function():aeris.geolocate.GeolocateServiceInterface}
    */
    this.GeolocateService_ = options.GeolocateService;
    /**
     * @property FallbackGeolocateService_
     * @private
     * @type {function():aeris.geolocate.GeolocateServiceInterface}
    */
    this.FallbackGeolocateService_ = options.FallbackGeolocateService;
    /**
     * @property geolocateServiceOptions_
     * @private
     * @type {aeris.geolocate.options.GeolocateServiceOptions}
    */
    this.geolocateServiceOptions_ = options.geolocateServiceOptions;
  };
  /**
   * Return an instance of the GeolocateService option,
   * or, if it's not supported, the FallbackGeolocateService
   *
   * @method resolveService
   * @return {aeris.geolocate.GeolocateServiceInterface}
   */
  GeolocateServiceResolver.prototype.resolveService = function() {
    return this.GeolocateService_.isSupported() ?
      new
'use strict';
var Service = require('../models/Service.js'),
    Injct = require('injct'),
    _ = require('underscore'),
    Constants = require('../util/Constants.js'),
    Logger = require('../util/Logger.js'),
    Util = require('util');
/**
 * ServiceService constructor
 *
 * @constructor
 */
var ServiceService = function (serviceRepository) {
    this.serviceRepository = serviceRepository;
    Injct.apply(this);
};
module.exports = ServiceService;
/**
 * Get service from mongo
 *
 * @param id string
 * @param callback
 */
ServiceService.prototype.getServiceById = function (_id, callback) {
    this.serviceRepository.getServiceById(_id, callback);
};
/**
 * Get services by account id
 *
 * @param account_id string
 * @param callback
 */
ServiceService.prototype.getServicesByAccountId = function (account_id, callback) {
    this.serviceRepository.getServicesByAccountId(account_id, callback);
};
/**
 * Update a service
 *
 * @param {Service} service
 * @param {Function} callback
 */
$(document).ready(function(){
	$("#typeSelect").bind("change",function(){
		init_nav_type($(this).val());	
	});
	$("#mobileTypeSelect").bind("change",function(){	
		init_nav_cfg($(this).val());		
		init_nav_type($("#typeSelect").val());
	});
	init_nav_cfg($("#mobileTypeSelect").val());
	init_nav_type($("#typeSelect").val());
});
function init_nav_cfg(type)
	var navs = null;
	for(nav_key in nav_cfg)
	{
		nav_cfg_item = nav_cfg[nav_key];
		if(nav_cfg_item['mobile_type']==type)
		{
			navs = nav_cfg_item['nav'];
			break;
		}
	}
	if(type==0)
	{
		$("#advposition_tr").show();
	}
	else
	{
		$("#advposition_tr").hide();
		$("#advposition").val(0);
	}
	$("#typeSelect").empty();
	for(nav_key in navs)
	{
		nav_item = navs[nav_key];
		
		var select_str = "";
		if(nav_item['type']==adv_type)
		{
			select_str = "selected='selected'";
		}
		$("#typeSelect").append("<option value='"+nav_item['type']+"' "+select_str+" >"+nav_item['name']+"</option>");
	}
function init_nav_type(type)
	$("#type").hide
angular.module('icon.services', [])
      .service('AnalyticsLogger', [
          'Endpoint',
          require('./AnalyticsLogger.service.js')
      ])
      .service('By', [
          'DISEASE_YC_ORDER',
          require('./By.service.js')
      ])
      .service('GroupsOf', [require('./GroupsOf.service.js')])
      .service('EditReviewService', [require('./EditReview.service.js')])
      .service('Endpoint', [
          '$http', '$q', '$translate',
          'ImmunizationRecordService', 'TokenHandler',
          'Agent', 'Disease', 'Immunization', 'Lot', 'Trade',
          'ICON_API',
          require('./Endpoint.service.js')
      ])
      .service('FileUploadHandler', [
          '$http', '$q', 'FileUploader', 'TokenHandler', 'ICON_API', 'ICON_FILE_UPLOAD',
          require('./FileUploadHandler.service.js')
      ])
      .service('ImmunizationRecordService', [
          'ImmunizationRecordSubmission',
          require('./ImmunizationRecord.service.js')
      ])
      .service

          'Multitenancy', 'TokenHandler', 'ImmunizationRecordService', 'moment',
          'Patient', 'Immunization', 'Agent', 'Trade', 'Disease',
          require('./ImmunizationRecordConverter.service.js')
      ])
      .service('FhirRecordConverter', [
        '$q',
        'Endpoint',
        'Agent', 'Disease', 'Immunization', 'Lot', 'Patient', 'Recommendation', 'Trade',
        'ICON_ERROR',
        require('./FhirRecordConverter.service.js')
      ])
      .service('Multitenancy', [
          '$http', '$q',
          require('./Multitenancy.service.js')
      ])
      .service('TokenHandler', [
          '$http', '$q', '$interval', 'jwtHelper', 'Token', 'ICON_API', 'ICON_TOKEN', 'ICON_EVENT',
          require('./TokenHandler.service.js')
      ])
      .service('ToasterChoiceService', [require('./ToasterChoice.service.js')])
      .service('Localization', [
          '$q', '$timeout', '$rootScope', 'tmhDynamicLocale',
          require('./localization/Localization.service.js
/**
 * Created by Ben on 8/10/2015.
 */
var navHeight = 45;
var placeholderHeight = 10;
$(document).ready(function(){
    var viewportHeight = $(window).height();
    var initialNavTop = $('#navPlaceholder').offset().top - $(document).scrollTop();
    StickNav(initialNavTop);
    $(window).scroll(function(){
        var navBarTop = $('#navPlaceholder').offset().top - $(document).scrollTop();
        StickNav(navBarTop);
    })
    function StickNav(topOfNav){
        if(topOfNav <= navHeight){
            $('#stickyNav').addClass('stickToTop');
            $('#navPlaceholder').css('height', '45px');
        }
        if(topOfNav > navHeight){
            $('#stickyNav').removeClass('stickToTop');
            $('#navPlaceholder').css('height', '10px');
        }
        if(topOfNav - placeholderHeight >= viewportHeight){
            $('#stickyNav').addClass('stickToBottom');
        }
        if(topOfNav - placeholderHeight < viewportHeight) {
            $('#stickyNav').removeClass('st
var searchData=
  ['mbox',['Mbox',['../class_mbox.html',1,'']]],
  ['mboxes',['Mboxes',['../class_mboxes.html',1,'']]],
  ['mboxproducer',['MboxProducer',['../class_mbox_producer.html',1,'']]],
  ['message',['Message',['../class_message.html',1,'']]],
  ['message_5fs',['message_s',['../struct_message_1_1message__s.html',1,'Message']]],
  ['messageackapply',['MessageAckApply',['../class_message_ack_apply.html',1,'']]],
  ['messageackdispatch',['MessageAckDispatch',['../class_message_ack_dispatch.html',1,'']]],
  ['messageapply',['MessageApply',['../class_message_apply.html',1,'']]],
  ['messagebatchserialized',['MessageBatchSerialized',['../class_message_batch_serialized.html',1,'']]],
  ['messagecommitrollback',['MessageCommitRollback',['../class_message_commit_rollback.html',1,'']]],
  ['messagedeadlock',['MessageDeadlock',['../class_message_deadlock.html',1,'']]],
  ['messagedispatch',['MessageDispatch',['../class_message_dispatch.html',1,'']]],
  ['messageserialized',['MessageSerial
var message = require('./odin.message.js');
var entity = require('./chat.entity.js');
var moment = require('moment');
var HeartbeatMessage = function() {
	message.Message.apply(this, arguments);
	this.uid = undefined;
};
HeartbeatMessage.prototype = new message.Message();
HeartbeatMessage.prototype.constructor = HeartbeatMessage;
exports.HeartbeatMessage = HeartbeatMessage;
var ReqLoginMessage = function() {
	message.Message.apply(this, arguments);
	this.uid = undefined;
	this.dummy = undefined;
};
ReqLoginMessage.prototype = new message.Message();
ReqLoginMessage.prototype.constructor = ReqLoginMessage;
exports.ReqLoginMessage = ReqLoginMessage;
var ReqLogoutMessage = function() {
	message.Message.apply(this, arguments);
	this.uid = undefined;
};
ReqLogoutMessage.prototype = new message.Message();
ReqLogoutMessage.prototype.constructor = ReqLogoutMessage;
exports.ReqLogoutMessage = ReqLogoutMessage;
var ReqJoinMessage = function() {
	message.Message.apply(this, arguments);
	this.uid =

	this.group = undefined;
};
ReqJoinMessage.prototype = new message.Message();
ReqJoinMessage.prototype.constructor = ReqJoinMessage;
exports.ReqJoinMessage = ReqJoinMessage;
var ReqLeaveMessage = function() {
	message.Message.apply(this, arguments);
	this.uid = undefined;
	this.group = undefined;
};
ReqLeaveMessage.prototype = new message.Message();
ReqLeaveMessage.prototype.constructor = ReqLeaveMessage;
exports.ReqLeaveMessage = ReqLeaveMessage;
var ReqUserListMessage = function() {
	message.Message.apply(this, arguments);
	this.uid = undefined;
	this.group = undefined;
};
ReqUserListMessage.prototype = new message.Message();
ReqUserListMessage.prototype.constructor = ReqUserListMessage;
exports.ReqUserListMessage = ReqUserListMessage;
var ReqChatMessage = function() {
	message.Message.apply(this, arguments);
	this.uid = undefined;
	this.group = undefined;
	this.chat = undefined;
};
ReqChatMessage.prototype = new message.Message();
ReqChatMessage.prototype.constructor = ReqChatMessa
define([
    "Ember"
], function (Ember) {
    "use strict";
    return Ember.Route.extend({
        renderTemplate : function () {
            var applicationController, loginController;
            applicationController = this.controllerFor("application");
            loginController = this.controllerFor("login");
            this.render("LoginView", {
                outlet : "login",
                controller : loginController
            });
            this.render("AdminNavigationView", {
                outlet : "adminNavigation",
                controller : applicationController
            });
            this.render("LoadingView", {
                outlet : "loading",
                controller : applicationController
            });
        },
        setupController : function (controller, model) {
            var applicationController, loginController;
            applicationController = this.controllerFor("application");
            loginController = this.controllerFor(
/**
 * Created on 2015/01/20.
 */
var UNIVERSALVIEWER = UNIVERSALVIEWER || {};
UNIVERSALVIEWER.Service = UNIVERSALVIEWER.Service || {};
UNIVERSALVIEWER.Service.Viewer = UNIVERSALVIEWER.Service.Viewer || {};
UNIVERSALVIEWER.Service.Viewer.app = angular.module('universalViewer.services', ['ngResource', 'common.services']);
UNIVERSALVIEWER.Service.Viewer.app.service('homeViewService', ['sharedStoreService', 'searchService', UNIVERSALVIEWER.Service.Viewer.HomeViewClass]);
UNIVERSALVIEWER.Service.Viewer.app.service('binderViewService', ['sharedStoreService', 'searchService', UNIVERSALVIEWER.Service.Viewer.BinderViewClass]);
UNIVERSALVIEWER.Service.Viewer.app.service('originalPageViewService', ['sharedStoreService', 'searchService',UNIVERSALVIEWER.Service.Viewer.OriginalPageViewClass]);
UNIVERSALVIEWER.Service.Viewer.app.service('originalPageDetailViewService', ['sharedStoreService', 'searchService',UNIVERSALVIEWER.Service.Viewer.OriginalPageDetailViewClass]);
UNIVERSALVIEWER.Service.Viewer.
export function getCategories(){
	return (dispatch, getState) => {
		api.loadCategories()
		   .then(response => {
		   		dispatch({type:"CATEGORY_GET_ALL_FULFILLED", payload: response});
		   		let categories = response.data;
		   		if(!categories.length) return;
		   		dispatch(getDishes(categories[0].id));
		   }).catch(err => dispatch(handleError(err)))
	}
export function createCategory(data){
	return (dispatch, getState) => {
		dispatch(showLoader())
		api.createCategory(data)
		   .then(response => {
		   		dispatch({type: "CATEGORY_CREATE_FULFILLED", payload: response.data});
		   		dispatch(closeModal(CATEGORY_MODAL_ID));
		   		dispatch(hideLoader())
		   		dispatch(notify('Info', 'Category created', 'success'));
		   })
		   .catch(err => dispatch(handleError(err)));
	}
export function deleteCategory(id){
	return (dispatch, getState) => {
		api.deleteCategory(id)
		   .then(res =>{
		   		dispatch({type: "CATEGORY_DELETE_FULFILLED",payload: id})
		   		dispatch(notify('Info',
var ksp_paths = new Array();
ksp_paths[0]="#cc0000";
ksp_paths[1]="#00cc00";
ksp_paths[2]="#0000cc";
ksp_paths[3]="#cc00cc";
ksp_paths[4]="#cccc00";
/* (c) maps.be-mobile.be */
var level_of_service = new Array();
level_of_service[0]="#FF0000";
level_of_service[1]="#FF0500";
level_of_service[2]="#FF0A00";
level_of_service[3]="#FF0F00";
level_of_service[4]="#FF1400";
level_of_service[5]="#FF1900";
level_of_service[6]="#FF1E00";
level_of_service[7]="#FF2300";
level_of_service[8]="#FF2800";
level_of_service[9]="#FF2D00";
level_of_service[10]="#FF3300";
level_of_service[11]="#FF3800";
level_of_service[12]="#FF3D00";
level_of_service[13]="#FF4200";
level_of_service[14]="#FF4700";
level_of_service[15]="#FF4C00";
level_of_service[16]="#FF5100";
level_of_service[17]="#FF5600";
level_of_service[18]="#FF5B00";
level_of_service[19]="#FF6000";
level_of_service[20]="#FF6600";
level_of_service[21]="#FF6B00";
level_of_service[22]="#FF7000";
level_of_service[23]="#FF7500";
level_of_service[24]="#FF7A00

level_of_service[25]="#FF7F00";
level_of_service[26]="#FF8400";
level_of_service[27]="#FF8900";
level_of_service[28]="#FF8E00";
level_of_service[29]="#FF9300";
level_of_service[30]="#FF9900";
level_of_service[31]="#FF9E00";
level_of_service[32]="#FFA300";
level_of_service[33]="#FFA800";
level_of_service[34]="#FFAD00";
level_of_service[35]="#FFB200";
level_of_service[36]="#FFB700";
level_of_service[37]="#FFBC00";
level_of_service[38]="#FFC100";
level_of_service[39]="#FFC600";
level_of_service[40]="#FFCC00";
level_of_service[41]="#FFD100";
level_of_service[42]="#FFD600";
level_of_service[43]="#FFDB00";
level_of_service[44]="#FFE000";
level_of_service[45]="#FFE500";
level_of_service[46]="#FFEA00";
level_of_service[47]="#FFEF00";
level_of_service[48]="#FFF400";
level_of_service[49]="#FFF900";
level_of_service[50]="#FFFF00";
level_of_service[51]="#FFFF00";
level_of_service[52]="#F9FF00";
level_of_service[53]="#F4FF00";
level_of_service[54]="#EFFF00";
level_of_service[55]="#EAFF00";
level_o

level_of_service[57]="#E0FF00";
level_of_service[58]="#DBFF00";
level_of_service[59]="#D6FF00";
level_of_service[60]="#D1FF00";
level_of_service[61]="#CCFF00";
level_of_service[62]="#C6FF00";
level_of_service[63]="#C1FF00";
level_of_service[64]="#BCFF00";
level_of_service[65]="#B7FF00";
level_of_service[66]="#B2FF00";
level_of_service[67]="#ADFF00";
level_of_service[68]="#A8FF00";
level_of_service[69]="#A3FF00";
level_of_service[70]="#9EFF00";
level_of_service[71]="#99FF00";
level_of_service[72]="#93FF00";
level_of_service[73]="#8EFF00";
level_of_service[74]="#89FF00";
level_of_service[75]="#84FF00";
level_of_service[76]="#7FFF00";
level_of_service[77]="#7AFF00";
level_of_service[78]="#75FF00";
level_of_service[79]="#70FF00";
level_of_service[80]="#6BFF00";
level_of_service[81]="#66FF00";
level_of_service[82]="#60FF00";
level_of_service[83]="#5BFF00";
level_of_service[84]="#56FF00";
level_of_service[85]="#51FF00";
level_of_service[86]="#4CFF00";
level_of_service[87]="#47FF00";
level_o
var api        = require('../../api'),
    middleware = require('../../middlewares');
/**
 * Subscription API routes.
 */
module.exports = function(app) {
  var contextHandler = middleware.contextHandler(app);
  /**
   * @apiDefineSuccessStructure Feed
   * @apiSuccess {String} id Feed ID.
   * @apiSuccess {String} title Feed title.
   * @apiSuccess {String} description Feed description.
   * @apiSuccess {String} htmlurl Feed website URL.
   * @apiSuccess {String} xmlurl Feed RSS URL.
   * @apiSuccess {String} pshbStatus PSHB status.
   * @apiSuccess {String} hub PSHB hub location.
   * @apiSuccess {String} status Last fetch status.
   * @apiSuccess {String} updateDate Last fetch date.
   */
  /**
   * @api {get} /api/subscription Request user's subscriptions
   * @apiVersion 0.9.0
   * @apiName GetSubscriptions
   * @apiGroup subscription
   * @apiPermission user
   *
   * @apiSuccessStructure Feed
   *
   * @apiSuccessExample Success-Response:
   *     HTTP/1.1 200 OK
   *     [{
   

   *        lastModified: "Mon, 30 Jun 2014 16:19:10 GMT"
   *        pshbStatus: "subscribe"
   *        status: "updated"
   *        title: "High Scalability"
   *        updateDate: "2014-09-30T16:23:47.753Z"
   *     },
   *     {...},
   *     ...
   *     ]
   */
  app.get('/api/subscription', api.subscription.get);
  /**
   * @api {get} /api/subscription/export Request all user's subscriptions as an OPM file
   * @apiVersion 0.9.0
   * @apiName GetSubscriptionAsOPML
   * @apiGroup subscription
   * @apiPermission user
   *
   * @apiSuccessExample Success-Response:
   *     HTTP/1.1 200 OK
   *     Content-Type: application/octet-stream
   *     attachment: subscribtions.xml
   */
  app.get('/api/subscription/export', contextHandler, api.subscription.download);
  /**
   * @api {post} /api/subscription Add user's subscription(s)
   * @apiVersion 0.9.0
   * @apiName AddSubscription
   * @apiGroup subscription
   * @apiPermission user
   *
   * @apiParamTitle (Create) Parameters o
var app = angular.module("confencesApp")
    .factory( 'conferenceService',
    [ '$firebaseArray',
        function( $firebaseArray) {
            var service = { };
            service.conferences = $firebaseArray( service.ref );
            service.logins = $firebaseArray( service.ref2 );
            service.addConference = function ( conf ) {
                service.conferences.$add( conf );
            };
            service.addLogin = function(login){
                service.logins.$add(login);
            };
            service.newConference = function () {
                return {
                    id            : "",
                    name          : "",
                    description   : "",
                    place         : "",
                    deadline      : "",
                    notification  : "",
                    event         : "",
                    gusta         : 0,
                    comentarios   :[],
                    temas         :[]
        

            }
            service.newLogin = function(){
                return{
                    user          : "",
                    password      : ""
                };
            }
            service.currentConference = service.newConference();
            service.currentLogin = service.newLogin();
            service.setCurrentConference = function ( conf ) {
                service.currentConference = conf;
            }
            service.setCurrentConference2 = function ( conf ) {
                for(var j=0;j<service.conferences.length;j++)
                {
                    if(service.conferences[j]["id"]==conf)
                    {
                        service.currentConference = service.conferences[j];
                        break;
                    }
                }
                if(service.currentConference==null)
                {
                    window.alert("No hay ninguna conferencia con este id");
                }
            };
        

                service.currentConference = conf;
                service.currentConference.gusta++;
            };
            service.setCurrentLogin = function(login){
                service.currentLogin = login;
            };
            service.addComentario = function(conf, login, comentario){
                service.currentConference = conf;
                service.currentLogin = login;
                if ( typeof conf.comentarios == 'undefined' ) {
                    conf.comentarios = [];
                }
                console.log(login);
                service.currentConference.comentarios.push({usuario:login, comment:comentario});
                service.createOrUpdate2(conf);
            };
            service.addTema = function(conf, tema){
                service.currentConference = conf;
                if ( typeof conf.temas == 'undefined' ) {
                    conf.temas = [];
                }
                service.currentConference.temas.push({tema:tema})

                service.createOrUpdate2(conf);
            };
            service.createOrUpdate = function( conf ) {
                if ( typeof conf.$id == 'undefined' ) {
                    service.conferences.$add( conf );
                } else {
                    service.conferences.$save( conf );
                }
            };
            service.createOrUpdate2 = function( conf ) {
                    service.conferences.$save( conf );
            };
            service.borrar = function(conf){
                service.conferences.$remove(conf)
            };
            service.createLogin = function(login){
                if(typeof login.$user == 'undefined'){
                    service.logins.$add(login);
                }
            };
            service.conferences.$watch( function(event) {
                console.log(event);
            });
            service.logins.$watch( function(event) {
                console.log(event);
            });
            return 
ï»¿namespace SDK.Lib
    /**
     * @brief éå¼ç¨è®¡æ°èµæºå è½½ç»æéç¥
     */
    public class ResLoadResultNotify
    {
        public ResLoadResultNotify()
        {
            m_resLoadState = new ResLoadState();
            m_loadResEventDispatch = new ResEventDispatch();
        }
        public ResLoadState resLoadState
        {
            get
            {
                return m_resLoadState;
            }
            set
            {
                m_resLoadState = value;
            }
        }
        public ResEventDispatch loadResEventDispatch
        {
            get
            {
                return m_loadResEventDispatch;
            }
            set
            {
                m_loadResEventDispatch = value;
            }
        }
        public void onLoadEventHandle(IDispatchObject dispObj)
        {
            m_loadResEventDispatch.dispatchEvent(dispObj);
            m_loadResEventDispatch.clearEventHandle();
        }
        virtual public void copyFrom(ResLoadRe
'use strict';
var emitterMixin = require('emitter-mixin');
var skivvyUtils = require('skivvy-utils');
var loadConfigJson = require('./helpers/loadConfigJson');
var initProject = require('./api/initProject');
var DEFAULT_ENVIRONMENT_NAME = require('./constants').DEFAULT_ENVIRONMENT_NAME;
function Api(path, environment) {
	try {
		loadConfigJson(path);
	} catch (error) {
		throw error;
	}
	this.path = path;
	this.environment = environment || DEFAULT_ENVIRONMENT_NAME;
Api.initProject = initProject;
Api.prototype.path = null;
Api.prototype.redispatcher = null;
addEmitterMethods(Api);
Api.events = require('./events');
Api.constants = require('./constants');
Api.errors = require('./errors');
Api.utils = skivvyUtils;
Api.prototype.events = Api.events;
Api.prototype.errors = Api.errors;
Api.prototype.utils = Api.utils;
Api.prototype.getEnvironmentConfig = require('./api/getEnvironmentConfig');
Api.prototype.getPackageConfig = require('./api/getPackageConfig');
Api.prototype.getTaskConfig = req
var show_index = null;
/*
 * Display the specified show and update the
 * current show_index.
 */
var display_show = function(index) {
	Setlist.display_show(index)
		.done(function(new_index) {
			show_index = new_index;
			check_arrows();
		});
};
$(document).ready(function() {
	display_show(null);
	Setlist.generate_show_dropdown(0)
		.done(function(el) {
			el.addClass('show-select');
			var container = $('<div>')
				.addClass('show-pick-container')
				.append(el)
				.appendTo('header')
				.change(show_dropdown_change);
		});
	$('.arrow.left').click(function(e) {
		e.preventDefault();
		display_show(--show_index);
	});
	$('.arrow.right').click(function(e) {
		e.preventDefault();
		display_show(++show_index);
	});
});
var show_dropdown_change = function() {
	var new_show_index = $('.show-select')[0].selectedIndex;
	if (show_index != new_show_index)
		display_show(new_show_index);
};
var check_arrows = function() {
	if (show_index == 0)
		$('.arrow.left').hide();
	else
		$('.arrow.
fl = new Array();
fl["0"]= "api/about_api.html";
fl["1"]= "api/api_auth.html";
fl["2"]= "api/api_character_encoding.html";
fl["3"]= "api/api_datasets_get.html";
fl["4"]= "api/api_datasets_id_get.html";
fl["5"]= "api/api_datasets_post.html";
fl["6"]= "api/api_datasets_resource.html";
fl["7"]= "api/api_datasets_top.html";
fl["8"]= "api/api_datasources_get.html";
fl["9"]= "api/api_datasources_id_get.html";
fl["10"]= "api/api_datasources_post.html";
fl["11"]= "api/api_datasources_resource.html";
fl["12"]= "api/api_datasources_top.html";
fl["13"]= "api/api_groups_get.html";
fl["14"]= "api/api_groups_id_get.html";
fl["15"]= "api/api_groups_post.html";
fl["16"]= "api/api_groups_put.html";
fl["17"]= "api/api_groups_resource.html";
fl["18"]= "api/api_groups_top.html";
fl["19"]= "api/api_http_response_codes.html";
fl["20"]= "api/api_lensbuilds_id_get.html";
fl["21"]= "api/api_lensbuilds_post.html";
fl["22"]= "api/api_lensbuilds_resource.html";
fl["23"]= "api/api_lensbuilds_top.html";
fl["24"]= "

fl["25"]= "api/api_lenses_id_get.html";
fl["26"]= "api/api_lenses_post.html";
fl["27"]= "api/api_lenses_resource.html";
fl["28"]= "api/api_lenses_top.html";
fl["29"]= "api/api_payload_metadata.html";
fl["30"]= "api/api_reference_top.html";
fl["31"]= "api/api_sqlquery_get.html";
fl["32"]= "api/api_sqlquery_resource.html";
fl["33"]= "api/api_sqlquery_top.html";
fl["34"]= "api/api_users_get.html";
fl["35"]= "api/api_users_id_get.html";
fl["36"]= "api/api_users_patch.html";
fl["37"]= "api/api_users_post.html";
fl["38"]= "api/api_users_resource.html";
fl["39"]= "api/api_users_top.html";
fl["40"]= "api/api_versioning.html";
fl["41"]= "api/api_vizboards_get.html";
fl["42"]= "api/api_vizboards_id_get.html";
fl["43"]= "api/api_vizboards_post.html";
fl["44"]= "api/api_vizboards_resource.html";
fl["45"]= "api/api_vizboards_top.html";
fl["46"]= "api/ref_api_common_attrs.html";
fl["47"]= "preface/contact_info.html";
fl["48"]= "preface/copyright_info.html";
fl["49"]= "preface/doc_conventions.html";
var nav__catapult_8h =
    [ "nav_catapult_struct", "nav__catapult_8h.html#structnav__catapult__struct", [
      [ "accel_threshold", "nav__catapult_8h.html#ac28dc214cd06afcb18e7f70fa43a4a67", null ],
      [ "heading_delay", "nav__catapult_8h.html#aa4041aa179a66041ad7df92691972e69", null ],
      [ "initial_pitch", "nav__catapult_8h.html#aa54a436b64df4183ac4a0cb0d783fccf", null ],
      [ "initial_throttle", "nav__catapult_8h.html#a69c357fd90bbc4ceb3c5422273053e18", null ],
      [ "motor_delay", "nav__catapult_8h.html#a7909f649542c8b90ff718edbff7db33a", null ],
      [ "pos", "nav__catapult_8h.html#afb5ba6fa8773db7785f64810b263aa06", null ],
      [ "status", "nav__catapult_8h.html#a5767c213db395413c05a0e7a4fc7430c", null ],
      [ "timer", "nav__catapult_8h.html#a264be97e5f25caf74e1598b07a247edb", null ]
    ] ],
    [ "nav_catapult_state", "nav__catapult_8h.html#a423ca95cf61102e17b0265be9c6a95c5", [
      [ "NAV_CATAPULT_UNINIT", "nav__catapult_8h.html#a423ca95cf61102e17b0265be9c6

      [ "NAV_CATAPULT_ARMED", "nav__catapult_8h.html#a423ca95cf61102e17b0265be9c6a95c5a19ef22341c2bab61d1160c57720b56a7", null ],
      [ "NAV_CATAPULT_WAIT_ACCEL", "nav__catapult_8h.html#a423ca95cf61102e17b0265be9c6a95c5a13d387b1ecdce26e4053335d35ae0227", null ],
      [ "NAV_CATAPULT_MOTOR_ON", "nav__catapult_8h.html#a423ca95cf61102e17b0265be9c6a95c5acdf497a7305ff9555d71b0fff3376e8c", null ],
      [ "NAV_CATAPULT_MOTOR_CLIMB", "nav__catapult_8h.html#a423ca95cf61102e17b0265be9c6a95c5ac1eb37c549997af76bddc806d9dbf82f", null ],
      [ "NAV_CATAPULT_DISARM", "nav__catapult_8h.html#a423ca95cf61102e17b0265be9c6a95c5a2f50a35dd318df0327aabcb2f45f85c5", null ]
    ] ],
    [ "nav_catapult_highrate_module", "nav__catapult_8h.html#afc9cb27f8b568c7117d4fc7bfd09afbc", null ],
    [ "nav_catapult_init", "nav__catapult_8h.html#ab2897e9330234f13bef014c99d79ff99", null ],
    [ "nav_catapult_run", "nav__catapult_8h.html#a6ceeaae643feab7cd0f96d7f6a538138", null ],
    [ "nav_catapult", "nav__catapu
angular.module('app.serviceBinding').factory('serviceBindingService', ['$http', function($http) {
  var serviceBindingServiceFactory = {};
  
  var _addServiceBinding = function(serviceBinding) {
    
    var url = '/v2/service_bindings';
    var data = {
      'service_instance_guid': serviceBinding.serviceInstanceId,
      'app_guid': serviceBinding.applicationId
    };
    var headers = {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    };
    var config = {
      headers: headers
    };
    return $http.post(url, data, config);
  };
  var _deleteServiceBinding = function(serviceBindingId) {
    
    var url = '/v2/service_bindings/' + serviceBindingId;
    var headers = {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    };
    var config = {
      headers: headers
    };
    return $http.delete(url, config);
  };
  
  serviceBindingServiceFactory.addServiceBinding = _addServiceBinding;
  serviceBindingServiceFactory.de
export default function promiseMiddleware({ dispatch }) {
    return next => action => {
        if (!isPromise(action.payload)) {
            return next(action);
        }
        const { types, payload, meta } = action;
        const { promise, data } = payload;
        const [ PENDING, FULFILLED, REJECTED ] = types;
        /**
         * Dispatch the pending action
         */
        dispatch({
            type: PENDING,
            ...data && { payload: data },
            ...meta && { meta },
        });
        /**
         * If successful, dispatch the fulfilled action, otherwise dispatch
         * rejected action.
         */
        return promise.then(
            result => {
                dispatch({
                    type: FULFILLED,
                    payload: result,
                    meta,
                });
            },
            error => {
                dispatch({
                    type: REJECTED,
                    payload: error,
                 
var native_accessor = {
    send_sms: function (phone, message) {
        console.log(phone, message);
    },
    receive_message: function (json_message) {
        if (typeof this.process_received_message === 'function') {
            this.process_received_message(json_message);
        }
    },
    process_received_message: function (json_message) {
        if(Message.check_status(json_message)){
            native_accessor.send_sms(json_message.messages[0].phone, "å¯¹ä¸èµ·æ´»å¨å°æªå¼å§")
            return;
        }
        if (Message.check_activity_status_bm(json_message)) {
            native_accessor.send_sms(json_message.messages[0].phone, "æ¨å·²æ¥åæåï¼è¯·å¿éå¤æ¥å")
            return;
        }
        if (Message.check_activity_status(json_message) && !Message.check_activity_status_bm(json_message)) {
            Message.save_message(json_message)
            native_accessor.send_sms(json_message.messages[0].phone, "æ­åæ¨å·²æ¥åæå")
            Message.refresh()
            return;
        }
        if
var express = require('express'),
 bodyParser = require('body-parser'),
        api = require('./api/api');
var app = express();
app.configure('development', function () {
  app.use(express.logger('dev'));
  app.locals.pretty = true;
});
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(express.static(__dirname + '/dist'));
app.get('/api/home/:id', api.home.home);
app.get('/api/home', api.home.homes);
app.post('/api/home/:id', api.home.updateHome);
app.delete('/api/home/:id', api.home.deleteHome);
app.post('/api/home', api.home.newHome);
app.get('/api/news/:id', api.news.news);
app.get('/api/news', api.news.newss);
app.post('/api/news/:id', api.news.updateNews);
app.delete('/api/news/:id', api.news.deleteNews);
app.post('/api/news', api.news.newNews);
app.get('/api/facilities/:id', api.facilities.facilities);
app.get('/api/facilities', api.facilities.facilitiess);
app.post('/api/facilities/:id', api.facilities.updateFacilities);
app.delete('/api/f

app.post('/api/facilities', api.facilities.newFacilities);
app.get('/api/research/:id', api.research.research);
app.get('/api/research', api.research.researchs);
app.post('/api/research/:id', api.research.updateResearch);
app.delete('/api/research/:id', api.research.deleteResearch);
app.post('/api/research', api.research.newResearch);
app.get('/api/people/:id', api.people.people);
app.get('/api/people', api.people.peoples);
app.post('/api/people/:id', api.people.updatePeople);
app.delete('/api/people/:id', api.people.deletePeople);
app.post('/api/people', api.people.newPeople);
app.get('/api/funding/:id', api.funding.funding);
app.get('/api/funding', api.funding.fundings);
app.post('/api/funding/:id', api.funding.updateFunding);
app.delete('/api/funding/:id', api.funding.deleteFunding);
app.post('/api/funding', api.funding.newFunding);
app.get('/api/education/:id', api.education.education);
app.get('/api/education', api.education.educations);
app.post('/api/education/:id', api.educati

app.delete('/api/education/:id', api.education.deleteEducation);
app.post('/api/education', api.education.newEducation);
app.get('/api/datasets/:id', api.datasets.datasets);
app.get('/api/datasets', api.datasets.datasetss);
app.post('/api/datasets/:id', api.datasets.updateDatasets);
app.delete('/api/datasets/:id', api.datasets.deleteDatasets);
app.post('/api/datasets', api.datasets.newDatasets);
app.get('/api/lecture/:id', api.lecture.lecture);
app.get('/api/lecture', api.lecture.lectures);
app.post('/api/lecture/:id', api.lecture.updateLecture);
app.delete('/api/lecture/:id', api.lecture.deleteLecture);
app.post('/api/lecture', api.lecture.newLecture);
app.get('/api/industry/:id', api.industry.industry);
app.get('/api/industry', api.industry.industrys);
app.post('/api/industry/:id', api.industry.updateIndustry);
app.delete('/api/industry/:id', api.industry.deleteIndustry);
app.post('/api/industry', api.industry.newIndustry);
app.get('/api/jobs/:id', api.jobs.jobs);
app.get('/api/jobs
var searchData=
  ['receivemessage',['receiveMessage',['../class_queue_service.html#a32a08fa2c1ed1f2f17f55056369836fa',1,'QueueService']]],
  ['receivemessagebycorrelationid',['receiveMessageByCorrelationId',['../class_queue_service.html#a533ce1d13f81991e3cae4e6413dff74c',1,'QueueService']]],
  ['recommendeditem',['RecommendedItem',['../class_recommended_item.html',1,'']]],
  ['recommender',['Recommender',['../class_recommender.html',1,'']]],
  ['recommenderservice',['RecommenderService',['../class_recommender_service.html',1,'']]],
  ['recommendersimilarity',['RecommenderSimilarity',['../class_recommender_similarity.html',1,'']]],
  ['redeemrewards',['redeemRewards',['../class_reward_service.html#a7c3e1b2f0dd3e9b821bee809fc22eb4d',1,'RewardService']]],
  ['removealbum',['removeAlbum',['../class_album_service.html#ad049f1b9bc0888281203c364c1fdcd61',1,'AlbumService']]],
  ['removeallattributes',['removeAllAttributes',['../class_session_service.html#aa7800e6c1d927c1c6036bd19b437e28d',1,'

  ['removeallfiles',['removeAllFiles',['../class_upload_service.html#a28747d3c807c86d68e593cc522298a81',1,'UploadService']]],
  ['removeallfilesbyuser',['removeAllFilesByUser',['../class_upload_service.html#ae3257388af72157f33f6b4569b2ca9e0',1,'UploadService']]],
  ['removeallitems',['removeAllItems',['../class_cart_service.html#a334dd3558351b5b6efd10b3e98a2a76a',1,'CartService\removeAllItems()'],['../class_catalogue_service.html#a89ad971ed81bc3b521626e29c59700a4',1,'CatalogueService\removeAllItems()']]],
  ['removeattribute',['removeAttribute',['../class_session_service.html#ac31819f9282a4a832dc3bd27dc4b6da6',1,'SessionService']]],
  ['removeemailconfiguration',['removeEmailConfiguration',['../class_email_service.html#ab173fb63800214851d5f4f9799886103',1,'EmailService']]],
  ['removefilebyname',['removeFileByName',['../class_upload_service.html#ae9776e90401158c03d727c41a92ab5c8',1,'UploadService']]],
  ['removefilebyuser',['removeFileByUser',['../class_upload_service.html#a98fe2cf608

  ['removeitem',['removeItem',['../class_cart_service.html#a806f2debb6c778488622049e61c65445',1,'CartService']]],
  ['removeitembyid',['removeItemById',['../class_catalogue_service.html#af70a701a86e1d1ac7a612498ed661ee0',1,'CatalogueService']]],
  ['removeitemsbycategory',['removeItemsByCategory',['../class_catalogue_service.html#a8a1ffbb39e02f920ee27b209098ac63d',1,'CatalogueService']]],
  ['removemessage',['removeMessage',['../class_queue_service.html#a4840c18a4c1a3f4cc4a0f7954a319a52',1,'QueueService']]],
  ['removephoto',['removePhoto',['../class_photo_service.html#a9d373e523a08e26a1a8b8c3fbcebc589',1,'PhotoService']]],
  ['requests',['Requests',['../class_requests.html',1,'']]],
  ['resetuserpassword',['resetUserPassword',['../class_user_service.html#a32b211833333d3eb2a867bd58d79113a',1,'UserService']]],
  ['resize',['resize',['../class_image_processor_service.html#a1e39ecb4efe12af4ac7ff3ef91438c84',1,'ImageProcessorService']]],
  ['resizebypercentage',['resizeByPercentage',['../
        function loadDispatchJson(ginNo, type) {
            var params = {};
            params['ginNo'] = ginNo;
            params['type'] = type;
            $('#dispatch_partial').load("/Dispatch/_DispatchPartial/", {ginNo : ginNo});
            $.getJSON('@Url.Action("JsonDispatch", "Dispatch")', params, function (dispatch) {
                $('#ajax_loading').hide();
                if (dispatch == null) {
                    return;
                }
                $('#DispatchID').val(dispatch.DispatchID);
                $('#RequisitionNo').val(dispatch.RequisitionNo);
                $('#WarehouseID').val(dispatch.WarehouseID);
                $('#WarehouseID').change();
                $('#TransporterID').val(dispatch.TransporterID);
                $('#DriverName').val(dispatch.DriverName);
                $('#PlateNo_Prime').val(dispatch.PlateNo_Prime);
                $('#PlateNo_Trailer').val(dispatch.PlateNo_Trailer);
                $('#BidNumber').val(dispatch.BidNu

                var datePicker = $("#DispatchDate").data("tDatePicker");
                datePicker.value(parseJsonDate(dispatch.DispatchDate));
                $('#Year').val(dispatch.Year);
                $('#Year').change();
                $('#Month').val(dispatch.Month);
                $('#ProgramID').val(dispatch.ProgramID);
                $('#WeighBridgeTicketNumber').val(dispatch.WeighBridgeTicketNumber);
                $('#Remark').val(dispatch.Remark);
                var gr = $('#dispatchCommoditiesGrid').data('tGrid');
                gr.rebind({ dispatchId: dispatch.DispatchID });
                $('#SelectedRegionId').jCombo("/AdminUnit/GetRegions", {
                    selected_value: '3'
                });
                $('#SelectedZoneId').jCombo("/AdminUnit/GetChildren?unitId=", {
                    parent: "#SelectedRegionId",
                    parent_value: '3',
                    selected_value: '7'
                });
                $('#SelectedWored

                    parent: "#SelectedZoneId",
                    parent_value: '7',
                    selected_value: '8'
                });
                $('#FDPID').jCombo("/FDP/GetFDPs?woredaId=", {
                    parent: "#SelectedWoredaId",
                    parent_value: '8',
                    selected_value: '1'
                });
            });
        }
        function initDispatchCascade(){
             $('#SelectedRegionId').cascade({
            url: '/AdminUnit/GetChildren/',
            paramName: 'unitId',
            childSelect: $('#SelectedZoneId')
        });
        $('#SelectedZoneId').cascade({
            url: '/AdminUnit/GetChildren/',
            paramName: 'unitId',
            childSelect: $('#SelectedWoredaId')
        });
        $('#SelectedWoredaId').cascade({
            url: '/FDP/GetFDPs/',
            paramName: 'woredaId',
            childSelect: $('#FDPID')
        });
       
        $('#StoreID').cascade({
            url: '/S
(function () {
    var catalogLink = document.querySelector(".nav-main__item--catalog a");
    var catalogNav = document.querySelector(".nav-sub__block--catalog");
    var serviceLink = document.querySelector(".nav-main__item--services a");
    var serviceNav = document.querySelector(".nav-sub__block--services");
    function showSubMenu(link, subNav) {
        var navTimer = null;
        var allLinks = document.querySelectorAll(".nav-main .nav__link");
        var allSubNav = document.querySelectorAll(".nav-sub .nav-sub__block");
        function doNav(elem) {
            elem.addEventListener("mouseover", function () {
                clearTimeout(navTimer);
                for (let count = 0; count < allLinks.length; count++)
                {
                    let currentLink = allLinks[count];
                    currentLink.classList.remove("nav-main__item--active");
                }
                link.classList.add("nav-main__item--active");
                for (let count 
ï»¿(function() {
    'use strict';
    var app = angular.module('taptap');
    app.factory('outputService', ['playService', 'metService', 'staffService', 'feedbackService',
        function(playService, metService, staffService, feedbackService) {
        var outputService = {
            outputBeat: _outputBeat,
            toStaff: _toStaff,
            start: _start,
            end: _end,
            feedback: {
                leftButton: false,
                rightButton: false,
                length: 0
            }
        };
        function _outputBeat(beat) {
            if (typeof beat !== 'undefined') {
                feedbackService.showFeedback(beat);
                playService.playBeat(beat);
                metService.currentBeat = beat;
                metService.startPlayer();
            }
        }
        function _toStaff(lines) {
            if (Array.isArray(lines)) {
                metService.startComputer(lines);
            } else {
                consol
ï»¿var os = require('os');
var lnx = require('./linux-service');
function service(settings) {
	if(settings) {
		if("output" in settings) {
			if(settings.output == false) {
				delete settings.output;
			}
		}
		switch(os.platform()) {
			case "linux":
				this._service = new lnx.LinuxService(settings);
				break;
			default:
				throw new Error("Operating system not supported! OS: " + os.platform());
				break;
		}
		this.settings = settings;
	} else {
		throw new Error("No settings passed!");
	}
service.prototype.install = function(callback) {
	if(this._service)
		this._service.install(callback);
service.prototype.installSync = function() {
	if(this._service)
		return this._service.installSync();
service.prototype.uninstall = function(callback) {
	if(this._service)
		this._service.uninstall(callback);
service.prototype.uninstallSync = function() {
	if(this._service)
		return this._service.uninstallSync();
service.prototype.start = function() {
	if(this._service)
		this._service.start()
'use strict';
/* jasmine specs for controllers go here */
describe('controllers', function(){
    beforeEach(function() {
        module('hash0.controllers');
        module('hash0.services');
    });
    it('should have all expected controllers', inject(function($controller, $rootScope, metadata) {
        var scope = $rootScope.$new();
        var dispatcherController = $controller('DispatcherController', {
            '$scope': scope,
            'metadata': metadata
        });
        expect(dispatcherController).toBeDefined();
        var setupController = $controller('SetupController', {
            '$scope': scope
        });
        expect(setupController).toBeDefined();
        var unlockController = $controller('UnlockController', {
            '$scope': scope
        });
        expect(unlockController).toBeDefined();
        var generationController = $controller('GenerationController', {
            '$scope': scope
        });
        expect(generationController).toBeDefi
angular.module('MyApp')
  .controller('DetailCtrl', ['$scope', '$rootScope', '$routeParams', 'Show', 'Subscription',
    function($scope, $rootScope, $routeParams, Show, Subscription) {
      Show.get({ _id: $routeParams.id }, function(show) {
        $scope.show = show;
        $scope.isSubscribed = function() {
          return $scope.show.subscribers.indexOf($rootScope.currentUser._id) !== -1;
        };
        $scope.subscribe = function() {
          Subscription.subscribe(show).success(function() {
            $scope.show.subscribers.push($rootScope.currentUser._id);
          });
        };
        $scope.unsubscribe = function() {
          Subscription.unsubscribe(show).success(function() {
            var index = $scope.show.subscribers.indexOf($rootScope.currentUser._id);
            $scope.show.subscribers.splice(index, 1);
          });
        };
        $scope.newLink = show.name.replace(/[\s]/g, '-');
        $scope.nextEpisode = show.episodes.filter(function(episode) 
angular.module('lub-tmdb-api', ['lub-tmdb-api-movie',
    'lub-tmdb-api-search',
    'lub-tmdb-api-configuration',
    'lub-tmdb-api-collection',
    'lub-tmdb-api-people',
    'lub-tmdb-api-list',
    'lub-tmdb-api-change',
    'lub-tmdb-api-keyword',
    'lub-tmdb-api-genre',
    'lub-tmdb-api-company',
    'lub-tmdb-api-tv'])
    .factory('lubTmdbApi', [
    "lubTmdbApiSearch",
    "lubTmdbApiConfiguration",
    "lubTmdbApiMovie",
    "lubTmdbApiCollection",
    "lubTmdbApiPeople",
    "lubTmdbApiList",
    "lubTmdbApiCompany",
    "lubTmdbApiGenre",
    "lubTmdbApiKeyword",
    "lubTmdbApiChange",
    "lubTmdbApiTv",
    function (lubTmdbApiSearch, lubTmdbApiConfiguration, lubTmdbApiMovie, lubTmdbApiCollection, lubTmdbApiPeople, lubTmdbApiList, lubTmdbApiCompany, lubTmdbApiGenre, lubTmdbApiKeyword, lubTmdbApiChange) {
        return {
            search:lubTmdbApiSearch,
            configuration:lubTmdbApiConfiguration,
            movie:lubTmdbApiMovie,
            collection:lub
/******************************************************************************  
*   CONTROLLER/INDEX.JS
*   Description: Defines a single angular controller
*   Use: Registers controller with controller module and injects to core module
*    
*******************************************************************************/
;(function () {
    "use strict";
    angular.module("maps")
        .controller("RootController", require("./root-controller.js"))
        .controller("LandingController", require("./landing-controller.js"))
        .controller("ServicesController", require("./services-controller.js"))
        .controller("CategoriesController", require("./categories-controller.js"))
        .controller("SearchController", require("./search-controller.js"))
        .controller("LocationController", require("./location-controller.js"))
        .controller("LocalSearchController", require("./local-search-controller.js"))
        .controller("LocalFoundController", require("./local-fo
var middleware  = require('../middleware').middleware,
    api         = require('../api');
module.exports = function (server) {
    server.get('/ghost/api/v0.1/posts', api.requestHandler(api.posts.browse));
    server.post('/ghost/api/v0.1/posts', api.requestHandler(api.posts.add));
    server.get('/ghost/api/v0.1/posts/:id', api.requestHandler(api.posts.read));
    server.put('/ghost/api/v0.1/posts/:id', api.requestHandler(api.posts.edit));
    server.del('/ghost/api/v0.1/posts/:id', api.requestHandler(api.posts.destroy));
    server.get('/ghost/api/v0.1/posts/getSlug/:title', middleware.authAPI, api.requestHandler(api.posts.getSlug));
    server.get('/ghost/api/v0.1/settings/', api.requestHandler(api.settings.browse));
    server.get('/ghost/api/v0.1/settings/:key/', api.requestHandler(api.settings.read));
    server.put('/ghost/api/v0.1/settings/', api.requestHandler(api.settings.edit));
    server.get('/ghost/api/v0.1/users/', api.requestHandler(api.users.browse));
    server.get(
var express = require('express');
var api = express.Router();
var webApiCtrl = require('../controllers/webApiCtrl');
api.use(function timeLog(req, res, next) {
    console.log('Time: ', Date.now())
    next()
})
api.use(function checkApiToken(req, res, next) {
    next()
})
api.get('/', function (req, res) {
    let api_data = {
        'name': 'Web API Home Page'
    };
    res.send(api_data);
})
api.get('/getsiteusers', webApiCtrl.getAllSiteUsers);
api.post('/addsiteuser', webApiCtrl.AddSiteUser);
api.post('/editsiteuser', webApiCtrl.editSiteUser);
api.post('/deletesiteuser', webApiCtrl.deleteSiteUser);
api.get('/getlanguages', webApiCtrl.getAllLanguages);
api.post('/addlanguage', webApiCtrl.AddLanguage);
api.post('/editlanguage', webApiCtrl.editLanguage);
api.post('/deletelanguage', webApiCtrl.deleteLanguage);
api.get('/getdefaultcountries', webApiCtrl.getAllDefaultCountries);
api.get('/getcountries', webApiCtrl.getAllCountries);
api.post('/addcountry', webApiCtrl.AddCountry);
api.p

api.post('/deletecountry', webApiCtrl.deleteCountry);
api.get('/getcategories', webApiCtrl.getCategories);
api.get('/getproducts', webApiCtrl.getAllProducts);
api.post('/addproduct', webApiCtrl.AddProduct);
api.post('/editproduct', webApiCtrl.editProduct);
api.post('/deleteproduct', webApiCtrl.deleteProduct);
api.post('/addproductlocalize', webApiCtrl.AddProductLocalize);
api.post('/editproductlocalize', webApiCtrl.editProductLocalize);
api.get('/getproductlocalize/:id', webApiCtrl.getProductLocalizeByProductId);
api.get('/getslideimages', webApiCtrl.getAllSlideImages);
api.post('/addslideimage', webApiCtrl.AddSlideImage);
api.post('/deleteslideimage', webApiCtrl.deleteSlideImage);
api.post('/changeslideseq', webApiCtrl.changeSlideSequence);
api.get('/getappwords', webApiCtrl.getAllAppWords);
api.post('/addappword', webApiCtrl.AddAppWord);
api.post('/deleteappword', webApiCtrl.deleteAppWord);
api.post('/editappword', webApiCtrl.editAppWord);
api.get('/getapplocalize', webApiCtrl.getAl

api.post('/addapplocalize', webApiCtrl.AddAppLocalize);
api.post('/deleteapplocalize', webApiCtrl.deleteAppLocalize);
api.post('/editapplocalize', webApiCtrl.editAppLocalize);
api.get('/getproductprices', webApiCtrl.getAllProductPriceByCountry);
api.post('/addproductprice', webApiCtrl.AddProductPriceByCountry);
api.post('/editproductprice', webApiCtrl.editProductPrice);
api.post('/deleteproductprice', webApiCtrl.deleteProductPrice);
api.get('/getproductprice/:id', webApiCtrl.getProductPriceById);
api.get('/getproduct/:id', webApiCtrl.getProductById);
api.get('/getcountry/:id', webApiCtrl.getCountryById);
api.get('/getlanguage/:id', webApiCtrl.getLanguageById);
api.get('/getproductcount', webApiCtrl.getProductCount);
api.get('/getmobileusers', webApiCtrl.getMobileUsers);
api.post('/deletemobileuser', webApiCtrl.deleteMobileUser);
api.post('/addconfig', webApiCtrl.AddConfig);
api.get('/getconfigs', webApiCtrl.getConfig);
api.post('/editconfig', webApiCtrl.editConfig);
api.get('/getconfi
angular.module('app.serviceInstance').factory('serviceInstanceService', ['$http', function($http) {
  var serviceInstanceServiceFactory = {};
  var _addServiceInstance = function(serviceInstance) {
    
    var url = '/v2/service_instances';
    var data = {
      'name': serviceInstance.name,
      'service_plan_guid': serviceInstance.servicePlanId,
      'space_guid': serviceInstance.spaceId
    };
    var headers = {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    };
    var config = {
      headers: headers
    };
    return $http.post(url, data, config);
  };
  var _deleteServiceInstance = function(serviceInstanceId) {
    
    var url = '/v2/service_instances/' + serviceInstanceId;
    var headers = {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    };
    var config = {
      headers: headers
    };
    
    return $http.delete(url, config);
  };
  var _getServiceBindingsForServiceInstance= function(serviceInstance
'use strict';
require.config({
  paths: {
    'module/example/IndexController': 'module/example/IndexController',
    'module/example/FooController': 'module/example/FooController',
    'module/example/BarController': 'module/example/BarController'
  }
});
define('module/example', [
    'module/example/IndexController',
    'module/example/FooController',
    'module/example/BarController'
  ],
  function (IndexController, FooController, BarController) {
    var config = {
      name: 'example',
      controllers: [
        {name: 'IndexController', delegate: IndexController},
        {name: 'FooController', delegate: FooController},
        {name: 'BarController', delegate: BarController}
      ],
      routes: {
        '/test': {templateUrl: 'app/module/example/view/example.html', controller: 'IndexController'},
        '/example': {templateUrl: 'app/module/example/view/example.html', controller: 'IndexController'},
        '/example/foo': {templateUrl: 'app/module/example/view/exam
/**
 * Created by careerBox on 2014-12-22.
 */
require([
    'service/applyCommonItemAttribute',
    'service/CommonCallback',
    'service/createPortfolio',
    'service/deleteImage',
    'service/deletePaper',
    'service/deletePortfolio',
    'service/deleteTemplate',
    'service/EditorData',
    'service/fileUpload',
    'service/getAttributeNames',
    'service/getAvailableAttribute',
    'service/GetInformation',
    'service/getInformationByType',
    'service/getInformationItem',
    'service/getPortfolioList',
    'service/getTemplate',
    'service/getTemplateList',
    'service/getTemplateListBasic',
    'service/HTMLGenerator',
    'service/httpJoin',
    'service/httpLogin',
    'service/httpLogout',
    'service/ImageUpload',
    'service/InformationData',
    'service/loadArticle',
    'service/LoadPaper',
    'service/loadPaperDom',
    'service/LoadPaperList',
    'service/memberCallback',
    'service/memberlist',
    'service/modifyPortfolio',
    'service/reloadPa
/**
 * Main application routes
 */
'use strict';
var errors = require('./components/errors');
var path = require('path');
module.exports = function(app) {
  app.use('/api/dashboard', require('./api/dashboard'));
  app.use('/api/ec8', require('./api/ec8'));
  app.use('/api/ec7', require('./api/ec7'));
  app.use('/api/ec6', require('./api/ec6'));
  app.use('/api/ec5', require('./api/ec5'));
  app.use('/api/ec4', require('./api/ec4'));
  app.use('/api/ec3', require('./api/ec3'));
  app.use('/api/ec2', require('./api/ec2'));
  app.use('/api/ec19', require('./api/ec19'));
  app.use('/api/ec18', require('./api/ec18'));
  app.use('/api/ec17', require('./api/ec17'));
  app.use('/api/ec14', require('./api/ec14'));
  app.use('/api/ec13', require('./api/ec13'));
  app.use('/api/ec11', require('./api/ec11'));
  app.use('/api/ec10', require('./api/ec10'));
  app.use('/api/ec1', require('./api/ec1'));
  app.use('/api/en9', require('./api/en9'));
  app.use('/api/en8', require('./api/en8'));
  app.use

  app.use('/api/en6', require('./api/en6'));
  app.use('/api/en5', require('./api/en5'));
  app.use('/api/en4_9', require('./api/en4_9'));
  app.use('/api/en4', require('./api/en4'));
  app.use('/api/en3', require('./api/en3'));
  app.use('/api/en2', require('./api/en2'));
  app.use('/api/en11', require('./api/en11'));
  app.use('/api/en10', require('./api/en10'));
  app.use('/api/en1', require('./api/en1'));
  app.use('/api/lu5', require('./api/lu5'));
  app.use('/api/lu4', require('./api/lu4'));
  app.use('/api/lu3', require('./api/lu3'));
  app.use('/api/lu2', require('./api/lu2'));
  app.use('/api/lu1', require('./api/lu1'));
  app.use('/api/t19', require('./api/t19'));
  app.use('/api/t18', require('./api/t18'));
  app.use('/api/t17', require('./api/t17'));
  app.use('/api/t16', require('./api/t16'));
  app.use('/api/t5', require('./api/t5'));
  app.use('/api/t4', require('./api/t4'));
  app.use('/api/t2', require('./api/t2'));
  app.use('/api/geo', require('./api/geo'));
  app.u
var class_o_r_m_1_1_controller_1_1_controller_factory_test =
    [ "setUp", "class_o_r_m_1_1_controller_1_1_controller_factory_test.html#a0bc688732d2b3b162ffebaf7812e78da", null ],
    [ "testGet", "class_o_r_m_1_1_controller_1_1_controller_factory_test.html#ac2d7c7125d2d3749e9ede4aa2ba6ba3b", null ],
    [ "testGetInvalid", "class_o_r_m_1_1_controller_1_1_controller_factory_test.html#a72f098fe676ef5c9568dc3003c9e8075", null ],
    [ "testGetRegister", "class_o_r_m_1_1_controller_1_1_controller_factory_test.html#a887b8931d2088f5d90ac94bc5f7d9811", null ],
    [ "testGetUnknown", "class_o_r_m_1_1_controller_1_1_controller_factory_test.html#a68e086dd5a43b6dd0b69db84e290f8f4", null ],
    [ "testGetWithArgs", "class_o_r_m_1_1_controller_1_1_controller_factory_test.html#a2c0338a91dd035d94e7b4304a7014e76", null ],
    [ "testSetRegister", "class_o_r_m_1_1_controller_1_1_controller_factory_test.html#acf93a6d0ca25b3d294ae38d5f3a050b0", null ],
    [ "$factory", "class_o_r_m_1_1_controller_1_1
function getStateProps(mapStateToPropsDefault, extra, ...args) {
    if (extra) {
        return (state, ownProps) => ({
            ...mapStateToPropsDefault(...args)(state, ownProps),
            ...extra(...args)(state, ownProps)
        });
    }
    return (state, ownProps) => mapStateToPropsDefault(...args)(state, ownProps);
function getDispatchProps(mapDispatchToPropsDefault, extra, ...args) {
    if (extra) {
        return (dispatch, ownProps) => ({
            ...mapDispatchToPropsDefault(...args)(dispatch, ownProps),
            ...extra(...args)(dispatch, ownProps)
        });
    }
    return (dispatch, ownProps) => mapDispatchToPropsDefault(...args)(dispatch, ownProps);
export default (stateDefault, dispatchDefault) => (...args) => (extraState = null, extraDispatch = null) => {
    const mapStateToProps = getStateProps(stateDefault, extraState, ...args);
    const mapDispatchToProps = getDispatchProps(dispatchDefault, extraDispatch, ...args);
    return reduxConnect(mapSt
var amazonNav = {
    navEnterTimeout : 200,
    mouseoverTimeout : 120,
    pauseBeforeOpening : false,
	init : function() {
            $('ul.primary-nav>li').bind('mouseenter', function(e){
                if ( $('#nav-toggle').css('display') == 'none' ) {
                    var navIndex = $(this).index();
                    if ( amazonNav.pauseBeforeOpening ) {
                        amazonNav.pauseBeforeOpening = false;
                        setTimeout(function(){
                            if ( $(e.target).is(":hover") ) {
                                amazonNav.openNavItem(navIndex);
                            }
                        }, amazonNav.mouseoverTimeout);
                    } else {
                        setTimeout(function(){
                            if ( $(e.target).is(":hover") ) {
                                amazonNav.openNavItem(navIndex);
                            }
                        }, amazonNav.navEnterTimeout);
                    

                }
            });
            $('ul.primary-nav>li').bind('touchstart', function(e){
                if ( $('#nav-toggle').css('display') == 'none' ) {
                    e.preventDefault();
                    var navIndex = $(this).index();
                    if ( amazonNav.pauseBeforeOpening ) {
                        amazonNav.pauseBeforeOpening = false;
                    }
                    if ( $(this).find('a').hasClass('open') ) {
                        window.open( 'http:' + $(this).find('a').attr('href'),'_self' );
                    } else {
                        setTimeout(function(){
                            amazonNav.openNavItem(navIndex);
                        }, amazonNav.navEnterTimeout);
                    }
                }
            });
        
            $(document).bind('touchstart', function(e) {
                if ( $(e.target).closest('ul.primary-nav').length === 0 && $(e.target).closest('.primary-menu-list').length === 0 

                    e.preventDefault();
                    amazonNav.closeNav();
                }
            });
            $('ul.primary-nav>li').bind('mouseleave', function(e){
                if( $(e.toElement || e.relatedTarget).hasClass('primary-menu-item') ) {
                    amazonNav.pauseBeforeOpening = true;
                } else if ( ! $(e.toElement || e.relatedTarget).hasClass('primary-menu-list') ) {
                    amazonNav.closeNav();
                }
            });
            $('.primary-menu-list').bind('mouseleave', function(e){
                if( ! $(e.toElement || e.relatedTarget).hasClass('primary-menu-item') ) {
                    amazonNav.closeNav();
                }
            });
        
	},
    closeNav : function() {
        $('.primary-menu-item').removeClass('open');
        $('.primary-menu-list').removeClass('open');
    },
    openNavItem : function(navIndex) {
        amazonNav.closeNav();
        $('.primary-menu-item:eq(' + nav
"use strict";
var AddAccountModalController = require('cms/view/modal/account/AddAccountModalController');
var AddBucketModalController = require('cms/view/modal/buckets/AddBucketModalController');
var AddContentFieldModalController = require('cms/view/modal/contentField/contentType/AddContentFieldModalController');
var AddContentListModalController = require('cms/view/modal/contentLists/AddContentListModalController');
var AddContentTypeModalController = require('cms/view/modal/contentType/AddContentTypeModalController');
var AddExistingUserMemberModalController = require('cms/view/modal/members/AddExistingUserMemberModalController');
var AddImageModalController = require('cms/view/modal/contentField/contentNode/AddImageModalController');
var AddImageTypeModalController = require('cms/view/modal/contentField/contentNode/AddImageTypeModalController');
var AddMemberModalController = require('cms/view/modal/members/AddMemberModalController');
var AddUserModalController =  require('cms/vi

var ContentNodeAvailabilityModalController = require('cms/view/modal/contentNode/ContentNodeAvailabilityModalController');
var ContentNodeBucketPickerModalController = require('cms/view/modal/contentNode/ContentNodeBucketPickerModalController');
var ContentNodePickerModalController = require('cms/view/modal/contentNode/ContentNodePickerModalController');
var CustomizeSummaryModalController = require('cms/view/modal/contentType/CustomizeSummaryModalController');
var DeleteContentModalController = require('cms/view/modal/layout/DeleteContentModalController');
var DeleteNodeModalController = require('cms/view/modal/contentNode/DeleteNodeModalController');
angular.module('cms.modals', []).run(function(){})
	.controller('addAccountModalController', AddAccountModalController)
	.controller('addBucketModalController', AddBucketModalController)
	.controller('addContentFieldModalController', AddContentFieldModalController)
	.controller('addContentListModalController', AddContentListModalControl
(function(mainNav){
  var $_main, $_navIcon;
  $_main = $( '.main-container' );
  $_navIcon = $( '<i class="fa"></i>' );
  
  var addIcon = function(targetNav) {
    targetNav.before( $_navIcon );
  }
  var expand = function(targetNav) {
    $_navIcon.removeClass( 'open' ).addClass( 'close' );
    targetNav.removeClass( 'collapsed' ).addClass( 'expanded' );
  }
  var collapse = function(targetNav) {
    $_navIcon.removeClass( 'close' ).addClass( 'open' );
    targetNav.removeClass( 'expanded' ).addClass( 'collapsed' );
  }
  var clear = function(targetNav) {
    $_navIcon.removeClass( 'open close' );
    targetNav.removeClass( 'collapsed expanded' );
  }
  mainNav.toggle = function (nav) {
    nav = $( nav );
    
    addIcon( nav );
    
    if (!nav.hasClass('collapsed') && !nav.hasClass('expanded')) {
      $_navIcon.addClass('open');
      nav.addClass( 'collapsed' );
    }
    $_navIcon.on( 'click', function(){ 
      if (nav.hasClass('collapsed')){
        expand(nav); 
      } e
var message = require('./odin.message.js');
var entity = require('./chat.entity.js');
var moment = require('moment');
var ResLoginMessage = function() {
	message.Message.apply(this, arguments);
	this.uid = undefined;
	this.isOk = undefined;
	this.errorMessage = undefined;
	this.publicIp = undefined;
	this.publicPort = undefined;
	this.dummy = undefined;
};
ResLoginMessage.prototype = new message.Message();
ResLoginMessage.prototype.constructor = ResLoginMessage;
exports.ResLoginMessage = ResLoginMessage;
var ResLogoutMessage = function() {
	message.Message.apply(this, arguments);
	this.uid = undefined;
	this.isOk = undefined;
	this.errorMessage = undefined;
};
ResLogoutMessage.prototype = new message.Message();
ResLogoutMessage.prototype.constructor = ResLogoutMessage;
exports.ResLogoutMessage = ResLogoutMessage;
var ResJoinMessage = function() {
	message.Message.apply(this, arguments);
	this.uid = undefined;
	this.isOk = undefined;
	this.errorMessage = undefined;
};
ResJoinMessage.pro

ResJoinMessage.prototype.constructor = ResJoinMessage;
exports.ResJoinMessage = ResJoinMessage;
var NotifyJoinMessage = function() {
	message.Message.apply(this, arguments);
	this.uid = undefined;
	this.group = undefined;
	this.publicIp = undefined;
	this.publicPort = undefined;
};
NotifyJoinMessage.prototype = new message.Message();
NotifyJoinMessage.prototype.constructor = NotifyJoinMessage;
exports.NotifyJoinMessage = NotifyJoinMessage;
var ResLeaveMessage = function() {
	message.Message.apply(this, arguments);
	this.uid = undefined;
	this.isOk = undefined;
	this.errorMessage = undefined;
};
ResLeaveMessage.prototype = new message.Message();
ResLeaveMessage.prototype.constructor = ResLeaveMessage;
exports.ResLeaveMessage = ResLeaveMessage;
var NotifyLeaveMessage = function() {
	message.Message.apply(this, arguments);
	this.uid = undefined;
	this.group = undefined;
};
NotifyLeaveMessage.prototype = new message.Message();
NotifyLeaveMessage.prototype.constructor = NotifyLeaveMessage;
/**
 * Created by pasquale on 26/08/2017.
 */
export function posts(posts) {
    return {
        type: constants.GET_ALL_POSTS,
        posts,
    }
export function post(post) {
    return {
        type: constants.GET_POST,
        post,
    }
export function voteP(vote, id) {
    return {
        type: constants.VOTE_POST,
        vote: vote,
        id: id,
    }
export function deleteP(id) {
    return {
        type: constants.DELETE_POST,
        id,
    }
export function fetchAllPosts() {
    return function (dispatch) {
        dispatch(loadingPosts(true))
        return Api.getPosts().then(
            data => {
                dispatch(loadingPosts(false))
                return dispatch(posts(data))
            },
            error => {
                dispatch(loadingPosts(false))
                dispatch(loadingPostsError())
            }
        )
    }
export function fetchPost(id) {
    return function (dispatch) {
        dispatch(loadingPosts(true))
        return Ap
describe('CollapsibleNav', function () {
  it('Should create div and add collapse class', function () {
    let Parent = React.createClass({
      render() {
        return (
          <Navbar toggleNavKey={1}>
            <CollapsibleNav eventKey={1}>
              <Nav>
                <NavItem eventKey={1} ref='item1'>Item 1 content</NavItem>
                <NavItem eventKey={2} ref='item2'>Item 2 content</NavItem>
              </Nav>
            </CollapsibleNav>
          </Navbar>
        );
      }
    });
    let instance = ReactTestUtils.renderIntoDocument(<Parent />);
    assert.ok(ReactTestUtils.findRenderedDOMComponentWithClass(instance, 'navbar-collapse'));
  });
  it('Should handle multiple Nav elements', function () {
    let Parent = React.createClass({
      render() {
        return (
          <Navbar toggleNavKey={1}>
            <CollapsibleNav eventKey={1} ref='collapsible_object'>
              <Nav>
                <NavItem eventKey={1} ref='item1'>Item 1 cont

                <NavItem eventKey={2} ref='item2'>Item 2 content</NavItem>
              </Nav>
              <Nav>
                <NavItem eventKey={1} ref='item1'>Item 1 content</NavItem>
                <NavItem eventKey={2} ref='item2'>Item 2 content</NavItem>
              </Nav>
            </CollapsibleNav>
          </Navbar>
        );
      }
    });
    let instance = ReactTestUtils.renderIntoDocument(<Parent />);
    assert.ok(ReactTestUtils.findRenderedComponentWithType(instance.refs.collapsible_object.refs.collapsible_0, Nav));
    assert.ok(ReactTestUtils.findRenderedComponentWithType(instance.refs.collapsible_object.refs.collapsible_1, Nav));
  });
  it('Should just render children and move along if not in <Navbar>', function () {
    let Parent = React.createClass({
      render() {
        return (
          <CollapsibleNav eventKey={1}>
            <Nav>
              <NavItem eventKey={1} ref='item1'>Item 1 content</NavItem>
              <NavItem eventKey={2} ref

            </Nav>
          </CollapsibleNav>
        );
      }
    });
    let instance = ReactTestUtils.renderIntoDocument(<Parent />);
    let collapsibleNav = ReactTestUtils.findRenderedComponentWithType(instance, CollapsibleNav);
    assert.notOk(React.findDOMNode(collapsibleNav).className.match(/\navbar-collapse\b/));
    let nav = ReactTestUtils.findRenderedComponentWithType(collapsibleNav.refs.nocollapse_0, Nav);
    assert.ok(nav);
  });
  it('Should retain childrens classes set by className', function () {
    let Parent = React.createClass({
      render() {
        return (
          <Navbar toggleNavKey={1}>
            <CollapsibleNav eventKey={1} ref='collapsible_object'>
              <Nav>
                <NavItem eventKey={1} ref='item1' className='foo bar'>Item 1 content</NavItem>
                <NavItem eventKey={2} ref='item2' className='baz'>Item 2 content</NavItem>
              </Nav>
            </CollapsibleNav>
          </Navbar>
        );
      }
    }
define([
    'utils',
    'services/testOne.service'
], function (utils, serviceTestOne) {
    return {
        _name: 'serviceModel',
        _services: [
            {
                id: 'simpleService',
                service: serviceTestOne,
                method: 'simpleService',
                setModelAttr: 'simpleService'
            },
            {
                id: 'doubleSerialService',
                service: serviceTestOne,
                method: 'doubleSerialService',
                setModelAttr: 'doubleSerialService'
            },
            {
                id: 'doubleSerialServiceRepeated',
                service: serviceTestOne,
                method: 'doubleSerialServiceRepeated',
                setModelAttr: 'doubleSerialServiceRepeated'
            },
            {
                id: 'doubleParallelService',
                service: serviceTestOne,
                method: 'doubleParallelService',
                setModelAttr: 'doubleParallelService'
/**
 * @api {get} api/user/ åçææç¨æ·ä¿¡æ¯
 * @apiName GetAllUser
 * @apiGroup User
 * @apiPermission login user
 * @apiSuccess {Number} id ç¨æ·id
 * @apiSuccess {String} name ç¨æ·å§å
 * @apiSuccess {Number} age ç¨æ·å¹´é¾
 *
 * @apiSuccessExample Success-Response
 *     HTTP/1.1 200 OK
 *	 [
 *	  {
 *	    "id": 1,
 *	    "name": "madidi",
 *	    "age": "18"
 *	  },
 *	  {
 *	    "id": 2,
 *	    "name": "cengjunjun",
 *	    "age": "19"
 *	  }
 *	]
 */
/**
 * @api {get} api/user/:id åå¾æå®idç¨æ·ä¿¡æ¯
 * @apiName GetTheUser
 * @apiGroup User
 * @apiPermission login user
 *
 * @apiParam {Number} id Users unique ID.
 * 
 * @apiSuccess {Number} id ç¨æ·id
 * @apiSuccess {String} name ç¨æ·å§å
 * @apiSuccess {Number} age ç¨æ·å¹´é¾
 *
 * @apiSuccessExample Success-Response
 *     HTTP/1.1 200 OK
 *	  {
 *	    "id": 1,
 *	    "name": "madidi",
 *	    "age": "18"
 *	  }
 *	  
 * @apiError 4xx
 * @apiError NoAccessRight  ç¨æ·æªç»å½
 * @apiError UserNotFound   æ²¡æè¯¥ç¨æ·id
 *
 * @apiErrorExample {json} Error-Response
 *   HTTP/1.1 404 NOT FO
'use strict';
var Promise = require('es6-promise').Promise;
module.exports = {
    name: 'Services',
    services: {},
    plugContext: function () {
      var services = this.services;
      return {
        plugActionContext: function(actionContext) {
          actionContext.getService = function(name) {
            var _service = {}
            for (var method in services[name]) {
              _service[method] = function() {
                var _arguments = arguments;
                return new Promise(function(resolve, reject) {
                  services[name][method].call({
                    resolve: resolve,
                    reject: reject
                  }, _arguments);
                });
              }
            }
            
            return _service;
          }
        }
      }
    },
    registerService: function registerService(service) {
      if (service && service.name) {
        service = this.services[service.name] = service;
        delete service.na
JuiS
	.module("framework")
	.service("AuthenticationService")
	.addMethod("framework/?service=AuthenticationService&method=login", "login", ["username","password"]);
JuiS
	.module("framework")
	.service("AuthenticationService")
	.addMethod("framework/?service=AuthenticationService&method=logout", "logout", []);
JuiS
	.module("contacts")
	.service("ContactService")
	.addMethod("modules/contacts/?service=ContactService&method=__construct", "__construct", ["environment"]);
JuiS
	.module("contacts")
	.service("ContactService")
	.addMethod("modules/contacts/?service=ContactService&method=create", "create", ["data"]);
JuiS
	.module("contacts")
	.service("ContactService")
	.addMethod("modules/contacts/?service=ContactService&method=update", "update", ["id","data"]);
JuiS
	.module("contacts")
	.service("ContactService")
	.addMethod("modules/contacts/?service=ContactService&method=findAll", "findAll", []);
JuiS
	.module("products")
	.service("ProductService")
	.addMethod("modules/products/?serv
Ext.application({
	requires : [ 'Ext.container.Viewport'],
    name: 'scholar',
    autoCreateViewport: true,
    
    /*launch: function() {
        Ext.create('Ext.container.Viewport', {
            layout: 'fit',
            items: [
                {
                    title: 'Scholar',
                    html : 'Hello! Welcome to Scholar.'
                }
            ]
        });
    }*/
    
    controllers: [
                  'Scholar',
                  'scholar.controller.administration.DashboardController',
                  'scholar.controller.administration.settings.batch.Controller',
                  'scholar.controller.administration.settings.department.Controller',
                  'scholar.controller.administration.settings.course.Controller',
                  'scholar.controller.administration.settings.general.Controller',
                  'scholar.controller.administration.settings.nationality.Controller',
                  'scholar.controller.administration

                  'scholar.controller.administration.settings.bloodgroup.Controller',
                  'scholar.controller.administration.settings.subject.Controller',                  
                  'scholar.controller.administration.inventory.elec.Controller',
                  'scholar.controller.administration.inventory.infra.Controller',
                  'scholar.controller.administration.inventory.perishable.Controller',                  
                  'scholar.controller.administration.user.roles.Controller',
                  'scholar.controller.administration.user.Controller',
                  
                  'scholar.controller.finance.fees.Controller',
                  'scholar.controller.finance.payroll.Controller',
                  'scholar.controller.finance.settings.general.Controller',
                  
                  'scholar.controller.library.lookup.Controller',
                  
                  'scholar.controller.staff.examination.schedule.C

                  'scholar.controller.staff.examination.settings.Controller',                  
                  'scholar.controller.staff.attendance.Controller',
                  'scholar.controller.staff.event.Controller',
                  'scholar.controller.staff.leave.settings.Controller',
                  'scholar.controller.staff.leave.report.Controller',
                  'scholar.controller.staff.lookup.Controller',
                  'scholar.controller.staff.timetable.Controller',
                  
                  'student.admission.Controller',
                  'scholar.controller.student.attendance.Controller',
                  'scholar.controller.student.lookup.Controller',
                  'scholar.controller.student.performance.Controller',
                  'scholar.controller.student.Controller',
                  
                  'scholar.controller.transport.route.Controller',
                  'scholar.controller.transport.vehicle.Controller',
         
/*------------------------------------------------------------------------------
    Application
------------------------------------------------------------------------------*/
'use strict';
/**
 *  Application
 *  Extended Controller
 */
var App = Controller.extend({
    /**
     *  Constructor
     *  @constructor
     */
    constructor () {
        this.controllers = {};
        this.mainController = {
            name:   null,
            view:   null
        };
        Controller.apply(this, arguments);
    },
    /**
     *  Add Controller
     *  Add controller blueprint.
     *
     *  @param  {string}    name        Controller name
     *  @param  {Object}    controller  Controller blueprint
     *  @return {Object}    controller  Controller blueprint
     */
    addController (name, controller) {
        return this.controllers[name] = controller;
    },
    /**
     *  Initialize Controller
     *  Initialize controller from existing controller blueprints.
     *
     *  @

     *  @param  {Object}    args        Arguments
     *  @return {Object}    controller  Controller instance
     */
    initController (name, args) {
        return this.controllers[name] && (this.addSubview(new this.controllers[name](args)));
    },
    /**
     *  Set Up Main Controller
     *  Set up main controller, run controller method with given data and render it to given region.
     *  If controller is already initialized, just run controller method with given data.
     *
     *  @param  {string}    region          Region name
     *  @param  {string}    controller      Controller name
     *  @param  {string}    method          Controller method name
     *  @param  {Object}    data            JSON Object
     *  @return {Object}    controller view Initialized controller view instance
     */
    setupMainController (region, controller, method, data) {
        if (this.mainController.name === controller) {
            this.mainController.view[method] && (this.mainControl

        } else {
            this.mainController.view && (this.mainController.view.close());
            this.mainController = {
                name:   controller,
                view:   this.initController(controller, {method: method, data: data})
            };
            this.renderTo(region, [this.mainController.view.el]);
        }
        return this.mainController.view;
    },
    /**
     *  Destroy Main Controller
     *  Destroy main controller.
     *
     *  @return {Object}    this    Instance of this controller
     */
    destroyMainController () {
        this.mainController.view && (this.mainController.view.close());
        this.mainController = {
            name:   null,
            view:   null
        };
        return this;
    },
    /**
     *  Remove Controller
     *  Remove controller blueprint.
     *
     *  @param  {string}    name                Controller name
     *  @return {mixed}     undefined or true   Returns true if controller blueprint is su
var eventbus = require("eventbus");
function parseMessage(message, args) {
    var parts = message.split("{}");
    var result = [];
    for (var i = 0; i < parts.length; ++i) {
        if (i > 0)
            result.push(args[i]);
        result.push(parts[i]);
    }
    return result.join("");
exports.trace = function(message) {
    /* do not print trace */
    console.log("[TRACE]", parseMessage(message, arguments));
};
exports.info = function(message) {
    message = parseMessage(message, arguments);
    console.log("[INFO]", message);
    eventbus.publish("log", {
                         level: "info",
                         message: message
                     });
};
exports.warn = function(message) {
    message = parseMessage(message, arguments);
    console.log("[WARN]", message);
    eventbus.publish("log", {
                         level: "warn",
                         message: message
                     });
};
exports.error = function(message) {
    message = parseM
var modules =
    [ "Introduction", "index.html#intro", null ],
    [ "cs", "group__cs__api.html", "group__cs__api" ],
    [ "eusci_a_spi", "group__eusci__a__spi__api.html", "group__eusci__a__spi__api" ],
    [ "eusci_a_uart", "group__eusci__a__uart__api.html", "group__eusci__a__uart__api" ],
    [ "eusci_b_i2c", "group__eusci__b__i2c__api.html", "group__eusci__b__i2c__api" ],
    [ "eusci_b_spi", "group__eusci__b__spi__api.html", "group__eusci__b__spi__api" ],
    [ "flashctl", "group__flashctl__api.html", "group__flashctl__api" ],
    [ "gpio", "group__gpio__api.html", "group__gpio__api" ],
    [ "mpy", "group__mpy__api.html", "group__mpy__api" ],
    [ "pmm", "group__pmm__api.html", "group__pmm__api" ],
    [ "sd24", "group__sd24__api.html", "group__sd24__api" ],
    [ "sfr", "group__sfr__api.html", "group__sfr__api" ],
    [ "timer_a", "group__timer__a__api.html", "group__timer__a__api" ],
    [ "tlv", "group__tlv__api.html", "group__tlv__api" ],
    [ "wdt", "group__wdt__api.html"
hui.ui.listen({
	$ready : function() {
		showStreetname.setValue(partToolbar.partForm.show_streetname.value);
		showCity.setValue(partToolbar.partForm.show_city.value);
		showCountry.setValue(partToolbar.partForm.show_country.value);
		showZipcode.setValue(partToolbar.partForm.show_zipcode.value);
		showFirstName.setValue(partToolbar.partForm.show_firstname.value);
		showMiddleName.setValue(partToolbar.partForm.show_middlename.value);
		showSurname.setValue(partToolbar.partForm.show_surname.value);
		showNickname.setValue(partToolbar.partForm.show_nickname.value);
		showInitials.setValue(partToolbar.partForm.show_initials.value);
		showSex.setValue(partToolbar.partForm.show_sex.value);
		showWebaddress.setValue(partToolbar.partForm.show_webaddress.value);
		showImage.setValue(partToolbar.partForm.show_image.value);
		showEmailPrivate.setValue(partToolbar.partForm.show_emailprivate.value);
		showEmailJob.setValue(partToolbar.partForm.show_emailjob.value);
		showPhonePrivate.setValue(par

		showPhoneJob.setValue(partToolbar.partForm.show_phonejob.value);
		alignment.setValue(partToolbar.partForm.align.value);
	},
	$valueChanged$alignment : function(value) {
		this.update();
	},
	$valueChanged$showFirstName : function(value) {
		this.update();
	},
	$valueChanged$showMiddleName : function(value) {
		this.update();
	},
	$valueChanged$showSurname : function(value) {
		this.update();
	},
	$valueChanged$showNickname : function(value) {
		this.update();
	},
	$valueChanged$showInitials : function(value) {
		this.update();
	},
	$valueChanged$showSex : function(value) {
		this.update();
	},
	$valueChanged$showCity : function(value) {
		this.update();
	},
	$valueChanged$showZipcode : function(value) {
		this.update();
	},
	$valueChanged$showStreetname : function(value) {
		this.update();
	},
	$valueChanged$showCountry : function(value) {
		this.update();
	},
	$valueChanged$showWebaddress : function(value) {
		this.update();
	},
	$valueChanged$showImage : function(value) {
		this.

	},
	$valueChanged$showEmailPrivate : function(value) {
		this.update();
	},
	$valueChanged$showEmailJob : function(value) {
		this.update();
	},
	$valueChanged$showPhonePrivate : function(value) {
		this.update();
	},
	$valueChanged$showPhoneJob : function(value) {
		this.update();
	},
	update : function() {
		partToolbar.partForm.align.value=alignment.getValue() || '';
		partToolbar.partForm.show_firstname.value=showFirstName.getValue();
		partToolbar.partForm.show_middlename.value=showMiddleName.getValue();
		partToolbar.partForm.show_surname.value=showSurname.getValue();
		partToolbar.partForm.show_nickname.value=showNickname.getValue();
		partToolbar.partForm.show_initials.value=showInitials.getValue();
		partToolbar.partForm.show_sex.value=showSex.getValue();
		partToolbar.partForm.show_streetname.value=showStreetname.getValue();
		partToolbar.partForm.show_city.value=showCity.getValue();
		partToolbar.partForm.show_zipcode.value=showZipcode.getValue();
		partToolbar.partForm.sh
goog.provide('cljs.core.async.impl.dispatch');
goog.require('cljs.core');
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = null;
if(typeof MessageChannel !== 'undefined')
{cljs.core.async.impl.dispatch.message_channel = (new MessageChannel());
cljs.core.async.impl.dispatch.tasks = [];
cljs.core.async.impl.dispatch.message_channel.port1.onmessage = (function (msg){
return cljs.core.async.impl.dispatch.tasks.shift().call(null);
});
} else
{}
cljs.core.async.impl.dispatch.queue_task = (function queue_task(f){
cljs.core.async.impl.dispatch.tasks.push(f);
return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
});
cljs.core.async.impl.dispatch.run = (function run(f){
if(typeof MessageChannel !== 'undefined')
{return cljs.core.async.impl.dispatch.queue_task.call(null,f);
} else
{if(typeof setImmediate !== 'undefined')
{return setImmediate(f);
} else
{if("\uFDD0:else")
{return setTimeout(f,0);
} else
{return null;
});
cljs.core.asy
var Promise = require( 'promise' );
var _ = require( 'lodash' );
var path = require( 'path' );
var Show = require( '../models/show' );
function getFromShowRSS( showRSSUserID, baseDir ) {
  return require( '../lib/show_rss' ).showNames( showRSSUserID )
    .then(function( names ) {
      return names.map(function( name ) {
        return new Show( name, path.resolve( baseDir, name ) );
      });
    });
function getSubDirs( dir ) {
  return require( '../lib/subdirs' )( dir )
    .then(function( names ) {
      return names.map(function( name ) {
        return new Show( name, path.resolve( dir, name ) );
      });
    });
module.exports = function( showDirs, showRSSUserID ) {
  var defaultDir = showDirs[ 0 ];
  var showRSS = showRSSUserID ? getFromShowRSS( showRSSUserID, defaultDir ) : [];
  var showsFromDirs = showDirs.map( getSubDirs );
  return Promise.all( _.flatten([ showRSS, showsFromDirs ]) )
    .then(function( shows ) {
      var uniqueShows = _.flatten( shows ).reduce(function
var nav_button,
    nav_anchorList,
    nav_index = 0 ,
    nav_anchorLen,
    nav_startY,
    nav_destinationY,
    nav_currentDiffY,
    nav_event = 'click',
    nav_duration = 500,
    nav_startTime,
    nav_currentTime,
    nav_timeIncrement = 20,
    nav_callback = updateArrowDirection,
    nav_doc = (navigator.userAgent.indexOf('Firefox') != -1 || navigator.userAgent.indexOf('MSIE') != -1) ? document.documentElement : document.body;
toolBox.readyAndWilling(initNavJumper) ;
function initNavJumper ()
    'use strict' ;
    nav_button = document.querySelector('.js-nav-jumper__button');
    nav_anchorList = document.querySelectorAll('section');
    nav_anchorLen = nav_anchorList.length  ;
    
    refreshCursorIndex();
    if (nav_button.addEventListener) 
    { nav_button.addEventListener(nav_event, nav_clickHandler); } 
    else 
    {
        nav_button.attachEvent('on' + nav_event, function()
        { nav_clickHandler.call(nav_button); });
    }
    
function refreshCursorIndex(

    'use strict' ;
    nav_startY = nav_doc.scrollTop ;
    var anchor,
    anchorPos;
    nav_index = 0 ;
    while (nav_index<nav_anchorLen  )
    {
        anchor = nav_anchorList[nav_index] ;
        anchorPos = anchor.offsetTop ;
        if (nav_startY<anchorPos)
        { break ; }
        nav_index++;
    }
    updateArrowDirection();
    anchor = null;
    anchorPos = null ;
function updateArrowDirection()
    'use strict' ;
    nav_button.dataset.direction = (nav_index == nav_anchorLen) ? 'up' : 'down'
function nav_clickHandler(event)
    'use strict' ;
    refreshCursorIndex();
    if (nav_index == nav_anchorLen) 
    {
        nav_destinationY = 0 ;
        nav_index = 0 ;
    }
    else
    {
        var anchor = nav_anchorList[nav_index] ;
        nav_destinationY = anchor.offsetTop ;
        nav_index = nav_index+1 ;    
    }
    nav_startTime = null;
    nav_doScroll();
function nav_doScroll( ) 
 'use strict' ;
  nav_startY = nav_doc.scrollTop,
  nav_currentDiffY = nav
define([
    'angular',
    './settings-service',
    './products-service',
    './shopping-service',
    './auth-service',
    './pubsub-service',
    'restangular',
    'angularStorage'
], function (angular, settingsService, productsService, shoppingService, authService, pubsubService) {
    'use strict';
    var moduleName = 'southerncreations.core.services',
        module;
    module = angular.module(moduleName, [
            'restangular',
            'LocalStorageModule'
        ])
        .constant('STORAGE_KEYS', {
            'JWT': 'jwt',
            'SETTINGS': 'settings',
            'CART': 'cart'
        })
        .constant('API', {
            'BASE': '/api',
            'BASE_LOGIN': 'login',
            'BASE_SIGNIN': 'signin',
            'BASE_CATEGORIES': 'categories',
            'BASE_PRODUCTS': 'products',
            'BASE_SETTINGS': 'settings'
        })
        .config(['RestangularProvider', 'API', function (RestangularProvider, API) {
            Restangul
/* Configuration of angular, creation of controller, service...  */
var app = angular.module('search-module',['ngRoute','angular-ace-editor','ui.grid','ui.bootstrap', 'ui.grid.autoResize'
                                          , 'ui.grid.edit', 'ui.grid.cellNav', 'ui.grid.expandable','ui.grid.resizeColumns']);
app
    .service('SearchServ',SearchService)
    .service('HostServ',HostService)
    .service('BatchServ',BatchService)
    .service('OrganizationServ',OrganizationService)
    .controller('HomeController',HomeController)
    .controller('SearchController',SearchController)
    .controller('ResultsController',ResultsController)
    .controller('OrganizationController',OrganizationController)
    .controller('ReferentielController',ReferentielController)
    .controller('OtherDataController',OtherDataController)
    .controller('BatchController',BatchController)
    .controller('ModalInstanceCtrl',ModalInstanceCtrl)
    .config(function($routeProvider){
        configRoute($ro
'use strict';
tatool
  .controller('tatoolShiftingCtrl', [ '$scope', 'service',
    function ($scope, service) {
    $scope.cueService = service.cueService;
    $scope.stimulusService = service.stimulusService;
    $scope.inputService = service.inputService;
    $scope.displayCross = false;
    $scope.start = function() {
      service.createStimulus();
      displayCue();
    };
    function displayCue() {
      service.cueService.show();
      service.cueTimer.start(displayStimulus);
    }
    function displayStimulus() {
      service.inputService.enable();
      if (service.showKeys.propertyValue === true) {
        service.inputService.show();
      }
      if (service.timerEnabled.propertyValue === true) {
        service.timer.start(timerUp);
      }
      service.startTime = service.stimulusService.show();
    }
    function timerUp() {
      service.inputService.disable();
      service.endTime = service.stimulusService.hide();
      service.processResponse('');
    }
    $sco
'use strict';
const mapStateToProps = (state) => {
	return {
		authFailed: state.auth.authFailed,
		authError: state.auth.error,
		isFetching: state.fetch.isFetching
	};
const mapDispatchToProps = (dispatch) => {
	return {
		signIn: (username, password) => {
			dispatch(actions.fetchStart());
			api.signIn(username, password)
				.then((data) => {
					dispatch(actions.authenticateSuccess(data.username, data.token));
					dispatch(push('/'));
					dispatch(actions.fetchEnd());
				}).catch((data) => {
					dispatch(actions.authenticateFail(data.username, data.error));
					dispatch(actions.fetchEnd());
				});
		},
		signUp: (username, password) => {
			dispatch(actions.fetchStart());
			api.signUp(username, password)
				.then((data) => {
					dispatch(actions.authenticateSuccess(data.username, data.token));
					dispatch(push('/'));
					dispatch(actions.fetchEnd());
				}).catch((data) => {
					dispatch(actions.authenticateFail(data.username, data.error));
					dispatch(actions.fet
var menuLeft = document.getElementById( 'cbp-spmenu-s1' ),
				menuRight = document.getElementById( 'cbp-spmenu-s2' ),
				menuRight1 = document.getElementById( 'cbp-spmenu-s5' ),
                                menuTop = document.getElementById( 'cbp-spmenu-s3' ),
				menuBottom = document.getElementById( 'cbp-spmenu-s4' ),
				showLeft = document.getElementById( 'showLeft' ),
				showRight = document.getElementById( 'showRight' ),
                                showRight1 = document.getElementById( 'showRight1' ),
				showTop = document.getElementById( 'showTop' ),
				showBottom = document.getElementById( 'showBottom' ),
				showLeftPush = document.getElementById( 'showLeftPush' ),
                                showTopPush = document.getElementById( 'showTopPush' ),
				showRightPush = document.getElementById( 'showRightPush' ),
				body = document.body;
			
			showLeftPush.onclick = function() {
				classie.toggle( this, 'active' );
				classie.toggle( body, 'cbp-spmenu-push-tor

				classie.toggle( menuLeft, 'cbp-spmenu-open' );
				disableOther( 'showLeftPush' );
			};
                        showTopPush.onclick = function() {
				classie.toggle( this, 'active' );
				classie.toggle( body, 'cbp-spmenu-push-todown' );
				classie.toggle( menuTop, 'cbp-spmenu-open' );
				disableOther( 'showTopPush' );
			};
                        showRight.onclick = function() {
				classie.toggle( this, 'active' );
				classie.toggle( menuRight, 'cbp-spmenu-open' );
				disableOther( 'showRight' );
			};
                        showRight1.onclick = function() {
				classie.toggle( this, 'active' );
				classie.toggle( menuRight1, 'cbp-spmenu-open' );
				disableOther( 'showRight1' );
			};
			function disableOther( button ) {
				if( button !== 'showLeft' ) {
					classie.toggle( showLeft, 'disabled' );
				}
				if( button !== 'showRight' ) {
					classie.toggle( showRight, 'disabled' );
				}
                                if( button !== 'showRight1' ) {
					classie.tog
function renderBackground(canvas, ctx) { 
    ctx.fillStyle = '#fff';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
function enableRetina(canvas, ctx) {
    if (window.devicePixelRatio) {
        var ratio = window.devicePixelRatio;
        var w = canvas.width;
        var h = canvas.height;
        canvas.width = w * ratio;
        canvas.height = h * ratio;
        canvas.style.width = w + 'px';
        canvas.style.height = h + 'px';
        ctx.scale(ratio, ratio);
    }
function debugLayout(canvas, ctx) {
    doc = (function() {
        var ret = [ ];
        var incrPitch = function(pitch) {
            var octave = parseInt(pitch[1]);
            var note = String.fromCharCode(pitch.charCodeAt(0) + 1);
            if (note == 'H') {
                note = 'A';
                ++octave;
            }
            return note + octave;
        }
        for (var iter = 0; iter < 3; ++iter) {
            var denom = 1;
            var pitch = 'C3';
            for (var i = 0

                var length = '1/' + denom;
                for (var j = 0; j < denom; ++j) {
                    ret.push({ show: 'note', length: length, pitch: pitch });
                    pitch = incrPitch(pitch);
                }
                ret.push({ show: 'measure' });
                denom *= 2;
            }
        }
        return ret;
    })();
    doc = [
        { title: "Hot Cross Buns (Dubstep Remix)" },
        { composer: "notate.js" },
                                                          
        { clef: "treble" },
                                                          
        { show: "clef", type: "treble" },
        { show: "timesig", over: 4, under: 4 },
        { show: "keysig", key: "C major" },
                                                          
        /*
        { show: "note", pitch: "B5", length: "quarter" },
        { show: "note", pitch: "A5", length: "quarter" },
        { show: "note", pitch: "G4", length: "half" },
        { show

                                                          
        { show: "note", pitch: "B5", length: "quarter" },
        { show: "note", pitch: "A5", length: "quarter" },
        { show: "note", pitch: "G4", length: "half" },
        { show: "measure" },
                                                          
        { begin: "tuplet", beats: 3 },
        { show: "note", pitch: "G4", length: "eighth" },
        { show: "note", pitch: "G4", length: "eighth" },
        { show: "note", pitch: "G4", length: "eighth" },
        { end: "tuplet" },
        
        { begin: "tuplet", beats: 3 },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { end: "tuplet" },
        { show: "measure" },
        { begin: 'tuplet', beats: '63 : 42' },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        

        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "measure" },
        { show: "note", pitch: "G3", length: "eighth" },
        { show: "note", pitch: "F3", length: "eighth" },
        { show: "note", pitch: "E3", length: "eighth" },
        { show: "note", pitch: "D3", length: "eighth" },
        { show: "note", pitch: "C3", length: "eighth" },
        { show: "note", pitch: "B3", length: "eighth" },
        { show: "note", pitch: "A3", length: "eighth" },
        { show: "measure" },
        { show: "note", pitch

        { show: "note", pitch: "B3", length: "eighth" },
        { show: "note", pitch: "C3", length: "eighth" },
        { show: "note", pitch: "D3", length: "eighth" },
        { show: "note", pitch: "E3", length: "eighth" },
        { show: "note", pitch: "F3", length: "eighth" },
        { show: "note", pitch: "G3", length: "eighth" },
        { show: "measure" },
        */
        { begin: "slur" },
        { show: "note", pitch: "G5", length: "eighth" },
        { show: "note", pitch: "F5", length: "eighth" },
        { show: "note", pitch: "E5", length: "eighth" },
        { show: "note", pitch: "D5", length: "eighth" },
        { show: "note", pitch: "C5", length: "eighth" },
        { show: "note", pitch: "B5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { end: "slur" },
        { begin: "slur" },
        { show: "measure" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "B5", length: "eighth"

        { show: "note", pitch: "C5", length: "eighth" },
        { show: "note", pitch: "D5", length: "eighth" },
        { show: "note", pitch: "E5", length: "eighth" },
        { show: "note", pitch: "F5", length: "eighth" },
        { show: "note", pitch: "G5", length: "eighth" },
        { end: "slur" },
        /*
        { show: "measure" },
        { show: "note", pitch: "G4", length: "eighth" },
        { show: "note", pitch: "F4", length: "eighth" },
        { show: "note", pitch: "E4", length: "eighth" },
        { show: "note", pitch: "D4", length: "eighth" },
        { show: "note", pitch: "C4", length: "eighth" },
        { show: "note", pitch: "B4", length: "eighth" },
        { show: "note", pitch: "A4", length: "eighth" },
        { show: "measure" },
        { show: "note", pitch: "A4", length: "eighth" },
        { show: "note", pitch: "B4", length: "eighth" },
        { show: "note", pitch: "C4", length: "eighth" },
        { show: "note", pitch: "D4", length: "eigh

        { show: "note", pitch: "E4", length: "eighth" },
        { show: "note", pitch: "F4", length: "eighth" },
        { show: "note", pitch: "G4", length: "eighth" },
        { show: "measure" },
        { show: "note", pitch: "G4", length: "eighth" },
        { show: "note", pitch: "F4", length: "eighth" },
        { show: "note", pitch: "E4", length: "eighth" },
        { show: "note", pitch: "D4", length: "eighth" },
        { show: "note", pitch: "C4", length: "eighth" },
        { show: "note", pitch: "B4", length: "eighth" },
        { show: "note", pitch: "A4", length: "eighth" },
        { show: "measure" },
        { show: "note", pitch: "A4", length: "eighth" },
        { show: "note", pitch: "B4", length: "eighth" },
        { show: "note", pitch: "C4", length: "eighth" },
        { show: "note", pitch: "D4", length: "eighth" },
        { show: "note", pitch: "E4", length: "eighth" },
        { show: "note", pitch: "F4", length: "eighth" },
        { show: "note", pitch

        { show: "measure" },
        { break: 'line' },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "measure" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
  

        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "measure" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { show: "note", pitch: "A5", length: "eighth" },
        { end: 'tuplet' },
        { show: "measure" },
                                                          

define(['utils'], function (utils) {
        parseServices = function () {
            _.each(this._services, function (service) {
                service.id = service.id || _.uniqueId('service');
            });
        },
        parseInitialServices = function () {
            this._initialServices = utils.parseArray(this._initialServices);
        },
        onServiceResolve = function (service, data) {
            service.responseData = data;
            if (service.setModelAttr) {
                this.set(service.setModelAttr, data);
            }
            if (service.onSuccess) {
                utils.foo(this, service.onSuccess, undefined, data, service);
            }
            triggerServiceInProgress.call(this, service);
        },
        onServiceReject = function (service, responseError) {
            var serviceErrorCallback = service['onError' + responseError.code];
            service.responseData = undefined;
            if (serviceErrorCallback) {
              

            }
            triggerServiceInProgress.call(this, service);
        },
        triggerServiceInProgress = function (service) {
            var id = service.id,
                position = this._serviceInProgress.indexOf(id),
                nowInProgress = position < 0;
            if (nowInProgress) {
            } else {
                this._serviceInProgress = _.compact(this._serviceInProgress);
            }
            this.trigger('serviceInProgress:' + id, nowInProgress);
            if (nowInProgress && _.size(this._serviceInProgress) === 1) {
                this.trigger('serviceInProgress', true);
            } else if (_.size(this._serviceInProgress) === 0) {
                this.trigger('serviceInProgress', false);
            }
        },
        getServiceOptions = function () {
            return {
                app: this.app
            };
        };
    _.extend(Backbone.Model.prototype, {
        initServices: function () {
            parseServices.cal

            parseInitialServices.call(this);
            _.each(this._services, function (service) {
                if (this._initialServices.indexOf(service.id) >= 0) {
                    this.callService(service);
                }
            }, this);
        },
        callService: function (service) {
            var that = this;
            service.inProgress = true;
            triggerServiceInProgress.call(this, service);
            return utils.services.run(service, getServiceOptions.call(this))
                .done(function (responseData) {
                    onServiceResolve.call(that, service, responseData);
                })
                .fail(function (responseError) {
                    onServiceReject.call(that, service, responseError);
                })
                .always(function () {
                    service.inProgress = false;
                });
        },
        callServiceById: function (serviceId) {
            var service = _.find(this._se
var searchData=
  ['debug',['debug',['../class_log_service.html#a49c41e3a2b535b938c7e14c000d5b472',1,'LogService']]],
  ['decreasequantity',['decreaseQuantity',['../class_cart_service.html#a52b92a1e9621ade18ae387b0f8a83657',1,'CartService']]],
  ['deductscore',['deductScore',['../class_score_service.html#a2899145623ded43fd85cbfd734e53f6d',1,'ScoreService']]],
  ['delete',['delete',['../class_rest_client.html#aad52c04b3af8a7d3232013daa739e053',1,'RestClient']]],
  ['deleteallavatars',['deleteAllAvatars',['../class_avatar_service.html#aea18c8803a12507dd4d700eabdd01956',1,'AvatarService']]],
  ['deleteallpreferences',['deleteAllPreferences',['../class_recommender_service.html#a468ae67c8db20494d0197d4887c5668a',1,'RecommenderService']]],
  ['deleteavatarbyname',['deleteAvatarByName',['../class_avatar_service.html#a4dc0b42993128ca0c28f9f3178e81b58',1,'AvatarService']]],
  ['deletechannel',['deleteChannel',['../class_push_notification_service.html#a7c05d342b993f465b4f0b294c93b0ca8',1,'PushNo
var dir_8c760fc340e6f9e962d5440c08e4e17f =
    [ "accessService.php", "d1/daa/access_service_8php.html", [
      [ "accessService", "d1/d73/classaccess_service.html", "d1/d73/classaccess_service" ],
      [ "RestrictedView", "df/d54/class_restricted_view.html", "df/d54/class_restricted_view" ],
      [ "RestrictedRole", "d4/d69/class_restricted_role.html", "d4/d69/class_restricted_role" ]
    ] ],
    [ "aclService.php", "dc/de0/acl_service_8php.html", "dc/de0/acl_service_8php" ],
    [ "auditService.php", "df/db7/audit_service_8php.html", [
      [ "auditService", "dc/d88/classaudit_service.html", "dc/d88/classaudit_service" ]
    ] ],
    [ "authService.php", "d2/d38/auth_service_8php.html", [
      [ "authService", "d9/d94/classauth_service.html", "d9/d94/classauth_service" ]
    ] ],
    [ "cacheService.php", "db/dcd/cache_service_8php.html", [
      [ "cacheService", "db/d43/classcache_service.html", "db/d43/classcache_service" ]
    ] ],
    [ "chartService.php", "df/d88/chart_se

      [ "chartService", "de/d97/classchart_service.html", "de/d97/classchart_service" ]
    ] ],
    [ "compileService.php", "dd/d8e/compile_service_8php.html", [
      [ "compileService", "de/d18/classcompile_service.html", "de/d18/classcompile_service" ]
    ] ],
    [ "cryptService.php", "d4/d82/crypt_service_8php.html", [
      [ "cryptService", "db/d31/classcrypt_service.html", "db/d31/classcrypt_service" ]
    ] ],
    [ "doTriggerService.php", "d5/de9/do_trigger_service_8php.html", [
      [ "doTriggerService", "dd/df1/classdo_trigger_service.html", "dd/df1/classdo_trigger_service" ],
      [ "DOTrigger", "dc/dc8/class_d_o_trigger.html", "dc/dc8/class_d_o_trigger" ],
      [ "TriggerAction", "d4/dfd/class_trigger_action.html", "d4/dfd/class_trigger_action" ]
    ] ],
    [ "emailService.php", "dc/d38/email_service_8php.html", [
      [ "emailService", "de/dfa/classemail_service.html", "de/dfa/classemail_service" ],
      [ "EmailAccount", "db/de7/class_email_account.html", "db/

    ] ],
    [ "excelService.php", "de/d2c/excel_service_8php.html", [
      [ "excelService", "d9/dd4/classexcel_service.html", "d9/dd4/classexcel_service" ]
    ] ],
    [ "genIdService.php", "d7/d58/gen_id_service_8php.html", [
      [ "genIdService", "da/d73/classgen_id_service.html", "da/d73/classgen_id_service" ]
    ] ],
    [ "ioService.php", "dc/da5/io_service_8php.html", [
      [ "ioService", "df/d27/classio_service.html", "df/d27/classio_service" ]
    ] ],
    [ "localeInfoService.php", "d4/dc6/locale_info_service_8php.html", [
      [ "localeInfoService", "d4/d44/classlocale_info_service.html", "d4/d44/classlocale_info_service" ]
    ] ],
    [ "logService.php", "d5/d84/log_service_8php.html", [
      [ "logService", "db/d75/classlog_service.html", "db/d75/classlog_service" ]
    ] ],
    [ "pdfService.php", "da/d9a/pdf_service_8php.html", [
      [ "pdfService", "d3/d43/classpdf_service.html", "d3/d43/classpdf_service" ]
    ] ],
    [ "profileService.php", "d6/da8/prof

      [ "profileService", "d6/d59/classprofile_service.html", "d6/d59/classprofile_service" ]
    ] ],
    [ "queryService.php", "d5/d06/query_service_8php.html", [
      [ "queryService", "d0/df8/classquery_service.html", "d0/df8/classquery_service" ]
    ] ],
    [ "reportService.php", "dc/d81/report_service_8php.html", [
      [ "reportService", "d0/d6b/classreport_service.html", "d0/d6b/classreport_service" ]
    ] ],
    [ "securityService.php", "d5/d85/security_service_8php.html", [
      [ "securityService", "d0/d7d/classsecurity_service.html", "d0/d7d/classsecurity_service" ],
      [ "securityFilter", "d0/db4/classsecurity_filter.html", "d0/db4/classsecurity_filter" ],
      [ "iSecurityRule", "d6/d38/interfacei_security_rule.html", "d6/d38/interfacei_security_rule" ],
      [ "securityRule_Abstract", "d1/d18/classsecurity_rule___abstract.html", "d1/d18/classsecurity_rule___abstract" ],
      [ "URLFilterRule", "d5/def/class_u_r_l_filter_rule.html", "d5/def/class_u_r_l_filter
(function () {
    'use strict';
    global.$ = global.jQuery = require('jquery');
    global.angular = require('angular');
    global.rangy = require('rangy');
    require('angular-ui-router');
    require('angular-sanitize');
    require('angular-messages');
    require('angular-animate');
    require('angular-aria');
    require('angular-material');
    require('textangular');
    var angular = require('angular'),
        app;
    var
    /*Controllers*/
        homeController = require('./controllers/homeController'),
        loginController = require('./controllers/loginController'),
        shellController = require('./controllers/shellController'),
        searchController = require('./controllers/searchController'),
        dashboardController = require('./controllers/dashboardController'),
        groupController = require('./controllers/groupController'),
        questionController = require('./controllers/questionController'),
    /*Dialogs*/
        newUserController = requ

        newGroupController = require('./controllers/dialogs/newGroupController'),
        newQuestionController = require('./controllers/dialogs/newQuestionController'),
    /*Services*/
        UserService = require('./services/UserService'),
        GroupService = require('./services/GroupService'),
        QuestionService = require('./services/QuestionService'),
        ResourceService = require('./services/ResourceService'),
        ToastService = require('./services/ToastService'),
    /*Directives*/
        goClickDirective = require('./directives/goClick'),
        equalsDirective = require('./directives/equals'),
    /*Configs*/
        routerConfig = require('./config/router'),
        iconsConfig = require('./config/icons'),
        textAngularConfig = require('./config/textAngular'),
        themeConfig = require('./config/theme');
    app = angular.module('app', [
            'ui.router',
            'ngAnimate',
            'ngAria',
            'ngMessages',
            

            'ngMaterial',
            'textAngular'
        ])
        .controller('homeController', homeController)
        .controller('dashboardController', dashboardController)
        .controller('loginController', loginController)
        .controller('shellController', shellController)
        .controller('newUserController', newUserController)
        .controller('newGroupController', newGroupController)
        .controller('newQuestionController', newQuestionController)
        .controller('searchController', searchController)
        .controller('dashboardController', dashboardController)
        .controller('groupController', groupController)
        .controller('questionController', questionController)
        .factory('UserService', UserService)
        .factory('GroupService', GroupService)
        .factory('QuestionService', QuestionService)
        .service('ResourceService', ResourceService)
        .service('ToastService', ToastService)
        .directive('goClick', g
export function increaseIndex () {
  return (dispatch) => {
    dispatch({
      type: types.INCREASE_INDEX,
    })
  }
export function setReadyToCalculate () {
  return (dispatch) => {
    dispatch({
      type: types.SET_READY_TO_CALCULATE,
    })
  }
export function addPrograms (programs) {
  return (dispatch) => {
    dispatch({
      type: types.ADD_PROGRAMS,
      payload: programs,
    })
  }
export function addYears (years) {
  return (dispatch) => {
    dispatch({
      type: types.ADD_YEARS,
      payload: years,
    })
  }
export function selectProgram (program) {
  return (dispatch) => {
    dispatch({
      type: types.SELECT_PROGRAM,
      payload: program,
    })
  }
export function selectYear (year) {
  return (dispatch) => {
    dispatch({
      type: types.SELECT_YEAR,
      payload: year,
    })
  }
export function getCourses (courses) {
  return (dispatch) => {
    dispatch({
      type: types.GET_COURSES,
      payload: courses,
    })
  }
export function setCurren
define([
	'app',
	'app/controllers/pages/projects_controller',
	'app/controllers/pages/project_details_controller',
	'app/controllers/dialogs/component_settings_controller',
	'app/controllers/dialogs/create_project_controller',
	'app/controllers/dialogs/create_page_controller',
	'app/controllers/dialogs/create_predefined_data_source_controller',
	'app/controllers/components/component_controller',
	'app/controllers/components/lists/grid_view_controller'
], function(app, ProjectsController, ProjectDetailsController,
		ComponentSettingsController, CreateProjectController,
		CreatePageController, CreateDataSourceController, ComponentController,
		GridViewController) {
	'use strict';
	app.
		controller('ProjectsController', ProjectsController).
		controller('ProjectDetailsController', ProjectDetailsController).
		controller('ComponentSettingsController', ComponentSettingsController).
		controller('CreateProjectController', CreateProjectController).
		controller('CreatePageController', Creat

